// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:10: 5:19>::eq(_1: &N, _2: &N) -> bool {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:10: 5:19
    let mut _3: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
    let mut _4: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _4 = ((*_2).0: u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _0 = Eq(move _3, move _4);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:19: 5:19
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26>::fmt(_1: &N, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
    debug f => _2;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
    let mut _4: &str;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
    let _5: &str;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
    let mut _7: &&u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
    let _8: &&u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
    let _9: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
        _5 = const "N";                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
        _9 = &((*_1).0: u8);             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _8 = &_9;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _7 = _8;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:26: 5:26
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:28: 5:33>::clone(_1: &N) -> N {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:28: 5:33
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:28: 5:33
    let mut _2: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
    let mut _3: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
    let _4: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12

    bb0: {
        _4 = &((*_1).0: u8);             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _3 = _4;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _2 = (*_3);                      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:10: 6:12
        _0 = N(move _2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:28: 5:33
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:33: 5:33
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:10: 8:19>::eq(_1: &Z, _2: &Z) -> bool {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:10: 8:19
    debug other => _2;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:10: 8:19
    let mut _0: bool;                    // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:10: 8:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:10: 8:19
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:19: 8:19
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26>::fmt(_1: &Z, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
    debug f => _2;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
    let mut _4: &str;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
    let _5: &str;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
        _5 = const "Z";                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:26: 8:26
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:28: 8:33>::clone(_1: &Z) -> Z {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:28: 8:33
    let mut _0: Z;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:28: 8:33

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:33: 8:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:66:11: 66:11
    let _1: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _2: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _3: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: (&[N; 2], &[N; 2]);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &[N; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &[N; 2];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &[N; 2];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: (&[N; 2], &[N; 2]);     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: &[N; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _28: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &[N; 2];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &[N; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &[N; 2];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _43: &[N; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _44: &[N; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _45: (&&[N; 2], &&[N; 2]);   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _47: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &&[N; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &&[N; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&&[N; 2], &&[N; 2]);   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _64: &&[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _65: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _70: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _71: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _73: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _74: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _75: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _76: &&[N; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _77: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _78: &&[N; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _80: &[N; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _81: &[N; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _82: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _83: (&&[N; 2], &&[N; 2]);   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _84: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _85: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &&[N; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &&[N; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &&[N; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: (&&[N; 2], &&[N; 2]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _101: &&[N; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _102: &&[N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _103: &&[N; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _107: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _108: &&[N; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _109: &&[N; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _111: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _112: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _113: &&[N; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _114: &&[N; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _115: &&[N; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _116: &&[N; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _118: [N; 0];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _119: [N; 0];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    let mut _120: (&[N; 0], &[N; 0]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _121: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _122: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _125: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _126: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _127: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _128: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _130: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _131: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _132: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _133: &[N; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _134: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _135: &[N; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _137: (&[N; 0], &[N; 0]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _138: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _139: &[N; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _140: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _143: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _144: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _145: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _146: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _148: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _149: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _150: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _151: &[N; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _152: &[N; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _153: &[N; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _155: &[N; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _156: &[N; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _157: (&&[N; 0], &&[N; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _158: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _159: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _162: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _163: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _164: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _165: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _167: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _168: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _169: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _170: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _171: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _172: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _173: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _174: (&&[N; 0], &&[N; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _175: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _176: &&[N; 0];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _177: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _180: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _181: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _182: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _183: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _185: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _186: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _187: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _188: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _189: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _190: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _192: &[N; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _193: &[N; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _194: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _195: (&&[N; 0], &&[N; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _196: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _197: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _200: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _201: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _202: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _203: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _205: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _206: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _207: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _208: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _209: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _210: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _211: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _212: (&&[N; 0], &&[N; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _213: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _214: &&[N; 0];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _215: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _218: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _219: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _220: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _221: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _223: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _224: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _225: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _226: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _227: &&[N; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _228: &&[N; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _229: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _230: N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _231: N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    let mut _232: (&N, &N);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _233: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _234: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _237: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _238: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _239: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _240: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _242: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _243: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _244: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _245: &N;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _246: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _247: &N;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _248: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _249: (&N, &N);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _250: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _251: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _252: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _255: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _256: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _257: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _258: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _260: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _261: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _262: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _263: &N;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _264: &N;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _265: &N;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _266: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _267: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _268: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _269: (&&N, &&N);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _270: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _271: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _274: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _275: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _276: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _277: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _279: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _280: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _281: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _282: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _283: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _284: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _285: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _286: (&&N, &&N);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _287: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _288: &&N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _289: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _292: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _293: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _294: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _295: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _297: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _298: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _299: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _300: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _301: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _302: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _303: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _304: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _305: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let _306: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let mut _307: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _308: (&&N, &&N);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _309: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _310: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _313: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _314: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _315: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _316: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _318: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _319: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _320: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _321: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _322: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _323: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _324: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _325: (&&N, &&N);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _326: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _327: &&N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _328: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _331: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _332: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _333: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _334: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _336: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _337: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _338: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _339: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _340: &&N;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _341: &&N;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _342: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _343: [Z; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _344: [Z; 2];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _345: (&[Z; 2], &[Z; 2]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _346: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _347: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _350: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _351: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _352: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _353: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _355: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _356: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _357: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _358: &[Z; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _359: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _360: &[Z; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _361: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _362: (&[Z; 2], &[Z; 2]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _363: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _364: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _365: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _368: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _369: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _370: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _371: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _373: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _374: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _375: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _376: &[Z; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _377: &[Z; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _378: &[Z; 2];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _379: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _380: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _381: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _382: (&&[Z; 2], &&[Z; 2]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _383: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _384: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _387: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _388: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _389: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _390: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _392: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _393: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _394: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _395: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _396: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _397: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _398: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _399: (&&[Z; 2], &&[Z; 2]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _400: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _401: &&[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _402: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _405: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _406: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _407: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _408: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _410: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _411: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _412: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _413: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _414: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _415: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _417: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _418: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _419: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _420: (&&[Z; 2], &&[Z; 2]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _421: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _422: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _425: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _426: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _427: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _428: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _430: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _431: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _432: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _433: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _434: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _435: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _436: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _437: (&&[Z; 2], &&[Z; 2]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _438: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _439: &&[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _440: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _443: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _444: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _445: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _446: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _448: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _449: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _450: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _451: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _452: &&[Z; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _453: &&[Z; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _454: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _455: [Z; 0];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _456: [Z; 0];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    let mut _457: (&[Z; 0], &[Z; 0]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _458: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _459: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _462: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _463: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _464: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _465: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _467: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _468: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _469: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _470: &[Z; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _471: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _472: &[Z; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _473: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _474: (&[Z; 0], &[Z; 0]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _475: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _476: &[Z; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _477: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _480: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _481: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _482: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _483: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _485: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _486: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _487: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _488: &[Z; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _489: &[Z; 0];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _490: &[Z; 0];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _491: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _492: &[Z; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _493: &[Z; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _494: (&&[Z; 0], &&[Z; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _495: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _496: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _499: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _500: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _501: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _502: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _504: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _505: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _506: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _507: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _508: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _509: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _510: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _511: (&&[Z; 0], &&[Z; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _512: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _513: &&[Z; 0];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _514: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _517: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _518: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _519: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _520: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _522: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _523: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _524: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _525: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _526: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _527: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _528: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _529: &[Z; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _530: &[Z; 0];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _531: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _532: (&&[Z; 0], &&[Z; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _533: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _534: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _537: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _538: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _539: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _540: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _542: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _543: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _544: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _545: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _546: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _547: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _548: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _549: (&&[Z; 0], &&[Z; 0]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _550: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _551: &&[Z; 0];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _552: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _555: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _556: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _557: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _558: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _560: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _561: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _562: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _563: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _564: &&[Z; 0];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _565: &&[Z; 0];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _566: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _567: Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _568: Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    let mut _569: (&Z, &Z);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _570: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _571: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _574: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _575: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _576: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _577: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _579: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _580: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _581: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _582: &Z;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _583: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _584: &Z;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _585: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _586: (&Z, &Z);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _587: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _588: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _589: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _592: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _593: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _594: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _595: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _597: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _598: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _599: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _600: &Z;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _601: &Z;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _602: &Z;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _603: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _604: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _605: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _606: (&&Z, &&Z);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _607: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _608: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _611: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _612: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _613: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _614: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _616: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _617: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _618: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _619: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _620: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _621: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _622: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _623: (&&Z, &&Z);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _624: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _625: &&Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _626: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _629: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _630: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _631: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _632: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _634: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _635: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _636: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _637: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _638: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _639: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _640: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _641: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _642: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let _643: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let mut _644: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _645: (&&Z, &&Z);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _646: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _647: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _650: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _651: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _652: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _653: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _655: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _656: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _657: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _658: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _659: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _660: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _661: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _662: (&&Z, &&Z);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _663: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _664: &&Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _665: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _668: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _669: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _670: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _671: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _673: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _674: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _675: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _676: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _677: &&Z;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _678: &&Z;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _679: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _680: u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _681: u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    let mut _682: (&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _683: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _684: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _687: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _688: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _689: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _690: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _692: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _693: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _694: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _695: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _696: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _697: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _698: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _699: (&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _700: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _701: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _702: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _705: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _706: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _707: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _708: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _710: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _711: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _712: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _713: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _714: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _715: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _716: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _717: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _718: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _719: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _720: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _721: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _724: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _725: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _726: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _727: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _729: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _730: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _731: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _732: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _733: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _734: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _735: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _736: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _737: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _738: &&u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _739: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _742: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _743: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _744: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _745: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _747: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _748: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _749: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _750: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _751: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _752: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _753: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _754: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _755: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    let mut _756: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let mut _757: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _758: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _759: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _762: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _763: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _764: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _765: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _767: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _768: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _769: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _770: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _771: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _772: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _773: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _774: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _775: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _776: &&u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _777: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _780: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _781: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _782: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _783: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _785: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _786: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _787: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _788: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _789: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _790: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _791: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _792: u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _793: u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    let mut _794: (&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _795: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _796: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _799: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _800: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _801: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _802: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _804: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _805: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _806: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _807: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _808: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _809: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _810: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _811: (&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _812: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _813: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _814: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _817: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _818: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _819: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _820: u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _822: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _823: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _824: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _825: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _826: &u8;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _827: &u8;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _828: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _829: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _830: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _831: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _832: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _833: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _836: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _837: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _838: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _839: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _841: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _842: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _843: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _844: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _845: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _846: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _847: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _848: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _849: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _850: &&u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _851: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _854: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _855: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _856: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _857: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _859: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _860: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _861: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _862: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _863: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _864: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _865: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _866: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
    let _867: &u8;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    let mut _868: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let mut _869: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _870: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _871: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _874: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _875: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _876: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _877: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _879: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _880: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _881: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _882: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _883: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _884: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _885: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _886: (&&u8, &&u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _887: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _888: &&u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
    let mut _889: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _892: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _893: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _894: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _895: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _897: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _898: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _899: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _900: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _901: &&u8;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _902: &&u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _903: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _905: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let mut _907: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _910: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let mut _912: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _915: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _917: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _920: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _922: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _925: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _927: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _930: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _932: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _935: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _937: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _940: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _942: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug runtime_eval => _1;        // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _11: &[N; 2];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &[N; 2];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: &[N; 2];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _30: &[N; 2];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _943: &[N; 2];           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 3 {
            debug left_val => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _17;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _29;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _30;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _35: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _35;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        debug x => _2;                   // in scope 2 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }
    scope 7 {
        debug runtime_eval => _43;       // in scope 7 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _48: &&[N; 2];               // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _49: &&[N; 2];               // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _66: &&[N; 2];               // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _67: &&[N; 2];               // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _941: &&[N; 2];          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 9 {
            debug left_val => _48;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _49;      // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _54: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 10 {
                debug kind => _54;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 11 {
            debug left_val => _66;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _67;      // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _72: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 12 {
                debug kind => _72;       // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 8 {
        debug x => _44;                  // in scope 8 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
    scope 13 {
        debug runtime_eval => _80;       // in scope 13 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _86: &&[N; 2];               // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _87: &&[N; 2];               // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _104: &&[N; 2];              // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _105: &&[N; 2];              // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _939: &&[N; 2];          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 15 {
            debug left_val => _86;       // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _87;      // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _92: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 16 {
                debug kind => _92;       // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 17 {
            debug left_val => _104;      // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _105;     // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _110: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 18 {
                debug kind => _110;      // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 14 {
        debug x => _81;                  // in scope 14 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }
    scope 19 {
        debug runtime_eval => _118;      // in scope 19 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _123: &[N; 0];               // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _124: &[N; 0];               // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _141: &[N; 0];               // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _142: &[N; 0];               // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _938: &[N; 0];           // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 21 {
            debug left_val => _123;      // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _124;     // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _129: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 22 {
                debug kind => _129;      // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 23 {
            debug left_val => _141;      // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _142;     // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _147: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 24 {
                debug kind => _147;      // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 20 {
        debug x => _119;                 // in scope 20 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }
    scope 25 {
        debug runtime_eval => _155;      // in scope 25 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _160: &&[N; 0];              // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _161: &&[N; 0];              // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _178: &&[N; 0];              // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _179: &&[N; 0];              // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _936: &&[N; 0];          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 27 {
            debug left_val => _160;      // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _161;     // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _166: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 28 {
                debug kind => _166;      // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 29 {
            debug left_val => _178;      // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _179;     // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _184: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 30 {
                debug kind => _184;      // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 26 {
        debug x => _156;                 // in scope 26 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
    scope 31 {
        debug runtime_eval => _192;      // in scope 31 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _198: &&[N; 0];              // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _199: &&[N; 0];              // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _216: &&[N; 0];              // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _217: &&[N; 0];              // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _934: &&[N; 0];          // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 33 {
            debug left_val => _198;      // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _199;     // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _204: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 34 {
                debug kind => _204;      // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 35 {
            debug left_val => _216;      // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _217;     // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _222: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 36 {
                debug kind => _222;      // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 32 {
        debug x => _193;                 // in scope 32 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }
    scope 37 {
        debug runtime_eval => _230;      // in scope 37 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _235: &N;                    // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _236: &N;                    // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _253: &N;                    // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _254: &N;                    // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _933: &N;                // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 39 {
            debug left_val => _235;      // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _236;     // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _241: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 40 {
                debug kind => _241;      // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 41 {
            debug left_val => _253;      // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _254;     // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _259: core::panicking::AssertKind; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 42 {
                debug kind => _259;      // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 38 {
        debug x => _231;                 // in scope 38 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }
    scope 43 {
        debug runtime_eval => _267;      // in scope 43 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _272: &&N;                   // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _273: &&N;                   // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _290: &&N;                   // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _291: &&N;                   // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _931: &&N;               // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 45 {
            debug left_val => _272;      // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _273;     // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _278: core::panicking::AssertKind; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 46 {
                debug kind => _278;      // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 47 {
            debug left_val => _290;      // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _291;     // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _296: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 48 {
                debug kind => _296;      // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 44 {
        debug x => _268;                 // in scope 44 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
    scope 49 {
        debug runtime_eval => _304;      // in scope 49 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _311: &&N;                   // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _312: &&N;                   // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _329: &&N;                   // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _330: &&N;                   // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _929: &&N;               // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 51 {
            debug left_val => _311;      // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _312;     // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _317: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 52 {
                debug kind => _317;      // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 53 {
            debug left_val => _329;      // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _330;     // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _335: core::panicking::AssertKind; // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 54 {
                debug kind => _335;      // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 50 {
        debug _y => _305;                // in scope 50 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _306;                 // in scope 50 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }
    scope 55 {
        debug runtime_eval => _343;      // in scope 55 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _348: &[Z; 2];               // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _349: &[Z; 2];               // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _366: &[Z; 2];               // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _367: &[Z; 2];               // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _928: &[Z; 2];           // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 57 {
            debug left_val => _348;      // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _349;     // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _354: core::panicking::AssertKind; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 58 {
                debug kind => _354;      // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 59 {
            debug left_val => _366;      // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _367;     // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _372: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 60 {
                debug kind => _372;      // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 56 {
        debug x => _344;                 // in scope 56 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }
    scope 61 {
        debug runtime_eval => _380;      // in scope 61 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _385: &&[Z; 2];              // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _386: &&[Z; 2];              // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _403: &&[Z; 2];              // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _404: &&[Z; 2];              // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _926: &&[Z; 2];          // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 63 {
            debug left_val => _385;      // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _386;     // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _391: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 64 {
                debug kind => _391;      // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 65 {
            debug left_val => _403;      // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _404;     // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _409: core::panicking::AssertKind; // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 66 {
                debug kind => _409;      // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 62 {
        debug x => _381;                 // in scope 62 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
    scope 67 {
        debug runtime_eval => _417;      // in scope 67 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _423: &&[Z; 2];              // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _424: &&[Z; 2];              // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _441: &&[Z; 2];              // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _442: &&[Z; 2];              // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _924: &&[Z; 2];          // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 69 {
            debug left_val => _423;      // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _424;     // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _429: core::panicking::AssertKind; // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 70 {
                debug kind => _429;      // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 71 {
            debug left_val => _441;      // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _442;     // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _447: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 72 {
                debug kind => _447;      // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 68 {
        debug x => _418;                 // in scope 68 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }
    scope 73 {
        debug runtime_eval => _455;      // in scope 73 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _460: &[Z; 0];               // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _461: &[Z; 0];               // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _478: &[Z; 0];               // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _479: &[Z; 0];               // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _923: &[Z; 0];           // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 75 {
            debug left_val => _460;      // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _461;     // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _466: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 76 {
                debug kind => _466;      // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 77 {
            debug left_val => _478;      // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _479;     // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _484: core::panicking::AssertKind; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 78 {
                debug kind => _484;      // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 74 {
        debug x => _456;                 // in scope 74 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }
    scope 79 {
        debug runtime_eval => _492;      // in scope 79 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _497: &&[Z; 0];              // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _498: &&[Z; 0];              // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _515: &&[Z; 0];              // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _516: &&[Z; 0];              // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _921: &&[Z; 0];          // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 81 {
            debug left_val => _497;      // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _498;     // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _503: core::panicking::AssertKind; // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 82 {
                debug kind => _503;      // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 83 {
            debug left_val => _515;      // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _516;     // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _521: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 84 {
                debug kind => _521;      // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 80 {
        debug x => _493;                 // in scope 80 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
    scope 85 {
        debug runtime_eval => _529;      // in scope 85 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _535: &&[Z; 0];              // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _536: &&[Z; 0];              // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _553: &&[Z; 0];              // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _554: &&[Z; 0];              // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _919: &&[Z; 0];          // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 87 {
            debug left_val => _535;      // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _536;     // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _541: core::panicking::AssertKind; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 88 {
                debug kind => _541;      // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 89 {
            debug left_val => _553;      // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _554;     // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _559: core::panicking::AssertKind; // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 90 {
                debug kind => _559;      // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 86 {
        debug x => _530;                 // in scope 86 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }
    scope 91 {
        debug runtime_eval => _567;      // in scope 91 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _572: &Z;                    // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _573: &Z;                    // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _590: &Z;                    // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _591: &Z;                    // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _918: &Z;                // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 93 {
            debug left_val => _572;      // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _573;     // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _578: core::panicking::AssertKind; // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 94 {
                debug kind => _578;      // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 95 {
            debug left_val => _590;      // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _591;     // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _596: core::panicking::AssertKind; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 96 {
                debug kind => _596;      // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 92 {
        debug x => _568;                 // in scope 92 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }
    scope 97 {
        debug runtime_eval => _604;      // in scope 97 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _609: &&Z;                   // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _610: &&Z;                   // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _627: &&Z;                   // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _628: &&Z;                   // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _916: &&Z;               // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 99 {
            debug left_val => _609;      // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _610;     // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _615: core::panicking::AssertKind; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 100 {
                debug kind => _615;      // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 101 {
            debug left_val => _627;      // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _628;     // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _633: core::panicking::AssertKind; // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 102 {
                debug kind => _633;      // in scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 98 {
        debug x => _605;                 // in scope 98 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
    scope 103 {
        debug runtime_eval => _641;      // in scope 103 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _648: &&Z;                   // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _649: &&Z;                   // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _666: &&Z;                   // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _667: &&Z;                   // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _914: &&Z;               // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 105 {
            debug left_val => _648;      // in scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _649;     // in scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _654: core::panicking::AssertKind; // in scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 106 {
                debug kind => _654;      // in scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 107 {
            debug left_val => _666;      // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _667;     // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _672: core::panicking::AssertKind; // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 108 {
                debug kind => _672;      // in scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 104 {
        debug _y => _642;                // in scope 104 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _643;                 // in scope 104 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }
    scope 109 {
        debug runtime_eval => _680;      // in scope 109 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _685: &u8;                   // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _686: &u8;                   // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _703: &u8;                   // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _704: &u8;                   // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _913: &u8;               // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 111 {
            debug left_val => _685;      // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _686;     // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _691: core::panicking::AssertKind; // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 112 {
                debug kind => _691;      // in scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 113 {
            debug left_val => _703;      // in scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _704;     // in scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _709: core::panicking::AssertKind; // in scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 114 {
                debug kind => _709;      // in scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 110 {
        debug x => _681;                 // in scope 110 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    }
    scope 115 {
        debug runtime_eval => _717;      // in scope 115 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _722: &&u8;                  // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _723: &&u8;                  // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _740: &&u8;                  // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _741: &&u8;                  // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _911: &&u8;              // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 117 {
            debug left_val => _722;      // in scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _723;     // in scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _728: core::panicking::AssertKind; // in scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 118 {
                debug kind => _728;      // in scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 119 {
            debug left_val => _740;      // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _741;     // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _746: core::panicking::AssertKind; // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 120 {
                debug kind => _746;      // in scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 116 {
        debug x => _718;                 // in scope 116 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }
    scope 121 {
        debug runtime_eval => _754;      // in scope 121 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _760: &&u8;                  // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _761: &&u8;                  // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _778: &&u8;                  // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _779: &&u8;                  // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _909: &&u8;              // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 123 {
            debug left_val => _760;      // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _761;     // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _766: core::panicking::AssertKind; // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 124 {
                debug kind => _766;      // in scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 125 {
            debug left_val => _778;      // in scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _779;     // in scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _784: core::panicking::AssertKind; // in scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 126 {
                debug kind => _784;      // in scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 122 {
        debug x => _755;                 // in scope 122 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    }
    scope 127 {
        debug runtime_eval => _792;      // in scope 127 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _797: &u8;                   // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _798: &u8;                   // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _815: &u8;                   // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _816: &u8;                   // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _908: &u8;               // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 129 {
            debug left_val => _797;      // in scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _798;     // in scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _803: core::panicking::AssertKind; // in scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 130 {
                debug kind => _803;      // in scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 131 {
            debug left_val => _815;      // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _816;     // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _821: core::panicking::AssertKind; // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 132 {
                debug kind => _821;      // in scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 128 {
        debug x => _793;                 // in scope 128 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    }
    scope 133 {
        debug runtime_eval => _829;      // in scope 133 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _834: &&u8;                  // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _835: &&u8;                  // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _852: &&u8;                  // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _853: &&u8;                  // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _906: &&u8;              // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 135 {
            debug left_val => _834;      // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _835;     // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _840: core::panicking::AssertKind; // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 136 {
                debug kind => _840;      // in scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 137 {
            debug left_val => _852;      // in scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _853;     // in scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _858: core::panicking::AssertKind; // in scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 138 {
                debug kind => _858;      // in scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 134 {
        debug x => _830;                 // in scope 134 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }
    scope 139 {
        debug runtime_eval => _866;      // in scope 139 at ui/array-slice-vec/subslice-patterns-const-eval.rs:35:13: 35:25
        let _872: &&u8;                  // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _873: &&u8;                  // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _890: &&u8;                  // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _891: &&u8;                  // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _904: &&u8;              // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 141 {
            debug left_val => _872;      // in scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _873;     // in scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _878: core::panicking::AssertKind; // in scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 142 {
                debug kind => _878;      // in scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 143 {
            debug left_val => _890;      // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _891;     // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _896: core::panicking::AssertKind; // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 144 {
                debug kind => _896;      // in scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 140 {
        debug x => _867;                 // in scope 140 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    }

    bb0: {
        _4 = const N(1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x01)) }
        _5 = const N(2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x02)) }
        _6 = const N(3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x03)) }
        _7 = const N(4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x04)) }
        _3 = [move _4, move _5, move _6, move _7]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _2 = move _3[1..3];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        _1 = move _2;                    // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:71: 69:72
        _943 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[39])) }
        _9 = _943;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &[N; 2]);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &[N; 2]);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <[N; 2] as PartialEq>::eq(move _15, move _16) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [N; 2], &'b [N; 2]) -> bool {<[N; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = Not(move _14);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<[N; 2], [N; 2]>(move _19, move _20, move _22, move _24); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [N; 2], &'b [N; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[N; 2], [N; 2]>}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = const {alloc1: &[N; 2]};   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &[N; 2], val: Value(Scalar(alloc1)) }
        _26 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _28);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_25.0: &[N; 2]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_25.1: &[N; 2]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = <[N; 2] as PartialEq>::eq(move _33, move _34) -> bb4; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [N; 2], &'b [N; 2]) -> bool {<[N; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _31 = Not(move _32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<[N; 2], [N; 2]>(move _37, move _38, move _40, move _42); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [N; 2], &'b [N; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[N; 2], [N; 2]>}, val: Value(<ZST>) }
    }

    bb6: {
        _942 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[38])) }
        _44 = &(*_942)[1..3];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _43 = _44;                       // scope 8 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:75: 70:76
        _941 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[N; 2], val: Unevaluated(main, [], Some(promoted[37])) }
        _46 = _941;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = &_43;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _47);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_45.0: &&[N; 2]);         // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_45.1: &&[N; 2]);         // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <&[N; 2] as PartialEq>::eq(move _52, move _53) -> bb7; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 2], &'b &[N; 2]) -> bool {<&[N; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _50 = Not(move _51);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb9, otherwise: bb8]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _54 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _56, move _57, move _59, move _61); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 2], &'b &[N; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 2], &[N; 2]>}, val: Value(<ZST>) }
    }

    bb9: {
        _64 = const {alloc2: &&[N; 2]};  // scope 7 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[N; 2], val: Value(Scalar(alloc2)) }
        _63 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = &_43;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _65);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _66 = (_62.0: &&[N; 2]);         // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _67 = (_62.1: &&[N; 2]);         // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _70 = _66;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _71 = _67;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _69 = <&[N; 2] as PartialEq>::eq(move _70, move _71) -> bb10; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 2], &'b &[N; 2]) -> bool {<&[N; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _68 = Not(move _69);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _68) -> [0: bb12, otherwise: bb11]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _72 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = _66;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _76;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _67;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = _78;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _73 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _74, move _75, move _77, move _79); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 2], &'b &[N; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 2], &[N; 2]>}, val: Value(<ZST>) }
    }

    bb12: {
        _940 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[36])) }
        _82 = _940;                      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _81 = &(*_82)[1..3];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        _80 = _81;                       // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:72: 71:73
        _939 = const _;                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[N; 2], val: Unevaluated(main, [], Some(promoted[35])) }
        _84 = _939;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _85 = &_80;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _83 = (move _84, move _85);      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_83.0: &&[N; 2]);         // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_83.1: &&[N; 2]);         // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = _86;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = _87;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = <&[N; 2] as PartialEq>::eq(move _90, move _91) -> bb13; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 2], &'b &[N; 2]) -> bool {<&[N; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _88 = Not(move _89);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb15, otherwise: bb14]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _92 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _94, move _95, move _97, move _99); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 2], &'b &[N; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 2], &[N; 2]>}, val: Value(<ZST>) }
    }

    bb15: {
        _102 = const {alloc3: &&[N; 2]}; // scope 13 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[N; 2], val: Value(Scalar(alloc3)) }
        _101 = _102;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = &_80;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _100 = (move _101, move _103);   // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _104 = (_100.0: &&[N; 2]);       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _105 = (_100.1: &&[N; 2]);       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _108 = _104;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _109 = _105;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _107 = <&[N; 2] as PartialEq>::eq(move _108, move _109) -> bb16; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 2], &'b &[N; 2]) -> bool {<&[N; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _106 = Not(move _107);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _106) -> [0: bb18, otherwise: bb17]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _110 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _112 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _114 = _104;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _113 = _114;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _116 = _105;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _115 = _116;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _117 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _111 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _112, move _113, move _115, move _117); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 2], &'b &[N; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 2], &[N; 2]>}, val: Value(<ZST>) }
    }

    bb18: {
        _938 = const _;                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &[N; 0], val: Unevaluated(main, [], Some(promoted[34])) }
        _121 = _938;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _122 = &_118;                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _120 = (move _121, move _122);   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _123 = (_120.0: &[N; 0]);        // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _124 = (_120.1: &[N; 0]);        // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _127 = _123;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _128 = _124;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _126 = <[N; 0] as PartialEq>::eq(move _127, move _128) -> bb19; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [N; 0], &'b [N; 0]) -> bool {<[N; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb19: {
        _125 = Not(move _126);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _125) -> [0: bb21, otherwise: bb20]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb20: {
        _129 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _131 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _133 = _123;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _132 = _133;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _135 = _124;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _134 = _135;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _136 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _130 = core::panicking::assert_failed::<[N; 0], [N; 0]>(move _131, move _132, move _134, move _136); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [N; 0], &'b [N; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[N; 0], [N; 0]>}, val: Value(<ZST>) }
    }

    bb21: {
        _139 = const {alloc4: &[N; 0]};  // scope 19 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &[N; 0], val: Value(Scalar(alloc4)) }
        _138 = _139;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _140 = &_118;                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _137 = (move _138, move _140);   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _141 = (_137.0: &[N; 0]);        // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _142 = (_137.1: &[N; 0]);        // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _145 = _141;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _146 = _142;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _144 = <[N; 0] as PartialEq>::eq(move _145, move _146) -> bb22; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [N; 0], &'b [N; 0]) -> bool {<[N; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _143 = Not(move _144);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _143) -> [0: bb24, otherwise: bb23]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _147 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _149 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _151 = _141;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _150 = _151;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _153 = _142;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _152 = _153;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _154 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _148 = core::panicking::assert_failed::<[N; 0], [N; 0]>(move _149, move _150, move _152, move _154); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [N; 0], &'b [N; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[N; 0], [N; 0]>}, val: Value(<ZST>) }
    }

    bb24: {
        _937 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[33])) }
        _156 = &(*_937)[2..2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _155 = _156;                     // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:65: 75:66
        _936 = const _;                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[N; 0], val: Unevaluated(main, [], Some(promoted[32])) }
        _158 = _936;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _159 = &_155;                    // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _157 = (move _158, move _159);   // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _160 = (_157.0: &&[N; 0]);       // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _161 = (_157.1: &&[N; 0]);       // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _164 = _160;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _165 = _161;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _163 = <&[N; 0] as PartialEq>::eq(move _164, move _165) -> bb25; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 0], &'b &[N; 0]) -> bool {<&[N; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb25: {
        _162 = Not(move _163);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _162) -> [0: bb27, otherwise: bb26]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _166 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _168 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _170 = _160;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _169 = _170;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _172 = _161;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _171 = _172;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _173 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _167 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _168, move _169, move _171, move _173); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 0], &'b &[N; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 0], &[N; 0]>}, val: Value(<ZST>) }
    }

    bb27: {
        _176 = const {alloc5: &&[N; 0]}; // scope 25 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[N; 0], val: Value(Scalar(alloc5)) }
        _175 = _176;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _177 = &_155;                    // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _174 = (move _175, move _177);   // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _178 = (_174.0: &&[N; 0]);       // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _179 = (_174.1: &&[N; 0]);       // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _182 = _178;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _183 = _179;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _181 = <&[N; 0] as PartialEq>::eq(move _182, move _183) -> bb28; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 0], &'b &[N; 0]) -> bool {<&[N; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb28: {
        _180 = Not(move _181);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _180) -> [0: bb30, otherwise: bb29]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _184 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _186 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _188 = _178;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _187 = _188;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _190 = _179;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _189 = _190;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _191 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _185 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _186, move _187, move _189, move _191); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 0], &'b &[N; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 0], &[N; 0]>}, val: Value(<ZST>) }
    }

    bb30: {
        _935 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[31])) }
        _194 = _935;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _193 = &(*_194)[2..2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        _192 = _193;                     // scope 32 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:62: 79:63
        _934 = const _;                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[N; 0], val: Unevaluated(main, [], Some(promoted[30])) }
        _196 = _934;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _197 = &_192;                    // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _195 = (move _196, move _197);   // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _198 = (_195.0: &&[N; 0]);       // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _199 = (_195.1: &&[N; 0]);       // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _202 = _198;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _203 = _199;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _201 = <&[N; 0] as PartialEq>::eq(move _202, move _203) -> bb31; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 0], &'b &[N; 0]) -> bool {<&[N; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _200 = Not(move _201);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _200) -> [0: bb33, otherwise: bb32]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _204 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _206 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _208 = _198;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _207 = _208;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _210 = _199;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _209 = _210;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _211 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _205 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _206, move _207, move _209, move _211); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 0], &'b &[N; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 0], &[N; 0]>}, val: Value(<ZST>) }
    }

    bb33: {
        _214 = const {alloc6: &&[N; 0]}; // scope 31 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[N; 0], val: Value(Scalar(alloc6)) }
        _213 = _214;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _215 = &_192;                    // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _212 = (move _213, move _215);   // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _216 = (_212.0: &&[N; 0]);       // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _217 = (_212.1: &&[N; 0]);       // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _220 = _216;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _221 = _217;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _219 = <&[N; 0] as PartialEq>::eq(move _220, move _221) -> bb34; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[N; 0], &'b &[N; 0]) -> bool {<&[N; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _218 = Not(move _219);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _218) -> [0: bb36, otherwise: bb35]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _222 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _224 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _226 = _216;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _225 = _226;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _228 = _217;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _227 = _228;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _229 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _223 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _224, move _225, move _227, move _229); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[N; 0], &'b &[N; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[N; 0], &[N; 0]>}, val: Value(<ZST>) }
    }

    bb36: {
        _231 = const N(4_u8);            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
                                         // + literal: Const { ty: N, val: Value(Scalar(0x04)) }
        _230 = move _231;                // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
        _933 = const _;                  // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &N, val: Unevaluated(main, [], Some(promoted[29])) }
        _233 = _933;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _234 = &_230;                    // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _232 = (move _233, move _234);   // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _235 = (_232.0: &N);             // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _236 = (_232.1: &N);             // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _239 = _235;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _240 = _236;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _238 = <N as PartialEq>::eq(move _239, move _240) -> bb37; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a N, &'b N) -> bool {<N as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb37: {
        _237 = Not(move _238);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _237) -> [0: bb39, otherwise: bb38]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb38: {
        _241 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _243 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _245 = _235;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _244 = _245;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _247 = _236;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _246 = _247;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _248 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _242 = core::panicking::assert_failed::<N, N>(move _243, move _244, move _246, move _248); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a N, &'b N, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<N, N>}, val: Value(<ZST>) }
    }

    bb39: {
        _251 = const {alloc7: &N};       // scope 37 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &N, val: Value(Scalar(alloc7)) }
        _250 = _251;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _252 = &_230;                    // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _249 = (move _250, move _252);   // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _253 = (_249.0: &N);             // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _254 = (_249.1: &N);             // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _257 = _253;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _258 = _254;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _256 = <N as PartialEq>::eq(move _257, move _258) -> bb40; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a N, &'b N) -> bool {<N as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb40: {
        _255 = Not(move _256);           // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _255) -> [0: bb42, otherwise: bb41]; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _259 = const core::panicking::AssertKind::Eq; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _261 = const core::panicking::AssertKind::Eq; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _263 = _253;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _262 = _263;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _265 = _254;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _264 = _265;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _266 = Option::<Arguments<'_>>::None; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _260 = core::panicking::assert_failed::<N, N>(move _261, move _262, move _264, move _266); // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a N, &'b N, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<N, N>}, val: Value(<ZST>) }
    }

    bb42: {
        _932 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[28])) }
        _268 = &(*_932)[3 of 4];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _267 = _268;                     // scope 44 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:71: 84:72
        _931 = const _;                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&N, val: Unevaluated(main, [], Some(promoted[27])) }
        _270 = _931;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _271 = &_267;                    // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _269 = (move _270, move _271);   // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _272 = (_269.0: &&N);            // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _273 = (_269.1: &&N);            // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _276 = _272;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _277 = _273;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _275 = <&N as PartialEq>::eq(move _276, move _277) -> bb43; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &N, &'b &N) -> bool {<&N as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb43: {
        _274 = Not(move _275);           // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _274) -> [0: bb45, otherwise: bb44]; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb44: {
        _278 = const core::panicking::AssertKind::Eq; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _280 = const core::panicking::AssertKind::Eq; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _282 = _272;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _281 = _282;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _284 = _273;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _283 = _284;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _285 = Option::<Arguments<'_>>::None; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _279 = core::panicking::assert_failed::<&N, &N>(move _280, move _281, move _283, move _285); // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &N, &'b &N, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&N, &N>}, val: Value(<ZST>) }
    }

    bb45: {
        _288 = const {alloc8: &&N};      // scope 43 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&N, val: Value(Scalar(alloc8)) }
        _287 = _288;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _289 = &_267;                    // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _286 = (move _287, move _289);   // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _290 = (_286.0: &&N);            // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _291 = (_286.1: &&N);            // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _294 = _290;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _295 = _291;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _293 = <&N as PartialEq>::eq(move _294, move _295) -> bb46; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &N, &'b &N) -> bool {<&N as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _292 = Not(move _293);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _292) -> [0: bb48, otherwise: bb47]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _296 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _298 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _300 = _290;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _299 = _300;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _302 = _291;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _301 = _302;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _303 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _297 = core::panicking::assert_failed::<&N, &N>(move _298, move _299, move _301, move _303); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &N, &'b &N, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&N, &N>}, val: Value(<ZST>) }
    }

    bb48: {
        _930 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[26])) }
        _307 = _930;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _305 = &(*_307)[1..3];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _306 = &(*_307)[3 of 4];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        _304 = _306;                     // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:73: 85:74
        _929 = const _;                  // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&N, val: Unevaluated(main, [], Some(promoted[25])) }
        _309 = _929;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _310 = &_304;                    // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _308 = (move _309, move _310);   // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _311 = (_308.0: &&N);            // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _312 = (_308.1: &&N);            // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _315 = _311;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _316 = _312;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _314 = <&N as PartialEq>::eq(move _315, move _316) -> bb49; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &N, &'b &N) -> bool {<&N as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb49: {
        _313 = Not(move _314);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _313) -> [0: bb51, otherwise: bb50]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb50: {
        _317 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _319 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _321 = _311;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _320 = _321;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _323 = _312;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _322 = _323;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _324 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _318 = core::panicking::assert_failed::<&N, &N>(move _319, move _320, move _322, move _324); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &N, &'b &N, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&N, &N>}, val: Value(<ZST>) }
    }

    bb51: {
        _327 = const {alloc9: &&N};      // scope 49 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&N, val: Value(Scalar(alloc9)) }
        _326 = _327;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _328 = &_304;                    // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _325 = (move _326, move _328);   // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _329 = (_325.0: &&N);            // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _330 = (_325.1: &&N);            // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _333 = _329;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _334 = _330;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _332 = <&N as PartialEq>::eq(move _333, move _334) -> bb52; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &N, &'b &N) -> bool {<&N as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb52: {
        _331 = Not(move _332);           // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _331) -> [0: bb54, otherwise: bb53]; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _335 = const core::panicking::AssertKind::Eq; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _337 = const core::panicking::AssertKind::Eq; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _339 = _329;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _338 = _339;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _341 = _330;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _340 = _341;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _342 = Option::<Arguments<'_>>::None; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _336 = core::panicking::assert_failed::<&N, &N>(move _337, move _338, move _340, move _342); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &N, &'b &N, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&N, &N>}, val: Value(<ZST>) }
    }

    bb54: {
        _928 = const _;                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[24])) }
        _346 = _928;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _347 = &_343;                    // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _345 = (move _346, move _347);   // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _348 = (_345.0: &[Z; 2]);        // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _349 = (_345.1: &[Z; 2]);        // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _352 = _348;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _353 = _349;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _351 = <[Z; 2] as PartialEq>::eq(move _352, move _353) -> bb55; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [Z; 2], &'b [Z; 2]) -> bool {<[Z; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb55: {
        _350 = Not(move _351);           // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _350) -> [0: bb57, otherwise: bb56]; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb56: {
        _354 = const core::panicking::AssertKind::Eq; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _356 = const core::panicking::AssertKind::Eq; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _358 = _348;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _357 = _358;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _360 = _349;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _359 = _360;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _361 = Option::<Arguments<'_>>::None; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _355 = core::panicking::assert_failed::<[Z; 2], [Z; 2]>(move _356, move _357, move _359, move _361); // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [Z; 2], &'b [Z; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[Z; 2], [Z; 2]>}, val: Value(<ZST>) }
    }

    bb57: {
        _364 = const {alloc10: &[Z; 2]}; // scope 55 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &[Z; 2], val: Value(Scalar(alloc10)) }
        _363 = _364;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _365 = &_343;                    // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _362 = (move _363, move _365);   // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _366 = (_362.0: &[Z; 2]);        // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _367 = (_362.1: &[Z; 2]);        // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _370 = _366;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _371 = _367;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _369 = <[Z; 2] as PartialEq>::eq(move _370, move _371) -> bb58; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [Z; 2], &'b [Z; 2]) -> bool {<[Z; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb58: {
        _368 = Not(move _369);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _368) -> [0: bb60, otherwise: bb59]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb59: {
        _372 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _374 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _376 = _366;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _375 = _376;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _378 = _367;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _377 = _378;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _379 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _373 = core::panicking::assert_failed::<[Z; 2], [Z; 2]>(move _374, move _375, move _377, move _379); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [Z; 2], &'b [Z; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[Z; 2], [Z; 2]>}, val: Value(<ZST>) }
    }

    bb60: {
        _927 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[23])) }
        _381 = &(*_927)[1..3];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _380 = _381;                     // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:75: 70:76
        _926 = const _;                  // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[Z; 2], val: Unevaluated(main, [], Some(promoted[22])) }
        _383 = _926;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _384 = &_380;                    // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _382 = (move _383, move _384);   // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _385 = (_382.0: &&[Z; 2]);       // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _386 = (_382.1: &&[Z; 2]);       // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _389 = _385;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _390 = _386;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _388 = <&[Z; 2] as PartialEq>::eq(move _389, move _390) -> bb61; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 2], &'b &[Z; 2]) -> bool {<&[Z; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _387 = Not(move _388);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _387) -> [0: bb63, otherwise: bb62]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _391 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _393 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _395 = _385;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _394 = _395;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _397 = _386;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _396 = _397;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _398 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _392 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _393, move _394, move _396, move _398); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 2], &'b &[Z; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>}, val: Value(<ZST>) }
    }

    bb63: {
        _401 = const {alloc11: &&[Z; 2]}; // scope 61 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[Z; 2], val: Value(Scalar(alloc11)) }
        _400 = _401;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _402 = &_380;                    // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _399 = (move _400, move _402);   // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _403 = (_399.0: &&[Z; 2]);       // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _404 = (_399.1: &&[Z; 2]);       // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _407 = _403;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _408 = _404;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _406 = <&[Z; 2] as PartialEq>::eq(move _407, move _408) -> bb64; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 2], &'b &[Z; 2]) -> bool {<&[Z; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb64: {
        _405 = Not(move _406);           // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _405) -> [0: bb66, otherwise: bb65]; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb65: {
        _409 = const core::panicking::AssertKind::Eq; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _411 = const core::panicking::AssertKind::Eq; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _413 = _403;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _412 = _413;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _415 = _404;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _414 = _415;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _416 = Option::<Arguments<'_>>::None; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _410 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _411, move _412, move _414, move _416); // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 2], &'b &[Z; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>}, val: Value(<ZST>) }
    }

    bb66: {
        _925 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[21])) }
        _419 = _925;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _418 = &(*_419)[1..3];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        _417 = _418;                     // scope 68 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:72: 71:73
        _924 = const _;                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[Z; 2], val: Unevaluated(main, [], Some(promoted[20])) }
        _421 = _924;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _422 = &_417;                    // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _420 = (move _421, move _422);   // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _423 = (_420.0: &&[Z; 2]);       // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _424 = (_420.1: &&[Z; 2]);       // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _427 = _423;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _428 = _424;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _426 = <&[Z; 2] as PartialEq>::eq(move _427, move _428) -> bb67; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 2], &'b &[Z; 2]) -> bool {<&[Z; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb67: {
        _425 = Not(move _426);           // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _425) -> [0: bb69, otherwise: bb68]; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb68: {
        _429 = const core::panicking::AssertKind::Eq; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _431 = const core::panicking::AssertKind::Eq; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _433 = _423;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _432 = _433;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _435 = _424;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _434 = _435;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _436 = Option::<Arguments<'_>>::None; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _430 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _431, move _432, move _434, move _436); // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 2], &'b &[Z; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>}, val: Value(<ZST>) }
    }

    bb69: {
        _439 = const {alloc12: &&[Z; 2]}; // scope 67 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[Z; 2], val: Value(Scalar(alloc12)) }
        _438 = _439;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _440 = &_417;                    // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _437 = (move _438, move _440);   // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _441 = (_437.0: &&[Z; 2]);       // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _442 = (_437.1: &&[Z; 2]);       // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _445 = _441;                     // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _446 = _442;                     // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _444 = <&[Z; 2] as PartialEq>::eq(move _445, move _446) -> bb70; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 2], &'b &[Z; 2]) -> bool {<&[Z; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb70: {
        _443 = Not(move _444);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _443) -> [0: bb72, otherwise: bb71]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb71: {
        _447 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _449 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _451 = _441;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _450 = _451;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _453 = _442;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _452 = _453;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _454 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _448 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _449, move _450, move _452, move _454); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 2], &'b &[Z; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>}, val: Value(<ZST>) }
    }

    bb72: {
        _923 = const _;                  // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &[Z; 0], val: Unevaluated(main, [], Some(promoted[19])) }
        _458 = _923;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _459 = &_455;                    // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _457 = (move _458, move _459);   // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _460 = (_457.0: &[Z; 0]);        // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _461 = (_457.1: &[Z; 0]);        // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _464 = _460;                     // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _465 = _461;                     // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _463 = <[Z; 0] as PartialEq>::eq(move _464, move _465) -> bb73; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [Z; 0], &'b [Z; 0]) -> bool {<[Z; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb73: {
        _462 = Not(move _463);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _462) -> [0: bb75, otherwise: bb74]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb74: {
        _466 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _468 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _470 = _460;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _469 = _470;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _472 = _461;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _471 = _472;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _473 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _467 = core::panicking::assert_failed::<[Z; 0], [Z; 0]>(move _468, move _469, move _471, move _473); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [Z; 0], &'b [Z; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[Z; 0], [Z; 0]>}, val: Value(<ZST>) }
    }

    bb75: {
        _476 = const {alloc13: &[Z; 0]}; // scope 73 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &[Z; 0], val: Value(Scalar(alloc13)) }
        _475 = _476;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _477 = &_455;                    // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _474 = (move _475, move _477);   // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _478 = (_474.0: &[Z; 0]);        // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _479 = (_474.1: &[Z; 0]);        // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _482 = _478;                     // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _483 = _479;                     // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _481 = <[Z; 0] as PartialEq>::eq(move _482, move _483) -> bb76; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [Z; 0], &'b [Z; 0]) -> bool {<[Z; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb76: {
        _480 = Not(move _481);           // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _480) -> [0: bb78, otherwise: bb77]; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _484 = const core::panicking::AssertKind::Eq; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _486 = const core::panicking::AssertKind::Eq; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _488 = _478;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _487 = _488;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _490 = _479;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _489 = _490;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _491 = Option::<Arguments<'_>>::None; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _485 = core::panicking::assert_failed::<[Z; 0], [Z; 0]>(move _486, move _487, move _489, move _491); // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [Z; 0], &'b [Z; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[Z; 0], [Z; 0]>}, val: Value(<ZST>) }
    }

    bb78: {
        _922 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[18])) }
        _493 = &(*_922)[2..2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _492 = _493;                     // scope 80 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:65: 75:66
        _921 = const _;                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[Z; 0], val: Unevaluated(main, [], Some(promoted[17])) }
        _495 = _921;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _496 = &_492;                    // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _494 = (move _495, move _496);   // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _497 = (_494.0: &&[Z; 0]);       // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _498 = (_494.1: &&[Z; 0]);       // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _501 = _497;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _502 = _498;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _500 = <&[Z; 0] as PartialEq>::eq(move _501, move _502) -> bb79; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 0], &'b &[Z; 0]) -> bool {<&[Z; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb79: {
        _499 = Not(move _500);           // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _499) -> [0: bb81, otherwise: bb80]; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb80: {
        _503 = const core::panicking::AssertKind::Eq; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _505 = const core::panicking::AssertKind::Eq; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _507 = _497;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _506 = _507;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _509 = _498;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _508 = _509;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _510 = Option::<Arguments<'_>>::None; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _504 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _505, move _506, move _508, move _510); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 0], &'b &[Z; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>}, val: Value(<ZST>) }
    }

    bb81: {
        _513 = const {alloc14: &&[Z; 0]}; // scope 79 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[Z; 0], val: Value(Scalar(alloc14)) }
        _512 = _513;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _514 = &_492;                    // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _511 = (move _512, move _514);   // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _515 = (_511.0: &&[Z; 0]);       // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _516 = (_511.1: &&[Z; 0]);       // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _519 = _515;                     // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _520 = _516;                     // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _518 = <&[Z; 0] as PartialEq>::eq(move _519, move _520) -> bb82; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 0], &'b &[Z; 0]) -> bool {<&[Z; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb82: {
        _517 = Not(move _518);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _517) -> [0: bb84, otherwise: bb83]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb83: {
        _521 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _523 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _525 = _515;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _524 = _525;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _527 = _516;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _526 = _527;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _528 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _522 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _523, move _524, move _526, move _528); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 0], &'b &[Z; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>}, val: Value(<ZST>) }
    }

    bb84: {
        _920 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[16])) }
        _531 = _920;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _530 = &(*_531)[2..2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        _529 = _530;                     // scope 86 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:62: 79:63
        _919 = const _;                  // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&[Z; 0], val: Unevaluated(main, [], Some(promoted[15])) }
        _533 = _919;                     // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _534 = &_529;                    // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _532 = (move _533, move _534);   // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _535 = (_532.0: &&[Z; 0]);       // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _536 = (_532.1: &&[Z; 0]);       // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _539 = _535;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _540 = _536;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _538 = <&[Z; 0] as PartialEq>::eq(move _539, move _540) -> bb85; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 0], &'b &[Z; 0]) -> bool {<&[Z; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb85: {
        _537 = Not(move _538);           // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _537) -> [0: bb87, otherwise: bb86]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb86: {
        _541 = const core::panicking::AssertKind::Eq; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _543 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _545 = _535;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _544 = _545;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _547 = _536;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _546 = _547;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _548 = Option::<Arguments<'_>>::None; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _542 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _543, move _544, move _546, move _548); // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 0], &'b &[Z; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>}, val: Value(<ZST>) }
    }

    bb87: {
        _551 = const {alloc15: &&[Z; 0]}; // scope 85 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&[Z; 0], val: Value(Scalar(alloc15)) }
        _550 = _551;                     // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _552 = &_529;                    // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _549 = (move _550, move _552);   // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _553 = (_549.0: &&[Z; 0]);       // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _554 = (_549.1: &&[Z; 0]);       // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _557 = _553;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _558 = _554;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _556 = <&[Z; 0] as PartialEq>::eq(move _557, move _558) -> bb88; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[Z; 0], &'b &[Z; 0]) -> bool {<&[Z; 0] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb88: {
        _555 = Not(move _556);           // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _555) -> [0: bb90, otherwise: bb89]; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb89: {
        _559 = const core::panicking::AssertKind::Eq; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _561 = const core::panicking::AssertKind::Eq; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _563 = _553;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _562 = _563;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _565 = _554;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _564 = _565;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _566 = Option::<Arguments<'_>>::None; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _560 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _561, move _562, move _564, move _566); // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[Z; 0], &'b &[Z; 0], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>}, val: Value(<ZST>) }
    }

    bb90: {
        _918 = const _;                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Z, val: Unevaluated(main, [], Some(promoted[14])) }
        _570 = _918;                     // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _571 = &_567;                    // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _569 = (move _570, move _571);   // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _572 = (_569.0: &Z);             // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _573 = (_569.1: &Z);             // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _576 = _572;                     // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _577 = _573;                     // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _575 = <Z as PartialEq>::eq(move _576, move _577) -> bb91; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Z, &'b Z) -> bool {<Z as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb91: {
        _574 = Not(move _575);           // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _574) -> [0: bb93, otherwise: bb92]; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb92: {
        _578 = const core::panicking::AssertKind::Eq; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _580 = const core::panicking::AssertKind::Eq; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _582 = _572;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _581 = _582;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _584 = _573;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _583 = _584;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _585 = Option::<Arguments<'_>>::None; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _579 = core::panicking::assert_failed::<Z, Z>(move _580, move _581, move _583, move _585); // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Z, &'b Z, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Z, Z>}, val: Value(<ZST>) }
    }

    bb93: {
        _588 = const {alloc16: &Z};      // scope 91 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &Z, val: Value(Scalar(alloc16)) }
        _587 = _588;                     // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _589 = &_567;                    // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _586 = (move _587, move _589);   // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _590 = (_586.0: &Z);             // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _591 = (_586.1: &Z);             // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _594 = _590;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _595 = _591;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _593 = <Z as PartialEq>::eq(move _594, move _595) -> bb94; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Z, &'b Z) -> bool {<Z as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb94: {
        _592 = Not(move _593);           // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _592) -> [0: bb96, otherwise: bb95]; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb95: {
        _596 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _598 = const core::panicking::AssertKind::Eq; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _600 = _590;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _599 = _600;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _602 = _591;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _601 = _602;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _603 = Option::<Arguments<'_>>::None; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _597 = core::panicking::assert_failed::<Z, Z>(move _598, move _599, move _601, move _603); // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Z, &'b Z, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Z, Z>}, val: Value(<ZST>) }
    }

    bb96: {
        _917 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[13])) }
        _605 = &(*_917)[3 of 4];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _604 = _605;                     // scope 98 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:71: 84:72
        _916 = const _;                  // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&Z, val: Unevaluated(main, [], Some(promoted[12])) }
        _607 = _916;                     // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _608 = &_604;                    // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _606 = (move _607, move _608);   // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _609 = (_606.0: &&Z);            // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _610 = (_606.1: &&Z);            // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _613 = _609;                     // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _614 = _610;                     // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _612 = <&Z as PartialEq>::eq(move _613, move _614) -> bb97; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Z, &'b &Z) -> bool {<&Z as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb97: {
        _611 = Not(move _612);           // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _611) -> [0: bb99, otherwise: bb98]; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb98: {
        _615 = const core::panicking::AssertKind::Eq; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _617 = const core::panicking::AssertKind::Eq; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _619 = _609;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _618 = _619;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _621 = _610;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _620 = _621;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _622 = Option::<Arguments<'_>>::None; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _616 = core::panicking::assert_failed::<&Z, &Z>(move _617, move _618, move _620, move _622); // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Z, &'b &Z, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Z, &Z>}, val: Value(<ZST>) }
    }

    bb99: {
        _625 = const {alloc17: &&Z};     // scope 97 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&Z, val: Value(Scalar(alloc17)) }
        _624 = _625;                     // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _626 = &_604;                    // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _623 = (move _624, move _626);   // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _627 = (_623.0: &&Z);            // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _628 = (_623.1: &&Z);            // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _631 = _627;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _632 = _628;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _630 = <&Z as PartialEq>::eq(move _631, move _632) -> bb100; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Z, &'b &Z) -> bool {<&Z as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb100: {
        _629 = Not(move _630);           // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _629) -> [0: bb102, otherwise: bb101]; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb101: {
        _633 = const core::panicking::AssertKind::Eq; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _635 = const core::panicking::AssertKind::Eq; // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _637 = _627;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _636 = _637;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _639 = _628;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _638 = _639;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _640 = Option::<Arguments<'_>>::None; // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _634 = core::panicking::assert_failed::<&Z, &Z>(move _635, move _636, move _638, move _640); // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Z, &'b &Z, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Z, &Z>}, val: Value(<ZST>) }
    }

    bb102: {
        _915 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[11])) }
        _644 = _915;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _642 = &(*_644)[1..3];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _643 = &(*_644)[3 of 4];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        _641 = _643;                     // scope 104 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:73: 85:74
        _914 = const _;                  // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&Z, val: Unevaluated(main, [], Some(promoted[10])) }
        _646 = _914;                     // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _647 = &_641;                    // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _645 = (move _646, move _647);   // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _648 = (_645.0: &&Z);            // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _649 = (_645.1: &&Z);            // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _652 = _648;                     // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _653 = _649;                     // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _651 = <&Z as PartialEq>::eq(move _652, move _653) -> bb103; // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Z, &'b &Z) -> bool {<&Z as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb103: {
        _650 = Not(move _651);           // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _650) -> [0: bb105, otherwise: bb104]; // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb104: {
        _654 = const core::panicking::AssertKind::Eq; // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _656 = const core::panicking::AssertKind::Eq; // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _658 = _648;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _657 = _658;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _660 = _649;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _659 = _660;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _661 = Option::<Arguments<'_>>::None; // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _655 = core::panicking::assert_failed::<&Z, &Z>(move _656, move _657, move _659, move _661); // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Z, &'b &Z, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Z, &Z>}, val: Value(<ZST>) }
    }

    bb105: {
        _664 = const {alloc18: &&Z};     // scope 103 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&Z, val: Value(Scalar(alloc18)) }
        _663 = _664;                     // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _665 = &_641;                    // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _662 = (move _663, move _665);   // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _666 = (_662.0: &&Z);            // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _667 = (_662.1: &&Z);            // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _670 = _666;                     // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _671 = _667;                     // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _669 = <&Z as PartialEq>::eq(move _670, move _671) -> bb106; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Z, &'b &Z) -> bool {<&Z as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb106: {
        _668 = Not(move _669);           // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _668) -> [0: bb108, otherwise: bb107]; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb107: {
        _672 = const core::panicking::AssertKind::Eq; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _674 = const core::panicking::AssertKind::Eq; // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _676 = _666;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _675 = _676;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _678 = _667;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _677 = _678;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _679 = Option::<Arguments<'_>>::None; // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _673 = core::panicking::assert_failed::<&Z, &Z>(move _674, move _675, move _677, move _679); // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Z, &'b &Z, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Z, &Z>}, val: Value(<ZST>) }
    }

    bb108: {
        _681 = const 4_u8;               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
        _680 = _681;                     // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:63: 88:64
        _913 = const _;                  // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[9])) }
        _683 = _913;                     // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _684 = &_680;                    // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _682 = (move _683, move _684);   // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _685 = (_682.0: &u8);            // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _686 = (_682.1: &u8);            // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _689 = const 4_u8;               // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _690 = (*_686);                  // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _688 = Eq(move _689, move _690); // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _687 = Not(move _688);           // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _687) -> [0: bb110, otherwise: bb109]; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb109: {
        _691 = const core::panicking::AssertKind::Eq; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _693 = const core::panicking::AssertKind::Eq; // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _695 = _685;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _694 = _695;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _697 = _686;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _696 = _697;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _698 = Option::<Arguments<'_>>::None; // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _692 = core::panicking::assert_failed::<u8, u8>(move _693, move _694, move _696, move _698); // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb110: {
        _701 = const {alloc19: &u8};     // scope 109 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc19)) }
        _700 = _701;                     // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _702 = &_680;                    // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _699 = (move _700, move _702);   // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _703 = (_699.0: &u8);            // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _704 = (_699.1: &u8);            // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _707 = const 4_u8;               // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _708 = (*_704);                  // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _706 = Eq(move _707, move _708); // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _705 = Not(move _706);           // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _705) -> [0: bb112, otherwise: bb111]; // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb111: {
        _709 = const core::panicking::AssertKind::Eq; // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _711 = const core::panicking::AssertKind::Eq; // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _713 = _703;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _712 = _713;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _715 = _704;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _714 = _715;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _716 = Option::<Arguments<'_>>::None; // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _710 = core::panicking::assert_failed::<u8, u8>(move _711, move _712, move _714, move _716); // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb112: {
        _912 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[8])) }
        _718 = &((*_912)[3 of 4].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        _717 = _718;                     // scope 116 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:67: 89:68
        _911 = const _;                  // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&u8, val: Unevaluated(main, [], Some(promoted[7])) }
        _720 = _911;                     // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _721 = &_717;                    // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _719 = (move _720, move _721);   // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _722 = (_719.0: &&u8);           // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _723 = (_719.1: &&u8);           // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _726 = _722;                     // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _727 = _723;                     // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _725 = <&u8 as PartialEq>::eq(move _726, move _727) -> bb113; // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb113: {
        _724 = Not(move _725);           // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _724) -> [0: bb115, otherwise: bb114]; // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb114: {
        _728 = const core::panicking::AssertKind::Eq; // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _730 = const core::panicking::AssertKind::Eq; // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _732 = _722;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _731 = _732;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _734 = _723;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _733 = _734;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _735 = Option::<Arguments<'_>>::None; // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _729 = core::panicking::assert_failed::<&u8, &u8>(move _730, move _731, move _733, move _735); // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb115: {
        _738 = const {alloc20: &&u8};    // scope 115 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&u8, val: Value(Scalar(alloc20)) }
        _737 = _738;                     // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _739 = &_717;                    // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _736 = (move _737, move _739);   // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _740 = (_736.0: &&u8);           // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _741 = (_736.1: &&u8);           // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _744 = _740;                     // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _745 = _741;                     // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _743 = <&u8 as PartialEq>::eq(move _744, move _745) -> bb116; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb116: {
        _742 = Not(move _743);           // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _742) -> [0: bb118, otherwise: bb117]; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb117: {
        _746 = const core::panicking::AssertKind::Eq; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _748 = const core::panicking::AssertKind::Eq; // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _750 = _740;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _749 = _750;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _752 = _741;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _751 = _752;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _753 = Option::<Arguments<'_>>::None; // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _747 = core::panicking::assert_failed::<&u8, &u8>(move _748, move _749, move _751, move _753); // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb118: {
        _910 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[6])) }
        _756 = _910;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        _755 = &((*_756)[3 of 4].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
        _754 = _755;                     // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:64: 90:65
        _909 = const _;                  // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&u8, val: Unevaluated(main, [], Some(promoted[5])) }
        _758 = _909;                     // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _759 = &_754;                    // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _757 = (move _758, move _759);   // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _760 = (_757.0: &&u8);           // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _761 = (_757.1: &&u8);           // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _764 = _760;                     // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _765 = _761;                     // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _763 = <&u8 as PartialEq>::eq(move _764, move _765) -> bb119; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb119: {
        _762 = Not(move _763);           // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _762) -> [0: bb121, otherwise: bb120]; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb120: {
        _766 = const core::panicking::AssertKind::Eq; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _768 = const core::panicking::AssertKind::Eq; // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _770 = _760;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _769 = _770;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _772 = _761;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _771 = _772;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _773 = Option::<Arguments<'_>>::None; // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _767 = core::panicking::assert_failed::<&u8, &u8>(move _768, move _769, move _771, move _773); // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb121: {
        _776 = const {alloc21: &&u8};    // scope 121 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&u8, val: Value(Scalar(alloc21)) }
        _775 = _776;                     // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _777 = &_754;                    // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _774 = (move _775, move _777);   // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _778 = (_774.0: &&u8);           // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _779 = (_774.1: &&u8);           // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _782 = _778;                     // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _783 = _779;                     // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _781 = <&u8 as PartialEq>::eq(move _782, move _783) -> bb122; // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb122: {
        _780 = Not(move _781);           // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _780) -> [0: bb124, otherwise: bb123]; // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb123: {
        _784 = const core::panicking::AssertKind::Eq; // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _786 = const core::panicking::AssertKind::Eq; // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _788 = _778;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _787 = _788;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _790 = _779;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _789 = _790;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _791 = Option::<Arguments<'_>>::None; // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _785 = core::panicking::assert_failed::<&u8, &u8>(move _786, move _787, move _789, move _791); // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb124: {
        _793 = const 1_u8;               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
        _792 = _793;                     // scope 128 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:63: 92:64
        _908 = const _;                  // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[4])) }
        _795 = _908;                     // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _796 = &_792;                    // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _794 = (move _795, move _796);   // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _797 = (_794.0: &u8);            // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _798 = (_794.1: &u8);            // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _801 = const 1_u8;               // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _802 = (*_798);                  // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _800 = Eq(move _801, move _802); // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _799 = Not(move _800);           // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _799) -> [0: bb126, otherwise: bb125]; // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb125: {
        _803 = const core::panicking::AssertKind::Eq; // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _805 = const core::panicking::AssertKind::Eq; // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _807 = _797;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _806 = _807;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _809 = _798;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _808 = _809;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _810 = Option::<Arguments<'_>>::None; // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _804 = core::panicking::assert_failed::<u8, u8>(move _805, move _806, move _808, move _810); // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb126: {
        _813 = const {alloc22: &u8};     // scope 127 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &u8, val: Value(Scalar(alloc22)) }
        _812 = _813;                     // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _814 = &_792;                    // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _811 = (move _812, move _814);   // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _815 = (_811.0: &u8);            // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _816 = (_811.1: &u8);            // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _819 = const 1_u8;               // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _820 = (*_816);                  // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _818 = Eq(move _819, move _820); // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _817 = Not(move _818);           // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _817) -> [0: bb128, otherwise: bb127]; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb127: {
        _821 = const core::panicking::AssertKind::Eq; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _823 = const core::panicking::AssertKind::Eq; // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _825 = _815;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _824 = _825;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _827 = _816;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _826 = _827;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _828 = Option::<Arguments<'_>>::None; // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _822 = core::panicking::assert_failed::<u8, u8>(move _823, move _824, move _826, move _828); // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb128: {
        _907 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[3])) }
        _830 = &((*_907)[0 of 4].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        _829 = _830;                     // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:67: 93:68
        _906 = const _;                  // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&u8, val: Unevaluated(main, [], Some(promoted[2])) }
        _832 = _906;                     // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _833 = &_829;                    // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _831 = (move _832, move _833);   // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _834 = (_831.0: &&u8);           // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _835 = (_831.1: &&u8);           // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _838 = _834;                     // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _839 = _835;                     // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _837 = <&u8 as PartialEq>::eq(move _838, move _839) -> bb129; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb129: {
        _836 = Not(move _837);           // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _836) -> [0: bb131, otherwise: bb130]; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb130: {
        _840 = const core::panicking::AssertKind::Eq; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _842 = const core::panicking::AssertKind::Eq; // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _844 = _834;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _843 = _844;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _846 = _835;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _845 = _846;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _847 = Option::<Arguments<'_>>::None; // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _841 = core::panicking::assert_failed::<&u8, &u8>(move _842, move _843, move _845, move _847); // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb131: {
        _850 = const {alloc23: &&u8};    // scope 133 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&u8, val: Value(Scalar(alloc23)) }
        _849 = _850;                     // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _851 = &_829;                    // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _848 = (move _849, move _851);   // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _852 = (_848.0: &&u8);           // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _853 = (_848.1: &&u8);           // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _856 = _852;                     // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _857 = _853;                     // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _855 = <&u8 as PartialEq>::eq(move _856, move _857) -> bb132; // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb132: {
        _854 = Not(move _855);           // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _854) -> [0: bb134, otherwise: bb133]; // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb133: {
        _858 = const core::panicking::AssertKind::Eq; // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _860 = const core::panicking::AssertKind::Eq; // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _862 = _852;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _861 = _862;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _864 = _853;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _863 = _864;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _865 = Option::<Arguments<'_>>::None; // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _859 = core::panicking::assert_failed::<&u8, &u8>(move _860, move _861, move _863, move _865); // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb134: {
        _905 = const _;                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[1])) }
        _868 = _905;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        _867 = &((*_868)[0 of 4].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
        _866 = _867;                     // scope 140 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:64: 94:65
        _904 = const _;                  // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &&u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _870 = _904;                     // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _871 = &_866;                    // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _869 = (move _870, move _871);   // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _872 = (_869.0: &&u8);           // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _873 = (_869.1: &&u8);           // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _876 = _872;                     // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _877 = _873;                     // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _875 = <&u8 as PartialEq>::eq(move _876, move _877) -> bb135; // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb135: {
        _874 = Not(move _875);           // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _874) -> [0: bb137, otherwise: bb136]; // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb136: {
        _878 = const core::panicking::AssertKind::Eq; // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _880 = const core::panicking::AssertKind::Eq; // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _882 = _872;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _881 = _882;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _884 = _873;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _883 = _884;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _885 = Option::<Arguments<'_>>::None; // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _879 = core::panicking::assert_failed::<&u8, &u8>(move _880, move _881, move _883, move _885); // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb137: {
        _888 = const {alloc24: &&u8};    // scope 139 at ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:37:20: 37:31
                                         // + literal: Const { ty: &&u8, val: Value(Scalar(alloc24)) }
        _887 = _888;                     // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _889 = &_866;                    // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _886 = (move _887, move _889);   // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _890 = (_886.0: &&u8);           // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _891 = (_886.1: &&u8);           // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _894 = _890;                     // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _895 = _891;                     // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _893 = <&u8 as PartialEq>::eq(move _894, move _895) -> bb138; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &u8, &'b &u8) -> bool {<&u8 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb138: {
        _892 = Not(move _893);           // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _892) -> [0: bb140, otherwise: bb139]; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb139: {
        _896 = const core::panicking::AssertKind::Eq; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _898 = const core::panicking::AssertKind::Eq; // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _900 = _890;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _899 = _900;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _902 = _891;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _901 = _902;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _903 = Option::<Arguments<'_>>::None; // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _897 = core::panicking::assert_failed::<&u8, &u8>(move _898, move _899, move _901, move _903); // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &u8, &'b &u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&u8, &u8>}, val: Value(<ZST>) }
    }

    bb140: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:95:2: 95:2
    }
}

alloc24 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc150───────╼                         │ ╾──────╼
}

alloc150 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc23 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc143───────╼                         │ ╾──────╼
}

alloc143 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc22 (static: main::CONST_EVAL2, size: 1, align: 1) {
    01                                              │ .
}

alloc21 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc130+0x3─────╼                         │ ╾──────╼
}

alloc130 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc20 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc123+0x3─────╼                         │ ╾──────╼
}

alloc123 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc19 (static: main::CONST_EVAL2, size: 1, align: 1) {
    04                                              │ .
}

alloc18 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc110───────╼                         │ ╾──────╼
}

alloc110 (size: 0, align: 1) {}

alloc17 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc107───────╼                         │ ╾──────╼
}

alloc107 (size: 0, align: 1) {}

alloc16 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc15 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc102───────╼                         │ ╾──────╼
}

alloc102 (size: 0, align: 1) {}

alloc14 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾───────alloc99───────╼                         │ ╾──────╼
}

alloc99 (size: 0, align: 1) {}

alloc13 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc12 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾───────alloc94───────╼                         │ ╾──────╼
}

alloc94 (size: 0, align: 1) {}

alloc11 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾───────alloc91───────╼                         │ ╾──────╼
}

alloc91 (size: 0, align: 1) {}

alloc10 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc9 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc86+0x3─────╼                         │ ╾──────╼
}

alloc86 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc8 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc79+0x3─────╼                         │ ╾──────╼
}

alloc79 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc7 (static: main::CONST_EVAL2, size: 1, align: 1) {
    04                                              │ .
}

alloc6 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc66+0x2─────╼                         │ ╾──────╼
}

alloc66 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc5 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc59+0x2─────╼                         │ ╾──────╼
}

alloc59 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc4 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc3 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc46+0x1─────╼                         │ ╾──────╼
}

alloc46 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc2 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc39+0x1─────╼                         │ ╾──────╼
}

alloc39 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc1 (static: main::CONST_EVAL2, size: 2, align: 1) {
    02 03                                           │ ..
}

promoted[0] in main: &&u8 = {
    let mut _0: &&u8;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &u8, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    }
}

promoted[2] in main: &&u8 = {
    let mut _0: &&u8;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &u8, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[5] in main: &&u8 = {
    let mut _0: &&u8;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &u8, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[6] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    }
}

promoted[7] in main: &&u8 = {
    let mut _0: &&u8;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &u8, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[8] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[10] in main: &&Z = {
    let mut _0: &&Z;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &Z, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[11] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    }
}

promoted[12] in main: &&Z = {
    let mut _0: &&Z;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &Z, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[13] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
}

promoted[14] in main: &Z = {
    let mut _0: &Z;                      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: Z, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[15] in main: &&[Z; 0] = {
    let mut _0: &&[Z; 0];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[Z; 0];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[Z; 0], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[16] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    }
}

promoted[17] in main: &&[Z; 0] = {
    let mut _0: &&[Z; 0];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[Z; 0];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[Z; 0], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[18] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
}

promoted[19] in main: &[Z; 0] = {
    let mut _0: &[Z; 0];                 // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: [Z; 0];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: [Z; 0], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[20] in main: &&[Z; 2] = {
    let mut _0: &&[Z; 2];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[21] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    }
}

promoted[22] in main: &&[Z; 2] = {
    let mut _0: &&[Z; 2];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[23] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
}

promoted[24] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: [Z; 2], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[25] in main: &&N = {
    let mut _0: &&N;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &N, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[26] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    }
}

promoted[27] in main: &&N = {
    let mut _0: &&N;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &N, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[28] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
}

promoted[29] in main: &N = {
    let mut _0: &N;                      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: N, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[30] in main: &&[N; 0] = {
    let mut _0: &&[N; 0];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[N; 0];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[N; 0], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[31] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    }
}

promoted[32] in main: &&[N; 0] = {
    let mut _0: &&[N; 0];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[N; 0];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[N; 0], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[33] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
}

promoted[34] in main: &[N; 0] = {
    let mut _0: &[N; 0];                 // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: [N; 0];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: [N; 0], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[35] in main: &&[N; 2] = {
    let mut _0: &&[N; 2];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[36] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    }
}

promoted[37] in main: &&[N; 2] = {
    let mut _0: &&[N; 2];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[38] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
}

promoted[39] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:36:20: 36:30
                                         // + literal: Const { ty: [N; 2], val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const main::CONST_EVAL: [N; 2] = {
    let mut _0: [N; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84
    let _1: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        _1 = move _2[1..3];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:69: 69:70
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:71: 69:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:73: 69:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
    }
}

fn main::const_eval() -> [N; 2] {
    let mut _0: [N; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }

    bb0: {
        _2 = const N(1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x01)) }
        _3 = const N(2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x02)) }
        _4 = const N(3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x03)) }
        _5 = const N(4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
                                         // + literal: Const { ty: N, val: Value(Scalar(0x04)) }
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = move _1[1..3];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [N; 2] {
    let mut _0: [N; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84
    let _1: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        _1 = move _2[1..3];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:69: 69:70
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:71: 69:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:73: 69:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
    }
}

static main::CONST_EVAL2: [N; 2] = {
    let mut _0: [N; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> [N; 2] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
    }
}

const main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:80: 70:97
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &(*_7)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:75: 70:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:77: 70:78
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
    }
}

fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &(*_1)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:80: 70:97
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &(*_7)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:75: 70:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:77: 70:78
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
    }
}

static main::CONST_EVAL2: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:80: 70:97

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [N; 2] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
    }
}

const main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:77: 71:94
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        _1 = &(*_2)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:70: 71:71
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:72: 71:73
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:74: 71:75
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
    }
}

fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _0 = &(*_1)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:77: 71:94
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        _1 = &(*_2)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:70: 71:71
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:72: 71:73
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:74: 71:75
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
    }
}

static main::CONST_EVAL2: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:77: 71:94

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [N; 2] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
    }
}

const main::CONST_EVAL: [N; 0] = {
    let mut _0: [N; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90
    let _1: [N; 0];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        _1 = move _2[2..2];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:75: 73:76
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:77: 73:78
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:79: 73:80
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
    }
}

fn main::const_eval() -> [N; 0] {
    let mut _0: [N; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90
    let _1: [N; 0];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [N; 0] {
    let mut _0: [N; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90
    let _1: [N; 0];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        _1 = move _2[2..2];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:75: 73:76
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:77: 73:78
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:79: 73:80
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
    }
}

static main::CONST_EVAL2: [N; 0] = {
    let mut _0: [N; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> [N; 0] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
    }
}

const main::CONST_EVAL: &[N; 0] = {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:13: 76:30
    let _1: &[N; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &(*_7)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:65: 75:66
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:67: 75:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
    }
}

fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &(*_1)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:13: 76:30
    let _1: &[N; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &(*_7)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:65: 75:66
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:67: 75:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
    }
}

static main::CONST_EVAL2: &[N; 0] = {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:13: 76:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [N; 0] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
    }
}

const main::CONST_EVAL: &[N; 0] = {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:13: 80:30
    let _1: &[N; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        _1 = &(*_2)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:60: 79:61
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:62: 79:63
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:64: 79:65
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
    }
}

fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _0 = &(*_1)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:13: 80:30
    let _1: &[N; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        _1 = &(*_2)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:60: 79:61
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:62: 79:63
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:64: 79:65
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
    }
}

static main::CONST_EVAL2: &[N; 0] = {
    let mut _0: &[N; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:13: 80:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [N; 0] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
    }
}

const main::CONST_EVAL: N = {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75
    let _1: N;                           // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        _1 = move _2[3 of 4];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:65: 83:66
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:69: 83:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

fn main::const_eval() -> N {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75
    let _1: N;                           // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }

    bb0: {
        _1 = const N(4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
                                         // + literal: Const { ty: N, val: Value(Scalar(0x04)) }
        _0 = const N(4_u8);              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
                                         // + literal: Const { ty: N, val: Value(Scalar(0x04)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> N {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75
    let _1: N;                           // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        _1 = move _2[3 of 4];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:65: 83:66
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:69: 83:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: N = {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> N {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &N = {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:76: 84:88
    let _1: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &(*_7)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:71: 84:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:73: 84:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
}

fn main::const_eval() -> &N {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &(*_1)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &N {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:76: 84:88
    let _1: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &(*_7)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:71: 84:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:73: 84:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &N = {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:76: 84:88

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static N {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &N = {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:78: 85:90
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let _2: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let mut _3: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _9: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    scope 1 {
        debug _y => _1;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _2;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _9 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_9);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _1 = &(*_3)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        _2 = &(*_3)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:71: 85:72
        _0 = &(*_2);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:73: 85:74
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    }
}

fn main::const_eval() -> &N {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _3: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    scope 1 {
        debug _y => _1;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _1 = &(*_2)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _0 = &(*_2)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &N {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:78: 85:90
    let _1: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let _2: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let mut _3: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _9: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    scope 1 {
        debug _y => _1;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _2;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _9 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_9);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _1 = &(*_3)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        _2 = &(*_3)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:71: 85:72
        _0 = &(*_2);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:73: 85:74
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &N = {
    let mut _0: &N;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:78: 85:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static N {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: [Z; 2] = {
    let mut _0: [Z; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84
    let _1: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _6 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        _1 = move _2[1..3];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:69: 69:70
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:71: 69:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:73: 69:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
    }
}

fn main::const_eval() -> [Z; 2] {
    let mut _0: [Z; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84
    let _1: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [Z; 2] {
    let mut _0: [Z; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84
    let _1: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _6 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        _1 = move _2[1..3];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:39: 69:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:69: 69:70
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:71: 69:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:73: 69:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
    }
}

static main::CONST_EVAL2: [Z; 2] = {
    let mut _0: [Z; 2];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:76: 69:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> [Z; 2] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:69:82: 69:83
    }
}

const main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:80: 70:97
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &(*_7)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:75: 70:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:77: 70:78
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
    }
}

fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &(*_1)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:80: 70:97
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &(*_7)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:39: 70:44
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:75: 70:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:77: 70:78
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
    }
}

static main::CONST_EVAL2: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:80: 70:97

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [Z; 2] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:70:95: 70:96
    }
}

const main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:77: 71:94
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let _3: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _8: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        _1 = &(*_2)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:70: 71:71
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:72: 71:73
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:74: 71:75
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
    }
}

fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _1: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _0 = &(*_1)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:77: 71:94
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    let _3: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _8: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:52: 71:70
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        _1 = &(*_2)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:39: 71:40
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:70: 71:71
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:72: 71:73
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:74: 71:75
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
    }
}

static main::CONST_EVAL2: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:77: 71:94

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [Z; 2] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:71:92: 71:93
    }
}

const main::CONST_EVAL: [Z; 0] = {
    let mut _0: [Z; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90
    let _1: [Z; 0];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _6 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        _1 = move _2[2..2];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:75: 73:76
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:77: 73:78
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:79: 73:80
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
    }
}

fn main::const_eval() -> [Z; 0] {
    let mut _0: [Z; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90
    let _1: [Z; 0];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [Z; 0] {
    let mut _0: [Z; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90
    let _1: [Z; 0];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _6 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        _1 = move _2[2..2];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:42: 73:43
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:75: 73:76
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:77: 73:78
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:79: 73:80
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
    }
}

static main::CONST_EVAL2: [Z; 0] = {
    let mut _0: [Z; 0];                  // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:82: 73:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> [Z; 0] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:73:88: 73:89
    }
}

const main::CONST_EVAL: &[Z; 0] = {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:13: 76:30
    let _1: &[Z; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &(*_7)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:65: 75:66
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:67: 75:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
    }
}

fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &(*_1)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:13: 76:30
    let _1: &[Z; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &(*_7)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:26: 75:31
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:65: 75:66
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:75:67: 75:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
    }
}

static main::CONST_EVAL2: &[Z; 0] = {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:13: 76:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [Z; 0] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:76:28: 76:29
    }
}

const main::CONST_EVAL: &[Z; 0] = {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:13: 80:30
    let _1: &[Z; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let _3: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _8: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        _1 = &(*_2)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:60: 79:61
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:62: 79:63
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:64: 79:65
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
    }
}

fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _1: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _0 = &(*_1)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:13: 80:30
    let _1: &[Z; 0];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    let _3: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _8: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:42: 79:60
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        _1 = &(*_2)[2..2];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:26: 79:27
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:60: 79:61
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:62: 79:63
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:79:64: 79:65
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
    }
}

static main::CONST_EVAL2: &[Z; 0] = {
    let mut _0: &[Z; 0];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:13: 80:30

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static [Z; 0] {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:80:28: 80:29
    }
}

const main::CONST_EVAL: Z = {
    let mut _0: Z;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75
    let _1: Z;                           // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _6 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        _1 = move _2[3 of 4];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:65: 83:66
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:69: 83:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

fn main::const_eval() -> Z {
    let mut _0: Z;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75
    let _1: Z;                           // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Z {
    let mut _0: Z;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75
    let _1: Z;                           // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _6 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:23: 25:24
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        _1 = move _2[3 of 4];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:43: 83:44
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:65: 83:66
        _0 = move _1;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:67: 83:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:69: 83:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Z = {
    let mut _0: Z;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:83:72: 83:75

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Z {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &Z = {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:76: 84:88
    let _1: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &(*_7)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:71: 84:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:73: 84:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
}

fn main::const_eval() -> &Z {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &(*_1)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &Z {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:76: 84:88
    let _1: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    let mut _2: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &(*_7)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:43: 84:48
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:71: 84:72
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:73: 84:74
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &Z = {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:84:76: 84:88

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static Z {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &Z = {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:78: 85:90
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let _2: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let mut _3: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _9: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    scope 1 {
        debug _y => _1;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _2;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _9 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_9);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _1 = &(*_3)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        _2 = &(*_3)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:71: 85:72
        _0 = &(*_2);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:73: 85:74
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    }
}

fn main::const_eval() -> &Z {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _3: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    scope 1 {
        debug _y => _1;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _1 = &(*_2)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _0 = &(*_2)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &Z {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:78: 85:90
    let _1: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
    let _2: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    let mut _3: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:20:20: 20:21
    let mut _9: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
    scope 1 {
        debug _y => _1;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        debug x => _2;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
    }

    bb0: {
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        _9 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_9);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:53: 85:71
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        _1 = &(*_3)[1..3];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:39: 85:41
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        _2 = &(*_3)[3 of 4];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:48: 85:49
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:71: 85:72
        _0 = &(*_2);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:73: 85:74
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:75: 85:76
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &Z = {
    let mut _0: &Z;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:85:78: 85:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static Z {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:68: 88:70
    let _1: u8;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
        _1 = (_2[3 of 4].0: u8);         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:61: 88:62
        _0 = _1;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:63: 88:64
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:65: 88:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

fn main::const_eval() -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:68: 88:70
    let _1: u8;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    }

    bb0: {
        _1 = const 4_u8;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
        _0 = const 4_u8;                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:63: 88:64
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:68: 88:70
    let _1: u8;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
        _1 = (_2[3 of 4].0: u8);         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:41: 88:42
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:61: 88:62
        _0 = _1;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:63: 88:64
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:65: 88:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:88:68: 88:70

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> u8 {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:72: 89:83
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &((*_7)[3 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:67: 89:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:69: 89:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &((*_1)[3 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:72: 89:83
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &((*_7)[3 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:41: 89:46
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:67: 89:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:69: 89:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:89:72: 89:83

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static u8 {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:69: 90:80
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
        _1 = &((*_2)[3 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:62: 90:63
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:64: 90:65
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:66: 90:67
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        _0 = &((*_1)[3 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:69: 90:80
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:47: 90:62
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
        _1 = &((*_2)[3 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:41: 90:42
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:62: 90:63
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:64: 90:65
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:66: 90:67
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:90:69: 90:80

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static u8 {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:68: 92:70
    let _1: u8;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
        _1 = (_2[0 of 4].0: u8);         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:61: 92:62
        _0 = _1;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:63: 92:64
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:65: 92:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

fn main::const_eval() -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:68: 92:70
    let _1: u8;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    }

    bb0: {
        _1 = const 1_u8;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
        _0 = const 1_u8;                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:63: 92:64
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

// MIR FOR CTFE
fn main::const_eval() -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:68: 92:70
    let _1: u8;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        StorageLive(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _6 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        StorageDead(_6);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_5);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_4);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:20: 13:21
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
        _1 = (_2[0 of 4].0: u8);         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:34: 92:35
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:61: 92:62
        _0 = _1;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:63: 92:64
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:65: 92:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:92:68: 92:70

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> u8 {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:72: 93:83
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _1 = &((*_7)[0 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:67: 93:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:69: 93:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _0 = &((*_1)[0 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:72: 93:83
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    let mut _2: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        _7 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = &((*_7)[0 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:34: 93:39
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:67: 93:68
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:69: 93:70
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:93:72: 93:83

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static u8 {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:69: 94:80
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
        _1 = &((*_2)[0 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:62: 94:63
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:64: 94:65
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:66: 94:67
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    let mut _1: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    }

    bb0: {
        _2 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _1 = _2;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        _0 = &((*_1)[0 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:69: 94:80
    let _1: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    let _3: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:9: 13:21
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:13:12: 13:17
    let mut _8: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        _8 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _2 = &(*_8);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:47: 94:62
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
        _1 = &((*_2)[0 of 4].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:34: 94:35
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:62: 94:63
        _0 = &(*_1);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:64: 94:65
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:66: 94:67
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:94:69: 94:80

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> &'static u8 {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:34:9: 34:47
    }
}

fn N(_1: u8) -> N {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:1: 6:9

    bb0: {
        _0 = N(move _1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:1: 6:9
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:1: 6:9
    }
}

// MIR FOR CTFE
fn N(_1: u8) -> N {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:1: 6:9

    bb0: {
        _0 = N(move _1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:1: 6:9
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval.rs:6:1: 6:9
    }
}
