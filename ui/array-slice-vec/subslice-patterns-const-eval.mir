// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:10: 5:19>::eq(_1: &N, _2: &N) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u8;
    let mut _4: u8;

    bb0: {
        _3 = ((*_1).0: u8);
        _4 = ((*_2).0: u8);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:21: 5:26>::fmt(_1: &N, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u8;
    let _6: &u8;

    bb0: {
        _3 = const "N";
        _6 = &((*_1).0: u8);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:5:28: 5:33>::clone(_1: &N) -> N {
    debug self => _1;
    let mut _0: N;
    let mut _2: u8;
    let _3: &u8;

    bb0: {
        _3 = &((*_1).0: u8);
        _2 = (*_3);
        _0 = N(move _2);
        return;
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:10: 8:19>::eq(_1: &Z, _2: &Z) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:21: 8:26>::fmt(_1: &Z, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Z";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval.rs:8:28: 8:33>::clone(_1: &Z) -> Z {
    debug self => _1;
    let mut _0: Z;

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: [N; 2];
    let _2: [N; 2];
    let mut _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: (&[N; 2], &[N; 2]);
    let mut _9: &[N; 2];
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&[N; 2], &[N; 2]);
    let _18: &[N; 2];
    let mut _19: &[N; 2];
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let _27: &[N; 2];
    let _28: &[N; 2];
    let mut _29: (&&[N; 2], &&[N; 2]);
    let mut _30: &&[N; 2];
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&&[N; 2], &&[N; 2]);
    let _39: &&[N; 2];
    let mut _40: &&[N; 2];
    let mut _43: bool;
    let mut _44: bool;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let _48: &[N; 2];
    let _49: &[N; 2];
    let mut _50: (&&[N; 2], &&[N; 2]);
    let mut _51: &&[N; 2];
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&&[N; 2], &&[N; 2]);
    let _60: &&[N; 2];
    let mut _61: &&[N; 2];
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let _69: [N; 0];
    let mut _70: (&[N; 0], &[N; 0]);
    let mut _71: &[N; 0];
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&[N; 0], &[N; 0]);
    let _80: &[N; 0];
    let mut _81: &[N; 0];
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let _89: &[N; 0];
    let _90: &[N; 0];
    let mut _91: (&&[N; 0], &&[N; 0]);
    let mut _92: &&[N; 0];
    let mut _95: bool;
    let mut _96: bool;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: (&&[N; 0], &&[N; 0]);
    let _101: &&[N; 0];
    let mut _102: &&[N; 0];
    let mut _105: bool;
    let mut _106: bool;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let _110: &[N; 0];
    let _111: &[N; 0];
    let mut _112: (&&[N; 0], &&[N; 0]);
    let mut _113: &&[N; 0];
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&&[N; 0], &&[N; 0]);
    let _122: &&[N; 0];
    let mut _123: &&[N; 0];
    let mut _126: bool;
    let mut _127: bool;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let _131: N;
    let _132: N;
    let mut _133: [N; 4];
    let mut _134: N;
    let mut _135: N;
    let mut _136: N;
    let mut _137: N;
    let mut _138: (&N, &N);
    let mut _139: &N;
    let mut _142: bool;
    let mut _143: bool;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _147: (&N, &N);
    let _148: &N;
    let mut _149: &N;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let _157: &N;
    let _158: &N;
    let mut _159: (&&N, &&N);
    let mut _160: &&N;
    let mut _163: bool;
    let mut _164: bool;
    let _166: !;
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: (&&N, &&N);
    let _169: &&N;
    let mut _170: &&N;
    let mut _173: bool;
    let mut _174: bool;
    let _176: !;
    let mut _177: std::option::Option<std::fmt::Arguments<'_>>;
    let _178: &N;
    let _179: &[N; 2];
    let _180: &N;
    let mut _181: (&&N, &&N);
    let mut _182: &&N;
    let mut _185: bool;
    let mut _186: bool;
    let _188: !;
    let mut _189: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _190: (&&N, &&N);
    let _191: &&N;
    let mut _192: &&N;
    let mut _195: bool;
    let mut _196: bool;
    let _198: !;
    let mut _199: std::option::Option<std::fmt::Arguments<'_>>;
    let _200: [Z; 2];
    let mut _201: (&[Z; 2], &[Z; 2]);
    let mut _202: &[Z; 2];
    let mut _205: bool;
    let mut _206: bool;
    let _208: !;
    let mut _209: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: (&[Z; 2], &[Z; 2]);
    let _211: &[Z; 2];
    let mut _212: &[Z; 2];
    let mut _215: bool;
    let mut _216: bool;
    let _218: !;
    let mut _219: std::option::Option<std::fmt::Arguments<'_>>;
    let _220: &[Z; 2];
    let _221: &[Z; 2];
    let mut _222: (&&[Z; 2], &&[Z; 2]);
    let mut _223: &&[Z; 2];
    let mut _226: bool;
    let mut _227: bool;
    let _229: !;
    let mut _230: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _231: (&&[Z; 2], &&[Z; 2]);
    let _232: &&[Z; 2];
    let mut _233: &&[Z; 2];
    let mut _236: bool;
    let mut _237: bool;
    let _239: !;
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>;
    let _241: &[Z; 2];
    let _242: &[Z; 2];
    let mut _243: (&&[Z; 2], &&[Z; 2]);
    let mut _244: &&[Z; 2];
    let mut _247: bool;
    let mut _248: bool;
    let _250: !;
    let mut _251: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _252: (&&[Z; 2], &&[Z; 2]);
    let _253: &&[Z; 2];
    let mut _254: &&[Z; 2];
    let mut _257: bool;
    let mut _258: bool;
    let _260: !;
    let mut _261: std::option::Option<std::fmt::Arguments<'_>>;
    let _262: [Z; 0];
    let mut _263: (&[Z; 0], &[Z; 0]);
    let mut _264: &[Z; 0];
    let mut _267: bool;
    let mut _268: bool;
    let _270: !;
    let mut _271: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _272: (&[Z; 0], &[Z; 0]);
    let _273: &[Z; 0];
    let mut _274: &[Z; 0];
    let mut _277: bool;
    let mut _278: bool;
    let _280: !;
    let mut _281: std::option::Option<std::fmt::Arguments<'_>>;
    let _282: &[Z; 0];
    let _283: &[Z; 0];
    let mut _284: (&&[Z; 0], &&[Z; 0]);
    let mut _285: &&[Z; 0];
    let mut _288: bool;
    let mut _289: bool;
    let _291: !;
    let mut _292: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _293: (&&[Z; 0], &&[Z; 0]);
    let _294: &&[Z; 0];
    let mut _295: &&[Z; 0];
    let mut _298: bool;
    let mut _299: bool;
    let _301: !;
    let mut _302: std::option::Option<std::fmt::Arguments<'_>>;
    let _303: &[Z; 0];
    let _304: &[Z; 0];
    let mut _305: (&&[Z; 0], &&[Z; 0]);
    let mut _306: &&[Z; 0];
    let mut _309: bool;
    let mut _310: bool;
    let _312: !;
    let mut _313: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _314: (&&[Z; 0], &&[Z; 0]);
    let _315: &&[Z; 0];
    let mut _316: &&[Z; 0];
    let mut _319: bool;
    let mut _320: bool;
    let _322: !;
    let mut _323: std::option::Option<std::fmt::Arguments<'_>>;
    let _324: Z;
    let mut _325: (&Z, &Z);
    let mut _326: &Z;
    let mut _329: bool;
    let mut _330: bool;
    let _332: !;
    let mut _333: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _334: (&Z, &Z);
    let _335: &Z;
    let mut _336: &Z;
    let mut _339: bool;
    let mut _340: bool;
    let _342: !;
    let mut _343: std::option::Option<std::fmt::Arguments<'_>>;
    let _344: &Z;
    let _345: &Z;
    let mut _346: (&&Z, &&Z);
    let mut _347: &&Z;
    let mut _350: bool;
    let mut _351: bool;
    let _353: !;
    let mut _354: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _355: (&&Z, &&Z);
    let _356: &&Z;
    let mut _357: &&Z;
    let mut _360: bool;
    let mut _361: bool;
    let _363: !;
    let mut _364: std::option::Option<std::fmt::Arguments<'_>>;
    let _365: &Z;
    let _366: &[Z; 2];
    let _367: &Z;
    let mut _368: (&&Z, &&Z);
    let mut _369: &&Z;
    let mut _372: bool;
    let mut _373: bool;
    let _375: !;
    let mut _376: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _377: (&&Z, &&Z);
    let _378: &&Z;
    let mut _379: &&Z;
    let mut _382: bool;
    let mut _383: bool;
    let _385: !;
    let mut _386: std::option::Option<std::fmt::Arguments<'_>>;
    let _387: u8;
    let _388: u8;
    let mut _389: [N; 4];
    let mut _390: N;
    let mut _391: N;
    let mut _392: N;
    let mut _393: N;
    let mut _394: (&u8, &u8);
    let mut _395: &u8;
    let mut _398: bool;
    let mut _399: bool;
    let mut _400: u8;
    let mut _401: u8;
    let _403: !;
    let mut _404: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _405: (&u8, &u8);
    let _406: &u8;
    let mut _407: &u8;
    let mut _410: bool;
    let mut _411: bool;
    let mut _412: u8;
    let mut _413: u8;
    let _415: !;
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>;
    let _417: &u8;
    let _418: &u8;
    let mut _419: (&&u8, &&u8);
    let mut _420: &&u8;
    let mut _423: bool;
    let mut _424: bool;
    let _426: !;
    let mut _427: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _428: (&&u8, &&u8);
    let _429: &&u8;
    let mut _430: &&u8;
    let mut _433: bool;
    let mut _434: bool;
    let _436: !;
    let mut _437: std::option::Option<std::fmt::Arguments<'_>>;
    let _438: &u8;
    let _439: &u8;
    let mut _440: (&&u8, &&u8);
    let mut _441: &&u8;
    let mut _444: bool;
    let mut _445: bool;
    let _447: !;
    let mut _448: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _449: (&&u8, &&u8);
    let _450: &&u8;
    let mut _451: &&u8;
    let mut _454: bool;
    let mut _455: bool;
    let _457: !;
    let mut _458: std::option::Option<std::fmt::Arguments<'_>>;
    let _459: u8;
    let _460: u8;
    let mut _461: [N; 4];
    let mut _462: N;
    let mut _463: N;
    let mut _464: N;
    let mut _465: N;
    let mut _466: (&u8, &u8);
    let mut _467: &u8;
    let mut _470: bool;
    let mut _471: bool;
    let mut _472: u8;
    let mut _473: u8;
    let _475: !;
    let mut _476: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _477: (&u8, &u8);
    let _478: &u8;
    let mut _479: &u8;
    let mut _482: bool;
    let mut _483: bool;
    let mut _484: u8;
    let mut _485: u8;
    let _487: !;
    let mut _488: std::option::Option<std::fmt::Arguments<'_>>;
    let _489: &u8;
    let _490: &u8;
    let mut _491: (&&u8, &&u8);
    let mut _492: &&u8;
    let mut _495: bool;
    let mut _496: bool;
    let _498: !;
    let mut _499: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _500: (&&u8, &&u8);
    let _501: &&u8;
    let mut _502: &&u8;
    let mut _505: bool;
    let mut _506: bool;
    let _508: !;
    let mut _509: std::option::Option<std::fmt::Arguments<'_>>;
    let _510: &u8;
    let _511: &u8;
    let mut _512: (&&u8, &&u8);
    let mut _513: &&u8;
    let mut _516: bool;
    let mut _517: bool;
    let _519: !;
    let mut _520: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _521: (&&u8, &&u8);
    let _522: &&u8;
    let mut _523: &&u8;
    let mut _526: bool;
    let mut _527: bool;
    let _529: !;
    let mut _530: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _532: &[N; 4];
    let mut _534: &[N; 4];
    let mut _537: &[N; 4];
    let mut _539: &[N; 4];
    let mut _542: &[Z; 4];
    let mut _544: &[Z; 4];
    let mut _547: &[Z; 4];
    let mut _549: &[Z; 4];
    let mut _552: &[Z; 4];
    let mut _554: &[Z; 4];
    let mut _557: &[N; 4];
    let mut _559: &[N; 4];
    let mut _562: &[N; 4];
    let mut _564: &[N; 4];
    let mut _567: &[N; 4];
    let mut _569: &[N; 4];
    scope 1 {
        debug runtime_eval => _1;
        let _10: &[N; 2];
        let _11: &[N; 2];
        let _20: &[N; 2];
        let _21: &[N; 2];
        let mut _570: &[N; 2];
        scope 3 {
            debug left_val => _10;
            debug right_val => _11;
            let _14: core::panicking::AssertKind;
            scope 4 {
                debug kind => _14;
            }
        }
        scope 5 {
            debug left_val => _20;
            debug right_val => _21;
            let _24: core::panicking::AssertKind;
            scope 6 {
                debug kind => _24;
            }
        }
    }
    scope 2 {
        debug x => _2;
    }
    scope 7 {
        debug runtime_eval => _27;
        let _31: &&[N; 2];
        let _32: &&[N; 2];
        let _41: &&[N; 2];
        let _42: &&[N; 2];
        let mut _568: &&[N; 2];
        scope 9 {
            debug left_val => _31;
            debug right_val => _32;
            let _35: core::panicking::AssertKind;
            scope 10 {
                debug kind => _35;
            }
        }
        scope 11 {
            debug left_val => _41;
            debug right_val => _42;
            let _45: core::panicking::AssertKind;
            scope 12 {
                debug kind => _45;
            }
        }
    }
    scope 8 {
        debug x => _28;
    }
    scope 13 {
        debug runtime_eval => _48;
        let _52: &&[N; 2];
        let _53: &&[N; 2];
        let _62: &&[N; 2];
        let _63: &&[N; 2];
        let mut _566: &&[N; 2];
        scope 15 {
            debug left_val => _52;
            debug right_val => _53;
            let _56: core::panicking::AssertKind;
            scope 16 {
                debug kind => _56;
            }
        }
        scope 17 {
            debug left_val => _62;
            debug right_val => _63;
            let _66: core::panicking::AssertKind;
            scope 18 {
                debug kind => _66;
            }
        }
    }
    scope 14 {
        debug x => _49;
    }
    scope 19 {
        debug runtime_eval => const [];
        let _72: &[N; 0];
        let _73: &[N; 0];
        let _82: &[N; 0];
        let _83: &[N; 0];
        let mut _565: &[N; 0];
        scope 21 {
            debug left_val => _72;
            debug right_val => _73;
            let _76: core::panicking::AssertKind;
            scope 22 {
                debug kind => _76;
            }
        }
        scope 23 {
            debug left_val => _82;
            debug right_val => _83;
            let _86: core::panicking::AssertKind;
            scope 24 {
                debug kind => _86;
            }
        }
    }
    scope 20 {
        debug x => const [];
    }
    scope 25 {
        debug runtime_eval => _89;
        let _93: &&[N; 0];
        let _94: &&[N; 0];
        let _103: &&[N; 0];
        let _104: &&[N; 0];
        let mut _563: &&[N; 0];
        scope 27 {
            debug left_val => _93;
            debug right_val => _94;
            let _97: core::panicking::AssertKind;
            scope 28 {
                debug kind => _97;
            }
        }
        scope 29 {
            debug left_val => _103;
            debug right_val => _104;
            let _107: core::panicking::AssertKind;
            scope 30 {
                debug kind => _107;
            }
        }
    }
    scope 26 {
        debug x => _90;
    }
    scope 31 {
        debug runtime_eval => _110;
        let _114: &&[N; 0];
        let _115: &&[N; 0];
        let _124: &&[N; 0];
        let _125: &&[N; 0];
        let mut _561: &&[N; 0];
        scope 33 {
            debug left_val => _114;
            debug right_val => _115;
            let _118: core::panicking::AssertKind;
            scope 34 {
                debug kind => _118;
            }
        }
        scope 35 {
            debug left_val => _124;
            debug right_val => _125;
            let _128: core::panicking::AssertKind;
            scope 36 {
                debug kind => _128;
            }
        }
    }
    scope 32 {
        debug x => _111;
    }
    scope 37 {
        debug runtime_eval => _131;
        let _140: &N;
        let _141: &N;
        let _150: &N;
        let _151: &N;
        let mut _560: &N;
        scope 39 {
            debug left_val => _140;
            debug right_val => _141;
            let _144: core::panicking::AssertKind;
            scope 40 {
                debug kind => _144;
            }
        }
        scope 41 {
            debug left_val => _150;
            debug right_val => _151;
            let _154: core::panicking::AssertKind;
            scope 42 {
                debug kind => _154;
            }
        }
    }
    scope 38 {
        debug x => _132;
    }
    scope 43 {
        debug runtime_eval => _157;
        let _161: &&N;
        let _162: &&N;
        let _171: &&N;
        let _172: &&N;
        let mut _558: &&N;
        scope 45 {
            debug left_val => _161;
            debug right_val => _162;
            let _165: core::panicking::AssertKind;
            scope 46 {
                debug kind => _165;
            }
        }
        scope 47 {
            debug left_val => _171;
            debug right_val => _172;
            let _175: core::panicking::AssertKind;
            scope 48 {
                debug kind => _175;
            }
        }
    }
    scope 44 {
        debug x => _158;
    }
    scope 49 {
        debug runtime_eval => _178;
        let _183: &&N;
        let _184: &&N;
        let _193: &&N;
        let _194: &&N;
        let mut _556: &&N;
        scope 51 {
            debug left_val => _183;
            debug right_val => _184;
            let _187: core::panicking::AssertKind;
            scope 52 {
                debug kind => _187;
            }
        }
        scope 53 {
            debug left_val => _193;
            debug right_val => _194;
            let _197: core::panicking::AssertKind;
            scope 54 {
                debug kind => _197;
            }
        }
    }
    scope 50 {
        debug _y => _179;
        debug x => _180;
    }
    scope 55 {
        debug runtime_eval => const [Z, Z];
        let _203: &[Z; 2];
        let _204: &[Z; 2];
        let _213: &[Z; 2];
        let _214: &[Z; 2];
        let mut _555: &[Z; 2];
        scope 57 {
            debug left_val => _203;
            debug right_val => _204;
            let _207: core::panicking::AssertKind;
            scope 58 {
                debug kind => _207;
            }
        }
        scope 59 {
            debug left_val => _213;
            debug right_val => _214;
            let _217: core::panicking::AssertKind;
            scope 60 {
                debug kind => _217;
            }
        }
    }
    scope 56 {
        debug x => const [Z, Z];
    }
    scope 61 {
        debug runtime_eval => _220;
        let _224: &&[Z; 2];
        let _225: &&[Z; 2];
        let _234: &&[Z; 2];
        let _235: &&[Z; 2];
        let mut _553: &&[Z; 2];
        scope 63 {
            debug left_val => _224;
            debug right_val => _225;
            let _228: core::panicking::AssertKind;
            scope 64 {
                debug kind => _228;
            }
        }
        scope 65 {
            debug left_val => _234;
            debug right_val => _235;
            let _238: core::panicking::AssertKind;
            scope 66 {
                debug kind => _238;
            }
        }
    }
    scope 62 {
        debug x => _221;
    }
    scope 67 {
        debug runtime_eval => _241;
        let _245: &&[Z; 2];
        let _246: &&[Z; 2];
        let _255: &&[Z; 2];
        let _256: &&[Z; 2];
        let mut _551: &&[Z; 2];
        scope 69 {
            debug left_val => _245;
            debug right_val => _246;
            let _249: core::panicking::AssertKind;
            scope 70 {
                debug kind => _249;
            }
        }
        scope 71 {
            debug left_val => _255;
            debug right_val => _256;
            let _259: core::panicking::AssertKind;
            scope 72 {
                debug kind => _259;
            }
        }
    }
    scope 68 {
        debug x => _242;
    }
    scope 73 {
        debug runtime_eval => const [];
        let _265: &[Z; 0];
        let _266: &[Z; 0];
        let _275: &[Z; 0];
        let _276: &[Z; 0];
        let mut _550: &[Z; 0];
        scope 75 {
            debug left_val => _265;
            debug right_val => _266;
            let _269: core::panicking::AssertKind;
            scope 76 {
                debug kind => _269;
            }
        }
        scope 77 {
            debug left_val => _275;
            debug right_val => _276;
            let _279: core::panicking::AssertKind;
            scope 78 {
                debug kind => _279;
            }
        }
    }
    scope 74 {
        debug x => const [];
    }
    scope 79 {
        debug runtime_eval => _282;
        let _286: &&[Z; 0];
        let _287: &&[Z; 0];
        let _296: &&[Z; 0];
        let _297: &&[Z; 0];
        let mut _548: &&[Z; 0];
        scope 81 {
            debug left_val => _286;
            debug right_val => _287;
            let _290: core::panicking::AssertKind;
            scope 82 {
                debug kind => _290;
            }
        }
        scope 83 {
            debug left_val => _296;
            debug right_val => _297;
            let _300: core::panicking::AssertKind;
            scope 84 {
                debug kind => _300;
            }
        }
    }
    scope 80 {
        debug x => _283;
    }
    scope 85 {
        debug runtime_eval => _303;
        let _307: &&[Z; 0];
        let _308: &&[Z; 0];
        let _317: &&[Z; 0];
        let _318: &&[Z; 0];
        let mut _546: &&[Z; 0];
        scope 87 {
            debug left_val => _307;
            debug right_val => _308;
            let _311: core::panicking::AssertKind;
            scope 88 {
                debug kind => _311;
            }
        }
        scope 89 {
            debug left_val => _317;
            debug right_val => _318;
            let _321: core::panicking::AssertKind;
            scope 90 {
                debug kind => _321;
            }
        }
    }
    scope 86 {
        debug x => _304;
    }
    scope 91 {
        debug runtime_eval => const Z;
        let _327: &Z;
        let _328: &Z;
        let _337: &Z;
        let _338: &Z;
        let mut _545: &Z;
        scope 93 {
            debug left_val => _327;
            debug right_val => _328;
            let _331: core::panicking::AssertKind;
            scope 94 {
                debug kind => _331;
            }
        }
        scope 95 {
            debug left_val => _337;
            debug right_val => _338;
            let _341: core::panicking::AssertKind;
            scope 96 {
                debug kind => _341;
            }
        }
    }
    scope 92 {
        debug x => const Z;
    }
    scope 97 {
        debug runtime_eval => _344;
        let _348: &&Z;
        let _349: &&Z;
        let _358: &&Z;
        let _359: &&Z;
        let mut _543: &&Z;
        scope 99 {
            debug left_val => _348;
            debug right_val => _349;
            let _352: core::panicking::AssertKind;
            scope 100 {
                debug kind => _352;
            }
        }
        scope 101 {
            debug left_val => _358;
            debug right_val => _359;
            let _362: core::panicking::AssertKind;
            scope 102 {
                debug kind => _362;
            }
        }
    }
    scope 98 {
        debug x => _345;
    }
    scope 103 {
        debug runtime_eval => _365;
        let _370: &&Z;
        let _371: &&Z;
        let _380: &&Z;
        let _381: &&Z;
        let mut _541: &&Z;
        scope 105 {
            debug left_val => _370;
            debug right_val => _371;
            let _374: core::panicking::AssertKind;
            scope 106 {
                debug kind => _374;
            }
        }
        scope 107 {
            debug left_val => _380;
            debug right_val => _381;
            let _384: core::panicking::AssertKind;
            scope 108 {
                debug kind => _384;
            }
        }
    }
    scope 104 {
        debug _y => _366;
        debug x => _367;
    }
    scope 109 {
        debug runtime_eval => _387;
        let _396: &u8;
        let _397: &u8;
        let _408: &u8;
        let _409: &u8;
        let mut _540: &u8;
        scope 111 {
            debug left_val => _396;
            debug right_val => _397;
            let _402: core::panicking::AssertKind;
            scope 112 {
                debug kind => _402;
            }
        }
        scope 113 {
            debug left_val => _408;
            debug right_val => _409;
            let _414: core::panicking::AssertKind;
            scope 114 {
                debug kind => _414;
            }
        }
    }
    scope 110 {
        debug x => _388;
    }
    scope 115 {
        debug runtime_eval => _417;
        let _421: &&u8;
        let _422: &&u8;
        let _431: &&u8;
        let _432: &&u8;
        let mut _538: &&u8;
        scope 117 {
            debug left_val => _421;
            debug right_val => _422;
            let _425: core::panicking::AssertKind;
            scope 118 {
                debug kind => _425;
            }
        }
        scope 119 {
            debug left_val => _431;
            debug right_val => _432;
            let _435: core::panicking::AssertKind;
            scope 120 {
                debug kind => _435;
            }
        }
    }
    scope 116 {
        debug x => _418;
    }
    scope 121 {
        debug runtime_eval => _438;
        let _442: &&u8;
        let _443: &&u8;
        let _452: &&u8;
        let _453: &&u8;
        let mut _536: &&u8;
        scope 123 {
            debug left_val => _442;
            debug right_val => _443;
            let _446: core::panicking::AssertKind;
            scope 124 {
                debug kind => _446;
            }
        }
        scope 125 {
            debug left_val => _452;
            debug right_val => _453;
            let _456: core::panicking::AssertKind;
            scope 126 {
                debug kind => _456;
            }
        }
    }
    scope 122 {
        debug x => _439;
    }
    scope 127 {
        debug runtime_eval => _459;
        let _468: &u8;
        let _469: &u8;
        let _480: &u8;
        let _481: &u8;
        let mut _535: &u8;
        scope 129 {
            debug left_val => _468;
            debug right_val => _469;
            let _474: core::panicking::AssertKind;
            scope 130 {
                debug kind => _474;
            }
        }
        scope 131 {
            debug left_val => _480;
            debug right_val => _481;
            let _486: core::panicking::AssertKind;
            scope 132 {
                debug kind => _486;
            }
        }
    }
    scope 128 {
        debug x => _460;
    }
    scope 133 {
        debug runtime_eval => _489;
        let _493: &&u8;
        let _494: &&u8;
        let _503: &&u8;
        let _504: &&u8;
        let mut _533: &&u8;
        scope 135 {
            debug left_val => _493;
            debug right_val => _494;
            let _497: core::panicking::AssertKind;
            scope 136 {
                debug kind => _497;
            }
        }
        scope 137 {
            debug left_val => _503;
            debug right_val => _504;
            let _507: core::panicking::AssertKind;
            scope 138 {
                debug kind => _507;
            }
        }
    }
    scope 134 {
        debug x => _490;
    }
    scope 139 {
        debug runtime_eval => _510;
        let _514: &&u8;
        let _515: &&u8;
        let _524: &&u8;
        let _525: &&u8;
        let mut _531: &&u8;
        scope 141 {
            debug left_val => _514;
            debug right_val => _515;
            let _518: core::panicking::AssertKind;
            scope 142 {
                debug kind => _518;
            }
        }
        scope 143 {
            debug left_val => _524;
            debug right_val => _525;
            let _528: core::panicking::AssertKind;
            scope 144 {
                debug kind => _528;
            }
        }
    }
    scope 140 {
        debug x => _511;
    }

    bb0: {
        _4 = N(const 1_u8);
        _5 = N(const 2_u8);
        _6 = N(const 3_u8);
        _7 = N(const 4_u8);
        _3 = [move _4, move _5, move _6, move _7];
        _2 = move _3[1..3];
        _1 = move _2;
        _570 = const _;
        _9 = &_1;
        _8 = (_570, move _9);
        _10 = (_8.0: &[N; 2]);
        _11 = (_8.1: &[N; 2]);
        _13 = <[N; 2] as PartialEq>::eq(_10, _11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<[N; 2], [N; 2]>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb3: {
        _18 = const {alloc1: &[N; 2]};
        _19 = &_1;
        _17 = (_18, move _19);
        _20 = (_17.0: &[N; 2]);
        _21 = (_17.1: &[N; 2]);
        _23 = <[N; 2] as PartialEq>::eq(_20, _21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<[N; 2], [N; 2]>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb6: {
        _569 = const _;
        _28 = &(*_569)[1..3];
        _27 = _28;
        _568 = const _;
        _30 = &_27;
        _29 = (_568, move _30);
        _31 = (_29.0: &&[N; 2]);
        _32 = (_29.1: &&[N; 2]);
        _34 = <&[N; 2] as PartialEq>::eq(_31, _32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _35, _31, _32, move _37) -> unwind continue;
    }

    bb9: {
        _39 = const {alloc2: &&[N; 2]};
        _40 = &_27;
        _38 = (_39, move _40);
        _41 = (_38.0: &&[N; 2]);
        _42 = (_38.1: &&[N; 2]);
        _44 = <&[N; 2] as PartialEq>::eq(_41, _42) -> [return: bb10, unwind continue];
    }

    bb10: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _45, _41, _42, move _47) -> unwind continue;
    }

    bb12: {
        _567 = const _;
        _49 = &(*_567)[1..3];
        _48 = _49;
        _566 = const _;
        _51 = &_48;
        _50 = (_566, move _51);
        _52 = (_50.0: &&[N; 2]);
        _53 = (_50.1: &&[N; 2]);
        _55 = <&[N; 2] as PartialEq>::eq(_52, _53) -> [return: bb13, unwind continue];
    }

    bb13: {
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _56, _52, _53, move _58) -> unwind continue;
    }

    bb15: {
        _60 = const {alloc3: &&[N; 2]};
        _61 = &_48;
        _59 = (_60, move _61);
        _62 = (_59.0: &&[N; 2]);
        _63 = (_59.1: &&[N; 2]);
        _65 = <&[N; 2] as PartialEq>::eq(_62, _63) -> [return: bb16, unwind continue];
    }

    bb16: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<&[N; 2], &[N; 2]>(move _66, _62, _63, move _68) -> unwind continue;
    }

    bb18: {
        _565 = const _;
        _71 = &_69;
        _70 = (_565, move _71);
        _72 = (_70.0: &[N; 0]);
        _73 = (_70.1: &[N; 0]);
        _75 = <[N; 0] as PartialEq>::eq(_72, _73) -> [return: bb19, unwind continue];
    }

    bb19: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<[N; 0], [N; 0]>(move _76, _72, _73, move _78) -> unwind continue;
    }

    bb21: {
        _80 = const {alloc4: &[N; 0]};
        _81 = &_69;
        _79 = (_80, move _81);
        _82 = (_79.0: &[N; 0]);
        _83 = (_79.1: &[N; 0]);
        _85 = <[N; 0] as PartialEq>::eq(_82, _83) -> [return: bb22, unwind continue];
    }

    bb22: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<[N; 0], [N; 0]>(move _86, _82, _83, move _88) -> unwind continue;
    }

    bb24: {
        _564 = const _;
        _90 = &(*_564)[2..2];
        _89 = _90;
        _563 = const _;
        _92 = &_89;
        _91 = (_563, move _92);
        _93 = (_91.0: &&[N; 0]);
        _94 = (_91.1: &&[N; 0]);
        _96 = <&[N; 0] as PartialEq>::eq(_93, _94) -> [return: bb25, unwind continue];
    }

    bb25: {
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _97, _93, _94, move _99) -> unwind continue;
    }

    bb27: {
        _101 = const {alloc5: &&[N; 0]};
        _102 = &_89;
        _100 = (_101, move _102);
        _103 = (_100.0: &&[N; 0]);
        _104 = (_100.1: &&[N; 0]);
        _106 = <&[N; 0] as PartialEq>::eq(_103, _104) -> [return: bb28, unwind continue];
    }

    bb28: {
        _105 = Not(move _106);
        switchInt(move _105) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _107, _103, _104, move _109) -> unwind continue;
    }

    bb30: {
        _562 = const _;
        _111 = &(*_562)[2..2];
        _110 = _111;
        _561 = const _;
        _113 = &_110;
        _112 = (_561, move _113);
        _114 = (_112.0: &&[N; 0]);
        _115 = (_112.1: &&[N; 0]);
        _117 = <&[N; 0] as PartialEq>::eq(_114, _115) -> [return: bb31, unwind continue];
    }

    bb31: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _118, _114, _115, move _120) -> unwind continue;
    }

    bb33: {
        _122 = const {alloc6: &&[N; 0]};
        _123 = &_110;
        _121 = (_122, move _123);
        _124 = (_121.0: &&[N; 0]);
        _125 = (_121.1: &&[N; 0]);
        _127 = <&[N; 0] as PartialEq>::eq(_124, _125) -> [return: bb34, unwind continue];
    }

    bb34: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<&[N; 0], &[N; 0]>(move _128, _124, _125, move _130) -> unwind continue;
    }

    bb36: {
        _134 = N(const 1_u8);
        _135 = N(const 2_u8);
        _136 = N(const 3_u8);
        _137 = N(const 4_u8);
        _133 = [move _134, move _135, move _136, move _137];
        _132 = move _133[3 of 4];
        _131 = move _132;
        _560 = const _;
        _139 = &_131;
        _138 = (_560, move _139);
        _140 = (_138.0: &N);
        _141 = (_138.1: &N);
        _143 = <N as PartialEq>::eq(_140, _141) -> [return: bb37, unwind continue];
    }

    bb37: {
        _142 = Not(move _143);
        switchInt(move _142) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<N, N>(move _144, _140, _141, move _146) -> unwind continue;
    }

    bb39: {
        _148 = const {alloc7: &N};
        _149 = &_131;
        _147 = (_148, move _149);
        _150 = (_147.0: &N);
        _151 = (_147.1: &N);
        _153 = <N as PartialEq>::eq(_150, _151) -> [return: bb40, unwind continue];
    }

    bb40: {
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<N, N>(move _154, _150, _151, move _156) -> unwind continue;
    }

    bb42: {
        _559 = const _;
        _158 = &(*_559)[3 of 4];
        _157 = _158;
        _558 = const _;
        _160 = &_157;
        _159 = (_558, move _160);
        _161 = (_159.0: &&N);
        _162 = (_159.1: &&N);
        _164 = <&N as PartialEq>::eq(_161, _162) -> [return: bb43, unwind continue];
    }

    bb43: {
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _165 = core::panicking::AssertKind::Eq;
        _167 = Option::<Arguments<'_>>::None;
        _166 = core::panicking::assert_failed::<&N, &N>(move _165, _161, _162, move _167) -> unwind continue;
    }

    bb45: {
        _169 = const {alloc8: &&N};
        _170 = &_157;
        _168 = (_169, move _170);
        _171 = (_168.0: &&N);
        _172 = (_168.1: &&N);
        _174 = <&N as PartialEq>::eq(_171, _172) -> [return: bb46, unwind continue];
    }

    bb46: {
        _173 = Not(move _174);
        switchInt(move _173) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _175 = core::panicking::AssertKind::Eq;
        _177 = Option::<Arguments<'_>>::None;
        _176 = core::panicking::assert_failed::<&N, &N>(move _175, _171, _172, move _177) -> unwind continue;
    }

    bb48: {
        _557 = const _;
        _179 = &(*_557)[1..3];
        _180 = &(*_557)[3 of 4];
        _178 = _180;
        _556 = const _;
        _182 = &_178;
        _181 = (_556, move _182);
        _183 = (_181.0: &&N);
        _184 = (_181.1: &&N);
        _186 = <&N as PartialEq>::eq(_183, _184) -> [return: bb49, unwind continue];
    }

    bb49: {
        _185 = Not(move _186);
        switchInt(move _185) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _187 = core::panicking::AssertKind::Eq;
        _189 = Option::<Arguments<'_>>::None;
        _188 = core::panicking::assert_failed::<&N, &N>(move _187, _183, _184, move _189) -> unwind continue;
    }

    bb51: {
        _191 = const {alloc9: &&N};
        _192 = &_178;
        _190 = (_191, move _192);
        _193 = (_190.0: &&N);
        _194 = (_190.1: &&N);
        _196 = <&N as PartialEq>::eq(_193, _194) -> [return: bb52, unwind continue];
    }

    bb52: {
        _195 = Not(move _196);
        switchInt(move _195) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _197 = core::panicking::AssertKind::Eq;
        _199 = Option::<Arguments<'_>>::None;
        _198 = core::panicking::assert_failed::<&N, &N>(move _197, _193, _194, move _199) -> unwind continue;
    }

    bb54: {
        _555 = const _;
        _202 = &_200;
        _201 = (_555, move _202);
        _203 = (_201.0: &[Z; 2]);
        _204 = (_201.1: &[Z; 2]);
        _206 = <[Z; 2] as PartialEq>::eq(_203, _204) -> [return: bb55, unwind continue];
    }

    bb55: {
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _207 = core::panicking::AssertKind::Eq;
        _209 = Option::<Arguments<'_>>::None;
        _208 = core::panicking::assert_failed::<[Z; 2], [Z; 2]>(move _207, _203, _204, move _209) -> unwind continue;
    }

    bb57: {
        _211 = const {alloc10: &[Z; 2]};
        _212 = &_200;
        _210 = (_211, move _212);
        _213 = (_210.0: &[Z; 2]);
        _214 = (_210.1: &[Z; 2]);
        _216 = <[Z; 2] as PartialEq>::eq(_213, _214) -> [return: bb58, unwind continue];
    }

    bb58: {
        _215 = Not(move _216);
        switchInt(move _215) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _217 = core::panicking::AssertKind::Eq;
        _219 = Option::<Arguments<'_>>::None;
        _218 = core::panicking::assert_failed::<[Z; 2], [Z; 2]>(move _217, _213, _214, move _219) -> unwind continue;
    }

    bb60: {
        _554 = const _;
        _221 = &(*_554)[1..3];
        _220 = _221;
        _553 = const _;
        _223 = &_220;
        _222 = (_553, move _223);
        _224 = (_222.0: &&[Z; 2]);
        _225 = (_222.1: &&[Z; 2]);
        _227 = <&[Z; 2] as PartialEq>::eq(_224, _225) -> [return: bb61, unwind continue];
    }

    bb61: {
        _226 = Not(move _227);
        switchInt(move _226) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _228 = core::panicking::AssertKind::Eq;
        _230 = Option::<Arguments<'_>>::None;
        _229 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _228, _224, _225, move _230) -> unwind continue;
    }

    bb63: {
        _232 = const {alloc11: &&[Z; 2]};
        _233 = &_220;
        _231 = (_232, move _233);
        _234 = (_231.0: &&[Z; 2]);
        _235 = (_231.1: &&[Z; 2]);
        _237 = <&[Z; 2] as PartialEq>::eq(_234, _235) -> [return: bb64, unwind continue];
    }

    bb64: {
        _236 = Not(move _237);
        switchInt(move _236) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _238 = core::panicking::AssertKind::Eq;
        _240 = Option::<Arguments<'_>>::None;
        _239 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _238, _234, _235, move _240) -> unwind continue;
    }

    bb66: {
        _552 = const _;
        _242 = &(*_552)[1..3];
        _241 = _242;
        _551 = const _;
        _244 = &_241;
        _243 = (_551, move _244);
        _245 = (_243.0: &&[Z; 2]);
        _246 = (_243.1: &&[Z; 2]);
        _248 = <&[Z; 2] as PartialEq>::eq(_245, _246) -> [return: bb67, unwind continue];
    }

    bb67: {
        _247 = Not(move _248);
        switchInt(move _247) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _249 = core::panicking::AssertKind::Eq;
        _251 = Option::<Arguments<'_>>::None;
        _250 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _249, _245, _246, move _251) -> unwind continue;
    }

    bb69: {
        _253 = const {alloc12: &&[Z; 2]};
        _254 = &_241;
        _252 = (_253, move _254);
        _255 = (_252.0: &&[Z; 2]);
        _256 = (_252.1: &&[Z; 2]);
        _258 = <&[Z; 2] as PartialEq>::eq(_255, _256) -> [return: bb70, unwind continue];
    }

    bb70: {
        _257 = Not(move _258);
        switchInt(move _257) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _259 = core::panicking::AssertKind::Eq;
        _261 = Option::<Arguments<'_>>::None;
        _260 = core::panicking::assert_failed::<&[Z; 2], &[Z; 2]>(move _259, _255, _256, move _261) -> unwind continue;
    }

    bb72: {
        _550 = const _;
        _264 = &_262;
        _263 = (_550, move _264);
        _265 = (_263.0: &[Z; 0]);
        _266 = (_263.1: &[Z; 0]);
        _268 = <[Z; 0] as PartialEq>::eq(_265, _266) -> [return: bb73, unwind continue];
    }

    bb73: {
        _267 = Not(move _268);
        switchInt(move _267) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _269 = core::panicking::AssertKind::Eq;
        _271 = Option::<Arguments<'_>>::None;
        _270 = core::panicking::assert_failed::<[Z; 0], [Z; 0]>(move _269, _265, _266, move _271) -> unwind continue;
    }

    bb75: {
        _273 = const {alloc13: &[Z; 0]};
        _274 = &_262;
        _272 = (_273, move _274);
        _275 = (_272.0: &[Z; 0]);
        _276 = (_272.1: &[Z; 0]);
        _278 = <[Z; 0] as PartialEq>::eq(_275, _276) -> [return: bb76, unwind continue];
    }

    bb76: {
        _277 = Not(move _278);
        switchInt(move _277) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _279 = core::panicking::AssertKind::Eq;
        _281 = Option::<Arguments<'_>>::None;
        _280 = core::panicking::assert_failed::<[Z; 0], [Z; 0]>(move _279, _275, _276, move _281) -> unwind continue;
    }

    bb78: {
        _549 = const _;
        _283 = &(*_549)[2..2];
        _282 = _283;
        _548 = const _;
        _285 = &_282;
        _284 = (_548, move _285);
        _286 = (_284.0: &&[Z; 0]);
        _287 = (_284.1: &&[Z; 0]);
        _289 = <&[Z; 0] as PartialEq>::eq(_286, _287) -> [return: bb79, unwind continue];
    }

    bb79: {
        _288 = Not(move _289);
        switchInt(move _288) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _290 = core::panicking::AssertKind::Eq;
        _292 = Option::<Arguments<'_>>::None;
        _291 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _290, _286, _287, move _292) -> unwind continue;
    }

    bb81: {
        _294 = const {alloc14: &&[Z; 0]};
        _295 = &_282;
        _293 = (_294, move _295);
        _296 = (_293.0: &&[Z; 0]);
        _297 = (_293.1: &&[Z; 0]);
        _299 = <&[Z; 0] as PartialEq>::eq(_296, _297) -> [return: bb82, unwind continue];
    }

    bb82: {
        _298 = Not(move _299);
        switchInt(move _298) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _300 = core::panicking::AssertKind::Eq;
        _302 = Option::<Arguments<'_>>::None;
        _301 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _300, _296, _297, move _302) -> unwind continue;
    }

    bb84: {
        _547 = const _;
        _304 = &(*_547)[2..2];
        _303 = _304;
        _546 = const _;
        _306 = &_303;
        _305 = (_546, move _306);
        _307 = (_305.0: &&[Z; 0]);
        _308 = (_305.1: &&[Z; 0]);
        _310 = <&[Z; 0] as PartialEq>::eq(_307, _308) -> [return: bb85, unwind continue];
    }

    bb85: {
        _309 = Not(move _310);
        switchInt(move _309) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _311 = core::panicking::AssertKind::Eq;
        _313 = Option::<Arguments<'_>>::None;
        _312 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _311, _307, _308, move _313) -> unwind continue;
    }

    bb87: {
        _315 = const {alloc15: &&[Z; 0]};
        _316 = &_303;
        _314 = (_315, move _316);
        _317 = (_314.0: &&[Z; 0]);
        _318 = (_314.1: &&[Z; 0]);
        _320 = <&[Z; 0] as PartialEq>::eq(_317, _318) -> [return: bb88, unwind continue];
    }

    bb88: {
        _319 = Not(move _320);
        switchInt(move _319) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _321 = core::panicking::AssertKind::Eq;
        _323 = Option::<Arguments<'_>>::None;
        _322 = core::panicking::assert_failed::<&[Z; 0], &[Z; 0]>(move _321, _317, _318, move _323) -> unwind continue;
    }

    bb90: {
        _545 = const _;
        _326 = &_324;
        _325 = (_545, move _326);
        _327 = (_325.0: &Z);
        _328 = (_325.1: &Z);
        _330 = <Z as PartialEq>::eq(_327, _328) -> [return: bb91, unwind continue];
    }

    bb91: {
        _329 = Not(move _330);
        switchInt(move _329) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _331 = core::panicking::AssertKind::Eq;
        _333 = Option::<Arguments<'_>>::None;
        _332 = core::panicking::assert_failed::<Z, Z>(move _331, _327, _328, move _333) -> unwind continue;
    }

    bb93: {
        _335 = const {alloc16: &Z};
        _336 = &_324;
        _334 = (_335, move _336);
        _337 = (_334.0: &Z);
        _338 = (_334.1: &Z);
        _340 = <Z as PartialEq>::eq(_337, _338) -> [return: bb94, unwind continue];
    }

    bb94: {
        _339 = Not(move _340);
        switchInt(move _339) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _341 = core::panicking::AssertKind::Eq;
        _343 = Option::<Arguments<'_>>::None;
        _342 = core::panicking::assert_failed::<Z, Z>(move _341, _337, _338, move _343) -> unwind continue;
    }

    bb96: {
        _544 = const _;
        _345 = &(*_544)[3 of 4];
        _344 = _345;
        _543 = const _;
        _347 = &_344;
        _346 = (_543, move _347);
        _348 = (_346.0: &&Z);
        _349 = (_346.1: &&Z);
        _351 = <&Z as PartialEq>::eq(_348, _349) -> [return: bb97, unwind continue];
    }

    bb97: {
        _350 = Not(move _351);
        switchInt(move _350) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _352 = core::panicking::AssertKind::Eq;
        _354 = Option::<Arguments<'_>>::None;
        _353 = core::panicking::assert_failed::<&Z, &Z>(move _352, _348, _349, move _354) -> unwind continue;
    }

    bb99: {
        _356 = const {alloc17: &&Z};
        _357 = &_344;
        _355 = (_356, move _357);
        _358 = (_355.0: &&Z);
        _359 = (_355.1: &&Z);
        _361 = <&Z as PartialEq>::eq(_358, _359) -> [return: bb100, unwind continue];
    }

    bb100: {
        _360 = Not(move _361);
        switchInt(move _360) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _362 = core::panicking::AssertKind::Eq;
        _364 = Option::<Arguments<'_>>::None;
        _363 = core::panicking::assert_failed::<&Z, &Z>(move _362, _358, _359, move _364) -> unwind continue;
    }

    bb102: {
        _542 = const _;
        _366 = &(*_542)[1..3];
        _367 = &(*_542)[3 of 4];
        _365 = _367;
        _541 = const _;
        _369 = &_365;
        _368 = (_541, move _369);
        _370 = (_368.0: &&Z);
        _371 = (_368.1: &&Z);
        _373 = <&Z as PartialEq>::eq(_370, _371) -> [return: bb103, unwind continue];
    }

    bb103: {
        _372 = Not(move _373);
        switchInt(move _372) -> [0: bb105, otherwise: bb104];
    }

    bb104: {
        _374 = core::panicking::AssertKind::Eq;
        _376 = Option::<Arguments<'_>>::None;
        _375 = core::panicking::assert_failed::<&Z, &Z>(move _374, _370, _371, move _376) -> unwind continue;
    }

    bb105: {
        _378 = const {alloc18: &&Z};
        _379 = &_365;
        _377 = (_378, move _379);
        _380 = (_377.0: &&Z);
        _381 = (_377.1: &&Z);
        _383 = <&Z as PartialEq>::eq(_380, _381) -> [return: bb106, unwind continue];
    }

    bb106: {
        _382 = Not(move _383);
        switchInt(move _382) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _384 = core::panicking::AssertKind::Eq;
        _386 = Option::<Arguments<'_>>::None;
        _385 = core::panicking::assert_failed::<&Z, &Z>(move _384, _380, _381, move _386) -> unwind continue;
    }

    bb108: {
        _390 = N(const 1_u8);
        _391 = N(const 2_u8);
        _392 = N(const 3_u8);
        _393 = N(const 4_u8);
        _389 = [move _390, move _391, move _392, move _393];
        _388 = (_389[3 of 4].0: u8);
        _387 = _388;
        _540 = const _;
        _395 = &_387;
        _394 = (_540, move _395);
        _396 = (_394.0: &u8);
        _397 = (_394.1: &u8);
        _400 = (*_396);
        _401 = (*_397);
        _399 = Eq(move _400, move _401);
        _398 = Not(move _399);
        switchInt(move _398) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _402 = core::panicking::AssertKind::Eq;
        _404 = Option::<Arguments<'_>>::None;
        _403 = core::panicking::assert_failed::<u8, u8>(move _402, _396, _397, move _404) -> unwind continue;
    }

    bb110: {
        _406 = const {alloc19: &u8};
        _407 = &_387;
        _405 = (_406, move _407);
        _408 = (_405.0: &u8);
        _409 = (_405.1: &u8);
        _412 = (*_408);
        _413 = (*_409);
        _411 = Eq(move _412, move _413);
        _410 = Not(move _411);
        switchInt(move _410) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _414 = core::panicking::AssertKind::Eq;
        _416 = Option::<Arguments<'_>>::None;
        _415 = core::panicking::assert_failed::<u8, u8>(move _414, _408, _409, move _416) -> unwind continue;
    }

    bb112: {
        _539 = const _;
        _418 = &((*_539)[3 of 4].0: u8);
        _417 = _418;
        _538 = const _;
        _420 = &_417;
        _419 = (_538, move _420);
        _421 = (_419.0: &&u8);
        _422 = (_419.1: &&u8);
        _424 = <&u8 as PartialEq>::eq(_421, _422) -> [return: bb113, unwind continue];
    }

    bb113: {
        _423 = Not(move _424);
        switchInt(move _423) -> [0: bb115, otherwise: bb114];
    }

    bb114: {
        _425 = core::panicking::AssertKind::Eq;
        _427 = Option::<Arguments<'_>>::None;
        _426 = core::panicking::assert_failed::<&u8, &u8>(move _425, _421, _422, move _427) -> unwind continue;
    }

    bb115: {
        _429 = const {alloc20: &&u8};
        _430 = &_417;
        _428 = (_429, move _430);
        _431 = (_428.0: &&u8);
        _432 = (_428.1: &&u8);
        _434 = <&u8 as PartialEq>::eq(_431, _432) -> [return: bb116, unwind continue];
    }

    bb116: {
        _433 = Not(move _434);
        switchInt(move _433) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _435 = core::panicking::AssertKind::Eq;
        _437 = Option::<Arguments<'_>>::None;
        _436 = core::panicking::assert_failed::<&u8, &u8>(move _435, _431, _432, move _437) -> unwind continue;
    }

    bb118: {
        _537 = const _;
        _439 = &((*_537)[3 of 4].0: u8);
        _438 = _439;
        _536 = const _;
        _441 = &_438;
        _440 = (_536, move _441);
        _442 = (_440.0: &&u8);
        _443 = (_440.1: &&u8);
        _445 = <&u8 as PartialEq>::eq(_442, _443) -> [return: bb119, unwind continue];
    }

    bb119: {
        _444 = Not(move _445);
        switchInt(move _444) -> [0: bb121, otherwise: bb120];
    }

    bb120: {
        _446 = core::panicking::AssertKind::Eq;
        _448 = Option::<Arguments<'_>>::None;
        _447 = core::panicking::assert_failed::<&u8, &u8>(move _446, _442, _443, move _448) -> unwind continue;
    }

    bb121: {
        _450 = const {alloc21: &&u8};
        _451 = &_438;
        _449 = (_450, move _451);
        _452 = (_449.0: &&u8);
        _453 = (_449.1: &&u8);
        _455 = <&u8 as PartialEq>::eq(_452, _453) -> [return: bb122, unwind continue];
    }

    bb122: {
        _454 = Not(move _455);
        switchInt(move _454) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _456 = core::panicking::AssertKind::Eq;
        _458 = Option::<Arguments<'_>>::None;
        _457 = core::panicking::assert_failed::<&u8, &u8>(move _456, _452, _453, move _458) -> unwind continue;
    }

    bb124: {
        _462 = N(const 1_u8);
        _463 = N(const 2_u8);
        _464 = N(const 3_u8);
        _465 = N(const 4_u8);
        _461 = [move _462, move _463, move _464, move _465];
        _460 = (_461[0 of 4].0: u8);
        _459 = _460;
        _535 = const _;
        _467 = &_459;
        _466 = (_535, move _467);
        _468 = (_466.0: &u8);
        _469 = (_466.1: &u8);
        _472 = (*_468);
        _473 = (*_469);
        _471 = Eq(move _472, move _473);
        _470 = Not(move _471);
        switchInt(move _470) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _474 = core::panicking::AssertKind::Eq;
        _476 = Option::<Arguments<'_>>::None;
        _475 = core::panicking::assert_failed::<u8, u8>(move _474, _468, _469, move _476) -> unwind continue;
    }

    bb126: {
        _478 = const {alloc22: &u8};
        _479 = &_459;
        _477 = (_478, move _479);
        _480 = (_477.0: &u8);
        _481 = (_477.1: &u8);
        _484 = (*_480);
        _485 = (*_481);
        _483 = Eq(move _484, move _485);
        _482 = Not(move _483);
        switchInt(move _482) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _486 = core::panicking::AssertKind::Eq;
        _488 = Option::<Arguments<'_>>::None;
        _487 = core::panicking::assert_failed::<u8, u8>(move _486, _480, _481, move _488) -> unwind continue;
    }

    bb128: {
        _534 = const _;
        _490 = &((*_534)[0 of 4].0: u8);
        _489 = _490;
        _533 = const _;
        _492 = &_489;
        _491 = (_533, move _492);
        _493 = (_491.0: &&u8);
        _494 = (_491.1: &&u8);
        _496 = <&u8 as PartialEq>::eq(_493, _494) -> [return: bb129, unwind continue];
    }

    bb129: {
        _495 = Not(move _496);
        switchInt(move _495) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _497 = core::panicking::AssertKind::Eq;
        _499 = Option::<Arguments<'_>>::None;
        _498 = core::panicking::assert_failed::<&u8, &u8>(move _497, _493, _494, move _499) -> unwind continue;
    }

    bb131: {
        _501 = const {alloc23: &&u8};
        _502 = &_489;
        _500 = (_501, move _502);
        _503 = (_500.0: &&u8);
        _504 = (_500.1: &&u8);
        _506 = <&u8 as PartialEq>::eq(_503, _504) -> [return: bb132, unwind continue];
    }

    bb132: {
        _505 = Not(move _506);
        switchInt(move _505) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        _507 = core::panicking::AssertKind::Eq;
        _509 = Option::<Arguments<'_>>::None;
        _508 = core::panicking::assert_failed::<&u8, &u8>(move _507, _503, _504, move _509) -> unwind continue;
    }

    bb134: {
        _532 = const _;
        _511 = &((*_532)[0 of 4].0: u8);
        _510 = _511;
        _531 = const _;
        _513 = &_510;
        _512 = (_531, move _513);
        _514 = (_512.0: &&u8);
        _515 = (_512.1: &&u8);
        _517 = <&u8 as PartialEq>::eq(_514, _515) -> [return: bb135, unwind continue];
    }

    bb135: {
        _516 = Not(move _517);
        switchInt(move _516) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        _518 = core::panicking::AssertKind::Eq;
        _520 = Option::<Arguments<'_>>::None;
        _519 = core::panicking::assert_failed::<&u8, &u8>(move _518, _514, _515, move _520) -> unwind continue;
    }

    bb137: {
        _522 = const {alloc24: &&u8};
        _523 = &_510;
        _521 = (_522, move _523);
        _524 = (_521.0: &&u8);
        _525 = (_521.1: &&u8);
        _527 = <&u8 as PartialEq>::eq(_524, _525) -> [return: bb138, unwind continue];
    }

    bb138: {
        _526 = Not(move _527);
        switchInt(move _526) -> [0: bb140, otherwise: bb139];
    }

    bb139: {
        _528 = core::panicking::AssertKind::Eq;
        _530 = Option::<Arguments<'_>>::None;
        _529 = core::panicking::assert_failed::<&u8, &u8>(move _528, _524, _525, move _530) -> unwind continue;
    }

    bb140: {
        return;
    }
}

alloc24 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc666───────╼                         │ ╾──────╼
}

alloc666 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc23 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc659───────╼                         │ ╾──────╼
}

alloc659 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc22 (static: main::CONST_EVAL2, size: 1, align: 1) {
    01                                              │ .
}

alloc21 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc641+0x3─────╼                         │ ╾──────╼
}

alloc641 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc20 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc634+0x3─────╼                         │ ╾──────╼
}

alloc634 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc19 (static: main::CONST_EVAL2, size: 1, align: 1) {
    04                                              │ .
}

alloc18 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc616───────╼                         │ ╾──────╼
}

alloc616 (size: 0, align: 1) {}

alloc17 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc613───────╼                         │ ╾──────╼
}

alloc613 (size: 0, align: 1) {}

alloc16 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc15 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc607───────╼                         │ ╾──────╼
}

alloc607 (size: 0, align: 1) {}

alloc14 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc604───────╼                         │ ╾──────╼
}

alloc604 (size: 0, align: 1) {}

alloc13 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc12 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc598───────╼                         │ ╾──────╼
}

alloc598 (size: 0, align: 1) {}

alloc11 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc595───────╼                         │ ╾──────╼
}

alloc595 (size: 0, align: 1) {}

alloc10 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc9 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc589+0x3─────╼                         │ ╾──────╼
}

alloc589 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc8 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc582+0x3─────╼                         │ ╾──────╼
}

alloc582 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc7 (static: main::CONST_EVAL2, size: 1, align: 1) {
    04                                              │ .
}

alloc6 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc564+0x2─────╼                         │ ╾──────╼
}

alloc564 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc5 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc557+0x2─────╼                         │ ╾──────╼
}

alloc557 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc4 (static: main::CONST_EVAL2, size: 0, align: 1) {}

alloc3 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc539+0x1─────╼                         │ ╾──────╼
}

alloc539 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc2 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc532+0x1─────╼                         │ ╾──────╼
}

alloc532 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc1 (static: main::CONST_EVAL2, size: 2, align: 1) {
    02 03                                           │ ..
}

promoted[0] in main: &&u8 = {
    let mut _0: &&u8;
    let mut _1: &u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&u8 = {
    let mut _0: &&u8;
    let mut _1: &u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&u8 = {
    let mut _0: &&u8;
    let mut _1: &u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&u8 = {
    let mut _0: &&u8;
    let mut _1: &u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&Z = {
    let mut _0: &&Z;
    let mut _1: &Z;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &&Z = {
    let mut _0: &&Z;
    let mut _1: &Z;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &Z = {
    let mut _0: &Z;
    let mut _1: Z;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &&[Z; 0] = {
    let mut _0: &&[Z; 0];
    let mut _1: &[Z; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &&[Z; 0] = {
    let mut _0: &&[Z; 0];
    let mut _1: &[Z; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[Z; 0] = {
    let mut _0: &[Z; 0];
    let mut _1: [Z; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &&[Z; 2] = {
    let mut _0: &&[Z; 2];
    let mut _1: &[Z; 2];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &&[Z; 2] = {
    let mut _0: &&[Z; 2];
    let mut _1: &[Z; 2];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];
    let mut _1: [Z; 2];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &&N = {
    let mut _0: &&N;
    let mut _1: &N;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &&N = {
    let mut _0: &&N;
    let mut _1: &N;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &N = {
    let mut _0: &N;
    let mut _1: N;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &&[N; 0] = {
    let mut _0: &&[N; 0];
    let mut _1: &[N; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &&[N; 0] = {
    let mut _0: &&[N; 0];
    let mut _1: &[N; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &[N; 0] = {
    let mut _0: &[N; 0];
    let mut _1: [N; 0];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &&[N; 2] = {
    let mut _0: &&[N; 2];
    let mut _1: &[N; 2];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &&[N; 2] = {
    let mut _0: &&[N; 2];
    let mut _1: &[N; 2];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &[N; 2] = {
    let mut _0: &[N; 2];
    let mut _1: [N; 2];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const main::CONST_EVAL: [N; 2] = {
    let mut _0: [N; 2];
    let _1: [N; 2];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[1..3];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::const_eval() -> [N; 2] {
    let mut _0: [N; 2];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = move _1[1..3];
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [N; 2] {
    let mut _0: [N; 2];
    let _1: [N; 2];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[1..3];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static main::CONST_EVAL2: [N; 2] = {
    let mut _0: [N; 2];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];
    let _1: &[N; 2];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[1..3];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[1..3];
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];
    let _1: &[N; 2];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[1..3];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static main::CONST_EVAL2: &[N; 2] = {
    let mut _0: &[N; 2];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];
    let _1: &[N; 2];
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[1..3];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[1..3];
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 2] {
    let mut _0: &[N; 2];
    let _1: &[N; 2];
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[1..3];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static main::CONST_EVAL2: &[N; 2] = {
    let mut _0: &[N; 2];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::CONST_EVAL: [N; 0] = {
    let mut _0: [N; 0];
    let _1: [N; 0];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[2..2];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main::const_eval() -> [N; 0] {
    let mut _0: [N; 0];
    scope 1 {
        debug x => const [];
    }

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [N; 0] {
    let mut _0: [N; 0];
    let _1: [N; 0];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[2..2];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static main::CONST_EVAL2: [N; 0] = {
    let mut _0: [N; 0];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const main::CONST_EVAL: &[N; 0] = {
    let mut _0: &[N; 0];
    let _1: &[N; 0];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[2..2];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[2..2];
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];
    let _1: &[N; 0];
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[2..2];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static main::CONST_EVAL2: &[N; 0] = {
    let mut _0: &[N; 0];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const main::CONST_EVAL: &[N; 0] = {
    let mut _0: &[N; 0];
    let _1: &[N; 0];
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[2..2];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[2..2];
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[N; 0] {
    let mut _0: &[N; 0];
    let _1: &[N; 0];
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[2..2];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static main::CONST_EVAL2: &[N; 0] = {
    let mut _0: &[N; 0];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const main::CONST_EVAL: N = {
    let mut _0: N;
    let _1: N;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[3 of 4];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

fn main::const_eval() -> N {
    let mut _0: N;
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = move _1[3 of 4];
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> N {
    let mut _0: N;
    let _1: N;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[3 of 4];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: N = {
    let mut _0: N;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &N = {
    let mut _0: &N;
    let _1: &N;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[3 of 4];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &N {
    let mut _0: &N;
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[3 of 4];
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &N {
    let mut _0: &N;
    let _1: &N;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[3 of 4];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

static main::CONST_EVAL2: &N = {
    let mut _0: &N;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &N = {
    let mut _0: &N;
    let _1: &[N; 2];
    let _2: &N;
    let mut _3: &[N; 4];
    let _4: [N; 4];
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: N;
    let mut _9: &[N; 4];
    scope 1 {
        debug _y => _1;
        debug x => _2;
    }

    bb0: {
        StorageLive(_3);
        _9 = const _;
        _3 = &(*_9);
        StorageLive(_1);
        _1 = &(*_3)[1..3];
        StorageLive(_2);
        _2 = &(*_3)[3 of 4];
        StorageDead(_3);
        _0 = &(*_2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &N {
    let mut _0: &N;
    let _1: &[N; 2];
    let mut _2: &[N; 4];
    scope 1 {
        debug _y => _1;
        debug x => _0;
    }

    bb0: {
        _2 = const _;
        _1 = &(*_2)[1..3];
        _0 = &(*_2)[3 of 4];
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &N {
    let mut _0: &N;
    let _1: &[N; 2];
    let _2: &N;
    let mut _3: &[N; 4];
    let _4: [N; 4];
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: N;
    let mut _9: &[N; 4];
    scope 1 {
        debug _y => _1;
        debug x => _2;
    }

    bb0: {
        StorageLive(_3);
        _9 = const _;
        _3 = &(*_9);
        StorageLive(_1);
        _1 = &(*_3)[1..3];
        StorageLive(_2);
        _2 = &(*_3)[3 of 4];
        StorageDead(_3);
        _0 = &(*_2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: &N = {
    let mut _0: &N;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: [Z; 2] = {
    let mut _0: [Z; 2];
    let _1: [Z; 2];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[1..3];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::const_eval() -> [Z; 2] {
    let mut _0: [Z; 2];
    scope 1 {
        debug x => const [Z, Z];
    }

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [Z; 2] {
    let mut _0: [Z; 2];
    let _1: [Z; 2];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[1..3];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static main::CONST_EVAL2: [Z; 2] = {
    let mut _0: [Z; 2];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];
    let _1: &[Z; 2];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[1..3];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];
    let mut _1: &[Z; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[1..3];
        return;
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];
    let _1: &[Z; 2];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[1..3];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static main::CONST_EVAL2: &[Z; 2] = {
    let mut _0: &[Z; 2];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];
    let _1: &[Z; 2];
    let mut _2: &[Z; 4];
    let _3: [Z; 4];
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: Z;
    let mut _8: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[1..3];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];
    let mut _1: &[Z; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[1..3];
        return;
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 2] {
    let mut _0: &[Z; 2];
    let _1: &[Z; 2];
    let mut _2: &[Z; 4];
    let _3: [Z; 4];
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: Z;
    let mut _8: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[1..3];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

static main::CONST_EVAL2: &[Z; 2] = {
    let mut _0: &[Z; 2];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

const main::CONST_EVAL: [Z; 0] = {
    let mut _0: [Z; 0];
    let _1: [Z; 0];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[2..2];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main::const_eval() -> [Z; 0] {
    let mut _0: [Z; 0];
    scope 1 {
        debug x => const [];
    }

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> [Z; 0] {
    let mut _0: [Z; 0];
    let _1: [Z; 0];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[2..2];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static main::CONST_EVAL2: [Z; 0] = {
    let mut _0: [Z; 0];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const main::CONST_EVAL: &[Z; 0] = {
    let mut _0: &[Z; 0];
    let _1: &[Z; 0];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[2..2];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];
    let mut _1: &[Z; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[2..2];
        return;
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];
    let _1: &[Z; 0];
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[2..2];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static main::CONST_EVAL2: &[Z; 0] = {
    let mut _0: &[Z; 0];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const main::CONST_EVAL: &[Z; 0] = {
    let mut _0: &[Z; 0];
    let _1: &[Z; 0];
    let mut _2: &[Z; 4];
    let _3: [Z; 4];
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: Z;
    let mut _8: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[2..2];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

main::CONST_EVAL::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];
    let mut _1: &[Z; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[2..2];
        return;
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &[Z; 0] {
    let mut _0: &[Z; 0];
    let _1: &[Z; 0];
    let mut _2: &[Z; 4];
    let _3: [Z; 4];
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: Z;
    let mut _8: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &(*_2)[2..2];
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

main::const_eval::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

static main::CONST_EVAL2: &[Z; 0] = {
    let mut _0: &[Z; 0];

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

main::CONST_EVAL2::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

const main::CONST_EVAL: Z = {
    let mut _0: Z;
    let _1: Z;
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[3 of 4];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

fn main::const_eval() -> Z {
    let mut _0: Z;
    scope 1 {
        debug x => const Z;
    }

    bb0: {
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Z {
    let mut _0: Z;
    let _1: Z;
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = move _2[3 of 4];
        StorageDead(_2);
        _0 = move _1;
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: Z = {
    let mut _0: Z;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &Z = {
    let mut _0: &Z;
    let _1: &Z;
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[3 of 4];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &Z {
    let mut _0: &Z;
    let mut _1: &[Z; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &(*_1)[3 of 4];
        return;
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &Z {
    let mut _0: &Z;
    let _1: &Z;
    let mut _2: [Z; 4];
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: &[Z; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = Z;
        StorageLive(_4);
        _4 = Z;
        StorageLive(_5);
        _5 = Z;
        StorageLive(_6);
        _6 = Z;
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &(*_7)[3 of 4];
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

static main::CONST_EVAL2: &Z = {
    let mut _0: &Z;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &Z = {
    let mut _0: &Z;
    let _1: &[Z; 2];
    let _2: &Z;
    let mut _3: &[Z; 4];
    let _4: [Z; 4];
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: Z;
    let mut _8: Z;
    let mut _9: &[Z; 4];
    scope 1 {
        debug _y => _1;
        debug x => _2;
    }

    bb0: {
        StorageLive(_3);
        _9 = const _;
        _3 = &(*_9);
        StorageLive(_1);
        _1 = &(*_3)[1..3];
        StorageLive(_2);
        _2 = &(*_3)[3 of 4];
        StorageDead(_3);
        _0 = &(*_2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &Z {
    let mut _0: &Z;
    let _1: &[Z; 2];
    let mut _2: &[Z; 4];
    scope 1 {
        debug _y => _1;
        debug x => _0;
    }

    bb0: {
        _2 = const _;
        _1 = &(*_2)[1..3];
        _0 = &(*_2)[3 of 4];
        return;
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];
    let mut _1: [Z; 4];
    let mut _2: Z;
    let mut _3: Z;
    let mut _4: Z;
    let mut _5: Z;

    bb0: {
        _2 = Z;
        _3 = Z;
        _4 = Z;
        _5 = Z;
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &Z {
    let mut _0: &Z;
    let _1: &[Z; 2];
    let _2: &Z;
    let mut _3: &[Z; 4];
    let _4: [Z; 4];
    let mut _5: Z;
    let mut _6: Z;
    let mut _7: Z;
    let mut _8: Z;
    let mut _9: &[Z; 4];
    scope 1 {
        debug _y => _1;
        debug x => _2;
    }

    bb0: {
        StorageLive(_3);
        _9 = const _;
        _3 = &(*_9);
        StorageLive(_1);
        _1 = &(*_3)[1..3];
        StorageLive(_2);
        _2 = &(*_3)[3 of 4];
        StorageDead(_3);
        _0 = &(*_2);
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: &Z = {
    let mut _0: &Z;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: u8 = {
    let mut _0: u8;
    let _1: u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = (_2[3 of 4].0: u8);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

fn main::const_eval() -> u8 {
    let mut _0: u8;
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = (_1[3 of 4].0: u8);
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> u8 {
    let mut _0: u8;
    let _1: u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = (_2[3 of 4].0: u8);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &((*_7)[3 of 4].0: u8);
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &((*_1)[3 of 4].0: u8);
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &((*_7)[3 of 4].0: u8);
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &((*_2)[3 of 4].0: u8);
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &((*_1)[3 of 4].0: u8);
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &((*_2)[3 of 4].0: u8);
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: u8 = {
    let mut _0: u8;
    let _1: u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = (_2[0 of 4].0: u8);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

fn main::const_eval() -> u8 {
    let mut _0: u8;
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = (_1[0 of 4].0: u8);
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> u8 {
    let mut _0: u8;
    let _1: u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _1 = (_2[0 of 4].0: u8);
        StorageDead(_2);
        _0 = _1;
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: u8 = {
    let mut _0: u8;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &((*_7)[0 of 4].0: u8);
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &((*_1)[0 of 4].0: u8);
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: [N; 4];
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = N(const 1_u8);
        StorageLive(_4);
        _4 = N(const 2_u8);
        StorageLive(_5);
        _5 = N(const 3_u8);
        StorageLive(_6);
        _6 = N(const 4_u8);
        _2 = [move _3, move _4, move _5, move _6];
        StorageDead(_6);
        StorageDead(_5);
        StorageDead(_4);
        StorageDead(_3);
        StorageLive(_1);
        _7 = const _;
        _1 = &((*_7)[0 of 4].0: u8);
        _0 = &(*_1);
        StorageDead(_1);
        StorageDead(_2);
        return;
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

const main::CONST_EVAL: &u8 = {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &((*_2)[0 of 4].0: u8);
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let mut _1: &[N; 4];
    scope 1 {
        debug x => _0;
    }

    bb0: {
        _1 = const _;
        _0 = &((*_1)[0 of 4].0: u8);
        return;
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];
    let mut _1: [N; 4];
    let mut _2: N;
    let mut _3: N;
    let mut _4: N;
    let mut _5: N;

    bb0: {
        _2 = N(const 1_u8);
        _3 = N(const 2_u8);
        _4 = N(const 3_u8);
        _5 = N(const 4_u8);
        _1 = [move _2, move _3, move _4, move _5];
        _0 = &_1;
        return;
    }
}

// MIR FOR CTFE
fn main::const_eval() -> &u8 {
    let mut _0: &u8;
    let _1: &u8;
    let mut _2: &[N; 4];
    let _3: [N; 4];
    let mut _4: N;
    let mut _5: N;
    let mut _6: N;
    let mut _7: N;
    let mut _8: &[N; 4];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        StorageLive(_2);
        _8 = const _;
        _2 = &(*_8);
        StorageLive(_1);
        _1 = &((*_2)[0 of 4].0: u8);
        StorageDead(_2);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

static main::CONST_EVAL2: &u8 = {
    let mut _0: &u8;

    bb0: {
        ConstEvalCounter;
        _0 = main::const_eval() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn N(_1: u8) -> N {
    let mut _0: N;

    bb0: {
        _0 = N(move _1);
        return;
    }
}

// MIR FOR CTFE
fn N(_1: u8) -> N {
    let mut _0: N;

    bb0: {
        _0 = N(move _1);
        return;
    }
}
