// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/empty-mutable-vec.rs:8:15: 8:15
    let mut _1: std::vec::Vec<isize>;    // in scope 0 at ui/array-slice-vec/empty-mutable-vec.rs:8:21: 8:27
    scope 1 {
        debug _v => _1;                  // in scope 1 at ui/array-slice-vec/empty-mutable-vec.rs:8:21: 8:27
    }

    bb0: {
        _1 = Vec::<isize>::new() -> bb1; // scope 0 at ui/array-slice-vec/empty-mutable-vec.rs:8:42: 8:52
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/empty-mutable-vec.rs:8:42: 8:50
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/array-slice-vec/empty-mutable-vec.rs:8:54: 8:55
    }

    bb2: {
        return;                          // scope 0 at ui/array-slice-vec/empty-mutable-vec.rs:8:55: 8:55
    }
}
