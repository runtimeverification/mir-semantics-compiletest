// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn grow(_1: &mut Vec<isize>) -> () {
    debug v => _1;                       // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:3:9: 3:10
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:3:30: 3:30
    let _2: ();                          // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:4:5: 4:14
    let mut _3: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:4:5: 4:14

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:4:5: 4:14
        _2 = Vec::<isize>::push(move _3, const 1_isize) -> bb1; // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:4:5: 4:14
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:4:7: 4:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>, isize) {Vec::<isize>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:7:15: 7:15
    let mut _1: std::vec::Vec<isize>;    // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:8:9: 8:14
    let _2: ();                          // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:9:5: 9:17
    let mut _3: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:9:10: 9:16
    let mut _4: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:9:10: 9:16
    let _5: ();                          // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:10:5: 10:17
    let mut _6: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:10:10: 10:16
    let mut _7: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:10:10: 10:16
    let _8: ();                          // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:11:5: 11:17
    let mut _9: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:11:10: 11:16
    let mut _10: &mut std::vec::Vec<isize>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:11:10: 11:16
    let mut _12: &std::vec::Vec<isize>;  // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:12:15: 12:22
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
    let mut _16: &[&str; 2];             // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
    let _17: &[&str; 2];                 // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
    let mut _23: &usize;                 // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
    let _24: &usize;                     // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
    let mut _25: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:8:9: 8:14
        let _11: usize;                  // in scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:12:9: 12:12
        scope 2 {
            debug len => _11;            // in scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:12:9: 12:12
            let _28: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _29: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _42: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _43: &[&str; 2];     // in scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
            scope 3 {
                debug left_val => _28;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _29;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _34: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _34;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<isize>::new() -> bb1; // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:8:29: 8:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:8:29: 8:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:9:10: 9:16
        _3 = &mut (*_4);                 // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:9:10: 9:16
        _2 = grow(move _3) -> [return: bb2, unwind: bb12]; // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:9:5: 9:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:9:5: 9:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>) {grow}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _1;                    // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:10:10: 10:16
        _6 = &mut (*_7);                 // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:10:10: 10:16
        _5 = grow(move _6) -> [return: bb3, unwind: bb12]; // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:10:5: 10:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:10:5: 10:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>) {grow}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &mut _1;                   // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:11:10: 11:16
        _9 = &mut (*_10);                // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:11:10: 11:16
        _8 = grow(move _9) -> [return: bb4, unwind: bb12]; // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:11:5: 11:17
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:11:5: 11:9
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>) {grow}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &_1;                       // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:12:15: 12:22
        _11 = Vec::<isize>::len(move _12) -> [return: bb5, unwind: bb12]; // scope 1 at ui/array-slice-vec/mutable-alias-vec.rs:12:15: 12:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:12:17: 12:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> usize {Vec::<isize>::len}, val: Value(<ZST>) }
    }

    bb5: {
        _43 = const _;                   // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _17 = _43;                       // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
        _16 = _17;                       // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
        _24 = &_11;                      // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
        _23 = _24;                       // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _23) -> [return: bb6, unwind: bb12]; // scope 2 at ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:13:20: 13:23
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb6: {
        _21 = [move _22];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = &_21;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb7, unwind: bb12]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = _print(move _14) -> [return: bb8, unwind: bb12]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _27 = _42;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 3_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _34 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<usize, usize>(move _36, move _37, move _39, move _41) -> bb12; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_1) -> bb11;                // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:15:1: 15:2
    }

    bb11: {
        return;                          // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:15:2: 15:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:15:1: 15:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:7:1: 15:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:14:21: 14:31

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:14:21: 14:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
        return;                          // scope 0 at ui/array-slice-vec/mutable-alias-vec.rs:13:14: 13:18
    }
}
