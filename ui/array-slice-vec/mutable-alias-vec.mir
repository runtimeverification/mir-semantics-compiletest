// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn grow(_1: &mut Vec<isize>) -> () {
    debug v => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = Vec::<isize>::push(_1, const 1_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<isize>;
    let _2: ();
    let mut _3: &mut std::vec::Vec<isize>;
    let _4: ();
    let mut _5: &mut std::vec::Vec<isize>;
    let _6: ();
    let mut _7: &mut std::vec::Vec<isize>;
    let mut _9: &std::vec::Vec<isize>;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &usize;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _1;
        let _8: usize;
        scope 2 {
            debug len => _8;
            let _20: &usize;
            let _21: &usize;
            let mut _29: &usize;
            let mut _30: &[&str; 2];
            scope 3 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<isize>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &mut _1;
        _2 = grow(_3) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _5 = &mut _1;
        _4 = grow(_5) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _7 = &mut _1;
        _6 = grow(_7) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _9 = &_1;
        _8 = Vec::<isize>::len(move _9) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _30 = const _;
        _12 = _30 as &[&str] (Pointer(Unsize));
        _17 = &_8;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_17) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _10 = _print(move _11) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _19 = &_8;
        _29 = const _;
        _18 = (move _19, _29);
        _20 = (_18.0: &usize);
        _21 = (_18.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28) -> bb12;
    }

    bb10: {
        drop(_1) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
