// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:13:13: 13:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:13:27: 13:46
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:13:27: 13:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:13:27: 13:43
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:13:1: 13:47
    }
}

fn <impl at ui/array-slice-vec/box-of-array-of-drop-2.rs:17:1: 17:16>::drop(_1: &mut D) -> () {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:18:13: 18:22
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:18:24: 18:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
    let mut _5: &[&str; 2];              // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
    let _6: &[&str; 2];                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
    let mut _12: &u8;                    // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
    let _13: &u8;                        // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
    let _14: usize;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:13: 20:16
    let mut _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:19: 20:45
    let _16: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:19: 20:22
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:28: 20:44
    let mut _18: std::result::Result<usize, usize>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 26:10
    let mut _19: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 26:10
    let _20: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 21:20
    let mut _21: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:22:13: 22:16
    let mut _22: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:39
    let mut _23: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:21
    let mut _24: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:16
    let mut _25: (usize, bool);          // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:21
    let mut _26: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:24: 23:39
    let mut _27: u8;                     // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:24: 23:30
    let mut _28: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:24:13: 24:29
    let mut _29: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:25:13: 25:29
    let mut _30: &[&str; 2];             // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
    scope 1 {
        debug old => _14;                // in scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:13: 20:16
        scope 2 {
        }
    }

    bb0: {
        _30 = const _;                   // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<D as Drop>::drop, [], Some(promoted[0])) }
        _6 = _30;                        // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
        _5 = _6;                         // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
        _13 = &((*_1).0: u8);            // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
        _12 = _13;                       // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<u8>(move _12) -> bb1; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:19:33: 19:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = const {alloc1: &AtomicUsize}; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:19: 20:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:20:19: 20:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _15 = _16;                       // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:19: 20:45
        _17 = const SeqCst;              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:28: 20:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:20:28: 20:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _14 = AtomicUsize::load(move _15, move _17) -> bb4; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:20:19: 20:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:20:23: 20:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = const {alloc1: &AtomicUsize}; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 21:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 21:20
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _19 = _20;                       // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 26:10
        _21 = _14;                       // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:22:13: 22:16
        _24 = _14;                       // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:16
        _25 = CheckedShl(_24, const 4_i32); // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:21
        assert(!move (_25.1: bool), "attempt to shift left by `{}`, which would overflow", const 4_i32) -> bb5; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:21
    }

    bb5: {
        _23 = move (_25.0: usize);       // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:21
        _27 = ((*_1).0: u8);             // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:24: 23:30
        _26 = move _27 as usize (IntToInt); // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:24: 23:39
        _22 = BitOr(move _23, move _26); // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:23:13: 23:39
        _28 = const SeqCst;              // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:24:13: 24:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:24:13: 24:29
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _29 = const SeqCst;              // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:25:13: 25:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:25:13: 25:29
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _18 = AtomicUsize::compare_exchange(move _19, move _21, move _22, move _28, move _29) -> bb6; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:21:17: 26:10
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:21:21: 21:37
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, usize, std::sync::atomic::Ordering, std::sync::atomic::Ordering) -> Result<usize, usize> {AtomicUsize::compare_exchange}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:27:6: 27:6
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in <impl at ui/array-slice-vec/box-of-array-of-drop-2.rs:17:1: 17:16>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31

    bb0: {
        _1 = [const "Dropping ", const "\n"]; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:19:18: 19:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:30:11: 30:11
    let _1: std::thread::JoinHandle<()>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:32:9: 32:10
    let mut _2: [closure@ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 32:29]; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 37:6
    let mut _3: bool;                    // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:5: 38:31
    let mut _4: bool;                    // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:30
    let mut _5: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:30
    let _6: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:21
    let mut _7: std::thread::JoinHandle<()>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:14
    let mut _8: !;                       // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:5: 38:31
    let mut _11: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:18: 51:44
    let _12: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:18: 51:21
    let mut _13: std::sync::atomic::Ordering; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:27: 51:43
    let mut _14: bool;                   // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:5: 52:79
    let mut _15: bool;                   // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:13: 52:29
    let mut _16: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:13: 52:19
    let mut _17: usize;                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:23: 52:29
    let mut _18: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _19: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _20: &[&str];                // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
    let mut _21: &[&str; 2];             // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
    let _22: &[&str; 2];                 // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
    let mut _23: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _24: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _25: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _26: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _27: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
    let mut _28: &usize;                 // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
    let _29: &usize;                     // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
    let mut _30: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
    let mut _31: &usize;                 // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
    let _32: &usize;                     // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
    scope 1 {
        debug g => _1;                   // in scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:32:9: 32:10
        let _9: usize;                   // in scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:50:9: 50:15
        scope 2 {
            debug expect => _9;          // in scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:50:9: 50:15
            let _10: usize;              // in scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:9: 51:15
            scope 3 {
                debug actual => _10;     // in scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:9: 51:15
                let mut _33: &[&str; 2]; // in scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
            }
        }
    }

    bb0: {
        _1 = spawn::<[closure@ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 32:29], ()>(move _2) -> bb1; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:32:13: 37:7
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:32:13: 32:26
                                         // + literal: Const { ty: fn([closure@ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 32:29]) -> JoinHandle<()> {spawn::<[closure@ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 32:29], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _1;                    // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:14
        _6 = JoinHandle::<()>::join(move _7) -> bb2; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:38:15: 38:19
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:30
        _4 = Result::<(), Box<dyn Any + Send>>::is_err(move _5) -> [return: bb3, unwind: bb13]; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:13: 38:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:38:22: 38:28
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Not(move _4);               // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:5: 38:31
        drop(_6) -> bb4;                 // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:30: 38:31
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:5: 38:31
    }

    bb5: {
        _8 = core::panicking::panic(const "assertion failed: g.join().is_err()"); // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:5: 38:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:38:5: 38:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _9 = const 727300182580_usize;   // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:50:18: 50:43
        _12 = const {alloc1: &AtomicUsize}; // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:18: 51:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:51:18: 51:21
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _11 = _12;                       // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:18: 51:44
        _13 = const SeqCst;              // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:27: 51:43
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:51:27: 51:43
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _10 = AtomicUsize::load(move _11, move _13) -> bb7; // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:51:18: 51:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:51:22: 51:26
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = _10;                       // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:13: 52:19
        _17 = _9;                        // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:23: 52:29
        _15 = Eq(move _16, move _17);    // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:13: 52:29
        _14 = Not(move _15);             // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:5: 52:79
        switchInt(move _14) -> [0: bb12, otherwise: bb8]; // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:5: 52:79
    }

    bb8: {
        _33 = const _;                   // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _33;                       // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
        _21 = _22;                       // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
        _20 = move _21 as &[&str] (Pointer(Unsize)); // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
        _29 = &_9;                       // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
        _28 = _29;                       // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
        _27 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _28) -> bb9; // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:52:64: 52:70
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _32 = &_10;                      // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
        _31 = _32;                       // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
        _30 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _31) -> bb10; // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:52:72: 52:78
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _26 = [move _27, move _30];      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _25 = &_26;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _23 = move _24 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _19 = Arguments::<'_>::new_v1(move _20, move _23) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = panic_fmt(move _19);       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:53:2: 53:2
    }

    bb13 (cleanup): {
        drop(_6) -> bb14;                // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:38:30: 38:31
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:30:1: 53:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62

    bb0: {
        _1 = [const "expect: 0x", const " actual: 0x"]; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:52:31: 52:62
    }
}

fn die() -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:31:17: 31:18
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "Oh no"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:31:28: 31:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main::{closure#0}(_1: [closure@ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 32:29]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:32:30: 32:30
    let _2: std::boxed::Box<[D; 4]>;     // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:13: 33:16
    let mut _3: [D; 4];                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:41: 33:69
    let mut _4: D;                       // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:42: 33:47
    let mut _5: D;                       // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:49: 33:54
    let mut _6: D;                       // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:56: 33:61
    let mut _7: D;                       // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:63: 33:68
    let mut _9: [D; 4];                  // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:41: 34:69
    let mut _10: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:42: 34:47
    let mut _11: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:49: 34:54
    let mut _12: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:56: 34:61
    let mut _13: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:63: 34:68
    let mut _15: [D; 4];                 // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:41: 35:69
    let mut _16: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:42: 35:47
    let mut _17: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:49: 35:54
    let mut _18: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:56: 35:61
    let mut _19: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:63: 35:68
    let mut _21: [D; 4];                 // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:41: 36:69
    let mut _22: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:42: 36:47
    let mut _23: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:49: 36:54
    let mut _24: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:56: 36:61
    let mut _25: D;                      // in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:63: 36:68
    scope 1 {
        debug _b1 => _2;                 // in scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:13: 33:16
        let _8: std::boxed::Box<[D; 4]>; // in scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:13: 34:16
        scope 2 {
            debug _b2 => _8;             // in scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:13: 34:16
            let _14: std::boxed::Box<[D; 4]>; // in scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:13: 35:16
            scope 3 {
                debug _b3 => _14;        // in scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:13: 35:16
                let _20: std::boxed::Box<[D; 4]>; // in scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:13: 36:16
                scope 4 {
                    debug _b4 => _20;    // in scope 4 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:13: 36:16
                }
            }
        }
    }

    bb0: {
        _4 = const D(1_u8);              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:42: 33:47
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:33:42: 33:47
                                         // + literal: Const { ty: D, val: Value(Scalar(0x01)) }
        _5 = const D(2_u8);              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:49: 33:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:33:49: 33:54
                                         // + literal: Const { ty: D, val: Value(Scalar(0x02)) }
        _6 = const D(3_u8);              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:56: 33:61
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:33:56: 33:61
                                         // + literal: Const { ty: D, val: Value(Scalar(0x03)) }
        _7 = const D(4_u8);              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:63: 33:68
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:33:63: 33:68
                                         // + literal: Const { ty: D, val: Value(Scalar(0x04)) }
        _3 = [move _4, move _5, move _6, move _7]; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:41: 33:69
        _2 = Box::<[D; 4]>::new(move _3) -> bb1; // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:32: 33:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:33:32: 33:40
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([D; 4]) -> Box<[D; 4]> {Box::<[D; 4]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const D(5_u8);             // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:42: 34:47
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:34:42: 34:47
                                         // + literal: Const { ty: D, val: Value(Scalar(0x05)) }
        _11 = const D(6_u8);             // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:49: 34:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:34:49: 34:54
                                         // + literal: Const { ty: D, val: Value(Scalar(0x06)) }
        _12 = const D(7_u8);             // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:56: 34:61
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:34:56: 34:61
                                         // + literal: Const { ty: D, val: Value(Scalar(0x07)) }
        _13 = const D(8_u8);             // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:63: 34:68
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:34:63: 34:68
                                         // + literal: Const { ty: D, val: Value(Scalar(0x08)) }
        _9 = [move _10, move _11, move _12, move _13]; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:41: 34:69
        _8 = Box::<[D; 4]>::new(move _9) -> [return: bb2, unwind: bb14]; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:32: 34:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:34:32: 34:40
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn([D; 4]) -> Box<[D; 4]> {Box::<[D; 4]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = D(const 9_u8);             // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:42: 35:47
        _17 = D(const 10_u8);            // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:49: 35:54
        _18 = die() -> [return: bb3, unwind: bb11]; // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:56: 35:61
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:35:56: 35:59
                                         // + literal: Const { ty: fn() -> D {die}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = const D(12_u8);            // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:63: 35:68
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:35:63: 35:68
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0c)) }
        _15 = [move _16, move _17, move _18, move _19]; // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:41: 35:69
        _14 = Box::<[D; 4]>::new(move _15) -> [return: bb4, unwind: bb13]; // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:32: 35:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:35:32: 35:40
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn([D; 4]) -> Box<[D; 4]> {Box::<[D; 4]>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = const D(13_u8);            // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:42: 36:47
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:36:42: 36:47
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0d)) }
        _23 = const D(14_u8);            // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:49: 36:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:36:49: 36:54
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0e)) }
        _24 = const D(15_u8);            // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:56: 36:61
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:36:56: 36:61
                                         // + literal: Const { ty: D, val: Value(Scalar(0x0f)) }
        _25 = const D(16_u8);            // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:63: 36:68
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:36:63: 36:68
                                         // + literal: Const { ty: D, val: Value(Scalar(0x10)) }
        _21 = [move _22, move _23, move _24, move _25]; // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:41: 36:69
        _20 = Box::<[D; 4]>::new(move _21) -> [return: bb5, unwind: bb10]; // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:32: 36:70
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/box-of-array-of-drop-2.rs:36:32: 36:40
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn([D; 4]) -> Box<[D; 4]> {Box::<[D; 4]>::new}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_20) -> [return: bb6, unwind: bb10]; // scope 3 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb6: {
        drop(_14) -> [return: bb7, unwind: bb13]; // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb7: {
        drop(_8) -> [return: bb8, unwind: bb14]; // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb8: {
        drop(_2) -> bb9;                 // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb9: {
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:6: 37:6
    }

    bb10 (cleanup): {
        drop(_14) -> bb13;               // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb11 (cleanup): {
        drop(_17) -> bb12;               // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:68: 35:69
    }

    bb12 (cleanup): {
        drop(_16) -> bb13;               // scope 2 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:68: 35:69
    }

    bb13 (cleanup): {
        drop(_8) -> bb14;                // scope 1 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb14 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:37:5: 37:6
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:32:27: 37:6
    }
}

main::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:26: 33:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:26: 33:27
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:33:26: 33:27
    }
}

main::{closure#0}::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:26: 34:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:26: 34:27
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:34:26: 34:27
    }
}

main::{closure#0}::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:26: 35:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:26: 35:27
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:35:26: 35:27
    }
}

main::{closure#0}::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:26: 36:27

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:26: 36:27
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:36:26: 36:27
    }
}

fn D(_1: u8) -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:15:1: 15:9

    bb0: {
        _0 = D(move _1);                 // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:15:1: 15:9
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:15:1: 15:9
    }
}

// MIR FOR CTFE
fn D(_1: u8) -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:15:1: 15:9

    bb0: {
        _0 = D(move _1);                 // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:15:1: 15:9
        return;                          // scope 0 at ui/array-slice-vec/box-of-array-of-drop-2.rs:15:1: 15:9
    }
}
