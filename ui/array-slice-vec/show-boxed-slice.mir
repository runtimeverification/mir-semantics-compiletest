// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
    let mut _4: &str;                    // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
    let _5: &str;                        // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
    let mut _7: &&std::boxed::Box<[u8]>; // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
    let _8: &&std::boxed::Box<[u8]>;     // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
    let _9: &std::boxed::Box<[u8]>;      // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
        _5 = const "Foo";                // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
        _9 = &((*_1).0: std::boxed::Box<[u8]>); // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
        _8 = &_9;                        // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
        _7 = _8;                         // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:49: 4:58
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:3:15: 3:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:6:15: 6:15
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
    let mut _4: &[&str; 2];              // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
    let _5: &[&str; 2];                  // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
    let mut _11: &Foo;                   // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
    let _12: &Foo;                       // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
    let _13: Foo;                        // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
    let mut _14: std::boxed::Box<[u8]>;  // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:26: 7:45
    let mut _15: std::boxed::Box<[u8; 3]>; // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:26: 7:45
    let mut _16: [u8; 3];                // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:35: 7:44
    let mut _17: &[&str; 2];             // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20

    bb0: {
        _17 = const _;                   // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _17;                        // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
        _4 = _5;                         // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
        _16 = [const 0_u8, const 1_u8, const 2_u8]; // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:35: 7:44
        _15 = Box::<[u8; 3]>::new(move _16) -> bb1; // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:26: 7:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:7:26: 7:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([u8; 3]) -> Box<[u8; 3]> {Box::<[u8; 3]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = move _15 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:26: 7:45
        _13 = Foo(move _14);             // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
        _12 = &_13;                      // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
        _11 = _12;                       // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo>(move _11) -> [return: bb2, unwind: bb6]; // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:7:22: 7:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb3, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_13) -> bb5;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb5: {
        return;                          // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:8:2: 8:2
    }

    bb6 (cleanup): {
        drop(_13) -> bb7;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:6:1: 8:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
        return;                          // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:7:14: 7:20
    }
}

fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:1: 4:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:1: 4:11
        return;                          // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:1: 4:11
    }
}

// MIR FOR CTFE
fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:1: 4:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:1: 4:11
        return;                          // scope 0 at ui/array-slice-vec/show-boxed-slice.rs:4:1: 4:11
    }
}
