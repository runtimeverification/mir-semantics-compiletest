// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/show-boxed-slice.rs:3:10: 3:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::boxed::Box<[u8]>;
    let _6: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: std::boxed::Box<[u8]>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &Foo;
    let _9: Foo;
    let mut _10: std::boxed::Box<[u8]>;
    let mut _11: std::boxed::Box<[u8; 3]>;
    let mut _12: [u8; 3];
    let mut _13: &[&str; 2];

    bb0: {
        _13 = const _;
        _3 = _13 as &[&str] (Pointer(Unsize));
        _12 = [const 0_u8, const 1_u8, const 2_u8];
        _11 = Box::<[u8; 3]>::new(move _12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = move _11 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _9 = Foo(move _10);
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<Foo>(_8) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        drop(_9) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_9) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
