// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Vec<&i32>, _2: Vec<&i32>) -> i32 {
    debug v1 => _1;
    debug v2 => _2;
    let mut _0: i32;
    let mut _3: std::option::Option<i32>;
    let mut _4: std::option::Option<&i32>;

    bb0: {
        _4 = bar(move _1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Option::<&i32>::cloned(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Option::<i32>::unwrap_or(move _3, const 0_i32) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn bar(_1: Vec<&i32>, _2: Vec<&i32>) -> Option<&i32> {
    debug v1 => _1;
    debug v2 => _2;
    let mut _0: std::option::Option<&i32>;
    let mut _3: std::option::Option<&i32>;
    let mut _4: std::option::Option<&&i32>;
    let mut _5: &[&i32];
    let _6: &[&i32];
    let mut _7: &std::vec::Vec<&i32>;
    let mut _8: [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34];
    let mut _9: &std::vec::Vec<&i32>;

    bb0: {
        _7 = &_1;
        _6 = <Vec<&i32> as Deref>::deref(move _7) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _5 = _6;
        _4 = core::slice::<impl [&i32]>::get::<usize>(move _5, const 0_usize) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _3 = Option::<&&i32>::cloned(move _4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = &_2;
        _8 = [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34] { v2: move _9 };
        _0 = Option::<&i32>::or_else::<[closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]>(move _3, move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn bar::{closure#0}(_1: [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]) -> Option<&i32> {
    debug v2 => (*(_1.0: &std::vec::Vec<&i32>));
    let mut _0: std::option::Option<&i32>;
    let mut _2: std::option::Option<&&i32>;
    let mut _3: &[&i32];
    let _4: &[&i32];
    let mut _5: &std::vec::Vec<&i32>;

    bb0: {
        _5 = deref_copy (_1.0: &std::vec::Vec<&i32>);
        _4 = <Vec<&i32> as Deref>::deref(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _4;
        _2 = core::slice::<impl [&i32]>::get::<usize>(move _3, const 0_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Option::<&&i32>::cloned(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: i32;
    let mut _6: std::vec::Vec<&i32>;
    let mut _7: std::boxed::Box<[&i32]>;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: *mut u8;
    let mut _11: std::boxed::Box<[&i32; 1]>;
    let _12: &i32;
    let mut _13: std::vec::Vec<&i32>;
    let mut _14: std::boxed::Box<[&i32]>;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: *mut u8;
    let mut _18: std::boxed::Box<[&i32; 1]>;
    let _19: &i32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i32, &i32);
    let mut _30: &i32;
    let _31: i32;
    let mut _32: std::vec::Vec<&i32>;
    let mut _33: std::boxed::Box<[&i32]>;
    let mut _34: usize;
    let mut _35: usize;
    let mut _36: *mut u8;
    let mut _37: std::boxed::Box<[&i32; 1]>;
    let _38: &i32;
    let mut _39: std::vec::Vec<&i32>;
    let mut _40: std::boxed::Box<[&i32]>;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: *mut u8;
    let mut _44: std::boxed::Box<[&i32; 1]>;
    let _45: &i32;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: i32;
    let mut _51: i32;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: *const [&i32; 1];
    let mut _60: *const [&i32; 1];
    let mut _61: *const [&i32; 1];
    let mut _62: *const [&i32; 1];
    scope 1 {
        debug x => const 22_i32;
        let _2: i32;
        scope 2 {
            debug y => const 44_i32;
            let _20: &i32;
            let _21: &i32;
            let _46: &i32;
            let _47: &i32;
            let mut _55: &i32;
            let mut _56: &i32;
            let mut _63: *const ();
            let mut _64: usize;
            let mut _65: usize;
            let mut _66: usize;
            let mut _67: usize;
            let mut _68: bool;
            let mut _69: *const ();
            let mut _70: usize;
            let mut _71: usize;
            let mut _72: usize;
            let mut _73: usize;
            let mut _74: bool;
            let mut _75: *const ();
            let mut _76: usize;
            let mut _77: usize;
            let mut _78: usize;
            let mut _79: usize;
            let mut _80: bool;
            let mut _81: *const ();
            let mut _82: usize;
            let mut _83: usize;
            let mut _84: usize;
            let mut _85: usize;
            let mut _86: bool;
            scope 3 {
            }
            scope 4 {
            }
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
            }
            scope 8 {
            }
            scope 9 {
                debug left_val => _46;
                debug right_val => _47;
                let _52: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _52;
                }
            }
        }
    }

    bb0: {
        _58 = const false;
        _57 = const false;
        _1 = const 22_i32;
        _2 = const 44_i32;
        _8 = SizeOf([&i32; 1]);
        _9 = AlignOf([&i32; 1]);
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [&i32; 1]);
        _12 = &_1;
        _59 = (((_11.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _81 = _59 as *const () (PtrToPtr);
        _82 = _81 as usize (Transmute);
        _83 = AlignOf(&i32);
        _84 = Sub(_83, const 1_usize);
        _85 = BitAnd(_82, _84);
        _86 = Eq(_85, const 0_usize);
        assert(_86, "misaligned pointer dereference: address must be a multiple of {} but is {}", _83, _82) -> [success: bb23, unwind unreachable];
    }

    bb2: {
        _58 = const true;
        _15 = SizeOf([&i32; 1]);
        _16 = AlignOf([&i32; 1]);
        _17 = alloc::alloc::exchange_malloc(move _15, move _16) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _18 = ShallowInitBox(move _17, [&i32; 1]);
        _19 = &_2;
        _60 = (((_18.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _75 = _60 as *const () (PtrToPtr);
        _76 = _75 as usize (Transmute);
        _77 = AlignOf(&i32);
        _78 = Sub(_77, const 1_usize);
        _79 = BitAnd(_76, _78);
        _80 = Eq(_79, const 0_usize);
        assert(_80, "misaligned pointer dereference: address must be a multiple of {} but is {}", _77, _76) -> [success: bb22, unwind unreachable];
    }

    bb4: {
        _58 = const false;
        _5 = foo(move _6, move _13) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _58 = const false;
        _4 = &_5;
        _56 = const _;
        _3 = (move _4, _56);
        _20 = (_3.0: &i32);
        _21 = (_3.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb7: {
        _34 = SizeOf([&i32; 1]);
        _35 = AlignOf([&i32; 1]);
        _36 = alloc::alloc::exchange_malloc(move _34, move _35) -> [return: bb8, unwind continue];
    }

    bb8: {
        _37 = ShallowInitBox(move _36, [&i32; 1]);
        _38 = &_2;
        _61 = (((_37.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _69 = _61 as *const () (PtrToPtr);
        _70 = _69 as usize (Transmute);
        _71 = AlignOf(&i32);
        _72 = Sub(_71, const 1_usize);
        _73 = BitAnd(_70, _72);
        _74 = Eq(_73, const 0_usize);
        assert(_74, "misaligned pointer dereference: address must be a multiple of {} but is {}", _71, _70) -> [success: bb21, unwind unreachable];
    }

    bb9: {
        _57 = const true;
        _41 = SizeOf([&i32; 1]);
        _42 = AlignOf([&i32; 1]);
        _43 = alloc::alloc::exchange_malloc(move _41, move _42) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _44 = ShallowInitBox(move _43, [&i32; 1]);
        _45 = &_1;
        _62 = (((_44.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]);
        _63 = _62 as *const () (PtrToPtr);
        _64 = _63 as usize (Transmute);
        _65 = AlignOf(&i32);
        _66 = Sub(_65, const 1_usize);
        _67 = BitAnd(_64, _66);
        _68 = Eq(_67, const 0_usize);
        assert(_68, "misaligned pointer dereference: address must be a multiple of {} but is {}", _65, _64) -> [success: bb20, unwind unreachable];
    }

    bb11: {
        _57 = const false;
        _31 = foo(move _32, move _39) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _57 = const false;
        _30 = &_31;
        _55 = const _;
        _29 = (move _30, _55);
        _46 = (_29.0: &i32);
        _47 = (_29.1: &i32);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<i32, i32>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        resume;
    }

    bb16 (cleanup): {
        drop(_32) -> [return: bb15, unwind terminate];
    }

    bb17 (cleanup): {
        switchInt(_57) -> [0: bb15, otherwise: bb16];
    }

    bb18 (cleanup): {
        drop(_6) -> [return: bb15, unwind terminate];
    }

    bb19 (cleanup): {
        switchInt(_58) -> [0: bb15, otherwise: bb18];
    }

    bb20: {
        (*_62) = [_45];
        _40 = move _44 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _39 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _40) -> [return: bb11, unwind: bb17];
    }

    bb21: {
        (*_61) = [_38];
        _33 = move _37 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _32 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _33) -> [return: bb9, unwind continue];
    }

    bb22: {
        (*_60) = [_19];
        _14 = move _18 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _13 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _14) -> [return: bb4, unwind: bb19];
    }

    bb23: {
        (*_59) = [_12];
        _7 = move _11 as std::boxed::Box<[&i32]> (Pointer(Unsize));
        _6 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _7) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 44_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}
