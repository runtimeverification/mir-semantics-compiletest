// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Vec<&i32>, _2: Vec<&i32>) -> i32 {
    debug v1 => _1;                      // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:7:15: 7:17
    debug v2 => _2;                      // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:7:33: 7:35
    let mut _0: i32;                     // return place in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:7:54: 7:57
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:5: 8:25
    let mut _4: std::option::Option<&i32>; // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:5: 8:16
    let mut _5: std::vec::Vec<&i32>;     // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:9: 8:11
    let mut _6: std::vec::Vec<&i32>;     // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:13: 8:15

    bb0: {
        _5 = move _1;                    // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:9: 8:11
        _6 = move _2;                    // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:13: 8:15
        _4 = bar(move _5, move _6) -> bb1; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:5: 8:16
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:8:5: 8:8
                                         // + literal: Const { ty: for<'c> fn(Vec<&'c i32>, Vec<&'c i32>) -> Option<&'c i32> {bar}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<&i32>::cloned(move _4) -> bb2; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:5: 8:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:8:17: 8:23
                                         // + literal: Const { ty: fn(Option<&i32>) -> Option<i32> {Option::<&i32>::cloned}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Option::<i32>::unwrap_or(move _3, const 0_i32) -> bb3; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:8:5: 8:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:8:26: 8:35
                                         // + literal: Const { ty: fn(Option<i32>, i32) -> i32 {Option::<i32>::unwrap_or}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:9:2: 9:2
    }
}

fn bar(_1: Vec<&i32>, _2: Vec<&i32>) -> Option<&i32> {
    debug v1 => _1;                      // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:11:12: 11:14
    debug v2 => _2;                      // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:11:30: 11:32
    let mut _0: std::option::Option<&i32>; // return place in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:11:51: 11:66
    let mut _3: std::option::Option<&i32>; // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:23
    let mut _4: std::option::Option<&&i32>; // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
    let mut _5: &[&i32];                 // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
    let _6: &[&i32];                     // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
    let mut _7: &std::vec::Vec<&i32>;    // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
    let mut _8: [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]; // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:53
    let mut _9: &std::vec::Vec<&i32>;    // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:53

    bb0: {
        _7 = &_1;                        // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
        _6 = <Vec<&i32> as Deref>::deref(move _7) -> [return: bb1, unwind: bb7]; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&i32>) -> &'a <Vec<&i32> as Deref>::Target {<Vec<&i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
        _4 = core::slice::<impl [&i32]>::get::<usize>(move _5, const 0_usize) -> [return: bb2, unwind: bb7]; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:14
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:8: 12:11
                                         // + literal: Const { ty: for<'a> fn(&'a [&i32], usize) -> Option<&'a <usize as SliceIndex<[&i32]>>::Output> {core::slice::<impl [&i32]>::get::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Option::<&&i32>::cloned(move _4) -> [return: bb3, unwind: bb7]; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:15: 12:21
                                         // + literal: Const { ty: fn(Option<&&i32>) -> Option<&i32> {Option::<&&i32>::cloned}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_2;                        // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:53
        _8 = [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34] { v2: move _9 }; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:53
                                         // closure
                                         // + def_id: DefId(0:8 ~ variance_vec_covariant[e5fe]::bar::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> std::option::Option<&i32>,
                                         //     (&std::vec::Vec<&i32>,),
                                         // ]
        _0 = Option::<&i32>::or_else::<[closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]>(move _3, move _8) -> [return: bb4, unwind: bb7]; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:5: 12:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:24: 12:31
                                         // + literal: Const { ty: fn(Option<&i32>, [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]) -> Option<&i32> {Option::<&i32>::or_else::<[closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb8]; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:13:1: 13:2
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:13:1: 13:2
    }

    bb6: {
        return;                          // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:13:2: 13:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:13:1: 13:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:13:1: 13:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:11:1: 13:2
    }
}

fn bar::{closure#0}(_1: [closure@ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:34]) -> Option<&i32> {
    debug v2 => (*(_1.0: &std::vec::Vec<&i32>)); // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:11:30: 11:32
    let mut _0: std::option::Option<&i32>; // return place in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:35
    let mut _2: std::option::Option<&&i32>; // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
    let mut _3: &[&i32];                 // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
    let _4: &[&i32];                     // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
    let mut _5: &std::vec::Vec<&i32>;    // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
    let mut _6: &std::vec::Vec<&i32>;    // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:32: 12:53

    bb0: {
        _6 = deref_copy (_1.0: &std::vec::Vec<&i32>); // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
        _5 = _6;                         // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
        _4 = <Vec<&i32> as Deref>::deref(move _5) -> bb1; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&i32>) -> &'a <Vec<&i32> as Deref>::Target {<Vec<&i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
        _2 = core::slice::<impl [&i32]>::get::<usize>(move _3, const 0_usize) -> bb2; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:38: 12:41
                                         // + literal: Const { ty: for<'a> fn(&'a [&i32], usize) -> Option<&'a <usize as SliceIndex<[&i32]>>::Output> {core::slice::<impl [&i32]>::get::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Option::<&&i32>::cloned(move _2) -> bb3; // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:35: 12:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:12:45: 12:51
                                         // + literal: Const { ty: fn(Option<&&i32>) -> Option<&i32> {Option::<&&i32>::cloned}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:12:53: 12:53
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:15:11: 15:11
    let _1: i32;                         // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:16:9: 16:10
    let mut _3: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: i32;                         // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:16: 18:39
    let mut _6: std::vec::Vec<&i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _7: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: &i32;                   // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:25: 18:27
    let _14: &i32;                       // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:25: 18:27
    let mut _15: std::vec::Vec<&i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _16: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _17: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _18: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _20: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _21: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _22: &i32;                   // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:35: 18:37
    let _23: &i32;                       // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:35: 18:37
    let mut _24: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _41: i32;                        // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:16: 19:39
    let mut _42: std::vec::Vec<&i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _43: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _44: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _45: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _46: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _47: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _48: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _49: &i32;                   // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:25: 19:27
    let _50: &i32;                       // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:25: 19:27
    let mut _51: std::vec::Vec<&i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _52: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _53: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _54: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _55: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _56: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _57: std::boxed::Box<[&i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _58: &i32;                   // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:35: 19:37
    let _59: &i32;                       // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:35: 19:37
    let mut _60: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _65: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _66: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _68: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _69: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _70: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _71: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _72: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _73: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _77: bool;                   // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:38: 19:39
    let mut _78: bool;                   // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:38: 18:39
    let mut _79: *const [&i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _80: *const [&i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _81: *const [&i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _82: *const [&i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/variance-vec-covariant.rs:16:9: 16:10
        let _2: i32;                     // in scope 1 at ui/array-slice-vec/variance-vec-covariant.rs:17:9: 17:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:17:9: 17:10
            let _25: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _26: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _61: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _62: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _75: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _76: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
            }
            scope 4 {
            }
            scope 5 {
                debug left_val => _25;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _26;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _31: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _31;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
            }
            scope 8 {
            }
            scope 9 {
                debug left_val => _61;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _62;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _67: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _67;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _77 = const false;               // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:16:9: 16:10
        _78 = const false;               // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:16:9: 16:10
        _1 = const 22_i32;               // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:16:13: 16:15
        _2 = const 44_i32;               // scope 1 at ui/array-slice-vec/variance-vec-covariant.rs:17:13: 17:15
        _9 = const 8_usize;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = const 8_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _11 = alloc::alloc::exchange_malloc(move _9, move _10) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = ShallowInitBox(move _11, [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _14 = &_1;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:25: 18:27
        _13 = _14;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:25: 18:27
        _79 = (((_12.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_79) = [move _13];             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _8 = move _12;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = move _8 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _7) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _78 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _18 = const 8_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _19 = const 8_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _20 = alloc::alloc::exchange_malloc(move _18, move _19) -> [return: bb3, unwind: bb19]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = ShallowInitBox(move _20, [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _23 = &_2;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:35: 18:37
        _22 = _23;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:35: 18:37
        _80 = (((_21.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_80) = [move _22];             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _17 = move _21;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _16 = move _17 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _15 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _16) -> [return: bb4, unwind: bb19]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb4: {
        _78 = const false;               // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:16: 18:39
        _5 = foo(move _6, move _15) -> [return: bb5, unwind: bb19]; // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:16: 18:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:18:16: 18:19
                                         // + literal: Const { ty: for<'a, 'b> fn(Vec<&'a i32>, Vec<&'b i32>) -> i32 {foo}, val: Value(<ZST>) }
    }

    bb5: {
        _78 = const false;               // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:38: 18:39
        _4 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _76 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _24 = _76;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _24);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_3.0: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_3.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = const 22_i32;              // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb7, otherwise: bb6]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _31 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<i32, i32>(move _33, move _34, move _36, move _38); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb7: {
        _45 = const 8_usize;             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _46 = const 8_usize;             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _47 = alloc::alloc::exchange_malloc(move _45, move _46) -> bb8; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb8: {
        _48 = ShallowInitBox(move _47, [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _50 = &_2;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:25: 19:27
        _49 = _50;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:25: 19:27
        _81 = (((_48.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_81) = [move _49];             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _44 = move _48;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _43 = move _44 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _42 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _43) -> bb9; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb9: {
        _77 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _54 = const 8_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _55 = const 8_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _56 = alloc::alloc::exchange_malloc(move _54, move _55) -> [return: bb10, unwind: bb17]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb10: {
        _57 = ShallowInitBox(move _56, [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _59 = &_1;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:35: 19:37
        _58 = _59;                       // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:35: 19:37
        _82 = (((_57.0: std::ptr::Unique<[&i32; 1]>).0: std::ptr::NonNull<[&i32; 1]>).0: *const [&i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_82) = [move _58];             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _53 = move _57;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _52 = move _53 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _51 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _52) -> [return: bb11, unwind: bb17]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb11: {
        _77 = const false;               // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:16: 19:39
        _41 = foo(move _42, move _51) -> [return: bb12, unwind: bb17]; // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:16: 19:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/variance-vec-covariant.rs:19:16: 19:19
                                         // + literal: Const { ty: for<'a, 'b> fn(Vec<&'a i32>, Vec<&'b i32>) -> i32 {foo}, val: Value(<ZST>) }
    }

    bb12: {
        _77 = const false;               // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:38: 19:39
        _40 = &_41;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _75 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _60 = _75;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _60);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _61 = (_39.0: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _62 = (_39.1: &i32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _65 = (*_61);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _66 = const 44_i32;              // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _64 = Eq(move _65, move _66);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _63 = Not(move _64);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _63) -> [0: bb14, otherwise: bb13]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _67 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = _61;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _71;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _62;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = _73;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _68 = core::panicking::assert_failed::<i32, i32>(move _69, move _70, move _72, move _74); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb14: {
        return;                          // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:20:2: 20:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:15:1: 20:2
    }

    bb16 (cleanup): {
        drop(_42) -> bb15;               // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:38: 19:39
    }

    bb17 (cleanup): {
        switchInt(_77) -> [0: bb15, otherwise: bb16]; // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:19:38: 19:39
    }

    bb18 (cleanup): {
        drop(_6) -> bb15;                // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:38: 18:39
    }

    bb19 (cleanup): {
        switchInt(_78) -> [0: bb15, otherwise: bb18]; // scope 2 at ui/array-slice-vec/variance-vec-covariant.rs:18:38: 18:39
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:41: 19:43

    bb0: {
        _1 = const 44_i32;               // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:19:41: 19:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:41: 18:43

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/array-slice-vec/variance-vec-covariant.rs:18:41: 18:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
