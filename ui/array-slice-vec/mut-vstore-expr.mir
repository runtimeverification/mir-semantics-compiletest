// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:4:15: 4:15
    let _1: &mut [isize];                // in scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:9: 5:11
    let mut _2: &mut [isize; 3];         // in scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:28: 5:44
    let mut _3: &mut [isize; 3];         // in scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:28: 5:44
    let mut _4: [isize; 3];              // in scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:33: 5:44
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/array-slice-vec/mut-vstore-expr.rs:5:9: 5:11
    }

    bb0: {
        _4 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:33: 5:44
        _3 = &mut _4;                    // scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:28: 5:44
        _2 = &mut (*_3);                 // scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:28: 5:44
        _1 = move _2 as &mut [isize] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:5:28: 5:44
        return;                          // scope 0 at ui/array-slice-vec/mut-vstore-expr.rs:6:2: 6:2
    }
}
