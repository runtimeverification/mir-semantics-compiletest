// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::vec::Vec<u32>>;
    let mut _2: std::boxed::Box<[std::vec::Vec<u32>]>;
    let mut _3: std::boxed::Box<[std::vec::Vec<u32>; 1]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[std::vec::Vec<u32>; 1]>;
    let mut _8: std::vec::Vec<u32>;
    let mut _9: std::boxed::Box<[u32]>;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: *mut u8;
    let mut _13: std::boxed::Box<[u32; 3]>;
    let mut _14: (&u32, &u32);
    let mut _15: &u32;
    let _16: &u32;
    let mut _17: &std::vec::Vec<u32>;
    let _18: &std::vec::Vec<u32>;
    let mut _19: &std::vec::Vec<std::vec::Vec<u32>>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: u32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: &mut std::boxed::Box<[std::vec::Vec<u32>; 1]>;
    let mut _31: ();
    let mut _32: *const [u32; 3];
    let mut _33: *const [std::vec::Vec<u32>; 1];
    let mut _34: *const ();
    let mut _35: usize;
    let mut _36: usize;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: bool;
    let mut _40: *const ();
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    scope 1 {
        debug nested => _1;
        let _20: &u32;
        let _21: &u32;
        let mut _29: &u32;
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
    }
    scope 2 {
    }
    scope 3 {
    }

    bb0: {
        _4 = SizeOf([std::vec::Vec<u32>; 1]);
        _5 = AlignOf([std::vec::Vec<u32>; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::vec::Vec<u32>; 1]);
        _10 = SizeOf([u32; 3]);
        _11 = AlignOf([u32; 3]);
        _12 = alloc::alloc::exchange_malloc(move _10, move _11) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _13 = ShallowInitBox(move _12, [u32; 3]);
        _32 = (((_13.0: std::ptr::Unique<[u32; 3]>).0: std::ptr::NonNull<[u32; 3]>).0: *const [u32; 3]);
        _40 = _32 as *const () (PtrToPtr);
        _41 = _40 as usize (Transmute);
        _42 = AlignOf(u32);
        _43 = Sub(_42, const 1_usize);
        _44 = BitAnd(_41, _43);
        _45 = Eq(_44, const 0_usize);
        assert(_45, "misaligned pointer dereference: address must be a multiple of {} but is {}", _42, _41) -> [success: bb14, unwind unreachable];
    }

    bb3: {
        _33 = (((_7.0: std::ptr::Unique<[std::vec::Vec<u32>; 1]>).0: std::ptr::NonNull<[std::vec::Vec<u32>; 1]>).0: *const [std::vec::Vec<u32>; 1]);
        _34 = _33 as *const () (PtrToPtr);
        _35 = _34 as usize (Transmute);
        _36 = AlignOf(std::vec::Vec<u32>);
        _37 = Sub(_36, const 1_usize);
        _38 = BitAnd(_35, _37);
        _39 = Eq(_38, const 0_usize);
        assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb13, unwind unreachable];
    }

    bb4: {
        _19 = &_1;
        _18 = <Vec<Vec<u32>> as Index<usize>>::index(move _19, const 0_usize) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _17 = _18;
        _16 = <Vec<u32> as Index<usize>>::index(move _17, const 1_usize) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _15 = _16;
        _29 = const _;
        _14 = (move _15, _29);
        _20 = (_14.0: &u32);
        _21 = (_14.1: &u32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u32, u32>(move _26, _20, _21, move _28) -> bb10;
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12 (cleanup): {
        _30 = &mut _7;
        _31 = <Box<[Vec<u32>; 1]> as Drop>::drop(move _30) -> [return: bb15, unwind terminate];
    }

    bb13: {
        (*_33) = [move _8];
        _3 = move _7;
        _2 = move _3 as std::boxed::Box<[std::vec::Vec<u32>]> (Pointer(Unsize));
        _1 = slice::<impl [Vec<u32>]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb4, unwind continue];
    }

    bb14: {
        (*_32) = [const 1_u32, const 2_u32, const 3_u32];
        _9 = move _13 as std::boxed::Box<[u32]> (Pointer(Unsize));
        _8 = slice::<impl [u32]>::into_vec::<std::alloc::Global>(move _9) -> [return: bb3, unwind: bb12];
    }

    bb15 (cleanup): {
        goto -> bb11;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}
