// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug _argc => _1;                   // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:20:10: 20:15
    debug _argv => _2;                   // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:20:24: 20:29
    let mut _0: isize;                   // return place in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:20:52: 20:57
    let _3: other::vec::Vec<u8>;         // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:21:9: 21:10
    let mut _4: other::boxed::Box<[u8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: other::boxed::Box<[u8; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: other::boxed::Box<[u8; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: core::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
    let mut _11: &[u8];                  // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
    let _12: &[u8];                      // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
    let mut _13: &other::vec::Vec<u8>;   // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
    let mut _14: isize;                  // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:23:9: 23:17
    let mut _15: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:25:9: 25:51
    let mut _16: &u8;                    // in scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
    let mut _17: *const [u8; 3];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:21:9: 21:10
    }
    scope 2 {
    }

    bb0: {
        _6 = const 3_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [u8; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _17 = (((_9.0: core::ptr::Unique<[u8; 3]>).0: core::ptr::NonNull<[u8; 3]>).0: *const [u8; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_17) = [const 0_u8, const 1_u8, const 2_u8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _5 = move _9;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = move _5 as other::boxed::Box<[u8]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = other::slice::<impl [u8]>::into_vec::<other::alloc::Global>(move _4) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[u8]>) -> Vec<u8> {other::slice::<impl [u8]>::into_vec::<other::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &_3;                       // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
        _12 = <Vec<u8> as Deref>::deref(move _13) -> [return: bb3, unwind: bb9]; // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _12;                       // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
        _10 = core::slice::<impl [u8]>::last(move _11) -> [return: bb4, unwind: bb9]; // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-no-std.rs:22:13: 22:17
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Option<&'a u8> {core::slice::<impl [u8]>::last}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = discriminant(_10);         // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:11: 22:19
        switchInt(move _14) -> [1: bb6, otherwise: bb5]; // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:5: 22:19
    }

    bb5: {
        _15 = panic(const "explicit panic") -> bb9; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:25:9: 25:51
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:25:9: 25:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:25:34: 25:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _16 = deref_copy ((_10 as Some).0: &u8); // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:5: 22:19
        switchInt((*_16)) -> [2: bb7, otherwise: bb5]; // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:22:5: 22:19
    }

    bb7: {
        _0 = const 0_isize;              // scope 1 at ui/array-slice-vec/vec-macro-no-std.rs:26:5: 26:6
        drop(_3) -> bb8;                 // scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:27:1: 27:2
    }

    bb8: {
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:27:2: 27:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:27:1: 27:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/vec-macro-no-std.rs:20:1: 27:2
    }
}
