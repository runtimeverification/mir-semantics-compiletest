// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn one() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:4:13: 4:16

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:4:19: 4:20
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:4:22: 4:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:8:15: 8:15
    let mut _1: (&std::vec::Vec<&i32>, &std::vec::Vec<&i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::vec::Vec<&i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::vec::Vec<&i32>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _4: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: std::boxed::Box<[&i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::boxed::Box<[&i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:21: 9:27
    let _11: i32;                        // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:22: 9:27
    let mut _12: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:29: 9:35
    let _13: &i32;                       // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:29: 9:35
    let _14: i32;                        // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:30: 9:35
    let mut _15: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
    let _16: &i32;                       // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
    let mut _17: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _18: std::vec::Vec<&i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _19: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _20: std::boxed::Box<[&i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _21: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _22: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _23: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _24: std::boxed::Box<[&i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _25: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
    let mut _26: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
    let _27: &i32;                       // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
    let mut _28: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:55: 9:69
    let _29: &i32;                       // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:55: 9:69
    let _30: i32;                        // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:56: 9:69
    let mut _31: i32;                    // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:57: 9:62
    let mut _32: i32;                    // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:63: 9:68
    let mut _33: (i32, bool);            // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:56: 9:69
    let _34: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _35: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _48: (&std::vec::Vec<&i32>, &std::vec::Vec<&i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _49: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _50: std::vec::Vec<&i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:69
    let mut _51: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:21: 10:27
    let _52: i32;                        // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:22: 10:27
    let mut _53: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _54: std::vec::Vec<&i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _55: std::boxed::Box<[&i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _56: std::boxed::Box<[&i32; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _57: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _58: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _59: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _60: std::boxed::Box<[&i32; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _61: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
    let mut _62: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:42: 10:48
    let _63: &i32;                       // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:42: 10:48
    let _64: i32;                        // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:43: 10:48
    let _65: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _66: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _69: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _70: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _72: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _73: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _74: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _75: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _76: &std::vec::Vec<&i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _77: &std::vec::Vec<&i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _79: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
    let mut _80: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
    let mut _81: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
    let mut _82: &i32;                   // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
    let mut _83: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _84: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _85: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _86: *const [&i32; 3];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _87: *const [&i32; 3];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _88: *const [&i32; 2];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
        debug left_val => _34;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _35;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _40: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _40;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
    }
    scope 6 {
        debug left_val => _65;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _66;          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _71: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 7 {
            debug kind => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = const 24_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = alloc::alloc::exchange_malloc(move _6, move _7) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ShallowInitBox(move _8, [&i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _11 = one() -> [return: bb2, unwind: bb32]; // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:22: 9:27
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:22: 9:25
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_11;                      // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:21: 9:27
        _14 = one() -> [return: bb3, unwind: bb32]; // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:30: 9:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:30: 9:33
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &_14;                      // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:29: 9:35
        _12 = _13;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:29: 9:35
        _82 = const _;                   // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _16 = _82;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
        _15 = _16;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
        _86 = (((_9.0: std::ptr::Unique<[&i32; 3]>).0: std::ptr::NonNull<[&i32; 3]>).0: *const [&i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_86) = [move _10, move _12, move _15]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _5 = move _9;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = move _5 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _4) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const 24_usize;            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _22 = const 8_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _23 = alloc::alloc::exchange_malloc(move _21, move _22) -> [return: bb5, unwind: bb28]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = ShallowInitBox(move _23, [&i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _81 = const _;                   // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _25 = _81;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
        _80 = const _;                   // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _27 = _80;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
        _26 = _27;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
        _31 = one() -> [return: bb6, unwind: bb31]; // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:57: 9:62
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:57: 9:60
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb6: {
        _32 = one() -> [return: bb7, unwind: bb31]; // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:63: 9:68
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:63: 9:66
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb7: {
        _33 = CheckedAdd(_31, _32);      // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:56: 9:69
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _31, move _32) -> [success: bb8, unwind: bb31]; // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:56: 9:69
    }

    bb8: {
        _30 = move (_33.0: i32);         // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:56: 9:69
        _29 = &_30;                      // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:55: 9:69
        _28 = _29;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:55: 9:69
        _87 = (((_24.0: std::ptr::Unique<[&i32; 3]>).0: std::ptr::NonNull<[&i32; 3]>).0: *const [&i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_87) = [move _25, move _26, move _28]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _20 = move _24;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _19 = move _20 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _18 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _19) -> [return: bb9, unwind: bb28]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = &_18;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _17);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_1.0: &std::vec::Vec<&i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_1.1: &std::vec::Vec<&i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <Vec<&i32> as PartialEq>::eq(move _38, move _39) -> [return: bb10, unwind: bb27]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<&i32>, &'b Vec<&i32>) -> bool {<Vec<&i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _36 = Not(move _37);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _40 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<Vec<&i32>, Vec<&i32>>(move _42, move _43, move _45, move _47) -> bb27; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<&i32>, &'b Vec<&i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<&i32>, Vec<&i32>>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_18) -> [return: bb13, unwind: bb28]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_3) -> bb14;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14: {
        _52 = one() -> bb15;             // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:22: 10:27
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:22: 10:25
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb15: {
        _51 = &_52;                      // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:21: 10:27
        _50 = from_elem::<&i32>(move _51, const 2_usize) -> bb16; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:69
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:47:36: 47:58
                                         // + literal: Const { ty: fn(&i32, usize) -> Vec<&i32> {from_elem::<&i32>}, val: Value(<ZST>) }
    }

    bb16: {
        _49 = &_50;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _57 = const 16_usize;            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _58 = const 8_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _59 = alloc::alloc::exchange_malloc(move _57, move _58) -> [return: bb17, unwind: bb26]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb17: {
        _60 = ShallowInitBox(move _59, [&i32; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _79 = const _;                   // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _61 = _79;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
        _64 = one() -> [return: bb18, unwind: bb30]; // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:43: 10:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:43: 10:46
                                         // + literal: Const { ty: fn() -> i32 {one}, val: Value(<ZST>) }
    }

    bb18: {
        _63 = &_64;                      // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:42: 10:48
        _62 = _63;                       // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:42: 10:48
        _88 = (((_60.0: std::ptr::Unique<[&i32; 2]>).0: std::ptr::NonNull<[&i32; 2]>).0: *const [&i32; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_88) = [move _61, move _62];   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _56 = move _60;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _55 = move _56 as std::boxed::Box<[&i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _54 = slice::<impl [&i32]>::into_vec::<std::alloc::Global>(move _55) -> [return: bb19, unwind: bb26]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[&i32]>) -> Vec<&i32> {slice::<impl [&i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb19: {
        _53 = &_54;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _48 = (move _49, move _53);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _65 = (_48.0: &std::vec::Vec<&i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _66 = (_48.1: &std::vec::Vec<&i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _69 = _65;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _70 = _66;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _68 = <Vec<&i32> as PartialEq>::eq(move _69, move _70) -> [return: bb20, unwind: bb25]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<&i32>, &'b Vec<&i32>) -> bool {<Vec<&i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb20: {
        _67 = Not(move _68);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _67) -> [0: bb22, otherwise: bb21]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _71 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _75;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _66;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = _77;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _72 = core::panicking::assert_failed::<Vec<&i32>, Vec<&i32>>(move _73, move _74, move _76, move _78) -> bb25; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<&i32>, &'b Vec<&i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<&i32>, Vec<&i32>>}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_54) -> [return: bb23, unwind: bb26]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb23: {
        drop(_50) -> bb24;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb24: {
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:11:2: 11:2
    }

    bb25 (cleanup): {
        drop(_54) -> bb26;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26 (cleanup): {
        drop(_50) -> bb29;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27 (cleanup): {
        drop(_18) -> bb28;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28 (cleanup): {
        drop(_3) -> bb29;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:8:1: 11:2
    }

    bb30 (cleanup): {
        _83 = alloc::alloc::box_free::<[&i32; 2], std::alloc::Global>(move (_60.0: std::ptr::Unique<[&i32; 2]>), move (_60.1: std::alloc::Global)) -> bb26; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[&i32; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[&i32; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb31 (cleanup): {
        _84 = alloc::alloc::box_free::<[&i32; 3], std::alloc::Global>(move (_24.0: std::ptr::Unique<[&i32; 3]>), move (_24.1: std::alloc::Global)) -> bb28; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[&i32; 3]>, std::alloc::Global) {alloc::alloc::box_free::<[&i32; 3], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb32 (cleanup): {
        _85 = alloc::alloc::box_free::<[&i32; 3], std::alloc::Global>(move (_9.0: std::ptr::Unique<[&i32; 3]>), move (_9.1: std::alloc::Global)) -> bb29; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[&i32; 3]>, std::alloc::Global) {alloc::alloc::box_free::<[&i32; 3], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:39: 10:40

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:39: 10:40
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:10:38: 10:40
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:52: 9:53

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:52: 9:53
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:51: 9:53
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:48: 9:49

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:48: 9:49
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:47: 9:49
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:38: 9:39

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:38: 9:39
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
        return;                          // scope 0 at ui/array-slice-vec/vec-macro-rvalue-scope.rs:9:37: 9:39
    }
}
