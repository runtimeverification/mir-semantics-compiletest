// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const AA: [isize; 3] = {
    let mut _0: [isize; 3];

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize];
        return;
    }
}

AA::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const AB: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let _1: &[isize; 3];
    let _2: [isize; 3];
    let mut _3: &[isize; 3];

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in AB: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

AB::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const AC: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 3];
    let _2: &[isize; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

const AD: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 3];
    let _2: &[isize; 3];
    let _3: [isize; 3];
    let mut _4: &[isize; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in AD: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const AE: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let _1: &[isize; 3];
    let _2: [isize; 3];
    let mut _3: &[isize; 3];

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in AE: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

AE::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

const AF: &[isize] = {
    let mut _0: &[isize];
    let mut _1: &[isize; 3];
    let _2: &[isize; 3];
    let _3: [isize; 3];
    let mut _4: &[isize; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _4 = const _;
        _2 = &(*_4);
        _1 = &(*_2);
        _0 = move _1 as &[isize] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

promoted[0] in AF: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}

static CA: isize = {
    let mut _0: isize;
    let mut _1: [isize; 3];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len(_1);
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = _1[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static CB: isize = {
    let mut _0: isize;
    let mut _1: &[isize; 3];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 1_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static CC: isize = {
    let mut _0: isize;
    let mut _1: &[isize];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 2_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static CD: isize = {
    let mut _0: isize;
    let mut _1: &[isize];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 0_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static CE: isize = {
    let mut _0: isize;
    let mut _1: &[isize; 3];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 1_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static CF: isize = {
    let mut _0: isize;
    let mut _1: &[isize];
    let _2: usize;
    let mut _3: usize;
    let mut _4: bool;

    bb0: {
        StorageLive(_1);
        _1 = const _;
        StorageLive(_2);
        _2 = const 2_usize;
        _3 = Len((*_1));
        _4 = Lt(_2, _3);
        assert(move _4, "index out of bounds: the length is {} but the index is {}", move _3, _2) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_1)[_2];
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

static AG: &isize = {
    let mut _0: &isize;
    let _1: &isize;
    let _2: [isize; 3];
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: &[isize; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const _;
        StorageLive(_3);
        _3 = const 2_usize;
        _4 = Len(_2);
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _6 = const _;
        _1 = &(*_6)[_3];
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in AG: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &[isize];
    let mut _2: (&&[isize], &&[isize]);
    let mut _3: &&[isize];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&[isize], &&[isize]);
    let mut _12: &&[isize];
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&&[isize], &&[isize]);
    let mut _21: &&[isize];
    let mut _24: bool;
    let mut _25: bool;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&isize, &isize);
    let _30: &&isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&isize, &isize);
    let _41: &isize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&isize, &isize);
    let _52: &isize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: isize;
    let mut _58: isize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&isize, &isize);
    let _63: &isize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: isize;
    let mut _69: isize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&isize, &isize);
    let _74: &isize;
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: isize;
    let mut _80: isize;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _84: (&isize, &isize);
    let _85: &isize;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: isize;
    let mut _91: isize;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: (&isize, &isize);
    let _96: &isize;
    let mut _99: bool;
    let mut _100: bool;
    let mut _101: isize;
    let mut _102: isize;
    let _104: !;
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: &[isize; 3];
    let mut _117: &isize;
    scope 1 {
        debug b => _1;
        let _4: &&[isize];
        let _5: &&[isize];
        let _13: &&[isize];
        let _14: &&[isize];
        let _22: &&[isize];
        let _23: &&[isize];
        let _31: &isize;
        let _32: &isize;
        let _42: &isize;
        let _43: &isize;
        let _53: &isize;
        let _54: &isize;
        let _64: &isize;
        let _65: &isize;
        let _75: &isize;
        let _76: &isize;
        let _86: &isize;
        let _87: &isize;
        let _97: &isize;
        let _98: &isize;
        let mut _106: &isize;
        let mut _107: &isize;
        let mut _108: &isize;
        let mut _109: &isize;
        let mut _110: &isize;
        let mut _111: &isize;
        let mut _112: &isize;
        let mut _113: &&[isize];
        let mut _114: &&[isize];
        let mut _115: &&[isize];
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _8: core::panicking::AssertKind;
            scope 3 {
                debug kind => _8;
            }
        }
        scope 4 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 5 {
                debug kind => _17;
            }
        }
        scope 6 {
            debug left_val => _22;
            debug right_val => _23;
            let _26: core::panicking::AssertKind;
            scope 7 {
                debug kind => _26;
            }
        }
        scope 8 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 9 {
                debug kind => _37;
            }
        }
        scope 10 {
            debug left_val => _42;
            debug right_val => _43;
            let _48: core::panicking::AssertKind;
            scope 11 {
                debug kind => _48;
            }
        }
        scope 12 {
            debug left_val => _53;
            debug right_val => _54;
            let _59: core::panicking::AssertKind;
            scope 13 {
                debug kind => _59;
            }
        }
        scope 14 {
            debug left_val => _64;
            debug right_val => _65;
            let _70: core::panicking::AssertKind;
            scope 15 {
                debug kind => _70;
            }
        }
        scope 16 {
            debug left_val => _75;
            debug right_val => _76;
            let _81: core::panicking::AssertKind;
            scope 17 {
                debug kind => _81;
            }
        }
        scope 18 {
            debug left_val => _86;
            debug right_val => _87;
            let _92: core::panicking::AssertKind;
            scope 19 {
                debug kind => _92;
            }
        }
        scope 20 {
            debug left_val => _97;
            debug right_val => _98;
            let _103: core::panicking::AssertKind;
            scope 21 {
                debug kind => _103;
            }
        }
    }

    bb0: {
        _116 = const _;
        _1 = _116 as &[isize] (Pointer(Unsize));
        _115 = const _;
        _3 = &_1;
        _2 = (_115, move _3);
        _4 = (_2.0: &&[isize]);
        _5 = (_2.1: &&[isize]);
        _7 = <&[isize] as PartialEq>::eq(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&[isize], &[isize]>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb3: {
        _114 = const _;
        _12 = &_1;
        _11 = (_114, move _12);
        _13 = (_11.0: &&[isize]);
        _14 = (_11.1: &&[isize]);
        _16 = <&[isize] as PartialEq>::eq(_13, _14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<&[isize], &[isize]>(move _17, _13, _14, move _19) -> unwind continue;
    }

    bb6: {
        _113 = const _;
        _21 = &_1;
        _20 = (_113, move _21);
        _22 = (_20.0: &&[isize]);
        _23 = (_20.1: &&[isize]);
        _25 = <&[isize] as PartialEq>::eq(_22, _23) -> [return: bb7, unwind continue];
    }

    bb7: {
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<&[isize], &[isize]>(move _26, _22, _23, move _28) -> unwind continue;
    }

    bb9: {
        _30 = const {alloc1: &&isize};
        _117 = deref_copy (*_30);
        _112 = const _;
        _29 = (_117, _112);
        _31 = (_29.0: &isize);
        _32 = (_29.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb11: {
        _41 = const {alloc2: &isize};
        _111 = const _;
        _40 = (_41, _111);
        _42 = (_40.0: &isize);
        _43 = (_40.1: &isize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<isize, isize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb13: {
        _52 = const {alloc3: &isize};
        _110 = const _;
        _51 = (_52, _110);
        _53 = (_51.0: &isize);
        _54 = (_51.1: &isize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<isize, isize>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb15: {
        _63 = const {alloc4: &isize};
        _109 = const _;
        _62 = (_63, _109);
        _64 = (_62.0: &isize);
        _65 = (_62.1: &isize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<isize, isize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb17: {
        _74 = const {alloc5: &isize};
        _108 = const _;
        _73 = (_74, _108);
        _75 = (_73.0: &isize);
        _76 = (_73.1: &isize);
        _79 = (*_75);
        _80 = (*_76);
        _78 = Eq(move _79, move _80);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = core::panicking::assert_failed::<isize, isize>(move _81, _75, _76, move _83) -> unwind continue;
    }

    bb19: {
        _85 = const {alloc6: &isize};
        _107 = const _;
        _84 = (_85, _107);
        _86 = (_84.0: &isize);
        _87 = (_84.1: &isize);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<isize, isize>(move _92, _86, _87, move _94) -> unwind continue;
    }

    bb21: {
        _96 = const {alloc7: &isize};
        _106 = const _;
        _95 = (_96, _106);
        _97 = (_95.0: &isize);
        _98 = (_95.1: &isize);
        _101 = (*_97);
        _102 = (*_98);
        _100 = Eq(move _101, move _102);
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _103 = core::panicking::AssertKind::Eq;
        _105 = Option::<Arguments<'_>>::None;
        _104 = core::panicking::assert_failed::<isize, isize>(move _103, _97, _98, move _105) -> unwind continue;
    }

    bb23: {
        return;
    }
}

alloc7 (static: CF, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc6 (static: CE, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc5 (static: CD, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc4 (static: CC, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         │ ........
}

alloc3 (static: CB, size: 8, align: 8) {
    02 00 00 00 00 00 00 00                         │ ........
}

alloc2 (static: CA, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: AG, size: 8, align: 8) {
    ╾────alloc41+0x10─────╼                         │ ╾──────╼
}

alloc41 (size: 24, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&[isize] = {
    let mut _0: &&[isize];
    let mut _1: &[isize];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &&[isize] = {
    let mut _0: &&[isize];
    let mut _1: &[isize];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&[isize] = {
    let mut _0: &&[isize];
    let mut _1: &[isize];

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize];
        _0 = &_1;
        return;
    }
}
