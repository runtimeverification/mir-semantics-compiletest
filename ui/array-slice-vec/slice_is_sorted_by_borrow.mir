// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:10:11: 10:11
    let _1: &[A; 2];                     // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:11:9: 11:10
    let _2: [A; 2];                      // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:11:14: 18:6
    let mut _3: A;                       // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:12:9: 14:10
    let mut _4: std::string::String;     // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:34
    let mut _5: &str;                    // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:34
    let _6: &str;                        // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:22
    let mut _7: A;                       // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:15:9: 17:10
    let mut _8: std::string::String;     // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:34
    let mut _9: &str;                    // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:34
    let _10: &str;                       // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:22
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:5: 19:53
    let mut _12: bool;                   // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:13: 19:52
    let mut _13: &[A];                   // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:13: 19:52
    let mut _14: &[A; 2];                // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:13: 19:52
    let mut _15: [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35]; // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:51
    let mut _16: !;                      // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:5: 19:53
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:11:9: 11:10
    }

    bb0: {
        _6 = const "1";                  // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:34
        _4 = <str as ToString>::to_string(move _5) -> bb1; // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:19: 13:34
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:13:23: 13:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = A { name: move _4 };        // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:12:9: 14:10
        _10 = const "2";                 // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:22
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:34
        _8 = <str as ToString>::to_string(move _9) -> [return: bb2, unwind: bb8]; // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:19: 16:34
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:16:23: 16:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = A { name: move _8 };        // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:15:9: 17:10
        _2 = [move _3, move _7];         // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:11:14: 18:6
        _1 = &_2;                        // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:11:13: 18:6
        _14 = _1;                        // scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:13: 19:52
        _13 = move _14 as &[A] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:13: 19:52
        _12 = core::slice::<impl [A]>::is_sorted_by_key::<'_, [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35], &str>(move _13, move _15) -> [return: bb3, unwind: bb7]; // scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:13: 19:52
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:15: 19:31
                                         // + literal: Const { ty: fn(&[A], [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35]) -> bool {core::slice::<impl [A]>::is_sorted_by_key::<'_, [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35], &str>}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:5: 19:53
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:5: 19:53
    }

    bb4: {
        _16 = core::panicking::panic(const "assertion failed: a.is_sorted_by_key(|a| a.name.as_str())") -> bb7; // scope 1 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:5: 19:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:5: 19:53
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:20:1: 20:2
    }

    bb6: {
        return;                          // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:20:2: 20:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:20:1: 20:2
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:18:5: 18:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:10:1: 20:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:32: 19:35], _2: &A) -> &str {
    debug a => _2;                       // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:33: 19:34
    let mut _0: &str;                    // return place in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:36: 19:36
    let mut _3: &std::string::String;    // in scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:36: 19:51

    bb0: {
        _3 = &((*_2).0: std::string::String); // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:36: 19:51
        _0 = String::as_str(move _3) -> bb1; // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:36: 19:51
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:43: 19:49
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a str {String::as_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/slice_is_sorted_by_borrow.rs:19:51: 19:51
    }
}
