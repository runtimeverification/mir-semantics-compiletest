// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/slice_binary_search.rs:6:10: 6:15>::fmt(_1: &Assignment, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &std::string::String;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&i32;
    let _10: &i32;

    bb0: {
        _3 = const "Assignment";
        _4 = const "topic";
        _6 = &((*_1).0: std::string::String);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "partition";
        _10 = &((*_1).1: i32);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<Assignment>;
    let mut _2: std::boxed::Box<[Assignment]>;
    let mut _3: std::boxed::Box<[Assignment; 3]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[Assignment; 3]>;
    let mut _8: Assignment;
    let mut _9: std::string::String;
    let _10: &str;
    let mut _11: Assignment;
    let mut _12: std::string::String;
    let _13: &str;
    let mut _14: Assignment;
    let mut _15: std::string::String;
    let _16: &str;
    let _18: &str;
    let mut _20: &[Assignment];
    let _21: &[Assignment];
    let mut _22: &std::vec::Vec<Assignment>;
    let _23: &&str;
    let mut _24: (&std::result::Result<usize, usize>, &std::result::Result<usize, usize>);
    let mut _25: &std::result::Result<usize, usize>;
    let _26: std::result::Result<usize, usize>;
    let mut _27: std::result::Result<usize, usize>;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: &mut std::boxed::Box<[Assignment; 3]>;
    let mut _37: ();
    let mut _38: *const [Assignment; 3];
    let mut _39: *const ();
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    scope 1 {
        debug xs => _1;
        let _17: &str;
        scope 3 {
            debug key => _17;
            let _19: std::result::Result<usize, usize>;
            scope 4 {
                debug r => _19;
                let _28: &std::result::Result<usize, usize>;
                let _29: &std::result::Result<usize, usize>;
                let mut _35: &std::result::Result<usize, usize>;
                scope 5 {
                    debug left_val => _28;
                    debug right_val => _29;
                    let _32: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _32;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = SizeOf([Assignment; 3]);
        _5 = AlignOf([Assignment; 3]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [Assignment; 3]);
        _10 = const "abc";
        _9 = <&str as Into<String>>::into(_10) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _8 = Assignment { topic: move _9, partition: const 1_i32 };
        _13 = const "def";
        _12 = <&str as Into<String>>::into(_13) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _11 = Assignment { topic: move _12, partition: const 2_i32 };
        _16 = const "ghi";
        _15 = <&str as Into<String>>::into(_16) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _14 = Assignment { topic: move _15, partition: const 3_i32 };
        _38 = (((_7.0: std::ptr::Unique<[Assignment; 3]>).0: std::ptr::NonNull<[Assignment; 3]>).0: *const [Assignment; 3]);
        _39 = _38 as *const () (PtrToPtr);
        _40 = _39 as usize (Transmute);
        _41 = AlignOf(Assignment);
        _42 = Sub(_41, const 1_usize);
        _43 = BitAnd(_40, _42);
        _44 = Eq(_43, const 0_usize);
        assert(_44, "misaligned pointer dereference: address must be a multiple of {} but is {}", _41, _40) -> [success: bb18, unwind unreachable];
    }

    bb5: {
        _18 = const "def";
        _17 = _18;
        _22 = &_1;
        _21 = <Vec<Assignment> as Deref>::deref(move _22) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _20 = _21;
        _23 = &_17;
        _19 = core::slice::<impl [Assignment]>::binary_search_by_key::<'_, &str, [closure@ui/array-slice-vec/slice_binary_search.rs:20:43: 20:46]>(move _20, _23, const ZeroSized: [closure@ui/array-slice-vec/slice_binary_search.rs:20:43: 20:46]) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _35 = const _;
        _27 = _19;
        _26 = Result::<usize, usize>::map::<usize, [closure@ui/array-slice-vec/slice_binary_search.rs:21:29: 21:32]>(move _27, const ZeroSized: [closure@ui/array-slice-vec/slice_binary_search.rs:21:29: 21:32]) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _25 = &_26;
        _24 = (_35, move _25);
        _28 = (_24.0: &std::result::Result<usize, usize>);
        _29 = (_24.1: &std::result::Result<usize, usize>);
        _31 = <Result<usize, usize> as PartialEq>::eq(_28, _29) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Result<usize, usize>, Result<usize, usize>>(move _32, _28, _29, move _34) -> bb13;
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_11) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17 (cleanup): {
        _36 = &mut _7;
        _37 = <Box<[Assignment; 3]> as Drop>::drop(move _36) -> [return: bb19, unwind terminate];
    }

    bb18: {
        (*_38) = [move _8, move _11, move _14];
        _3 = move _7;
        _2 = move _3 as std::boxed::Box<[Assignment]> (Pointer(Unsize));
        _1 = slice::<impl [Assignment]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb5, unwind continue];
    }

    bb19 (cleanup): {
        goto -> bb16;
    }
}

promoted[0] in main: &Result<usize, usize> = {
    let mut _0: &std::result::Result<usize, usize>;
    let mut _1: std::result::Result<usize, usize>;

    bb0: {
        _1 = Result::<usize, usize>::Ok(const 1_usize);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/array-slice-vec/slice_binary_search.rs:20:43: 20:46], _2: &Assignment) -> &str {
    debug e => _2;
    let mut _0: &str;
    let _3: &str;
    let _4: &std::string::String;

    bb0: {
        _4 = &((*_2).0: std::string::String);
        _3 = <String as Deref>::deref(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _3;
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/array-slice-vec/slice_binary_search.rs:21:29: 21:32], _2: usize) -> usize {
    debug i => _2;
    let mut _0: usize;

    bb0: {
        _0 = _2;
        return;
    }
}
