// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _2: bool;
    let mut _3: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: !;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    scope 1 {
        debug x => const _;
        let _1: &[isize];
        let mut _21: &[isize; 5];
        scope 2 {
            debug x => _1;
            let _4: &isize;
            let _8: &[isize];
            scope 3 {
                debug el => _4;
                let mut _20: &[&str; 2];
            }
            scope 4 {
                debug tail => _8;
            }
        }
    }

    bb0: {
        _21 = const _;
        _1 = _21 as &[isize] (Pointer(Unsize));
        _3 = core::slice::<impl [isize]>::is_empty(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb9, otherwise: bb2];
    }

    bb2: {
        _5 = Len((*_1));
        _6 = const 1_usize;
        _7 = Ge(move _5, move _6);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        switchInt((*_1)[0 of 1]) -> [1: bb5, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb5: {
        _8 = &(*_1)[1:];
        _9 = const 0_usize;
        _10 = Len((*_8));
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb6, unwind continue];
    }

    bb6: {
        _4 = &(*_8)[_9];
        _20 = const _;
        _15 = _20 as &[&str] (Pointer(Unsize));
        _19 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _13 = _print(move _14) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[isize; 5] = {
    let mut _0: &[isize; 5];
    let mut _1: [isize; 5];

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i32; 5] = {
    let mut _0: &[i32; 5];
    let mut _1: [i32; 5];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _0 = &_1;
        return;
    }
}
