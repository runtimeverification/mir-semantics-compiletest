// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNT: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

fn <impl at ui/array-slice-vec/slice.rs:13:1: 13:31>::index(_1: &Foo, _2: std::ops::Range<Foo>) -> &Foo {
    debug self => _1;
    debug index => const std::ops::Range::<Foo> {{ start: Foo, end: Foo }};
    let mut _0: &Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:20:1: 20:33>::index(_1: &Foo, _2: RangeTo<Foo>) -> &Foo {
    debug self => _1;
    debug index => const RangeTo::<Foo> {{ end: Foo }};
    let mut _0: &Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:27:1: 27:35>::index(_1: &Foo, _2: RangeFrom<Foo>) -> &Foo {
    debug self => _1;
    debug index => const RangeFrom::<Foo> {{ start: Foo }};
    let mut _0: &Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:34:1: 34:30>::index(_1: &Foo, _2: RangeFull) -> &Foo {
    debug self => _1;
    debug _index => const RangeFull;
    let mut _0: &Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:42:1: 42:34>::index_mut(_1: &mut Foo, _2: std::ops::Range<Foo>) -> &mut Foo {
    debug self => _1;
    debug index => const std::ops::Range::<Foo> {{ start: Foo, end: Foo }};
    let mut _0: &mut Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:48:1: 48:36>::index_mut(_1: &mut Foo, _2: RangeTo<Foo>) -> &mut Foo {
    debug self => _1;
    debug index => const RangeTo::<Foo> {{ end: Foo }};
    let mut _0: &mut Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:54:1: 54:38>::index_mut(_1: &mut Foo, _2: RangeFrom<Foo>) -> &mut Foo {
    debug self => _1;
    debug index => const RangeFrom::<Foo> {{ start: Foo }};
    let mut _0: &mut Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/array-slice-vec/slice.rs:60:1: 60:33>::index_mut(_1: &mut Foo, _2: RangeFull) -> &mut Foo {
    debug self => _1;
    debug _index => const RangeFull;
    let mut _0: &mut Foo;
    let mut _3: *mut usize;
    scope 1 {
        let mut _4: *const ();
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: bool;
        let mut _10: *const ();
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut usize};
        _10 = _3 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(usize);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_3) = Add((*_3), const 1_usize);
        _0 = _1;
        return;
    }

    bb2: {
        _4 = _3 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(usize);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let _2: &Foo;
    let mut _3: &Foo;
    let _4: &Foo;
    let mut _5: &Foo;
    let _6: &Foo;
    let mut _7: &Foo;
    let _8: &Foo;
    let mut _9: &Foo;
    let mut _10: &mut Foo;
    let mut _11: &mut Foo;
    let mut _12: &mut Foo;
    let mut _13: &mut Foo;
    let mut _14: &mut Foo;
    let mut _15: &mut Foo;
    let mut _16: &mut Foo;
    let mut _17: &mut Foo;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let _20: *mut usize;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: usize;
    let mut _26: usize;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const Foo;
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            let _21: &usize;
                                            let _22: &usize;
                                            let mut _30: &usize;
                                            let mut _31: *const ();
                                            let mut _32: usize;
                                            let mut _33: usize;
                                            let mut _34: usize;
                                            let mut _35: usize;
                                            let mut _36: bool;
                                            scope 11 {
                                                debug left_val => _21;
                                                debug right_val => _22;
                                                let _27: core::panicking::AssertKind;
                                                scope 12 {
                                                    debug kind => _27;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = &_1;
        _2 = <Foo as Index<RangeFull>>::index(move _3, const RangeFull) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_1;
        _4 = <Foo as Index<RangeFrom<Foo>>>::index(move _5, const RangeFrom::<Foo> {{ start: Foo }}) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = &_1;
        _6 = <Foo as Index<RangeTo<Foo>>>::index(move _7, const RangeTo::<Foo> {{ end: Foo }}) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = &_1;
        _8 = <Foo as Index<std::ops::Range<Foo>>>::index(move _9, const std::ops::Range::<Foo> {{ start: Foo, end: Foo }}) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = &mut _1;
        _10 = <Foo as IndexMut<RangeFull>>::index_mut(move _11, const RangeFull) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = &mut _1;
        _12 = <Foo as IndexMut<RangeFrom<Foo>>>::index_mut(move _13, const RangeFrom::<Foo> {{ start: Foo }}) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = &mut _1;
        _14 = <Foo as IndexMut<RangeTo<Foo>>>::index_mut(move _15, const RangeTo::<Foo> {{ end: Foo }}) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = &mut _1;
        _16 = <Foo as IndexMut<std::ops::Range<Foo>>>::index_mut(move _17, const std::ops::Range::<Foo> {{ start: Foo, end: Foo }}) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = const {alloc1: *mut usize};
        _31 = _20 as *const () (PtrToPtr);
        _32 = _31 as usize (Transmute);
        _33 = AlignOf(usize);
        _34 = Sub(_33, const 1_usize);
        _35 = BitAnd(_32, _34);
        _36 = Eq(_35, const 0_usize);
        assert(_36, "misaligned pointer dereference: address must be a multiple of {} but is {}", _33, _32) -> [success: bb11, unwind unreachable];
    }

    bb9: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = assert_failed::<usize, usize>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb10: {
        return;
    }

    bb11: {
        _19 = &(*_20);
        _30 = const _;
        _18 = (move _19, _30);
        _21 = (_18.0: &usize);
        _22 = (_18.1: &usize);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 8_usize;
        _0 = &_1;
        return;
    }
}
