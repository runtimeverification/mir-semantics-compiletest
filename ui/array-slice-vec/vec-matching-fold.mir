// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foldl(_1: &[T], _2: U, _3: F) -> U {
    debug values => _1;
    debug initial => _2;
    debug function => _3;
    let mut _0: U;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let _10: &T;
    let _11: &[T];
    let mut _12: U;
    let mut _13: &mut F;
    let mut _14: (U, &T);
    let mut _15: U;
    let mut _16: F;
    let _17: U;
    let mut _18: &U;
    let mut _19: bool;
    let mut _20: bool;
    scope 1 {
        debug head => _10;
        debug tail => _11;
    }
    scope 2 {
        debug res => _17;
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        _20 = const true;
        _19 = const true;
        _7 = Len((*_1));
        _8 = const 1_usize;
        _9 = Ge(move _7, move _8);
        switchInt(move _9) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        _4 = Len((*_1));
        _5 = const 0_usize;
        _6 = Eq(move _4, move _5);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _18 = &_2;
        _17 = <U as Clone>::clone(move _18) -> [return: bb6, unwind: bb15];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &(*_1)[0 of 1];
        _11 = &(*_1)[1:];
        _13 = &mut _3;
        _20 = const false;
        _15 = move _2;
        _14 = (move _15, _10);
        _12 = <F as FnMut<(U, &T)>>::call_mut(move _13, move _14) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _19 = const false;
        _16 = move _3;
        _0 = foldl::<T, U, F>(_11, move _12, move _16) -> [return: bb17, unwind: bb15];
    }

    bb6: {
        _0 = move _17;
        goto -> bb12;
    }

    bb7: {
        switchInt(_20) -> [0: bb8, otherwise: bb13];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        switchInt(_20) -> [0: bb10, otherwise: bb16];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        drop(_3) -> [return: bb7, unwind: bb9];
    }

    bb12: {
        switchInt(_19) -> [0: bb7, otherwise: bb11];
    }

    bb13: {
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb9, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb17: {
        goto -> bb12;
    }
}

fn foldr(_1: &[T], _2: U, _3: F) -> U {
    debug values => _1;
    debug initial => _2;
    debug function => _3;
    let mut _0: U;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let _10: &[T];
    let _11: &T;
    let mut _12: U;
    let mut _13: &mut F;
    let mut _14: (&T, U);
    let mut _15: U;
    let mut _16: F;
    let _17: U;
    let mut _18: &U;
    let mut _19: bool;
    let mut _20: bool;
    scope 1 {
        debug head => _10;
        debug tail => _11;
    }
    scope 2 {
        debug res => _17;
    }

    bb0: {
        _20 = const false;
        _19 = const false;
        _20 = const true;
        _19 = const true;
        _7 = Len((*_1));
        _8 = const 1_usize;
        _9 = Ge(move _7, move _8);
        switchInt(move _9) -> [0: bb1, otherwise: bb4];
    }

    bb1: {
        _4 = Len((*_1));
        _5 = const 0_usize;
        _6 = Eq(move _4, move _5);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _18 = &_2;
        _17 = <U as Clone>::clone(move _18) -> [return: bb6, unwind: bb15];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _10 = &(*_1)[:-1];
        _11 = &(*_1)[-1 of 1];
        _13 = &mut _3;
        _20 = const false;
        _15 = move _2;
        _14 = (_11, move _15);
        _12 = <F as FnMut<(&T, U)>>::call_mut(move _13, move _14) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _19 = const false;
        _16 = move _3;
        _0 = foldr::<T, U, F>(_10, move _12, move _16) -> [return: bb17, unwind: bb15];
    }

    bb6: {
        _0 = move _17;
        goto -> bb12;
    }

    bb7: {
        switchInt(_20) -> [0: bb8, otherwise: bb13];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        switchInt(_20) -> [0: bb10, otherwise: bb16];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        drop(_3) -> [return: bb7, unwind: bb9];
    }

    bb12: {
        switchInt(_19) -> [0: bb7, otherwise: bb11];
    }

    bb13: {
        drop(_2) -> [return: bb8, unwind continue];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb15 (cleanup): {
        switchInt(_19) -> [0: bb9, otherwise: bb14];
    }

    bb16 (cleanup): {
        drop(_2) -> [return: bb10, unwind terminate];
    }

    bb17: {
        goto -> bb12;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: &[i32];
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: &[i32];
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: &[i32; 5];
    scope 1 {
        debug x => const _;
        let _1: i32;
        scope 2 {
            debug product => _1;
            let _5: &i32;
            let _6: &i32;
            let _14: i32;
            let mut _28: &i32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug sum => _14;
                let _18: &i32;
                let _19: &i32;
                let mut _27: &i32;
                scope 6 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _24;
                    }
                }
            }
        }
    }

    bb0: {
        _29 = const _;
        _2 = _29 as &[i32] (Pointer(Unsize));
        _1 = foldl::<i32, i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37]>(move _2, const 1_i32, const ZeroSized: [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _28 = const _;
        _3 = (move _4, _28);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _15 = _29 as &[i32] (Pointer(Unsize));
        _14 = foldr::<i32, i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33]>(move _15, const 0_i32, const ZeroSized: [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33]) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &_14;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 15_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 120_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i32; 5] = {
    let mut _0: &[i32; 5];
    let mut _1: [i32; 5];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37], _2: i32, _3: &i32) -> i32 {
    debug a => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: i32;

    bb0: {
        _4 = (*_3);
        _0 = Mul(_2, move _4);
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33], _2: &i32, _3: i32) -> i32 {
    debug a => _2;
    debug b => _3;
    let mut _0: i32;
    let mut _4: i32;

    bb0: {
        _4 = (*_2);
        _0 = Add(move _4, _3);
        return;
    }
}
