// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foldl(_1: &[T], _2: U, _3: F) -> U {
    debug values => _1;                  // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:5:19: 5:25
    debug initial => _2;                 // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:6:19: 6:26
    debug function => _3;                // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:7:19: 7:31
    let mut _0: U;                       // return place in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:8:22: 8:23
    let mut _4: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
    let mut _5: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
    let mut _6: bool;                    // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
    let _10: &T;                         // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:11: 12:19
    let _11: &[T];                       // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:21: 12:29
    let mut _12: &[T];                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:19: 13:23
    let mut _13: U;                      // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:48
    let mut _14: &mut F;                 // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:33
    let mut _15: (U, &T);                // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:48
    let mut _16: U;                      // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:34: 13:41
    let mut _17: &T;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:43: 13:47
    let mut _18: F;                      // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:13:50: 13:58
    let _19: U;                          // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:16:17: 16:20
    let mut _20: &U;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:16:23: 16:38
    let mut _21: bool;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    let mut _22: bool;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    scope 1 {
        debug head => _10;               // in scope 1 at ui/array-slice-vec/vec-matching-fold.rs:12:11: 12:19
        debug tail => _11;               // in scope 1 at ui/array-slice-vec/vec-matching-fold.rs:12:21: 12:29
    }
    scope 2 {
        debug res => _19;                // in scope 2 at ui/array-slice-vec/vec-matching-fold.rs:16:17: 16:20
    }

    bb0: {
        _22 = const false;               // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        _21 = const false;               // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        _22 = const true;                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        _21 = const true;                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        _8 = const 1_usize;              // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
        switchInt(move _9) -> [0: bb1, otherwise: bb4]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:10: 12:35
    }

    bb1: {
        _4 = Len((*_1));                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
        _5 = const 0_usize;              // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
        _6 = Eq(move _4, move _5);       // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:14:10: 14:12
    }

    bb2: {
        _20 = &_2;                       // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:16:23: 16:38
        _19 = <U as Clone>::clone(move _20) -> [return: bb6, unwind: bb15]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:16:23: 16:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:16:31: 16:36
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:11:12: 11:18
    }

    bb4: {
        _10 = &(*_1)[0 of 1];            // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:11: 12:19
        _11 = &(*_1)[1:];                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:12:21: 12:29
        _12 = _11;                       // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:19: 13:23
        _14 = &mut _3;                   // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:33
        _22 = const false;               // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:34: 13:41
        _16 = move _2;                   // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:34: 13:41
        _17 = _10;                       // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:43: 13:47
        _15 = (move _16, move _17);      // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:48
        _13 = <F as FnMut<(U, &T)>>::call_mut(move _14, move _15) -> [return: bb5, unwind: bb15]; // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:13:25: 13:33
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (U, &T)) -> <F as FnOnce<(U, &T)>>::Output {<F as FnMut<(U, &T)>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = const false;               // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:50: 13:58
        _18 = move _3;                   // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:50: 13:58
        _0 = foldl::<T, U, F>(move _12, move _13, move _18) -> [return: bb17, unwind: bb15]; // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:13: 13:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:13:13: 13:18
                                         // + literal: Const { ty: for<'a> fn(&'a [T], U, F) -> U {foldl::<T, U, F>}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = move _19;                   // scope 2 at ui/array-slice-vec/vec-matching-fold.rs:16:40: 16:43
        goto -> bb12;                    // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb7: {
        switchInt(_22) -> [0: bb8, otherwise: bb13]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb8: {
        return;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:2: 19:2
    }

    bb9 (cleanup): {
        switchInt(_22) -> [0: bb10, otherwise: bb16]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:5:1: 19:2
    }

    bb11: {
        drop(_3) -> [return: bb7, unwind: bb9]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb12: {
        switchInt(_21) -> [0: bb7, otherwise: bb11]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb13: {
        drop(_2) -> bb8;                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb14 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb15 (cleanup): {
        switchInt(_21) -> [0: bb9, otherwise: bb14]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb16 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:19:1: 19:2
    }

    bb17: {
        goto -> bb12;                    // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:13:13: 13:59
    }
}

fn foldr(_1: &[T], _2: U, _3: F) -> U {
    debug values => _1;                  // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:21:19: 21:25
    debug initial => _2;                 // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:22:19: 22:26
    debug function => _3;                // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:23:19: 23:31
    let mut _0: U;                       // return place in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:24:22: 24:23
    let mut _4: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
    let mut _5: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
    let mut _6: bool;                    // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
    let _10: &[T];                       // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:11: 29:19
    let _11: &T;                         // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:26: 29:34
    let mut _12: &[T];                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:19: 30:23
    let mut _13: U;                      // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:48
    let mut _14: &mut F;                 // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:33
    let mut _15: (&T, U);                // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:48
    let mut _16: &T;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:34: 30:38
    let mut _17: U;                      // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:40: 30:47
    let mut _18: F;                      // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:30:50: 30:58
    let _19: U;                          // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:33:17: 33:20
    let mut _20: &U;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:33:23: 33:38
    let mut _21: bool;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    let mut _22: bool;                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    scope 1 {
        debug head => _10;               // in scope 1 at ui/array-slice-vec/vec-matching-fold.rs:29:11: 29:19
        debug tail => _11;               // in scope 1 at ui/array-slice-vec/vec-matching-fold.rs:29:26: 29:34
    }
    scope 2 {
        debug res => _19;                // in scope 2 at ui/array-slice-vec/vec-matching-fold.rs:33:17: 33:20
    }

    bb0: {
        _22 = const false;               // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        _21 = const false;               // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        _22 = const true;                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        _21 = const true;                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        _8 = const 1_usize;              // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
        switchInt(move _9) -> [0: bb1, otherwise: bb4]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:10: 29:35
    }

    bb1: {
        _4 = Len((*_1));                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
        _5 = const 0_usize;              // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
        _6 = Eq(move _4, move _5);       // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:31:10: 31:12
    }

    bb2: {
        _20 = &_2;                       // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:33:23: 33:38
        _19 = <U as Clone>::clone(move _20) -> [return: bb6, unwind: bb15]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:33:23: 33:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:33:31: 33:36
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:28:11: 28:17
    }

    bb4: {
        _10 = &(*_1)[:-1];               // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:11: 29:19
        _11 = &(*_1)[-1 of 1];           // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:29:26: 29:34
        _12 = _10;                       // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:19: 30:23
        _14 = &mut _3;                   // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:33
        _16 = _11;                       // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:34: 30:38
        _22 = const false;               // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:40: 30:47
        _17 = move _2;                   // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:40: 30:47
        _15 = (move _16, move _17);      // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:48
        _13 = <F as FnMut<(&T, U)>>::call_mut(move _14, move _15) -> [return: bb5, unwind: bb15]; // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:30:25: 30:33
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T, U)) -> <F as FnOnce<(&T, U)>>::Output {<F as FnMut<(&T, U)>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = const false;               // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:50: 30:58
        _18 = move _3;                   // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:50: 30:58
        _0 = foldr::<T, U, F>(move _12, move _13, move _18) -> [return: bb17, unwind: bb15]; // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:13: 30:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:30:13: 30:18
                                         // + literal: Const { ty: for<'a> fn(&'a [T], U, F) -> U {foldr::<T, U, F>}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = move _19;                   // scope 2 at ui/array-slice-vec/vec-matching-fold.rs:33:40: 33:43
        goto -> bb12;                    // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb7: {
        switchInt(_22) -> [0: bb8, otherwise: bb13]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb8: {
        return;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:2: 36:2
    }

    bb9 (cleanup): {
        switchInt(_22) -> [0: bb10, otherwise: bb16]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:21:1: 36:2
    }

    bb11: {
        drop(_3) -> [return: bb7, unwind: bb9]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb12: {
        switchInt(_21) -> [0: bb7, otherwise: bb11]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb13: {
        drop(_2) -> bb8;                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb14 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb15 (cleanup): {
        switchInt(_21) -> [0: bb9, otherwise: bb14]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb16 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:36:1: 36:2
    }

    bb17: {
        goto -> bb12;                    // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:30:13: 30:59
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:38:15: 38:15
    let _1: &[i32; 5];                   // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:9: 39:10
    let mut _3: &[i32];                  // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:25: 41:26
    let mut _4: &[i32; 5];               // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:25: 41:26
    let mut _5: [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37]; // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:44
    let mut _6: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &[i32];                 // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:21: 44:22
    let mut _25: &[i32; 5];              // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:21: 44:22
    let mut _26: [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33]; // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:40
    let mut _27: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _28: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _29: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _46: &[i32; 5];              // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/vec-matching-fold.rs:39:9: 39:10
        let _2: i32;                     // in scope 1 at ui/array-slice-vec/vec-matching-fold.rs:41:9: 41:16
        scope 2 {
            debug product => _2;         // in scope 2 at ui/array-slice-vec/vec-matching-fold.rs:41:9: 41:16
            let _9: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _23: i32;                // in scope 2 at ui/array-slice-vec/vec-matching-fold.rs:44:9: 44:12
            let mut _45: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug sum => _23;        // in scope 5 at ui/array-slice-vec/vec-matching-fold.rs:44:9: 44:12
                let _30: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _31: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _44: &i32;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _30; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _31; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _36: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _36; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _46 = const _;                   // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
                                         // + literal: Const { ty: &[i32; 5], val: Unevaluated(main, [], Some(promoted[2])) }
        _1 = _46;                        // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
        _4 = _1;                         // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:41:25: 41:26
        _3 = move _4 as &[i32] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:41:25: 41:26
        _2 = foldl::<i32, i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37]>(move _3, const 1_i32, move _5) -> bb1; // scope 1 at ui/array-slice-vec/vec-matching-fold.rs:41:19: 41:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:41:19: 41:24
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37]) -> i32 {foldl::<i32, i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _45 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _45;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 120_i32;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<i32, i32>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = _1;                        // scope 2 at ui/array-slice-vec/vec-matching-fold.rs:44:21: 44:22
        _24 = move _25 as &[i32] (Pointer(Unsize)); // scope 2 at ui/array-slice-vec/vec-matching-fold.rs:44:21: 44:22
        _23 = foldr::<i32, i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33]>(move _24, const 0_i32, move _26) -> bb4; // scope 2 at ui/array-slice-vec/vec-matching-fold.rs:44:15: 44:41
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-matching-fold.rs:44:15: 44:20
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33]) -> i32 {foldr::<i32, i32, [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33]>}, val: Value(<ZST>) }
    }

    bb4: {
        _28 = &_23;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _29 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _27 = (move _28, move _29);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_27.0: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_27.1: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = (*_30);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = const 15_i32;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = Eq(move _34, move _35);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _32 = Not(move _33);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb6, otherwise: bb5]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _36 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _30;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _31;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<i32, i32>(move _38, move _39, move _41, move _43); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:46:2: 46:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:45:21: 45:23

    bb0: {
        _1 = const 15_i32;               // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:45:21: 45:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:42:25: 42:28

    bb0: {
        _1 = const 120_i32;              // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:42:25: 42:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[i32; 5] = {
    let mut _0: &[i32; 5];               // return place in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
    let mut _1: [i32; 5];                // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:14: 39:29

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:14: 39:29
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
        return;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:39:13: 39:29
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/array-slice-vec/vec-matching-fold.rs:41:31: 41:37], _2: i32, _3: &i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:32: 41:33
    debug b => _3;                       // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:35: 41:36
    let mut _0: i32;                     // return place in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:38
    let mut _4: i32;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:39
    let mut _5: i32;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:42: 41:44
    let mut _6: (i32, bool);             // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:44

    bb0: {
        _4 = _2;                         // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:39
        _5 = (*_3);                      // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:42: 41:44
        _6 = CheckedMul(_4, _5);         // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:44
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:44
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:38: 41:44
        return;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:41:44: 41:44
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/array-slice-vec/vec-matching-fold.rs:44:27: 44:33], _2: &i32, _3: i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:28: 44:29
    debug b => _3;                       // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:31: 44:32
    let mut _0: i32;                     // return place in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:34
    let mut _4: i32;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:36
    let mut _5: i32;                     // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:39: 44:40
    let mut _6: (i32, bool);             // in scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:40

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:36
        _5 = _3;                         // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:39: 44:40
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:40
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:40
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:34: 44:40
        return;                          // scope 0 at ui/array-slice-vec/vec-matching-fold.rs:44:40: 44:40
    }
}
