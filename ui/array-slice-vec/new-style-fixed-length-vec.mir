// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: [isize; 3] = {
    let mut _0: [isize; 3];

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize];
        return;
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 3];
    let _6: [core::fmt::rt::Argument<'_>; 3];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &isize;
    let _9: &[isize; 3];
    let _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &isize;
    let _15: &[isize; 3];
    let _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &isize;
    let _21: &[isize; 3];
    let _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: &[&str; 4];

    bb0: {
        _25 = const _;
        _3 = _25 as &[&str] (Pointer(Unsize));
        _9 = const {alloc1: &[isize; 3]};
        _10 = const 0_usize;
        _11 = const 3_usize;
        _12 = Lt(_10, _11);
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> [success: bb1, unwind continue];
    }

    bb1: {
        _8 = &(*_9)[_10];
        _7 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _15 = const {alloc1: &[isize; 3]};
        _16 = const 1_usize;
        _17 = const 3_usize;
        _18 = Lt(_16, _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb3, unwind continue];
    }

    bb3: {
        _14 = &(*_15)[_16];
        _13 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_14) -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = const {alloc1: &[isize; 3]};
        _22 = const 2_usize;
        _23 = const 3_usize;
        _24 = Lt(_22, _23);
        assert(move _24, "index out of bounds: the length is {} but the index is {}", move _23, _22) -> [success: bb5, unwind continue];
    }

    bb5: {
        _20 = &(*_21)[_22];
        _19 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_20) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = [move _7, move _13, move _19];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _1 = _print(move _2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

alloc1 (static: FOO, size: 24, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}
