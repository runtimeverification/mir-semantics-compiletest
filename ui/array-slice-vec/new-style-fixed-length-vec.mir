// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: [isize; 3] = {
    let mut _0: [isize; 3];              // return place in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:3:13: 3:23

    bb0: {
        _0 = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:3:26: 3:35
        return;                          // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:3:1: 3:36
    }
}

FOO::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:3:21: 3:22

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:3:21: 3:22
        return;                          // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:3:21: 3:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:5:15: 5:15
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
    let mut _4: &[&str; 4];              // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
    let _5: &[&str; 4];                  // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
    let mut _11: &isize;                 // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
    let _12: &isize;                     // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
    let _13: &[isize; 3];                // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:29
    let _14: usize;                      // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:30: 6:31
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
    let mut _16: &isize;                 // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
    let _17: &isize;                     // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
    let _18: &[isize; 3];                // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:37
    let _19: usize;                      // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:38: 6:39
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
    let mut _21: &isize;                 // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
    let _22: &isize;                     // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
    let _23: &[isize; 3];                // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:45
    let _24: usize;                      // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:46: 6:47
    let mut _25: &[&str; 4];             // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24

    bb0: {
        _25 = const _;                   // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // + literal: Const { ty: &[&str; 4], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _25;                        // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
        _4 = _5;                         // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
        _13 = const {alloc1: &[isize; 3]}; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:29
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:29
                                         // + literal: Const { ty: &[isize; 3], val: Value(Scalar(alloc1)) }
        _14 = const 0_usize;             // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:30: 6:31
        _12 = &(*_13)[_14];              // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
        _11 = _12;                       // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _11) -> bb1; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:26: 6:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = const {alloc1: &[isize; 3]}; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:37
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:37
                                         // + literal: Const { ty: &[isize; 3], val: Value(Scalar(alloc1)) }
        _19 = const 1_usize;             // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:38: 6:39
        _17 = &(*_18)[_19];              // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
        _16 = _17;                       // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _16) -> bb2; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:34: 6:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = const {alloc1: &[isize; 3]}; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:45
                                         // + literal: Const { ty: &[isize; 3], val: Value(Scalar(alloc1)) }
        _24 = const 2_usize;             // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:46: 6:47
        _22 = &(*_23)[_24];              // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
        _21 = _22;                       // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
        _20 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _21) -> bb3; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:42: 6:48
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = [move _10, move _15, move _20]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _1 = _print(move _2) -> bb5;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:7:2: 7:2
    }
}

alloc1 (static: FOO, size: 24, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 02 00 00 00 00 00 00 00 │ ................
    0x10 │ 03 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];              // return place in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
    let mut _1: [&str; 4];               // in scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"]; // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
        return;                          // scope 0 at ui/array-slice-vec/new-style-fixed-length-vec.rs:6:14: 6:24
    }
}
