// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut DTOR_COUNT: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/array-slice-vec/slice-panic-1.rs:13:24: 13:29

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/array-slice-vec/slice-panic-1.rs:13:32: 13:33
        return;                          // scope 0 at ui/array-slice-vec/slice-panic-1.rs:13:1: 13:34
    }
}

fn <impl at ui/array-slice-vec/slice-panic-1.rs:15:1: 15:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:16:13: 16:22
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/slice-panic-1.rs:16:24: 16:24
    let mut _2: *mut isize;              // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:16:35: 16:45
    let mut _3: (isize, bool);           // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:16:35: 16:50
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut isize}; // scope 1 at ui/array-slice-vec/slice-panic-1.rs:16:35: 16:45
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-panic-1.rs:16:35: 16:45
                                         // + literal: Const { ty: *mut isize, val: Value(Scalar(alloc1)) }
        _3 = CheckedAdd((*_2), const 1_isize); // scope 1 at ui/array-slice-vec/slice-panic-1.rs:16:35: 16:50
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_2), const 1_isize) -> bb1; // scope 1 at ui/array-slice-vec/slice-panic-1.rs:16:35: 16:50
    }

    bb1: {
        (*_2) = move (_3.0: isize);      // scope 1 at ui/array-slice-vec/slice-panic-1.rs:16:35: 16:50
        return;                          // scope 0 at ui/array-slice-vec/slice-panic-1.rs:16:55: 16:55
    }
}

alloc1 (static: DTOR_COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/slice-panic-1.rs:19:10: 19:10
    let _1: &[Foo];                      // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:9: 20:10
    let mut _2: &[Foo; 2];               // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:19: 20:30
    let _3: &[Foo; 2];                   // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:19: 20:30
    let _4: [Foo; 2];                    // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:20: 20:30
    let _5: &[Foo];                      // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:21:14: 21:21
    let mut _6: &[Foo];                  // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:21:14: 21:15
    let mut _7: std::ops::Range<usize>;  // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:21:16: 21:20
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/slice-panic-1.rs:20:9: 20:10
        scope 2 {
        }
    }

    bb0: {
        _3 = &_4;                        // scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:19: 20:30
        _2 = _3;                         // scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:19: 20:30
        _1 = move _2 as &[Foo] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/slice-panic-1.rs:20:19: 20:30
        _6 = _1;                         // scope 1 at ui/array-slice-vec/slice-panic-1.rs:21:14: 21:15
        _7 = std::ops::Range::<usize> { start: const 3_usize, end: const 4_usize }; // scope 1 at ui/array-slice-vec/slice-panic-1.rs:21:16: 21:20
        _5 = <[Foo] as Index<std::ops::Range<usize>>>::index(move _6, move _7) -> [return: bb1, unwind: bb3]; // scope 1 at ui/array-slice-vec/slice-panic-1.rs:21:14: 21:21
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-panic-1.rs:21:14: 21:21
                                         // + literal: Const { ty: for<'a> fn(&'a [Foo], std::ops::Range<usize>) -> &'a <[Foo] as Index<std::ops::Range<usize>>>::Output {<[Foo] as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_4) -> bb2;                 // scope 0 at ui/array-slice-vec/slice-panic-1.rs:22:1: 22:2
    }

    bb2: {
        return;                          // scope 0 at ui/array-slice-vec/slice-panic-1.rs:22:2: 22:2
    }

    bb3 (cleanup): {
        drop(_4) -> bb4;                 // scope 0 at ui/array-slice-vec/slice-panic-1.rs:22:1: 22:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/slice-panic-1.rs:19:1: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/slice-panic-1.rs:24:11: 24:11
    let mut _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:13: 25:47
    let mut _2: std::thread::JoinHandle<()>; // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:13: 25:40
    let mut _3: [closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33]; // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:27: 25:39
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: *mut isize;                  // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:26:25: 26:35
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        scope 2 {
            let _8: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _22: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = spawn::<[closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33], ()>(move _3) -> bb1; // scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:13: 25:40
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-panic-1.rs:25:13: 25:26
                                         // + literal: Const { ty: fn([closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33]) -> JoinHandle<()> {spawn::<[closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = JoinHandle::<()>::join(move _2) -> bb2; // scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:13: 25:47
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-panic-1.rs:25:41: 25:45
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:47: 25:48
    }

    bb3: {
        _6 = const {alloc1: *mut isize}; // scope 2 at ui/array-slice-vec/slice-panic-1.rs:26:25: 26:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-panic-1.rs:26:25: 26:35
                                         // + literal: Const { ty: *mut isize, val: Value(Scalar(alloc1)) }
        _5 = &(*_6);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_4.0: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_4.1: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 2_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<isize, isize>(move _16, move _17, move _19, move _21); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/array-slice-vec/slice-panic-1.rs:27:2: 27:2
    }
}

alloc1 (static: DTOR_COUNT, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/array-slice-vec/slice-panic-1.rs:26:37: 26:38

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/array-slice-vec/slice-panic-1.rs:26:37: 26:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: [closure@ui/array-slice-vec/slice-panic-1.rs:25:27: 25:33]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:34: 25:34

    bb0: {
        _0 = foo() -> bb1;               // scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:34: 25:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/slice-panic-1.rs:25:34: 25:37
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/slice-panic-1.rs:25:39: 25:39
    }
}
