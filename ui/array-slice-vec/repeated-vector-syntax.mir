// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [[bool; 1]; 512];
    let mut _2: [bool; 1];
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: std::slice::Iter<'_, [bool; 1]>;
    let mut _8: &[[bool; 1]];
    let _9: &[[bool; 1]];
    let mut _10: &[[bool; 1]; 512];
    let mut _12: std::option::Option<&[bool; 1]>;
    let mut _13: &mut std::slice::Iter<'_, [bool; 1]>;
    let mut _14: isize;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let mut _19: &[core::fmt::rt::Argument<'_>];
    let _20: &[core::fmt::rt::Argument<'_>; 1];
    let _21: [core::fmt::rt::Argument<'_>; 1];
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &&[bool];
    let _24: &[bool];
    let _25: &[bool];
    let _26: ();
    let mut _27: std::fmt::Arguments<'_>;
    let mut _28: &[&str];
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &&[i32];
    let _37: &[i32];
    let _38: &[i32];
    let mut _39: &[i32; 1];
    scope 1 {
        debug x => _1;
        let _3: [i32; 1];
        scope 2 {
            debug y => _3;
            let mut _11: std::slice::Iter<'_, [bool; 1]>;
            let mut _41: &[&str; 2];
            let mut _42: &[&str; 1];
            let mut _43: &[&str; 1];
            scope 3 {
                debug iter => _11;
                let _15: &[bool; 1];
                scope 4 {
                    debug xi => _15;
                    let mut _40: &[&str; 2];
                }
            }
        }
    }

    bb0: {
        _2 = [const true];
        _1 = [move _2; 512];
        _3 = [const 0_i32; 1];
        _43 = const _;
        _6 = _43 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _print(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = &_1;
        _9 = <[[bool; 1]; 512] as Index<RangeFull>>::index(move _10, const RangeFull) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = _9;
        _7 = <&[[bool; 1]] as IntoIterator>::into_iter(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = move _7;
        goto -> bb5;
    }

    bb5: {
        _13 = &mut _11;
        _12 = <std::slice::Iter<'_, [bool; 1]> as Iterator>::next(_13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = discriminant(_12);
        switchInt(move _14) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _15 = ((_12 as Some).0: &[bool; 1]);
        _40 = const _;
        _18 = _40 as &[&str] (Pointer(Unsize));
        _25 = <[bool; 1] as Index<RangeFull>>::index(_15, const RangeFull) -> [return: bb10, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _42 = const _;
        _28 = _42 as &[&str] (Pointer(Unsize));
        _27 = Arguments::<'_>::new_const(move _28) -> [return: bb13, unwind continue];
    }

    bb10: {
        _24 = _25;
        _23 = &_24;
        _22 = core::fmt::rt::Argument::<'_>::new_debug::<&[bool]>(_23) -> [return: bb11, unwind continue];
    }

    bb11: {
        _21 = [move _22];
        _20 = &_21;
        _19 = _20 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _19) -> [return: bb12, unwind continue];
    }

    bb12: {
        _16 = _print(move _17) -> [return: bb5, unwind continue];
    }

    bb13: {
        _26 = _print(move _27) -> [return: bb14, unwind continue];
    }

    bb14: {
        _41 = const _;
        _31 = _41 as &[&str] (Pointer(Unsize));
        _39 = &_3;
        _38 = <[i32; 1] as Index<RangeFull>>::index(move _39, const RangeFull) -> [return: bb15, unwind continue];
    }

    bb15: {
        _37 = _38;
        _36 = &_37;
        _35 = core::fmt::rt::Argument::<'_>::new_debug::<&[i32]>(_36) -> [return: bb16, unwind continue];
    }

    bb16: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb17, unwind continue];
    }

    bb17: {
        _29 = _print(move _30) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ", "];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "]\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "["];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 512_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}
