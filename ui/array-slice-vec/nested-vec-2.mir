// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/nested-vec-2.rs:8:1: 8:16>::drop(_1: &mut D) -> () {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:13: 9:22
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:24: 9:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
    let mut _5: &[&str; 2];              // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
    let _6: &[&str; 2];                  // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
    let mut _12: &u32;                   // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
    let _13: &u32;                       // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
    let mut _14: &[&str; 2];             // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48

    bb0: {
        _14 = const _;                   // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<D as Drop>::drop, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
        _5 = _6;                         // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
        _13 = &((*_1).0: u32);           // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
        _12 = _13;                       // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _12) -> bb1; // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:9:50: 9:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:60: 9:60
    }
}

promoted[0] in <impl at ui/array-slice-vec/nested-vec-2.rs:8:1: 8:16>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48

    bb0: {
        _1 = [const "Dropping ", const "\n"]; // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-2.rs:9:35: 9:48
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/nested-vec-2.rs:12:11: 12:11
    let _1: std::vec::Vec<std::vec::Vec<D>>; // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:9: 13:15
    let mut _2: std::boxed::Box<[std::vec::Vec<D>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[std::vec::Vec<D>; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[std::vec::Vec<D>; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::vec::Vec<D>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _9: std::boxed::Box<[D]>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: std::boxed::Box<[D; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _13: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _14: std::boxed::Box<[D; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _15: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:28: 13:35
    let mut _16: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:37: 13:44
    let mut _17: D;                      // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:46: 13:53
    let mut _18: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _19: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _20: &D;                         // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:28
    let mut _21: &std::vec::Vec<D>;      // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:25
    let _22: &std::vec::Vec<D>;          // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:25
    let mut _23: &std::vec::Vec<std::vec::Vec<D>>; // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:22
    let mut _24: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _41: *const [D; 3];          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _42: *const [std::vec::Vec<D>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug nested => _1;              // in scope 1 at ui/array-slice-vec/nested-vec-2.rs:13:9: 13:15
        let _25: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _26: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _39: &u32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 4 {
            debug left_val => _25;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _26;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _31: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _31;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }
    scope 3 {
    }

    bb0: {
        _4 = const 24_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::vec::Vec<D>; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _11 = const 12_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const 4_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = alloc::alloc::exchange_malloc(move _11, move _12) -> [return: bb2, unwind: bb12]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = ShallowInitBox(move _13, [D; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _15 = const D(1_u32);            // scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:28: 13:35
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:13:28: 13:35
                                         // + literal: Const { ty: D, val: Value(Scalar(0x00000001)) }
        _16 = const D(2_u32);            // scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:37: 13:44
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:13:37: 13:44
                                         // + literal: Const { ty: D, val: Value(Scalar(0x00000002)) }
        _17 = const D(3_u32);            // scope 0 at ui/array-slice-vec/nested-vec-2.rs:13:46: 13:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:13:46: 13:53
                                         // + literal: Const { ty: D, val: Value(Scalar(0x00000003)) }
        _41 = (((_14.0: std::ptr::Unique<[D; 3]>).0: std::ptr::NonNull<[D; 3]>).0: *const [D; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_41) = [move _15, move _16, move _17]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _10 = move _14;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = move _10 as std::boxed::Box<[D]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = slice::<impl [D]>::into_vec::<std::alloc::Global>(move _9) -> [return: bb3, unwind: bb12]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[D]>) -> Vec<D> {slice::<impl [D]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _42 = (((_7.0: std::ptr::Unique<[std::vec::Vec<D>; 1]>).0: std::ptr::NonNull<[std::vec::Vec<D>; 1]>).0: *const [std::vec::Vec<D>; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_42) = [move _8];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[std::vec::Vec<D>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [Vec<D>]>::into_vec::<std::alloc::Global>(move _2) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Vec<D>]>) -> Vec<Vec<D>> {slice::<impl [Vec<D>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = &_1;                       // scope 1 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:22
        _22 = <Vec<Vec<D>> as Index<usize>>::index(move _23, const 0_usize) -> [return: bb5, unwind: bb10]; // scope 1 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:25
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:14:16: 14:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Vec<D>>, usize) -> &'a <Vec<Vec<D>> as Index<usize>>::Output {<Vec<Vec<D>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = _22;                       // scope 1 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:25
        _20 = <Vec<D> as Index<usize>>::index(move _21, const 1_usize) -> [return: bb6, unwind: bb10]; // scope 1 at ui/array-slice-vec/nested-vec-2.rs:14:16: 14:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/nested-vec-2.rs:14:16: 14:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<D>, usize) -> &'a <Vec<D> as Index<usize>>::Output {<Vec<D> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = &((*_20).0: u32);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _39;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _18 = (move _19, move _24);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_18.0: &u32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_18.1: &u32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = const 2_u32;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<u32, u32>(move _33, move _34, move _36, move _38) -> bb10; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/array-slice-vec/nested-vec-2.rs:15:1: 15:2
    }

    bb9: {
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-2.rs:15:2: 15:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/array-slice-vec/nested-vec-2.rs:15:1: 15:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/nested-vec-2.rs:12:1: 15:2
    }

    bb12 (cleanup): {
        _40 = alloc::alloc::box_free::<[Vec<D>; 1], std::alloc::Global>(move (_7.0: std::ptr::Unique<[std::vec::Vec<D>; 1]>), move (_7.1: std::alloc::Global)) -> bb11; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Vec<D>; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[Vec<D>; 1], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/array-slice-vec/nested-vec-2.rs:14:32: 14:33

    bb0: {
        _1 = const 2_u32;                // scope 0 at ui/array-slice-vec/nested-vec-2.rs:14:32: 14:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn D(_1: u32) -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/nested-vec-2.rs:6:1: 6:9

    bb0: {
        _0 = D(move _1);                 // scope 0 at ui/array-slice-vec/nested-vec-2.rs:6:1: 6:9
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-2.rs:6:1: 6:9
    }
}

// MIR FOR CTFE
fn D(_1: u32) -> D {
    let mut _0: D;                       // return place in scope 0 at ui/array-slice-vec/nested-vec-2.rs:6:1: 6:9

    bb0: {
        _0 = D(move _1);                 // scope 0 at ui/array-slice-vec/nested-vec-2.rs:6:1: 6:9
        return;                          // scope 0 at ui/array-slice-vec/nested-vec-2.rs:6:1: 6:9
    }
}
