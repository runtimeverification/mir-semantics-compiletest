// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FOO: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 240_u8;
        return;
    }
}

static BAR: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 3];
    let _2: &[u8; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"a\xf0\t";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (size: 3, align: 1) {
    61 f0 09                                        │ a..
}

static BAR_FIXED: &[u8; 3] = {
    let mut _0: &[u8; 3];

    bb0: {
        _0 = const b"a\xf0\t";
        return;
    }
}

alloc2 (size: 3, align: 1) {
    61 f0 09                                        │ a..
}

BAR_FIXED::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

static BAZ: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 3];
    let _2: &[u8; 3];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"a\\n";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc3 (size: 3, align: 1) {
    61 5c 6e                                        │ a\n
}

fn main() -> () {
    let mut _0: ();
    let _1: &[u8];
    let _2: &[u8; 3];
    let mut _4: (&u8, &u8);
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u8;
    let mut _10: u8;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u8, &u8);
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: u8;
    let mut _20: u8;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&u8, &u8);
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: u8;
    let mut _30: u8;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&u8, &u8);
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: u8;
    let mut _40: u8;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _44: (&u8, &u8);
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: u8;
    let mut _50: u8;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&u8, &u8);
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: u8;
    let mut _60: u8;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&u8, &u8);
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: u8;
    let mut _70: u8;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: (&u8, &u8);
    let mut _77: bool;
    let mut _78: bool;
    let mut _79: u8;
    let mut _80: u8;
    let _82: !;
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _84: (&u8, &u8);
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: u8;
    let mut _90: u8;
    let _92: !;
    let mut _93: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _94: (&u8, &u8);
    let _95: &u8;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: u8;
    let mut _101: u8;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: u8;
    let mut _106: !;
    let mut _107: u8;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: !;
    let mut _112: (&&[u8; 9], &&[u8]);
    let mut _113: &&[u8];
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: (&&[u8; 2], &&[u8]);
    let mut _123: &&[u8];
    let mut _126: bool;
    let mut _127: bool;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _132: (&&[u8], &&[u8]);
    let _133: &&[u8];
    let mut _134: &&[u8];
    let mut _137: bool;
    let mut _138: bool;
    let _140: !;
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _142: (&&[u8; 3], &&[u8]);
    let _143: &&[u8; 3];
    let mut _144: &&[u8];
    let mut _147: bool;
    let mut _148: bool;
    let _150: !;
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _152: (&&[u8], &&[u8]);
    let mut _153: &&[u8];
    let mut _154: &&[u8];
    let mut _157: bool;
    let mut _158: bool;
    let _160: !;
    let mut _161: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _162: (&&[u8; 3], &&[u8]);
    let mut _163: &&[u8; 3];
    let mut _164: &&[u8];
    let mut _167: bool;
    let mut _168: bool;
    let _170: !;
    let mut _171: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: !;
    let mut _174: std::boxed::Box<[u8]>;
    let mut _175: usize;
    let mut _176: usize;
    let mut _177: *mut u8;
    let mut _178: std::boxed::Box<[u8; 4]>;
    let mut _179: (&i32, &i32);
    let mut _180: &i32;
    let _181: i32;
    let mut _182: &[u8];
    let _183: &[u8];
    let mut _184: &std::vec::Vec<u8>;
    let mut _185: std::ops::Range<usize>;
    let mut _186: usize;
    let mut _187: usize;
    let mut _188: bool;
    let mut _191: bool;
    let mut _192: bool;
    let mut _193: i32;
    let mut _194: i32;
    let _196: !;
    let mut _197: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _199: (&&[u8], &&[u8]);
    let _200: &&[u8];
    let mut _201: &&[u8];
    let mut _204: bool;
    let mut _205: bool;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: (&&[u8; 3], &&[u8]);
    let mut _211: &&[u8];
    let mut _214: bool;
    let mut _215: bool;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _219: (&&[u8; 3], &&[u8; 3]);
    let mut _222: bool;
    let mut _223: bool;
    let _225: !;
    let mut _226: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _228: (&&[u8; 5], &&[u8]);
    let mut _229: &&[u8];
    let mut _232: bool;
    let mut _233: bool;
    let _235: !;
    let mut _236: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _237: (&&[u8; 5], &&[u8; 5]);
    let mut _240: bool;
    let mut _241: bool;
    let _243: !;
    let mut _244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _280: *const [u8; 4];
    scope 1 {
        debug bar => _1;
        let _3: &[u8; 3];
        scope 2 {
            debug bar_fixed => const b"a\xf0\t";
            let _5: &u8;
            let _6: &u8;
            let _15: &u8;
            let _16: &u8;
            let _25: &u8;
            let _26: &u8;
            let _35: &u8;
            let _36: &u8;
            let _45: &u8;
            let _46: &u8;
            let _55: &u8;
            let _56: &u8;
            let _65: &u8;
            let _66: &u8;
            let _75: &u8;
            let _76: &u8;
            let _85: &u8;
            let _86: &u8;
            let _96: &u8;
            let _97: &u8;
            let _111: &[u8];
            let mut _260: &[u8; 9];
            let mut _261: &u8;
            let mut _262: &u8;
            let mut _263: &u8;
            let mut _264: &u8;
            let mut _265: &u8;
            let mut _266: &u8;
            let mut _267: &u8;
            let mut _268: &u8;
            let mut _269: &u8;
            let mut _270: &u8;
            let mut _271: &u8;
            let mut _272: &u8;
            let mut _273: &u8;
            let mut _274: &u8;
            let mut _275: &u8;
            let mut _276: &u8;
            let mut _277: &u8;
            let mut _278: &u8;
            let mut _279: &u8;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug left_val => _15;
                debug right_val => _16;
                let _21: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _21;
                }
            }
            scope 7 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _31;
                }
            }
            scope 9 {
                debug left_val => _35;
                debug right_val => _36;
                let _41: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _41;
                }
            }
            scope 11 {
                debug left_val => _45;
                debug right_val => _46;
                let _51: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _51;
                }
            }
            scope 13 {
                debug left_val => _55;
                debug right_val => _56;
                let _61: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _61;
                }
            }
            scope 15 {
                debug left_val => _65;
                debug right_val => _66;
                let _71: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _71;
                }
            }
            scope 17 {
                debug left_val => _75;
                debug right_val => _76;
                let _81: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _81;
                }
            }
            scope 19 {
                debug left_val => _85;
                debug right_val => _86;
                let _91: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _91;
                }
            }
            scope 21 {
                debug left_val => _96;
                debug right_val => _97;
                let _102: core::panicking::AssertKind;
                scope 22 {
                    debug kind => _102;
                }
            }
            scope 23 {
                debug expected => _111;
                let _114: &&[u8; 9];
                let _115: &&[u8];
                let _121: &[u8];
                let mut _258: &[u8; 2];
                let mut _259: &&[u8; 9];
                scope 24 {
                    debug left_val => _114;
                    debug right_val => _115;
                    let _118: core::panicking::AssertKind;
                    scope 25 {
                        debug kind => _118;
                    }
                }
                scope 26 {
                    debug expected => _121;
                    let _124: &&[u8; 2];
                    let _125: &&[u8];
                    let _131: &[u8];
                    let mut _256: &[u8; 3];
                    let mut _257: &&[u8; 2];
                    scope 27 {
                        debug left_val => _124;
                        debug right_val => _125;
                        let _128: core::panicking::AssertKind;
                        scope 28 {
                            debug kind => _128;
                        }
                    }
                    scope 29 {
                        debug expected => _131;
                        let _135: &&[u8];
                        let _136: &&[u8];
                        let _145: &&[u8; 3];
                        let _146: &&[u8];
                        let _155: &&[u8];
                        let _156: &&[u8];
                        let _165: &&[u8; 3];
                        let _166: &&[u8];
                        let mut _255: &[u8; 2];
                        scope 30 {
                            debug left_val => _135;
                            debug right_val => _136;
                            let _139: core::panicking::AssertKind;
                            scope 31 {
                                debug kind => _139;
                            }
                        }
                        scope 32 {
                            debug left_val => _145;
                            debug right_val => _146;
                            let _149: core::panicking::AssertKind;
                            scope 33 {
                                debug kind => _149;
                            }
                        }
                        scope 34 {
                            debug left_val => _155;
                            debug right_val => _156;
                            let _159: core::panicking::AssertKind;
                            scope 35 {
                                debug kind => _159;
                            }
                        }
                        scope 36 {
                            debug left_val => _165;
                            debug right_val => _166;
                            let _169: core::panicking::AssertKind;
                            scope 37 {
                                debug kind => _169;
                            }
                        }
                        scope 38 {
                            debug val => const _;
                            let _173: std::vec::Vec<u8>;
                            scope 39 {
                                debug buf => _173;
                                let _189: &i32;
                                let _190: &i32;
                                let _198: &[u8];
                                let mut _253: &[u8; 3];
                                let mut _254: &i32;
                                scope 41 {
                                    debug left_val => _189;
                                    debug right_val => _190;
                                    let _195: core::panicking::AssertKind;
                                    scope 42 {
                                        debug kind => _195;
                                    }
                                }
                                scope 43 {
                                    debug expected => _198;
                                    let _202: &&[u8];
                                    let _203: &&[u8];
                                    let _209: &[u8];
                                    let mut _252: &[u8; 3];
                                    scope 44 {
                                        debug left_val => _202;
                                        debug right_val => _203;
                                        let _206: core::panicking::AssertKind;
                                        scope 45 {
                                            debug kind => _206;
                                        }
                                    }
                                    scope 46 {
                                        debug expected => _209;
                                        let _212: &&[u8; 3];
                                        let _213: &&[u8];
                                        let _220: &&[u8; 3];
                                        let _221: &&[u8; 3];
                                        let _227: &[u8];
                                        let mut _248: &[u8; 5];
                                        let mut _249: &&[u8; 3];
                                        let mut _250: &&[u8; 3];
                                        let mut _251: &&[u8; 3];
                                        scope 47 {
                                            debug left_val => _212;
                                            debug right_val => _213;
                                            let _216: core::panicking::AssertKind;
                                            scope 48 {
                                                debug kind => _216;
                                            }
                                        }
                                        scope 49 {
                                            debug left_val => _220;
                                            debug right_val => _221;
                                            let _224: core::panicking::AssertKind;
                                            scope 50 {
                                                debug kind => _224;
                                            }
                                        }
                                        scope 51 {
                                            debug expected => _227;
                                            let _230: &&[u8; 5];
                                            let _231: &&[u8];
                                            let _238: &&[u8; 5];
                                            let _239: &&[u8; 5];
                                            let mut _245: &&[u8; 5];
                                            let mut _246: &&[u8; 5];
                                            let mut _247: &&[u8; 5];
                                            scope 52 {
                                                debug left_val => _230;
                                                debug right_val => _231;
                                                let _234: core::panicking::AssertKind;
                                                scope 53 {
                                                    debug kind => _234;
                                                }
                                            }
                                            scope 54 {
                                                debug left_val => _238;
                                                debug right_val => _239;
                                                let _242: core::panicking::AssertKind;
                                                scope 55 {
                                                    debug kind => _242;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            scope 40 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const b"a\xf0\t";
        _1 = _2 as &[u8] (Pointer(Unsize));
        _3 = const b"a\xf0\t";
        _279 = const _;
        _278 = const _;
        _4 = (_279, _278);
        _5 = (_4.0: &u8);
        _6 = (_4.1: &u8);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u8, u8>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _277 = const _;
        _276 = const _;
        _14 = (_277, _276);
        _15 = (_14.0: &u8);
        _16 = (_14.1: &u8);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<u8, u8>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb4: {
        _275 = const _;
        _274 = const _;
        _24 = (_275, _274);
        _25 = (_24.0: &u8);
        _26 = (_24.1: &u8);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<u8, u8>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb6: {
        _273 = const _;
        _272 = const _;
        _34 = (_273, _272);
        _35 = (_34.0: &u8);
        _36 = (_34.1: &u8);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<u8, u8>(move _41, _35, _36, move _43) -> unwind continue;
    }

    bb8: {
        _271 = const _;
        _270 = const _;
        _44 = (_271, _270);
        _45 = (_44.0: &u8);
        _46 = (_44.1: &u8);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<u8, u8>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb10: {
        _269 = const _;
        _268 = const _;
        _54 = (_269, _268);
        _55 = (_54.0: &u8);
        _56 = (_54.1: &u8);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<u8, u8>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb12: {
        _267 = const _;
        _266 = const _;
        _64 = (_267, _266);
        _65 = (_64.0: &u8);
        _66 = (_64.1: &u8);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<u8, u8>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb14: {
        _265 = const _;
        _264 = const _;
        _74 = (_265, _264);
        _75 = (_74.0: &u8);
        _76 = (_74.1: &u8);
        _79 = (*_75);
        _80 = (*_76);
        _78 = Eq(move _79, move _80);
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _81 = core::panicking::AssertKind::Eq;
        _83 = Option::<Arguments<'_>>::None;
        _82 = core::panicking::assert_failed::<u8, u8>(move _81, _75, _76, move _83) -> unwind continue;
    }

    bb16: {
        _263 = const _;
        _262 = const _;
        _84 = (_263, _262);
        _85 = (_84.0: &u8);
        _86 = (_84.1: &u8);
        _89 = (*_85);
        _90 = (*_86);
        _88 = Eq(move _89, move _90);
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _91 = core::panicking::AssertKind::Eq;
        _93 = Option::<Arguments<'_>>::None;
        _92 = core::panicking::assert_failed::<u8, u8>(move _91, _85, _86, move _93) -> unwind continue;
    }

    bb18: {
        _95 = const {alloc4: &u8};
        _261 = const _;
        _94 = (_95, _261);
        _96 = (_94.0: &u8);
        _97 = (_94.1: &u8);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<u8, u8>(move _102, _96, _97, move _104) -> unwind continue;
    }

    bb20: {
        _105 = const 42_u8;
        switchInt(_105) -> [42: bb22, otherwise: bb21];
    }

    bb21: {
        _106 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb22: {
        _107 = const 100_u8;
        _108 = Le(const 97_u8, _107);
        switchInt(move _108) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _109 = Le(_107, const 122_u8);
        switchInt(move _109) -> [0: bb24, otherwise: bb25];
    }

    bb24: {
        _110 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb25: {
        _260 = const _;
        _111 = _260 as &[u8] (Pointer(Unsize));
        _259 = const _;
        _113 = &_111;
        _112 = (_259, move _113);
        _114 = (_112.0: &&[u8; 9]);
        _115 = (_112.1: &&[u8]);
        _117 = <&[u8; 9] as PartialEq<&[u8]>>::eq(_114, _115) -> [return: bb26, unwind continue];
    }

    bb26: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<&[u8; 9], &[u8]>(move _118, _114, _115, move _120) -> unwind continue;
    }

    bb28: {
        _258 = const _;
        _121 = _258 as &[u8] (Pointer(Unsize));
        _257 = const _;
        _123 = &_121;
        _122 = (_257, move _123);
        _124 = (_122.0: &&[u8; 2]);
        _125 = (_122.1: &&[u8]);
        _127 = <&[u8; 2] as PartialEq<&[u8]>>::eq(_124, _125) -> [return: bb29, unwind continue];
    }

    bb29: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<&[u8; 2], &[u8]>(move _128, _124, _125, move _130) -> unwind continue;
    }

    bb31: {
        _256 = const _;
        _131 = _256 as &[u8] (Pointer(Unsize));
        _133 = const {alloc5: &&[u8]};
        _134 = &_131;
        _132 = (_133, move _134);
        _135 = (_132.0: &&[u8]);
        _136 = (_132.1: &&[u8]);
        _138 = <&[u8] as PartialEq>::eq(_135, _136) -> [return: bb32, unwind continue];
    }

    bb32: {
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _139 = core::panicking::AssertKind::Eq;
        _141 = Option::<Arguments<'_>>::None;
        _140 = core::panicking::assert_failed::<&[u8], &[u8]>(move _139, _135, _136, move _141) -> unwind continue;
    }

    bb34: {
        _143 = const {alloc6: &&[u8; 3]};
        _144 = &_131;
        _142 = (_143, move _144);
        _145 = (_142.0: &&[u8; 3]);
        _146 = (_142.1: &&[u8]);
        _148 = <&[u8; 3] as PartialEq<&[u8]>>::eq(_145, _146) -> [return: bb35, unwind continue];
    }

    bb35: {
        _147 = Not(move _148);
        switchInt(move _147) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _149 = core::panicking::AssertKind::Eq;
        _151 = Option::<Arguments<'_>>::None;
        _150 = core::panicking::assert_failed::<&[u8; 3], &[u8]>(move _149, _145, _146, move _151) -> unwind continue;
    }

    bb37: {
        _153 = &_1;
        _154 = &_131;
        _152 = (move _153, move _154);
        _155 = (_152.0: &&[u8]);
        _156 = (_152.1: &&[u8]);
        _158 = <&[u8] as PartialEq>::eq(_155, _156) -> [return: bb38, unwind continue];
    }

    bb38: {
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _159 = core::panicking::AssertKind::Eq;
        _161 = Option::<Arguments<'_>>::None;
        _160 = core::panicking::assert_failed::<&[u8], &[u8]>(move _159, _155, _156, move _161) -> unwind continue;
    }

    bb40: {
        _163 = &_3;
        _164 = &_131;
        _162 = (move _163, move _164);
        _165 = (_162.0: &&[u8; 3]);
        _166 = (_162.1: &&[u8]);
        _168 = <&[u8; 3] as PartialEq<&[u8]>>::eq(_165, _166) -> [return: bb41, unwind continue];
    }

    bb41: {
        _167 = Not(move _168);
        switchInt(move _167) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _169 = core::panicking::AssertKind::Eq;
        _171 = Option::<Arguments<'_>>::None;
        _170 = core::panicking::assert_failed::<&[u8; 3], &[u8]>(move _169, _165, _166, move _171) -> unwind continue;
    }

    bb43: {
        _255 = const _;
        switchInt((*_255)[0 of 2]) -> [97: bb44, otherwise: bb45];
    }

    bb44: {
        switchInt((*_255)[1 of 2]) -> [10: bb46, otherwise: bb45];
    }

    bb45: {
        _172 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb46: {
        _175 = SizeOf([u8; 4]);
        _176 = AlignOf([u8; 4]);
        _177 = alloc::alloc::exchange_malloc(move _175, move _176) -> [return: bb47, unwind continue];
    }

    bb47: {
        _178 = ShallowInitBox(move _177, [u8; 4]);
        _280 = (((_178.0: std::ptr::Unique<[u8; 4]>).0: std::ptr::NonNull<[u8; 4]>).0: *const [u8; 4]);
        (*_280) = [const 97_u8, const 98_u8, const 99_u8, const 100_u8];
        _174 = move _178 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _173 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _174) -> [return: bb48, unwind continue];
    }

    bb48: {
        _184 = &_173;
        _185 = std::ops::Range::<usize> { start: const 0_usize, end: const 3_usize };
        _183 = <Vec<u8> as Index<std::ops::Range<usize>>>::index(move _184, move _185) -> [return: bb49, unwind: bb77];
    }

    bb49: {
        _182 = _183;
        _186 = Len((*_182));
        _187 = const 3_usize;
        _188 = Eq(move _186, move _187);
        switchInt(move _188) -> [0: bb53, otherwise: bb50];
    }

    bb50: {
        switchInt((*_182)[0 of 3]) -> [100: bb51, 97: bb54, otherwise: bb53];
    }

    bb51: {
        switchInt((*_182)[1 of 3]) -> [101: bb52, otherwise: bb53];
    }

    bb52: {
        switchInt((*_182)[2 of 3]) -> [102: bb56, otherwise: bb53];
    }

    bb53: {
        _181 = const 3_i32;
        goto -> bb58;
    }

    bb54: {
        switchInt((*_182)[1 of 3]) -> [98: bb55, otherwise: bb53];
    }

    bb55: {
        switchInt((*_182)[2 of 3]) -> [99: bb57, otherwise: bb53];
    }

    bb56: {
        _181 = const 1_i32;
        goto -> bb58;
    }

    bb57: {
        _181 = const 2_i32;
        goto -> bb58;
    }

    bb58: {
        _180 = &_181;
        _254 = const _;
        _179 = (move _180, _254);
        _189 = (_179.0: &i32);
        _190 = (_179.1: &i32);
        _193 = (*_189);
        _194 = (*_190);
        _192 = Eq(move _193, move _194);
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _195 = core::panicking::AssertKind::Eq;
        _197 = Option::<Arguments<'_>>::None;
        _196 = core::panicking::assert_failed::<i32, i32>(move _195, _189, _190, move _197) -> bb77;
    }

    bb60: {
        _253 = const _;
        _198 = _253 as &[u8] (Pointer(Unsize));
        _200 = const {alloc7: &&[u8]};
        _201 = &_198;
        _199 = (_200, move _201);
        _202 = (_199.0: &&[u8]);
        _203 = (_199.1: &&[u8]);
        _205 = <&[u8] as PartialEq>::eq(_202, _203) -> [return: bb61, unwind: bb77];
    }

    bb61: {
        _204 = Not(move _205);
        switchInt(move _204) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _206 = core::panicking::AssertKind::Eq;
        _208 = Option::<Arguments<'_>>::None;
        _207 = core::panicking::assert_failed::<&[u8], &[u8]>(move _206, _202, _203, move _208) -> bb77;
    }

    bb63: {
        _252 = const _;
        _209 = _252 as &[u8] (Pointer(Unsize));
        _251 = const _;
        _211 = &_209;
        _210 = (_251, move _211);
        _212 = (_210.0: &&[u8; 3]);
        _213 = (_210.1: &&[u8]);
        _215 = <&[u8; 3] as PartialEq<&[u8]>>::eq(_212, _213) -> [return: bb64, unwind: bb77];
    }

    bb64: {
        _214 = Not(move _215);
        switchInt(move _214) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<&[u8; 3], &[u8]>(move _216, _212, _213, move _218) -> bb77;
    }

    bb66: {
        _250 = const _;
        _249 = const _;
        _219 = (_250, _249);
        _220 = (_219.0: &&[u8; 3]);
        _221 = (_219.1: &&[u8; 3]);
        _223 = <&[u8; 3] as PartialEq>::eq(_220, _221) -> [return: bb67, unwind: bb77];
    }

    bb67: {
        _222 = Not(move _223);
        switchInt(move _222) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _224 = core::panicking::AssertKind::Eq;
        _226 = Option::<Arguments<'_>>::None;
        _225 = core::panicking::assert_failed::<&[u8; 3], &[u8; 3]>(move _224, _220, _221, move _226) -> bb77;
    }

    bb69: {
        _248 = const _;
        _227 = _248 as &[u8] (Pointer(Unsize));
        _247 = const _;
        _229 = &_227;
        _228 = (_247, move _229);
        _230 = (_228.0: &&[u8; 5]);
        _231 = (_228.1: &&[u8]);
        _233 = <&[u8; 5] as PartialEq<&[u8]>>::eq(_230, _231) -> [return: bb70, unwind: bb77];
    }

    bb70: {
        _232 = Not(move _233);
        switchInt(move _232) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _234 = core::panicking::AssertKind::Eq;
        _236 = Option::<Arguments<'_>>::None;
        _235 = core::panicking::assert_failed::<&[u8; 5], &[u8]>(move _234, _230, _231, move _236) -> bb77;
    }

    bb72: {
        _246 = const _;
        _245 = const _;
        _237 = (_246, _245);
        _238 = (_237.0: &&[u8; 5]);
        _239 = (_237.1: &&[u8; 5]);
        _241 = <&[u8; 5] as PartialEq>::eq(_238, _239) -> [return: bb73, unwind: bb77];
    }

    bb73: {
        _240 = Not(move _241);
        switchInt(move _240) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _242 = core::panicking::AssertKind::Eq;
        _244 = Option::<Arguments<'_>>::None;
        _243 = core::panicking::assert_failed::<&[u8; 5], &[u8; 5]>(move _242, _238, _239, move _244) -> bb77;
    }

    bb75: {
        drop(_173) -> [return: bb76, unwind continue];
    }

    bb76: {
        return;
    }

    bb77 (cleanup): {
        drop(_173) -> [return: bb78, unwind terminate];
    }

    bb78 (cleanup): {
        resume;
    }
}

alloc9 (size: 3, align: 1) {
    61 f0 09                                        │ a..
}

alloc8 (size: 3, align: 1) {
    61 f0 09                                        │ a..
}

alloc7 (static: BAZ, size: 16, align: 8) {
    ╾───────alloc3────────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc3 (size: 3, align: 1) {
    61 5c 6e                                        │ a\n
}

alloc6 (static: BAR_FIXED, size: 8, align: 8) {
    ╾───────alloc2────────╼                         │ ╾──────╼
}

alloc2 (size: 3, align: 1) {
    61 f0 09                                        │ a..
}

alloc5 (static: BAR, size: 16, align: 8) {
    ╾───────alloc1────────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc1 (size: 3, align: 1) {
    61 f0 09                                        │ a..
}

alloc4 (static: FOO, size: 1, align: 1) {
    f0                                              │ .
}

promoted[0] in main: &&[u8; 5] = {
    let mut _0: &&[u8; 5];
    let mut _1: &[u8; 5];

    bb0: {
        _1 = const b"a\"##b";
        _0 = &_1;
        return;
    }
}

alloc17 (size: 5, align: 1) {
    61 22 23 23 62                                  │ a"##b
}

promoted[1] in main: &&[u8; 5] = {
    let mut _0: &&[u8; 5];
    let mut _1: &[u8; 5];

    bb0: {
        _1 = const b"a\"##b";
        _0 = &_1;
        return;
    }
}

alloc16 (size: 5, align: 1) {
    61 22 23 23 62                                  │ a"##b
}

promoted[2] in main: &&[u8; 5] = {
    let mut _0: &&[u8; 5];
    let mut _1: &[u8; 5];

    bb0: {
        _1 = const b"a\"##b";
        _0 = &_1;
        return;
    }
}

alloc15 (size: 5, align: 1) {
    61 22 23 23 62                                  │ a"##b
}

promoted[3] in main: &[u8; 5] = {
    let mut _0: &[u8; 5];
    let mut _1: [u8; 5];

    bb0: {
        _1 = [const 97_u8, const 34_u8, const 35_u8, const 35_u8, const 98_u8];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];
    let mut _1: &[u8; 3];

    bb0: {
        _1 = const b"a\\n";
        _0 = &_1;
        return;
    }
}

alloc14 (size: 3, align: 1) {
    61 5c 6e                                        │ a\n
}

promoted[5] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];
    let mut _1: &[u8; 3];

    bb0: {
        _1 = const b"a\\n";
        _0 = &_1;
        return;
    }
}

alloc13 (size: 3, align: 1) {
    61 5c 6e                                        │ a\n
}

promoted[6] in main: &&[u8; 3] = {
    let mut _0: &&[u8; 3];
    let mut _1: &[u8; 3];

    bb0: {
        _1 = const b"a\\n";
        _0 = &_1;
        return;
    }
}

alloc12 (size: 3, align: 1) {
    61 5c 6e                                        │ a\n
}

promoted[7] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];
    let mut _1: [u8; 3];

    bb0: {
        _1 = [const 97_u8, const 92_u8, const 110_u8];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];
    let mut _1: [u8; 3];

    bb0: {
        _1 = [const 97_u8, const 92_u8, const 110_u8];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[u8; 2] = {
    let mut _0: &[u8; 2];
    let mut _1: [u8; 2];

    bb0: {
        _1 = [const 97_u8, const 10_u8];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];
    let mut _1: [u8; 3];

    bb0: {
        _1 = [const 97_u8, const 240_u8, const 9_u8];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &&[u8; 2] = {
    let mut _0: &&[u8; 2];
    let mut _1: &[u8; 2];

    bb0: {
        _1 = const b"ab";
        _0 = &_1;
        return;
    }
}

alloc11 (size: 2, align: 1) {
    61 62                                           │ ab
}

promoted[13] in main: &[u8; 2] = {
    let mut _0: &[u8; 2];
    let mut _1: [u8; 2];

    bb0: {
        _1 = [const 97_u8, const 98_u8];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &&[u8; 9] = {
    let mut _0: &&[u8; 9];
    let mut _1: &[u8; 9];

    bb0: {
        _1 = const b"a\n\r\t\\\'\"\x00\xf0";
        _0 = &_1;
        return;
    }
}

alloc10 (size: 9, align: 1) {
    61 0a 0d 09 5c 27 22 00 f0                      │ a...\'"..
}

promoted[15] in main: &[u8; 9] = {
    let mut _0: &[u8; 9];
    let mut _1: [u8; 9];

    bb0: {
        _1 = [const 97_u8, const 10_u8, const 13_u8, const 9_u8, const 92_u8, const 39_u8, const 34_u8, const 0_u8, const 240_u8];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 240_u8;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 240_u8;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 240_u8;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 34_u8;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 34_u8;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 39_u8;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 39_u8;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 92_u8;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 92_u8;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 9_u8;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 9_u8;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 13_u8;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 13_u8;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 97_u8;
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 97_u8;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
