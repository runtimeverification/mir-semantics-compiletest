// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:10: 5:19>::eq(_1: &N, _2: &N) -> bool {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:10: 5:19
    let mut _3: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
    let mut _4: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _4 = ((*_2).0: u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _0 = Eq(move _3, move _4);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:19: 5:19
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26>::fmt(_1: &N, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
    debug f => _2;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
    let mut _4: &str;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
    let _5: &str;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
    let mut _7: &&u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
    let _8: &&u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
    let _9: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
        _5 = const "N";                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
        _9 = &((*_1).0: u8);             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _8 = &_9;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _7 = _8;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:21: 5:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:26: 5:26
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:28: 5:33>::clone(_1: &N) -> N {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:28: 5:33
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:28: 5:33
    let mut _2: u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
    let mut _3: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
    let _4: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12

    bb0: {
        _4 = &((*_1).0: u8);             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _3 = _4;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _2 = (*_3);                      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:10: 6:12
        _0 = N(move _2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:28: 5:33
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:5:33: 5:33
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:10: 8:19>::eq(_1: &Z, _2: &Z) -> bool {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:10: 8:19
    debug other => _2;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:10: 8:19
    let mut _0: bool;                    // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:10: 8:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:10: 8:19
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:19: 8:19
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26>::fmt(_1: &Z, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
    debug f => _2;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
    let mut _4: &str;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
    let _5: &str;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
        _5 = const "Z";                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:21: 8:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:26: 8:26
    }
}

fn <impl at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:28: 8:33>::clone(_1: &Z) -> Z {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:28: 8:33
    let mut _0: Z;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:28: 8:33

    bb0: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:8:33: 8:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:75:11: 75:11
    let _1: std::option::Option<&[N]>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _2: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _3: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _6: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _7: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: &std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _27: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _42: std::option::Option<&[N]>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _43: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _44: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _45: &[N; 4];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _46: &[N];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _47: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _48: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _49: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _50: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _55: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _56: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _58: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _59: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _60: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _61: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _62: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _63: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _65: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _66: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _67: &std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _68: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _83: std::option::Option<&N>;    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _84: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _85: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _86: &[N; 4];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _88: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _89: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _90: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _91: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _94: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _95: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _96: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _97: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _99: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _100: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _101: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _102: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _103: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _104: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _105: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _106: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _107: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _108: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _109: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _112: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _113: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _114: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _115: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _117: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _118: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _119: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _120: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _121: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _122: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _124: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _125: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _126: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _127: &[N; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _128: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _129: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _130: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _131: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _132: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _135: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _136: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _137: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _138: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _140: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _141: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _142: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _143: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _144: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _145: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _147: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _148: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _149: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _150: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _153: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _154: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _155: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _156: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _158: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _159: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _160: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _161: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _162: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _163: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _165: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _166: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _167: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _168: &[N; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _170: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _171: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _172: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _173: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _176: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _177: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _178: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _179: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _181: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _182: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _183: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _184: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _185: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _186: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _187: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _188: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _189: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _190: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _191: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _194: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _195: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _196: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _197: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _199: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _200: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _201: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _202: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _203: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _204: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _205: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _206: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _207: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _208: &[N; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _209: &[N; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _210: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _211: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _212: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _213: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _214: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _217: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _218: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _219: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _220: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _222: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _223: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _224: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _225: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _226: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _227: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _228: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _229: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _230: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _231: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _232: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _235: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _236: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _237: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _238: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _240: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _241: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _242: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _243: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _244: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _245: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _246: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _247: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _248: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _249: &[N; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _250: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _252: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _253: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _254: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _255: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _258: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _259: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _260: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _261: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _263: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _264: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _265: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _266: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _267: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _268: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _269: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _270: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _271: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _272: &std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _273: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _276: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _277: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _278: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _279: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _281: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _282: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _283: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _284: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _285: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _286: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _287: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _288: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _289: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _290: &[N; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _291: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _292: &[N];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _293: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _294: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _295: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _296: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _299: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _300: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _301: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _302: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _304: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _305: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _306: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _307: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _308: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _309: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _310: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _311: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _312: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _313: &std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _314: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _317: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _319: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _320: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _322: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _323: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _324: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _325: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _326: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _327: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _328: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _329: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _330: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _331: &[N; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _332: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _334: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _335: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _336: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _337: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _340: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _341: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _342: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _343: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _345: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _346: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _347: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _348: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _349: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _350: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _351: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _352: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _353: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _354: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _355: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _358: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _359: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _360: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _361: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _363: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _364: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _365: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _366: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _367: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _368: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _369: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _370: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _371: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _372: &[N; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _373: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _374: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _375: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _376: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _377: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _378: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _381: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _382: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _383: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _384: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _386: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _387: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _388: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _389: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _390: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _391: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _392: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _393: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _394: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _395: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _396: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _399: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _400: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _401: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _402: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _404: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _405: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _406: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _407: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _408: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _409: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _410: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _411: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _412: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _413: &[N; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _414: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _416: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _417: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _418: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _419: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _422: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _423: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _424: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _425: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _427: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _428: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _429: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _430: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _431: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _432: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _433: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _434: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _435: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _436: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _437: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _440: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _441: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _442: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _443: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _445: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _446: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _447: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _448: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _449: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _450: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _451: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _452: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _453: &[N];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _454: &[N; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _455: &[N; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _456: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _457: &N;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _458: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _459: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _460: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _463: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _464: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _465: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _466: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _468: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _469: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _470: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _471: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _472: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _473: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _474: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _475: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _476: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _477: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _478: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _481: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _482: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _483: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _484: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _486: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _487: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _488: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _489: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _490: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _491: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _492: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _493: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _495: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _496: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _497: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _500: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _501: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _502: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _503: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _505: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _506: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _507: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _508: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _509: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _510: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _511: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _512: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _513: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _514: &std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _515: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _518: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _519: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _520: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _521: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _523: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _524: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _525: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _526: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _527: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _528: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _529: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _530: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let _531: &[N];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    let mut _532: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _533: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _534: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _537: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _538: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _539: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _540: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _542: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _543: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _544: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _545: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _546: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _547: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _548: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _549: (&std::option::Option<&[N]>, &std::option::Option<&[N]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _550: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _551: &std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _552: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _555: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _556: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _557: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _558: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _560: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _561: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _562: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _563: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _564: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _565: &std::option::Option<&[N]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _566: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _567: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _569: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _570: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _571: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _574: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _575: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _576: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _577: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _579: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _580: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _581: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _582: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _583: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _584: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _585: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _586: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _587: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _588: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _589: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _592: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _593: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _594: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _595: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _597: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _598: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _599: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _600: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _601: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _602: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _603: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _604: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let _605: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    let mut _606: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _607: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _608: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _611: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _612: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _613: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _614: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _616: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _617: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _618: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _619: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _620: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _621: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _622: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _623: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _624: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _625: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _626: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _629: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _630: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _631: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _632: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _634: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _635: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _636: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _637: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _638: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _639: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _640: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _641: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _643: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _644: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _645: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _648: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _649: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _650: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _651: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _653: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _654: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _655: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _656: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _657: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _658: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _659: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _660: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _661: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _662: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _663: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _666: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _667: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _668: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _669: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _671: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _672: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _673: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _674: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _675: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _676: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _677: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _678: std::option::Option<&N>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let _679: &N;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    let mut _680: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _681: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _682: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _685: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _686: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _687: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _688: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _690: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _691: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _692: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _693: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _694: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _695: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _696: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _697: (&std::option::Option<&N>, &std::option::Option<&N>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _698: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _699: &std::option::Option<&N>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _700: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _703: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _704: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _705: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _706: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _708: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _709: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _710: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _711: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _712: &std::option::Option<&N>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _713: &std::option::Option<&N>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _714: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _715: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _716: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _717: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _718: &[Z; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _720: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _721: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _722: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _723: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _726: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _727: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _728: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _729: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _731: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _732: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _733: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _734: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _735: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _736: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _737: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _738: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _739: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _740: &std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _741: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _744: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _745: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _746: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _747: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _749: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _750: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _751: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _752: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _753: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _754: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _755: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _756: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _757: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _758: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _759: &[Z; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _760: &[Z];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _761: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _762: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _763: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _764: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _767: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _768: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _769: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _770: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _772: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _773: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _774: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _775: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _776: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _777: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _778: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _779: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _780: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _781: &std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _782: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _785: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _786: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _787: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _788: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _790: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _791: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _792: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _793: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _794: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _795: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _796: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _797: std::option::Option<&Z>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _798: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _799: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _800: &[Z; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _802: &Z;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _803: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _804: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _805: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _808: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _809: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _810: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _811: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _813: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _814: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _815: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _816: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _817: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _818: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _819: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _820: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _821: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _822: &std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _823: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _826: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _827: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _828: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _829: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _831: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _832: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _833: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _834: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _835: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _836: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _837: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _838: std::option::Option<&Z>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _839: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _840: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _841: &[Z; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _842: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _843: &Z;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _844: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _845: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _846: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _849: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _850: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _851: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _852: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _854: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _855: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _856: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _857: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _858: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _859: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _860: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _861: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _862: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _863: &std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _864: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _867: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _868: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _869: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _870: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _872: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _873: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _874: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _875: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _876: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _877: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _878: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _879: std::option::Option<&Z>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _880: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _881: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _882: &[Z; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _884: &Z;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _885: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _886: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _887: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _890: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _891: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _892: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _893: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _895: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _896: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _897: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _898: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _899: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _900: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _901: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _902: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _903: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _904: &std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _905: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _908: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _909: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _910: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _911: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _913: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _914: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _915: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _916: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _917: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _918: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _919: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _920: std::option::Option<&Z>;   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _921: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _922: &[Z; 4];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _923: &[Z; 4];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _924: &Z;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _925: &Z;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _926: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _927: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _928: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _931: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _932: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _933: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _934: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _936: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _937: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _938: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _939: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _940: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _941: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _942: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _943: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _944: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _945: &std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _946: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _949: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _950: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _951: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _952: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _954: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _955: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _956: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _957: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _958: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _959: &std::option::Option<&Z>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _960: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _961: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _962: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _963: &[Z; 2];               // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _964: &[Z; 2];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _966: &[Z];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _967: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _968: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _969: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _972: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _973: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _974: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _975: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _977: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _978: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _979: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _980: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _981: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _982: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _983: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _984: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _985: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _986: &std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _987: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _990: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _991: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _992: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _993: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _995: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _996: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _997: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _998: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _999: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1000: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1001: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1002: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1003: &[Z];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1004: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _1005: &[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _1006: &[Z];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _1007: &[Z];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _1008: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1009: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1010: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1013: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1014: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1015: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1016: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1018: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1019: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1020: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1021: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1022: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1023: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1024: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1025: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1026: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1027: &std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1028: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1031: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1032: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1033: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1034: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1036: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1037: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1038: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1039: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1040: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1041: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1042: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1043: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1044: &[Z];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _1045: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _1046: &[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1048: &Z;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _1049: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1050: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1051: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1054: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1055: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1056: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1057: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1059: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1060: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1061: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1062: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1063: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1064: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1065: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1066: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1067: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1068: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1069: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1072: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1073: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1074: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1075: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1077: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1078: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1079: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1080: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1081: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1082: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1083: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1084: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1085: &[Z];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1086: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _1087: &[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _1088: &Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _1089: &Z;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _1090: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1091: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1092: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1095: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1096: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1097: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1098: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1100: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1101: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1102: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1103: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1104: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1105: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1106: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1107: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1108: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1109: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1110: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1113: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1114: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1115: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1116: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1118: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1119: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1120: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1121: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1122: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1123: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1124: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1125: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1126: &[Z];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _1127: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _1128: &[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1130: &Z;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _1131: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1132: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1133: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1136: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1137: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1138: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1139: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1141: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1142: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1143: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1144: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1145: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1146: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1147: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1148: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1149: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1150: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1151: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1154: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1155: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1156: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1157: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1159: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1160: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1161: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1162: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1163: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1164: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1165: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1166: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1167: &[Z];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1168: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _1169: &[Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _1170: &Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _1171: &Z;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _1172: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1173: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1174: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1177: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1178: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1179: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1180: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1182: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1183: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1184: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1185: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1186: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1187: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1188: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1189: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1190: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1191: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1192: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1195: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1196: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1197: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1198: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1200: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1201: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1202: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1203: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1204: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1205: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1206: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1207: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1209: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1210: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1211: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1214: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1215: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1216: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1217: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1219: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1220: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1221: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1222: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1223: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1224: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1225: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1226: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1227: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1228: &std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1229: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1232: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1233: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1234: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1235: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1237: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1238: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1239: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1240: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1241: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1242: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1243: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1244: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let _1245: &[Z];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    let mut _1246: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1247: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1248: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1251: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1252: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1253: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1254: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1256: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1257: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1258: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1259: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1260: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1261: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1262: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1263: (&std::option::Option<&[Z]>, &std::option::Option<&[Z]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1264: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1265: &std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1266: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1269: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1270: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1271: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1272: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1274: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1275: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1276: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1277: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1278: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1279: &std::option::Option<&[Z]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1280: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1281: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1283: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1284: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1285: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1288: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1289: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1290: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1291: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1293: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1294: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1295: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1296: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1297: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1298: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1299: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1300: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1301: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1302: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1303: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1306: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1307: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1308: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1309: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1311: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1312: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1313: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1314: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1315: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1316: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1317: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1318: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let _1319: &Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    let mut _1320: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1321: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1322: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1325: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1326: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1327: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1328: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1330: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1331: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1332: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1333: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1334: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1335: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1336: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1337: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1338: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1339: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1340: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1343: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1344: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1345: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1346: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1348: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1349: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1350: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1351: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1352: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1353: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1354: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1355: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1357: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1358: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1359: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1362: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1363: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1364: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1365: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1367: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1368: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1369: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1370: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1371: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1372: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1373: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1374: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1375: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1376: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1377: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1380: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1381: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1382: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1383: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1385: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1386: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1387: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1388: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1389: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1390: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1391: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1392: std::option::Option<&Z>;  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let _1393: &Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    let mut _1394: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1395: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1396: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1399: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1400: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1401: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1402: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1404: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1405: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1406: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1407: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1408: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1409: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1410: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1411: (&std::option::Option<&Z>, &std::option::Option<&Z>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1412: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1413: &std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1414: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1417: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1418: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1419: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1420: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1422: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1423: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1424: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1425: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1426: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1427: &std::option::Option<&Z>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1428: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1429: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1430: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _1431: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _1432: &[N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1434: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    let mut _1435: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1436: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1437: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1440: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1441: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1442: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1443: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1445: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1446: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1447: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1448: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1449: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1450: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1451: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1452: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1453: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1454: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1455: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1458: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1459: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1460: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1461: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1463: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1464: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1465: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1466: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1467: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1468: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1469: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1470: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1471: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1472: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _1473: &[N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _1474: &u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    let mut _1475: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    let mut _1476: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1477: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1478: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1481: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1482: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1483: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1484: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1486: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1487: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1488: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1489: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1490: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1491: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1492: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1493: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1494: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1495: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1496: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1499: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1500: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1501: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1502: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1504: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1505: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1506: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1507: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1508: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1509: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1510: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1511: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1512: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _1513: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _1514: &[N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1516: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    let mut _1517: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1518: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1519: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1522: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1523: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1524: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1525: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1527: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1528: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1529: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1530: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1531: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1532: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1533: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1534: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1535: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1536: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1537: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1540: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1541: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1542: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1543: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1545: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1546: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1547: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1548: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1549: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1550: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1551: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1552: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1553: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1554: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _1555: &[N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _1556: &u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    let mut _1557: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    let mut _1558: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1559: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1560: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1563: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1564: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1565: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1566: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1568: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1569: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1570: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1571: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1572: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1573: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1574: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1575: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1576: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1577: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1578: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1581: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1582: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1583: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1584: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1586: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1587: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1588: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1589: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1590: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1591: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1592: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1593: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1594: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _1595: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _1596: &[N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1598: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    let mut _1599: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1600: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1601: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1604: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1605: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1606: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1607: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1609: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1610: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1611: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1612: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1613: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1614: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1615: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1616: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1617: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1618: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1619: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1622: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1623: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1624: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1625: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1627: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1628: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1629: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1630: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1631: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1632: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1633: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1634: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1635: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1636: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _1637: &[N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _1638: &u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    let mut _1639: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    let mut _1640: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1641: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1642: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1645: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1646: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1647: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1648: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1650: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1651: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1652: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1653: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1654: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1655: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1656: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1657: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1658: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1659: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1660: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1663: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1664: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1665: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1666: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1668: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1669: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1670: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1671: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1672: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1673: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1674: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1675: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1676: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _1677: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _1678: &[N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1680: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    let mut _1681: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1682: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1683: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1686: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1687: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1688: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1689: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1691: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1692: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1693: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1694: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1695: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1696: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1697: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1698: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1699: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1700: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1701: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1704: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1705: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1706: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1707: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1709: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1710: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1711: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1712: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1713: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1714: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1715: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _1716: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
    let mut _1717: &[N];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _1718: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _1719: &[N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _1720: &u8;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    let mut _1721: &u8;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    let mut _1722: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1723: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1724: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1727: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1728: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1729: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1730: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1732: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1733: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1734: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1735: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1736: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1737: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1738: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1739: (&std::option::Option<&u8>, &std::option::Option<&u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _1740: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _1741: &std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
    let mut _1742: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1745: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _1746: bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _1747: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _1748: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _1750: !;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _1751: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _1752: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _1753: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _1754: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _1755: &std::option::Option<&u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _1756: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _1758: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1762: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1766: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1770: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1780: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1784: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1788: &[Z; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1792: &[Z; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1796: &[Z; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1800: &[Z; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1810: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1814: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1818: &[N; 2];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1822: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1826: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1830: &[N; 4];              // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug runtime_eval => _1;        // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _10: &std::option::Option<&[N]>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &std::option::Option<&[N]>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _28: &std::option::Option<&[N]>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _29: &std::option::Option<&[N]>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1831: &std::option::Option<&[N]>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 3 {
            debug left_val => _10;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _16;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _28;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _29;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _34: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _34;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        debug x => _5;                   // in scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _5: &[N];                    // in scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _1832: &[N; 4];          // in scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
    scope 7 {
        debug runtime_eval => _42;       // in scope 7 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _51: &std::option::Option<&[N]>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _52: &std::option::Option<&[N]>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _69: &std::option::Option<&[N]>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _70: &std::option::Option<&[N]>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1829: &std::option::Option<&[N]>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 9 {
            debug left_val => _51;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _52;      // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _57: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 10 {
                debug kind => _57;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 11 {
            debug left_val => _69;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _70;      // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _75: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 12 {
                debug kind => _75;       // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 8 {
        debug x => _46;                  // in scope 8 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }
    scope 13 {
        debug runtime_eval => _83;       // in scope 13 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _92: &std::option::Option<&N>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _93: &std::option::Option<&N>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _110: &std::option::Option<&N>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _111: &std::option::Option<&N>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1827: &std::option::Option<&N>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 15 {
            debug left_val => _92;       // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _93;      // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _98: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 16 {
                debug kind => _98;       // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 17 {
            debug left_val => _110;      // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _111;     // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _116: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 18 {
                debug kind => _116;      // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 14 {
        debug x => _87;                  // in scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _87: &N;                     // in scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _1828: &[N; 4];          // in scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
    scope 19 {
        debug runtime_eval => _124;      // in scope 19 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _133: &std::option::Option<&N>; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _134: &std::option::Option<&N>; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _151: &std::option::Option<&N>; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _152: &std::option::Option<&N>; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1825: &std::option::Option<&N>; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 21 {
            debug left_val => _133;      // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _134;     // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _139: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 22 {
                debug kind => _139;      // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 23 {
            debug left_val => _151;      // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _152;     // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _157: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 24 {
                debug kind => _157;      // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 20 {
        debug x => _128;                 // in scope 20 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }
    scope 25 {
        debug runtime_eval => _165;      // in scope 25 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _174: &std::option::Option<&N>; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _175: &std::option::Option<&N>; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _192: &std::option::Option<&N>; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _193: &std::option::Option<&N>; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1823: &std::option::Option<&N>; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 27 {
            debug left_val => _174;      // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _175;     // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _180: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 28 {
                debug kind => _180;      // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 29 {
            debug left_val => _192;      // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _193;     // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _198: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 30 {
                debug kind => _198;      // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 26 {
        debug x => _169;                 // in scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _169: &N;                    // in scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _1824: &[N; 4];          // in scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
    scope 31 {
        debug runtime_eval => _206;      // in scope 31 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _215: &std::option::Option<&N>; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _216: &std::option::Option<&N>; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _233: &std::option::Option<&N>; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _234: &std::option::Option<&N>; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1821: &std::option::Option<&N>; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 33 {
            debug left_val => _215;      // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _216;     // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _221: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 34 {
                debug kind => _221;      // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 35 {
            debug left_val => _233;      // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _234;     // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _239: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 36 {
                debug kind => _239;      // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 32 {
        debug x => _210;                 // in scope 32 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }
    scope 37 {
        debug runtime_eval => _247;      // in scope 37 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _256: &std::option::Option<&[N]>; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _257: &std::option::Option<&[N]>; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _274: &std::option::Option<&[N]>; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _275: &std::option::Option<&[N]>; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1819: &std::option::Option<&[N]>; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 39 {
            debug left_val => _256;      // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _257;     // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _262: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 40 {
                debug kind => _262;      // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 41 {
            debug left_val => _274;      // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _275;     // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _280: core::panicking::AssertKind; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 42 {
                debug kind => _280;      // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 38 {
        debug x => _251;                 // in scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _251: &[N];                  // in scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _1820: &[N; 2];          // in scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
    scope 43 {
        debug runtime_eval => _288;      // in scope 43 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _297: &std::option::Option<&[N]>; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _298: &std::option::Option<&[N]>; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _315: &std::option::Option<&[N]>; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _316: &std::option::Option<&[N]>; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1817: &std::option::Option<&[N]>; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 45 {
            debug left_val => _297;      // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _298;     // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _303: core::panicking::AssertKind; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 46 {
                debug kind => _303;      // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 47 {
            debug left_val => _315;      // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _316;     // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _321: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 48 {
                debug kind => _321;      // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 44 {
        debug x => _292;                 // in scope 44 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }
    scope 49 {
        debug runtime_eval => _329;      // in scope 49 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _338: &std::option::Option<&N>; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _339: &std::option::Option<&N>; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _356: &std::option::Option<&N>; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _357: &std::option::Option<&N>; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1815: &std::option::Option<&N>; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 51 {
            debug left_val => _338;      // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _339;     // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _344: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 52 {
                debug kind => _344;      // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 53 {
            debug left_val => _356;      // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _357;     // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _362: core::panicking::AssertKind; // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 54 {
                debug kind => _362;      // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 50 {
        debug x => _333;                 // in scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _333: &N;                    // in scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _1816: &[N; 2];          // in scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
    scope 55 {
        debug runtime_eval => _370;      // in scope 55 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _379: &std::option::Option<&N>; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _380: &std::option::Option<&N>; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _397: &std::option::Option<&N>; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _398: &std::option::Option<&N>; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1813: &std::option::Option<&N>; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 57 {
            debug left_val => _379;      // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _380;     // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _385: core::panicking::AssertKind; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 58 {
                debug kind => _385;      // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 59 {
            debug left_val => _397;      // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _398;     // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _403: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 60 {
                debug kind => _403;      // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 56 {
        debug x => _374;                 // in scope 56 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }
    scope 61 {
        debug runtime_eval => _411;      // in scope 61 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _420: &std::option::Option<&N>; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _421: &std::option::Option<&N>; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _438: &std::option::Option<&N>; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _439: &std::option::Option<&N>; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1811: &std::option::Option<&N>; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 63 {
            debug left_val => _420;      // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _421;     // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _426: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 64 {
                debug kind => _426;      // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 65 {
            debug left_val => _438;      // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _439;     // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _444: core::panicking::AssertKind; // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 66 {
                debug kind => _444;      // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 62 {
        debug x => _415;                 // in scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _415: &N;                    // in scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _1812: &[N; 2];          // in scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
    scope 67 {
        debug runtime_eval => _452;      // in scope 67 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _461: &std::option::Option<&N>; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _462: &std::option::Option<&N>; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _479: &std::option::Option<&N>; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _480: &std::option::Option<&N>; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1809: &std::option::Option<&N>; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 69 {
            debug left_val => _461;      // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _462;     // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _467: core::panicking::AssertKind; // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 70 {
                debug kind => _467;      // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 71 {
            debug left_val => _479;      // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _480;     // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _485: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 72 {
                debug kind => _485;      // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 68 {
        debug x => _456;                 // in scope 68 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }
    scope 73 {
        debug runtime_eval => _493;      // in scope 73 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _498: &std::option::Option<&[N]>; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _499: &std::option::Option<&[N]>; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _516: &std::option::Option<&[N]>; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _517: &std::option::Option<&[N]>; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1808: &std::option::Option<&[N]>; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 75 {
            debug left_val => _498;      // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _499;     // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _504: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 76 {
                debug kind => _504;      // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 77 {
            debug left_val => _516;      // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _517;     // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _522: core::panicking::AssertKind; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 78 {
                debug kind => _522;      // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 74 {
        debug x => _494;                 // in scope 74 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _494: &[N];                  // in scope 74 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }
    scope 79 {
        debug runtime_eval => _530;      // in scope 79 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _535: &std::option::Option<&[N]>; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _536: &std::option::Option<&[N]>; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _553: &std::option::Option<&[N]>; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _554: &std::option::Option<&[N]>; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1807: &std::option::Option<&[N]>; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 81 {
            debug left_val => _535;      // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _536;     // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _541: core::panicking::AssertKind; // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 82 {
                debug kind => _541;      // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 83 {
            debug left_val => _553;      // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _554;     // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _559: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 84 {
                debug kind => _559;      // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 80 {
        debug x => _531;                 // in scope 80 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }
    scope 85 {
        debug runtime_eval => _567;      // in scope 85 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _572: &std::option::Option<&N>; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _573: &std::option::Option<&N>; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _590: &std::option::Option<&N>; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _591: &std::option::Option<&N>; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1806: &std::option::Option<&N>; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 87 {
            debug left_val => _572;      // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _573;     // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _578: core::panicking::AssertKind; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 88 {
                debug kind => _578;      // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 89 {
            debug left_val => _590;      // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _591;     // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _596: core::panicking::AssertKind; // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 90 {
                debug kind => _596;      // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 86 {
        debug x => _568;                 // in scope 86 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _568: &N;                    // in scope 86 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }
    scope 91 {
        debug runtime_eval => _604;      // in scope 91 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _609: &std::option::Option<&N>; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _610: &std::option::Option<&N>; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _627: &std::option::Option<&N>; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _628: &std::option::Option<&N>; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1805: &std::option::Option<&N>; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 93 {
            debug left_val => _609;      // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _610;     // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _615: core::panicking::AssertKind; // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 94 {
                debug kind => _615;      // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 95 {
            debug left_val => _627;      // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _628;     // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _633: core::panicking::AssertKind; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 96 {
                debug kind => _633;      // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 92 {
        debug x => _605;                 // in scope 92 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }
    scope 97 {
        debug runtime_eval => _641;      // in scope 97 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _646: &std::option::Option<&N>; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _647: &std::option::Option<&N>; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _664: &std::option::Option<&N>; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _665: &std::option::Option<&N>; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1804: &std::option::Option<&N>; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 99 {
            debug left_val => _646;      // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _647;     // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _652: core::panicking::AssertKind; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 100 {
                debug kind => _652;      // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 101 {
            debug left_val => _664;      // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _665;     // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _670: core::panicking::AssertKind; // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 102 {
                debug kind => _670;      // in scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 98 {
        debug x => _642;                 // in scope 98 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _642: &N;                    // in scope 98 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }
    scope 103 {
        debug runtime_eval => _678;      // in scope 103 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _683: &std::option::Option<&N>; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _684: &std::option::Option<&N>; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _701: &std::option::Option<&N>; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _702: &std::option::Option<&N>; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1803: &std::option::Option<&N>; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 105 {
            debug left_val => _683;      // in scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _684;     // in scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _689: core::panicking::AssertKind; // in scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 106 {
                debug kind => _689;      // in scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 107 {
            debug left_val => _701;      // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _702;     // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _707: core::panicking::AssertKind; // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 108 {
                debug kind => _707;      // in scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 104 {
        debug x => _679;                 // in scope 104 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }
    scope 109 {
        debug runtime_eval => _715;      // in scope 109 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _724: &std::option::Option<&[Z]>; // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _725: &std::option::Option<&[Z]>; // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _742: &std::option::Option<&[Z]>; // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _743: &std::option::Option<&[Z]>; // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1801: &std::option::Option<&[Z]>; // in scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 111 {
            debug left_val => _724;      // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _725;     // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _730: core::panicking::AssertKind; // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 112 {
                debug kind => _730;      // in scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 113 {
            debug left_val => _742;      // in scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _743;     // in scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _748: core::panicking::AssertKind; // in scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 114 {
                debug kind => _748;      // in scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 110 {
        debug x => _719;                 // in scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _719: &[Z];                  // in scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _1802: &[Z; 4];          // in scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
    scope 115 {
        debug runtime_eval => _756;      // in scope 115 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _765: &std::option::Option<&[Z]>; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _766: &std::option::Option<&[Z]>; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _783: &std::option::Option<&[Z]>; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _784: &std::option::Option<&[Z]>; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1799: &std::option::Option<&[Z]>; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 117 {
            debug left_val => _765;      // in scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _766;     // in scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _771: core::panicking::AssertKind; // in scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 118 {
                debug kind => _771;      // in scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 119 {
            debug left_val => _783;      // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _784;     // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _789: core::panicking::AssertKind; // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 120 {
                debug kind => _789;      // in scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 116 {
        debug x => _760;                 // in scope 116 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }
    scope 121 {
        debug runtime_eval => _797;      // in scope 121 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _806: &std::option::Option<&Z>; // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _807: &std::option::Option<&Z>; // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _824: &std::option::Option<&Z>; // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _825: &std::option::Option<&Z>; // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1797: &std::option::Option<&Z>; // in scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 123 {
            debug left_val => _806;      // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _807;     // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _812: core::panicking::AssertKind; // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 124 {
                debug kind => _812;      // in scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 125 {
            debug left_val => _824;      // in scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _825;     // in scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _830: core::panicking::AssertKind; // in scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 126 {
                debug kind => _830;      // in scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 122 {
        debug x => _801;                 // in scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _801: &Z;                    // in scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _1798: &[Z; 4];          // in scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
    scope 127 {
        debug runtime_eval => _838;      // in scope 127 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _847: &std::option::Option<&Z>; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _848: &std::option::Option<&Z>; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _865: &std::option::Option<&Z>; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _866: &std::option::Option<&Z>; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1795: &std::option::Option<&Z>; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 129 {
            debug left_val => _847;      // in scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _848;     // in scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _853: core::panicking::AssertKind; // in scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 130 {
                debug kind => _853;      // in scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 131 {
            debug left_val => _865;      // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _866;     // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _871: core::panicking::AssertKind; // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 132 {
                debug kind => _871;      // in scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 128 {
        debug x => _842;                 // in scope 128 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }
    scope 133 {
        debug runtime_eval => _879;      // in scope 133 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _888: &std::option::Option<&Z>; // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _889: &std::option::Option<&Z>; // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _906: &std::option::Option<&Z>; // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _907: &std::option::Option<&Z>; // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1793: &std::option::Option<&Z>; // in scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 135 {
            debug left_val => _888;      // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _889;     // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _894: core::panicking::AssertKind; // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 136 {
                debug kind => _894;      // in scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 137 {
            debug left_val => _906;      // in scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _907;     // in scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _912: core::panicking::AssertKind; // in scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 138 {
                debug kind => _912;      // in scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 134 {
        debug x => _883;                 // in scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _883: &Z;                    // in scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _1794: &[Z; 4];          // in scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
    scope 139 {
        debug runtime_eval => _920;      // in scope 139 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _929: &std::option::Option<&Z>; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _930: &std::option::Option<&Z>; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _947: &std::option::Option<&Z>; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _948: &std::option::Option<&Z>; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1791: &std::option::Option<&Z>; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 141 {
            debug left_val => _929;      // in scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _930;     // in scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _935: core::panicking::AssertKind; // in scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 142 {
                debug kind => _935;      // in scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 143 {
            debug left_val => _947;      // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _948;     // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _953: core::panicking::AssertKind; // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 144 {
                debug kind => _953;      // in scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 140 {
        debug x => _924;                 // in scope 140 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }
    scope 145 {
        debug runtime_eval => _961;      // in scope 145 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _970: &std::option::Option<&[Z]>; // in scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _971: &std::option::Option<&[Z]>; // in scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _988: &std::option::Option<&[Z]>; // in scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _989: &std::option::Option<&[Z]>; // in scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1789: &std::option::Option<&[Z]>; // in scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 147 {
            debug left_val => _970;      // in scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _971;     // in scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _976: core::panicking::AssertKind; // in scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 148 {
                debug kind => _976;      // in scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 149 {
            debug left_val => _988;      // in scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _989;     // in scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _994: core::panicking::AssertKind; // in scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 150 {
                debug kind => _994;      // in scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 146 {
        debug x => _965;                 // in scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _965: &[Z];                  // in scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _1790: &[Z; 2];          // in scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
    scope 151 {
        debug runtime_eval => _1002;     // in scope 151 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1011: &std::option::Option<&[Z]>; // in scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1012: &std::option::Option<&[Z]>; // in scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1029: &std::option::Option<&[Z]>; // in scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1030: &std::option::Option<&[Z]>; // in scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1787: &std::option::Option<&[Z]>; // in scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 153 {
            debug left_val => _1011;     // in scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1012;    // in scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1017: core::panicking::AssertKind; // in scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 154 {
                debug kind => _1017;     // in scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 155 {
            debug left_val => _1029;     // in scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1030;    // in scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1035: core::panicking::AssertKind; // in scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 156 {
                debug kind => _1035;     // in scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 152 {
        debug x => _1006;                // in scope 152 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }
    scope 157 {
        debug runtime_eval => _1043;     // in scope 157 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1052: &std::option::Option<&Z>; // in scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1053: &std::option::Option<&Z>; // in scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1070: &std::option::Option<&Z>; // in scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1071: &std::option::Option<&Z>; // in scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1785: &std::option::Option<&Z>; // in scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 159 {
            debug left_val => _1052;     // in scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1053;    // in scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1058: core::panicking::AssertKind; // in scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 160 {
                debug kind => _1058;     // in scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 161 {
            debug left_val => _1070;     // in scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1071;    // in scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1076: core::panicking::AssertKind; // in scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 162 {
                debug kind => _1076;     // in scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 158 {
        debug x => _1047;                // in scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _1047: &Z;                   // in scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _1786: &[Z; 2];          // in scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
    scope 163 {
        debug runtime_eval => _1084;     // in scope 163 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1093: &std::option::Option<&Z>; // in scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1094: &std::option::Option<&Z>; // in scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1111: &std::option::Option<&Z>; // in scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1112: &std::option::Option<&Z>; // in scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1783: &std::option::Option<&Z>; // in scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 165 {
            debug left_val => _1093;     // in scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1094;    // in scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1099: core::panicking::AssertKind; // in scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 166 {
                debug kind => _1099;     // in scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 167 {
            debug left_val => _1111;     // in scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1112;    // in scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1117: core::panicking::AssertKind; // in scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 168 {
                debug kind => _1117;     // in scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 164 {
        debug x => _1088;                // in scope 164 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }
    scope 169 {
        debug runtime_eval => _1125;     // in scope 169 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1134: &std::option::Option<&Z>; // in scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1135: &std::option::Option<&Z>; // in scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1152: &std::option::Option<&Z>; // in scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1153: &std::option::Option<&Z>; // in scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1781: &std::option::Option<&Z>; // in scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 171 {
            debug left_val => _1134;     // in scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1135;    // in scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1140: core::panicking::AssertKind; // in scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 172 {
                debug kind => _1140;     // in scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 173 {
            debug left_val => _1152;     // in scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1153;    // in scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1158: core::panicking::AssertKind; // in scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 174 {
                debug kind => _1158;     // in scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 170 {
        debug x => _1129;                // in scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _1129: &Z;                   // in scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _1782: &[Z; 2];          // in scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
    scope 175 {
        debug runtime_eval => _1166;     // in scope 175 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1175: &std::option::Option<&Z>; // in scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1176: &std::option::Option<&Z>; // in scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1193: &std::option::Option<&Z>; // in scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1194: &std::option::Option<&Z>; // in scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1779: &std::option::Option<&Z>; // in scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 177 {
            debug left_val => _1175;     // in scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1176;    // in scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1181: core::panicking::AssertKind; // in scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 178 {
                debug kind => _1181;     // in scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 179 {
            debug left_val => _1193;     // in scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1194;    // in scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1199: core::panicking::AssertKind; // in scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 180 {
                debug kind => _1199;     // in scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 176 {
        debug x => _1170;                // in scope 176 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }
    scope 181 {
        debug runtime_eval => _1207;     // in scope 181 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1212: &std::option::Option<&[Z]>; // in scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1213: &std::option::Option<&[Z]>; // in scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1230: &std::option::Option<&[Z]>; // in scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1231: &std::option::Option<&[Z]>; // in scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1778: &std::option::Option<&[Z]>; // in scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 183 {
            debug left_val => _1212;     // in scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1213;    // in scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1218: core::panicking::AssertKind; // in scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 184 {
                debug kind => _1218;     // in scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 185 {
            debug left_val => _1230;     // in scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1231;    // in scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1236: core::panicking::AssertKind; // in scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 186 {
                debug kind => _1236;     // in scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 182 {
        debug x => _1208;                // in scope 182 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _1208: &[Z];                 // in scope 182 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }
    scope 187 {
        debug runtime_eval => _1244;     // in scope 187 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1249: &std::option::Option<&[Z]>; // in scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1250: &std::option::Option<&[Z]>; // in scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1267: &std::option::Option<&[Z]>; // in scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1268: &std::option::Option<&[Z]>; // in scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1777: &std::option::Option<&[Z]>; // in scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 189 {
            debug left_val => _1249;     // in scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1250;    // in scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1255: core::panicking::AssertKind; // in scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 190 {
                debug kind => _1255;     // in scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 191 {
            debug left_val => _1267;     // in scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1268;    // in scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1273: core::panicking::AssertKind; // in scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 192 {
                debug kind => _1273;     // in scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 188 {
        debug x => _1245;                // in scope 188 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }
    scope 193 {
        debug runtime_eval => _1281;     // in scope 193 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1286: &std::option::Option<&Z>; // in scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1287: &std::option::Option<&Z>; // in scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1304: &std::option::Option<&Z>; // in scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1305: &std::option::Option<&Z>; // in scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1776: &std::option::Option<&Z>; // in scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 195 {
            debug left_val => _1286;     // in scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1287;    // in scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1292: core::panicking::AssertKind; // in scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 196 {
                debug kind => _1292;     // in scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 197 {
            debug left_val => _1304;     // in scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1305;    // in scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1310: core::panicking::AssertKind; // in scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 198 {
                debug kind => _1310;     // in scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 194 {
        debug x => _1282;                // in scope 194 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _1282: &Z;                   // in scope 194 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }
    scope 199 {
        debug runtime_eval => _1318;     // in scope 199 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1323: &std::option::Option<&Z>; // in scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1324: &std::option::Option<&Z>; // in scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1341: &std::option::Option<&Z>; // in scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1342: &std::option::Option<&Z>; // in scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1775: &std::option::Option<&Z>; // in scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 201 {
            debug left_val => _1323;     // in scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1324;    // in scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1329: core::panicking::AssertKind; // in scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 202 {
                debug kind => _1329;     // in scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 203 {
            debug left_val => _1341;     // in scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1342;    // in scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1347: core::panicking::AssertKind; // in scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 204 {
                debug kind => _1347;     // in scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 200 {
        debug x => _1319;                // in scope 200 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }
    scope 205 {
        debug runtime_eval => _1355;     // in scope 205 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1360: &std::option::Option<&Z>; // in scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1361: &std::option::Option<&Z>; // in scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1378: &std::option::Option<&Z>; // in scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1379: &std::option::Option<&Z>; // in scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1774: &std::option::Option<&Z>; // in scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 207 {
            debug left_val => _1360;     // in scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1361;    // in scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1366: core::panicking::AssertKind; // in scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 208 {
                debug kind => _1366;     // in scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 209 {
            debug left_val => _1378;     // in scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1379;    // in scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1384: core::panicking::AssertKind; // in scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 210 {
                debug kind => _1384;     // in scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 206 {
        debug x => _1356;                // in scope 206 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _1356: &Z;                   // in scope 206 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }
    scope 211 {
        debug runtime_eval => _1392;     // in scope 211 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1397: &std::option::Option<&Z>; // in scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1398: &std::option::Option<&Z>; // in scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1415: &std::option::Option<&Z>; // in scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1416: &std::option::Option<&Z>; // in scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1773: &std::option::Option<&Z>; // in scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 213 {
            debug left_val => _1397;     // in scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1398;    // in scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1403: core::panicking::AssertKind; // in scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 214 {
                debug kind => _1403;     // in scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 215 {
            debug left_val => _1415;     // in scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1416;    // in scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1421: core::panicking::AssertKind; // in scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 216 {
                debug kind => _1421;     // in scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 212 {
        debug x => _1393;                // in scope 212 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }
    scope 217 {
        debug runtime_eval => _1429;     // in scope 217 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1438: &std::option::Option<&u8>; // in scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1439: &std::option::Option<&u8>; // in scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1456: &std::option::Option<&u8>; // in scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1457: &std::option::Option<&u8>; // in scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1771: &std::option::Option<&u8>; // in scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 219 {
            debug left_val => _1438;     // in scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1439;    // in scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1444: core::panicking::AssertKind; // in scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 220 {
                debug kind => _1444;     // in scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 221 {
            debug left_val => _1456;     // in scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1457;    // in scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1462: core::panicking::AssertKind; // in scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 222 {
                debug kind => _1462;     // in scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 218 {
        debug x => _1433;                // in scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let _1433: &u8;                  // in scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let mut _1772: &[N; 4];          // in scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
    scope 223 {
        debug runtime_eval => _1470;     // in scope 223 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1479: &std::option::Option<&u8>; // in scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1480: &std::option::Option<&u8>; // in scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1497: &std::option::Option<&u8>; // in scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1498: &std::option::Option<&u8>; // in scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1769: &std::option::Option<&u8>; // in scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 225 {
            debug left_val => _1479;     // in scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1480;    // in scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1485: core::panicking::AssertKind; // in scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 226 {
                debug kind => _1485;     // in scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 227 {
            debug left_val => _1497;     // in scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1498;    // in scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1503: core::panicking::AssertKind; // in scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 228 {
                debug kind => _1503;     // in scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 224 {
        debug x => _1474;                // in scope 224 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    }
    scope 229 {
        debug runtime_eval => _1511;     // in scope 229 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1520: &std::option::Option<&u8>; // in scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1521: &std::option::Option<&u8>; // in scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1538: &std::option::Option<&u8>; // in scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1539: &std::option::Option<&u8>; // in scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1767: &std::option::Option<&u8>; // in scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 231 {
            debug left_val => _1520;     // in scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1521;    // in scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1526: core::panicking::AssertKind; // in scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 232 {
                debug kind => _1526;     // in scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 233 {
            debug left_val => _1538;     // in scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1539;    // in scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1544: core::panicking::AssertKind; // in scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 234 {
                debug kind => _1544;     // in scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 230 {
        debug x => _1515;                // in scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let _1515: &u8;                  // in scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let mut _1768: &[N; 4];          // in scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
    scope 235 {
        debug runtime_eval => _1552;     // in scope 235 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1561: &std::option::Option<&u8>; // in scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1562: &std::option::Option<&u8>; // in scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1579: &std::option::Option<&u8>; // in scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1580: &std::option::Option<&u8>; // in scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1765: &std::option::Option<&u8>; // in scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 237 {
            debug left_val => _1561;     // in scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1562;    // in scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1567: core::panicking::AssertKind; // in scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 238 {
                debug kind => _1567;     // in scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 239 {
            debug left_val => _1579;     // in scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1580;    // in scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1585: core::panicking::AssertKind; // in scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 240 {
                debug kind => _1585;     // in scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 236 {
        debug x => _1556;                // in scope 236 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    }
    scope 241 {
        debug runtime_eval => _1593;     // in scope 241 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1602: &std::option::Option<&u8>; // in scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1603: &std::option::Option<&u8>; // in scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1620: &std::option::Option<&u8>; // in scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1621: &std::option::Option<&u8>; // in scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1763: &std::option::Option<&u8>; // in scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 243 {
            debug left_val => _1602;     // in scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1603;    // in scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1608: core::panicking::AssertKind; // in scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 244 {
                debug kind => _1608;     // in scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 245 {
            debug left_val => _1620;     // in scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1621;    // in scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1626: core::panicking::AssertKind; // in scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 246 {
                debug kind => _1626;     // in scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 242 {
        debug x => _1597;                // in scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let _1597: &u8;                  // in scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let mut _1764: &[N; 2];          // in scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
    scope 247 {
        debug runtime_eval => _1634;     // in scope 247 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1643: &std::option::Option<&u8>; // in scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1644: &std::option::Option<&u8>; // in scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1661: &std::option::Option<&u8>; // in scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1662: &std::option::Option<&u8>; // in scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1761: &std::option::Option<&u8>; // in scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 249 {
            debug left_val => _1643;     // in scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1644;    // in scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1649: core::panicking::AssertKind; // in scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 250 {
                debug kind => _1649;     // in scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 251 {
            debug left_val => _1661;     // in scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1662;    // in scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1667: core::panicking::AssertKind; // in scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 252 {
                debug kind => _1667;     // in scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 248 {
        debug x => _1638;                // in scope 248 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    }
    scope 253 {
        debug runtime_eval => _1675;     // in scope 253 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1684: &std::option::Option<&u8>; // in scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1685: &std::option::Option<&u8>; // in scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1702: &std::option::Option<&u8>; // in scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1703: &std::option::Option<&u8>; // in scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1759: &std::option::Option<&u8>; // in scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 255 {
            debug left_val => _1684;     // in scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1685;    // in scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1690: core::panicking::AssertKind; // in scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 256 {
                debug kind => _1690;     // in scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 257 {
            debug left_val => _1702;     // in scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1703;    // in scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1708: core::panicking::AssertKind; // in scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 258 {
                debug kind => _1708;     // in scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 254 {
        debug x => _1679;                // in scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let _1679: &u8;                  // in scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let mut _1760: &[N; 2];          // in scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
    scope 259 {
        debug runtime_eval => _1716;     // in scope 259 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:35:13: 35:25
        let _1725: &std::option::Option<&u8>; // in scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1726: &std::option::Option<&u8>; // in scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _1743: &std::option::Option<&u8>; // in scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _1744: &std::option::Option<&u8>; // in scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _1757: &std::option::Option<&u8>; // in scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 261 {
            debug left_val => _1725;     // in scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1726;    // in scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1731: core::panicking::AssertKind; // in scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 262 {
                debug kind => _1731;     // in scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 263 {
            debug left_val => _1743;     // in scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _1744;    // in scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _1749: core::panicking::AssertKind; // in scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 264 {
                debug kind => _1749;     // in scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 260 {
        debug x => _1720;                // in scope 260 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    }

    bb0: {
        _1832 = const _;                 // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[87])) }
        _4 = _1832;                      // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _3 = _4;                         // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = move _3 as &[N] (Pointer(Unsize)); // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _5 = &(*_2)[1:-1];               // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _6 = _5;                         // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _1 = Option::<&[N]>::Some(move _6); // scope 2 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        _1831 = const _;                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[N]>, val: Unevaluated(main, [], Some(promoted[86])) }
        _8 = _1831;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &std::option::Option<&[N]>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &std::option::Option<&[N]>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = <Option<&[N]> as PartialEq>::eq(move _14, move _15) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb3: {
        _26 = const {alloc1: &Option<&[N]>}; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[N]>, val: Value(Scalar(alloc1)) }
        _25 = _26;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _27);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_24.0: &std::option::Option<&[N]>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_24.1: &std::option::Option<&[N]>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = <Option<&[N]> as PartialEq>::eq(move _32, move _33) -> bb4; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _30 = Not(move _31);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _34 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _36, move _37, move _39, move _41); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb6: {
        _1830 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[85])) }
        _45 = _1830;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _44 = _45;                       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _43 = move _44 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _46 = &(*_43)[1:-1];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _47 = _46;                       // scope 8 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _42 = Option::<&[N]>::Some(move _47); // scope 8 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        _1829 = const _;                 // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[N]>, val: Unevaluated(main, [], Some(promoted[84])) }
        _49 = _1829;                     // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = &_42;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _48 = (move _49, move _50);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _51 = (_48.0: &std::option::Option<&[N]>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _52 = (_48.1: &std::option::Option<&[N]>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _55 = _51;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _56 = _52;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _54 = <Option<&[N]> as PartialEq>::eq(move _55, move _56) -> bb7; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _53 = Not(move _54);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _53) -> [0: bb9, otherwise: bb8]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _57 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _59 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = _51;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _61;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _52;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = _63;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _58 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _59, move _60, move _62, move _64); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb9: {
        _67 = const {alloc2: &Option<&[N]>}; // scope 7 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[N]>, val: Value(Scalar(alloc2)) }
        _66 = _67;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _68 = &_42;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _65 = (move _66, move _68);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_65.0: &std::option::Option<&[N]>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_65.1: &std::option::Option<&[N]>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = _69;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = _70;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = <Option<&[N]> as PartialEq>::eq(move _73, move _74) -> bb10; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _71 = Not(move _72);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb12, otherwise: bb11]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _75 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _77, move _78, move _80, move _82); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb12: {
        _1828 = const _;                 // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[83])) }
        _86 = _1828;                     // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _85 = _86;                       // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _84 = move _85 as &[N] (Pointer(Unsize)); // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _87 = &(*_84)[0 of 2];           // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _88 = _87;                       // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _83 = Option::<&N>::Some(move _88); // scope 14 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        _1827 = const _;                 // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[82])) }
        _90 = _1827;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = &_83;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _89 = (move _90, move _91);      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _92 = (_89.0: &std::option::Option<&N>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _93 = (_89.1: &std::option::Option<&N>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _96 = _92;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _97 = _93;                       // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _95 = <Option<&N> as PartialEq>::eq(move _96, move _97) -> bb13; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _94 = Not(move _95);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _94) -> [0: bb15, otherwise: bb14]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _98 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = _92;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _101 = _102;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _104 = _93;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = _104;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _99 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _100, move _101, move _103, move _105); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb15: {
        _108 = const {alloc3: &Option<&N>}; // scope 13 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc3)) }
        _107 = _108;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = &_83;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _106 = (move _107, move _109);   // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _110 = (_106.0: &std::option::Option<&N>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _111 = (_106.1: &std::option::Option<&N>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _114 = _110;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _115 = _111;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _113 = <Option<&N> as PartialEq>::eq(move _114, move _115) -> bb16; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _112 = Not(move _113);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _112) -> [0: bb18, otherwise: bb17]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _116 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _120 = _110;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _119 = _120;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _111;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = _122;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _117 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _118, move _119, move _121, move _123); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb18: {
        _1826 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[81])) }
        _127 = _1826;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _126 = _127;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _125 = move _126 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _128 = &(*_125)[0 of 2];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _129 = _128;                     // scope 20 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _124 = Option::<&N>::Some(move _129); // scope 20 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        _1825 = const _;                 // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[80])) }
        _131 = _1825;                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _132 = &_124;                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _130 = (move _131, move _132);   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _133 = (_130.0: &std::option::Option<&N>); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _134 = (_130.1: &std::option::Option<&N>); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _137 = _133;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _138 = _134;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _136 = <Option<&N> as PartialEq>::eq(move _137, move _138) -> bb19; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb19: {
        _135 = Not(move _136);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _135) -> [0: bb21, otherwise: bb20]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb20: {
        _139 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _141 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _143 = _133;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _142 = _143;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _145 = _134;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _144 = _145;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _146 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _140 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _141, move _142, move _144, move _146); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb21: {
        _149 = const {alloc4: &Option<&N>}; // scope 19 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc4)) }
        _148 = _149;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _150 = &_124;                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _147 = (move _148, move _150);   // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _151 = (_147.0: &std::option::Option<&N>); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _152 = (_147.1: &std::option::Option<&N>); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _155 = _151;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _156 = _152;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _154 = <Option<&N> as PartialEq>::eq(move _155, move _156) -> bb22; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _153 = Not(move _154);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _153) -> [0: bb24, otherwise: bb23]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _157 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _159 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _161 = _151;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _160 = _161;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _163 = _152;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _162 = _163;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _164 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _158 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _159, move _160, move _162, move _164); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb24: {
        _1824 = const _;                 // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[79])) }
        _168 = _1824;                    // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _167 = _168;                     // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _166 = move _167 as &[N] (Pointer(Unsize)); // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _169 = &(*_166)[-1 of 2];        // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _170 = _169;                     // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _165 = Option::<&N>::Some(move _170); // scope 26 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        _1823 = const _;                 // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[78])) }
        _172 = _1823;                    // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _173 = &_165;                    // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _171 = (move _172, move _173);   // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _174 = (_171.0: &std::option::Option<&N>); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _175 = (_171.1: &std::option::Option<&N>); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _178 = _174;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _179 = _175;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _177 = <Option<&N> as PartialEq>::eq(move _178, move _179) -> bb25; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb25: {
        _176 = Not(move _177);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _176) -> [0: bb27, otherwise: bb26]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _180 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _182 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _184 = _174;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _183 = _184;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _186 = _175;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _185 = _186;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _187 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _181 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _182, move _183, move _185, move _187); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb27: {
        _190 = const {alloc5: &Option<&N>}; // scope 25 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc5)) }
        _189 = _190;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _191 = &_165;                    // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _188 = (move _189, move _191);   // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _192 = (_188.0: &std::option::Option<&N>); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _193 = (_188.1: &std::option::Option<&N>); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _196 = _192;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _197 = _193;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _195 = <Option<&N> as PartialEq>::eq(move _196, move _197) -> bb28; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb28: {
        _194 = Not(move _195);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _194) -> [0: bb30, otherwise: bb29]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _198 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _200 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _202 = _192;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _201 = _202;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _204 = _193;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _203 = _204;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _205 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _199 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _200, move _201, move _203, move _205); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb30: {
        _1822 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[77])) }
        _209 = _1822;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _208 = _209;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _207 = move _208 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _210 = &(*_207)[-1 of 2];        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _211 = _210;                     // scope 32 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _206 = Option::<&N>::Some(move _211); // scope 32 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        _1821 = const _;                 // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[76])) }
        _213 = _1821;                    // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _214 = &_206;                    // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _212 = (move _213, move _214);   // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _215 = (_212.0: &std::option::Option<&N>); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _216 = (_212.1: &std::option::Option<&N>); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _219 = _215;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _220 = _216;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _218 = <Option<&N> as PartialEq>::eq(move _219, move _220) -> bb31; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _217 = Not(move _218);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _217) -> [0: bb33, otherwise: bb32]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _221 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _223 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _225 = _215;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _224 = _225;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _227 = _216;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _226 = _227;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _228 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _222 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _223, move _224, move _226, move _228); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb33: {
        _231 = const {alloc6: &Option<&N>}; // scope 31 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc6)) }
        _230 = _231;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _232 = &_206;                    // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _229 = (move _230, move _232);   // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _233 = (_229.0: &std::option::Option<&N>); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _234 = (_229.1: &std::option::Option<&N>); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _237 = _233;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _238 = _234;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _236 = <Option<&N> as PartialEq>::eq(move _237, move _238) -> bb34; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _235 = Not(move _236);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _235) -> [0: bb36, otherwise: bb35]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _239 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _241 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _243 = _233;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _242 = _243;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _245 = _234;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _244 = _245;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _246 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _240 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _241, move _242, move _244, move _246); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb36: {
        _1820 = const _;                 // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[75])) }
        _250 = _1820;                    // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _249 = _250;                     // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _248 = move _249 as &[N] (Pointer(Unsize)); // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _251 = &(*_248)[1:-1];           // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _252 = _251;                     // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _247 = Option::<&[N]>::Some(move _252); // scope 38 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        _1819 = const _;                 // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[N]>, val: Unevaluated(main, [], Some(promoted[74])) }
        _254 = _1819;                    // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _255 = &_247;                    // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _253 = (move _254, move _255);   // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _256 = (_253.0: &std::option::Option<&[N]>); // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _257 = (_253.1: &std::option::Option<&[N]>); // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _260 = _256;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _261 = _257;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _259 = <Option<&[N]> as PartialEq>::eq(move _260, move _261) -> bb37; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb37: {
        _258 = Not(move _259);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _258) -> [0: bb39, otherwise: bb38]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb38: {
        _262 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _264 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _266 = _256;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _265 = _266;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _268 = _257;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _267 = _268;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _269 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _263 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _264, move _265, move _267, move _269); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb39: {
        _272 = const {alloc7: &Option<&[N]>}; // scope 37 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[N]>, val: Value(Scalar(alloc7)) }
        _271 = _272;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _273 = &_247;                    // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _270 = (move _271, move _273);   // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _274 = (_270.0: &std::option::Option<&[N]>); // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _275 = (_270.1: &std::option::Option<&[N]>); // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _278 = _274;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _279 = _275;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _277 = <Option<&[N]> as PartialEq>::eq(move _278, move _279) -> bb40; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb40: {
        _276 = Not(move _277);           // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _276) -> [0: bb42, otherwise: bb41]; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _280 = const core::panicking::AssertKind::Eq; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _282 = const core::panicking::AssertKind::Eq; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _284 = _274;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _283 = _284;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _286 = _275;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _285 = _286;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _287 = Option::<Arguments<'_>>::None; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _281 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _282, move _283, move _285, move _287); // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb42: {
        _1818 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[73])) }
        _291 = _1818;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _290 = _291;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _289 = move _290 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _292 = &(*_289)[1:-1];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _293 = _292;                     // scope 44 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _288 = Option::<&[N]>::Some(move _293); // scope 44 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        _1817 = const _;                 // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[N]>, val: Unevaluated(main, [], Some(promoted[72])) }
        _295 = _1817;                    // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _296 = &_288;                    // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _294 = (move _295, move _296);   // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _297 = (_294.0: &std::option::Option<&[N]>); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _298 = (_294.1: &std::option::Option<&[N]>); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _301 = _297;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _302 = _298;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _300 = <Option<&[N]> as PartialEq>::eq(move _301, move _302) -> bb43; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb43: {
        _299 = Not(move _300);           // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _299) -> [0: bb45, otherwise: bb44]; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb44: {
        _303 = const core::panicking::AssertKind::Eq; // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _305 = const core::panicking::AssertKind::Eq; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _307 = _297;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _306 = _307;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _309 = _298;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _308 = _309;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _310 = Option::<Arguments<'_>>::None; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _304 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _305, move _306, move _308, move _310); // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb45: {
        _313 = const {alloc8: &Option<&[N]>}; // scope 43 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[N]>, val: Value(Scalar(alloc8)) }
        _312 = _313;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _314 = &_288;                    // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _311 = (move _312, move _314);   // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _315 = (_311.0: &std::option::Option<&[N]>); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _316 = (_311.1: &std::option::Option<&[N]>); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _319 = _315;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _320 = _316;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _318 = <Option<&[N]> as PartialEq>::eq(move _319, move _320) -> bb46; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _317 = Not(move _318);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _317) -> [0: bb48, otherwise: bb47]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _321 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _323 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _325 = _315;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _324 = _325;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _327 = _316;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _326 = _327;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _328 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _322 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _323, move _324, move _326, move _328); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb48: {
        _1816 = const _;                 // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[71])) }
        _332 = _1816;                    // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _331 = _332;                     // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _330 = move _331 as &[N] (Pointer(Unsize)); // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _333 = &(*_330)[0 of 2];         // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _334 = _333;                     // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _329 = Option::<&N>::Some(move _334); // scope 50 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        _1815 = const _;                 // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[70])) }
        _336 = _1815;                    // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _337 = &_329;                    // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _335 = (move _336, move _337);   // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _338 = (_335.0: &std::option::Option<&N>); // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _339 = (_335.1: &std::option::Option<&N>); // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _342 = _338;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _343 = _339;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _341 = <Option<&N> as PartialEq>::eq(move _342, move _343) -> bb49; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb49: {
        _340 = Not(move _341);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _340) -> [0: bb51, otherwise: bb50]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb50: {
        _344 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _346 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _348 = _338;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _347 = _348;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _350 = _339;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _349 = _350;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _351 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _345 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _346, move _347, move _349, move _351); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb51: {
        _354 = const {alloc9: &Option<&N>}; // scope 49 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc9)) }
        _353 = _354;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _355 = &_329;                    // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _352 = (move _353, move _355);   // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _356 = (_352.0: &std::option::Option<&N>); // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _357 = (_352.1: &std::option::Option<&N>); // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _360 = _356;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _361 = _357;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _359 = <Option<&N> as PartialEq>::eq(move _360, move _361) -> bb52; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb52: {
        _358 = Not(move _359);           // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _358) -> [0: bb54, otherwise: bb53]; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _362 = const core::panicking::AssertKind::Eq; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _364 = const core::panicking::AssertKind::Eq; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _366 = _356;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _365 = _366;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _368 = _357;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _367 = _368;                     // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _369 = Option::<Arguments<'_>>::None; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _363 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _364, move _365, move _367, move _369); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb54: {
        _1814 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[69])) }
        _373 = _1814;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _372 = _373;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _371 = move _372 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _374 = &(*_371)[0 of 2];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _375 = _374;                     // scope 56 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _370 = Option::<&N>::Some(move _375); // scope 56 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        _1813 = const _;                 // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[68])) }
        _377 = _1813;                    // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _378 = &_370;                    // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _376 = (move _377, move _378);   // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _379 = (_376.0: &std::option::Option<&N>); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _380 = (_376.1: &std::option::Option<&N>); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _383 = _379;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _384 = _380;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _382 = <Option<&N> as PartialEq>::eq(move _383, move _384) -> bb55; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb55: {
        _381 = Not(move _382);           // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _381) -> [0: bb57, otherwise: bb56]; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb56: {
        _385 = const core::panicking::AssertKind::Eq; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _387 = const core::panicking::AssertKind::Eq; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _389 = _379;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _388 = _389;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _391 = _380;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _390 = _391;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _392 = Option::<Arguments<'_>>::None; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _386 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _387, move _388, move _390, move _392); // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb57: {
        _395 = const {alloc10: &Option<&N>}; // scope 55 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc10)) }
        _394 = _395;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _396 = &_370;                    // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _393 = (move _394, move _396);   // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _397 = (_393.0: &std::option::Option<&N>); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _398 = (_393.1: &std::option::Option<&N>); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _401 = _397;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _402 = _398;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _400 = <Option<&N> as PartialEq>::eq(move _401, move _402) -> bb58; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb58: {
        _399 = Not(move _400);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _399) -> [0: bb60, otherwise: bb59]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb59: {
        _403 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _405 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _407 = _397;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _406 = _407;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _409 = _398;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _408 = _409;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _410 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _404 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _405, move _406, move _408, move _410); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb60: {
        _1812 = const _;                 // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[67])) }
        _414 = _1812;                    // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _413 = _414;                     // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _412 = move _413 as &[N] (Pointer(Unsize)); // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _415 = &(*_412)[-1 of 2];        // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _416 = _415;                     // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _411 = Option::<&N>::Some(move _416); // scope 62 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        _1811 = const _;                 // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[66])) }
        _418 = _1811;                    // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _419 = &_411;                    // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _417 = (move _418, move _419);   // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _420 = (_417.0: &std::option::Option<&N>); // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _421 = (_417.1: &std::option::Option<&N>); // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _424 = _420;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _425 = _421;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _423 = <Option<&N> as PartialEq>::eq(move _424, move _425) -> bb61; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _422 = Not(move _423);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _422) -> [0: bb63, otherwise: bb62]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _426 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _428 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _430 = _420;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _429 = _430;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _432 = _421;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _431 = _432;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _433 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _427 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _428, move _429, move _431, move _433); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb63: {
        _436 = const {alloc11: &Option<&N>}; // scope 61 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc11)) }
        _435 = _436;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _437 = &_411;                    // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _434 = (move _435, move _437);   // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _438 = (_434.0: &std::option::Option<&N>); // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _439 = (_434.1: &std::option::Option<&N>); // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _442 = _438;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _443 = _439;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _441 = <Option<&N> as PartialEq>::eq(move _442, move _443) -> bb64; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb64: {
        _440 = Not(move _441);           // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _440) -> [0: bb66, otherwise: bb65]; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb65: {
        _444 = const core::panicking::AssertKind::Eq; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _446 = const core::panicking::AssertKind::Eq; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _448 = _438;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _447 = _448;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _450 = _439;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _449 = _450;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _451 = Option::<Arguments<'_>>::None; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _445 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _446, move _447, move _449, move _451); // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb66: {
        _1810 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[65])) }
        _455 = _1810;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _454 = _455;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _453 = move _454 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _456 = &(*_453)[-1 of 2];        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _457 = _456;                     // scope 68 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _452 = Option::<&N>::Some(move _457); // scope 68 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        _1809 = const _;                 // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[64])) }
        _459 = _1809;                    // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _460 = &_452;                    // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _458 = (move _459, move _460);   // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _461 = (_458.0: &std::option::Option<&N>); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _462 = (_458.1: &std::option::Option<&N>); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _465 = _461;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _466 = _462;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _464 = <Option<&N> as PartialEq>::eq(move _465, move _466) -> bb67; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb67: {
        _463 = Not(move _464);           // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _463) -> [0: bb69, otherwise: bb68]; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb68: {
        _467 = const core::panicking::AssertKind::Eq; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _469 = const core::panicking::AssertKind::Eq; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _471 = _461;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _470 = _471;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _473 = _462;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _472 = _473;                     // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _474 = Option::<Arguments<'_>>::None; // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _468 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _469, move _470, move _472, move _474); // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb69: {
        _477 = const {alloc12: &Option<&N>}; // scope 67 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc12)) }
        _476 = _477;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _478 = &_452;                    // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _475 = (move _476, move _478);   // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _479 = (_475.0: &std::option::Option<&N>); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _480 = (_475.1: &std::option::Option<&N>); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _483 = _479;                     // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _484 = _480;                     // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _482 = <Option<&N> as PartialEq>::eq(move _483, move _484) -> bb70; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb70: {
        _481 = Not(move _482);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _481) -> [0: bb72, otherwise: bb71]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb71: {
        _485 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _487 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _489 = _479;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _488 = _489;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _491 = _480;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _490 = _491;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _492 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _486 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _487, move _488, move _490, move _492); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb72: {
        _493 = Option::<&[N]>::None;     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        _1808 = const _;                 // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[N]>, val: Unevaluated(main, [], Some(promoted[62])) }
        _496 = _1808;                    // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _497 = &_493;                    // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _495 = (move _496, move _497);   // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _498 = (_495.0: &std::option::Option<&[N]>); // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _499 = (_495.1: &std::option::Option<&[N]>); // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _502 = _498;                     // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _503 = _499;                     // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _501 = <Option<&[N]> as PartialEq>::eq(move _502, move _503) -> bb73; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb73: {
        _500 = Not(move _501);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _500) -> [0: bb75, otherwise: bb74]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb74: {
        _504 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _506 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _508 = _498;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _507 = _508;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _510 = _499;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _509 = _510;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _511 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _505 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _506, move _507, move _509, move _511); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb75: {
        _514 = const {alloc13: &Option<&[N]>}; // scope 73 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[N]>, val: Value(Scalar(alloc13)) }
        _513 = _514;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _515 = &_493;                    // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _512 = (move _513, move _515);   // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _516 = (_512.0: &std::option::Option<&[N]>); // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _517 = (_512.1: &std::option::Option<&[N]>); // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _520 = _516;                     // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _521 = _517;                     // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _519 = <Option<&[N]> as PartialEq>::eq(move _520, move _521) -> bb76; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb76: {
        _518 = Not(move _519);           // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _518) -> [0: bb78, otherwise: bb77]; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _522 = const core::panicking::AssertKind::Eq; // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _524 = const core::panicking::AssertKind::Eq; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _526 = _516;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _525 = _526;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _528 = _517;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _527 = _528;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _529 = Option::<Arguments<'_>>::None; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _523 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _524, move _525, move _527, move _529); // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb78: {
        _530 = Option::<&[N]>::None;     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        _1807 = const _;                 // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[N]>, val: Unevaluated(main, [], Some(promoted[60])) }
        _533 = _1807;                    // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _534 = &_530;                    // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _532 = (move _533, move _534);   // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _535 = (_532.0: &std::option::Option<&[N]>); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _536 = (_532.1: &std::option::Option<&[N]>); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _539 = _535;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _540 = _536;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _538 = <Option<&[N]> as PartialEq>::eq(move _539, move _540) -> bb79; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb79: {
        _537 = Not(move _538);           // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _537) -> [0: bb81, otherwise: bb80]; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb80: {
        _541 = const core::panicking::AssertKind::Eq; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _543 = const core::panicking::AssertKind::Eq; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _545 = _535;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _544 = _545;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _547 = _536;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _546 = _547;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _548 = Option::<Arguments<'_>>::None; // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _542 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _543, move _544, move _546, move _548); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb81: {
        _551 = const {alloc14: &Option<&[N]>}; // scope 79 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[N]>, val: Value(Scalar(alloc14)) }
        _550 = _551;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _552 = &_530;                    // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _549 = (move _550, move _552);   // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _553 = (_549.0: &std::option::Option<&[N]>); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _554 = (_549.1: &std::option::Option<&[N]>); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _557 = _553;                     // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _558 = _554;                     // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _556 = <Option<&[N]> as PartialEq>::eq(move _557, move _558) -> bb82; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[N]>, &'b Option<&[N]>) -> bool {<Option<&[N]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb82: {
        _555 = Not(move _556);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _555) -> [0: bb84, otherwise: bb83]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb83: {
        _559 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _561 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _563 = _553;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _562 = _563;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _565 = _554;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _564 = _565;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _566 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _560 = core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>(move _561, move _562, move _564, move _566); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[N]>, &'b Option<&[N]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[N]>, Option<&[N]>>}, val: Value(<ZST>) }
    }

    bb84: {
        _567 = Option::<&N>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        _1806 = const _;                 // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[58])) }
        _570 = _1806;                    // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _571 = &_567;                    // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _569 = (move _570, move _571);   // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _572 = (_569.0: &std::option::Option<&N>); // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _573 = (_569.1: &std::option::Option<&N>); // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _576 = _572;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _577 = _573;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _575 = <Option<&N> as PartialEq>::eq(move _576, move _577) -> bb85; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb85: {
        _574 = Not(move _575);           // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _574) -> [0: bb87, otherwise: bb86]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb86: {
        _578 = const core::panicking::AssertKind::Eq; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _580 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _582 = _572;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _581 = _582;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _584 = _573;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _583 = _584;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _585 = Option::<Arguments<'_>>::None; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _579 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _580, move _581, move _583, move _585); // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb87: {
        _588 = const {alloc15: &Option<&N>}; // scope 85 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc15)) }
        _587 = _588;                     // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _589 = &_567;                    // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _586 = (move _587, move _589);   // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _590 = (_586.0: &std::option::Option<&N>); // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _591 = (_586.1: &std::option::Option<&N>); // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _594 = _590;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _595 = _591;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _593 = <Option<&N> as PartialEq>::eq(move _594, move _595) -> bb88; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb88: {
        _592 = Not(move _593);           // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _592) -> [0: bb90, otherwise: bb89]; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb89: {
        _596 = const core::panicking::AssertKind::Eq; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _598 = const core::panicking::AssertKind::Eq; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _600 = _590;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _599 = _600;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _602 = _591;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _601 = _602;                     // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _603 = Option::<Arguments<'_>>::None; // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _597 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _598, move _599, move _601, move _603); // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb90: {
        _604 = Option::<&N>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        _1805 = const _;                 // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[56])) }
        _607 = _1805;                    // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _608 = &_604;                    // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _606 = (move _607, move _608);   // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _609 = (_606.0: &std::option::Option<&N>); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _610 = (_606.1: &std::option::Option<&N>); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _613 = _609;                     // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _614 = _610;                     // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _612 = <Option<&N> as PartialEq>::eq(move _613, move _614) -> bb91; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb91: {
        _611 = Not(move _612);           // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _611) -> [0: bb93, otherwise: bb92]; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb92: {
        _615 = const core::panicking::AssertKind::Eq; // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _617 = const core::panicking::AssertKind::Eq; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _619 = _609;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _618 = _619;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _621 = _610;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _620 = _621;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _622 = Option::<Arguments<'_>>::None; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _616 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _617, move _618, move _620, move _622); // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb93: {
        _625 = const {alloc16: &Option<&N>}; // scope 91 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc16)) }
        _624 = _625;                     // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _626 = &_604;                    // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _623 = (move _624, move _626);   // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _627 = (_623.0: &std::option::Option<&N>); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _628 = (_623.1: &std::option::Option<&N>); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _631 = _627;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _632 = _628;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _630 = <Option<&N> as PartialEq>::eq(move _631, move _632) -> bb94; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb94: {
        _629 = Not(move _630);           // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _629) -> [0: bb96, otherwise: bb95]; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb95: {
        _633 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _635 = const core::panicking::AssertKind::Eq; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _637 = _627;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _636 = _637;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _639 = _628;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _638 = _639;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _640 = Option::<Arguments<'_>>::None; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _634 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _635, move _636, move _638, move _640); // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb96: {
        _641 = Option::<&N>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        _1804 = const _;                 // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[54])) }
        _644 = _1804;                    // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _645 = &_641;                    // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _643 = (move _644, move _645);   // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _646 = (_643.0: &std::option::Option<&N>); // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _647 = (_643.1: &std::option::Option<&N>); // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _650 = _646;                     // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _651 = _647;                     // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _649 = <Option<&N> as PartialEq>::eq(move _650, move _651) -> bb97; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb97: {
        _648 = Not(move _649);           // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _648) -> [0: bb99, otherwise: bb98]; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb98: {
        _652 = const core::panicking::AssertKind::Eq; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _654 = const core::panicking::AssertKind::Eq; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _656 = _646;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _655 = _656;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _658 = _647;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _657 = _658;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _659 = Option::<Arguments<'_>>::None; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _653 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _654, move _655, move _657, move _659); // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb99: {
        _662 = const {alloc17: &Option<&N>}; // scope 97 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc17)) }
        _661 = _662;                     // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _663 = &_641;                    // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _660 = (move _661, move _663);   // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _664 = (_660.0: &std::option::Option<&N>); // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _665 = (_660.1: &std::option::Option<&N>); // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _668 = _664;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _669 = _665;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _667 = <Option<&N> as PartialEq>::eq(move _668, move _669) -> bb100; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb100: {
        _666 = Not(move _667);           // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _666) -> [0: bb102, otherwise: bb101]; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb101: {
        _670 = const core::panicking::AssertKind::Eq; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _672 = const core::panicking::AssertKind::Eq; // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _674 = _664;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _673 = _674;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _676 = _665;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _675 = _676;                     // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _677 = Option::<Arguments<'_>>::None; // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _671 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _672, move _673, move _675, move _677); // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb102: {
        _678 = Option::<&N>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        _1803 = const _;                 // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&N>, val: Unevaluated(main, [], Some(promoted[52])) }
        _681 = _1803;                    // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _682 = &_678;                    // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _680 = (move _681, move _682);   // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _683 = (_680.0: &std::option::Option<&N>); // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _684 = (_680.1: &std::option::Option<&N>); // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _687 = _683;                     // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _688 = _684;                     // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _686 = <Option<&N> as PartialEq>::eq(move _687, move _688) -> bb103; // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb103: {
        _685 = Not(move _686);           // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _685) -> [0: bb105, otherwise: bb104]; // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb104: {
        _689 = const core::panicking::AssertKind::Eq; // scope 105 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _691 = const core::panicking::AssertKind::Eq; // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _693 = _683;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _692 = _693;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _695 = _684;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _694 = _695;                     // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _696 = Option::<Arguments<'_>>::None; // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _690 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _691, move _692, move _694, move _696); // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb105: {
        _699 = const {alloc18: &Option<&N>}; // scope 103 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&N>, val: Value(Scalar(alloc18)) }
        _698 = _699;                     // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _700 = &_678;                    // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _697 = (move _698, move _700);   // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _701 = (_697.0: &std::option::Option<&N>); // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _702 = (_697.1: &std::option::Option<&N>); // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _705 = _701;                     // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _706 = _702;                     // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _704 = <Option<&N> as PartialEq>::eq(move _705, move _706) -> bb106; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&N>, &'b Option<&N>) -> bool {<Option<&N> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb106: {
        _703 = Not(move _704);           // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _703) -> [0: bb108, otherwise: bb107]; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb107: {
        _707 = const core::panicking::AssertKind::Eq; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _709 = const core::panicking::AssertKind::Eq; // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _711 = _701;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _710 = _711;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _713 = _702;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _712 = _713;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _714 = Option::<Arguments<'_>>::None; // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _708 = core::panicking::assert_failed::<Option<&N>, Option<&N>>(move _709, move _710, move _712, move _714); // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&N>, &'b Option<&N>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&N>, Option<&N>>}, val: Value(<ZST>) }
    }

    bb108: {
        _1802 = const _;                 // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[51])) }
        _718 = _1802;                    // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _717 = _718;                     // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _716 = move _717 as &[Z] (Pointer(Unsize)); // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _719 = &(*_716)[1:-1];           // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _720 = _719;                     // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _715 = Option::<&[Z]>::Some(move _720); // scope 110 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        _1801 = const _;                 // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[Z]>, val: Unevaluated(main, [], Some(promoted[50])) }
        _722 = _1801;                    // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _723 = &_715;                    // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _721 = (move _722, move _723);   // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _724 = (_721.0: &std::option::Option<&[Z]>); // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _725 = (_721.1: &std::option::Option<&[Z]>); // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _728 = _724;                     // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _729 = _725;                     // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _727 = <Option<&[Z]> as PartialEq>::eq(move _728, move _729) -> bb109; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb109: {
        _726 = Not(move _727);           // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _726) -> [0: bb111, otherwise: bb110]; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb110: {
        _730 = const core::panicking::AssertKind::Eq; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _732 = const core::panicking::AssertKind::Eq; // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _734 = _724;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _733 = _734;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _736 = _725;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _735 = _736;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _737 = Option::<Arguments<'_>>::None; // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _731 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _732, move _733, move _735, move _737); // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb111: {
        _740 = const {alloc19: &Option<&[Z]>}; // scope 109 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[Z]>, val: Value(Scalar(alloc19)) }
        _739 = _740;                     // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _741 = &_715;                    // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _738 = (move _739, move _741);   // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _742 = (_738.0: &std::option::Option<&[Z]>); // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _743 = (_738.1: &std::option::Option<&[Z]>); // scope 109 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _746 = _742;                     // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _747 = _743;                     // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _745 = <Option<&[Z]> as PartialEq>::eq(move _746, move _747) -> bb112; // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb112: {
        _744 = Not(move _745);           // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _744) -> [0: bb114, otherwise: bb113]; // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb113: {
        _748 = const core::panicking::AssertKind::Eq; // scope 113 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _750 = const core::panicking::AssertKind::Eq; // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _752 = _742;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _751 = _752;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _754 = _743;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _753 = _754;                     // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _755 = Option::<Arguments<'_>>::None; // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _749 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _750, move _751, move _753, move _755); // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb114: {
        _1800 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[49])) }
        _759 = _1800;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _758 = _759;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _757 = move _758 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _760 = &(*_757)[1:-1];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _761 = _760;                     // scope 116 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _756 = Option::<&[Z]>::Some(move _761); // scope 116 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        _1799 = const _;                 // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[Z]>, val: Unevaluated(main, [], Some(promoted[48])) }
        _763 = _1799;                    // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _764 = &_756;                    // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _762 = (move _763, move _764);   // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _765 = (_762.0: &std::option::Option<&[Z]>); // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _766 = (_762.1: &std::option::Option<&[Z]>); // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _769 = _765;                     // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _770 = _766;                     // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _768 = <Option<&[Z]> as PartialEq>::eq(move _769, move _770) -> bb115; // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb115: {
        _767 = Not(move _768);           // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _767) -> [0: bb117, otherwise: bb116]; // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb116: {
        _771 = const core::panicking::AssertKind::Eq; // scope 117 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _773 = const core::panicking::AssertKind::Eq; // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _775 = _765;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _774 = _775;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _777 = _766;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _776 = _777;                     // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _778 = Option::<Arguments<'_>>::None; // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _772 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _773, move _774, move _776, move _778); // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb117: {
        _781 = const {alloc20: &Option<&[Z]>}; // scope 115 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[Z]>, val: Value(Scalar(alloc20)) }
        _780 = _781;                     // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _782 = &_756;                    // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _779 = (move _780, move _782);   // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _783 = (_779.0: &std::option::Option<&[Z]>); // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _784 = (_779.1: &std::option::Option<&[Z]>); // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _787 = _783;                     // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _788 = _784;                     // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _786 = <Option<&[Z]> as PartialEq>::eq(move _787, move _788) -> bb118; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb118: {
        _785 = Not(move _786);           // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _785) -> [0: bb120, otherwise: bb119]; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb119: {
        _789 = const core::panicking::AssertKind::Eq; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _791 = const core::panicking::AssertKind::Eq; // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _793 = _783;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _792 = _793;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _795 = _784;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _794 = _795;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _796 = Option::<Arguments<'_>>::None; // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _790 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _791, move _792, move _794, move _796); // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb120: {
        _1798 = const _;                 // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[47])) }
        _800 = _1798;                    // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _799 = _800;                     // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _798 = move _799 as &[Z] (Pointer(Unsize)); // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _801 = &(*_798)[0 of 2];         // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _802 = _801;                     // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _797 = Option::<&Z>::Some(move _802); // scope 122 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        _1797 = const _;                 // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[46])) }
        _804 = _1797;                    // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _805 = &_797;                    // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _803 = (move _804, move _805);   // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _806 = (_803.0: &std::option::Option<&Z>); // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _807 = (_803.1: &std::option::Option<&Z>); // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _810 = _806;                     // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _811 = _807;                     // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _809 = <Option<&Z> as PartialEq>::eq(move _810, move _811) -> bb121; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb121: {
        _808 = Not(move _809);           // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _808) -> [0: bb123, otherwise: bb122]; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb122: {
        _812 = const core::panicking::AssertKind::Eq; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _814 = const core::panicking::AssertKind::Eq; // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _816 = _806;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _815 = _816;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _818 = _807;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _817 = _818;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _819 = Option::<Arguments<'_>>::None; // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _813 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _814, move _815, move _817, move _819); // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb123: {
        _822 = const {alloc21: &Option<&Z>}; // scope 121 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc21)) }
        _821 = _822;                     // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _823 = &_797;                    // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _820 = (move _821, move _823);   // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _824 = (_820.0: &std::option::Option<&Z>); // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _825 = (_820.1: &std::option::Option<&Z>); // scope 121 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _828 = _824;                     // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _829 = _825;                     // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _827 = <Option<&Z> as PartialEq>::eq(move _828, move _829) -> bb124; // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb124: {
        _826 = Not(move _827);           // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _826) -> [0: bb126, otherwise: bb125]; // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb125: {
        _830 = const core::panicking::AssertKind::Eq; // scope 125 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _832 = const core::panicking::AssertKind::Eq; // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _834 = _824;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _833 = _834;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _836 = _825;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _835 = _836;                     // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _837 = Option::<Arguments<'_>>::None; // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _831 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _832, move _833, move _835, move _837); // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb126: {
        _1796 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[45])) }
        _841 = _1796;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _840 = _841;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _839 = move _840 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _842 = &(*_839)[0 of 2];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _843 = _842;                     // scope 128 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _838 = Option::<&Z>::Some(move _843); // scope 128 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        _1795 = const _;                 // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[44])) }
        _845 = _1795;                    // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _846 = &_838;                    // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _844 = (move _845, move _846);   // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _847 = (_844.0: &std::option::Option<&Z>); // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _848 = (_844.1: &std::option::Option<&Z>); // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _851 = _847;                     // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _852 = _848;                     // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _850 = <Option<&Z> as PartialEq>::eq(move _851, move _852) -> bb127; // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb127: {
        _849 = Not(move _850);           // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _849) -> [0: bb129, otherwise: bb128]; // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb128: {
        _853 = const core::panicking::AssertKind::Eq; // scope 129 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _855 = const core::panicking::AssertKind::Eq; // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _857 = _847;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _856 = _857;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _859 = _848;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _858 = _859;                     // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _860 = Option::<Arguments<'_>>::None; // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _854 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _855, move _856, move _858, move _860); // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb129: {
        _863 = const {alloc22: &Option<&Z>}; // scope 127 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc22)) }
        _862 = _863;                     // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _864 = &_838;                    // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _861 = (move _862, move _864);   // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _865 = (_861.0: &std::option::Option<&Z>); // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _866 = (_861.1: &std::option::Option<&Z>); // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _869 = _865;                     // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _870 = _866;                     // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _868 = <Option<&Z> as PartialEq>::eq(move _869, move _870) -> bb130; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb130: {
        _867 = Not(move _868);           // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _867) -> [0: bb132, otherwise: bb131]; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb131: {
        _871 = const core::panicking::AssertKind::Eq; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _873 = const core::panicking::AssertKind::Eq; // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _875 = _865;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _874 = _875;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _877 = _866;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _876 = _877;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _878 = Option::<Arguments<'_>>::None; // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _872 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _873, move _874, move _876, move _878); // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb132: {
        _1794 = const _;                 // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[43])) }
        _882 = _1794;                    // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _881 = _882;                     // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _880 = move _881 as &[Z] (Pointer(Unsize)); // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _883 = &(*_880)[-1 of 2];        // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _884 = _883;                     // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _879 = Option::<&Z>::Some(move _884); // scope 134 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        _1793 = const _;                 // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[42])) }
        _886 = _1793;                    // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _887 = &_879;                    // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _885 = (move _886, move _887);   // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _888 = (_885.0: &std::option::Option<&Z>); // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _889 = (_885.1: &std::option::Option<&Z>); // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _892 = _888;                     // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _893 = _889;                     // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _891 = <Option<&Z> as PartialEq>::eq(move _892, move _893) -> bb133; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb133: {
        _890 = Not(move _891);           // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _890) -> [0: bb135, otherwise: bb134]; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb134: {
        _894 = const core::panicking::AssertKind::Eq; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _896 = const core::panicking::AssertKind::Eq; // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _898 = _888;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _897 = _898;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _900 = _889;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _899 = _900;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _901 = Option::<Arguments<'_>>::None; // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _895 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _896, move _897, move _899, move _901); // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb135: {
        _904 = const {alloc23: &Option<&Z>}; // scope 133 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc23)) }
        _903 = _904;                     // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _905 = &_879;                    // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _902 = (move _903, move _905);   // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _906 = (_902.0: &std::option::Option<&Z>); // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _907 = (_902.1: &std::option::Option<&Z>); // scope 133 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _910 = _906;                     // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _911 = _907;                     // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _909 = <Option<&Z> as PartialEq>::eq(move _910, move _911) -> bb136; // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb136: {
        _908 = Not(move _909);           // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _908) -> [0: bb138, otherwise: bb137]; // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb137: {
        _912 = const core::panicking::AssertKind::Eq; // scope 137 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _914 = const core::panicking::AssertKind::Eq; // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _916 = _906;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _915 = _916;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _918 = _907;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _917 = _918;                     // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _919 = Option::<Arguments<'_>>::None; // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _913 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _914, move _915, move _917, move _919); // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb138: {
        _1792 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main, [], Some(promoted[41])) }
        _923 = _1792;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _922 = _923;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _921 = move _922 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _924 = &(*_921)[-1 of 2];        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _925 = _924;                     // scope 140 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _920 = Option::<&Z>::Some(move _925); // scope 140 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        _1791 = const _;                 // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[40])) }
        _927 = _1791;                    // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _928 = &_920;                    // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _926 = (move _927, move _928);   // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _929 = (_926.0: &std::option::Option<&Z>); // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _930 = (_926.1: &std::option::Option<&Z>); // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _933 = _929;                     // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _934 = _930;                     // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _932 = <Option<&Z> as PartialEq>::eq(move _933, move _934) -> bb139; // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb139: {
        _931 = Not(move _932);           // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _931) -> [0: bb141, otherwise: bb140]; // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb140: {
        _935 = const core::panicking::AssertKind::Eq; // scope 141 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _937 = const core::panicking::AssertKind::Eq; // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _939 = _929;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _938 = _939;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _941 = _930;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _940 = _941;                     // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _942 = Option::<Arguments<'_>>::None; // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _936 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _937, move _938, move _940, move _942); // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb141: {
        _945 = const {alloc24: &Option<&Z>}; // scope 139 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc24)) }
        _944 = _945;                     // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _946 = &_920;                    // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _943 = (move _944, move _946);   // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _947 = (_943.0: &std::option::Option<&Z>); // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _948 = (_943.1: &std::option::Option<&Z>); // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _951 = _947;                     // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _952 = _948;                     // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _950 = <Option<&Z> as PartialEq>::eq(move _951, move _952) -> bb142; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb142: {
        _949 = Not(move _950);           // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _949) -> [0: bb144, otherwise: bb143]; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb143: {
        _953 = const core::panicking::AssertKind::Eq; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _955 = const core::panicking::AssertKind::Eq; // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _957 = _947;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _956 = _957;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _959 = _948;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _958 = _959;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _960 = Option::<Arguments<'_>>::None; // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _954 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _955, move _956, move _958, move _960); // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb144: {
        _1790 = const _;                 // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[39])) }
        _964 = _1790;                    // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _963 = _964;                     // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _962 = move _963 as &[Z] (Pointer(Unsize)); // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _965 = &(*_962)[1:-1];           // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _966 = _965;                     // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _961 = Option::<&[Z]>::Some(move _966); // scope 146 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        _1789 = const _;                 // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[Z]>, val: Unevaluated(main, [], Some(promoted[38])) }
        _968 = _1789;                    // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _969 = &_961;                    // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _967 = (move _968, move _969);   // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _970 = (_967.0: &std::option::Option<&[Z]>); // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _971 = (_967.1: &std::option::Option<&[Z]>); // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _974 = _970;                     // scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _975 = _971;                     // scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _973 = <Option<&[Z]> as PartialEq>::eq(move _974, move _975) -> bb145; // scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb145: {
        _972 = Not(move _973);           // scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _972) -> [0: bb147, otherwise: bb146]; // scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb146: {
        _976 = const core::panicking::AssertKind::Eq; // scope 147 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _978 = const core::panicking::AssertKind::Eq; // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _980 = _970;                     // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _979 = _980;                     // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _982 = _971;                     // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _981 = _982;                     // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _983 = Option::<Arguments<'_>>::None; // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _977 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _978, move _979, move _981, move _983); // scope 148 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb147: {
        _986 = const {alloc25: &Option<&[Z]>}; // scope 145 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[Z]>, val: Value(Scalar(alloc25)) }
        _985 = _986;                     // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _987 = &_961;                    // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _984 = (move _985, move _987);   // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _988 = (_984.0: &std::option::Option<&[Z]>); // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _989 = (_984.1: &std::option::Option<&[Z]>); // scope 145 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _992 = _988;                     // scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _993 = _989;                     // scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _991 = <Option<&[Z]> as PartialEq>::eq(move _992, move _993) -> bb148; // scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb148: {
        _990 = Not(move _991);           // scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _990) -> [0: bb150, otherwise: bb149]; // scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb149: {
        _994 = const core::panicking::AssertKind::Eq; // scope 149 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _996 = const core::panicking::AssertKind::Eq; // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _998 = _988;                     // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _997 = _998;                     // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1000 = _989;                    // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _999 = _1000;                    // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1001 = Option::<Arguments<'_>>::None; // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _995 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _996, move _997, move _999, move _1001); // scope 150 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb150: {
        _1788 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[37])) }
        _1005 = _1788;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1004 = _1005;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1003 = move _1004 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1006 = &(*_1003)[1:-1];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _1007 = _1006;                   // scope 152 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _1002 = Option::<&[Z]>::Some(move _1007); // scope 152 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        _1787 = const _;                 // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[Z]>, val: Unevaluated(main, [], Some(promoted[36])) }
        _1009 = _1787;                   // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1010 = &_1002;                  // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1008 = (move _1009, move _1010); // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1011 = (_1008.0: &std::option::Option<&[Z]>); // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1012 = (_1008.1: &std::option::Option<&[Z]>); // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1015 = _1011;                   // scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1016 = _1012;                   // scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1014 = <Option<&[Z]> as PartialEq>::eq(move _1015, move _1016) -> bb151; // scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb151: {
        _1013 = Not(move _1014);         // scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1013) -> [0: bb153, otherwise: bb152]; // scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb152: {
        _1017 = const core::panicking::AssertKind::Eq; // scope 153 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1019 = const core::panicking::AssertKind::Eq; // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1021 = _1011;                   // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1020 = _1021;                   // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1023 = _1012;                   // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1022 = _1023;                   // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1024 = Option::<Arguments<'_>>::None; // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1018 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _1019, move _1020, move _1022, move _1024); // scope 154 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb153: {
        _1027 = const {alloc26: &Option<&[Z]>}; // scope 151 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[Z]>, val: Value(Scalar(alloc26)) }
        _1026 = _1027;                   // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1028 = &_1002;                  // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1025 = (move _1026, move _1028); // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1029 = (_1025.0: &std::option::Option<&[Z]>); // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1030 = (_1025.1: &std::option::Option<&[Z]>); // scope 151 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1033 = _1029;                   // scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1034 = _1030;                   // scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1032 = <Option<&[Z]> as PartialEq>::eq(move _1033, move _1034) -> bb154; // scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb154: {
        _1031 = Not(move _1032);         // scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1031) -> [0: bb156, otherwise: bb155]; // scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb155: {
        _1035 = const core::panicking::AssertKind::Eq; // scope 155 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1037 = const core::panicking::AssertKind::Eq; // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1039 = _1029;                   // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1038 = _1039;                   // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1041 = _1030;                   // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1040 = _1041;                   // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1042 = Option::<Arguments<'_>>::None; // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1036 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _1037, move _1038, move _1040, move _1042); // scope 156 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb156: {
        _1786 = const _;                 // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[35])) }
        _1046 = _1786;                   // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1045 = _1046;                   // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1044 = move _1045 as &[Z] (Pointer(Unsize)); // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1047 = &(*_1044)[0 of 2];       // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _1048 = _1047;                   // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _1043 = Option::<&Z>::Some(move _1048); // scope 158 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        _1785 = const _;                 // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[34])) }
        _1050 = _1785;                   // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1051 = &_1043;                  // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1049 = (move _1050, move _1051); // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1052 = (_1049.0: &std::option::Option<&Z>); // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1053 = (_1049.1: &std::option::Option<&Z>); // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1056 = _1052;                   // scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1057 = _1053;                   // scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1055 = <Option<&Z> as PartialEq>::eq(move _1056, move _1057) -> bb157; // scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb157: {
        _1054 = Not(move _1055);         // scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1054) -> [0: bb159, otherwise: bb158]; // scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb158: {
        _1058 = const core::panicking::AssertKind::Eq; // scope 159 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1060 = const core::panicking::AssertKind::Eq; // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1062 = _1052;                   // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1061 = _1062;                   // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1064 = _1053;                   // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1063 = _1064;                   // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1065 = Option::<Arguments<'_>>::None; // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1059 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1060, move _1061, move _1063, move _1065); // scope 160 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb159: {
        _1068 = const {alloc27: &Option<&Z>}; // scope 157 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc27)) }
        _1067 = _1068;                   // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1069 = &_1043;                  // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1066 = (move _1067, move _1069); // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1070 = (_1066.0: &std::option::Option<&Z>); // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1071 = (_1066.1: &std::option::Option<&Z>); // scope 157 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1074 = _1070;                   // scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1075 = _1071;                   // scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1073 = <Option<&Z> as PartialEq>::eq(move _1074, move _1075) -> bb160; // scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb160: {
        _1072 = Not(move _1073);         // scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1072) -> [0: bb162, otherwise: bb161]; // scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb161: {
        _1076 = const core::panicking::AssertKind::Eq; // scope 161 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1078 = const core::panicking::AssertKind::Eq; // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1080 = _1070;                   // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1079 = _1080;                   // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1082 = _1071;                   // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1081 = _1082;                   // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1083 = Option::<Arguments<'_>>::None; // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1077 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1078, move _1079, move _1081, move _1083); // scope 162 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb162: {
        _1784 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[33])) }
        _1087 = _1784;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1086 = _1087;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1085 = move _1086 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1088 = &(*_1085)[0 of 2];       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _1089 = _1088;                   // scope 164 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _1084 = Option::<&Z>::Some(move _1089); // scope 164 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        _1783 = const _;                 // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[32])) }
        _1091 = _1783;                   // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1092 = &_1084;                  // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1090 = (move _1091, move _1092); // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1093 = (_1090.0: &std::option::Option<&Z>); // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1094 = (_1090.1: &std::option::Option<&Z>); // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1097 = _1093;                   // scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1098 = _1094;                   // scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1096 = <Option<&Z> as PartialEq>::eq(move _1097, move _1098) -> bb163; // scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb163: {
        _1095 = Not(move _1096);         // scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1095) -> [0: bb165, otherwise: bb164]; // scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb164: {
        _1099 = const core::panicking::AssertKind::Eq; // scope 165 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1101 = const core::panicking::AssertKind::Eq; // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1103 = _1093;                   // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1102 = _1103;                   // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1105 = _1094;                   // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1104 = _1105;                   // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1106 = Option::<Arguments<'_>>::None; // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1100 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1101, move _1102, move _1104, move _1106); // scope 166 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb165: {
        _1109 = const {alloc28: &Option<&Z>}; // scope 163 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc28)) }
        _1108 = _1109;                   // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1110 = &_1084;                  // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1107 = (move _1108, move _1110); // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1111 = (_1107.0: &std::option::Option<&Z>); // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1112 = (_1107.1: &std::option::Option<&Z>); // scope 163 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1115 = _1111;                   // scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1116 = _1112;                   // scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1114 = <Option<&Z> as PartialEq>::eq(move _1115, move _1116) -> bb166; // scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb166: {
        _1113 = Not(move _1114);         // scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1113) -> [0: bb168, otherwise: bb167]; // scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb167: {
        _1117 = const core::panicking::AssertKind::Eq; // scope 167 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1119 = const core::panicking::AssertKind::Eq; // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1121 = _1111;                   // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1120 = _1121;                   // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1123 = _1112;                   // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1122 = _1123;                   // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1124 = Option::<Arguments<'_>>::None; // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1118 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1119, move _1120, move _1122, move _1124); // scope 168 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb168: {
        _1782 = const _;                 // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[31])) }
        _1128 = _1782;                   // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1127 = _1128;                   // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1126 = move _1127 as &[Z] (Pointer(Unsize)); // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1129 = &(*_1126)[-1 of 2];      // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _1130 = _1129;                   // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _1125 = Option::<&Z>::Some(move _1130); // scope 170 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        _1781 = const _;                 // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[30])) }
        _1132 = _1781;                   // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1133 = &_1125;                  // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1131 = (move _1132, move _1133); // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1134 = (_1131.0: &std::option::Option<&Z>); // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1135 = (_1131.1: &std::option::Option<&Z>); // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1138 = _1134;                   // scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1139 = _1135;                   // scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1137 = <Option<&Z> as PartialEq>::eq(move _1138, move _1139) -> bb169; // scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb169: {
        _1136 = Not(move _1137);         // scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1136) -> [0: bb171, otherwise: bb170]; // scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb170: {
        _1140 = const core::panicking::AssertKind::Eq; // scope 171 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1142 = const core::panicking::AssertKind::Eq; // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1144 = _1134;                   // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1143 = _1144;                   // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1146 = _1135;                   // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1145 = _1146;                   // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1147 = Option::<Arguments<'_>>::None; // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1141 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1142, move _1143, move _1145, move _1147); // scope 172 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb171: {
        _1150 = const {alloc29: &Option<&Z>}; // scope 169 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc29)) }
        _1149 = _1150;                   // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1151 = &_1125;                  // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1148 = (move _1149, move _1151); // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1152 = (_1148.0: &std::option::Option<&Z>); // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1153 = (_1148.1: &std::option::Option<&Z>); // scope 169 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1156 = _1152;                   // scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1157 = _1153;                   // scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1155 = <Option<&Z> as PartialEq>::eq(move _1156, move _1157) -> bb172; // scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb172: {
        _1154 = Not(move _1155);         // scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1154) -> [0: bb174, otherwise: bb173]; // scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb173: {
        _1158 = const core::panicking::AssertKind::Eq; // scope 173 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1160 = const core::panicking::AssertKind::Eq; // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1162 = _1152;                   // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1161 = _1162;                   // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1164 = _1153;                   // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1163 = _1164;                   // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1165 = Option::<Arguments<'_>>::None; // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1159 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1160, move _1161, move _1163, move _1165); // scope 174 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb174: {
        _1780 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main, [], Some(promoted[29])) }
        _1169 = _1780;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1168 = _1169;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1167 = move _1168 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1170 = &(*_1167)[-1 of 2];      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _1171 = _1170;                   // scope 176 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _1166 = Option::<&Z>::Some(move _1171); // scope 176 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        _1779 = const _;                 // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[28])) }
        _1173 = _1779;                   // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1174 = &_1166;                  // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1172 = (move _1173, move _1174); // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1175 = (_1172.0: &std::option::Option<&Z>); // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1176 = (_1172.1: &std::option::Option<&Z>); // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1179 = _1175;                   // scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1180 = _1176;                   // scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1178 = <Option<&Z> as PartialEq>::eq(move _1179, move _1180) -> bb175; // scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb175: {
        _1177 = Not(move _1178);         // scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1177) -> [0: bb177, otherwise: bb176]; // scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb176: {
        _1181 = const core::panicking::AssertKind::Eq; // scope 177 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1183 = const core::panicking::AssertKind::Eq; // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1185 = _1175;                   // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1184 = _1185;                   // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1187 = _1176;                   // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1186 = _1187;                   // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1188 = Option::<Arguments<'_>>::None; // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1182 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1183, move _1184, move _1186, move _1188); // scope 178 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb177: {
        _1191 = const {alloc30: &Option<&Z>}; // scope 175 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc30)) }
        _1190 = _1191;                   // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1192 = &_1166;                  // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1189 = (move _1190, move _1192); // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1193 = (_1189.0: &std::option::Option<&Z>); // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1194 = (_1189.1: &std::option::Option<&Z>); // scope 175 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1197 = _1193;                   // scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1198 = _1194;                   // scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1196 = <Option<&Z> as PartialEq>::eq(move _1197, move _1198) -> bb178; // scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb178: {
        _1195 = Not(move _1196);         // scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1195) -> [0: bb180, otherwise: bb179]; // scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb179: {
        _1199 = const core::panicking::AssertKind::Eq; // scope 179 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1201 = const core::panicking::AssertKind::Eq; // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1203 = _1193;                   // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1202 = _1203;                   // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1205 = _1194;                   // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1204 = _1205;                   // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1206 = Option::<Arguments<'_>>::None; // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1200 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1201, move _1202, move _1204, move _1206); // scope 180 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb180: {
        _1207 = Option::<&[Z]>::None;    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        _1778 = const _;                 // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[Z]>, val: Unevaluated(main, [], Some(promoted[26])) }
        _1210 = _1778;                   // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1211 = &_1207;                  // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1209 = (move _1210, move _1211); // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1212 = (_1209.0: &std::option::Option<&[Z]>); // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1213 = (_1209.1: &std::option::Option<&[Z]>); // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1216 = _1212;                   // scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1217 = _1213;                   // scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1215 = <Option<&[Z]> as PartialEq>::eq(move _1216, move _1217) -> bb181; // scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb181: {
        _1214 = Not(move _1215);         // scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1214) -> [0: bb183, otherwise: bb182]; // scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb182: {
        _1218 = const core::panicking::AssertKind::Eq; // scope 183 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1220 = const core::panicking::AssertKind::Eq; // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1222 = _1212;                   // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1221 = _1222;                   // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1224 = _1213;                   // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1223 = _1224;                   // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1225 = Option::<Arguments<'_>>::None; // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1219 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _1220, move _1221, move _1223, move _1225); // scope 184 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb183: {
        _1228 = const {alloc31: &Option<&[Z]>}; // scope 181 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[Z]>, val: Value(Scalar(alloc31)) }
        _1227 = _1228;                   // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1229 = &_1207;                  // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1226 = (move _1227, move _1229); // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1230 = (_1226.0: &std::option::Option<&[Z]>); // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1231 = (_1226.1: &std::option::Option<&[Z]>); // scope 181 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1234 = _1230;                   // scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1235 = _1231;                   // scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1233 = <Option<&[Z]> as PartialEq>::eq(move _1234, move _1235) -> bb184; // scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb184: {
        _1232 = Not(move _1233);         // scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1232) -> [0: bb186, otherwise: bb185]; // scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb185: {
        _1236 = const core::panicking::AssertKind::Eq; // scope 185 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1238 = const core::panicking::AssertKind::Eq; // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1240 = _1230;                   // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1239 = _1240;                   // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1242 = _1231;                   // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1241 = _1242;                   // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1243 = Option::<Arguments<'_>>::None; // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1237 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _1238, move _1239, move _1241, move _1243); // scope 186 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb186: {
        _1244 = Option::<&[Z]>::None;    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        _1777 = const _;                 // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&[Z]>, val: Unevaluated(main, [], Some(promoted[24])) }
        _1247 = _1777;                   // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1248 = &_1244;                  // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1246 = (move _1247, move _1248); // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1249 = (_1246.0: &std::option::Option<&[Z]>); // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1250 = (_1246.1: &std::option::Option<&[Z]>); // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1253 = _1249;                   // scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1254 = _1250;                   // scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1252 = <Option<&[Z]> as PartialEq>::eq(move _1253, move _1254) -> bb187; // scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb187: {
        _1251 = Not(move _1252);         // scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1251) -> [0: bb189, otherwise: bb188]; // scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb188: {
        _1255 = const core::panicking::AssertKind::Eq; // scope 189 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1257 = const core::panicking::AssertKind::Eq; // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1259 = _1249;                   // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1258 = _1259;                   // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1261 = _1250;                   // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1260 = _1261;                   // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1262 = Option::<Arguments<'_>>::None; // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1256 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _1257, move _1258, move _1260, move _1262); // scope 190 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb189: {
        _1265 = const {alloc32: &Option<&[Z]>}; // scope 187 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&[Z]>, val: Value(Scalar(alloc32)) }
        _1264 = _1265;                   // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1266 = &_1244;                  // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1263 = (move _1264, move _1266); // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1267 = (_1263.0: &std::option::Option<&[Z]>); // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1268 = (_1263.1: &std::option::Option<&[Z]>); // scope 187 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1271 = _1267;                   // scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1272 = _1268;                   // scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1270 = <Option<&[Z]> as PartialEq>::eq(move _1271, move _1272) -> bb190; // scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&[Z]>, &'b Option<&[Z]>) -> bool {<Option<&[Z]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb190: {
        _1269 = Not(move _1270);         // scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1269) -> [0: bb192, otherwise: bb191]; // scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb191: {
        _1273 = const core::panicking::AssertKind::Eq; // scope 191 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1275 = const core::panicking::AssertKind::Eq; // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1277 = _1267;                   // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1276 = _1277;                   // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1279 = _1268;                   // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1278 = _1279;                   // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1280 = Option::<Arguments<'_>>::None; // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1274 = core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>(move _1275, move _1276, move _1278, move _1280); // scope 192 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&[Z]>, &'b Option<&[Z]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&[Z]>, Option<&[Z]>>}, val: Value(<ZST>) }
    }

    bb192: {
        _1281 = Option::<&Z>::None;      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        _1776 = const _;                 // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[22])) }
        _1284 = _1776;                   // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1285 = &_1281;                  // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1283 = (move _1284, move _1285); // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1286 = (_1283.0: &std::option::Option<&Z>); // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1287 = (_1283.1: &std::option::Option<&Z>); // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1290 = _1286;                   // scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1291 = _1287;                   // scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1289 = <Option<&Z> as PartialEq>::eq(move _1290, move _1291) -> bb193; // scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb193: {
        _1288 = Not(move _1289);         // scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1288) -> [0: bb195, otherwise: bb194]; // scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb194: {
        _1292 = const core::panicking::AssertKind::Eq; // scope 195 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1294 = const core::panicking::AssertKind::Eq; // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1296 = _1286;                   // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1295 = _1296;                   // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1298 = _1287;                   // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1297 = _1298;                   // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1299 = Option::<Arguments<'_>>::None; // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1293 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1294, move _1295, move _1297, move _1299); // scope 196 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb195: {
        _1302 = const {alloc33: &Option<&Z>}; // scope 193 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc33)) }
        _1301 = _1302;                   // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1303 = &_1281;                  // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1300 = (move _1301, move _1303); // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1304 = (_1300.0: &std::option::Option<&Z>); // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1305 = (_1300.1: &std::option::Option<&Z>); // scope 193 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1308 = _1304;                   // scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1309 = _1305;                   // scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1307 = <Option<&Z> as PartialEq>::eq(move _1308, move _1309) -> bb196; // scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb196: {
        _1306 = Not(move _1307);         // scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1306) -> [0: bb198, otherwise: bb197]; // scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb197: {
        _1310 = const core::panicking::AssertKind::Eq; // scope 197 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1312 = const core::panicking::AssertKind::Eq; // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1314 = _1304;                   // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1313 = _1314;                   // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1316 = _1305;                   // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1315 = _1316;                   // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1317 = Option::<Arguments<'_>>::None; // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1311 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1312, move _1313, move _1315, move _1317); // scope 198 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb198: {
        _1318 = Option::<&Z>::None;      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        _1775 = const _;                 // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[20])) }
        _1321 = _1775;                   // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1322 = &_1318;                  // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1320 = (move _1321, move _1322); // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1323 = (_1320.0: &std::option::Option<&Z>); // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1324 = (_1320.1: &std::option::Option<&Z>); // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1327 = _1323;                   // scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1328 = _1324;                   // scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1326 = <Option<&Z> as PartialEq>::eq(move _1327, move _1328) -> bb199; // scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb199: {
        _1325 = Not(move _1326);         // scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1325) -> [0: bb201, otherwise: bb200]; // scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb200: {
        _1329 = const core::panicking::AssertKind::Eq; // scope 201 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1331 = const core::panicking::AssertKind::Eq; // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1333 = _1323;                   // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1332 = _1333;                   // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1335 = _1324;                   // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1334 = _1335;                   // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1336 = Option::<Arguments<'_>>::None; // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1330 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1331, move _1332, move _1334, move _1336); // scope 202 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb201: {
        _1339 = const {alloc34: &Option<&Z>}; // scope 199 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc34)) }
        _1338 = _1339;                   // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1340 = &_1318;                  // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1337 = (move _1338, move _1340); // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1341 = (_1337.0: &std::option::Option<&Z>); // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1342 = (_1337.1: &std::option::Option<&Z>); // scope 199 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1345 = _1341;                   // scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1346 = _1342;                   // scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1344 = <Option<&Z> as PartialEq>::eq(move _1345, move _1346) -> bb202; // scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb202: {
        _1343 = Not(move _1344);         // scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1343) -> [0: bb204, otherwise: bb203]; // scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb203: {
        _1347 = const core::panicking::AssertKind::Eq; // scope 203 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1349 = const core::panicking::AssertKind::Eq; // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1351 = _1341;                   // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1350 = _1351;                   // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1353 = _1342;                   // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1352 = _1353;                   // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1354 = Option::<Arguments<'_>>::None; // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1348 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1349, move _1350, move _1352, move _1354); // scope 204 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb204: {
        _1355 = Option::<&Z>::None;      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        _1774 = const _;                 // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[18])) }
        _1358 = _1774;                   // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1359 = &_1355;                  // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1357 = (move _1358, move _1359); // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1360 = (_1357.0: &std::option::Option<&Z>); // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1361 = (_1357.1: &std::option::Option<&Z>); // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1364 = _1360;                   // scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1365 = _1361;                   // scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1363 = <Option<&Z> as PartialEq>::eq(move _1364, move _1365) -> bb205; // scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb205: {
        _1362 = Not(move _1363);         // scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1362) -> [0: bb207, otherwise: bb206]; // scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb206: {
        _1366 = const core::panicking::AssertKind::Eq; // scope 207 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1368 = const core::panicking::AssertKind::Eq; // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1370 = _1360;                   // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1369 = _1370;                   // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1372 = _1361;                   // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1371 = _1372;                   // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1373 = Option::<Arguments<'_>>::None; // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1367 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1368, move _1369, move _1371, move _1373); // scope 208 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb207: {
        _1376 = const {alloc35: &Option<&Z>}; // scope 205 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc35)) }
        _1375 = _1376;                   // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1377 = &_1355;                  // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1374 = (move _1375, move _1377); // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1378 = (_1374.0: &std::option::Option<&Z>); // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1379 = (_1374.1: &std::option::Option<&Z>); // scope 205 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1382 = _1378;                   // scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1383 = _1379;                   // scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1381 = <Option<&Z> as PartialEq>::eq(move _1382, move _1383) -> bb208; // scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb208: {
        _1380 = Not(move _1381);         // scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1380) -> [0: bb210, otherwise: bb209]; // scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb209: {
        _1384 = const core::panicking::AssertKind::Eq; // scope 209 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1386 = const core::panicking::AssertKind::Eq; // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1388 = _1378;                   // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1387 = _1388;                   // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1390 = _1379;                   // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1389 = _1390;                   // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1391 = Option::<Arguments<'_>>::None; // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1385 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1386, move _1387, move _1389, move _1391); // scope 210 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb210: {
        _1392 = Option::<&Z>::None;      // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        _1773 = const _;                 // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&Z>, val: Unevaluated(main, [], Some(promoted[16])) }
        _1395 = _1773;                   // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1396 = &_1392;                  // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1394 = (move _1395, move _1396); // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1397 = (_1394.0: &std::option::Option<&Z>); // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1398 = (_1394.1: &std::option::Option<&Z>); // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1401 = _1397;                   // scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1402 = _1398;                   // scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1400 = <Option<&Z> as PartialEq>::eq(move _1401, move _1402) -> bb211; // scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb211: {
        _1399 = Not(move _1400);         // scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1399) -> [0: bb213, otherwise: bb212]; // scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb212: {
        _1403 = const core::panicking::AssertKind::Eq; // scope 213 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1405 = const core::panicking::AssertKind::Eq; // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1407 = _1397;                   // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1406 = _1407;                   // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1409 = _1398;                   // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1408 = _1409;                   // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1410 = Option::<Arguments<'_>>::None; // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1404 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1405, move _1406, move _1408, move _1410); // scope 214 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb213: {
        _1413 = const {alloc36: &Option<&Z>}; // scope 211 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&Z>, val: Value(Scalar(alloc36)) }
        _1412 = _1413;                   // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1414 = &_1392;                  // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1411 = (move _1412, move _1414); // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1415 = (_1411.0: &std::option::Option<&Z>); // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1416 = (_1411.1: &std::option::Option<&Z>); // scope 211 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1419 = _1415;                   // scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1420 = _1416;                   // scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1418 = <Option<&Z> as PartialEq>::eq(move _1419, move _1420) -> bb214; // scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&Z>, &'b Option<&Z>) -> bool {<Option<&Z> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb214: {
        _1417 = Not(move _1418);         // scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1417) -> [0: bb216, otherwise: bb215]; // scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb215: {
        _1421 = const core::panicking::AssertKind::Eq; // scope 215 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1423 = const core::panicking::AssertKind::Eq; // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1425 = _1415;                   // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1424 = _1425;                   // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1427 = _1416;                   // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1426 = _1427;                   // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1428 = Option::<Arguments<'_>>::None; // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1422 = core::panicking::assert_failed::<Option<&Z>, Option<&Z>>(move _1423, move _1424, move _1426, move _1428); // scope 216 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&Z>, &'b Option<&Z>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&Z>, Option<&Z>>}, val: Value(<ZST>) }
    }

    bb216: {
        _1772 = const _;                 // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[15])) }
        _1432 = _1772;                   // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1431 = _1432;                   // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1430 = move _1431 as &[N] (Pointer(Unsize)); // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1433 = &((*_1430)[0 of 2].0: u8); // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _1434 = _1433;                   // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _1429 = Option::<&u8>::Some(move _1434); // scope 218 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        _1771 = const _;                 // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[14])) }
        _1436 = _1771;                   // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1437 = &_1429;                  // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1435 = (move _1436, move _1437); // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1438 = (_1435.0: &std::option::Option<&u8>); // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1439 = (_1435.1: &std::option::Option<&u8>); // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1442 = _1438;                   // scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1443 = _1439;                   // scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1441 = <Option<&u8> as PartialEq>::eq(move _1442, move _1443) -> bb217; // scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb217: {
        _1440 = Not(move _1441);         // scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1440) -> [0: bb219, otherwise: bb218]; // scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb218: {
        _1444 = const core::panicking::AssertKind::Eq; // scope 219 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1446 = const core::panicking::AssertKind::Eq; // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1448 = _1438;                   // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1447 = _1448;                   // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1450 = _1439;                   // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1449 = _1450;                   // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1451 = Option::<Arguments<'_>>::None; // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1445 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1446, move _1447, move _1449, move _1451); // scope 220 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb219: {
        _1454 = const {alloc37: &Option<&u8>}; // scope 217 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc37)) }
        _1453 = _1454;                   // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1455 = &_1429;                  // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1452 = (move _1453, move _1455); // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1456 = (_1452.0: &std::option::Option<&u8>); // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1457 = (_1452.1: &std::option::Option<&u8>); // scope 217 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1460 = _1456;                   // scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1461 = _1457;                   // scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1459 = <Option<&u8> as PartialEq>::eq(move _1460, move _1461) -> bb220; // scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb220: {
        _1458 = Not(move _1459);         // scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1458) -> [0: bb222, otherwise: bb221]; // scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb221: {
        _1462 = const core::panicking::AssertKind::Eq; // scope 221 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1464 = const core::panicking::AssertKind::Eq; // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1466 = _1456;                   // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1465 = _1466;                   // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1468 = _1457;                   // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1467 = _1468;                   // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1469 = Option::<Arguments<'_>>::None; // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1463 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1464, move _1465, move _1467, move _1469); // scope 222 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb222: {
        _1770 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[13])) }
        _1473 = _1770;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1472 = _1473;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1471 = move _1472 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1474 = &((*_1471)[0 of 2].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _1475 = _1474;                   // scope 224 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _1470 = Option::<&u8>::Some(move _1475); // scope 224 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        _1769 = const _;                 // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[12])) }
        _1477 = _1769;                   // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1478 = &_1470;                  // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1476 = (move _1477, move _1478); // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1479 = (_1476.0: &std::option::Option<&u8>); // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1480 = (_1476.1: &std::option::Option<&u8>); // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1483 = _1479;                   // scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1484 = _1480;                   // scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1482 = <Option<&u8> as PartialEq>::eq(move _1483, move _1484) -> bb223; // scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb223: {
        _1481 = Not(move _1482);         // scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1481) -> [0: bb225, otherwise: bb224]; // scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb224: {
        _1485 = const core::panicking::AssertKind::Eq; // scope 225 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1487 = const core::panicking::AssertKind::Eq; // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1489 = _1479;                   // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1488 = _1489;                   // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1491 = _1480;                   // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1490 = _1491;                   // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1492 = Option::<Arguments<'_>>::None; // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1486 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1487, move _1488, move _1490, move _1492); // scope 226 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb225: {
        _1495 = const {alloc38: &Option<&u8>}; // scope 223 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc38)) }
        _1494 = _1495;                   // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1496 = &_1470;                  // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1493 = (move _1494, move _1496); // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1497 = (_1493.0: &std::option::Option<&u8>); // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1498 = (_1493.1: &std::option::Option<&u8>); // scope 223 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1501 = _1497;                   // scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1502 = _1498;                   // scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1500 = <Option<&u8> as PartialEq>::eq(move _1501, move _1502) -> bb226; // scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb226: {
        _1499 = Not(move _1500);         // scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1499) -> [0: bb228, otherwise: bb227]; // scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb227: {
        _1503 = const core::panicking::AssertKind::Eq; // scope 227 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1505 = const core::panicking::AssertKind::Eq; // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1507 = _1497;                   // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1506 = _1507;                   // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1509 = _1498;                   // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1508 = _1509;                   // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1510 = Option::<Arguments<'_>>::None; // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1504 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1505, move _1506, move _1508, move _1510); // scope 228 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb228: {
        _1768 = const _;                 // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[11])) }
        _1514 = _1768;                   // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1513 = _1514;                   // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1512 = move _1513 as &[N] (Pointer(Unsize)); // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1515 = &((*_1512)[-1 of 2].0: u8); // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _1516 = _1515;                   // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _1511 = Option::<&u8>::Some(move _1516); // scope 230 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        _1767 = const _;                 // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[10])) }
        _1518 = _1767;                   // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1519 = &_1511;                  // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1517 = (move _1518, move _1519); // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1520 = (_1517.0: &std::option::Option<&u8>); // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1521 = (_1517.1: &std::option::Option<&u8>); // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1524 = _1520;                   // scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1525 = _1521;                   // scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1523 = <Option<&u8> as PartialEq>::eq(move _1524, move _1525) -> bb229; // scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb229: {
        _1522 = Not(move _1523);         // scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1522) -> [0: bb231, otherwise: bb230]; // scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb230: {
        _1526 = const core::panicking::AssertKind::Eq; // scope 231 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1528 = const core::panicking::AssertKind::Eq; // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1530 = _1520;                   // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1529 = _1530;                   // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1532 = _1521;                   // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1531 = _1532;                   // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1533 = Option::<Arguments<'_>>::None; // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1527 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1528, move _1529, move _1531, move _1533); // scope 232 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb231: {
        _1536 = const {alloc39: &Option<&u8>}; // scope 229 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc39)) }
        _1535 = _1536;                   // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1537 = &_1511;                  // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1534 = (move _1535, move _1537); // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1538 = (_1534.0: &std::option::Option<&u8>); // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1539 = (_1534.1: &std::option::Option<&u8>); // scope 229 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1542 = _1538;                   // scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1543 = _1539;                   // scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1541 = <Option<&u8> as PartialEq>::eq(move _1542, move _1543) -> bb232; // scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb232: {
        _1540 = Not(move _1541);         // scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1540) -> [0: bb234, otherwise: bb233]; // scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb233: {
        _1544 = const core::panicking::AssertKind::Eq; // scope 233 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1546 = const core::panicking::AssertKind::Eq; // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1548 = _1538;                   // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1547 = _1548;                   // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1550 = _1539;                   // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1549 = _1550;                   // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1551 = Option::<Arguments<'_>>::None; // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1545 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1546, move _1547, move _1549, move _1551); // scope 234 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb234: {
        _1766 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main, [], Some(promoted[9])) }
        _1555 = _1766;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1554 = _1555;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1553 = move _1554 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1556 = &((*_1553)[-1 of 2].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _1557 = _1556;                   // scope 236 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _1552 = Option::<&u8>::Some(move _1557); // scope 236 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        _1765 = const _;                 // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[8])) }
        _1559 = _1765;                   // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1560 = &_1552;                  // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1558 = (move _1559, move _1560); // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1561 = (_1558.0: &std::option::Option<&u8>); // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1562 = (_1558.1: &std::option::Option<&u8>); // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1565 = _1561;                   // scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1566 = _1562;                   // scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1564 = <Option<&u8> as PartialEq>::eq(move _1565, move _1566) -> bb235; // scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb235: {
        _1563 = Not(move _1564);         // scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1563) -> [0: bb237, otherwise: bb236]; // scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb236: {
        _1567 = const core::panicking::AssertKind::Eq; // scope 237 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1569 = const core::panicking::AssertKind::Eq; // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1571 = _1561;                   // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1570 = _1571;                   // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1573 = _1562;                   // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1572 = _1573;                   // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1574 = Option::<Arguments<'_>>::None; // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1568 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1569, move _1570, move _1572, move _1574); // scope 238 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb237: {
        _1577 = const {alloc40: &Option<&u8>}; // scope 235 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc40)) }
        _1576 = _1577;                   // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1578 = &_1552;                  // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1575 = (move _1576, move _1578); // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1579 = (_1575.0: &std::option::Option<&u8>); // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1580 = (_1575.1: &std::option::Option<&u8>); // scope 235 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1583 = _1579;                   // scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1584 = _1580;                   // scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1582 = <Option<&u8> as PartialEq>::eq(move _1583, move _1584) -> bb238; // scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb238: {
        _1581 = Not(move _1582);         // scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1581) -> [0: bb240, otherwise: bb239]; // scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb239: {
        _1585 = const core::panicking::AssertKind::Eq; // scope 239 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1587 = const core::panicking::AssertKind::Eq; // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1589 = _1579;                   // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1588 = _1589;                   // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1591 = _1580;                   // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1590 = _1591;                   // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1592 = Option::<Arguments<'_>>::None; // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1586 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1587, move _1588, move _1590, move _1592); // scope 240 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb240: {
        _1764 = const _;                 // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[7])) }
        _1596 = _1764;                   // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1595 = _1596;                   // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1594 = move _1595 as &[N] (Pointer(Unsize)); // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1597 = &((*_1594)[0 of 2].0: u8); // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _1598 = _1597;                   // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _1593 = Option::<&u8>::Some(move _1598); // scope 242 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        _1763 = const _;                 // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[6])) }
        _1600 = _1763;                   // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1601 = &_1593;                  // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1599 = (move _1600, move _1601); // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1602 = (_1599.0: &std::option::Option<&u8>); // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1603 = (_1599.1: &std::option::Option<&u8>); // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1606 = _1602;                   // scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1607 = _1603;                   // scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1605 = <Option<&u8> as PartialEq>::eq(move _1606, move _1607) -> bb241; // scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb241: {
        _1604 = Not(move _1605);         // scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1604) -> [0: bb243, otherwise: bb242]; // scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb242: {
        _1608 = const core::panicking::AssertKind::Eq; // scope 243 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1610 = const core::panicking::AssertKind::Eq; // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1612 = _1602;                   // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1611 = _1612;                   // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1614 = _1603;                   // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1613 = _1614;                   // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1615 = Option::<Arguments<'_>>::None; // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1609 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1610, move _1611, move _1613, move _1615); // scope 244 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb243: {
        _1618 = const {alloc41: &Option<&u8>}; // scope 241 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc41)) }
        _1617 = _1618;                   // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1619 = &_1593;                  // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1616 = (move _1617, move _1619); // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1620 = (_1616.0: &std::option::Option<&u8>); // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1621 = (_1616.1: &std::option::Option<&u8>); // scope 241 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1624 = _1620;                   // scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1625 = _1621;                   // scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1623 = <Option<&u8> as PartialEq>::eq(move _1624, move _1625) -> bb244; // scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb244: {
        _1622 = Not(move _1623);         // scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1622) -> [0: bb246, otherwise: bb245]; // scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb245: {
        _1626 = const core::panicking::AssertKind::Eq; // scope 245 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1628 = const core::panicking::AssertKind::Eq; // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1630 = _1620;                   // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1629 = _1630;                   // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1632 = _1621;                   // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1631 = _1632;                   // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1633 = Option::<Arguments<'_>>::None; // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1627 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1628, move _1629, move _1631, move _1633); // scope 246 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb246: {
        _1762 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[5])) }
        _1637 = _1762;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1636 = _1637;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1635 = move _1636 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1638 = &((*_1635)[0 of 2].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _1639 = _1638;                   // scope 248 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _1634 = Option::<&u8>::Some(move _1639); // scope 248 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        _1761 = const _;                 // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[4])) }
        _1641 = _1761;                   // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1642 = &_1634;                  // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1640 = (move _1641, move _1642); // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1643 = (_1640.0: &std::option::Option<&u8>); // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1644 = (_1640.1: &std::option::Option<&u8>); // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1647 = _1643;                   // scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1648 = _1644;                   // scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1646 = <Option<&u8> as PartialEq>::eq(move _1647, move _1648) -> bb247; // scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb247: {
        _1645 = Not(move _1646);         // scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1645) -> [0: bb249, otherwise: bb248]; // scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb248: {
        _1649 = const core::panicking::AssertKind::Eq; // scope 249 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1651 = const core::panicking::AssertKind::Eq; // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1653 = _1643;                   // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1652 = _1653;                   // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1655 = _1644;                   // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1654 = _1655;                   // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1656 = Option::<Arguments<'_>>::None; // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1650 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1651, move _1652, move _1654, move _1656); // scope 250 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb249: {
        _1659 = const {alloc42: &Option<&u8>}; // scope 247 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc42)) }
        _1658 = _1659;                   // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1660 = &_1634;                  // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1657 = (move _1658, move _1660); // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1661 = (_1657.0: &std::option::Option<&u8>); // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1662 = (_1657.1: &std::option::Option<&u8>); // scope 247 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1665 = _1661;                   // scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1666 = _1662;                   // scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1664 = <Option<&u8> as PartialEq>::eq(move _1665, move _1666) -> bb250; // scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb250: {
        _1663 = Not(move _1664);         // scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1663) -> [0: bb252, otherwise: bb251]; // scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb251: {
        _1667 = const core::panicking::AssertKind::Eq; // scope 251 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1669 = const core::panicking::AssertKind::Eq; // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1671 = _1661;                   // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1670 = _1671;                   // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1673 = _1662;                   // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1672 = _1673;                   // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1674 = Option::<Arguments<'_>>::None; // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1668 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1669, move _1670, move _1672, move _1674); // scope 252 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb252: {
        _1760 = const _;                 // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _1678 = _1760;                   // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1677 = _1678;                   // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1676 = move _1677 as &[N] (Pointer(Unsize)); // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1679 = &((*_1676)[-1 of 2].0: u8); // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _1680 = _1679;                   // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _1675 = Option::<&u8>::Some(move _1680); // scope 254 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        _1759 = const _;                 // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[2])) }
        _1682 = _1759;                   // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1683 = &_1675;                  // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1681 = (move _1682, move _1683); // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1684 = (_1681.0: &std::option::Option<&u8>); // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1685 = (_1681.1: &std::option::Option<&u8>); // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1688 = _1684;                   // scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1689 = _1685;                   // scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1687 = <Option<&u8> as PartialEq>::eq(move _1688, move _1689) -> bb253; // scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb253: {
        _1686 = Not(move _1687);         // scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1686) -> [0: bb255, otherwise: bb254]; // scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb254: {
        _1690 = const core::panicking::AssertKind::Eq; // scope 255 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1692 = const core::panicking::AssertKind::Eq; // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1694 = _1684;                   // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1693 = _1694;                   // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1696 = _1685;                   // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1695 = _1696;                   // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1697 = Option::<Arguments<'_>>::None; // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1691 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1692, move _1693, move _1695, move _1697); // scope 256 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb255: {
        _1700 = const {alloc43: &Option<&u8>}; // scope 253 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc43)) }
        _1699 = _1700;                   // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1701 = &_1675;                  // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1698 = (move _1699, move _1701); // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1702 = (_1698.0: &std::option::Option<&u8>); // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1703 = (_1698.1: &std::option::Option<&u8>); // scope 253 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1706 = _1702;                   // scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1707 = _1703;                   // scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1705 = <Option<&u8> as PartialEq>::eq(move _1706, move _1707) -> bb256; // scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb256: {
        _1704 = Not(move _1705);         // scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1704) -> [0: bb258, otherwise: bb257]; // scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb257: {
        _1708 = const core::panicking::AssertKind::Eq; // scope 257 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1710 = const core::panicking::AssertKind::Eq; // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1712 = _1702;                   // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1711 = _1712;                   // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1714 = _1703;                   // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1713 = _1714;                   // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1715 = Option::<Arguments<'_>>::None; // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1709 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1710, move _1711, move _1713, move _1715); // scope 258 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb258: {
        _1758 = const _;                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _1719 = _1758;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1718 = _1719;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1717 = move _1718 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1720 = &((*_1717)[-1 of 2].0: u8); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _1721 = _1720;                   // scope 260 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _1716 = Option::<&u8>::Some(move _1721); // scope 260 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        _1757 = const _;                 // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&u8>, val: Unevaluated(main, [], Some(promoted[0])) }
        _1723 = _1757;                   // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1724 = &_1716;                  // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1722 = (move _1723, move _1724); // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1725 = (_1722.0: &std::option::Option<&u8>); // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1726 = (_1722.1: &std::option::Option<&u8>); // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1729 = _1725;                   // scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1730 = _1726;                   // scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1728 = <Option<&u8> as PartialEq>::eq(move _1729, move _1730) -> bb259; // scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb259: {
        _1727 = Not(move _1728);         // scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1727) -> [0: bb261, otherwise: bb260]; // scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb260: {
        _1731 = const core::panicking::AssertKind::Eq; // scope 261 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1733 = const core::panicking::AssertKind::Eq; // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1735 = _1725;                   // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1734 = _1735;                   // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1737 = _1726;                   // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1736 = _1737;                   // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1738 = Option::<Arguments<'_>>::None; // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1732 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1733, move _1734, move _1736, move _1738); // scope 262 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb261: {
        _1741 = const {alloc44: &Option<&u8>}; // scope 259 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:37:20: 37:31
                                         // + literal: Const { ty: &Option<&u8>, val: Value(Scalar(alloc44)) }
        _1740 = _1741;                   // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _1742 = &_1716;                  // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1739 = (move _1740, move _1742); // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _1743 = (_1739.0: &std::option::Option<&u8>); // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _1744 = (_1739.1: &std::option::Option<&u8>); // scope 259 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _1747 = _1743;                   // scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _1748 = _1744;                   // scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _1746 = <Option<&u8> as PartialEq>::eq(move _1747, move _1748) -> bb262; // scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&u8>, &'b Option<&u8>) -> bool {<Option<&u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb262: {
        _1745 = Not(move _1746);         // scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _1745) -> [0: bb264, otherwise: bb263]; // scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb263: {
        _1749 = const core::panicking::AssertKind::Eq; // scope 263 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1751 = const core::panicking::AssertKind::Eq; // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _1753 = _1743;                   // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1752 = _1753;                   // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _1755 = _1744;                   // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1754 = _1755;                   // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _1756 = Option::<Arguments<'_>>::None; // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _1750 = core::panicking::assert_failed::<Option<&u8>, Option<&u8>>(move _1751, move _1752, move _1754, move _1756); // scope 264 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&u8>, &'b Option<&u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&u8>, Option<&u8>>}, val: Value(<ZST>) }
    }

    bb264: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:96:2: 96:2
    }
}

alloc44 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc328+0x1─────╼                         │ ╾──────╼
}

alloc328 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc43 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc321+0x1─────╼                         │ ╾──────╼
}

alloc321 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc42 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc314───────╼                         │ ╾──────╼
}

alloc314 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc41 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc307───────╼                         │ ╾──────╼
}

alloc307 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc40 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc300+0x3─────╼                         │ ╾──────╼
}

alloc300 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc39 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc291+0x3─────╼                         │ ╾──────╼
}

alloc291 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc38 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc282───────╼                         │ ╾──────╼
}

alloc282 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc37 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc273───────╼                         │ ╾──────╼
}

alloc273 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc36 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc35 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc34 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc33 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc32 (static: main::CONST_EVAL2, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc31 (static: main::CONST_EVAL2, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc30 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc234───────╼                         │ ╾──────╼
}

alloc234 (size: 0, align: 1) {}

alloc29 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc229───────╼                         │ ╾──────╼
}

alloc229 (size: 0, align: 1) {}

alloc28 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc224───────╼                         │ ╾──────╼
}

alloc224 (size: 0, align: 1) {}

alloc27 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc219───────╼                         │ ╾──────╼
}

alloc219 (size: 0, align: 1) {}

alloc26 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾──────alloc214───────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc214 (size: 0, align: 1) {}

alloc25 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾──────alloc209───────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc209 (size: 0, align: 1) {}

alloc24 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc204───────╼                         │ ╾──────╼
}

alloc204 (size: 0, align: 1) {}

alloc23 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc199───────╼                         │ ╾──────╼
}

alloc199 (size: 0, align: 1) {}

alloc22 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc194───────╼                         │ ╾──────╼
}

alloc194 (size: 0, align: 1) {}

alloc21 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc189───────╼                         │ ╾──────╼
}

alloc189 (size: 0, align: 1) {}

alloc20 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾──────alloc184───────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc184 (size: 0, align: 1) {}

alloc19 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾──────alloc179───────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc179 (size: 0, align: 1) {}

alloc18 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc17 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc16 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc15 (static: main::CONST_EVAL2, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc14 (static: main::CONST_EVAL2, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc13 (static: main::CONST_EVAL2, size: 16, align: 8) {
    00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
}

alloc12 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc138+0x1─────╼                         │ ╾──────╼
}

alloc138 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc11 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾────alloc131+0x1─────╼                         │ ╾──────╼
}

alloc131 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc10 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc124───────╼                         │ ╾──────╼
}

alloc124 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc9 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾──────alloc117───────╼                         │ ╾──────╼
}

alloc117 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc8 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾────alloc110+0x1─────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc110 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc7 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾────alloc103+0x1─────╼ 00 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc103 (size: 2, align: 1) {
    01 02                                           │ ..
}

alloc6 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc96+0x3─────╼                         │ ╾──────╼
}

alloc96 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc5 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾─────alloc87+0x3─────╼                         │ ╾──────╼
}

alloc87 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc4 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾───────alloc78───────╼                         │ ╾──────╼
}

alloc78 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc3 (static: main::CONST_EVAL2, size: 8, align: 8) {
    ╾───────alloc69───────╼                         │ ╾──────╼
}

alloc69 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc2 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾─────alloc60+0x1─────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc60 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

alloc1 (static: main::CONST_EVAL2, size: 16, align: 8) {
    ╾─────alloc51+0x1─────╼ 02 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc51 (size: 4, align: 1) {
    01 02 03 04                                     │ ....
}

promoted[0] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
}

promoted[2] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
}

promoted[4] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[5] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
}

promoted[6] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[7] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
}

promoted[8] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[9] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
}

promoted[10] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[11] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
}

promoted[12] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[13] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
}

promoted[14] in main: &Option<&u8> = {
    let mut _0: &std::option::Option<&u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&u8>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&u8>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[15] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
}

promoted[16] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[17] in main: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

promoted[18] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[19] in main: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

promoted[20] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[21] in main: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

promoted[22] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[23] in main: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

promoted[24] in main: &Option<&[Z]> = {
    let mut _0: &std::option::Option<&[Z]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[Z]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[25] in main: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

promoted[26] in main: &Option<&[Z]> = {
    let mut _0: &std::option::Option<&[Z]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[Z]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[27] in main: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

promoted[28] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[29] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

promoted[30] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[31] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

promoted[32] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[33] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

promoted[34] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[35] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

promoted[36] in main: &Option<&[Z]> = {
    let mut _0: &std::option::Option<&[Z]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[Z]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[37] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

promoted[38] in main: &Option<&[Z]> = {
    let mut _0: &std::option::Option<&[Z]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[Z]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[39] in main: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

promoted[40] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[41] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

promoted[42] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[43] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

promoted[44] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[45] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

promoted[46] in main: &Option<&Z> = {
    let mut _0: &std::option::Option<&Z>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&Z>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&Z>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[47] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

promoted[48] in main: &Option<&[Z]> = {
    let mut _0: &std::option::Option<&[Z]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[Z]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[49] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

promoted[50] in main: &Option<&[Z]> = {
    let mut _0: &std::option::Option<&[Z]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[Z]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[Z]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[51] in main: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

promoted[52] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[53] in main: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

promoted[54] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[55] in main: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

promoted[56] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[57] in main: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

promoted[58] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[59] in main: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

promoted[60] in main: &Option<&[N]> = {
    let mut _0: &std::option::Option<&[N]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[N]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[61] in main: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

promoted[62] in main: &Option<&[N]> = {
    let mut _0: &std::option::Option<&[N]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[N]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[63] in main: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

promoted[64] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[65] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

promoted[66] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[67] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

promoted[68] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[69] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

promoted[70] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[71] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

promoted[72] in main: &Option<&[N]> = {
    let mut _0: &std::option::Option<&[N]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[N]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[73] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

promoted[74] in main: &Option<&[N]> = {
    let mut _0: &std::option::Option<&[N]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[N]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[75] in main: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

promoted[76] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[77] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

promoted[78] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[79] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

promoted[80] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[81] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

promoted[82] in main: &Option<&N> = {
    let mut _0: &std::option::Option<&N>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&N>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&N>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[83] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

promoted[84] in main: &Option<&[N]> = {
    let mut _0: &std::option::Option<&[N]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[N]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[85] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

promoted[86] in main: &Option<&[N]> = {
    let mut _0: &std::option::Option<&[N]>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&[N]>; // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30

    bb0: {
        _1 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:36:20: 36:30
                                         // + literal: Const { ty: Option<&[N]>, val: Unevaluated(main::CONST_EVAL, [], None) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[87] in main: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

const main::CONST_EVAL: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _13: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _12: &[N];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[N]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _5: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _4: &[N];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _6: &[N; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _4 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[N]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _13: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _12: &[N];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[N]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [N]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let _12: &[N];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _13: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[N]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: &[N];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _5: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _6: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _4 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[N]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let _12: &[N];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _13: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[N]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [N]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _12: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _4: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _6: &[N; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _4 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _12: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let _12: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _6: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _4 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let _12: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _12: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _4: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _6: &[N; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _4 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _12: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let _12: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _6: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _4 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let _12: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _13: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&N>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _11: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _10: &[N];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[N]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _5: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _4: &[N];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _6: &[N; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _4 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[N]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _11: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _10: &[N];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[N]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [N]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let _10: &[N];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _11: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[N]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: &[N];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _5: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _6: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _4 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[N]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let _10: &[N];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _11: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[N]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [N]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _10: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _4: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _6: &[N; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _4 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _10: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let _10: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _6: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _4 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let _10: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _10: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _4: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _6: &[N; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _4 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _10: &N;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let _10: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _5: &N;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _6: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _4 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&N>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let _10: &N;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _11: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&N>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _10: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _9: &[N];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let mut _11: &[N; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[N]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _1: &[N];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _10: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _9: &[N];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let mut _11: &[N; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[N]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [N]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let _9: &[N];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    let mut _10: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    let mut _11: &[N; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[N]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let _1: &[N];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[N]> {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let _9: &[N];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    let mut _10: &[N];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    let mut _11: &[N; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        _0 = Option::<&[N]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[N]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[N]> = {
    let mut _0: std::option::Option<&[N]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [N]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _9: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let mut _11: &[N; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _1: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        _0 = const Option::<&N>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // + literal: Const { ty: Option<&N>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _9: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let mut _11: &[N; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let _9: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    let mut _11: &[N; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let _1: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        _0 = const Option::<&N>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // + literal: Const { ty: Option<&N>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let _9: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    let mut _11: &[N; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _9: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let mut _11: &[N; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _1: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        _0 = const Option::<&N>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // + literal: Const { ty: Option<&N>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _9: &N;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let mut _11: &[N; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let _9: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    let mut _11: &[N; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let _1: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        _0 = const Option::<&N>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // + literal: Const { ty: Option<&N>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 1] = {
    let mut _0: &[N; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [N; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&N> {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[N; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [N; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let _9: &N;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    let mut _10: &N;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    let mut _11: &[N; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[N; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        _0 = Option::<&N>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&N>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&N> = {
    let mut _0: std::option::Option<&N>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static N> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _13: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _12: &[Z];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _14: &[Z; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[Z]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _5: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _4: &[Z];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _6: &[Z; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _4 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[Z]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _13: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let _12: &[Z];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        let mut _14: &[Z; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[Z]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [Z]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let _12: &[Z];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _13: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _14: &[Z; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[Z]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: &[Z];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _5: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _6: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _4 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[Z]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    let _12: &[Z];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    let mut _13: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
    let mut _14: &[Z; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:45: 78:63
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:62: 78:63
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:29: 78:43
    }

    bb1: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        _12 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:33: 78:34
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:70: 78:71
        _0 = Option::<&[Z]>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:65: 78:72
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:71: 78:72
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:78:74: 78:96

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [Z]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _12: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _14: &[Z; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _4: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _6: &[Z; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _4 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let _12: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        let mut _14: &[Z; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let _12: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _14: &[Z; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _6: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _4 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    let _12: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
    let mut _14: &[Z; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:41: 79:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:58: 79:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:29: 79:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        _12 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:30: 79:31
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:66: 79:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:61: 79:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:67: 79:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:79:70: 79:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _12: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _14: &[Z; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _4: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _6: &[Z; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _4 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let _12: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        let mut _14: &[Z; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let _12: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _14: &[Z; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _6: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _4 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 4] = {
    let mut _0: &[Z; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let mut _1: [Z; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _4: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _4 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _5 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _3: &[Z; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    let _4: [Z; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _8: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    let _12: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    let mut _13: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
    let mut _14: &[Z; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
                                         // + literal: Const { ty: &[Z; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:41: 80:59
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:58: 80:59
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:29: 80:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        _12 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:37: 80:38
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:66: 80:67
        _0 = Option::<&Z>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:61: 80:68
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:67: 80:68
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:80:70: 80:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _11: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _10: &[Z];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _12: &[Z; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[Z]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _5: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _4: &[Z];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _6: &[Z; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _4 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[Z]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _11: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let _10: &[Z];                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        let mut _12: &[Z; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[Z]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [Z]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let _10: &[Z];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _11: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _12: &[Z; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[Z]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: &[Z];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _5: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _6: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _4 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[Z]>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    let _10: &[Z];                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    let mut _11: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
    let mut _12: &[Z; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:45: 82:57
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:56: 82:57
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:29: 82:43
    }

    bb1: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        _10 = &(*_1)[1:-1];              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:33: 82:34
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:64: 82:65
        _0 = Option::<&[Z]>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:59: 82:66
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:65: 82:66
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:82:68: 82:90

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [Z]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _10: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _12: &[Z; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _4: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _6: &[Z; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _4 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let _10: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        let mut _12: &[Z; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let _10: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _12: &[Z; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _6: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _4 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    let _10: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
    let mut _12: &[Z; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:41: 83:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:52: 83:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:29: 83:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        _10 = &(*_1)[0 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:30: 83:31
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:60: 83:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:55: 83:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:61: 83:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:83:64: 83:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _10: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _12: &[Z; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _4: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _6: &[Z; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _4 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let _10: &Z;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        let mut _12: &[Z; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let _10: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _12: &[Z; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _5: &Z;                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _6: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _4 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&Z>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 2] = {
    let mut _0: &[Z; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let mut _1: [Z; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _3: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _3 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _3: &[Z; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    let _4: [Z; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    let _10: &Z;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    let mut _11: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
    let mut _12: &[Z; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
                                         // + literal: Const { ty: &[Z; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:41: 84:53
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:52: 84:53
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:29: 84:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        _10 = &(*_1)[-1 of 2];           // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:37: 84:38
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:60: 84:61
        _0 = Option::<&Z>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:55: 84:62
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:61: 84:62
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:84:64: 84:84

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _10: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _9: &[Z];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let mut _11: &[Z; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[Z]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _1: &[Z];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _10: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let _9: &[Z];                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        let mut _11: &[Z; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[Z]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [Z]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let _9: &[Z];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    let mut _10: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    let mut _11: &[Z; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[Z]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let _1: &[Z];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&[Z]> {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    let _9: &[Z];                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    let mut _10: &[Z];                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
    let mut _11: &[Z; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:45: 86:54
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:53: 86:54
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:29: 86:43
    }

    bb1: {
        _0 = Option::<&[Z]>::None;       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        _9 = &(*_1)[1:-1];               // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:33: 86:34
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:61: 86:62
        _0 = Option::<&[Z]>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:56: 86:63
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:62: 86:63
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&[Z]> = {
    let mut _0: std::option::Option<&[Z]>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:86:65: 86:87

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static [Z]> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _9: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let mut _11: &[Z; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _1: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        _0 = const Option::<&Z>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // + literal: Const { ty: Option<&Z>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let _9: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        let mut _11: &[Z; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let _9: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    let mut _11: &[Z; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let _1: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        _0 = const Option::<&Z>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // + literal: Const { ty: Option<&Z>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    let _9: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
    let mut _11: &[Z; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:41: 87:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:49: 87:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:29: 87:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        _9 = &(*_1)[0 of 2];             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:30: 87:31
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:57: 87:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:52: 87:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:58: 87:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:87:61: 87:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _9: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let mut _11: &[Z; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _1: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        _0 = const Option::<&Z>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
                                         // + literal: Const { ty: Option<&Z>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let _9: &Z;                      // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        let mut _11: &[Z; 1];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        StorageLive(_9);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let _9: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    let mut _11: &[Z; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let _1: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        _0 = const Option::<&Z>::None;   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
                                         // + literal: Const { ty: Option<&Z>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[Z; 1] = {
    let mut _0: &[Z; 1];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let mut _1: [Z; 1];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _2: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21

    bb0: {
        _2 = Z;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
        _1 = [move _2];                  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&Z> {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81
    let mut _1: &[Z];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[Z; 1];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _3: &[Z; 1];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    let _4: [Z; 1];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:25:9: 25:24
    let mut _5: Z;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:20:20: 20:21
    let mut _6: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    let _9: &Z;                          // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    let mut _10: &Z;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
    let mut _11: &[Z; 1];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _11 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
                                         // + literal: Const { ty: &[Z; 1], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_11);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        _1 = move _2 as &[Z] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:41: 88:50
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:49: 88:50
        _6 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _7 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        _8 = Ge(move _6, move _7);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
        switchInt(move _8) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:29: 88:39
    }

    bb1: {
        _0 = Option::<&Z>::None;         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        _9 = &(*_1)[-1 of 2];            // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:37: 88:38
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _10 = &(*_9);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:57: 88:58
        _0 = Option::<&Z>::Some(move _10); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:52: 88:59
        StorageDead(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:58: 88:59
        StorageDead(_9);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&Z> = {
    let mut _0: std::option::Option<&Z>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:88:61: 88:81

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static Z> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let _12: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:54: 91:55
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _12 = &((*_1)[0 of 2].0: u8);    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:63: 91:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let _4: &u8;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let mut _6: &[N; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _4 = &((*_1)[0 of 2].0: u8);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let _12: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:54: 91:55
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _12 = &((*_1)[0 of 2].0: u8);    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:63: 91:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let _12: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:54: 91:55
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _12 = &((*_1)[0 of 2].0: u8);    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:63: 91:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _4: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    let mut _6: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _4 = &((*_1)[0 of 2].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    let _12: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:40: 91:55
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:54: 91:55
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:25: 91:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        _12 = &((*_1)[0 of 2].0: u8);    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:28: 91:29
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:62: 91:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:57: 91:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:63: 91:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:91:66: 91:85

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let _12: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:54: 92:55
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _12 = &((*_1)[-1 of 2].0: u8);   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:63: 92:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let _4: &u8;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let mut _6: &[N; 4];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _4 = &((*_1)[-1 of 2].0: u8);    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let _12: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        let mut _14: &[N; 4];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _14 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:54: 92:55
        _9 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _10 = const 2_usize;             // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _11 = Ge(move _9, move _10);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    }

    bb1: {
        StorageLive(_12);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _12 = &((*_1)[-1 of 2].0: u8);   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:63: 92:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let _12: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:54: 92:55
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _12 = &((*_1)[-1 of 2].0: u8);   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:63: 92:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _4: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    let mut _6: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _4 = &((*_1)[-1 of 2].0: u8);    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 4] = {
    let mut _0: &[N; 4];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let mut _1: [N; 4];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _4: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _4 = N(const 3_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _5 = N(const 4_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3, move _4, move _5]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 4];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _3: &[N; 4];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    let _4: [N; 4];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _8: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _9: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _10: usize;                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let mut _11: bool;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    let _12: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    let mut _13: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
    let mut _14: &[N; 4];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
    scope 1 {
        debug x => _12;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _14 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
                                         // + literal: Const { ty: &[N; 4], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_14);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:40: 92:55
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:54: 92:55
        _9 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _10 = const 2_usize;             // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        _11 = Ge(move _9, move _10);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
        switchInt(move _11) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:25: 92:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        _12 = &((*_1)[-1 of 2].0: u8);   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:35: 92:36
        StorageLive(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _13 = &(*_12);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:62: 92:63
        _0 = Option::<&u8>::Some(move _13); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:57: 92:64
        StorageDead(_13);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:63: 92:64
        StorageDead(_12);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:92:66: 92:85

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let _10: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:48: 94:49
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _10 = &((*_1)[0 of 2].0: u8);    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:57: 94:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let _4: &u8;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let mut _6: &[N; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _4 = &((*_1)[0 of 2].0: u8);     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let _10: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:48: 94:49
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _10 = &((*_1)[0 of 2].0: u8);    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:57: 94:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let _10: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:48: 94:49
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _10 = &((*_1)[0 of 2].0: u8);    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:57: 94:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _4: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    let mut _6: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _4 = &((*_1)[0 of 2].0: u8);     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    let _10: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:40: 94:49
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:48: 94:49
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:25: 94:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        _10 = &((*_1)[0 of 2].0: u8);    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:28: 94:29
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:56: 94:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:51: 94:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:57: 94:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:94:60: 94:79

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let _10: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:48: 95:49
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _10 = &((*_1)[-1 of 2].0: u8);   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:57: 95:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:83: 45:84
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let _4: &u8;                     // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let mut _6: &[N; 2];             // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }

    bb0: {
        _6 = const _;                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _2 = _3;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _4 = &((*_1)[-1 of 2].0: u8);    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let _10: &u8;                    // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        let mut _12: &[N; 2];            // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }

    bb0: {
        StorageLive(_1);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:47: 45:57
        StorageLive(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageLive(_3);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _12 = const _;                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _2 = &(*_3);                     // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageDead(_2);                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:48: 95:49
        _7 = Len((*_1));                 // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _8 = const 2_usize;              // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _9 = Ge(move _7, move _8);       // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    }

    bb1: {
        StorageLive(_10);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _10 = &((*_1)[-1 of 2].0: u8);   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:57: 95:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:69: 45:70
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb2: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:78: 45:82
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:45:35: 45:84
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

const main::CONST_EVAL: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let _10: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::CONST_EVAL, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:48: 95:49
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _10 = &((*_1)[-1 of 2].0: u8);   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:57: 95:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:80: 46:81
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:32:9: 32:35
    }
}

promoted[0] in main::CONST_EVAL: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
}

fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _4: &u8;                         // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    let mut _5: &u8;                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    let mut _6: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    }

    bb0: {
        _6 = const _;                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = _6;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _2 = _3;                         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _4 = &((*_1)[-1 of 2].0: u8);    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _5 = _4;                         // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _0 = Option::<&u8>::Some(move _5); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

promoted[0] in main::const_eval: &[N; 2] = {
    let mut _0: &[N; 2];                 // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let mut _1: [N; 2];                  // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _2: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _3: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17

    bb0: {
        _2 = N(const 1_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _3 = N(const 2_u8);              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
        _1 = [move _2, move _3];         // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    }
}

// MIR FOR CTFE
fn main::const_eval() -> Option<&u8> {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79
    let mut _1: &[N];                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
    let mut _2: &[N; 2];                 // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _3: &[N; 2];                     // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    let _4: [N; 2];                      // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:9: 13:21
    let mut _5: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _6: N;                       // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:13:12: 13:17
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _8: usize;                   // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let mut _9: bool;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    let _10: &u8;                        // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    let mut _11: &u8;                    // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
    let mut _12: &[N; 2];                // in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
    scope 1 {
        debug x => _10;                  // in scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:41: 46:51
        StorageLive(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageLive(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _12 = const _;                   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
                                         // + literal: Const { ty: &[N; 2], val: Unevaluated(main::const_eval, [], Some(promoted[0])) }
        _3 = &(*_12);                    // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _2 = &(*_3);                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        _1 = move _2 as &[N] (Pointer(Unsize)); // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:40: 95:49
        StorageDead(_2);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:48: 95:49
        _7 = Len((*_1));                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _8 = const 2_usize;              // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        _9 = Ge(move _7, move _8);       // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
        switchInt(move _9) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:25: 95:38
    }

    bb1: {
        _0 = Option::<&u8>::None;        // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:75: 46:79
    }

    bb2: {
        StorageLive(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        _10 = &((*_1)[-1 of 2].0: u8);   // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:35: 95:36
        StorageLive(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _11 = &(*_10);                   // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:56: 95:57
        _0 = Option::<&u8>::Some(move _11); // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:51: 95:58
        StorageDead(_11);                // scope 1 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:57: 95:58
        StorageDead(_10);                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
        goto -> bb3;                     // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:46:67: 46:68
    }

    bb3: {
        StorageDead(_3);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:42: 33:43
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:33:43: 33:43
    }
}

static main::CONST_EVAL2: Option<&u8> = {
    let mut _0: std::option::Option<&u8>; // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:95:60: 95:79

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
        _0 = main::const_eval() -> bb1;  // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:46
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:34: 34:44
                                         // + literal: Const { ty: fn() -> Option<&'static u8> {main::const_eval}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:34:9: 34:47
    }
}

fn N(_1: u8) -> N {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:1: 6:9

    bb0: {
        _0 = N(move _1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:1: 6:9
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:1: 6:9
    }
}

// MIR FOR CTFE
fn N(_1: u8) -> N {
    let mut _0: N;                       // return place in scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:1: 6:9

    bb0: {
        _0 = N(move _1);                 // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:1: 6:9
        return;                          // scope 0 at ui/array-slice-vec/subslice-patterns-const-eval-match.rs:6:1: 6:9
    }
}
