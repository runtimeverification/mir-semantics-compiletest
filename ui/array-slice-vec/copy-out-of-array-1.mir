// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/array-slice-vec/copy-out-of-array-1.rs:7:16: 7:21>::clone(_1: &C) -> C {
    debug self => _1;                    // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:7:16: 7:21
    let mut _0: C;                       // return place in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:7:16: 7:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:7:16: 7:21
        return;                          // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:7:21: 7:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:10:11: 10:11
    let _1: C;                           // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:9: 13:12
    let mut _2: [C; 4];                  // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:19: 13:39
    let mut _3: C;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:20: 13:23
    let mut _4: C;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:25: 13:28
    let mut _5: C;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:30: 13:33
    let mut _6: C;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:35: 13:38
    let mut _8: [C; 4];                  // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:14:19: 14:39
    let mut _9: C;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:14:20: 14:23
    let mut _10: C;                      // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:14:25: 14:28
    let mut _11: C;                      // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:14:30: 14:33
    let mut _12: C;                      // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:14:35: 14:38
    scope 1 {
        debug _d1 => _1;                 // in scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:13:9: 13:12
        let _7: C;                       // in scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:9: 14:12
        scope 2 {
            debug _d3 => _7;             // in scope 2 at ui/array-slice-vec/copy-out-of-array-1.rs:14:9: 14:12
        }
    }

    bb0: {
        _3 = d() -> bb1;                 // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:20: 13:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:13:20: 13:21
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = d() -> bb2;                 // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:25: 13:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:13:25: 13:26
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = d() -> bb3;                 // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:30: 13:33
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:13:30: 13:31
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = d() -> bb4;                 // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:35: 13:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:13:35: 13:36
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = [move _3, move _4, move _5, move _6]; // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:19: 13:39
        _1 = foo(move _2, const 1_usize) -> bb5; // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:13:15: 13:43
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:13:15: 13:18
                                         // + literal: Const { ty: fn([C; 4], usize) -> C {foo}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = d() -> bb6;                 // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:20: 14:23
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:14:20: 14:21
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = d() -> bb7;                // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:25: 14:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:14:25: 14:26
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = d() -> bb8;                // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:30: 14:33
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:14:30: 14:31
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = d() -> bb9;                // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:35: 14:38
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:14:35: 14:36
                                         // + literal: Const { ty: fn() -> C {d}, val: Value(<ZST>) }
    }

    bb9: {
        _8 = [move _9, move _10, move _11, move _12]; // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:19: 14:39
        _7 = foo(move _8, const 3_usize) -> bb10; // scope 1 at ui/array-slice-vec/copy-out-of-array-1.rs:14:15: 14:43
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:14:15: 14:18
                                         // + literal: Const { ty: fn([C; 4], usize) -> C {foo}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:15:2: 15:2
    }
}

fn d() -> C {
    let mut _0: C;                       // return place in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:11:15: 11:16

    bb0: {
        _0 = const C {{ _x: 0_u8 }};     // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:11:19: 11:30
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/copy-out-of-array-1.rs:11:19: 11:30
                                         // + literal: Const { ty: C, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:11:32: 11:32
    }
}

fn foo(_1: [C; 4], _2: usize) -> C {
    debug a => _1;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:17:8: 17:9
    debug i => _2;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:17:19: 17:20
    let mut _0: C;                       // return place in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:17:32: 17:33
    let _3: usize;                       // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:7: 18:8
    let mut _4: usize;                   // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:5: 18:9
    let mut _5: bool;                    // in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:5: 18:9

    bb0: {
        _3 = _2;                         // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:7: 18:8
        _4 = const 4_usize;              // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:5: 18:9
        _5 = Lt(_3, _4);                 // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:5: 18:9
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> bb1; // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:5: 18:9
    }

    bb1: {
        _0 = _1[_3];                     // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:18:5: 18:9
        return;                          // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:19:2: 19:2
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:17:15: 17:16

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:17:15: 17:16
        return;                          // scope 0 at ui/array-slice-vec/copy-out-of-array-1.rs:17:15: 17:16
    }
}
