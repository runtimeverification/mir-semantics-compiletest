// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &usize;
    let mut _12: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = Shl(const 1_usize, const 47_i32);
        _1 = Sub(move _2, const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<[u8; 140737488355327]>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;
    let mut _1: usize;
    let mut _2: u32;
    let mut _3: bool;
    let mut _4: (usize, bool);

    bb0: {
        StorageLive(_1);
        _2 = const 47_i32 as u32 (IntToInt);
        _3 = Lt(move _2, const 64_u32);
        assert(move _3, "attempt to shift left by `{}`, which would overflow", const 47_i32) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1 = Shl(const 1_usize, const 47_i32);
        _4 = CheckedSub(_1, const 1_usize);
        assert(!move (_4.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1, const 1_usize) -> [success: bb2, unwind continue];
    }

    bb2: {
        _0 = move (_4.0: usize);
        StorageDead(_1);
        return;
    }
}
