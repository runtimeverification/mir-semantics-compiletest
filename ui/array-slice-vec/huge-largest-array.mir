// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/huge-largest-array.rs:12:15: 12:15
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/array-slice-vec/huge-largest-array.rs:14:2: 14:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:63
    let mut _2: (usize, bool);           // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:63
    let mut _3: usize;                   // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:59
    let mut _4: (usize, bool);           // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:59

    bb0: {
        _4 = CheckedShl(const 1_usize, const 47_i32); // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:59
        _3 = move (_4.0: usize);         // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:59
        _2 = CheckedSub(_3, const 1_usize); // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:63
        _1 = move (_2.0: usize);         // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:50: 13:63
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:16: 13:48

    bb0: {
        _1 = std::mem::size_of::<[u8; 140737488355327]>() -> bb1; // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:16: 13:48
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/huge-largest-array.rs:13:16: 13:46
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<[u8; 140737488355327]>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:44
    let mut _1: usize;                   // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:40
    let mut _2: (usize, bool);           // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:40
    let mut _3: (usize, bool);           // in scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:40
        _2 = CheckedShl(const 1_usize, const 47_i32); // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:40
        assert(!move (_2.1: bool), "attempt to shift left by `{}`, which would overflow", const 47_i32) -> bb1; // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:40
    }

    bb1: {
        _1 = move (_2.0: usize);         // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:40
        _3 = CheckedSub(_1, const 1_usize); // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:44
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", move _1, const 1_usize) -> bb2; // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:44
    }

    bb2: {
        _0 = move (_3.0: usize);         // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:44
        StorageDead(_1);                 // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:43: 13:44
        return;                          // scope 0 at ui/array-slice-vec/huge-largest-array.rs:13:31: 13:44
    }
}
