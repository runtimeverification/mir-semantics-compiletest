// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/vec-late-init.rs:5:15: 5:15
    let mut _1: std::vec::Vec<isize>;    // in scope 0 at ui/array-slice-vec/vec-late-init.rs:6:9: 6:18
    let mut _2: std::vec::Vec<isize>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _3: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[isize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[isize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _10: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str];                // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
    let mut _12: &[&str; 2];             // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
    let _13: &[&str; 2];                 // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
    let mut _19: &isize;                 // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
    let _20: &isize;                     // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
    let _21: &isize;                     // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
    let mut _22: &std::vec::Vec<isize>;  // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:25
    let mut _24: bool;                   // in scope 0 at ui/array-slice-vec/vec-late-init.rs:9:1: 9:2
    let mut _25: *const [isize; 1];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug later => _1;               // in scope 1 at ui/array-slice-vec/vec-late-init.rs:6:9: 6:18
        let mut _23: &[&str; 2];         // in scope 1 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
        scope 2 {
        }
        scope 3 {
        }
    }

    bb0: {
        _24 = const false;               // scope 0 at ui/array-slice-vec/vec-late-init.rs:6:9: 6:18
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind: bb10]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [isize; 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _25 = (((_8.0: std::ptr::Unique<[isize; 1]>).0: std::ptr::NonNull<[isize; 1]>).0: *const [isize; 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_25) = [const 1_isize];        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _24 = const true;                // scope 1 at ui/array-slice-vec/vec-late-init.rs:7:15: 7:20
        _1 = move _2;                    // scope 1 at ui/array-slice-vec/vec-late-init.rs:7:15: 7:20
        _23 = const _;                   // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _13 = _23;                       // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
        _12 = _13;                       // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
        _11 = move _12 as &[&str] (Pointer(Unsize)); // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
        _22 = &_1;                       // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:25
        _21 = <Vec<isize> as Index<usize>>::index(move _22, const 0_usize) -> [return: bb3, unwind: bb10]; // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = _21;                       // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
        _19 = _20;                       // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _19) -> [return: bb4, unwind: bb10]; // scope 1 at ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-late-init.rs:8:20: 8:28
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = [move _18];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = &_17;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = _16;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = move _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> [return: bb5, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _print(move _10) -> [return: bb6, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/array-slice-vec/vec-late-init.rs:9:1: 9:2
    }

    bb7: {
        _24 = const false;               // scope 0 at ui/array-slice-vec/vec-late-init.rs:9:1: 9:2
        return;                          // scope 0 at ui/array-slice-vec/vec-late-init.rs:9:2: 9:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/array-slice-vec/vec-late-init.rs:5:1: 9:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/array-slice-vec/vec-late-init.rs:9:1: 9:2
    }

    bb10 (cleanup): {
        switchInt(_24) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/array-slice-vec/vec-late-init.rs:9:1: 9:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
    let mut _1: [&str; 2];               // in scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
        return;                          // scope 0 at ui/array-slice-vec/vec-late-init.rs:8:14: 8:18
    }
}
