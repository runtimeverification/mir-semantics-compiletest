// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:7:11: 7:11
    let _1: [i32; 3];                    // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:8:9: 8:11
    let _2: usize;                       // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:43
    let mut _3: usize;                   // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:39
    let mut _4: usize;                   // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:21: 9:39
    let mut _5: bool;                    // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:39
    let mut _6: (usize, bool);           // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:43
    let mut _7: usize;                   // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:5: 9:44
    let mut _8: bool;                    // in scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:5: 9:44
    scope 1 {
        debug xs => _1;                  // in scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:8:9: 8:11
    }

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:8:14: 8:23
        _4 = std::mem::size_of::<isize>() -> bb1; // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:21: 9:39
                                         // mir::Constant
                                         // + span: ui/array-slice-vec/bounds-check-no-overflow.rs:9:21: 9:37
                                         // + literal: Const { ty: fn() -> usize {std::mem::size_of::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Eq(_4, const 0_usize);      // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:39
        assert(!move _5, "attempt to divide `{}` by zero", const _) -> bb2; // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:39
    }

    bb2: {
        _3 = Div(const _, move _4);      // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:39
        _6 = CheckedAdd(_3, const 1_usize); // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:43
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_usize) -> bb3; // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:43
    }

    bb3: {
        _2 = move (_6.0: usize);         // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:8: 9:43
        _7 = const 3_usize;              // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:5: 9:44
        _8 = Lt(_2, _7);                 // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:5: 9:44
        assert(move _8, "index out of bounds: the length is {} but the index is {}", move _7, _2) -> bb4; // scope 1 at ui/array-slice-vec/bounds-check-no-overflow.rs:9:5: 9:44
    }

    bb4: {
        return;                          // scope 0 at ui/array-slice-vec/bounds-check-no-overflow.rs:10:2: 10:2
    }
}
