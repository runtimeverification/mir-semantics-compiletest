// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn primitive_compound() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:19:25: 19:25
    let mut _1: std::vec::Vec<Side>;     // in scope 0 at ui/expr/compound-assignment/eval-order.rs:20:9: 20:23
    let mut _3: i32;                     // in scope 0 at ui/expr/compound-assignment/eval-order.rs:26:12: 29:6
    let _4: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:27:9: 27:35
    let mut _5: &mut std::vec::Vec<Side>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:27:9: 27:35
    let mut _6: Side;                    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:27:25: 27:34
    let mut _7: Wrapper<i32>;            // in scope 0 at ui/expr/compound-assignment/eval-order.rs:23:5: 26:6
    let _8: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:24:9: 24:35
    let mut _9: &mut std::vec::Vec<Side>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:24:9: 24:35
    let mut _10: Side;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:24:25: 24:34
    let mut _11: (i32, bool);            // in scope 0 at ui/expr/compound-assignment/eval-order.rs:23:5: 29:6
    let mut _12: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:5: 31:62
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 347:10
    let mut _14: &[Side];                // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:22: 31:36
    let mut _15: &std::vec::Vec<Side>;   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:22: 31:32
    let mut _16: std::ops::RangeFull;    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:33: 31:35
    let mut _17: isize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:50: 31:59
    let mut _18: isize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:39: 31:48
    let mut _19: usize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
    let mut _20: usize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
    let mut _21: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
    let mut _22: !;                      // in scope 0 at ui/expr/compound-assignment/eval-order.rs:31:5: 31:62
    scope 1 {
        debug side_order => _1;          // in scope 1 at ui/expr/compound-assignment/eval-order.rs:20:9: 20:23
        let mut _2: Wrapper<i32>;        // in scope 1 at ui/expr/compound-assignment/eval-order.rs:21:9: 21:16
        scope 2 {
            debug int => _2;             // in scope 2 at ui/expr/compound-assignment/eval-order.rs:21:9: 21:16
        }
    }

    bb0: {
        _1 = Vec::<Side>::new() -> bb1;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<Side> {Vec::<Side>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const Wrapper::<i32>(0_i32); // scope 1 at ui/expr/compound-assignment/eval-order.rs:21:19: 21:29
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:21:19: 21:29
                                         // + literal: Const { ty: Wrapper<i32>, val: Value(Scalar(0x00000000)) }
        _5 = &mut _1;                    // scope 2 at ui/expr/compound-assignment/eval-order.rs:27:9: 27:35
        _6 = const Side::Rhs;            // scope 2 at ui/expr/compound-assignment/eval-order.rs:27:25: 27:34
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:27:25: 27:34
                                         // + literal: Const { ty: Side, val: Value(Scalar(0x01)) }
        _4 = Vec::<Side>::push(move _5, move _6) -> [return: bb2, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:27:9: 27:35
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:27:20: 27:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Side>, Side) {Vec::<Side>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = const 0_i32;                // scope 2 at ui/expr/compound-assignment/eval-order.rs:28:9: 28:10
        _9 = &mut _1;                    // scope 2 at ui/expr/compound-assignment/eval-order.rs:24:9: 24:35
        _10 = const Side::Lhs;           // scope 2 at ui/expr/compound-assignment/eval-order.rs:24:25: 24:34
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:24:25: 24:34
                                         // + literal: Const { ty: Side, val: Value(Scalar(0x00)) }
        _8 = Vec::<Side>::push(move _9, move _10) -> [return: bb3, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:24:9: 24:35
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:24:20: 24:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Side>, Side) {Vec::<Side>::push}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = move _2;                    // scope 2 at ui/expr/compound-assignment/eval-order.rs:25:9: 25:12
        _11 = CheckedAdd((_7.0: i32), _3); // scope 2 at ui/expr/compound-assignment/eval-order.rs:23:5: 29:6
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", (_7.0: i32), move _3) -> [success: bb4, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:23:5: 29:6
    }

    bb4: {
        (_7.0: i32) = move (_11.0: i32); // scope 2 at ui/expr/compound-assignment/eval-order.rs:23:5: 29:6
        _15 = &_1;                       // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:22: 31:32
        _14 = <Vec<Side> as Index<RangeFull>>::index(move _15, move _16) -> [return: bb5, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:22: 31:36
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:31:22: 31:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Side>, RangeFull) -> &'a <Vec<Side> as Index<RangeFull>>::Output {<Vec<Side> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _19 = Len((*_14));               // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
        _20 = const 2_usize;             // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
        _21 = Eq(move _19, move _20);    // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
        switchInt(move _21) -> [0: bb7, otherwise: bb6]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:38: 31:60
    }

    bb6: {
        _18 = discriminant((*_14)[0 of 2]); // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:22: 31:36
        switchInt(move _18) -> [1: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb7: {
        _13 = const false;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
        goto -> bb10;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
    }

    bb8: {
        _17 = discriminant((*_14)[1 of 2]); // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:22: 31:36
        switchInt(move _17) -> [0: bb9, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb9: {
        _13 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
        goto -> bb10;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
    }

    bb10: {
        _12 = Not(move _13);             // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:5: 31:62
        switchInt(move _12) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:5: 31:62
    }

    bb11: {
        _22 = core::panicking::panic(const "assertion failed: matches!(side_order [..], [Side :: Rhs, Side :: Lhs])") -> bb14; // scope 2 at ui/expr/compound-assignment/eval-order.rs:31:5: 31:62
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:31:5: 31:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        drop(_1) -> bb13;                // scope 0 at ui/expr/compound-assignment/eval-order.rs:32:1: 32:2
    }

    bb13: {
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:32:2: 32:2
    }

    bb14 (cleanup): {
        drop(_1) -> bb15;                // scope 0 at ui/expr/compound-assignment/eval-order.rs:32:1: 32:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:19:1: 32:2
    }
}

fn generic_compound() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:35:50: 35:50
    let mut _1: std::vec::Vec<Side>;     // in scope 0 at ui/expr/compound-assignment/eval-order.rs:36:9: 36:23
    let mut _3: T;                       // in scope 0 at ui/expr/compound-assignment/eval-order.rs:37:50: 37:68
    let _4: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:39:5: 45:6
    let mut _5: &mut T;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:39:5: 42:8
    let mut _6: Wrapper<T>;              // in scope 0 at ui/expr/compound-assignment/eval-order.rs:39:5: 42:6
    let _7: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:40:9: 40:35
    let mut _8: &mut std::vec::Vec<Side>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:40:9: 40:35
    let mut _9: Side;                    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:40:25: 40:34
    let mut _10: T;                      // in scope 0 at ui/expr/compound-assignment/eval-order.rs:42:12: 45:6
    let _11: ();                         // in scope 0 at ui/expr/compound-assignment/eval-order.rs:43:9: 43:35
    let mut _12: &mut std::vec::Vec<Side>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:43:9: 43:35
    let mut _13: Side;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:43:25: 43:34
    let mut _14: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:5: 47:62
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 347:10
    let mut _16: &[Side];                // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:22: 47:36
    let mut _17: &std::vec::Vec<Side>;   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:22: 47:32
    let mut _18: std::ops::RangeFull;    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:33: 47:35
    let mut _19: isize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:50: 47:59
    let mut _20: isize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:39: 47:48
    let mut _21: usize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
    let mut _22: usize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
    let mut _23: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
    let mut _24: !;                      // in scope 0 at ui/expr/compound-assignment/eval-order.rs:47:5: 47:62
    let mut _25: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:48:1: 48:2
    scope 1 {
        debug side_order => _1;          // in scope 1 at ui/expr/compound-assignment/eval-order.rs:36:9: 36:23
        let mut _2: Wrapper<T>;          // in scope 1 at ui/expr/compound-assignment/eval-order.rs:37:9: 37:27
        scope 2 {
            debug add_assignable => _2;  // in scope 2 at ui/expr/compound-assignment/eval-order.rs:37:9: 37:27
        }
    }

    bb0: {
        _25 = const false;               // scope 0 at ui/expr/compound-assignment/eval-order.rs:36:9: 36:23
        _1 = Vec::<Side>::new() -> bb1;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<Side> {Vec::<Side>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <T as Default>::default() -> [return: bb2, unwind: bb18]; // scope 1 at ui/expr/compound-assignment/eval-order.rs:37:50: 37:68
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:37:50: 37:66
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _25 = const true;                // scope 1 at ui/expr/compound-assignment/eval-order.rs:37:42: 37:69
        _2 = Wrapper::<T>(move _3);      // scope 1 at ui/expr/compound-assignment/eval-order.rs:37:42: 37:69
        _8 = &mut _1;                    // scope 2 at ui/expr/compound-assignment/eval-order.rs:40:9: 40:35
        _9 = const Side::Lhs;            // scope 2 at ui/expr/compound-assignment/eval-order.rs:40:25: 40:34
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:40:25: 40:34
                                         // + literal: Const { ty: Side, val: Value(Scalar(0x00)) }
        _7 = Vec::<Side>::push(move _8, move _9) -> [return: bb3, unwind: bb21]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:40:9: 40:35
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:40:20: 40:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Side>, Side) {Vec::<Side>::push}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = const false;               // scope 2 at ui/expr/compound-assignment/eval-order.rs:41:9: 41:23
        _6 = move _2;                    // scope 2 at ui/expr/compound-assignment/eval-order.rs:41:9: 41:23
        _5 = &mut (_6.0: T);             // scope 2 at ui/expr/compound-assignment/eval-order.rs:39:5: 42:8
        _12 = &mut _1;                   // scope 2 at ui/expr/compound-assignment/eval-order.rs:43:9: 43:35
        _13 = const Side::Rhs;           // scope 2 at ui/expr/compound-assignment/eval-order.rs:43:25: 43:34
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:43:25: 43:34
                                         // + literal: Const { ty: Side, val: Value(Scalar(0x01)) }
        _11 = Vec::<Side>::push(move _12, move _13) -> [return: bb4, unwind: bb17]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:43:9: 43:35
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:43:20: 43:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Side>, Side) {Vec::<Side>::push}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = <T as Default>::default() -> [return: bb5, unwind: bb17]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:44:9: 44:27
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:44:9: 44:25
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = <T as AddAssign>::add_assign(move _5, move _10) -> [return: bb6, unwind: bb17]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:39:5: 45:6
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:39:5: 45:6
                                         // + literal: Const { ty: for<'a> fn(&'a mut T, T) {<T as AddAssign>::add_assign}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb21]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:45:6: 45:7
    }

    bb7: {
        _17 = &_1;                       // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:22: 47:32
        _16 = <Vec<Side> as Index<RangeFull>>::index(move _17, move _18) -> [return: bb8, unwind: bb21]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:22: 47:36
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:47:22: 47:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Side>, RangeFull) -> &'a <Vec<Side> as Index<RangeFull>>::Output {<Vec<Side> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = Len((*_16));               // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
        _22 = const 2_usize;             // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
        _23 = Eq(move _21, move _22);    // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
        switchInt(move _23) -> [0: bb11, otherwise: bb9]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:38: 47:60
    }

    bb9: {
        _20 = discriminant((*_16)[0 of 2]); // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:22: 47:36
        switchInt(move _20) -> [0: bb10, otherwise: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb10: {
        _19 = discriminant((*_16)[1 of 2]); // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:22: 47:36
        switchInt(move _19) -> [1: bb12, otherwise: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb11: {
        _15 = const false;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
        goto -> bb13;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
    }

    bb12: {
        _15 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
        goto -> bb13;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
    }

    bb13: {
        _14 = Not(move _15);             // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:5: 47:62
        switchInt(move _14) -> [0: bb15, otherwise: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:5: 47:62
    }

    bb14: {
        _24 = core::panicking::panic(const "assertion failed: matches!(side_order [..], [Side :: Lhs, Side :: Rhs])") -> bb21; // scope 2 at ui/expr/compound-assignment/eval-order.rs:47:5: 47:62
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:47:5: 47:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _25 = const false;               // scope 1 at ui/expr/compound-assignment/eval-order.rs:48:1: 48:2
        drop(_1) -> bb16;                // scope 0 at ui/expr/compound-assignment/eval-order.rs:48:1: 48:2
    }

    bb16: {
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:48:2: 48:2
    }

    bb17 (cleanup): {
        drop(_6) -> bb21;                // scope 2 at ui/expr/compound-assignment/eval-order.rs:45:6: 45:7
    }

    bb18 (cleanup): {
        drop(_1) -> bb19;                // scope 0 at ui/expr/compound-assignment/eval-order.rs:48:1: 48:2
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:35:1: 48:2
    }

    bb20 (cleanup): {
        drop(_2) -> bb18;                // scope 1 at ui/expr/compound-assignment/eval-order.rs:48:1: 48:2
    }

    bb21 (cleanup): {
        switchInt(_25) -> [0: bb18, otherwise: bb20]; // scope 1 at ui/expr/compound-assignment/eval-order.rs:48:1: 48:2
    }
}

fn custom_compound() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:50:22: 50:22
    let mut _1: std::vec::Vec<Side>;     // in scope 0 at ui/expr/compound-assignment/eval-order.rs:59:9: 59:23
    let _3: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:62:5: 67:6
    let mut _4: &mut custom_compound::Custom; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:62:5: 65:8
    let mut _5: Wrapper<custom_compound::Custom>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:62:5: 65:6
    let _6: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:63:9: 63:35
    let mut _7: &mut std::vec::Vec<Side>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:63:9: 63:35
    let mut _8: Side;                    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:63:25: 63:34
    let mut _9: ();                      // in scope 0 at ui/expr/compound-assignment/eval-order.rs:65:12: 67:6
    let _10: ();                         // in scope 0 at ui/expr/compound-assignment/eval-order.rs:66:9: 66:35
    let mut _11: &mut std::vec::Vec<Side>; // in scope 0 at ui/expr/compound-assignment/eval-order.rs:66:9: 66:35
    let mut _12: Side;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:66:25: 66:34
    let mut _13: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:5: 69:62
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 347:10
    let mut _15: &[Side];                // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:22: 69:36
    let mut _16: &std::vec::Vec<Side>;   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:22: 69:32
    let mut _17: std::ops::RangeFull;    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:33: 69:35
    let mut _18: isize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:50: 69:59
    let mut _19: isize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:39: 69:48
    let mut _20: usize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
    let mut _21: usize;                  // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
    let mut _22: bool;                   // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
    let mut _23: !;                      // in scope 0 at ui/expr/compound-assignment/eval-order.rs:69:5: 69:62
    scope 1 {
        debug side_order => _1;          // in scope 1 at ui/expr/compound-assignment/eval-order.rs:59:9: 59:23
        let mut _2: Wrapper<custom_compound::Custom>; // in scope 1 at ui/expr/compound-assignment/eval-order.rs:60:9: 60:19
        scope 2 {
            debug custom => _2;          // in scope 2 at ui/expr/compound-assignment/eval-order.rs:60:9: 60:19
        }
    }

    bb0: {
        _1 = Vec::<Side>::new() -> bb1;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<Side> {Vec::<Side>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &mut _1;                    // scope 2 at ui/expr/compound-assignment/eval-order.rs:63:9: 63:35
        _8 = const Side::Lhs;            // scope 2 at ui/expr/compound-assignment/eval-order.rs:63:25: 63:34
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:63:25: 63:34
                                         // + literal: Const { ty: Side, val: Value(Scalar(0x00)) }
        _6 = Vec::<Side>::push(move _7, move _8) -> [return: bb2, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:63:9: 63:35
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:63:20: 63:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Side>, Side) {Vec::<Side>::push}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut (_5.0: custom_compound::Custom); // scope 2 at ui/expr/compound-assignment/eval-order.rs:62:5: 65:8
        _11 = &mut _1;                   // scope 2 at ui/expr/compound-assignment/eval-order.rs:66:9: 66:35
        _12 = const Side::Rhs;           // scope 2 at ui/expr/compound-assignment/eval-order.rs:66:25: 66:34
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:66:25: 66:34
                                         // + literal: Const { ty: Side, val: Value(Scalar(0x01)) }
        _10 = Vec::<Side>::push(move _11, move _12) -> [return: bb3, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:66:9: 66:35
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:66:20: 66:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Side>, Side) {Vec::<Side>::push}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = <Custom as AddAssign<()>>::add_assign(move _4, move _9) -> [return: bb4, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:62:5: 67:6
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:62:5: 67:6
                                         // + literal: Const { ty: for<'a> fn(&'a mut Custom, ()) {<Custom as AddAssign<()>>::add_assign}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &_1;                       // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:22: 69:32
        _15 = <Vec<Side> as Index<RangeFull>>::index(move _16, move _17) -> [return: bb5, unwind: bb14]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:22: 69:36
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:69:22: 69:36
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Side>, RangeFull) -> &'a <Vec<Side> as Index<RangeFull>>::Output {<Vec<Side> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = Len((*_15));               // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
        _21 = const 2_usize;             // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
        _22 = Eq(move _20, move _21);    // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
        switchInt(move _22) -> [0: bb8, otherwise: bb6]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:38: 69:60
    }

    bb6: {
        _19 = discriminant((*_15)[0 of 2]); // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:22: 69:36
        switchInt(move _19) -> [0: bb7, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb7: {
        _18 = discriminant((*_15)[1 of 2]); // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:22: 69:36
        switchInt(move _18) -> [1: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb8: {
        _14 = const false;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
        goto -> bb10;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
    }

    bb9: {
        _14 = const true;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
        goto -> bb10;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
    }

    bb10: {
        _13 = Not(move _14);             // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:5: 69:62
        switchInt(move _13) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:5: 69:62
    }

    bb11: {
        _23 = core::panicking::panic(const "assertion failed: matches!(side_order [..], [Side :: Lhs, Side :: Rhs])") -> bb14; // scope 2 at ui/expr/compound-assignment/eval-order.rs:69:5: 69:62
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:69:5: 69:62
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        drop(_1) -> bb13;                // scope 0 at ui/expr/compound-assignment/eval-order.rs:70:1: 70:2
    }

    bb13: {
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:70:2: 70:2
    }

    bb14 (cleanup): {
        drop(_1) -> bb15;                // scope 0 at ui/expr/compound-assignment/eval-order.rs:70:1: 70:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:50:1: 70:2
    }
}

fn custom_compound::<impl at ui/expr/compound-assignment/eval-order.rs:53:5: 53:34>::add_assign(_1: &mut Custom, _2: ()) -> () {
    debug self => _1;                    // in scope 0 at ui/expr/compound-assignment/eval-order.rs:54:23: 54:32
    let mut _0: ();                      // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:54:41: 54:41

    bb0: {
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:56:10: 56:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:72:11: 72:11
    let _1: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:73:5: 73:25
    let _2: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:74:5: 74:30
    let _3: ();                          // in scope 0 at ui/expr/compound-assignment/eval-order.rs:75:5: 75:22

    bb0: {
        _1 = primitive_compound() -> bb1; // scope 0 at ui/expr/compound-assignment/eval-order.rs:73:5: 73:25
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:73:5: 73:23
                                         // + literal: Const { ty: fn() {primitive_compound}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = generic_compound::<i32>() -> bb2; // scope 0 at ui/expr/compound-assignment/eval-order.rs:74:5: 74:30
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:74:5: 74:28
                                         // + literal: Const { ty: fn() {generic_compound::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = custom_compound() -> bb3;   // scope 0 at ui/expr/compound-assignment/eval-order.rs:75:5: 75:22
                                         // mir::Constant
                                         // + span: ui/expr/compound-assignment/eval-order.rs:75:5: 75:20
                                         // + literal: Const { ty: fn() {custom_compound}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:76:2: 76:2
    }
}

fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;              // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:15:1: 15:18

    bb0: {
        _0 = Wrapper::<T>(move _1);      // scope 0 at ui/expr/compound-assignment/eval-order.rs:15:1: 15:18
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:15:1: 15:18
    }
}

// MIR FOR CTFE
fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;              // return place in scope 0 at ui/expr/compound-assignment/eval-order.rs:15:1: 15:18

    bb0: {
        _0 = Wrapper::<T>(move _1);      // scope 0 at ui/expr/compound-assignment/eval-order.rs:15:1: 15:18
        return;                          // scope 0 at ui/expr/compound-assignment/eval-order.rs:15:1: 15:18
    }
}
