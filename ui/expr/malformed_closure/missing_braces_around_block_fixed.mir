// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:12:11: 12:11
    let _1: i32;                         // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:13:9: 13:12
    let _2: i32;                         // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:5: 18:16
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:5: 18:7
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:5: 14:13
    let mut _5: i32;                     // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:9: 14:12
    let mut _6: [closure@ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:21: 14:27]; // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:21: 18:6
    scope 1 {
        debug num => _1;                 // in scope 1 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:13:9: 13:12
    }

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:13:15: 13:16
        _5 = const 5_i32;                // scope 1 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:9: 14:12
        _4 = std::ops::Range::<i32> { start: const 1_i32, end: move _5 }; // scope 1 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:5: 14:13
        _3 = <std::ops::Range<i32> as Iterator>::reduce::<[closure@ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:21: 14:27]>(move _4, move _6) -> bb1; // scope 1 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:5: 18:7
                                         // mir::Constant
                                         // + span: ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:14: 14:20
                                         // + literal: Const { ty: fn(std::ops::Range<i32>, [closure@ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:21: 14:27]) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::reduce::<[closure@ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:21: 14:27]>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Option::<i32>::unwrap(move _3) -> bb2; // scope 1 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:5: 18:16
                                         // mir::Constant
                                         // + span: ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:18:8: 18:14
                                         // + literal: Const { ty: fn(Option<i32>) -> i32 {Option::<i32>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:19:2: 19:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:21: 14:27], _2: i32, _3: i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:22: 14:23
    debug b => _3;                       // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:25: 14:26
    let mut _0: i32;                     // return place in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:14:28: 14:28
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
    let mut _7: &[&str; 2];              // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
    let _8: &[&str; 2];                  // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
    let mut _14: &i32;                   // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
    let _15: &i32;                       // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
    let mut _16: i32;                    // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:9: 17:10
    let mut _17: i32;                    // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:13: 17:14
    let mut _18: (i32, bool);            // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:9: 17:14
    let mut _19: &[&str; 2];             // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22

    bb0: {
        _19 = const _;                   // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _8 = _19;                        // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
        _7 = _8;                         // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
        _15 = &_2;                       // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
        _14 = _15;                       // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _14) -> bb1; // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
                                         // mir::Constant
                                         // + span: ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:24: 16:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _print(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = _2;                        // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:9: 17:10
        _17 = _3;                        // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:13: 17:14
        _18 = CheckedMul(_16, _17);      // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:9: 17:14
        assert(!move (_18.1: bool), "attempt to compute `{} * {}`, which would overflow", move _16, move _17) -> bb4; // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:9: 17:14
    }

    bb4: {
        _0 = move (_18.0: i32);          // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:17:9: 17:14
        return;                          // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:18:6: 18:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
    let mut _1: [&str; 2];               // in scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
        return;                          // scope 0 at ui/expr/malformed_closure/missing_braces_around_block_fixed.rs:16:18: 16:22
    }
}
