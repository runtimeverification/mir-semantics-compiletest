// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn macros() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    scope 1 {
        debug a => const 1_i32;
        let mut _8: &[&str; 1];
    }
    scope 2 {
        debug a => const 1_i32;
        let mut _7: &[&str; 1];
    }

    bb0: {
        _8 = const _;
        _3 = _8 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = const _;
        _6 = _7 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in macros: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in macros: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: i32;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let _11: ();
    let mut _12: std::fmt::Arguments<'_>;
    let mut _13: &[&str];
    let mut _14: bool;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let _18: ();
    let mut _19: std::fmt::Arguments<'_>;
    let mut _20: &[&str];
    let mut _21: &[&str; 1];
    scope 1 {
        debug a => const 1_i32;
        let mut _26: &[&str; 1];
    }
    scope 2 {
        debug a => const 1_i32;
        let mut _25: &[&str; 1];
    }
    scope 3 {
        let mut _24: &[&str; 1];
    }
    scope 4 {
        debug a => const 1_i32;
        let mut _23: &[&str; 1];
    }
    scope 5 {
        debug a => const 1_i32;
        let mut _22: &[&str; 1];
    }

    bb0: {
        _26 = const _;
        _3 = _26 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _25 = const _;
        _6 = _25 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = const 2_i32;
        switchInt(_7) -> [1: bb5, otherwise: bb7];
    }

    bb5: {
        _24 = const _;
        _10 = _24 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = _print(move _9) -> [return: bb9, unwind continue];
    }

    bb7: {
        _23 = const _;
        _13 = _23 as &[&str] (Pointer(Unsize));
        _12 = Arguments::<'_>::new_const(move _13) -> [return: bb8, unwind continue];
    }

    bb8: {
        _11 = _print(move _12) -> [return: bb9, unwind continue];
    }

    bb9: {
        _14 = const true;
        switchInt(move _14) -> [0: bb12, otherwise: bb10];
    }

    bb10: {
        _21 = const _;
        _17 = _21 as &[&str] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_const(move _17) -> [return: bb11, unwind continue];
    }

    bb11: {
        _15 = _print(move _16) -> [return: bb14, unwind continue];
    }

    bb12: {
        _22 = const _;
        _20 = _22 as &[&str] (Pointer(Unsize));
        _19 = Arguments::<'_>::new_const(move _20) -> [return: bb13, unwind continue];
    }

    bb13: {
        _18 = _print(move _19) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "if\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "refutable pattern\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "else-if in irrefutable `if let`\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "else in irrefutable `if let`\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}
