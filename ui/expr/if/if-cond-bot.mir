// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn my_err(_1: String) -> ! {
    debug s => _1;                       // in scope 0 at ui/expr/if/if-cond-bot.rs:5:11: 5:12
    let mut _0: !;                       // return place in scope 0 at ui/expr/if/if-cond-bot.rs:5:25: 5:26
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
    let _6: &[&str; 2];                  // in scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/expr/if/if-cond-bot.rs:6:20: 6:21
    let mut _12: &std::string::String;   // in scope 0 at ui/expr/if/if-cond-bot.rs:6:20: 6:21
    let _13: &std::string::String;       // in scope 0 at ui/expr/if/if-cond-bot.rs:6:20: 6:21
    let mut _14: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _15: &[&str; 2];             // in scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18

    bb0: {
        _15 = const _;                   // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:6:14: 6:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(my_err, [], Some(promoted[0])) }
        _6 = _15;                        // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
        _5 = _6;                         // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
        _13 = &_1;                       // scope 0 at ui/expr/if/if-cond-bot.rs:6:20: 6:21
        _12 = _13;                       // scope 0 at ui/expr/if/if-cond-bot.rs:6:20: 6:21
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb4]; // scope 0 at ui/expr/if/if-cond-bot.rs:6:20: 6:21
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:6:20: 6:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb4]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb4]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = begin_panic::<&str>(const "quux") -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:7:12: 7:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/expr/if/if-cond-bot.rs:8:1: 8:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/expr/if/if-cond-bot.rs:5:1: 8:2
    }
}

promoted[0] in my_err: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
    let mut _1: [&str; 2];               // in scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
        return;                          // scope 0 at ui/expr/if/if-cond-bot.rs:6:14: 6:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/if-cond-bot.rs:10:11: 10:11
    let mut _1: !;                       // in scope 0 at ui/expr/if/if-cond-bot.rs:11:8: 11:33
    let mut _2: std::string::String;     // in scope 0 at ui/expr/if/if-cond-bot.rs:11:15: 11:32
    let mut _3: &str;                    // in scope 0 at ui/expr/if/if-cond-bot.rs:11:15: 11:32
    let _4: &str;                        // in scope 0 at ui/expr/if/if-cond-bot.rs:11:15: 11:20

    bb0: {
        _4 = const "bye";                // scope 0 at ui/expr/if/if-cond-bot.rs:11:15: 11:20
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:11:15: 11:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/expr/if/if-cond-bot.rs:11:15: 11:32
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/expr/if/if-cond-bot.rs:11:15: 11:32
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:11:21: 11:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = my_err(move _2);            // scope 0 at ui/expr/if/if-cond-bot.rs:11:8: 11:33
                                         // mir::Constant
                                         // + span: ui/expr/if/if-cond-bot.rs:11:8: 11:14
                                         // + literal: Const { ty: fn(String) -> ! {my_err}, val: Value(<ZST>) }
    }
}
