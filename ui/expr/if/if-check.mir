// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn even(_1: usize) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: usize;

    bb0: {
        _2 = Lt(_1, const 2_usize);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = const false;
        goto -> bb5;
    }

    bb2: {
        switchInt(move _1) -> [2: bb3, otherwise: bb4];
    }

    bb3: {
        _0 = const true;
        goto -> bb5;
    }

    bb4: {
        _3 = Sub(_1, const 2_usize);
        _0 = even(move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn foo(_1: usize) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: bool;
    let mut _3: usize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &usize;
    let mut _12: !;
    let mut _13: &[&str; 2];

    bb0: {
        _3 = _1;
        _2 = even(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _13 = const _;
        _6 = _13 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6: {
        _12 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

promoted[0] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = foo(const 2_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
