// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_if() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:4:14: 4:14
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:4:20: 4:22
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:4:64: 4:77
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:4:72: 4:76
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:4:64: 4:77
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:4:20: 4:22
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:4:41: 4:45
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:4:72: 4:76
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:4:64: 4:77
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:4:64: 4:77
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:4:64: 4:77
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:4:64: 4:77
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:4:80: 4:80
    }
}

fn test_else() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:6:16: 6:16
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:7:9: 7:11
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:8:5: 8:18
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:8:13: 8:17
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:8:5: 8:18
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:7:9: 7:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:7:46: 7:50
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:8:13: 8:17
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:8:5: 8:18
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:8:5: 8:18
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:8:5: 8:18
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:8:5: 8:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:9:2: 9:2
    }
}

fn test_elseif1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:11:19: 11:19
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:12:9: 12:11
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:13:5: 13:18
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:13:13: 13:17
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:13:5: 13:18
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:12:9: 12:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:12:30: 12:34
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:13:13: 13:17
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:13:5: 13:18
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:13:5: 13:18
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:13:5: 13:18
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:13:5: 13:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:14:2: 14:2
    }
}

fn test_elseif2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:16:19: 16:19
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:17:9: 17:11
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:18:5: 18:18
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:18:13: 18:17
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:18:5: 18:18
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:17:9: 17:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:17:54: 17:58
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:18:13: 18:17
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:18:5: 18:18
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:18:5: 18:18
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:18:5: 18:18
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:18:5: 18:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:19:2: 19:2
    }
}

fn test_elseif3() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:21:19: 21:19
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:22:9: 22:11
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:23:5: 23:18
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:23:13: 23:17
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:23:5: 23:18
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:22:9: 22:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:22:70: 22:74
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:23:13: 23:17
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:23:5: 23:18
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:23:5: 23:18
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:23:5: 23:18
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:23:5: 23:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:24:2: 24:2
    }
}

fn test_inferrence() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:26:22: 26:22
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:27:9: 27:11
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:28:5: 28:18
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:28:13: 28:17
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:28:5: 28:18
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:27:9: 27:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:27:24: 27:28
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:28:13: 28:17
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:28:5: 28:18
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:28:5: 28:18
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:28:5: 28:18
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:28:5: 28:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:29:2: 29:2
    }
}

fn test_if_as_if_condition() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:31:30: 31:30
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:32:9: 32:12
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:32:18: 32:50
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:33:5: 33:19
    let mut _4: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:33:13: 33:18
    let mut _5: !;                       // in scope 0 at ui/expr/if/expr-if.rs:33:5: 33:19
    let mut _7: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:34:18: 34:49
    let mut _8: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:35:5: 35:19
    let mut _9: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:35:13: 35:18
    let mut _10: !;                      // in scope 0 at ui/expr/if/expr-if.rs:35:5: 35:19
    scope 1 {
        debug rs1 => _1;                 // in scope 1 at ui/expr/if/expr-if.rs:32:9: 32:12
        let _6: bool;                    // in scope 1 at ui/expr/if/expr-if.rs:34:9: 34:12
        scope 2 {
            debug rs2 => _6;             // in scope 2 at ui/expr/if/expr-if.rs:34:9: 34:12
        }
    }

    bb0: {
        _2 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:32:44: 32:48
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/expr/if/expr-if.rs:32:18: 32:50
    }

    bb1: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:32:53: 32:57
        goto -> bb3;                     // scope 0 at ui/expr/if/expr-if.rs:32:15: 32:74
    }

    bb2: {
        _1 = const false;                // scope 0 at ui/expr/if/expr-if.rs:32:67: 32:72
        goto -> bb3;                     // scope 0 at ui/expr/if/expr-if.rs:32:15: 32:74
    }

    bb3: {
        _4 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:33:13: 33:18
        _3 = Not(move _4);               // scope 1 at ui/expr/if/expr-if.rs:33:5: 33:19
        switchInt(move _3) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/expr/if/expr-if.rs:33:5: 33:19
    }

    bb4: {
        _5 = core::panicking::panic(const "assertion failed: (rs1)"); // scope 1 at ui/expr/if/expr-if.rs:33:5: 33:19
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:33:5: 33:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _7 = const false;                // scope 1 at ui/expr/if/expr-if.rs:34:28: 34:33
        switchInt(move _7) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/expr/if/expr-if.rs:34:18: 34:49
    }

    bb6: {
        _6 = const false;                // scope 1 at ui/expr/if/expr-if.rs:34:52: 34:57
        goto -> bb8;                     // scope 1 at ui/expr/if/expr-if.rs:34:15: 34:73
    }

    bb7: {
        _6 = const true;                 // scope 1 at ui/expr/if/expr-if.rs:34:67: 34:71
        goto -> bb8;                     // scope 1 at ui/expr/if/expr-if.rs:34:15: 34:73
    }

    bb8: {
        _9 = _6;                         // scope 2 at ui/expr/if/expr-if.rs:35:13: 35:18
        _8 = Not(move _9);               // scope 2 at ui/expr/if/expr-if.rs:35:5: 35:19
        switchInt(move _8) -> [0: bb10, otherwise: bb9]; // scope 2 at ui/expr/if/expr-if.rs:35:5: 35:19
    }

    bb9: {
        _10 = core::panicking::panic(const "assertion failed: (rs2)"); // scope 2 at ui/expr/if/expr-if.rs:35:5: 35:19
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:35:5: 35:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:36:2: 36:2
    }
}

fn test_if_as_block_result() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:38:30: 38:30
    let _1: bool;                        // in scope 0 at ui/expr/if/expr-if.rs:39:9: 39:11
    let mut _2: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:40:5: 40:18
    let mut _3: bool;                    // in scope 0 at ui/expr/if/expr-if.rs:40:13: 40:17
    let mut _4: !;                       // in scope 0 at ui/expr/if/expr-if.rs:40:5: 40:18
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/expr/if/expr-if.rs:39:9: 39:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/expr/if/expr-if.rs:39:50: 39:54
        _3 = _1;                         // scope 1 at ui/expr/if/expr-if.rs:40:13: 40:17
        _2 = Not(move _3);               // scope 1 at ui/expr/if/expr-if.rs:40:5: 40:18
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/expr/if/expr-if.rs:40:5: 40:18
    }

    bb1: {
        _4 = core::panicking::panic(const "assertion failed: (rs)"); // scope 1 at ui/expr/if/expr-if.rs:40:5: 40:18
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:40:5: 40:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:41:2: 41:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/expr-if.rs:43:15: 43:15
    let _1: ();                          // in scope 0 at ui/expr/if/expr-if.rs:44:5: 44:14
    let _2: ();                          // in scope 0 at ui/expr/if/expr-if.rs:45:5: 45:16
    let _3: ();                          // in scope 0 at ui/expr/if/expr-if.rs:46:5: 46:19
    let _4: ();                          // in scope 0 at ui/expr/if/expr-if.rs:47:5: 47:19
    let _5: ();                          // in scope 0 at ui/expr/if/expr-if.rs:48:5: 48:19
    let _6: ();                          // in scope 0 at ui/expr/if/expr-if.rs:49:5: 49:22
    let _7: ();                          // in scope 0 at ui/expr/if/expr-if.rs:50:5: 50:30
    let _8: ();                          // in scope 0 at ui/expr/if/expr-if.rs:51:5: 51:30

    bb0: {
        _1 = test_if() -> bb1;           // scope 0 at ui/expr/if/expr-if.rs:44:5: 44:14
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:44:5: 44:12
                                         // + literal: Const { ty: fn() {test_if}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_else() -> bb2;         // scope 0 at ui/expr/if/expr-if.rs:45:5: 45:16
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:45:5: 45:14
                                         // + literal: Const { ty: fn() {test_else}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = test_elseif1() -> bb3;      // scope 0 at ui/expr/if/expr-if.rs:46:5: 46:19
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:46:5: 46:17
                                         // + literal: Const { ty: fn() {test_elseif1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = test_elseif2() -> bb4;      // scope 0 at ui/expr/if/expr-if.rs:47:5: 47:19
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:47:5: 47:17
                                         // + literal: Const { ty: fn() {test_elseif2}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = test_elseif3() -> bb5;      // scope 0 at ui/expr/if/expr-if.rs:48:5: 48:19
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:48:5: 48:17
                                         // + literal: Const { ty: fn() {test_elseif3}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = test_inferrence() -> bb6;   // scope 0 at ui/expr/if/expr-if.rs:49:5: 49:22
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:49:5: 49:20
                                         // + literal: Const { ty: fn() {test_inferrence}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = test_if_as_if_condition() -> bb7; // scope 0 at ui/expr/if/expr-if.rs:50:5: 50:30
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:50:5: 50:28
                                         // + literal: Const { ty: fn() {test_if_as_if_condition}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = test_if_as_block_result() -> bb8; // scope 0 at ui/expr/if/expr-if.rs:51:5: 51:30
                                         // mir::Constant
                                         // + span: ui/expr/if/expr-if.rs:51:5: 51:28
                                         // + literal: Const { ty: fn() {test_if_as_block_result}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/expr/if/expr-if.rs:52:2: 52:2
    }
}
