// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn even(_1: usize) -> bool {
    debug x => _1;                       // in scope 0 at ui/expr/if/if-check-panic.rs:5:9: 5:10
    let mut _0: bool;                    // return place in scope 0 at ui/expr/if/if-check-panic.rs:5:22: 5:26
    let mut _2: bool;                    // in scope 0 at ui/expr/if/if-check-panic.rs:6:8: 6:13
    let mut _3: usize;                   // in scope 0 at ui/expr/if/if-check-panic.rs:6:8: 6:9
    let mut _4: usize;                   // in scope 0 at ui/expr/if/if-check-panic.rs:8:15: 8:16
    let mut _5: usize;                   // in scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:26
    let mut _6: usize;                   // in scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:22
    let mut _7: (usize, bool);           // in scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:26

    bb0: {
        _3 = _1;                         // scope 0 at ui/expr/if/if-check-panic.rs:6:8: 6:9
        _2 = Lt(move _3, const 2_usize); // scope 0 at ui/expr/if/if-check-panic.rs:6:8: 6:13
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/expr/if/if-check-panic.rs:6:8: 6:13
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/expr/if/if-check-panic.rs:7:16: 7:21
        goto -> bb6;                     // scope 0 at ui/expr/if/if-check-panic.rs:7:9: 7:21
    }

    bb2: {
        _4 = _1;                         // scope 0 at ui/expr/if/if-check-panic.rs:8:15: 8:16
        switchInt(move _4) -> [2: bb3, otherwise: bb4]; // scope 0 at ui/expr/if/if-check-panic.rs:8:15: 8:21
    }

    bb3: {
        _0 = const true;                 // scope 0 at ui/expr/if/if-check-panic.rs:9:16: 9:20
        goto -> bb6;                     // scope 0 at ui/expr/if/if-check-panic.rs:9:9: 9:20
    }

    bb4: {
        _6 = _1;                         // scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:22
        _7 = CheckedSub(_6, const 2_usize); // scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:26
        assert(!move (_7.1: bool), "attempt to compute `{} - {}`, which would overflow", move _6, const 2_usize) -> bb5; // scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:26
    }

    bb5: {
        _5 = move (_7.0: usize);         // scope 0 at ui/expr/if/if-check-panic.rs:11:21: 11:26
        _0 = even(move _5) -> bb6;       // scope 0 at ui/expr/if/if-check-panic.rs:11:16: 11:27
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:11:16: 11:20
                                         // + literal: Const { ty: fn(usize) -> bool {even}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/expr/if/if-check-panic.rs:13:2: 13:2
    }
}

fn foo(_1: usize) -> () {
    debug x => _1;                       // in scope 0 at ui/expr/if/if-check-panic.rs:15:8: 15:9
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/if-check-panic.rs:15:18: 15:18
    let mut _2: bool;                    // in scope 0 at ui/expr/if/if-check-panic.rs:16:8: 16:15
    let mut _3: usize;                   // in scope 0 at ui/expr/if/if-check-panic.rs:16:13: 16:14
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
    let mut _7: &[&str; 2];              // in scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
    let _8: &[&str; 2];                  // in scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/expr/if/if-check-panic.rs:17:24: 17:25
    let mut _14: &usize;                 // in scope 0 at ui/expr/if/if-check-panic.rs:17:24: 17:25
    let _15: &usize;                     // in scope 0 at ui/expr/if/if-check-panic.rs:17:24: 17:25
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _17: &[&str; 2];             // in scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22

    bb0: {
        _3 = _1;                         // scope 0 at ui/expr/if/if-check-panic.rs:16:13: 16:14
        _2 = even(move _3) -> bb1;       // scope 0 at ui/expr/if/if-check-panic.rs:16:8: 16:15
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:16:8: 16:12
                                         // + literal: Const { ty: fn(usize) -> bool {even}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb6, otherwise: bb2]; // scope 0 at ui/expr/if/if-check-panic.rs:16:8: 16:15
    }

    bb2: {
        _17 = const _;                   // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:17:18: 17:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo, [], Some(promoted[0])) }
        _8 = _17;                        // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
        _7 = _8;                         // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
        _15 = &_1;                       // scope 0 at ui/expr/if/if-check-panic.rs:17:24: 17:25
        _14 = _15;                       // scope 0 at ui/expr/if/if-check-panic.rs:17:24: 17:25
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _14) -> bb3; // scope 0 at ui/expr/if/if-check-panic.rs:17:24: 17:25
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:17:24: 17:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = _print(move _5) -> bb5;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/expr/if/if-check-panic.rs:21:2: 21:2
    }

    bb6: {
        _16 = begin_panic::<&str>(const "Number is odd"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:19:16: 19:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

promoted[0] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
    let mut _1: [&str; 2];               // in scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:17:18: 17:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:17:18: 17:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
        return;                          // scope 0 at ui/expr/if/if-check-panic.rs:17:18: 17:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/expr/if/if-check-panic.rs:23:11: 23:11
    let _1: ();                          // in scope 0 at ui/expr/if/if-check-panic.rs:24:5: 24:11

    bb0: {
        _1 = foo(const 3_usize) -> bb1;  // scope 0 at ui/expr/if/if-check-panic.rs:24:5: 24:11
                                         // mir::Constant
                                         // + span: ui/expr/if/if-check-panic.rs:24:5: 24:8
                                         // + literal: Const { ty: fn(usize) {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/expr/if/if-check-panic.rs:25:2: 25:2
    }
}
