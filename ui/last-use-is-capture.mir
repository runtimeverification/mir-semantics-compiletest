// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/last-use-is-capture.rs:8:15: 8:15
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/last-use-is-capture.rs:10:9: 10:10
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/last-use-is-capture.rs:11:20: 11:29
    let mut _4: &std::boxed::Box<isize>; // in scope 0 at ui/last-use-is-capture.rs:11:20: 11:29
    let mut _5: [closure@ui/last-use-is-capture.rs:12:12: 12:14]; // in scope 0 at ui/last-use-is-capture.rs:12:12: 12:40
    let mut _6: &std::boxed::Box<isize>; // in scope 0 at ui/last-use-is-capture.rs:12:12: 12:40
    scope 1 {
        debug k => _1;                   // in scope 1 at ui/last-use-is-capture.rs:10:9: 10:10
        let _2: A;                       // in scope 1 at ui/last-use-is-capture.rs:11:9: 11:11
        scope 2 {
            debug _u => _2;              // in scope 2 at ui/last-use-is-capture.rs:11:9: 11:11
        }
    }

    bb0: {
        _1 = <isize as Into<Box<isize>>>::into(const 22_isize) -> bb1; // scope 0 at ui/last-use-is-capture.rs:10:21: 10:30
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:10:24: 10:28
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {<isize as Into<Box<isize>>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at ui/last-use-is-capture.rs:11:20: 11:29
        _3 = <Box<isize> as Clone>::clone(move _4) -> [return: bb2, unwind: bb7]; // scope 1 at ui/last-use-is-capture.rs:11:20: 11:29
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:11:22: 11:27
                                         // + literal: Const { ty: for<'a> fn(&'a Box<isize>) -> Box<isize> {<Box<isize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = A { a: move _3 };           // scope 1 at ui/last-use-is-capture.rs:11:14: 11:30
        _6 = &_1;                        // scope 2 at ui/last-use-is-capture.rs:12:12: 12:40
        _5 = [closure@ui/last-use-is-capture.rs:12:12: 12:14] { k: move _6 }; // scope 2 at ui/last-use-is-capture.rs:12:12: 12:40
                                         // closure
                                         // + def_id: DefId(0:8 ~ last_use_is_capture[df60]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::boxed::Box<isize>,),
                                         // ]
        _0 = invoke::<[closure@ui/last-use-is-capture.rs:12:12: 12:14]>(move _5) -> [return: bb3, unwind: bb6]; // scope 2 at ui/last-use-is-capture.rs:12:5: 12:42
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:12:5: 12:11
                                         // + literal: Const { ty: fn([closure@ui/last-use-is-capture.rs:12:12: 12:14]) {invoke::<[closure@ui/last-use-is-capture.rs:12:12: 12:14]>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 1 at ui/last-use-is-capture.rs:13:1: 13:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/last-use-is-capture.rs:13:1: 13:2
    }

    bb5: {
        return;                          // scope 0 at ui/last-use-is-capture.rs:13:2: 13:2
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 1 at ui/last-use-is-capture.rs:13:1: 13:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/last-use-is-capture.rs:13:1: 13:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/last-use-is-capture.rs:8:1: 13:2
    }
}

fn invoke(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/last-use-is-capture.rs:9:18: 9:19
    let mut _0: ();                      // return place in scope 0 at ui/last-use-is-capture.rs:9:24: 9:24
    let _2: ();                          // in scope 0 at ui/last-use-is-capture.rs:9:44: 9:47
    let mut _3: F;                       // in scope 0 at ui/last-use-is-capture.rs:9:44: 9:45
    let mut _4: ();                      // in scope 0 at ui/last-use-is-capture.rs:9:44: 9:47

    bb0: {
        _3 = move _1;                    // scope 0 at ui/last-use-is-capture.rs:9:44: 9:45
        _2 = <F as FnOnce<()>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/last-use-is-capture.rs:9:44: 9:47
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:9:44: 9:45
                                         // + literal: Const { ty: extern "rust-call" fn(F, ()) -> <F as FnOnce<()>>::Output {<F as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/last-use-is-capture.rs:9:50: 9:50
    }
}

fn main::{closure#0}(_1: [closure@ui/last-use-is-capture.rs:12:12: 12:14]) -> () {
    debug k => (*(_1.0: &std::boxed::Box<isize>)); // in scope 0 at ui/last-use-is-capture.rs:10:9: 10:10
    let mut _0: ();                      // return place in scope 0 at ui/last-use-is-capture.rs:12:15: 12:15
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
    let mut _5: &[&str; 2];              // in scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
    let _6: &[&str; 2];                  // in scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
    let mut _12: &std::boxed::Box<isize>; // in scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
    let _13: &std::boxed::Box<isize>;    // in scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
    let _14: std::boxed::Box<isize>;     // in scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
    let mut _15: &std::boxed::Box<isize>; // in scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
    let mut _16: &[&str; 2];             // in scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
    let mut _17: &std::boxed::Box<isize>; // in scope 0 at ui/last-use-is-capture.rs:12:12: 12:40

    bb0: {
        _16 = const _;                   // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:12:24: 12:28
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _16;                        // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
        _5 = _6;                         // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
        _17 = deref_copy (_1.0: &std::boxed::Box<isize>); // scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
        _15 = _17;                       // scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
        _14 = <Box<isize> as Clone>::clone(move _15) -> bb1; // scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:12:32: 12:37
                                         // + literal: Const { ty: for<'a> fn(&'a Box<isize>) -> Box<isize> {<Box<isize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = &_14;                      // scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
        _12 = _13;                       // scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<Box<isize>>(move _12) -> [return: bb2, unwind: bb6]; // scope 0 at ui/last-use-is-capture.rs:12:30: 12:39
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:12:30: 12:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Box<isize>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Box<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb3, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_14) -> bb5;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb5: {
        return;                          // scope 0 at ui/last-use-is-capture.rs:12:40: 12:40
    }

    bb6 (cleanup): {
        drop(_14) -> bb7;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:62: 137:63
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/last-use-is-capture.rs:12:12: 12:40
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
    let mut _1: [&str; 2];               // in scope 0 at ui/last-use-is-capture.rs:12:24: 12:28

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:12:24: 12:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/last-use-is-capture.rs:12:24: 12:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
        return;                          // scope 0 at ui/last-use-is-capture.rs:12:24: 12:28
    }
}
