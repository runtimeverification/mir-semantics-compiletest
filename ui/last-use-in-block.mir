// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn lp(_1: String, _2: F) -> T {
    debug s => _1;                       // in scope 0 at ui/last-use-in-block.rs:8:13: 8:14
    debug f => _2;                       // in scope 0 at ui/last-use-in-block.rs:8:24: 8:29
    let mut _0: T;                       // return place in scope 0 at ui/last-use-in-block.rs:8:37: 8:38
    let _3: T;                           // in scope 0 at ui/last-use-in-block.rs:10:13: 10:14
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _5: bool;                    // in scope 0 at ui/last-use-in-block.rs:14:1: 14:2
    scope 1 {
        debug r => _3;                   // in scope 1 at ui/last-use-in-block.rs:10:13: 10:14
    }

    bb0: {
        _5 = const false;                // scope 0 at ui/last-use-in-block.rs:9:5: 12:6
        _5 = const true;                 // scope 0 at ui/last-use-in-block.rs:9:5: 12:6
        _4 = begin_panic::<&str>(const "explicit panic") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/last-use-in-block.rs:14:1: 14:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/last-use-in-block.rs:8:1: 14:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/last-use-in-block.rs:14:1: 14:2
    }

    bb4 (cleanup): {
        switchInt(_5) -> [0: bb2, otherwise: bb3]; // scope 0 at ui/last-use-in-block.rs:14:1: 14:2
    }
}

fn apply(_1: String, _2: F) -> T {
    debug s => _1;                       // in scope 0 at ui/last-use-in-block.rs:16:16: 16:17
    debug f => _2;                       // in scope 0 at ui/last-use-in-block.rs:16:27: 16:32
    let mut _0: T;                       // return place in scope 0 at ui/last-use-in-block.rs:16:40: 16:41
    let mut _3: std::string::String;     // in scope 0 at ui/last-use-in-block.rs:18:7: 18:8
    let mut _4: [closure@ui/last-use-in-block.rs:18:10: 18:13]; // in scope 0 at ui/last-use-in-block.rs:18:10: 18:33
    let mut _5: &mut F;                  // in scope 0 at ui/last-use-in-block.rs:18:10: 18:33

    bb0: {
        _3 = move _1;                    // scope 0 at ui/last-use-in-block.rs:18:7: 18:8
        _5 = &mut _2;                    // scope 0 at ui/last-use-in-block.rs:18:10: 18:33
        _4 = [closure@ui/last-use-in-block.rs:18:10: 18:13] { f: move _5 }; // scope 0 at ui/last-use-in-block.rs:18:10: 18:33
                                         // closure
                                         // + def_id: DefId(0:12 ~ last_use_in_block[63ec]::apply::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     F,
                                         //     i16,
                                         //     extern "rust-call" fn((std::string::String,)) -> T,
                                         //     (&mut F,),
                                         // ]
        _0 = g::<T, [closure@ui/last-use-in-block.rs:18:10: 18:13]>(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at ui/last-use-in-block.rs:18:5: 18:34
                                         // mir::Constant
                                         // + span: ui/last-use-in-block.rs:18:5: 18:6
                                         // + literal: Const { ty: fn(String, [closure@ui/last-use-in-block.rs:18:10: 18:13]) -> T {g::<T, [closure@ui/last-use-in-block.rs:18:10: 18:13]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/last-use-in-block.rs:19:1: 19:2
    }

    bb2: {
        return;                          // scope 0 at ui/last-use-in-block.rs:19:2: 19:2
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/last-use-in-block.rs:19:1: 19:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/last-use-in-block.rs:16:1: 19:2
    }
}

fn g(_1: String, _2: F) -> T {
    debug s => _1;                       // in scope 0 at ui/last-use-in-block.rs:17:16: 17:17
    debug f => _2;                       // in scope 0 at ui/last-use-in-block.rs:17:27: 17:32
    let mut _0: T;                       // return place in scope 0 at ui/last-use-in-block.rs:17:40: 17:41
    let mut _3: &mut F;                  // in scope 0 at ui/last-use-in-block.rs:17:71: 17:72
    let mut _4: (std::string::String,);  // in scope 0 at ui/last-use-in-block.rs:17:71: 17:75
    let mut _5: std::string::String;     // in scope 0 at ui/last-use-in-block.rs:17:73: 17:74

    bb0: {
        _3 = &mut _2;                    // scope 0 at ui/last-use-in-block.rs:17:71: 17:72
        _5 = move _1;                    // scope 0 at ui/last-use-in-block.rs:17:73: 17:74
        _4 = (move _5,);                 // scope 0 at ui/last-use-in-block.rs:17:71: 17:75
        _0 = <F as FnMut<(String,)>>::call_mut(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at ui/last-use-in-block.rs:17:71: 17:75
                                         // mir::Constant
                                         // + span: ui/last-use-in-block.rs:17:71: 17:72
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (String,)) -> <F as FnOnce<(String,)>>::Output {<F as FnMut<(String,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/last-use-in-block.rs:17:75: 17:76
    }

    bb2: {
        return;                          // scope 0 at ui/last-use-in-block.rs:17:76: 17:76
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/last-use-in-block.rs:17:75: 17:76
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/last-use-in-block.rs:17:5: 17:76
    }
}

fn apply::{closure#0}(_1: &mut [closure@ui/last-use-in-block.rs:18:10: 18:13], _2: String) -> T {
    debug v => _2;                       // in scope 0 at ui/last-use-in-block.rs:18:11: 18:12
    debug f => (*((*_1).0: &mut F));     // in scope 0 at ui/last-use-in-block.rs:16:27: 16:32
    let mut _0: T;                       // return place in scope 0 at ui/last-use-in-block.rs:18:20: 18:21
    let mut _3: &mut F;                  // in scope 0 at ui/last-use-in-block.rs:18:24: 18:25
    let mut _4: (std::string::String,);  // in scope 0 at ui/last-use-in-block.rs:18:24: 18:28
    let mut _5: std::string::String;     // in scope 0 at ui/last-use-in-block.rs:18:26: 18:27
    let mut _6: &mut F;                  // in scope 0 at ui/last-use-in-block.rs:18:10: 18:33
    scope 1 {
        debug r => _0;                   // in scope 1 at ui/last-use-in-block.rs:18:20: 18:21
    }

    bb0: {
        _6 = deref_copy ((*_1).0: &mut F); // scope 0 at ui/last-use-in-block.rs:18:24: 18:25
        _3 = &mut (*_6);                 // scope 0 at ui/last-use-in-block.rs:18:24: 18:25
        _5 = move _2;                    // scope 0 at ui/last-use-in-block.rs:18:26: 18:27
        _4 = (move _5,);                 // scope 0 at ui/last-use-in-block.rs:18:24: 18:28
        _0 = <F as FnMut<(String,)>>::call_mut(move _3, move _4) -> bb1; // scope 0 at ui/last-use-in-block.rs:18:24: 18:28
                                         // mir::Constant
                                         // + span: ui/last-use-in-block.rs:18:24: 18:25
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (String,)) -> <F as FnOnce<(String,)>>::Output {<F as FnMut<(String,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/last-use-in-block.rs:18:33: 18:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/last-use-in-block.rs:21:15: 21:15

    bb0: {
        return;                          // scope 0 at ui/last-use-in-block.rs:21:17: 21:17
    }
}
