// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _2: &str;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: &std::string::String;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let _8: &str;
    let mut _9: !;
    let mut _10: (&&str, &&str);
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _1: std::string::String;
        scope 2 {
            debug asdf_fdsa => _1;
            let _11: &&str;
            let _12: &&str;
            let mut _18: &&str;
            let mut _19: &&str;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _2 = const "<.<";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_1;
        _8 = const "<.<";
        _7 = <str as ToString>::to_string(_8) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _6 = &_7;
        _4 = <String as PartialEq>::eq(move _5, move _6) -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _3 = Not(move _4);
        drop(_7) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        switchInt(move _3) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: concat_idents!(asd, f_f, dsa) == \\\"<.<\\\".to_string()") -> bb12;
    }

    bb6: {
        _19 = const _;
        _18 = const _;
        _10 = (_19, _18);
        _11 = (_10.0: &&str);
        _12 = (_10.1: &&str);
        _14 = <&str as PartialEq>::eq(_11, _12) -> [return: bb7, unwind: bb12];
    }

    bb7: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<&str, &str>(move _15, _11, _12, move _17) -> bb12;
    }

    bb9: {
        drop(_1) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_7) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "use_mention_distinction";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "use_mention_distinction";
        _0 = &_1;
        return;
    }
}
