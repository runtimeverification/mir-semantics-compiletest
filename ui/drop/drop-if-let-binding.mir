// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/drop-if-let-binding.rs:5:11: 5:11
    let mut _1: std::option::Option<std::string::String>; // in scope 0 at ui/drop/drop-if-let-binding.rs:6:25: 6:47
    let mut _3: bool;                    // in scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
    let mut _4: isize;                   // in scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
    scope 1 {
        debug _val => _2;                // in scope 1 at ui/drop/drop-if-let-binding.rs:6:17: 6:21
        let _2: std::string::String;     // in scope 1 at ui/drop/drop-if-let-binding.rs:6:17: 6:21
    }

    bb0: {
        _3 = const false;                // scope 1 at ui/drop/drop-if-let-binding.rs:6:25: 6:47
        _3 = const true;                 // scope 1 at ui/drop/drop-if-let-binding.rs:6:25: 6:47
        _1 = Option::<String>::None;     // scope 1 at ui/drop/drop-if-let-binding.rs:6:25: 6:47
        _4 = discriminant(_1);           // scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
        switchInt(move _4) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
    }

    bb1: {
        _3 = const false;                // scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
        return;                          // scope 0 at ui/drop/drop-if-let-binding.rs:7:2: 7:2
    }

    bb2: {
        switchInt(_3) -> [0: bb1, otherwise: bb3]; // scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
    }

    bb3: {
        drop(((_1 as Some).0: std::string::String)) -> bb1; // scope 0 at ui/drop/drop-if-let-binding.rs:7:1: 7:2
    }
}
