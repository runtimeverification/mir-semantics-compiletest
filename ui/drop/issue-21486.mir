// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/issue-21486.rs:9:10: 9:15>::fmt(_1: &Noisy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u8;
    let _6: &u8;

    bb0: {
        _3 = const "Noisy";
        _6 = &((*_1).0: u8);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/drop/issue-21486.rs:11:1: 11:20>::drop(_1: &mut Noisy) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: u8;

    bb0: {
        _3 = ((*_1).0: u8);
        _2 = event(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/drop/issue-21486.rs:19:10: 19:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &Noisy;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&Noisy;
    let _10: &Noisy;

    bb0: {
        _3 = const "Foo";
        _4 = const "n0";
        _6 = &((*_1).0: Noisy);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "n1";
        _10 = &((*_1).1: Noisy);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/drop/issue-21486.rs:21:1: 21:9>::vals(_1: &Foo) -> (u8, u8) {
    debug self => _1;
    let mut _0: (u8, u8);
    let mut _2: u8;
    let mut _3: u8;

    bb0: {
        _2 = (((*_1).0: Noisy).0: u8);
        _3 = (((*_1).1: Noisy).0: u8);
        _0 = (move _2, move _3);
        return;
    }
}

fn leak_1_ret() -> Foo {
    let mut _0: Foo;
    let _1: Foo;
    let mut _2: Noisy;
    let mut _3: Noisy;
    let mut _4: Noisy;
    let mut _5: Noisy;
    scope 1 {
        debug _old_foo => _1;
    }

    bb0: {
        _2 = Noisy(const 1_u8);
        _3 = Noisy(const 2_u8);
        _1 = Foo { n0: move _2, n1: move _3 };
        _4 = Noisy(const 3_u8);
        _5 = Noisy(const 4_u8);
        _0 = Foo { n0: move _4, n1: move _5 };
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn leak_2_ret() -> Foo {
    let mut _0: Foo;
    let _1: Foo;
    let mut _2: Noisy;
    let mut _3: Noisy;
    let mut _4: Noisy;
    let mut _5: Noisy;
    scope 1 {
        debug _old_foo => _1;
    }

    bb0: {
        _2 = Noisy(const 1_u8);
        _3 = Noisy(const 2_u8);
        _1 = Foo { n0: move _2, n1: move _3 };
        _4 = Noisy(const 3_u8);
        _5 = Noisy(const 4_u8);
        _0 = Foo { n0: move _4, n1: move _5 };
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn leak_3_ret() -> Foo {
    let mut _0: Foo;
    let mut _1: Noisy;
    let mut _2: Noisy;
    scope 1 {
        debug _old_foo => const ZeroSized: [closure@ui/drop/issue-21486.rs:43:20: 43:22];
    }

    bb0: {
        _1 = Noisy(const 3_u8);
        _2 = Noisy(const 4_u8);
        _0 = Foo { n0: move _1, n1: move _2 };
        return;
    }
}

fn leak_3_ret::{closure#0}(_1: &[closure@ui/drop/issue-21486.rs:43:20: 43:22]) -> Foo {
    let mut _0: Foo;
    let mut _2: Noisy;
    let mut _3: Noisy;

    bb0: {
        _2 = Noisy(const 1_u8);
        _3 = Noisy(const 2_u8);
        _0 = Foo { n0: move _2, n1: move _3 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: (&(u8, u8), &(u8, u8));
    let mut _3: &(u8, u8);
    let _4: (u8, u8);
    let mut _5: &Foo;
    let _6: Foo;
    let _7: &(u8, u8);
    let _8: &(u8, u8);
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let _17: &usize;
    let _18: &usize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: usize;
    let mut _22: usize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let _26: ();
    let mut _27: (&(u8, u8), &(u8, u8));
    let mut _28: &(u8, u8);
    let _29: (u8, u8);
    let mut _30: &Foo;
    let _31: Foo;
    let _32: &(u8, u8);
    let _33: &(u8, u8);
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&usize, &usize);
    let mut _40: &usize;
    let _41: usize;
    let _42: &usize;
    let _43: &usize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: usize;
    let mut _47: usize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let _51: ();
    let mut _52: (&(u8, u8), &(u8, u8));
    let mut _53: &(u8, u8);
    let _54: (u8, u8);
    let mut _55: &Foo;
    let _56: Foo;
    let _57: &(u8, u8);
    let _58: &(u8, u8);
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&usize, &usize);
    let mut _65: &usize;
    let _66: usize;
    let _67: &usize;
    let _68: &usize;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: usize;
    let mut _72: usize;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: &usize;
    let mut _77: &(u8, u8);
    let mut _78: &usize;
    let mut _79: &(u8, u8);
    let mut _80: &usize;
    let mut _81: &(u8, u8);
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _17;
        debug right_val => _18;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 6 {
            debug kind => _36;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _48: core::panicking::AssertKind;
        scope 8 {
            debug kind => _48;
        }
    }
    scope 9 {
        debug left_val => _57;
        debug right_val => _58;
        let _61: core::panicking::AssertKind;
        scope 10 {
            debug kind => _61;
        }
    }
    scope 11 {
        debug left_val => _67;
        debug right_val => _68;
        let _73: core::panicking::AssertKind;
        scope 12 {
            debug kind => _73;
        }
    }

    bb0: {
        _1 = reset_log() -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = leak_1_ret() -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_6;
        _4 = Foo::vals(move _5) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _3 = &_4;
        _81 = const _;
        _2 = (move _3, _81);
        _7 = (_2.0: &(u8, u8));
        _8 = (_2.1: &(u8, u8));
        _10 = <(u8, u8) as PartialEq>::eq(_7, _8) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _11, _7, _8, move _13) -> bb33;
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind continue];
    }

    bb7: {
        _80 = const _;
        _16 = event_log() -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = &_16;
        _14 = (_80, move _15);
        _17 = (_14.0: &usize);
        _18 = (_14.1: &usize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<usize, usize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb10: {
        _26 = reset_log() -> [return: bb11, unwind continue];
    }

    bb11: {
        _31 = leak_2_ret() -> [return: bb12, unwind continue];
    }

    bb12: {
        _30 = &_31;
        _29 = Foo::vals(move _30) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _28 = &_29;
        _79 = const _;
        _27 = (move _28, _79);
        _32 = (_27.0: &(u8, u8));
        _33 = (_27.1: &(u8, u8));
        _35 = <(u8, u8) as PartialEq>::eq(_32, _33) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _36, _32, _33, move _38) -> bb32;
    }

    bb16: {
        drop(_31) -> [return: bb17, unwind continue];
    }

    bb17: {
        _78 = const _;
        _41 = event_log() -> [return: bb18, unwind continue];
    }

    bb18: {
        _40 = &_41;
        _39 = (_78, move _40);
        _42 = (_39.0: &usize);
        _43 = (_39.1: &usize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<usize, usize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb20: {
        _51 = reset_log() -> [return: bb21, unwind continue];
    }

    bb21: {
        _56 = leak_3_ret() -> [return: bb22, unwind continue];
    }

    bb22: {
        _55 = &_56;
        _54 = Foo::vals(move _55) -> [return: bb23, unwind: bb31];
    }

    bb23: {
        _53 = &_54;
        _77 = const _;
        _52 = (move _53, _77);
        _57 = (_52.0: &(u8, u8));
        _58 = (_52.1: &(u8, u8));
        _60 = <(u8, u8) as PartialEq>::eq(_57, _58) -> [return: bb24, unwind: bb31];
    }

    bb24: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _61, _57, _58, move _63) -> bb31;
    }

    bb26: {
        drop(_56) -> [return: bb27, unwind continue];
    }

    bb27: {
        _76 = const _;
        _66 = event_log() -> [return: bb28, unwind continue];
    }

    bb28: {
        _65 = &_66;
        _64 = (_76, move _65);
        _67 = (_64.0: &usize);
        _68 = (_64.1: &usize);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<usize, usize>(move _73, _67, _68, move _75) -> unwind continue;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_56) -> [return: bb34, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_31) -> [return: bb34, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_6) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 772_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);
    let mut _1: (u8, u8);

    bb0: {
        _1 = (const 3_u8, const 4_u8);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16909060_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);
    let mut _1: (u8, u8);

    bb0: {
        _1 = (const 3_u8, const 4_u8);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 16909060_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);
    let mut _1: (u8, u8);

    bb0: {
        _1 = (const 3_u8, const 4_u8);
        _0 = &_1;
        return;
    }
}

static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn reset_log() -> () {
    let mut _0: ();
    let _1: ();
    let _2: &std::sync::atomic::AtomicUsize;
    let mut _3: std::sync::atomic::Ordering;

    bb0: {
        _2 = const {alloc1: &AtomicUsize};
        _3 = SeqCst;
        _1 = AtomicUsize::store(_2, const 0_usize, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event_log() -> usize {
    let mut _0: usize;
    let _1: &std::sync::atomic::AtomicUsize;
    let mut _2: std::sync::atomic::Ordering;

    bb0: {
        _1 = const {alloc1: &AtomicUsize};
        _2 = SeqCst;
        _0 = AtomicUsize::load(_1, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event(_1: u8) -> () {
    debug tag => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let _9: ();
    let _10: &std::sync::atomic::AtomicUsize;
    let mut _11: std::sync::atomic::Ordering;
    scope 1 {
        debug old_log => _2;
        let _5: usize;
        scope 2 {
            debug new_log => _5;
        }
    }

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::load(_3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = _2;
        _6 = Shl(move _7, const 8_i32);
        _8 = _1 as usize (IntToInt);
        _5 = Add(move _6, move _8);
        _10 = const {alloc1: &AtomicUsize};
        _11 = SeqCst;
        _9 = AtomicUsize::store(_10, _5, move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn Noisy(_1: u8) -> Noisy {
    let mut _0: Noisy;

    bb0: {
        _0 = Noisy(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Noisy(_1: u8) -> Noisy {
    let mut _0: Noisy;

    bb0: {
        _0 = Noisy(move _1);
        return;
    }
}
