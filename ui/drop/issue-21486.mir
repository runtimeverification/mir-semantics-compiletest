// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/issue-21486.rs:9:10: 9:15>::fmt(_1: &Noisy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
    debug f => _2;                       // in scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
    let mut _4: &str;                    // in scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
    let _5: &str;                        // in scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
    let mut _7: &&u8;                    // in scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
    let _8: &&u8;                        // in scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
    let _9: &u8;                         // in scope 0 at ui/drop/issue-21486.rs:10:14: 10:16

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
        _5 = const "Noisy";              // scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
        _9 = &((*_1).0: u8);             // scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
        _8 = &_9;                        // scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
        _7 = _8;                         // scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/drop/issue-21486.rs:10:14: 10:16
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/drop/issue-21486.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:9:10: 9:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:9:15: 9:15
    }
}

fn <impl at ui/drop/issue-21486.rs:11:1: 11:20>::drop(_1: &mut Noisy) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/issue-21486.rs:12:13: 12:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-21486.rs:12:24: 12:24
    let _2: ();                          // in scope 0 at ui/drop/issue-21486.rs:14:9: 14:22
    let mut _3: u8;                      // in scope 0 at ui/drop/issue-21486.rs:14:15: 14:21

    bb0: {
        _3 = ((*_1).0: u8);              // scope 0 at ui/drop/issue-21486.rs:14:15: 14:21
        _2 = event(move _3) -> bb1;      // scope 0 at ui/drop/issue-21486.rs:14:9: 14:22
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:14:9: 14:14
                                         // + literal: Const { ty: fn(u8) {event}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:15:6: 15:6
    }
}

fn <impl at ui/drop/issue-21486.rs:19:10: 19:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
    let mut _4: &str;                    // in scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
    let _5: &str;                        // in scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
    let mut _6: &str;                    // in scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
    let _7: &str;                        // in scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
    let mut _9: &Noisy;                  // in scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
    let _10: &Noisy;                     // in scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
    let mut _11: &str;                   // in scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
    let _12: &str;                       // in scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
    let mut _14: &&Noisy;                // in scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
    let _15: &&Noisy;                    // in scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
    let _16: &Noisy;                     // in scope 0 at ui/drop/issue-21486.rs:20:25: 20:34

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
        _5 = const "Foo";                // scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
        _7 = const "n0";                 // scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:20:14: 20:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
        _10 = &((*_1).0: Noisy);         // scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
        _9 = _10;                        // scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/drop/issue-21486.rs:20:14: 20:23
        _12 = const "n1";                // scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:20:25: 20:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
        _16 = &((*_1).1: Noisy);         // scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
        _15 = &_16;                      // scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
        _14 = _15;                       // scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/drop/issue-21486.rs:20:25: 20:34
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/drop/issue-21486.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:19:15: 19:15
    }
}

fn <impl at ui/drop/issue-21486.rs:21:1: 21:9>::vals(_1: &Foo) -> (u8, u8) {
    debug self => _1;                    // in scope 0 at ui/drop/issue-21486.rs:22:13: 22:18
    let mut _0: (u8, u8);                // return place in scope 0 at ui/drop/issue-21486.rs:22:23: 22:31
    let mut _2: u8;                      // in scope 0 at ui/drop/issue-21486.rs:22:35: 22:44
    let mut _3: u8;                      // in scope 0 at ui/drop/issue-21486.rs:22:46: 22:55

    bb0: {
        _2 = (((*_1).0: Noisy).0: u8);   // scope 0 at ui/drop/issue-21486.rs:22:35: 22:44
        _3 = (((*_1).1: Noisy).0: u8);   // scope 0 at ui/drop/issue-21486.rs:22:46: 22:55
        _0 = (move _2, move _3);         // scope 0 at ui/drop/issue-21486.rs:22:34: 22:56
        return;                          // scope 0 at ui/drop/issue-21486.rs:22:58: 22:58
    }
}

fn leak_1_ret() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/drop/issue-21486.rs:25:20: 25:23
    let _1: Foo;                         // in scope 0 at ui/drop/issue-21486.rs:26:9: 26:17
    let mut _2: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:26:30: 26:38
    let mut _3: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:26:44: 26:52
    let mut _4: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:27:34: 27:42
    let mut _5: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:27:48: 27:56
    scope 1 {
        debug _old_foo => _1;            // in scope 1 at ui/drop/issue-21486.rs:26:9: 26:17
    }

    bb0: {
        _2 = const Noisy(1_u8);          // scope 0 at ui/drop/issue-21486.rs:26:30: 26:38
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:26:30: 26:38
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x01)) }
        _3 = const Noisy(2_u8);          // scope 0 at ui/drop/issue-21486.rs:26:44: 26:52
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:26:44: 26:52
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x02)) }
        _1 = Foo { n0: move _2, n1: move _3 }; // scope 0 at ui/drop/issue-21486.rs:26:20: 26:54
        _4 = const Noisy(3_u8);          // scope 1 at ui/drop/issue-21486.rs:27:34: 27:42
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:27:34: 27:42
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x03)) }
        _5 = const Noisy(4_u8);          // scope 1 at ui/drop/issue-21486.rs:27:48: 27:56
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:27:48: 27:56
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x04)) }
        _0 = Foo { n0: move _4, n1: move _5 }; // scope 1 at ui/drop/issue-21486.rs:27:24: 27:58
        drop(_1) -> bb1;                 // scope 0 at ui/drop/issue-21486.rs:30:1: 30:2
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:30:2: 30:2
    }
}

fn leak_2_ret() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/drop/issue-21486.rs:32:20: 32:23
    let _1: Foo;                         // in scope 0 at ui/drop/issue-21486.rs:33:9: 33:17
    let mut _2: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:33:30: 33:38
    let mut _3: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:33:44: 33:52
    let mut _4: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:34:34: 34:42
    let mut _5: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:34:48: 34:56
    scope 1 {
        debug _old_foo => _1;            // in scope 1 at ui/drop/issue-21486.rs:33:9: 33:17
    }

    bb0: {
        _2 = const Noisy(1_u8);          // scope 0 at ui/drop/issue-21486.rs:33:30: 33:38
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:33:30: 33:38
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x01)) }
        _3 = const Noisy(2_u8);          // scope 0 at ui/drop/issue-21486.rs:33:44: 33:52
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:33:44: 33:52
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x02)) }
        _1 = Foo { n0: move _2, n1: move _3 }; // scope 0 at ui/drop/issue-21486.rs:33:20: 33:54
        _4 = const Noisy(3_u8);          // scope 1 at ui/drop/issue-21486.rs:34:34: 34:42
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:34:34: 34:42
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x03)) }
        _5 = const Noisy(4_u8);          // scope 1 at ui/drop/issue-21486.rs:34:48: 34:56
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:34:48: 34:56
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x04)) }
        _0 = Foo { n0: move _4, n1: move _5 }; // scope 1 at ui/drop/issue-21486.rs:34:24: 34:58
        drop(_1) -> bb1;                 // scope 0 at ui/drop/issue-21486.rs:37:1: 37:2
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:37:2: 37:2
    }
}

fn leak_3_ret() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/drop/issue-21486.rs:42:20: 42:23
    let _1: [closure@ui/drop/issue-21486.rs:43:20: 43:22]; // in scope 0 at ui/drop/issue-21486.rs:43:9: 43:17
    let mut _2: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:44:34: 44:42
    let mut _3: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:44:48: 44:56
    scope 1 {
        debug _old_foo => _1;            // in scope 1 at ui/drop/issue-21486.rs:43:9: 43:17
    }

    bb0: {
        _2 = const Noisy(3_u8);          // scope 1 at ui/drop/issue-21486.rs:44:34: 44:42
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:44:34: 44:42
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x03)) }
        _3 = const Noisy(4_u8);          // scope 1 at ui/drop/issue-21486.rs:44:48: 44:56
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:44:48: 44:56
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x04)) }
        _0 = Foo { n0: move _2, n1: move _3 }; // scope 1 at ui/drop/issue-21486.rs:44:24: 44:58
        return;                          // scope 0 at ui/drop/issue-21486.rs:47:2: 47:2
    }
}

fn leak_3_ret::{closure#0}(_1: &[closure@ui/drop/issue-21486.rs:43:20: 43:22]) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/drop/issue-21486.rs:43:23: 43:23
    let mut _2: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:43:33: 43:41
    let mut _3: Noisy;                   // in scope 0 at ui/drop/issue-21486.rs:43:47: 43:55

    bb0: {
        _2 = const Noisy(1_u8);          // scope 0 at ui/drop/issue-21486.rs:43:33: 43:41
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:43:33: 43:41
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x01)) }
        _3 = const Noisy(2_u8);          // scope 0 at ui/drop/issue-21486.rs:43:47: 43:55
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:43:47: 43:55
                                         // + literal: Const { ty: Noisy, val: Value(Scalar(0x02)) }
        _0 = Foo { n0: move _2, n1: move _3 }; // scope 0 at ui/drop/issue-21486.rs:43:23: 43:57
        return;                          // scope 0 at ui/drop/issue-21486.rs:43:57: 43:57
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-21486.rs:49:15: 49:15
    let _1: ();                          // in scope 0 at ui/drop/issue-21486.rs:50:5: 50:16
    let mut _2: (&(u8, u8), &(u8, u8));  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &(u8, u8);               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: (u8, u8);                    // in scope 0 at ui/drop/issue-21486.rs:51:16: 51:35
    let mut _5: &Foo;                    // in scope 0 at ui/drop/issue-21486.rs:51:16: 51:35
    let _6: Foo;                         // in scope 0 at ui/drop/issue-21486.rs:51:16: 51:28
    let mut _7: &(u8, u8);               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &(u8, u8);                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &(u8, u8);                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: usize;                      // in scope 0 at ui/drop/issue-21486.rs:52:31: 52:42
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _40: ();                         // in scope 0 at ui/drop/issue-21486.rs:54:5: 54:16
    let mut _41: (&(u8, u8), &(u8, u8)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _43: (u8, u8);                   // in scope 0 at ui/drop/issue-21486.rs:55:16: 55:35
    let mut _44: &Foo;                   // in scope 0 at ui/drop/issue-21486.rs:55:16: 55:35
    let _45: Foo;                        // in scope 0 at ui/drop/issue-21486.rs:55:16: 55:28
    let mut _46: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _47: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _48: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _51: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _52: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _54: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _55: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _56: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _57: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _58: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _59: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _61: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _62: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _63: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _64: usize;                      // in scope 0 at ui/drop/issue-21486.rs:56:31: 56:42
    let _65: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _66: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _69: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _70: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _72: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _73: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _74: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _75: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _76: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _77: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _79: ();                         // in scope 0 at ui/drop/issue-21486.rs:58:5: 58:16
    let mut _80: (&(u8, u8), &(u8, u8)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _81: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _82: (u8, u8);                   // in scope 0 at ui/drop/issue-21486.rs:59:16: 59:35
    let mut _83: &Foo;                   // in scope 0 at ui/drop/issue-21486.rs:59:16: 59:35
    let _84: Foo;                        // in scope 0 at ui/drop/issue-21486.rs:59:16: 59:28
    let mut _85: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _86: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _87: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &(u8, u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &(u8, u8);                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _101: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _102: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _103: usize;                     // in scope 0 at ui/drop/issue-21486.rs:60:25: 60:36
    let _104: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _105: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _107: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _108: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _109: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _111: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _112: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _113: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _114: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _115: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _116: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _118: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _119: &(u8, u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _120: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _121: &(u8, u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _122: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _123: &(u8, u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _26;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _27;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _32: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _47;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _48;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _53: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _53;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _65;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _66;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _71: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _71;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _86;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _87;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _92: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _92;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _104;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _105;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _110: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _110;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _1 = reset_log() -> bb1;         // scope 0 at ui/drop/issue-21486.rs:50:5: 50:16
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:50:5: 50:14
                                         // + literal: Const { ty: fn() {reset_log}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = leak_1_ret() -> bb2;        // scope 0 at ui/drop/issue-21486.rs:51:16: 51:28
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:51:16: 51:26
                                         // + literal: Const { ty: fn() -> Foo {leak_1_ret}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at ui/drop/issue-21486.rs:51:16: 51:35
        _4 = Foo::vals(move _5) -> [return: bb3, unwind: bb33]; // scope 0 at ui/drop/issue-21486.rs:51:16: 51:35
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:51:29: 51:33
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> (u8, u8) {Foo::vals}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _123 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(u8, u8), val: Unevaluated(main, [], Some(promoted[5])) }
        _7 = _123;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_2.0: &(u8, u8));          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_2.1: &(u8, u8));          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <(u8, u8) as PartialEq>::eq(move _12, move _13) -> [return: bb4, unwind: bb33]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (u8, u8), &'b (u8, u8)) -> bool {<(u8, u8) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb6, otherwise: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _16, move _17, move _19, move _21) -> bb33; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (u8, u8), &'b (u8, u8), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(u8, u8), (u8, u8)>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_6) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _122 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _23 = _122;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = event_log() -> bb8;        // scope 0 at ui/drop/issue-21486.rs:52:31: 52:42
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:52:31: 52:40
                                         // + literal: Const { ty: fn() -> usize {event_log}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_22.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_22.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = const 16909060_usize;      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = (*_27);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = Eq(move _30, move _31);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _28 = Not(move _29);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _32 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<usize, usize>(move _34, move _35, move _37, move _39); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _40 = reset_log() -> bb11;       // scope 0 at ui/drop/issue-21486.rs:54:5: 54:16
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:54:5: 54:14
                                         // + literal: Const { ty: fn() {reset_log}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = leak_2_ret() -> bb12;      // scope 0 at ui/drop/issue-21486.rs:55:16: 55:28
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:55:16: 55:26
                                         // + literal: Const { ty: fn() -> Foo {leak_2_ret}, val: Value(<ZST>) }
    }

    bb12: {
        _44 = &_45;                      // scope 0 at ui/drop/issue-21486.rs:55:16: 55:35
        _43 = Foo::vals(move _44) -> [return: bb13, unwind: bb32]; // scope 0 at ui/drop/issue-21486.rs:55:16: 55:35
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:55:29: 55:33
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> (u8, u8) {Foo::vals}, val: Value(<ZST>) }
    }

    bb13: {
        _42 = &_43;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _121 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(u8, u8), val: Unevaluated(main, [], Some(promoted[3])) }
        _46 = _121;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _46);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _47 = (_41.0: &(u8, u8));        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _48 = (_41.1: &(u8, u8));        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _51 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _50 = <(u8, u8) as PartialEq>::eq(move _51, move _52) -> [return: bb14, unwind: bb32]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (u8, u8), &'b (u8, u8)) -> bool {<(u8, u8) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _49 = Not(move _50);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _49) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _53 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _57 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = _59;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _60 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _54 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _55, move _56, move _58, move _60) -> bb32; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (u8, u8), &'b (u8, u8), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(u8, u8), (u8, u8)>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_45) -> bb17;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        _120 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _62 = _120;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _64 = event_log() -> bb18;       // scope 0 at ui/drop/issue-21486.rs:56:31: 56:42
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:56:31: 56:40
                                         // + literal: Const { ty: fn() -> usize {event_log}, val: Value(<ZST>) }
    }

    bb18: {
        _63 = &_64;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _61 = (move _62, move _63);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _65 = (_61.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _66 = (_61.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _69 = const 16909060_usize;      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _70 = (*_66);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _68 = Eq(move _69, move _70);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _67 = Not(move _68);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _67) -> [0: bb20, otherwise: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _71 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = _77;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _72 = core::panicking::assert_failed::<usize, usize>(move _73, move _74, move _76, move _78); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb20: {
        _79 = reset_log() -> bb21;       // scope 0 at ui/drop/issue-21486.rs:58:5: 58:16
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:58:5: 58:14
                                         // + literal: Const { ty: fn() {reset_log}, val: Value(<ZST>) }
    }

    bb21: {
        _84 = leak_3_ret() -> bb22;      // scope 0 at ui/drop/issue-21486.rs:59:16: 59:28
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:59:16: 59:26
                                         // + literal: Const { ty: fn() -> Foo {leak_3_ret}, val: Value(<ZST>) }
    }

    bb22: {
        _83 = &_84;                      // scope 0 at ui/drop/issue-21486.rs:59:16: 59:35
        _82 = Foo::vals(move _83) -> [return: bb23, unwind: bb31]; // scope 0 at ui/drop/issue-21486.rs:59:16: 59:35
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:59:29: 59:33
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> (u8, u8) {Foo::vals}, val: Value(<ZST>) }
    }

    bb23: {
        _81 = &_82;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _119 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(u8, u8), val: Unevaluated(main, [], Some(promoted[1])) }
        _85 = _119;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _80 = (move _81, move _85);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_80.0: &(u8, u8));        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_80.1: &(u8, u8));        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = _87;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = <(u8, u8) as PartialEq>::eq(move _90, move _91) -> [return: bb24, unwind: bb31]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (u8, u8), &'b (u8, u8)) -> bool {<(u8, u8) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _88 = Not(move _89);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb26, otherwise: bb25]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _92 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<(u8, u8), (u8, u8)>(move _94, move _95, move _97, move _99) -> bb31; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (u8, u8), &'b (u8, u8), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(u8, u8), (u8, u8)>}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_84) -> bb27;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        _118 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _101 = _118;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = event_log() -> bb28;      // scope 0 at ui/drop/issue-21486.rs:60:25: 60:36
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:60:25: 60:34
                                         // + literal: Const { ty: fn() -> usize {event_log}, val: Value(<ZST>) }
    }

    bb28: {
        _102 = &_103;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _100 = (move _101, move _102);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _104 = (_100.0: &usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _105 = (_100.1: &usize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _108 = const 772_usize;          // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _109 = (*_105);                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _107 = Eq(move _108, move _109); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _106 = Not(move _107);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _106) -> [0: bb30, otherwise: bb29]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb29: {
        _110 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _112 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _114 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _113 = _114;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _116 = _105;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _115 = _116;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _117 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _111 = core::panicking::assert_failed::<usize, usize>(move _112, move _113, move _115, move _117); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb30: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:61:2: 61:2
    }

    bb31 (cleanup): {
        drop(_84) -> bb34;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb32 (cleanup): {
        drop(_45) -> bb34;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        drop(_6) -> bb34;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/drop/issue-21486.rs:49:1: 61:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/drop/issue-21486.rs:60:16: 60:23

    bb0: {
        _1 = const 772_usize;            // scope 0 at ui/drop/issue-21486.rs:60:16: 60:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (u8, u8);                // in scope 0 at ui/drop/issue-21486.rs:59:37: 59:42

    bb0: {
        _1 = (const 3_u8, const 4_u8);   // scope 0 at ui/drop/issue-21486.rs:59:37: 59:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/drop/issue-21486.rs:56:16: 56:29

    bb0: {
        _1 = const 16909060_usize;       // scope 0 at ui/drop/issue-21486.rs:56:16: 56:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[3] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (u8, u8);                // in scope 0 at ui/drop/issue-21486.rs:55:37: 55:42

    bb0: {
        _1 = (const 3_u8, const 4_u8);   // scope 0 at ui/drop/issue-21486.rs:55:37: 55:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/drop/issue-21486.rs:52:16: 52:29

    bb0: {
        _1 = const 16909060_usize;       // scope 0 at ui/drop/issue-21486.rs:52:16: 52:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[5] in main: &(u8, u8) = {
    let mut _0: &(u8, u8);               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (u8, u8);                // in scope 0 at ui/drop/issue-21486.rs:51:37: 51:42

    bb0: {
        _1 = (const 3_u8, const 4_u8);   // scope 0 at ui/drop/issue-21486.rs:51:37: 51:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/drop/issue-21486.rs:63:13: 63:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/drop/issue-21486.rs:63:27: 63:46
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/drop/issue-21486.rs:63:27: 63:46
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:63:27: 63:43
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:63:1: 63:47
    }
}

fn reset_log() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-21486.rs:65:16: 65:16
    let _1: ();                          // in scope 0 at ui/drop/issue-21486.rs:66:5: 66:35
    let mut _2: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:66:5: 66:35
    let _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:66:5: 66:8
    let mut _4: std::sync::atomic::Ordering; // in scope 0 at ui/drop/issue-21486.rs:66:18: 66:34

    bb0: {
        _3 = const {alloc1: &AtomicUsize}; // scope 0 at ui/drop/issue-21486.rs:66:5: 66:8
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:66:5: 66:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _2 = _3;                         // scope 0 at ui/drop/issue-21486.rs:66:5: 66:35
        _4 = const SeqCst;               // scope 0 at ui/drop/issue-21486.rs:66:18: 66:34
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:66:18: 66:34
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _1 = AtomicUsize::store(move _2, const 0_usize, move _4) -> bb1; // scope 0 at ui/drop/issue-21486.rs:66:5: 66:35
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:66:9: 66:14
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:67:2: 67:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event_log() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/drop/issue-21486.rs:69:19: 69:24
    let mut _1: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:70:5: 70:31
    let _2: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:70:5: 70:8
    let mut _3: std::sync::atomic::Ordering; // in scope 0 at ui/drop/issue-21486.rs:70:14: 70:30

    bb0: {
        _2 = const {alloc1: &AtomicUsize}; // scope 0 at ui/drop/issue-21486.rs:70:5: 70:8
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:70:5: 70:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _1 = _2;                         // scope 0 at ui/drop/issue-21486.rs:70:5: 70:31
        _3 = const SeqCst;               // scope 0 at ui/drop/issue-21486.rs:70:14: 70:30
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:70:14: 70:30
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _0 = AtomicUsize::load(move _1, move _3) -> bb1; // scope 0 at ui/drop/issue-21486.rs:70:5: 70:31
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:70:9: 70:13
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:71:2: 71:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event(_1: u8) -> () {
    debug tag => _1;                     // in scope 0 at ui/drop/issue-21486.rs:73:10: 73:13
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-21486.rs:73:19: 73:19
    let _2: usize;                       // in scope 0 at ui/drop/issue-21486.rs:74:9: 74:16
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:74:19: 74:45
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:74:19: 74:22
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/drop/issue-21486.rs:74:28: 74:44
    let mut _7: usize;                   // in scope 0 at ui/drop/issue-21486.rs:75:19: 75:33
    let mut _8: usize;                   // in scope 0 at ui/drop/issue-21486.rs:75:20: 75:27
    let mut _9: (usize, bool);           // in scope 0 at ui/drop/issue-21486.rs:75:19: 75:33
    let mut _10: usize;                  // in scope 0 at ui/drop/issue-21486.rs:75:36: 75:48
    let mut _11: u8;                     // in scope 0 at ui/drop/issue-21486.rs:75:36: 75:39
    let mut _12: (usize, bool);          // in scope 0 at ui/drop/issue-21486.rs:75:19: 75:48
    let _13: ();                         // in scope 0 at ui/drop/issue-21486.rs:76:5: 76:41
    let mut _14: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:76:5: 76:41
    let _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/drop/issue-21486.rs:76:5: 76:8
    let mut _16: usize;                  // in scope 0 at ui/drop/issue-21486.rs:76:15: 76:22
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/drop/issue-21486.rs:76:24: 76:40
    scope 1 {
        debug old_log => _2;             // in scope 1 at ui/drop/issue-21486.rs:74:9: 74:16
        let _6: usize;                   // in scope 1 at ui/drop/issue-21486.rs:75:9: 75:16
        scope 2 {
            debug new_log => _6;         // in scope 2 at ui/drop/issue-21486.rs:75:9: 75:16
        }
    }

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/drop/issue-21486.rs:74:19: 74:22
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:74:19: 74:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/drop/issue-21486.rs:74:19: 74:45
        _5 = const SeqCst;               // scope 0 at ui/drop/issue-21486.rs:74:28: 74:44
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:74:28: 74:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _5) -> bb1; // scope 0 at ui/drop/issue-21486.rs:74:19: 74:45
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:74:23: 74:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _2;                         // scope 1 at ui/drop/issue-21486.rs:75:20: 75:27
        _9 = CheckedShl(_8, const 8_i32); // scope 1 at ui/drop/issue-21486.rs:75:19: 75:33
        assert(!move (_9.1: bool), "attempt to shift left by `{}`, which would overflow", const 8_i32) -> bb2; // scope 1 at ui/drop/issue-21486.rs:75:19: 75:33
    }

    bb2: {
        _7 = move (_9.0: usize);         // scope 1 at ui/drop/issue-21486.rs:75:19: 75:33
        _11 = _1;                        // scope 1 at ui/drop/issue-21486.rs:75:36: 75:39
        _10 = move _11 as usize (IntToInt); // scope 1 at ui/drop/issue-21486.rs:75:36: 75:48
        _12 = CheckedAdd(_7, _10);       // scope 1 at ui/drop/issue-21486.rs:75:19: 75:48
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _10) -> bb3; // scope 1 at ui/drop/issue-21486.rs:75:19: 75:48
    }

    bb3: {
        _6 = move (_12.0: usize);        // scope 1 at ui/drop/issue-21486.rs:75:19: 75:48
        _15 = const {alloc1: &AtomicUsize}; // scope 2 at ui/drop/issue-21486.rs:76:5: 76:8
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:76:5: 76:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _14 = _15;                       // scope 2 at ui/drop/issue-21486.rs:76:5: 76:41
        _16 = _6;                        // scope 2 at ui/drop/issue-21486.rs:76:15: 76:22
        _17 = const SeqCst;              // scope 2 at ui/drop/issue-21486.rs:76:24: 76:40
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:76:24: 76:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _13 = AtomicUsize::store(move _14, move _16, move _17) -> bb4; // scope 2 at ui/drop/issue-21486.rs:76:5: 76:41
                                         // mir::Constant
                                         // + span: ui/drop/issue-21486.rs:76:9: 76:14
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/issue-21486.rs:77:2: 77:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn Noisy(_1: u8) -> Noisy {
    let mut _0: Noisy;                   // return place in scope 0 at ui/drop/issue-21486.rs:10:1: 10:13

    bb0: {
        _0 = Noisy(move _1);             // scope 0 at ui/drop/issue-21486.rs:10:1: 10:13
        return;                          // scope 0 at ui/drop/issue-21486.rs:10:1: 10:13
    }
}

// MIR FOR CTFE
fn Noisy(_1: u8) -> Noisy {
    let mut _0: Noisy;                   // return place in scope 0 at ui/drop/issue-21486.rs:10:1: 10:13

    bb0: {
        _0 = Noisy(move _1);             // scope 0 at ui/drop/issue-21486.rs:10:1: 10:13
        return;                          // scope 0 at ui/drop/issue-21486.rs:10:1: 10:13
    }
}
