// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/drop-trait-enum.rs:11:10: 11:19>::eq(_1: &Message, _2: &Message) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn <impl at ui/drop/drop-trait-enum.rs:11:21: 11:26>::fmt(_1: &Message, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = const "DestructorRan";
        _3 = _6;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Dropped";
        _3 = _5;
        goto -> bb4;
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn <impl at ui/drop/drop-trait-enum.rs:21:1: 21:25>::drop(_1: &mut SendOnDrop) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::result::Result<(), std::sync::mpsc::SendError<Message>>;
    let mut _4: &std::sync::mpsc::Sender<Message>;
    let mut _5: Message;

    bb0: {
        _4 = &((*_1).0: std::sync::mpsc::Sender<Message>);
        _5 = Message::Dropped;
        _3 = Sender::<Message>::send(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<(), SendError<Message>>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn <impl at ui/drop/drop-trait-enum.rs:33:1: 33:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: &mut std::sync::mpsc::Sender<Message>;
    let _4: ();
    let mut _5: std::result::Result<(), std::sync::mpsc::SendError<Message>>;
    let mut _6: &std::sync::mpsc::Sender<Message>;
    let mut _7: Message;
    let _8: &mut std::sync::mpsc::Sender<Message>;
    let _9: ();
    let mut _10: std::result::Result<(), std::sync::mpsc::SendError<Message>>;
    let mut _11: &std::sync::mpsc::Sender<Message>;
    let mut _12: Message;
    let _13: !;
    scope 1 {
        debug sender => _3;
    }
    scope 2 {
        debug sender => _8;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _13 = begin_panic::<&str>(const "Failed") -> unwind continue;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = &mut (((*_1) as SimpleVariant).0: std::sync::mpsc::Sender<Message>);
        _6 = &(*_3);
        _7 = Message::DestructorRan;
        _5 = Sender::<Message>::send(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = Result::<(), SendError<Message>>::unwrap(move _5) -> [return: bb7, unwind continue];
    }

    bb5: {
        _8 = &mut (((*_1) as NestedVariant).2: std::sync::mpsc::Sender<Message>);
        _11 = &(*_8);
        _12 = Message::DestructorRan;
        _10 = Sender::<Message>::send(move _11, move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = Result::<(), SendError<Message>>::unwrap(move _10) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::mpsc::Sender<Message>;
    let _2: std::sync::mpsc::Receiver<Message>;
    let mut _3: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _5: std::sync::mpsc::Sender<Message>;
    let mut _6: (&Message, &Message);
    let mut _7: &Message;
    let _8: Message;
    let mut _9: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _10: &std::sync::mpsc::Receiver<Message>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _19: &std::option::Option<Message>;
    let _20: std::option::Option<Message>;
    let mut _21: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _22: &std::sync::mpsc::Receiver<Message>;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _34: std::boxed::Box<usize>;
    let mut _35: SendOnDrop;
    let mut _36: std::sync::mpsc::Sender<Message>;
    let mut _37: &std::sync::mpsc::Sender<Message>;
    let mut _38: std::sync::mpsc::Sender<Message>;
    let mut _39: (&Message, &Message);
    let mut _40: &Message;
    let _41: Message;
    let mut _42: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _43: &std::sync::mpsc::Receiver<Message>;
    let mut _46: bool;
    let mut _47: bool;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&Message, &Message);
    let mut _52: &Message;
    let _53: Message;
    let mut _54: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _55: &std::sync::mpsc::Receiver<Message>;
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _64: &std::option::Option<Message>;
    let _65: std::option::Option<Message>;
    let mut _66: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _67: &std::sync::mpsc::Receiver<Message>;
    let mut _70: bool;
    let mut _71: bool;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _79: [closure@ui/drop/drop-trait-enum.rs:66:27: 66:33];
    let mut _80: (&Message, &Message);
    let mut _81: &Message;
    let _82: Message;
    let mut _83: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _84: &std::sync::mpsc::Receiver<Message>;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _93: &std::option::Option<Message>;
    let _94: std::option::Option<Message>;
    let mut _95: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _96: &std::sync::mpsc::Receiver<Message>;
    let mut _99: bool;
    let mut _100: bool;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let _104: ();
    let mut _105: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _106: std::thread::JoinHandle<()>;
    let mut _109: (std::sync::mpsc::Sender<Message>, std::sync::mpsc::Receiver<Message>);
    let mut _111: [closure@ui/drop/drop-trait-enum.rs:75:23: 75:29];
    let mut _112: (&Message, &Message);
    let mut _113: &Message;
    let _114: Message;
    let mut _115: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _116: &std::sync::mpsc::Receiver<Message>;
    let mut _119: bool;
    let mut _120: bool;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&Message, &Message);
    let mut _125: &Message;
    let _126: Message;
    let mut _127: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _128: &std::sync::mpsc::Receiver<Message>;
    let mut _131: bool;
    let mut _132: bool;
    let _134: !;
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: (&Message, &Message);
    let mut _137: &Message;
    let _138: Message;
    let mut _139: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _140: &std::sync::mpsc::Receiver<Message>;
    let mut _143: bool;
    let mut _144: bool;
    let _146: !;
    let mut _147: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _148: (&Message, &Message);
    let mut _149: &Message;
    let _150: Message;
    let mut _151: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _152: &std::sync::mpsc::Receiver<Message>;
    let mut _155: bool;
    let mut _156: bool;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: (&Message, &Message);
    let mut _161: &Message;
    let _162: Message;
    let mut _163: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _164: &std::sync::mpsc::Receiver<Message>;
    let mut _167: bool;
    let mut _168: bool;
    let _170: !;
    let mut _171: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _172: (&Message, &Message);
    let mut _173: &Message;
    let _174: Message;
    let mut _175: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _176: &std::sync::mpsc::Receiver<Message>;
    let mut _179: bool;
    let mut _180: bool;
    let _182: !;
    let mut _183: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _184: (&std::option::Option<Message>, &std::option::Option<Message>);
    let mut _185: &std::option::Option<Message>;
    let _186: std::option::Option<Message>;
    let mut _187: std::result::Result<Message, std::sync::mpsc::RecvError>;
    let mut _188: &std::sync::mpsc::Receiver<Message>;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let _196: ();
    let mut _197: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _198: std::thread::JoinHandle<()>;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: bool;
    let mut _216: bool;
    let mut _217: bool;
    let mut _218: bool;
    scope 1 {
        debug sender => _1;
        debug receiver => _2;
        let _4: Foo;
        let _11: &Message;
        let _12: &Message;
        let _23: &std::option::Option<Message>;
        let _24: &std::option::Option<Message>;
        let _30: std::sync::mpsc::Sender<Message>;
        let _31: std::sync::mpsc::Receiver<Message>;
        let mut _211: &std::option::Option<Message>;
        let mut _212: &Message;
        scope 2 {
            debug v => _4;
        }
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug left_val => _23;
            debug right_val => _24;
            let _27: core::panicking::AssertKind;
            scope 6 {
                debug kind => _27;
            }
        }
        scope 7 {
            debug sender => _30;
            debug receiver => _31;
            let _33: Foo;
            let _44: &Message;
            let _45: &Message;
            let _56: &Message;
            let _57: &Message;
            let _68: &std::option::Option<Message>;
            let _69: &std::option::Option<Message>;
            let _75: std::sync::mpsc::Sender<Message>;
            let _76: std::sync::mpsc::Receiver<Message>;
            let mut _208: &std::option::Option<Message>;
            let mut _209: &Message;
            let mut _210: &Message;
            scope 8 {
                debug v => _33;
            }
            scope 9 {
                debug left_val => _44;
                debug right_val => _45;
                let _48: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _48;
                }
            }
            scope 11 {
                debug left_val => _56;
                debug right_val => _57;
                let _60: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _60;
                }
            }
            scope 13 {
                debug left_val => _68;
                debug right_val => _69;
                let _72: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _72;
                }
            }
            scope 15 {
                debug sender => _75;
                debug receiver => _76;
                let _78: std::thread::JoinHandle<()>;
                scope 16 {
                    debug t => _78;
                    let _85: &Message;
                    let _86: &Message;
                    let _97: &std::option::Option<Message>;
                    let _98: &std::option::Option<Message>;
                    let _107: std::sync::mpsc::Sender<Message>;
                    let _108: std::sync::mpsc::Receiver<Message>;
                    let mut _206: &std::option::Option<Message>;
                    let mut _207: &Message;
                    scope 17 {
                        debug left_val => _85;
                        debug right_val => _86;
                        let _89: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _89;
                        }
                    }
                    scope 19 {
                        debug left_val => _97;
                        debug right_val => _98;
                        let _101: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _101;
                        }
                    }
                    scope 21 {
                        debug sender => _107;
                        debug receiver => _108;
                        let _110: std::thread::JoinHandle<()>;
                        scope 22 {
                            debug t => _110;
                            let _117: &Message;
                            let _118: &Message;
                            let _129: &Message;
                            let _130: &Message;
                            let _141: &Message;
                            let _142: &Message;
                            let _153: &Message;
                            let _154: &Message;
                            let _165: &Message;
                            let _166: &Message;
                            let _177: &Message;
                            let _178: &Message;
                            let _189: &std::option::Option<Message>;
                            let _190: &std::option::Option<Message>;
                            let mut _199: &std::option::Option<Message>;
                            let mut _200: &Message;
                            let mut _201: &Message;
                            let mut _202: &Message;
                            let mut _203: &Message;
                            let mut _204: &Message;
                            let mut _205: &Message;
                            scope 23 {
                                debug left_val => _117;
                                debug right_val => _118;
                                let _121: core::panicking::AssertKind;
                                scope 24 {
                                    debug kind => _121;
                                }
                            }
                            scope 25 {
                                debug left_val => _129;
                                debug right_val => _130;
                                let _133: core::panicking::AssertKind;
                                scope 26 {
                                    debug kind => _133;
                                }
                            }
                            scope 27 {
                                debug left_val => _141;
                                debug right_val => _142;
                                let _145: core::panicking::AssertKind;
                                scope 28 {
                                    debug kind => _145;
                                }
                            }
                            scope 29 {
                                debug left_val => _153;
                                debug right_val => _154;
                                let _157: core::panicking::AssertKind;
                                scope 30 {
                                    debug kind => _157;
                                }
                            }
                            scope 31 {
                                debug left_val => _165;
                                debug right_val => _166;
                                let _169: core::panicking::AssertKind;
                                scope 32 {
                                    debug kind => _169;
                                }
                            }
                            scope 33 {
                                debug left_val => _177;
                                debug right_val => _178;
                                let _181: core::panicking::AssertKind;
                                scope 34 {
                                    debug kind => _181;
                                }
                            }
                            scope 35 {
                                debug left_val => _189;
                                debug right_val => _190;
                                let _193: core::panicking::AssertKind;
                                scope 36 {
                                    debug kind => _193;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _218 = const false;
        _217 = const false;
        _216 = const false;
        _215 = const false;
        _214 = const false;
        _213 = const false;
        _3 = channel::<Message>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _218 = const true;
        _1 = move (_3.0: std::sync::mpsc::Sender<Message>);
        _2 = move (_3.1: std::sync::mpsc::Receiver<Message>);
        _218 = const false;
        _5 = move _1;
        _4 = Foo::SimpleVariant(move _5);
        drop(_4) -> [return: bb2, unwind: bb93];
    }

    bb2: {
        _10 = &_2;
        _9 = std::sync::mpsc::Receiver::<Message>::recv(move _10) -> [return: bb3, unwind: bb93];
    }

    bb3: {
        _8 = Result::<Message, RecvError>::unwrap(move _9) -> [return: bb4, unwind: bb93];
    }

    bb4: {
        _7 = &_8;
        _212 = const _;
        _6 = (move _7, _212);
        _11 = (_6.0: &Message);
        _12 = (_6.1: &Message);
        _14 = <Message as PartialEq>::eq(_11, _12) -> [return: bb5, unwind: bb93];
    }

    bb5: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<Message, Message>(move _15, _11, _12, move _17) -> bb93;
    }

    bb7: {
        _22 = &_2;
        _21 = std::sync::mpsc::Receiver::<Message>::recv(move _22) -> [return: bb8, unwind: bb93];
    }

    bb8: {
        _20 = Result::<Message, RecvError>::ok(move _21) -> [return: bb9, unwind: bb93];
    }

    bb9: {
        _19 = &_20;
        _211 = const _;
        _18 = (move _19, _211);
        _23 = (_18.0: &std::option::Option<Message>);
        _24 = (_18.1: &std::option::Option<Message>);
        _26 = <Option<Message> as PartialEq>::eq(_23, _24) -> [return: bb10, unwind: bb93];
    }

    bb10: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _27, _23, _24, move _29) -> bb93;
    }

    bb12: {
        _32 = channel::<Message>() -> [return: bb13, unwind: bb93];
    }

    bb13: {
        _217 = const true;
        _30 = move (_32.0: std::sync::mpsc::Sender<Message>);
        _31 = move (_32.1: std::sync::mpsc::Receiver<Message>);
        _34 = Box::<usize>::new(const 42_usize) -> [return: bb14, unwind: bb92];
    }

    bb14: {
        _37 = &_30;
        _36 = <Sender<Message> as Clone>::clone(move _37) -> [return: bb15, unwind: bb91];
    }

    bb15: {
        _35 = SendOnDrop { sender: move _36 };
        _217 = const false;
        _38 = move _30;
        _33 = Foo::NestedVariant(move _34, move _35, move _38);
        drop(_33) -> [return: bb16, unwind: bb92];
    }

    bb16: {
        _43 = &_31;
        _42 = std::sync::mpsc::Receiver::<Message>::recv(move _43) -> [return: bb17, unwind: bb92];
    }

    bb17: {
        _41 = Result::<Message, RecvError>::unwrap(move _42) -> [return: bb18, unwind: bb92];
    }

    bb18: {
        _40 = &_41;
        _210 = const _;
        _39 = (move _40, _210);
        _44 = (_39.0: &Message);
        _45 = (_39.1: &Message);
        _47 = <Message as PartialEq>::eq(_44, _45) -> [return: bb19, unwind: bb92];
    }

    bb19: {
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<Message, Message>(move _48, _44, _45, move _50) -> bb92;
    }

    bb21: {
        _55 = &_31;
        _54 = std::sync::mpsc::Receiver::<Message>::recv(move _55) -> [return: bb22, unwind: bb92];
    }

    bb22: {
        _53 = Result::<Message, RecvError>::unwrap(move _54) -> [return: bb23, unwind: bb92];
    }

    bb23: {
        _52 = &_53;
        _209 = const _;
        _51 = (move _52, _209);
        _56 = (_51.0: &Message);
        _57 = (_51.1: &Message);
        _59 = <Message as PartialEq>::eq(_56, _57) -> [return: bb24, unwind: bb92];
    }

    bb24: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<Message, Message>(move _60, _56, _57, move _62) -> bb92;
    }

    bb26: {
        _67 = &_31;
        _66 = std::sync::mpsc::Receiver::<Message>::recv(move _67) -> [return: bb27, unwind: bb92];
    }

    bb27: {
        _65 = Result::<Message, RecvError>::ok(move _66) -> [return: bb28, unwind: bb92];
    }

    bb28: {
        _64 = &_65;
        _208 = const _;
        _63 = (move _64, _208);
        _68 = (_63.0: &std::option::Option<Message>);
        _69 = (_63.1: &std::option::Option<Message>);
        _71 = <Option<Message> as PartialEq>::eq(_68, _69) -> [return: bb29, unwind: bb92];
    }

    bb29: {
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _72, _68, _69, move _74) -> bb92;
    }

    bb31: {
        _77 = channel::<Message>() -> [return: bb32, unwind: bb92];
    }

    bb32: {
        _216 = const true;
        _75 = move (_77.0: std::sync::mpsc::Sender<Message>);
        _76 = move (_77.1: std::sync::mpsc::Receiver<Message>);
        _216 = const false;
        _79 = [closure@ui/drop/drop-trait-enum.rs:66:27: 66:33] { sender: move _75 };
        _78 = spawn::<[closure@ui/drop/drop-trait-enum.rs:66:27: 66:33], ()>(move _79) -> [return: bb33, unwind: bb90];
    }

    bb33: {
        _215 = const true;
        _84 = &_76;
        _83 = std::sync::mpsc::Receiver::<Message>::recv(move _84) -> [return: bb34, unwind: bb100];
    }

    bb34: {
        _82 = Result::<Message, RecvError>::unwrap(move _83) -> [return: bb35, unwind: bb100];
    }

    bb35: {
        _81 = &_82;
        _207 = const _;
        _80 = (move _81, _207);
        _85 = (_80.0: &Message);
        _86 = (_80.1: &Message);
        _88 = <Message as PartialEq>::eq(_85, _86) -> [return: bb36, unwind: bb100];
    }

    bb36: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<Message, Message>(move _89, _85, _86, move _91) -> bb100;
    }

    bb38: {
        _96 = &_76;
        _95 = std::sync::mpsc::Receiver::<Message>::recv(move _96) -> [return: bb39, unwind: bb100];
    }

    bb39: {
        _94 = Result::<Message, RecvError>::ok(move _95) -> [return: bb40, unwind: bb100];
    }

    bb40: {
        _93 = &_94;
        _206 = const _;
        _92 = (move _93, _206);
        _97 = (_92.0: &std::option::Option<Message>);
        _98 = (_92.1: &std::option::Option<Message>);
        _100 = <Option<Message> as PartialEq>::eq(_97, _98) -> [return: bb41, unwind: bb100];
    }

    bb41: {
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _101, _97, _98, move _103) -> bb100;
    }

    bb43: {
        _215 = const false;
        _106 = move _78;
        _105 = JoinHandle::<()>::join(move _106) -> [return: bb44, unwind: bb100];
    }

    bb44: {
        _104 = std::mem::drop::<Result<(), Box<dyn Any + Send>>>(move _105) -> [return: bb45, unwind: bb100];
    }

    bb45: {
        _109 = channel::<Message>() -> [return: bb46, unwind: bb100];
    }

    bb46: {
        _214 = const true;
        _107 = move (_109.0: std::sync::mpsc::Sender<Message>);
        _108 = move (_109.1: std::sync::mpsc::Receiver<Message>);
        _214 = const false;
        _111 = [closure@ui/drop/drop-trait-enum.rs:75:23: 75:29] { sender: move _107 };
        _110 = spawn::<[closure@ui/drop/drop-trait-enum.rs:75:23: 75:29], ()>(move _111) -> [return: bb47, unwind: bb89];
    }

    bb47: {
        _213 = const true;
        _116 = &_108;
        _115 = std::sync::mpsc::Receiver::<Message>::recv(move _116) -> [return: bb48, unwind: bb96];
    }

    bb48: {
        _114 = Result::<Message, RecvError>::unwrap(move _115) -> [return: bb49, unwind: bb96];
    }

    bb49: {
        _113 = &_114;
        _205 = const _;
        _112 = (move _113, _205);
        _117 = (_112.0: &Message);
        _118 = (_112.1: &Message);
        _120 = <Message as PartialEq>::eq(_117, _118) -> [return: bb50, unwind: bb96];
    }

    bb50: {
        _119 = Not(move _120);
        switchInt(move _119) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<Message, Message>(move _121, _117, _118, move _123) -> bb96;
    }

    bb52: {
        _128 = &_108;
        _127 = std::sync::mpsc::Receiver::<Message>::recv(move _128) -> [return: bb53, unwind: bb96];
    }

    bb53: {
        _126 = Result::<Message, RecvError>::unwrap(move _127) -> [return: bb54, unwind: bb96];
    }

    bb54: {
        _125 = &_126;
        _204 = const _;
        _124 = (move _125, _204);
        _129 = (_124.0: &Message);
        _130 = (_124.1: &Message);
        _132 = <Message as PartialEq>::eq(_129, _130) -> [return: bb55, unwind: bb96];
    }

    bb55: {
        _131 = Not(move _132);
        switchInt(move _131) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _133 = core::panicking::AssertKind::Eq;
        _135 = Option::<Arguments<'_>>::None;
        _134 = core::panicking::assert_failed::<Message, Message>(move _133, _129, _130, move _135) -> bb96;
    }

    bb57: {
        _140 = &_108;
        _139 = std::sync::mpsc::Receiver::<Message>::recv(move _140) -> [return: bb58, unwind: bb96];
    }

    bb58: {
        _138 = Result::<Message, RecvError>::unwrap(move _139) -> [return: bb59, unwind: bb96];
    }

    bb59: {
        _137 = &_138;
        _203 = const _;
        _136 = (move _137, _203);
        _141 = (_136.0: &Message);
        _142 = (_136.1: &Message);
        _144 = <Message as PartialEq>::eq(_141, _142) -> [return: bb60, unwind: bb96];
    }

    bb60: {
        _143 = Not(move _144);
        switchInt(move _143) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _145 = core::panicking::AssertKind::Eq;
        _147 = Option::<Arguments<'_>>::None;
        _146 = core::panicking::assert_failed::<Message, Message>(move _145, _141, _142, move _147) -> bb96;
    }

    bb62: {
        _152 = &_108;
        _151 = std::sync::mpsc::Receiver::<Message>::recv(move _152) -> [return: bb63, unwind: bb96];
    }

    bb63: {
        _150 = Result::<Message, RecvError>::unwrap(move _151) -> [return: bb64, unwind: bb96];
    }

    bb64: {
        _149 = &_150;
        _202 = const _;
        _148 = (move _149, _202);
        _153 = (_148.0: &Message);
        _154 = (_148.1: &Message);
        _156 = <Message as PartialEq>::eq(_153, _154) -> [return: bb65, unwind: bb96];
    }

    bb65: {
        _155 = Not(move _156);
        switchInt(move _155) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<Message, Message>(move _157, _153, _154, move _159) -> bb96;
    }

    bb67: {
        _164 = &_108;
        _163 = std::sync::mpsc::Receiver::<Message>::recv(move _164) -> [return: bb68, unwind: bb96];
    }

    bb68: {
        _162 = Result::<Message, RecvError>::unwrap(move _163) -> [return: bb69, unwind: bb96];
    }

    bb69: {
        _161 = &_162;
        _201 = const _;
        _160 = (move _161, _201);
        _165 = (_160.0: &Message);
        _166 = (_160.1: &Message);
        _168 = <Message as PartialEq>::eq(_165, _166) -> [return: bb70, unwind: bb96];
    }

    bb70: {
        _167 = Not(move _168);
        switchInt(move _167) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _169 = core::panicking::AssertKind::Eq;
        _171 = Option::<Arguments<'_>>::None;
        _170 = core::panicking::assert_failed::<Message, Message>(move _169, _165, _166, move _171) -> bb96;
    }

    bb72: {
        _176 = &_108;
        _175 = std::sync::mpsc::Receiver::<Message>::recv(move _176) -> [return: bb73, unwind: bb96];
    }

    bb73: {
        _174 = Result::<Message, RecvError>::unwrap(move _175) -> [return: bb74, unwind: bb96];
    }

    bb74: {
        _173 = &_174;
        _200 = const _;
        _172 = (move _173, _200);
        _177 = (_172.0: &Message);
        _178 = (_172.1: &Message);
        _180 = <Message as PartialEq>::eq(_177, _178) -> [return: bb75, unwind: bb96];
    }

    bb75: {
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _181 = core::panicking::AssertKind::Eq;
        _183 = Option::<Arguments<'_>>::None;
        _182 = core::panicking::assert_failed::<Message, Message>(move _181, _177, _178, move _183) -> bb96;
    }

    bb77: {
        _188 = &_108;
        _187 = std::sync::mpsc::Receiver::<Message>::recv(move _188) -> [return: bb78, unwind: bb96];
    }

    bb78: {
        _186 = Result::<Message, RecvError>::ok(move _187) -> [return: bb79, unwind: bb96];
    }

    bb79: {
        _185 = &_186;
        _199 = const _;
        _184 = (move _185, _199);
        _189 = (_184.0: &std::option::Option<Message>);
        _190 = (_184.1: &std::option::Option<Message>);
        _192 = <Option<Message> as PartialEq>::eq(_189, _190) -> [return: bb80, unwind: bb96];
    }

    bb80: {
        _191 = Not(move _192);
        switchInt(move _191) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<Option<Message>, Option<Message>>(move _193, _189, _190, move _195) -> bb96;
    }

    bb82: {
        _213 = const false;
        _198 = move _110;
        _197 = JoinHandle::<()>::join(move _198) -> [return: bb83, unwind: bb96];
    }

    bb83: {
        _196 = std::mem::drop::<Result<(), Box<dyn Any + Send>>>(move _197) -> [return: bb84, unwind: bb96];
    }

    bb84: {
        _213 = const false;
        drop(_108) -> [return: bb85, unwind: bb98];
    }

    bb85: {
        _214 = const false;
        _215 = const false;
        drop(_76) -> [return: bb86, unwind: bb102];
    }

    bb86: {
        _216 = const false;
        drop(_31) -> [return: bb87, unwind: bb104];
    }

    bb87: {
        _217 = const false;
        drop(_2) -> [return: bb88, unwind: bb106];
    }

    bb88: {
        _218 = const false;
        return;
    }

    bb89 (cleanup): {
        drop(_108) -> [return: bb98, unwind terminate];
    }

    bb90 (cleanup): {
        drop(_76) -> [return: bb102, unwind terminate];
    }

    bb91 (cleanup): {
        drop(_34) -> [return: bb92, unwind terminate];
    }

    bb92 (cleanup): {
        drop(_31) -> [return: bb104, unwind terminate];
    }

    bb93 (cleanup): {
        drop(_2) -> [return: bb106, unwind terminate];
    }

    bb94 (cleanup): {
        resume;
    }

    bb95 (cleanup): {
        drop(_110) -> [return: bb89, unwind terminate];
    }

    bb96 (cleanup): {
        switchInt(_213) -> [0: bb89, otherwise: bb95];
    }

    bb97 (cleanup): {
        drop(_107) -> [return: bb100, unwind terminate];
    }

    bb98 (cleanup): {
        switchInt(_214) -> [0: bb100, otherwise: bb97];
    }

    bb99 (cleanup): {
        drop(_78) -> [return: bb90, unwind terminate];
    }

    bb100 (cleanup): {
        switchInt(_215) -> [0: bb90, otherwise: bb99];
    }

    bb101 (cleanup): {
        drop(_75) -> [return: bb92, unwind terminate];
    }

    bb102 (cleanup): {
        switchInt(_216) -> [0: bb92, otherwise: bb101];
    }

    bb103 (cleanup): {
        drop(_30) -> [return: bb93, unwind terminate];
    }

    bb104 (cleanup): {
        switchInt(_217) -> [0: bb93, otherwise: bb103];
    }

    bb105 (cleanup): {
        drop(_1) -> [return: bb94, unwind terminate];
    }

    bb106 (cleanup): {
        switchInt(_218) -> [0: bb94, otherwise: bb105];
    }
}

promoted[0] in main: &Option<Message> = {
    let mut _0: &std::option::Option<Message>;
    let mut _1: std::option::Option<Message>;

    bb0: {
        _1 = Option::<Message>::None;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::Dropped;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::DestructorRan;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::Dropped;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::DestructorRan;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::Dropped;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::DestructorRan;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &Option<Message> = {
    let mut _0: &std::option::Option<Message>;
    let mut _1: std::option::Option<Message>;

    bb0: {
        _1 = Option::<Message>::None;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::Dropped;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &Option<Message> = {
    let mut _0: &std::option::Option<Message>;
    let mut _1: std::option::Option<Message>;

    bb0: {
        _1 = Option::<Message>::None;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::Dropped;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::DestructorRan;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &Option<Message> = {
    let mut _0: &std::option::Option<Message>;
    let mut _1: std::option::Option<Message>;

    bb0: {
        _1 = Option::<Message>::None;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &Message = {
    let mut _0: &Message;
    let mut _1: Message;

    bb0: {
        _1 = Message::DestructorRan;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/drop/drop-trait-enum.rs:66:27: 66:33]) -> () {
    debug sender => (_1.0: std::sync::mpsc::Sender<Message>);
    let mut _0: ();
    let _2: Foo;
    let mut _3: SendOnDrop;
    let mut _4: std::sync::mpsc::Sender<Message>;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _4 = move (_1.0: std::sync::mpsc::Sender<Message>);
        _3 = SendOnDrop { sender: move _4 };
        _2 = Foo::FailingVariant { on_drop: move _3 };
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/drop/drop-trait-enum.rs:75:23: 75:29]) -> () {
    debug sender => (_1.0: std::sync::mpsc::Sender<Message>);
    let mut _0: ();
    let mut _2: Foo;
    let mut _3: std::boxed::Box<usize>;
    let mut _4: SendOnDrop;
    let mut _5: std::sync::mpsc::Sender<Message>;
    let mut _6: &std::sync::mpsc::Sender<Message>;
    let mut _7: std::sync::mpsc::Sender<Message>;
    let mut _8: &std::sync::mpsc::Sender<Message>;
    let mut _9: Foo;
    let mut _10: std::boxed::Box<usize>;
    let mut _11: SendOnDrop;
    let mut _12: std::sync::mpsc::Sender<Message>;
    let mut _13: &std::sync::mpsc::Sender<Message>;
    let mut _14: std::sync::mpsc::Sender<Message>;
    let mut _15: &std::sync::mpsc::Sender<Message>;
    let mut _16: Foo;
    let mut _17: std::sync::mpsc::Sender<Message>;
    let mut _18: &std::sync::mpsc::Sender<Message>;
    let mut _19: Foo;
    let mut _20: SendOnDrop;
    let mut _21: std::sync::mpsc::Sender<Message>;
    let mut _22: bool;
    scope 1 {
        debug v => _2;
    }

    bb0: {
        _22 = const false;
        _22 = const true;
        _3 = Box::<usize>::new(const 42_usize) -> [return: bb1, unwind: bb22];
    }

    bb1: {
        _6 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _5 = <Sender<Message> as Clone>::clone(move _6) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _4 = SendOnDrop { sender: move _5 };
        _8 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _7 = <Sender<Message> as Clone>::clone(move _8) -> [return: bb3, unwind: bb18];
    }

    bb3: {
        _2 = Foo::NestedVariant(move _3, move _4, move _7);
        _10 = Box::<usize>::new(const 42_usize) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _13 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _12 = <Sender<Message> as Clone>::clone(move _13) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _11 = SendOnDrop { sender: move _12 };
        _15 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _14 = <Sender<Message> as Clone>::clone(move _15) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _9 = Foo::NestedVariant(move _10, move _11, move _14);
        drop(_2) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        _2 = move _9;
        _18 = &(_1.0: std::sync::mpsc::Sender<Message>);
        _17 = <Sender<Message> as Clone>::clone(move _18) -> [return: bb9, unwind: bb17];
    }

    bb8 (cleanup): {
        _2 = move _9;
        goto -> bb17;
    }

    bb9: {
        _16 = Foo::SimpleVariant(move _17);
        drop(_2) -> [return: bb10, unwind: bb11];
    }

    bb10: {
        _2 = move _16;
        _22 = const false;
        _21 = move (_1.0: std::sync::mpsc::Sender<Message>);
        _20 = SendOnDrop { sender: move _21 };
        _19 = Foo::FailingVariant { on_drop: move _20 };
        drop(_2) -> [return: bb12, unwind: bb13];
    }

    bb11 (cleanup): {
        _2 = move _16;
        goto -> bb17;
    }

    bb12: {
        _2 = move _19;
        drop(_2) -> [return: bb14, unwind: bb22];
    }

    bb13 (cleanup): {
        _2 = move _19;
        goto -> bb17;
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_11) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_10) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb22, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_4) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb22, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21 (cleanup): {
        drop((_1.0: std::sync::mpsc::Sender<Message>)) -> [return: bb20, unwind terminate];
    }

    bb22 (cleanup): {
        switchInt(_22) -> [0: bb20, otherwise: bb21];
    }
}

fn Foo::SimpleVariant(_1: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::SimpleVariant(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::SimpleVariant(_1: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::SimpleVariant(move _1);
        return;
    }
}

fn Foo::NestedVariant(_1: Box<usize>, _2: SendOnDrop, _3: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::NestedVariant(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn Foo::NestedVariant(_1: Box<usize>, _2: SendOnDrop, _3: Sender<Message>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::NestedVariant(move _1, move _2, move _3);
        return;
    }
}
