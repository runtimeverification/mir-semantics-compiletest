// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/issue-90752.rs:7:1: 7:24>::drop(_1: &mut S<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/issue-90752.rs:8:13: 8:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-90752.rs:8:24: 8:24
    let _2: ();                          // in scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
    let mut _3: &mut std::vec::Vec<i32>; // in scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
    let mut _4: &mut std::vec::Vec<i32>; // in scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:9:9: 9:28
    let mut _7: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:9:9: 9:28
    let mut _8: i32;                     // in scope 0 at ui/drop/issue-90752.rs:9:34: 9:40
    let mut _9: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:8:13: 8:22

    bb0: {
        _9 = deref_copy ((*_1).1: &std::cell::RefCell<std::vec::Vec<i32>>); // scope 0 at ui/drop/issue-90752.rs:9:9: 9:28
        _7 = _9;                         // scope 0 at ui/drop/issue-90752.rs:9:9: 9:28
        _6 = RefCell::<Vec<i32>>::borrow_mut(move _7) -> bb1; // scope 0 at ui/drop/issue-90752.rs:9:9: 9:28
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:9:16: 9:26
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> RefMut<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
        _4 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:9:9: 9:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<i32>>) -> &'a mut <RefMut<'_, Vec<i32>> as Deref>::Target {<RefMut<'_, Vec<i32>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut (*_4);                 // scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
        _8 = ((*_1).0: i32);             // scope 0 at ui/drop/issue-90752.rs:9:34: 9:40
        _2 = Vec::<i32>::push(move _3, move _8) -> [return: bb3, unwind: bb5]; // scope 0 at ui/drop/issue-90752.rs:9:9: 9:41
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:9:29: 9:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_6) -> bb4;                 // scope 0 at ui/drop/issue-90752.rs:9:41: 9:42
    }

    bb4: {
        return;                          // scope 0 at ui/drop/issue-90752.rs:10:6: 10:6
    }

    bb5 (cleanup): {
        drop(_6) -> bb6;                 // scope 0 at ui/drop/issue-90752.rs:9:41: 9:42
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/drop/issue-90752.rs:8:5: 10:6
    }
}

fn test(_1: &RefCell<Vec<i32>>) -> () {
    debug drops => _1;                   // in scope 0 at ui/drop/issue-90752.rs:13:9: 13:14
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-90752.rs:13:36: 13:36
    let mut _2: std::option::Option<(S<'_>, S<'_>)>; // in scope 0 at ui/drop/issue-90752.rs:14:9: 14:16
    let mut _3: isize;                   // in scope 0 at ui/drop/issue-90752.rs:16:9: 16:13
    let mut _4: std::option::Option<(S<'_>, S<'_>)>; // in scope 0 at ui/drop/issue-90752.rs:20:19: 20:51
    let mut _5: (S<'_>, S<'_>);          // in scope 0 at ui/drop/issue-90752.rs:20:24: 20:50
    let mut _6: S<'_>;                   // in scope 0 at ui/drop/issue-90752.rs:20:25: 20:36
    let mut _7: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:20:30: 20:35
    let mut _8: S<'_>;                   // in scope 0 at ui/drop/issue-90752.rs:20:38: 20:49
    let mut _9: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:20:43: 20:48
    let mut _10: &mut std::option::Option<(S<'_>, S<'_>)>; // in scope 0 at ui/drop/issue-90752.rs:20:6: 20:16
    let mut _11: isize;                  // in scope 0 at ui/drop/issue-90752.rs:23:9: 23:22
    let mut _13: bool;                   // in scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    let mut _14: bool;                   // in scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    let mut _15: isize;                  // in scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    let mut _16: isize;                  // in scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    scope 1 {
        debug foo => _2;                 // in scope 1 at ui/drop/issue-90752.rs:14:9: 14:16
        let _12: S<'_>;                  // in scope 1 at ui/drop/issue-90752.rs:23:15: 23:17
        scope 2 {
            debug _x => _12;             // in scope 2 at ui/drop/issue-90752.rs:23:15: 23:17
        }
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/drop/issue-90752.rs:14:9: 14:16
        _14 = const false;               // scope 0 at ui/drop/issue-90752.rs:14:9: 14:16
        _13 = const true;                // scope 0 at ui/drop/issue-90752.rs:14:19: 14:23
        _14 = const true;                // scope 0 at ui/drop/issue-90752.rs:14:19: 14:23
        _2 = Option::<(S<'_>, S<'_>)>::None; // scope 0 at ui/drop/issue-90752.rs:14:19: 14:23
        _3 = discriminant(_2);           // scope 1 at ui/drop/issue-90752.rs:15:11: 15:14
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/drop/issue-90752.rs:15:5: 15:14
    }

    bb1: {
        drop(_2) -> bb4;                 // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb2: {
        _7 = _1;                         // scope 1 at ui/drop/issue-90752.rs:20:30: 20:35
        _6 = S::<'_>(const 0_i32, move _7); // scope 1 at ui/drop/issue-90752.rs:20:25: 20:36
        _9 = _1;                         // scope 1 at ui/drop/issue-90752.rs:20:43: 20:48
        _8 = S::<'_>(const 1_i32, move _9); // scope 1 at ui/drop/issue-90752.rs:20:38: 20:49
        _5 = (move _6, move _8);         // scope 1 at ui/drop/issue-90752.rs:20:24: 20:50
        _4 = Option::<(S<'_>, S<'_>)>::Some(move _5); // scope 1 at ui/drop/issue-90752.rs:20:19: 20:51
        _10 = &mut _2;                   // scope 1 at ui/drop/issue-90752.rs:20:6: 20:16
        drop((*_10)) -> [return: bb8, unwind: bb7]; // scope 1 at ui/drop/issue-90752.rs:20:5: 20:16
    }

    bb3: {
        _14 = const false;               // scope 1 at ui/drop/issue-90752.rs:23:15: 23:17
        _12 = move (((_2 as Some).0: (S<'_>, S<'_>)).0: S<'_>); // scope 1 at ui/drop/issue-90752.rs:23:15: 23:17
        drop(_12) -> [return: bb17, unwind: bb22]; // scope 1 at ui/drop/issue-90752.rs:23:27: 23:28
    }

    bb4: {
        _13 = const false;               // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        _14 = const false;               // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        goto -> bb5;                     // scope 0 at ui/drop/issue-90752.rs:26:2: 26:2
    }

    bb5: {
        return;                          // scope 0 at ui/drop/issue-90752.rs:26:2: 26:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/drop/issue-90752.rs:13:1: 26:2
    }

    bb7 (cleanup): {
        (*_10) = move _4;                // scope 1 at ui/drop/issue-90752.rs:20:5: 20:16
        goto -> bb22;                    // scope 1 at ui/drop/issue-90752.rs:20:5: 20:16
    }

    bb8: {
        (*_10) = move _4;                // scope 1 at ui/drop/issue-90752.rs:20:5: 20:16
        _11 = discriminant(_2);          // scope 1 at ui/drop/issue-90752.rs:22:11: 22:14
        switchInt(move _11) -> [1: bb3, otherwise: bb17]; // scope 1 at ui/drop/issue-90752.rs:22:5: 22:14
    }

    bb9: {
        _13 = const false;               // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        _14 = const false;               // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        goto -> bb5;                     // scope 0 at ui/drop/issue-90752.rs:26:2: 26:2
    }

    bb10: {
        switchInt(_14) -> [0: bb15, otherwise: bb16]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb11: {
        _13 = const false;               // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        goto -> bb9;                     // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb12 (cleanup): {
        drop((((_2 as Some).0: (S<'_>, S<'_>)).1: S<'_>)) -> bb6; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb13 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb12]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb14: {
        drop((((_2 as Some).0: (S<'_>, S<'_>)).1: S<'_>)) -> bb11; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb15: {
        switchInt(_13) -> [0: bb11, otherwise: bb14]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb16: {
        drop((((_2 as Some).0: (S<'_>, S<'_>)).0: S<'_>)) -> [return: bb15, unwind: bb13]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb17: {
        _15 = discriminant(_2);          // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        switchInt(move _15) -> [1: bb10, otherwise: bb9]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb18 (cleanup): {
        switchInt(_14) -> [0: bb20, otherwise: bb21]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb19 (cleanup): {
        drop((((_2 as Some).0: (S<'_>, S<'_>)).1: S<'_>)) -> bb6; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb20 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb19]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb21 (cleanup): {
        drop((((_2 as Some).0: (S<'_>, S<'_>)).0: S<'_>)) -> bb20; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }

    bb22 (cleanup): {
        _16 = discriminant(_2);          // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
        switchInt(move _16) -> [1: bb18, otherwise: bb6]; // scope 0 at ui/drop/issue-90752.rs:26:1: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-90752.rs:28:11: 28:11
    let _1: std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:29:9: 29:14
    let mut _2: std::vec::Vec<i32>;      // in scope 0 at ui/drop/issue-90752.rs:29:30: 29:40
    let _3: ();                          // in scope 0 at ui/drop/issue-90752.rs:30:5: 30:17
    let mut _4: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:30:10: 30:16
    let _5: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:30:10: 30:16
    let mut _6: (&std::vec::Vec<i32>, &&[i32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: &std::vec::Vec<i32>;         // in scope 0 at ui/drop/issue-90752.rs:31:16: 31:31
    let mut _9: &std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:31:17: 31:31
    let _10: std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:31:17: 31:31
    let mut _11: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/drop/issue-90752.rs:31:17: 31:31
    let mut _12: &&[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: &&[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &&[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &&[i32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug drops => _1;               // in scope 1 at ui/drop/issue-90752.rs:29:9: 29:14
        let _13: &std::vec::Vec<i32>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _14: &&[i32; 2];             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _27: &&[i32; 2];         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _13;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _14;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _19: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _19;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/drop/issue-90752.rs:29:30: 29:40
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:29:30: 29:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = RefCell::<Vec<i32>>::new(move _2) -> bb2; // scope 0 at ui/drop/issue-90752.rs:29:17: 29:41
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:29:17: 29:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<i32>) -> RefCell<Vec<i32>> {RefCell::<Vec<i32>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_1;                        // scope 1 at ui/drop/issue-90752.rs:30:10: 30:16
        _4 = _5;                         // scope 1 at ui/drop/issue-90752.rs:30:10: 30:16
        _3 = test(move _4) -> [return: bb3, unwind: bb12]; // scope 1 at ui/drop/issue-90752.rs:30:5: 30:17
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:30:5: 30:9
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) {test}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &_1;                       // scope 1 at ui/drop/issue-90752.rs:31:17: 31:31
        _10 = RefCell::<Vec<i32>>::borrow(move _11) -> [return: bb4, unwind: bb12]; // scope 1 at ui/drop/issue-90752.rs:31:17: 31:31
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:31:23: 31:29
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> Ref<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &_10;                       // scope 1 at ui/drop/issue-90752.rs:31:17: 31:31
        _8 = <Ref<'_, Vec<i32>> as Deref>::deref(move _9) -> [return: bb5, unwind: bb11]; // scope 1 at ui/drop/issue-90752.rs:31:16: 31:31
                                         // mir::Constant
                                         // + span: ui/drop/issue-90752.rs:31:16: 31:31
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<i32>>) -> &'a <Ref<'_, Vec<i32>> as Deref>::Target {<Ref<'_, Vec<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = _8;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _12);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_6.0: &std::vec::Vec<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_6.1: &&[i32; 2]);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = <Vec<i32> as PartialEq<&[i32; 2]>>::eq(move _17, move _18) -> [return: bb6, unwind: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b &[i32; 2]) -> bool {<Vec<i32> as PartialEq<&[i32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = Not(move _16);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<Vec<i32>, &[i32; 2]>(move _21, move _22, move _24, move _26) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b &[i32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, &[i32; 2]>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_10) -> [return: bb9, unwind: bb12]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/drop/issue-90752.rs:32:1: 32:2
    }

    bb10: {
        return;                          // scope 0 at ui/drop/issue-90752.rs:32:2: 32:2
    }

    bb11 (cleanup): {
        drop(_10) -> bb12;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/drop/issue-90752.rs:32:1: 32:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/drop/issue-90752.rs:28:1: 32:2
    }
}

promoted[0] in main: &&[i32; 2] = {
    let mut _0: &&[i32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 2];               // in scope 0 at ui/drop/issue-90752.rs:31:33: 31:40
    let mut _2: [i32; 2];                // in scope 0 at ui/drop/issue-90752.rs:31:34: 31:40

    bb0: {
        _2 = [const 0_i32, const 1_i32]; // scope 0 at ui/drop/issue-90752.rs:31:34: 31:40
        _1 = &_2;                        // scope 0 at ui/drop/issue-90752.rs:31:33: 31:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn S(_1: i32, _2: &RefCell<Vec<i32>>) -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/drop/issue-90752.rs:5:1: 5:13

    bb0: {
        _0 = S::<'_>(move _1, move _2);  // scope 0 at ui/drop/issue-90752.rs:5:1: 5:13
        return;                          // scope 0 at ui/drop/issue-90752.rs:5:1: 5:13
    }
}

// MIR FOR CTFE
fn S(_1: i32, _2: &RefCell<Vec<i32>>) -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/drop/issue-90752.rs:5:1: 5:13

    bb0: {
        _0 = S::<'_>(move _1, move _2);  // scope 0 at ui/drop/issue-90752.rs:5:1: 5:13
        return;                          // scope 0 at ui/drop/issue-90752.rs:5:1: 5:13
    }
}
