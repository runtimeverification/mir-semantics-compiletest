// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/dropck-eyepatch.rs:43:1: 43:28>::drop(_1: &mut Dt<A>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:44:13: 44:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:44:24: 44:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
    let mut _5: &[&str; 2];              // in scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
    let _6: &[&str; 2];                  // in scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:44:46: 44:52
    let mut _12: &&str;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:44:46: 44:52
    let _13: &&str;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:44:46: 44:52
    let _14: ();                         // in scope 0 at ui/drop/dropck-eyepatch.rs:44:55: 44:73
    let mut _15: &A;                     // in scope 0 at ui/drop/dropck-eyepatch.rs:44:55: 44:73
    let mut _16: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:44:66: 44:72
    let mut _17: &[&str; 2];             // in scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
    let mut _18: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:44:13: 44:22

    bb0: {
        _17 = const _;                   // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:44:35: 44:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Dt<A> as Drop>::drop, [A], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
        _5 = _6;                         // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
        _13 = &((*_1).0: &str);          // scope 0 at ui/drop/dropck-eyepatch.rs:44:46: 44:52
        _12 = _13;                       // scope 0 at ui/drop/dropck-eyepatch.rs:44:46: 44:52
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:44:46: 44:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:44:46: 44:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = &((*_1).1: A);             // scope 0 at ui/drop/dropck-eyepatch.rs:44:55: 44:73
        _18 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck-eyepatch.rs:44:66: 44:72
        _16 = _18;                       // scope 0 at ui/drop/dropck-eyepatch.rs:44:66: 44:72
        _14 = <A as Foo>::foo(move _15, move _16) -> bb4; // scope 0 at ui/drop/dropck-eyepatch.rs:44:55: 44:73
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:44:62: 44:65
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b str) {<A as Foo>::foo}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:44:76: 44:76
    }
}

promoted[0] in <impl at ui/drop/dropck-eyepatch.rs:43:1: 43:28>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44

    bb0: {
        _1 = [const "drop ", const "\n"]; // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:44:35: 44:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:44:35: 44:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:44:35: 44:44
    }
}

fn <impl at ui/drop/dropck-eyepatch.rs:46:1: 46:36>::drop(_1: &mut Dr<'_, B>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:47:13: 47:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:47:24: 47:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
    let mut _5: &[&str; 2];              // in scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
    let _6: &[&str; 2];                  // in scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:47:46: 47:52
    let mut _12: &&str;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:47:46: 47:52
    let _13: &&str;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:47:46: 47:52
    let _14: ();                         // in scope 0 at ui/drop/dropck-eyepatch.rs:47:55: 47:73
    let mut _15: &B;                     // in scope 0 at ui/drop/dropck-eyepatch.rs:47:55: 47:73
    let mut _16: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:47:66: 47:72
    let mut _17: &[&str; 2];             // in scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
    let mut _18: &B;                     // in scope 0 at ui/drop/dropck-eyepatch.rs:47:13: 47:22
    let mut _19: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:47:13: 47:22

    bb0: {
        _17 = const _;                   // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:47:35: 47:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Dr<'a, B> as Drop>::drop, [ReErased, B], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
        _5 = _6;                         // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
        _13 = &((*_1).0: &str);          // scope 0 at ui/drop/dropck-eyepatch.rs:47:46: 47:52
        _12 = _13;                       // scope 0 at ui/drop/dropck-eyepatch.rs:47:46: 47:52
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:47:46: 47:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:47:46: 47:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = deref_copy ((*_1).1: &B);  // scope 0 at ui/drop/dropck-eyepatch.rs:47:55: 47:73
        _15 = _18;                       // scope 0 at ui/drop/dropck-eyepatch.rs:47:55: 47:73
        _19 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck-eyepatch.rs:47:66: 47:72
        _16 = _19;                       // scope 0 at ui/drop/dropck-eyepatch.rs:47:66: 47:72
        _14 = <B as Foo>::foo(move _15, move _16) -> bb4; // scope 0 at ui/drop/dropck-eyepatch.rs:47:55: 47:73
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:47:62: 47:65
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b str) {<B as Foo>::foo}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:47:76: 47:76
    }
}

promoted[0] in <impl at ui/drop/dropck-eyepatch.rs:46:1: 46:36>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44

    bb0: {
        _1 = [const "drop ", const "\n"]; // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:47:35: 47:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:47:35: 47:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:47:35: 47:44
    }
}

fn <impl at ui/drop/dropck-eyepatch.rs:49:1: 49:55>::drop(_1: &mut Pt<A, B>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:51:13: 51:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:51:24: 51:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
    let mut _5: &[&str; 2];              // in scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
    let _6: &[&str; 2];                  // in scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:51:46: 51:52
    let mut _12: &&str;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:51:46: 51:52
    let _13: &&str;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:51:46: 51:52
    let _14: ();                         // in scope 0 at ui/drop/dropck-eyepatch.rs:51:55: 51:73
    let mut _15: &B;                     // in scope 0 at ui/drop/dropck-eyepatch.rs:51:55: 51:73
    let mut _16: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:51:66: 51:72
    let mut _17: &[&str; 2];             // in scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
    let mut _18: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:51:13: 51:22

    bb0: {
        _17 = const _;                   // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:51:35: 51:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Pt<A, B> as Drop>::drop, [A, B], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
        _5 = _6;                         // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
        _13 = &((*_1).0: &str);          // scope 0 at ui/drop/dropck-eyepatch.rs:51:46: 51:52
        _12 = _13;                       // scope 0 at ui/drop/dropck-eyepatch.rs:51:46: 51:52
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:51:46: 51:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:51:46: 51:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = &((*_1).2: B);             // scope 0 at ui/drop/dropck-eyepatch.rs:51:55: 51:73
        _18 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck-eyepatch.rs:51:66: 51:72
        _16 = _18;                       // scope 0 at ui/drop/dropck-eyepatch.rs:51:66: 51:72
        _14 = <B as Foo>::foo(move _15, move _16) -> bb4; // scope 0 at ui/drop/dropck-eyepatch.rs:51:55: 51:73
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:51:62: 51:65
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b str) {<B as Foo>::foo}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:51:76: 51:76
    }
}

promoted[0] in <impl at ui/drop/dropck-eyepatch.rs:49:1: 49:55>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44

    bb0: {
        _1 = [const "drop ", const "\n"]; // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:51:35: 51:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:51:35: 51:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:51:35: 51:44
    }
}

fn <impl at ui/drop/dropck-eyepatch.rs:53:1: 53:65>::drop(_1: &mut Pr<'_, '_, B>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:55:13: 55:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:55:24: 55:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
    let mut _5: &[&str; 2];              // in scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
    let _6: &[&str; 2];                  // in scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:55:46: 55:52
    let mut _12: &&str;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:55:46: 55:52
    let _13: &&str;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:55:46: 55:52
    let _14: ();                         // in scope 0 at ui/drop/dropck-eyepatch.rs:55:55: 55:73
    let mut _15: &B;                     // in scope 0 at ui/drop/dropck-eyepatch.rs:55:55: 55:73
    let mut _16: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:55:66: 55:72
    let mut _17: &[&str; 2];             // in scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
    let mut _18: &B;                     // in scope 0 at ui/drop/dropck-eyepatch.rs:55:13: 55:22
    let mut _19: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:55:13: 55:22

    bb0: {
        _17 = const _;                   // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:55:35: 55:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Pr<'a, 'b, B> as Drop>::drop, [ReErased, ReErased, B], Some(promoted[0])) }
        _6 = _17;                        // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
        _5 = _6;                         // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
        _13 = &((*_1).0: &str);          // scope 0 at ui/drop/dropck-eyepatch.rs:55:46: 55:52
        _12 = _13;                       // scope 0 at ui/drop/dropck-eyepatch.rs:55:46: 55:52
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:55:46: 55:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:55:46: 55:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = deref_copy ((*_1).2: &B);  // scope 0 at ui/drop/dropck-eyepatch.rs:55:55: 55:73
        _15 = _18;                       // scope 0 at ui/drop/dropck-eyepatch.rs:55:55: 55:73
        _19 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck-eyepatch.rs:55:66: 55:72
        _16 = _19;                       // scope 0 at ui/drop/dropck-eyepatch.rs:55:66: 55:72
        _14 = <B as Foo>::foo(move _15, move _16) -> bb4; // scope 0 at ui/drop/dropck-eyepatch.rs:55:55: 55:73
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:55:62: 55:65
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b str) {<B as Foo>::foo}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:55:76: 55:76
    }
}

promoted[0] in <impl at ui/drop/dropck-eyepatch.rs:53:1: 53:65>::drop: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44

    bb0: {
        _1 = [const "drop ", const "\n"]; // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:55:35: 55:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:55:35: 55:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:55:35: 55:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:58:11: 58:11
    let _1: main::CheckOnDrop;           // in scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
    let mut _9: main::CheckOnDrop;       // in scope 0 at ui/drop/dropck-eyepatch.rs:82:14: 83:47
    let mut _10: std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:82:26: 82:60
    let mut _11: std::string::String;    // in scope 0 at ui/drop/dropck-eyepatch.rs:82:39: 82:59
    let mut _12: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:82:39: 82:59
    let _13: &str;                       // in scope 0 at ui/drop/dropck-eyepatch.rs:82:39: 82:47
    let mut _14: main::CheckOnDrop;      // in scope 0 at ui/drop/dropck-eyepatch.rs:84:9: 85:25
    let mut _15: std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:84:21: 84:50
    let mut _16: std::string::String;    // in scope 0 at ui/drop/dropck-eyepatch.rs:84:34: 84:49
    let mut _17: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:84:34: 84:49
    let _18: &str;                       // in scope 0 at ui/drop/dropck-eyepatch.rs:84:34: 84:37
    let mut _19: Dt<&std::cell::RefCell<std::string::String>>; // in scope 0 at ui/drop/dropck-eyepatch.rs:88:10: 88:29
    let mut _20: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:88:19: 88:28
    let mut _21: Dr<'_, std::cell::RefCell<std::string::String>>; // in scope 0 at ui/drop/dropck-eyepatch.rs:89:10: 89:29
    let mut _22: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:89:19: 89:28
    let _23: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:89:19: 89:28
    let mut _24: Pt<&std::cell::RefCell<std::string::String>, &std::cell::RefCell<std::string::String>>; // in scope 0 at ui/drop/dropck-eyepatch.rs:92:10: 92:35
    let mut _25: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:92:19: 92:23
    let mut _26: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:92:25: 92:34
    let mut _27: Pr<'_, '_, std::cell::RefCell<std::string::String>>; // in scope 0 at ui/drop/dropck-eyepatch.rs:93:10: 93:35
    let mut _28: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:93:19: 93:23
    let _29: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:93:19: 93:23
    let mut _30: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:93:25: 93:34
    let _31: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:93:25: 93:34
    let mut _32: St<&std::cell::RefCell<std::string::String>>; // in scope 0 at ui/drop/dropck-eyepatch.rs:96:10: 96:24
    let mut _33: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:96:19: 96:23
    let mut _34: Sr<'_, std::cell::RefCell<std::string::String>>; // in scope 0 at ui/drop/dropck-eyepatch.rs:97:10: 97:24
    let mut _35: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:97:19: 97:23
    let _36: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:97:19: 97:23
    let _37: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _38: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _39: &[&str];                // in scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
    let mut _40: &[&str; 2];             // in scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
    let _41: &[&str; 2];                 // in scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
    let mut _42: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _43: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _44: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _45: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _46: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
    let mut _47: &(&str, &str, &str, &str, &str, &str); // in scope 0 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
    let _48: &(&str, &str, &str, &str, &str, &str); // in scope 0 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
    let _49: (&str, &str, &str, &str, &str, &str); // in scope 0 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
    let mut _50: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:99:23: 99:27
    let mut _51: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:99:29: 99:33
    let mut _52: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:99:35: 99:39
    let mut _53: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:99:41: 99:45
    let mut _54: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:99:47: 99:51
    let mut _55: &str;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:99:53: 99:57
    let mut _56: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _58: &std::string::String;       // in scope 0 at ui/drop/dropck-eyepatch.rs:100:16: 100:34
    let mut _59: &std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:100:17: 100:34
    let _60: std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:100:17: 100:34
    let mut _61: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:100:17: 100:34
    let mut _62: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _67: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _68: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _70: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _71: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _72: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _73: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _74: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _75: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _77: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _78: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _79: &std::string::String;       // in scope 0 at ui/drop/dropck-eyepatch.rs:101:16: 101:29
    let mut _80: &std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:101:17: 101:29
    let _81: std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:101:17: 101:29
    let mut _82: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:101:17: 101:29
    let mut _83: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _88: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _89: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _91: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _92: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _93: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _94: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _95: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _96: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _101: bool;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    let mut _102: bool;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    let mut _103: bool;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    let mut _104: bool;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    let mut _105: bool;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    let mut _106: bool;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    scope 1 {
        debug c_long => _1;              // in scope 1 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        let _2: main::CheckOnDrop;       // in scope 1 at ui/drop/dropck-eyepatch.rs:80:10: 80:11
        let _3: Dt<&std::cell::RefCell<std::string::String>>; // in scope 1 at ui/drop/dropck-eyepatch.rs:80:13: 80:15
        let _4: Dr<'_, std::cell::RefCell<std::string::String>>; // in scope 1 at ui/drop/dropck-eyepatch.rs:80:17: 80:19
        let _5: Pt<&std::cell::RefCell<std::string::String>, &std::cell::RefCell<std::string::String>>; // in scope 1 at ui/drop/dropck-eyepatch.rs:80:21: 80:23
        let _6: Pr<'_, '_, std::cell::RefCell<std::string::String>>; // in scope 1 at ui/drop/dropck-eyepatch.rs:80:25: 80:27
        let _7: St<&std::cell::RefCell<std::string::String>>; // in scope 1 at ui/drop/dropck-eyepatch.rs:80:29: 80:31
        let _8: Sr<'_, std::cell::RefCell<std::string::String>>; // in scope 1 at ui/drop/dropck-eyepatch.rs:80:33: 80:35
        scope 2 {
            debug c => _2;               // in scope 2 at ui/drop/dropck-eyepatch.rs:80:10: 80:11
            debug dt => _3;              // in scope 2 at ui/drop/dropck-eyepatch.rs:80:13: 80:15
            debug dr => _4;              // in scope 2 at ui/drop/dropck-eyepatch.rs:80:17: 80:19
            debug pt => _5;              // in scope 2 at ui/drop/dropck-eyepatch.rs:80:21: 80:23
            debug pr => _6;              // in scope 2 at ui/drop/dropck-eyepatch.rs:80:25: 80:27
            debug st => _7;              // in scope 2 at ui/drop/dropck-eyepatch.rs:80:29: 80:31
            debug sr => _8;              // in scope 2 at ui/drop/dropck-eyepatch.rs:80:33: 80:35
            let _63: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _64: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _84: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _85: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _98: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _99: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _100: &[&str; 2];    // in scope 2 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
            scope 3 {
                debug left_val => _63;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _64;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _69: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _69;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _84;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _85;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _90: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _90;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _102 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        _105 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        _103 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        _106 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        _101 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        _104 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:79:9: 79:15
        _13 = const "c_long";            // scope 2 at ui/drop/dropck-eyepatch.rs:82:39: 82:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:82:39: 82:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 2 at ui/drop/dropck-eyepatch.rs:82:39: 82:59
        _11 = <str as ToString>::to_string(move _12) -> [return: bb1, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:82:39: 82:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:82:48: 82:57
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = RefCell::<String>::new(move _11) -> [return: bb2, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:82:26: 82:60
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:82:26: 82:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(String) -> RefCell<String> {RefCell::<String>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = CheckOnDrop(move _10, const "c_long|pr|pt|dr|dt"); // scope 2 at ui/drop/dropck-eyepatch.rs:82:14: 83:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:83:26: 83:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _106 = const true;               // scope 2 at ui/drop/dropck-eyepatch.rs:82:5: 82:11
        _1 = move _9;                    // scope 2 at ui/drop/dropck-eyepatch.rs:82:5: 82:11
        _18 = const "c";                 // scope 2 at ui/drop/dropck-eyepatch.rs:84:34: 84:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:84:34: 84:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 2 at ui/drop/dropck-eyepatch.rs:84:34: 84:49
        _16 = <str as ToString>::to_string(move _17) -> [return: bb3, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:84:34: 84:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:84:38: 84:47
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = RefCell::<String>::new(move _16) -> [return: bb4, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:84:21: 84:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:84:21: 84:33
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(String) -> RefCell<String> {RefCell::<String>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = CheckOnDrop(move _15, const "c"); // scope 2 at ui/drop/dropck-eyepatch.rs:84:9: 85:25
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:85:21: 85:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _105 = const true;               // scope 2 at ui/drop/dropck-eyepatch.rs:84:5: 84:6
        _2 = move _14;                   // scope 2 at ui/drop/dropck-eyepatch.rs:84:5: 84:6
        _20 = &(_1.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:88:19: 88:28
        _19 = Dt::<&RefCell<String>>(const "dt", move _20); // scope 2 at ui/drop/dropck-eyepatch.rs:88:10: 88:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:88:13: 88:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _104 = const true;               // scope 2 at ui/drop/dropck-eyepatch.rs:88:5: 88:7
        _3 = move _19;                   // scope 2 at ui/drop/dropck-eyepatch.rs:88:5: 88:7
        _23 = &(_1.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:89:19: 89:28
        _22 = _23;                       // scope 2 at ui/drop/dropck-eyepatch.rs:89:19: 89:28
        _21 = Dr::<'_, RefCell<String>>(const "dr", move _22); // scope 2 at ui/drop/dropck-eyepatch.rs:89:10: 89:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:89:13: 89:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _103 = const true;               // scope 2 at ui/drop/dropck-eyepatch.rs:89:5: 89:7
        _4 = move _21;                   // scope 2 at ui/drop/dropck-eyepatch.rs:89:5: 89:7
        _25 = &(_2.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:92:19: 92:23
        _26 = &(_1.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:92:25: 92:34
        _24 = Pt::<&RefCell<String>, &RefCell<String>>(const "pt", move _25, move _26); // scope 2 at ui/drop/dropck-eyepatch.rs:92:10: 92:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:92:13: 92:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _102 = const true;               // scope 2 at ui/drop/dropck-eyepatch.rs:92:5: 92:7
        _5 = move _24;                   // scope 2 at ui/drop/dropck-eyepatch.rs:92:5: 92:7
        _29 = &(_2.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:93:19: 93:23
        _28 = _29;                       // scope 2 at ui/drop/dropck-eyepatch.rs:93:19: 93:23
        _31 = &(_1.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:93:25: 93:34
        _30 = _31;                       // scope 2 at ui/drop/dropck-eyepatch.rs:93:25: 93:34
        _27 = Pr::<'_, '_, RefCell<String>>(const "pr", move _28, move _30); // scope 2 at ui/drop/dropck-eyepatch.rs:93:10: 93:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:93:13: 93:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _101 = const true;               // scope 2 at ui/drop/dropck-eyepatch.rs:93:5: 93:7
        _6 = move _27;                   // scope 2 at ui/drop/dropck-eyepatch.rs:93:5: 93:7
        _33 = &(_2.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:96:19: 96:23
        _32 = St::<&RefCell<String>>(const "st", move _33); // scope 2 at ui/drop/dropck-eyepatch.rs:96:10: 96:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:96:13: 96:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = move _32;                   // scope 2 at ui/drop/dropck-eyepatch.rs:96:5: 96:24
        _36 = &(_2.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:97:19: 97:23
        _35 = _36;                       // scope 2 at ui/drop/dropck-eyepatch.rs:97:19: 97:23
        _34 = Sr::<'_, RefCell<String>>(const "sr", move _35); // scope 2 at ui/drop/dropck-eyepatch.rs:97:10: 97:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:97:13: 97:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = move _34;                   // scope 2 at ui/drop/dropck-eyepatch.rs:97:5: 97:24
        _100 = const _;                  // scope 2 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:99:14: 99:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _41 = _100;                      // scope 2 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
        _40 = _41;                       // scope 2 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
        _39 = move _40 as &[&str] (Pointer(Unsize)); // scope 2 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
        _50 = (_3.0: &str);              // scope 2 at ui/drop/dropck-eyepatch.rs:99:23: 99:27
        _51 = (_4.0: &str);              // scope 2 at ui/drop/dropck-eyepatch.rs:99:29: 99:33
        _52 = (_5.0: &str);              // scope 2 at ui/drop/dropck-eyepatch.rs:99:35: 99:39
        _53 = (_6.0: &str);              // scope 2 at ui/drop/dropck-eyepatch.rs:99:41: 99:45
        _54 = (_7.0: &str);              // scope 2 at ui/drop/dropck-eyepatch.rs:99:47: 99:51
        _55 = (_8.0: &str);              // scope 2 at ui/drop/dropck-eyepatch.rs:99:53: 99:57
        _49 = (move _50, move _51, move _52, move _53, move _54, move _55); // scope 2 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
        _48 = &_49;                      // scope 2 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
        _47 = _48;                       // scope 2 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
        _46 = core::fmt::ArgumentV1::<'_>::new_debug::<(&str, &str, &str, &str, &str, &str)>(move _47) -> [return: bb5, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:99:22: 99:58
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:99:22: 99:58
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b (&str, &str, &str, &str, &str, &str)) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<(&str, &str, &str, &str, &str, &str)>}, val: Value(<ZST>) }
    }

    bb5: {
        _45 = [move _46];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _44 = &_45;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _43 = _44;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _42 = move _43 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _38 = Arguments::<'_>::new_v1(move _39, move _42) -> [return: bb6, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = _print(move _38) -> [return: bb7, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _61 = &(_1.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:100:17: 100:34
        _60 = RefCell::<String>::borrow(move _61) -> [return: bb8, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:100:17: 100:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:100:26: 100:32
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> Ref<'a, String> {RefCell::<String>::borrow}, val: Value(<ZST>) }
    }

    bb8: {
        _59 = &_60;                      // scope 2 at ui/drop/dropck-eyepatch.rs:100:17: 100:34
        _58 = <Ref<'_, String> as Deref>::deref(move _59) -> [return: bb9, unwind: bb27]; // scope 2 at ui/drop/dropck-eyepatch.rs:100:16: 100:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:100:16: 100:34
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, String>) -> &'a <Ref<'_, String> as Deref>::Target {<Ref<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _57 = _58;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _99 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _62 = _99;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _56 = (move _57, move _62);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _63 = (_56.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _64 = (_56.1: &&str);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _67 = _63;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _68 = _64;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _66 = <String as PartialEq<&str>>::eq(move _67, move _68) -> [return: bb10, unwind: bb27]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _65 = Not(move _66);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _65) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _69 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = _63;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _73;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _64;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = _75;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _70 = core::panicking::assert_failed::<String, &str>(move _71, move _72, move _74, move _76) -> bb27; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_60) -> [return: bb13, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        _82 = &(_2.0: std::cell::RefCell<std::string::String>); // scope 2 at ui/drop/dropck-eyepatch.rs:101:17: 101:29
        _81 = RefCell::<String>::borrow(move _82) -> [return: bb14, unwind: bb30]; // scope 2 at ui/drop/dropck-eyepatch.rs:101:17: 101:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:101:21: 101:27
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> Ref<'a, String> {RefCell::<String>::borrow}, val: Value(<ZST>) }
    }

    bb14: {
        _80 = &_81;                      // scope 2 at ui/drop/dropck-eyepatch.rs:101:17: 101:29
        _79 = <Ref<'_, String> as Deref>::deref(move _80) -> [return: bb15, unwind: bb26]; // scope 2 at ui/drop/dropck-eyepatch.rs:101:16: 101:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:101:16: 101:29
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, String>) -> &'a <Ref<'_, String> as Deref>::Target {<Ref<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _78 = _79;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _83 = _98;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _77 = (move _78, move _83);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _84 = (_77.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _85 = (_77.1: &&str);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _88 = _84;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _89 = _85;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _87 = <String as PartialEq<&str>>::eq(move _88, move _89) -> [return: bb16, unwind: bb26]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _86 = Not(move _87);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _86) -> [0: bb18, otherwise: bb17]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _90 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = _84;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _94;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _85;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = _96;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _91 = core::panicking::assert_failed::<String, &str>(move _92, move _93, move _95, move _97) -> bb26; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_81) -> [return: bb19, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19: {
        drop(_6) -> [return: bb20, unwind: bb32]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb20: {
        _101 = const false;              // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
        drop(_5) -> [return: bb21, unwind: bb34]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb21: {
        _102 = const false;              // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
        drop(_4) -> [return: bb22, unwind: bb36]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb22: {
        _103 = const false;              // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
        drop(_3) -> [return: bb23, unwind: bb38]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb23: {
        _104 = const false;              // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
        drop(_2) -> [return: bb24, unwind: bb40]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb24: {
        _105 = const false;              // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
        drop(_1) -> bb25;                // scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb25: {
        _106 = const false;              // scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:102:2: 102:2
    }

    bb26 (cleanup): {
        drop(_81) -> bb30;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27 (cleanup): {
        drop(_60) -> bb30;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck-eyepatch.rs:58:1: 102:2
    }

    bb29 (cleanup): {
        drop(_6) -> bb32;                // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb30 (cleanup): {
        switchInt(_101) -> [0: bb32, otherwise: bb29]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb31 (cleanup): {
        drop(_5) -> bb34;                // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb32 (cleanup): {
        switchInt(_102) -> [0: bb34, otherwise: bb31]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb33 (cleanup): {
        drop(_4) -> bb36;                // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb34 (cleanup): {
        switchInt(_103) -> [0: bb36, otherwise: bb33]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb35 (cleanup): {
        drop(_3) -> bb38;                // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb36 (cleanup): {
        switchInt(_104) -> [0: bb38, otherwise: bb35]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb37 (cleanup): {
        drop(_2) -> bb40;                // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb38 (cleanup): {
        switchInt(_105) -> [0: bb40, otherwise: bb37]; // scope 1 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb39 (cleanup): {
        drop(_1) -> bb28;                // scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }

    bb40 (cleanup): {
        switchInt(_106) -> [0: bb28, otherwise: bb39]; // scope 0 at ui/drop/dropck-eyepatch.rs:102:1: 102:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:101:31: 101:34

    bb0: {
        _1 = const "c";                  // scope 0 at ui/drop/dropck-eyepatch.rs:101:31: 101:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:101:31: 101:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:100:36: 100:44

    bb0: {
        _1 = const "c_long";             // scope 0 at ui/drop/dropck-eyepatch.rs:100:36: 100:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:100:36: 100:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:99:14: 99:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:99:14: 99:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:99:14: 99:20
    }
}

fn main::<impl at ui/drop/dropck-eyepatch.rs:61:5: 61:33>::foo(_1: &RefCell<String>, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:62:16: 62:21
    debug s => _2;                       // in scope 0 at ui/drop/dropck-eyepatch.rs:62:23: 62:24
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:62:32: 62:32
    let _3: std::string::String;         // in scope 0 at ui/drop/dropck-eyepatch.rs:63:17: 63:19
    let _4: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _6: &[&str];                 // in scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
    let mut _7: &[&str; 2];              // in scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
    let _8: &[&str; 2];                  // in scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
    let mut _14: &std::string::String;   // in scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
    let _15: &std::string::String;       // in scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
    let _16: &std::string::String;       // in scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
    let mut _17: &std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:63:40: 63:53
    let _18: std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:63:40: 63:53
    let mut _19: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:63:40: 63:53
    let mut _20: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dropck-eyepatch.rs:63:55: 63:56
    let mut _21: &&str;                  // in scope 0 at ui/drop/dropck-eyepatch.rs:63:55: 63:56
    let _22: &&str;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:63:55: 63:56
    let mut _23: std::string::String;    // in scope 0 at ui/drop/dropck-eyepatch.rs:64:34: 64:36
    let mut _24: &mut std::string::String; // in scope 0 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
    let mut _25: &mut std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:64:14: 64:31
    let mut _26: std::cell::RefMut<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:64:14: 64:31
    let mut _27: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:64:14: 64:31
    let mut _28: &[&str; 2];             // in scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
    let mut _29: bool;                   // in scope 0 at ui/drop/dropck-eyepatch.rs:64:35: 64:36
    scope 1 {
        debug s2 => _3;                  // in scope 1 at ui/drop/dropck-eyepatch.rs:63:17: 63:19
    }
    scope 2 {
        debug res => _4;                 // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _29 = const false;               // scope 0 at ui/drop/dropck-eyepatch.rs:63:17: 63:19
        _28 = const _;                   // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:30: 63:37
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::<impl Foo for RefCell<String>>::foo, [], Some(promoted[0])) }
        _8 = _28;                        // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
        _7 = _8;                         // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
        _19 = _1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:63:40: 63:53
        _18 = RefCell::<String>::borrow(move _19) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:63:40: 63:53
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:45: 63:51
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> Ref<'a, String> {RefCell::<String>::borrow}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = &_18;                      // scope 0 at ui/drop/dropck-eyepatch.rs:63:40: 63:53
        _16 = <Ref<'_, String> as Deref>::deref(move _17) -> [return: bb2, unwind: bb14]; // scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:39: 63:53
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, String>) -> &'a <Ref<'_, String> as Deref>::Target {<Ref<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = _16;                       // scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
        _14 = _15;                       // scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _14) -> [return: bb3, unwind: bb14]; // scope 0 at ui/drop/dropck-eyepatch.rs:63:39: 63:53
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:39: 63:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = &_2;                       // scope 0 at ui/drop/dropck-eyepatch.rs:63:55: 63:56
        _21 = _22;                       // scope 0 at ui/drop/dropck-eyepatch.rs:63:55: 63:56
        _20 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _21) -> [return: bb4, unwind: bb14]; // scope 0 at ui/drop/dropck-eyepatch.rs:63:55: 63:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:55: 63:56
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = [move _13, move _20];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb5, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = format(move _5) -> [return: bb6, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_18) -> [return: bb7, unwind: bb13]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb7: {
        _3 = move _4;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _29 = const true;                // scope 1 at ui/drop/dropck-eyepatch.rs:64:34: 64:36
        _23 = move _3;                   // scope 1 at ui/drop/dropck-eyepatch.rs:64:34: 64:36
        _27 = _1;                        // scope 1 at ui/drop/dropck-eyepatch.rs:64:14: 64:31
        _26 = RefCell::<String>::borrow_mut(move _27) -> [return: bb8, unwind: bb12]; // scope 1 at ui/drop/dropck-eyepatch.rs:64:14: 64:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:64:19: 64:29
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> RefMut<'a, String> {RefCell::<String>::borrow_mut}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = &mut _26;                  // scope 1 at ui/drop/dropck-eyepatch.rs:64:14: 64:31
        _24 = <RefMut<'_, String> as DerefMut>::deref_mut(move _25) -> [return: bb9, unwind: bb19]; // scope 1 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:64:13: 64:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, String>) -> &'a mut <RefMut<'_, String> as Deref>::Target {<RefMut<'_, String> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb9: {
        _29 = const false;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
        drop((*_24)) -> [return: bb17, unwind: bb16]; // scope 1 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
    }

    bb10: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:65:10: 65:10
    }

    bb11 (cleanup): {
        drop(_26) -> bb15;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:36: 64:37
    }

    bb12 (cleanup): {
        drop(_23) -> bb15;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:35: 64:36
    }

    bb13 (cleanup): {
        drop(_4) -> bb15;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:120:5: 120:6
    }

    bb14 (cleanup): {
        drop(_18) -> bb15;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck-eyepatch.rs:62:9: 65:10
    }

    bb16 (cleanup): {
        (*_24) = move _23;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
        goto -> bb19;                    // scope 1 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
    }

    bb17: {
        (*_24) = move _23;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:13: 64:31
        _29 = const false;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:35: 64:36
        drop(_26) -> bb10;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:36: 64:37
    }

    bb18 (cleanup): {
        drop(_23) -> bb11;               // scope 1 at ui/drop/dropck-eyepatch.rs:64:35: 64:36
    }

    bb19 (cleanup): {
        switchInt(_29) -> [0: bb11, otherwise: bb18]; // scope 1 at ui/drop/dropck-eyepatch.rs:64:35: 64:36
    }
}

promoted[0] in main::<impl at ui/drop/dropck-eyepatch.rs:61:5: 61:33>::foo: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37

    bb0: {
        _1 = [const "", const "|"];      // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:30: 63:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:63:30: 63:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:63:30: 63:37
    }
}

fn main::<impl at ui/drop/dropck-eyepatch.rs:68:5: 68:34>::foo(_1: &&T, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:69:16: 69:21
    debug s => _2;                       // in scope 0 at ui/drop/dropck-eyepatch.rs:69:23: 69:24
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:69:32: 69:32
    let _3: ();                          // in scope 0 at ui/drop/dropck-eyepatch.rs:70:13: 70:27
    let mut _4: &T;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:70:13: 70:27
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:70:25: 70:26
    let mut _6: &T;                      // in scope 0 at ui/drop/dropck-eyepatch.rs:69:16: 69:21

    bb0: {
        _6 = deref_copy (*_1);           // scope 0 at ui/drop/dropck-eyepatch.rs:70:13: 70:27
        _4 = _6;                         // scope 0 at ui/drop/dropck-eyepatch.rs:70:13: 70:27
        _5 = _2;                         // scope 0 at ui/drop/dropck-eyepatch.rs:70:25: 70:26
        _3 = <T as Foo>::foo(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:70:13: 70:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:70:21: 70:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b str) {<T as Foo>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:71:10: 71:10
    }
}

fn main::<impl at ui/drop/dropck-eyepatch.rs:75:5: 75:30>::drop(_1: &mut CheckOnDrop) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck-eyepatch.rs:76:17: 76:26
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck-eyepatch.rs:76:28: 76:28
    let mut _2: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: &std::string::String;        // in scope 0 at ui/drop/dropck-eyepatch.rs:76:41: 76:57
    let mut _5: &std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:76:42: 76:57
    let _6: std::cell::Ref<'_, std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:76:42: 76:57
    let mut _7: &std::cell::RefCell<std::string::String>; // in scope 0 at ui/drop/dropck-eyepatch.rs:76:42: 76:57
    let mut _8: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _9: &std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = &((*_1).0: std::cell::RefCell<std::string::String>); // scope 0 at ui/drop/dropck-eyepatch.rs:76:42: 76:57
        _6 = RefCell::<String>::borrow(move _7) -> bb1; // scope 0 at ui/drop/dropck-eyepatch.rs:76:42: 76:57
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:76:49: 76:55
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<String>) -> Ref<'a, String> {RefCell::<String>::borrow}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_6;                        // scope 0 at ui/drop/dropck-eyepatch.rs:76:42: 76:57
        _4 = <Ref<'_, String> as Deref>::deref(move _5) -> [return: bb2, unwind: bb7]; // scope 0 at ui/drop/dropck-eyepatch.rs:76:41: 76:57
                                         // mir::Constant
                                         // + span: ui/drop/dropck-eyepatch.rs:76:41: 76:57
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, String>) -> &'a <Ref<'_, String> as Deref>::Target {<Ref<'_, String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &((*_1).1: &str);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _8);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_2.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_2.1: &&str);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <String as PartialEq<&str>>::eq(move _13, move _14) -> [return: bb3, unwind: bb7]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<String, &str>(move _17, move _18, move _20, move _22) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_6) -> bb6;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:76:69: 76:69
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck-eyepatch.rs:76:9: 76:69
    }
}

fn Dt(_1: &str, _2: A) -> Dt<A> {
    let mut _0: Dt<A>;                   // return place in scope 0 at ui/drop/dropck-eyepatch.rs:36:1: 36:18

    bb0: {
        _0 = Dt::<A>(move _1, move _2);  // scope 0 at ui/drop/dropck-eyepatch.rs:36:1: 36:18
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:36:1: 36:18
    }
}

// MIR FOR CTFE
fn Dt(_1: &str, _2: A) -> Dt<A> {
    let mut _0: Dt<A>;                   // return place in scope 0 at ui/drop/dropck-eyepatch.rs:36:1: 36:18

    bb0: {
        _0 = Dt::<A>(move _1, move _2);  // scope 0 at ui/drop/dropck-eyepatch.rs:36:1: 36:18
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:36:1: 36:18
    }
}

fn Dr(_1: &str, _2: &B) -> Dr<'_, B> {
    let mut _0: Dr<'_, B>;               // return place in scope 0 at ui/drop/dropck-eyepatch.rs:37:1: 37:24

    bb0: {
        _0 = Dr::<'_, B>(move _1, move _2); // scope 0 at ui/drop/dropck-eyepatch.rs:37:1: 37:24
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:37:1: 37:24
    }
}

// MIR FOR CTFE
fn Dr(_1: &str, _2: &B) -> Dr<'_, B> {
    let mut _0: Dr<'_, B>;               // return place in scope 0 at ui/drop/dropck-eyepatch.rs:37:1: 37:24

    bb0: {
        _0 = Dr::<'_, B>(move _1, move _2); // scope 0 at ui/drop/dropck-eyepatch.rs:37:1: 37:24
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:37:1: 37:24
    }
}

fn Pt(_1: &str, _2: A, _3: B) -> Pt<A, B> {
    let mut _0: Pt<A, B>;                // return place in scope 0 at ui/drop/dropck-eyepatch.rs:38:1: 38:20

    bb0: {
        _0 = Pt::<A, B>(move _1, move _2, move _3); // scope 0 at ui/drop/dropck-eyepatch.rs:38:1: 38:20
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:38:1: 38:20
    }
}

// MIR FOR CTFE
fn Pt(_1: &str, _2: A, _3: B) -> Pt<A, B> {
    let mut _0: Pt<A, B>;                // return place in scope 0 at ui/drop/dropck-eyepatch.rs:38:1: 38:20

    bb0: {
        _0 = Pt::<A, B>(move _1, move _2, move _3); // scope 0 at ui/drop/dropck-eyepatch.rs:38:1: 38:20
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:38:1: 38:20
    }
}

fn Pr(_1: &str, _2: &B, _3: &B) -> Pr<'_, '_, B> {
    let mut _0: Pr<'_, '_, B>;           // return place in scope 0 at ui/drop/dropck-eyepatch.rs:39:1: 39:31

    bb0: {
        _0 = Pr::<'_, '_, B>(move _1, move _2, move _3); // scope 0 at ui/drop/dropck-eyepatch.rs:39:1: 39:31
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:39:1: 39:31
    }
}

// MIR FOR CTFE
fn Pr(_1: &str, _2: &B, _3: &B) -> Pr<'_, '_, B> {
    let mut _0: Pr<'_, '_, B>;           // return place in scope 0 at ui/drop/dropck-eyepatch.rs:39:1: 39:31

    bb0: {
        _0 = Pr::<'_, '_, B>(move _1, move _2, move _3); // scope 0 at ui/drop/dropck-eyepatch.rs:39:1: 39:31
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:39:1: 39:31
    }
}

fn St(_1: &str, _2: A) -> St<A> {
    let mut _0: St<A>;                   // return place in scope 0 at ui/drop/dropck-eyepatch.rs:40:1: 40:18

    bb0: {
        _0 = St::<A>(move _1, move _2);  // scope 0 at ui/drop/dropck-eyepatch.rs:40:1: 40:18
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:40:1: 40:18
    }
}

// MIR FOR CTFE
fn St(_1: &str, _2: A) -> St<A> {
    let mut _0: St<A>;                   // return place in scope 0 at ui/drop/dropck-eyepatch.rs:40:1: 40:18

    bb0: {
        _0 = St::<A>(move _1, move _2);  // scope 0 at ui/drop/dropck-eyepatch.rs:40:1: 40:18
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:40:1: 40:18
    }
}

fn Sr(_1: &str, _2: &B) -> Sr<'_, B> {
    let mut _0: Sr<'_, B>;               // return place in scope 0 at ui/drop/dropck-eyepatch.rs:41:1: 41:24

    bb0: {
        _0 = Sr::<'_, B>(move _1, move _2); // scope 0 at ui/drop/dropck-eyepatch.rs:41:1: 41:24
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:41:1: 41:24
    }
}

// MIR FOR CTFE
fn Sr(_1: &str, _2: &B) -> Sr<'_, B> {
    let mut _0: Sr<'_, B>;               // return place in scope 0 at ui/drop/dropck-eyepatch.rs:41:1: 41:24

    bb0: {
        _0 = Sr::<'_, B>(move _1, move _2); // scope 0 at ui/drop/dropck-eyepatch.rs:41:1: 41:24
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:41:1: 41:24
    }
}

fn CheckOnDrop(_1: RefCell<String>, _2: &str) -> CheckOnDrop {
    let mut _0: main::CheckOnDrop;       // return place in scope 0 at ui/drop/dropck-eyepatch.rs:74:5: 74:23

    bb0: {
        _0 = CheckOnDrop(move _1, move _2); // scope 0 at ui/drop/dropck-eyepatch.rs:74:5: 74:23
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:74:5: 74:23
    }
}

// MIR FOR CTFE
fn CheckOnDrop(_1: RefCell<String>, _2: &str) -> CheckOnDrop {
    let mut _0: main::CheckOnDrop;       // return place in scope 0 at ui/drop/dropck-eyepatch.rs:74:5: 74:23

    bb0: {
        _0 = CheckOnDrop(move _1, move _2); // scope 0 at ui/drop/dropck-eyepatch.rs:74:5: 74:23
        return;                          // scope 0 at ui/drop/dropck-eyepatch.rs:74:5: 74:23
    }
}
