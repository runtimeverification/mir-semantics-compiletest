// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PRINT: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:115:14: 115:18

    bb0: {
        _0 = const false;                // scope 0 at ui/drop/dropck_legal_cycles.rs:115:21: 115:26
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:115:1: 115:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:117:15: 117:15
    let _1: ContextData;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
    let mut _3: std::boxed::Box<[S2<'_>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[S2<'_>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[S2<'_>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: S2<'_>;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:131:27: 131:43
    let mut _10: S2<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:132:27: 132:43
    let mut _11: S2<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:133:27: 133:43
    let mut _12: S2<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:134:27: 134:43
    let _13: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:5: 135:46
    let mut _14: &std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:5: 135:46
    let _15: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:5: 135:9
    let mut _16: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:5: 135:6
    let mut _17: (std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:19: 135:45
    let mut _18: std::option::Option<&S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:20: 135:31
    let mut _19: &S2<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:25: 135:30
    let _20: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:25: 135:30
    let _21: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:26: 135:30
    let mut _22: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:26: 135:27
    let mut _23: std::option::Option<&S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:33: 135:44
    let mut _24: &S2<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:38: 135:43
    let _25: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:38: 135:43
    let _26: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:39: 135:43
    let mut _27: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:135:39: 135:40
    let _28: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:5: 136:39
    let mut _29: &std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:5: 136:39
    let _30: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:5: 136:9
    let mut _31: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:5: 136:6
    let mut _32: (std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:19: 136:38
    let mut _33: std::option::Option<&S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:20: 136:31
    let mut _34: &S2<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:25: 136:30
    let _35: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:25: 136:30
    let _36: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:26: 136:30
    let mut _37: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:26: 136:27
    let mut _38: std::option::Option<&S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:136:33: 136:37
    let _39: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:5: 137:39
    let mut _40: &std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:5: 137:39
    let _41: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:5: 137:9
    let mut _42: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:5: 137:6
    let mut _43: (std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:19: 137:38
    let mut _44: std::option::Option<&S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:20: 137:31
    let mut _45: &S2<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:25: 137:30
    let _46: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:25: 137:30
    let _47: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:26: 137:30
    let mut _48: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:26: 137:27
    let mut _49: std::option::Option<&S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:137:33: 137:37
    let _50: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:138:5: 138:32
    let mut _51: &std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:138:5: 138:32
    let _52: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:138:5: 138:9
    let mut _53: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:138:5: 138:6
    let mut _54: (std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:138:19: 138:31
    let mut _56: &ContextData;           // in scope 0 at ui/drop/dropck_legal_cycles.rs:140:17: 140:31
    let mut _57: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:142:5: 142:32
    let mut _58: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:142:13: 142:31
    let mut _59: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:142:14: 142:31
    let mut _60: !;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:142:5: 142:32
    let _61: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:143:5: 143:35
    let mut _62: &S2<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:143:5: 143:35
    let _63: &S2<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:143:5: 143:9
    let mut _64: &std::vec::Vec<S2<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:143:5: 143:6
    let mut _65: &mut ContextData;       // in scope 0 at ui/drop/dropck_legal_cycles.rs:143:28: 143:34
    let mut _66: &mut ContextData;       // in scope 0 at ui/drop/dropck_legal_cycles.rs:143:28: 143:34
    let mut _67: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:144:5: 144:32
    let mut _68: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:144:13: 144:31
    let mut _69: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:144:14: 144:31
    let mut _70: !;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:144:5: 144:32
    let mut _72: std::boxed::Box<[S<'_>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _73: std::boxed::Box<[S<'_>; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _74: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _75: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _76: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _77: std::boxed::Box<[S<'_>; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _78: S<'_>;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:150:26: 150:42
    let mut _79: S<'_>;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:151:26: 151:42
    let _80: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:5: 152:31
    let mut _81: &std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:5: 152:31
    let _82: &S<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:5: 152:9
    let mut _83: &std::vec::Vec<S<'_>>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:5: 152:6
    let mut _84: std::option::Option<&S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:19: 152:30
    let mut _85: &S<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:24: 152:29
    let _86: &S<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:24: 152:29
    let _87: &S<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:25: 152:29
    let mut _88: &std::vec::Vec<S<'_>>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:152:25: 152:26
    let _89: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:5: 153:31
    let mut _90: &std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:5: 153:31
    let _91: &S<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:5: 153:9
    let mut _92: &std::vec::Vec<S<'_>>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:5: 153:6
    let mut _93: std::option::Option<&S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:19: 153:30
    let mut _94: &S<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:24: 153:29
    let _95: &S<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:24: 153:29
    let _96: &S<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:25: 153:29
    let mut _97: &std::vec::Vec<S<'_>>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:153:25: 153:26
    let mut _99: &ContextData;           // in scope 0 at ui/drop/dropck_legal_cycles.rs:155:17: 155:31
    let mut _100: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:157:5: 157:32
    let mut _101: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:157:13: 157:31
    let mut _102: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:157:14: 157:31
    let mut _103: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:157:5: 157:32
    let _104: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:158:5: 158:35
    let mut _105: &S<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:158:5: 158:35
    let _106: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:158:5: 158:9
    let mut _107: &std::vec::Vec<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:158:5: 158:6
    let mut _108: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:158:28: 158:34
    let mut _109: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:158:28: 158:34
    let mut _110: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:159:5: 159:31
    let mut _111: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:159:13: 159:30
    let mut _112: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:159:5: 159:31
    let _114: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:5: 165:32
    let mut _115: &std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:5: 165:32
    let _116: &std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:5: 165:18
    let mut _117: &std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:5: 165:15
    let mut _118: std::option::Option<&V<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:23: 165:31
    let mut _119: &V<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:28: 165:30
    let _120: &V<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:165:28: 165:30
    let _121: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:5: 166:32
    let mut _122: &std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:5: 166:32
    let _123: &std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:5: 166:18
    let mut _124: &std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:5: 166:15
    let mut _125: std::option::Option<&V<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:23: 166:31
    let mut _126: &V<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:28: 166:30
    let _127: &V<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:166:28: 166:30
    let mut _129: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:168:17: 168:31
    let mut _130: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:170:5: 170:32
    let mut _131: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:170:13: 170:31
    let mut _132: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:170:14: 170:31
    let mut _133: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:170:5: 170:32
    let _134: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:171:5: 171:32
    let mut _135: &V<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:171:5: 171:32
    let mut _136: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:171:25: 171:31
    let mut _137: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:171:25: 171:31
    let mut _138: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:172:5: 172:31
    let mut _139: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:172:13: 172:30
    let mut _140: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:172:5: 172:31
    let _142: std::option::Option<H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:180:5: 180:51
    let mut _143: &mut std::collections::HashMap<H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:180:5: 180:51
    let mut _144: H<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:180:14: 180:31
    let mut _145: H<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:180:33: 180:50
    let _146: std::option::Option<H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:181:5: 181:51
    let mut _147: &mut std::collections::HashMap<H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:181:5: 181:51
    let mut _148: H<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:181:14: 181:31
    let mut _149: H<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:181:33: 181:50
    let mut _150: std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    let mut _151: std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    let mut _152: &std::collections::HashMap<H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    let mut _154: std::option::Option<(&H<'_>, &H<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    let mut _155: &mut std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    let mut _156: &mut std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    let mut _157: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:182:5: 185:6
    let _160: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:183:9: 183:32
    let mut _161: &std::cell::Cell<std::option::Option<&H<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:183:9: 183:32
    let mut _162: std::option::Option<&H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:183:22: 183:31
    let mut _163: &H<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:183:27: 183:30
    let _164: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:184:9: 184:32
    let mut _165: &std::cell::Cell<std::option::Option<&H<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:184:9: 184:32
    let mut _166: std::option::Option<&H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:184:22: 184:31
    let mut _167: &H<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:184:27: 184:30
    let mut _169: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:187:17: 187:31
    let mut _170: std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    let mut _171: std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    let mut _172: &std::collections::HashMap<H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    let mut _174: std::option::Option<(&H<'_>, &H<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    let mut _175: &mut std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    let mut _176: &mut std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    let mut _177: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:189:5: 194:6
    let mut _179: (u32, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:190:9: 190:25
    let _180: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:192:9: 192:38
    let mut _181: &H<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:192:9: 192:38
    let mut _182: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:192:31: 192:37
    let mut _183: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:192:31: 192:37
    let mut _184: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:193:9: 193:35
    let mut _185: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:193:17: 193:34
    let mut _186: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:193:9: 193:35
    let _188: std::option::Option<HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:201:5: 201:53
    let mut _189: &mut std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:201:5: 201:53
    let mut _190: HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:201:14: 201:32
    let mut _191: HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:201:34: 201:52
    let _192: std::option::Option<HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:202:5: 202:53
    let mut _193: &mut std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:202:5: 202:53
    let mut _194: HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:202:14: 202:32
    let mut _195: HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:202:34: 202:52
    let mut _196: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    let mut _197: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    let mut _198: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    let mut _200: std::option::Option<(&HM<'_>, &HM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    let mut _201: &mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    let mut _202: &mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    let mut _203: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:203:5: 206:6
    let _206: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:204:9: 204:35
    let mut _207: &std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:204:9: 204:35
    let mut _208: std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:204:26: 204:34
    let mut _209: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:204:31: 204:33
    let _210: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:204:31: 204:33
    let _211: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:205:9: 205:35
    let mut _212: &std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:205:9: 205:35
    let mut _213: std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:205:26: 205:34
    let mut _214: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:205:31: 205:33
    let _215: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:205:31: 205:33
    let mut _217: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:208:17: 208:31
    let mut _218: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    let mut _219: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    let mut _220: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    let mut _222: std::option::Option<(&HM<'_>, &HM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    let mut _223: &mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    let mut _224: &mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    let mut _225: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:211:5: 217:6
    let mut _227: (u32, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:212:9: 212:25
    let _228: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:214:9: 214:38
    let mut _229: &HM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:214:9: 214:38
    let mut _230: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:214:31: 214:37
    let mut _231: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:214:31: 214:37
    let mut _232: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:215:9: 215:35
    let mut _233: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:215:17: 215:34
    let mut _234: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:215:9: 215:35
    let _236: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:224:5: 224:35
    let mut _237: &mut std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:224:5: 224:35
    let mut _238: S<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:224:18: 224:34
    let _239: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:225:5: 225:35
    let mut _240: &mut std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:225:5: 225:35
    let mut _241: S<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:225:18: 225:34
    let _242: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:5: 226:33
    let mut _243: &std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:5: 226:33
    let _244: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:5: 226:10
    let mut _245: &std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:5: 226:7
    let mut _246: std::option::Option<&S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:20: 226:32
    let mut _247: &S<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:25: 226:31
    let _248: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:25: 226:31
    let _249: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:26: 226:31
    let mut _250: &std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:226:26: 226:28
    let _251: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:5: 227:33
    let mut _252: &std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:5: 227:33
    let _253: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:5: 227:10
    let mut _254: &std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:5: 227:7
    let mut _255: std::option::Option<&S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:20: 227:32
    let mut _256: &S<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:25: 227:31
    let _257: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:25: 227:31
    let _258: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:26: 227:31
    let mut _259: &std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:227:26: 227:28
    let mut _261: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:229:17: 229:31
    let mut _262: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:231:5: 231:32
    let mut _263: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:231:13: 231:31
    let mut _264: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:231:14: 231:31
    let mut _265: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:231:5: 231:32
    let _266: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:232:5: 232:36
    let mut _267: &S<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:232:5: 232:36
    let _268: &S<'_>;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:232:5: 232:10
    let mut _269: &std::collections::VecDeque<S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:232:5: 232:7
    let mut _270: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:232:29: 232:35
    let mut _271: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:232:29: 232:35
    let mut _272: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:233:5: 233:31
    let mut _273: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:233:13: 233:30
    let mut _274: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:233:5: 233:31
    let _276: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:239:5: 239:36
    let mut _277: &mut std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:239:5: 239:36
    let mut _278: VD<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:239:18: 239:35
    let _279: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:240:5: 240:36
    let mut _280: &mut std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:240:5: 240:36
    let mut _281: VD<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:240:18: 240:35
    let _282: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:5: 241:34
    let mut _283: &std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:5: 241:34
    let _284: &VD<'_>;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:5: 241:10
    let mut _285: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:5: 241:7
    let mut _286: std::option::Option<&std::collections::VecDeque<VD<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:24: 241:33
    let mut _287: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:29: 241:32
    let _288: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:241:29: 241:32
    let _289: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:5: 242:34
    let mut _290: &std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:5: 242:34
    let _291: &VD<'_>;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:5: 242:10
    let mut _292: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:5: 242:7
    let mut _293: std::option::Option<&std::collections::VecDeque<VD<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:24: 242:33
    let mut _294: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:29: 242:32
    let _295: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:242:29: 242:32
    let mut _297: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:244:17: 244:31
    let mut _298: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:246:5: 246:32
    let mut _299: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:246:13: 246:31
    let mut _300: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:246:14: 246:31
    let mut _301: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:246:5: 246:32
    let _302: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:247:5: 247:36
    let mut _303: &VD<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:247:5: 247:36
    let _304: &VD<'_>;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:247:5: 247:10
    let mut _305: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:247:5: 247:7
    let mut _306: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:247:29: 247:35
    let mut _307: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:247:29: 247:35
    let mut _308: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:248:5: 248:31
    let mut _309: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:248:13: 248:30
    let mut _310: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:248:5: 248:31
    let _312: std::option::Option<VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:254:5: 254:36
    let mut _313: &mut std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:254:5: 254:36
    let mut _314: VM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:254:18: 254:35
    let _315: std::option::Option<VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:255:5: 255:36
    let mut _316: &mut std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:255:5: 255:36
    let mut _317: VM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:255:18: 255:35
    let _318: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:5: 256:35
    let mut _319: &std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:5: 256:35
    let _320: &VM<'_>;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:5: 256:11
    let mut _321: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:5: 256:7
    let mut _322: &usize;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
    let _323: &usize;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
    let mut _324: std::option::Option<&std::collections::HashMap<usize, VM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:25: 256:34
    let mut _325: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:30: 256:33
    let _326: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:30: 256:33
    let _327: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:5: 257:35
    let mut _328: &std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:5: 257:35
    let _329: &VM<'_>;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:5: 257:11
    let mut _330: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:5: 257:7
    let mut _331: &usize;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
    let _332: &usize;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
    let mut _333: std::option::Option<&std::collections::HashMap<usize, VM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:25: 257:34
    let mut _334: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:30: 257:33
    let _335: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:30: 257:33
    let mut _337: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:259:17: 259:31
    let mut _338: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:261:5: 261:32
    let mut _339: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:261:13: 261:31
    let mut _340: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:261:14: 261:31
    let mut _341: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:261:5: 261:32
    let _342: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:5: 262:37
    let mut _343: &VM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:5: 262:37
    let _344: &VM<'_>;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:5: 262:11
    let mut _345: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:5: 262:7
    let mut _346: &usize;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
    let _347: &usize;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
    let mut _348: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:30: 262:36
    let mut _349: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:30: 262:36
    let mut _350: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:263:5: 263:31
    let mut _351: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:263:13: 263:30
    let mut _352: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:263:5: 263:31
    let _354: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:269:5: 269:36
    let mut _355: &mut std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:269:5: 269:36
    let mut _356: LL<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:269:18: 269:35
    let _357: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:270:5: 270:36
    let mut _358: &mut std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:270:5: 270:36
    let mut _359: LL<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:270:18: 270:35
    let mut _360: std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    let mut _361: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    let mut _363: std::option::Option<&LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    let mut _364: &mut std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    let mut _365: &mut std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    let mut _366: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:271:5: 273:6
    let _368: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:272:9: 272:34
    let mut _369: &std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:272:9: 272:34
    let mut _370: std::option::Option<&std::collections::LinkedList<LL<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:272:24: 272:33
    let mut _371: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:272:29: 272:32
    let _372: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:272:29: 272:32
    let mut _374: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:275:17: 275:31
    let mut _375: std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    let mut _376: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    let mut _378: std::option::Option<&LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    let mut _379: &mut std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    let mut _380: &mut std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    let mut _381: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:277:5: 283:6
    let mut _383: (u32, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:278:9: 278:25
    let _384: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:280:9: 280:36
    let mut _385: &LL<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:280:9: 280:36
    let mut _386: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:280:29: 280:35
    let mut _387: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:280:29: 280:35
    let mut _388: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:281:9: 281:35
    let mut _389: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:281:17: 281:34
    let mut _390: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:281:9: 281:35
    let _392: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:289:5: 289:31
    let mut _393: &mut std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:289:5: 289:31
    let mut _394: BH<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:289:13: 289:30
    let _395: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:290:5: 290:31
    let mut _396: &mut std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:290:5: 290:31
    let mut _397: BH<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:290:13: 290:30
    let mut _398: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    let mut _399: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    let mut _400: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    let mut _402: std::option::Option<&BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    let mut _403: &mut std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    let mut _404: &mut std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    let mut _405: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:291:5: 293:6
    let _407: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:292:9: 292:34
    let mut _408: &std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:292:9: 292:34
    let mut _409: std::option::Option<&std::collections::BinaryHeap<BH<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:292:24: 292:33
    let mut _410: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:292:29: 292:32
    let _411: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:292:29: 292:32
    let mut _413: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:295:17: 295:31
    let mut _414: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    let mut _415: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    let mut _417: std::option::Option<&BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    let mut _418: &mut std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    let mut _419: &mut std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    let mut _420: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:297:5: 303:6
    let mut _422: (u32, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:298:9: 298:25
    let _423: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:300:9: 300:36
    let mut _424: &BH<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:300:9: 300:36
    let mut _425: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:300:29: 300:35
    let mut _426: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:300:29: 300:35
    let mut _427: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:301:9: 301:35
    let mut _428: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:301:17: 301:34
    let mut _429: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:301:9: 301:35
    let _431: std::option::Option<BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:309:5: 309:55
    let mut _432: &mut std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:309:5: 309:55
    let mut _433: BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:309:16: 309:34
    let mut _434: BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:309:36: 309:54
    let _435: std::option::Option<BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:310:5: 310:55
    let mut _436: &mut std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:310:5: 310:55
    let mut _437: BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:310:16: 310:34
    let mut _438: BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:310:36: 310:54
    let mut _439: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    let mut _440: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    let mut _441: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    let mut _443: std::option::Option<(&BTM<'_>, &BTM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    let mut _444: &mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    let mut _445: &mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    let mut _446: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:311:5: 314:6
    let _449: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:312:9: 312:35
    let mut _450: &std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:312:9: 312:35
    let mut _451: std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:312:24: 312:34
    let mut _452: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:312:29: 312:33
    let _453: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:312:29: 312:33
    let _454: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:313:9: 313:35
    let mut _455: &std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:313:9: 313:35
    let mut _456: std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:313:24: 313:34
    let mut _457: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:313:29: 313:33
    let _458: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:313:29: 313:33
    let mut _460: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:316:17: 316:31
    let mut _461: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    let mut _462: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    let mut _464: std::option::Option<(&BTM<'_>, &BTM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    let mut _465: &mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    let mut _466: &mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    let mut _467: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:318:5: 324:6
    let mut _469: (u32, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:319:9: 319:25
    let _470: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:321:9: 321:36
    let mut _471: &BTM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:321:9: 321:36
    let mut _472: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:321:29: 321:35
    let mut _473: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:321:29: 321:35
    let mut _474: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:322:9: 322:35
    let mut _475: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:322:17: 322:34
    let mut _476: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:322:9: 322:35
    let _478: bool;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:330:5: 330:35
    let mut _479: &mut std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:330:5: 330:35
    let mut _480: BTS<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:330:16: 330:34
    let _481: bool;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:331:5: 331:35
    let mut _482: &mut std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:331:5: 331:35
    let mut _483: BTS<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:331:16: 331:34
    let mut _484: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    let mut _485: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    let mut _486: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    let mut _488: std::option::Option<&BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    let mut _489: &mut std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    let mut _490: &mut std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    let mut _491: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:332:5: 334:6
    let _493: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:333:9: 333:35
    let mut _494: &std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:333:9: 333:35
    let mut _495: std::option::Option<&std::collections::BTreeSet<BTS<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:333:24: 333:34
    let mut _496: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:333:29: 333:33
    let _497: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:333:29: 333:33
    let mut _499: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:336:17: 336:31
    let mut _500: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    let mut _501: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    let mut _503: std::option::Option<&BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    let mut _504: &mut std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    let mut _505: &mut std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    let mut _506: isize;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:338:5: 344:6
    let mut _508: (u32, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:339:9: 339:25
    let _509: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:341:9: 341:36
    let mut _510: &BTS<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:341:9: 341:36
    let mut _511: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:341:29: 341:35
    let mut _512: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:341:29: 341:35
    let mut _513: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:342:9: 342:35
    let mut _514: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:342:17: 342:34
    let mut _515: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:342:9: 342:35
    let mut _519: RCRC<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:350:11: 350:29
    let mut _520: RCRC<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:351:11: 351:29
    let mut _521: RCRC<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:352:11: 352:29
    let mut _522: std::option::Option<&RCRC<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:37: 353:47
    let mut _523: &RCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:42: 353:46
    let _524: &RCRC<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:42: 353:46
    let mut _525: &mut RCRCData<'_>;     // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:5: 353:32
    let mut _526: &mut std::cell::RefMut<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
    let mut _527: std::cell::RefMut<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
    let mut _528: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
    let _529: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
    let mut _530: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
    let mut _531: std::option::Option<&RCRC<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:37: 354:47
    let mut _532: &RCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:42: 354:46
    let _533: &RCRC<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:42: 354:46
    let mut _534: &mut RCRCData<'_>;     // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:5: 354:32
    let mut _535: &mut std::cell::RefMut<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
    let mut _536: std::cell::RefMut<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
    let mut _537: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
    let _538: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
    let mut _539: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
    let mut _540: std::option::Option<&RCRC<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:37: 355:47
    let mut _541: &RCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:42: 355:46
    let _542: &RCRC<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:42: 355:46
    let mut _543: &mut RCRCData<'_>;     // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:5: 355:32
    let mut _544: &mut std::cell::RefMut<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
    let mut _545: std::cell::RefMut<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
    let mut _546: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
    let _547: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
    let mut _548: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
    let mut _550: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:357:17: 357:31
    let mut _551: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:360:5: 360:32
    let mut _552: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:360:13: 360:31
    let mut _553: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:360:14: 360:31
    let mut _554: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:360:5: 360:32
    let _555: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:361:5: 361:34
    let mut _556: &RCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:361:5: 361:34
    let mut _557: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:361:27: 361:33
    let mut _558: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:361:27: 361:33
    let mut _559: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:362:5: 362:31
    let mut _560: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:362:13: 362:30
    let mut _561: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:362:5: 362:31
    let mut _565: ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:384:12: 384:32
    let mut _566: ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:385:12: 385:32
    let mut _567: ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:386:12: 386:32
    let mut _568: std::option::Option<&ARCRC<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:38: 387:49
    let mut _569: &ARCRC<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:43: 387:48
    let _570: &ARCRC<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:43: 387:48
    let mut _571: &mut ARCRCData<'_>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:5: 387:33
    let mut _572: &mut std::cell::RefMut<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
    let mut _573: std::cell::RefMut<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
    let mut _574: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
    let _575: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
    let mut _576: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
    let mut _577: std::option::Option<&ARCRC<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:38: 388:49
    let mut _578: &ARCRC<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:43: 388:48
    let _579: &ARCRC<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:43: 388:48
    let mut _580: &mut ARCRCData<'_>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:5: 388:33
    let mut _581: &mut std::cell::RefMut<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
    let mut _582: std::cell::RefMut<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
    let mut _583: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
    let _584: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
    let mut _585: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
    let mut _586: std::option::Option<&ARCRC<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:38: 389:49
    let mut _587: &ARCRC<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:43: 389:48
    let _588: &ARCRC<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:43: 389:48
    let mut _589: &mut ARCRCData<'_>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:5: 389:33
    let mut _590: &mut std::cell::RefMut<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
    let mut _591: std::cell::RefMut<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
    let mut _592: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
    let _593: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
    let mut _594: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
    let mut _596: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:391:17: 391:31
    let mut _597: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:394:5: 394:32
    let mut _598: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:394:13: 394:31
    let mut _599: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:394:14: 394:31
    let mut _600: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:394:5: 394:32
    let _601: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:395:5: 395:35
    let mut _602: &ARCRC<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:395:5: 395:35
    let mut _603: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:395:28: 395:34
    let mut _604: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:395:28: 395:34
    let mut _605: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:396:5: 396:31
    let mut _606: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:396:13: 396:30
    let mut _607: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:396:5: 396:31
    let mut _611: ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:402:12: 402:32
    let mut _612: ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:403:12: 403:32
    let mut _613: ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:404:12: 404:32
    let mut _614: std::option::Option<&ARCRW<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:42: 405:53
    let mut _615: &ARCRW<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:47: 405:52
    let _616: &ARCRW<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:47: 405:52
    let mut _617: &mut ARCRWData<'_>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:37
    let mut _618: &mut std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:28
    let mut _619: std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:28
    let mut _620: std::result::Result<std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
    let mut _621: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
    let _622: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
    let mut _623: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
    let mut _624: std::option::Option<&ARCRW<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:42: 406:53
    let mut _625: &ARCRW<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:47: 406:52
    let _626: &ARCRW<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:47: 406:52
    let mut _627: &mut ARCRWData<'_>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:37
    let mut _628: &mut std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:28
    let mut _629: std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:28
    let mut _630: std::result::Result<std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
    let mut _631: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
    let _632: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
    let mut _633: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
    let mut _634: std::option::Option<&ARCRW<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:42: 407:53
    let mut _635: &ARCRW<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:47: 407:52
    let _636: &ARCRW<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:47: 407:52
    let mut _637: &mut ARCRWData<'_>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:37
    let mut _638: &mut std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:28
    let mut _639: std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:28
    let mut _640: std::result::Result<std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockWriteGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
    let mut _641: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
    let _642: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
    let mut _643: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
    let mut _645: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:409:17: 409:31
    let mut _646: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:412:5: 412:32
    let mut _647: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:412:13: 412:31
    let mut _648: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:412:14: 412:31
    let mut _649: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:412:5: 412:32
    let _650: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:413:5: 413:35
    let mut _651: &ARCRW<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:413:5: 413:35
    let mut _652: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:413:28: 413:34
    let mut _653: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:413:28: 413:34
    let mut _654: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:414:5: 414:31
    let mut _655: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:414:13: 414:30
    let mut _656: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:414:5: 414:31
    let mut _660: ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:420:12: 420:30
    let mut _661: ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:421:12: 421:30
    let mut _662: ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:422:12: 422:30
    let mut _663: std::option::Option<&ARCM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:41: 423:52
    let mut _664: &ARCM<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:46: 423:51
    let _665: &ARCM<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:46: 423:51
    let mut _666: &mut ARCMData<'_>;     // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:36
    let mut _667: &mut std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:27
    let mut _668: std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:27
    let mut _669: std::result::Result<std::sync::MutexGuard<'_, ARCMData<'_>>, std::sync::PoisonError<std::sync::MutexGuard<'_, ARCMData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
    let mut _670: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
    let _671: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
    let mut _672: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
    let mut _673: std::option::Option<&ARCM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:41: 424:52
    let mut _674: &ARCM<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:46: 424:51
    let _675: &ARCM<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:46: 424:51
    let mut _676: &mut ARCMData<'_>;     // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:36
    let mut _677: &mut std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:27
    let mut _678: std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:27
    let mut _679: std::result::Result<std::sync::MutexGuard<'_, ARCMData<'_>>, std::sync::PoisonError<std::sync::MutexGuard<'_, ARCMData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
    let mut _680: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
    let _681: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
    let mut _682: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
    let mut _683: std::option::Option<&ARCM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:41: 425:52
    let mut _684: &ARCM<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:46: 425:51
    let _685: &ARCM<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:46: 425:51
    let mut _686: &mut ARCMData<'_>;     // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:36
    let mut _687: &mut std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:27
    let mut _688: std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:27
    let mut _689: std::result::Result<std::sync::MutexGuard<'_, ARCMData<'_>>, std::sync::PoisonError<std::sync::MutexGuard<'_, ARCMData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
    let mut _690: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
    let _691: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
    let mut _692: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
    let mut _694: &ContextData;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:427:17: 427:31
    let mut _695: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:430:5: 430:32
    let mut _696: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:430:13: 430:31
    let mut _697: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:430:14: 430:31
    let mut _698: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:430:5: 430:32
    let _699: ();                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:431:5: 431:35
    let mut _700: &ARCM<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:431:5: 431:35
    let mut _701: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:431:28: 431:34
    let mut _702: &mut ContextData;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:431:28: 431:34
    let mut _703: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:432:5: 432:31
    let mut _704: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:432:13: 432:30
    let mut _705: !;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:432:5: 432:31
    let mut _709: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _710: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _711: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _712: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _713: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _714: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _715: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _716: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _717: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _718: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _719: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _720: bool;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    let mut _721: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _722: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _723: *const [S2<'_>; 4];    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _724: *const [S<'_>; 2];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug c_orig => _1;              // in scope 1 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        let _2: std::vec::Vec<S2<'_>>;   // in scope 1 at ui/drop/dropck_legal_cycles.rs:131:9: 131:10
        scope 2 {
            debug v => _2;               // in scope 2 at ui/drop/dropck_legal_cycles.rs:131:9: 131:10
            let mut _55: ContextData;    // in scope 2 at ui/drop/dropck_legal_cycles.rs:140:9: 140:14
            scope 4 {
                debug c => _55;          // in scope 4 at ui/drop/dropck_legal_cycles.rs:140:9: 140:14
                let _71: std::vec::Vec<S<'_>>; // in scope 4 at ui/drop/dropck_legal_cycles.rs:150:9: 150:10
                scope 5 {
                    debug v => _71;      // in scope 5 at ui/drop/dropck_legal_cycles.rs:150:9: 150:10
                    let mut _98: ContextData; // in scope 5 at ui/drop/dropck_legal_cycles.rs:155:9: 155:14
                    scope 7 {
                        debug c => _98;  // in scope 7 at ui/drop/dropck_legal_cycles.rs:155:9: 155:14
                        let _113: V<'_>; // in scope 7 at ui/drop/dropck_legal_cycles.rs:164:9: 164:10
                        scope 8 {
                            debug v => _113; // in scope 8 at ui/drop/dropck_legal_cycles.rs:164:9: 164:10
                            let mut _128: ContextData; // in scope 8 at ui/drop/dropck_legal_cycles.rs:168:9: 168:14
                            scope 9 {
                                debug c => _128; // in scope 9 at ui/drop/dropck_legal_cycles.rs:168:9: 168:14
                                let mut _141: std::collections::HashMap<H<'_>, H<'_>>; // in scope 9 at ui/drop/dropck_legal_cycles.rs:179:9: 179:14
                                scope 10 {
                                    debug h => _141; // in scope 10 at ui/drop/dropck_legal_cycles.rs:179:9: 179:14
                                    let mut _153: std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 10 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                    let mut _168: ContextData; // in scope 10 at ui/drop/dropck_legal_cycles.rs:187:9: 187:14
                                    scope 11 {
                                        debug iter => _153; // in scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                        let _158: &H<'_>; // in scope 11 at ui/drop/dropck_legal_cycles.rs:182:10: 182:13
                                        let _159: &H<'_>; // in scope 11 at ui/drop/dropck_legal_cycles.rs:182:15: 182:18
                                        scope 12 {
                                            debug key => _158; // in scope 12 at ui/drop/dropck_legal_cycles.rs:182:10: 182:13
                                            debug val => _159; // in scope 12 at ui/drop/dropck_legal_cycles.rs:182:15: 182:18
                                        }
                                    }
                                    scope 13 {
                                        debug c => _168; // in scope 13 at ui/drop/dropck_legal_cycles.rs:187:9: 187:14
                                        let mut _173: std::collections::hash_map::Iter<'_, H<'_>, H<'_>>; // in scope 13 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                        let mut _187: std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 13 at ui/drop/dropck_legal_cycles.rs:200:9: 200:14
                                        scope 14 {
                                            debug iter => _173; // in scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                            let _178: &H<'_>; // in scope 14 at ui/drop/dropck_legal_cycles.rs:189:10: 189:13
                                            scope 15 {
                                                debug key => _178; // in scope 15 at ui/drop/dropck_legal_cycles.rs:189:10: 189:13
                                            }
                                        }
                                        scope 16 {
                                            debug h => _187; // in scope 16 at ui/drop/dropck_legal_cycles.rs:200:9: 200:14
                                            let mut _199: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 16 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                            let mut _216: ContextData; // in scope 16 at ui/drop/dropck_legal_cycles.rs:208:9: 208:14
                                            scope 17 {
                                                debug iter => _199; // in scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                                let _204: &HM<'_>; // in scope 17 at ui/drop/dropck_legal_cycles.rs:203:10: 203:13
                                                let _205: &HM<'_>; // in scope 17 at ui/drop/dropck_legal_cycles.rs:203:15: 203:18
                                                scope 18 {
                                                    debug key => _204; // in scope 18 at ui/drop/dropck_legal_cycles.rs:203:10: 203:13
                                                    debug val => _205; // in scope 18 at ui/drop/dropck_legal_cycles.rs:203:15: 203:18
                                                }
                                            }
                                            scope 19 {
                                                debug c => _216; // in scope 19 at ui/drop/dropck_legal_cycles.rs:208:9: 208:14
                                                let mut _221: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 19 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                                let mut _235: std::collections::VecDeque<S<'_>>; // in scope 19 at ui/drop/dropck_legal_cycles.rs:223:9: 223:15
                                                scope 20 {
                                                    debug iter => _221; // in scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                                    let _226: &HM<'_>; // in scope 20 at ui/drop/dropck_legal_cycles.rs:211:10: 211:13
                                                    scope 21 {
                                                        debug key => _226; // in scope 21 at ui/drop/dropck_legal_cycles.rs:211:10: 211:13
                                                    }
                                                }
                                                scope 22 {
                                                    debug vd => _235; // in scope 22 at ui/drop/dropck_legal_cycles.rs:223:9: 223:15
                                                    let mut _260: ContextData; // in scope 22 at ui/drop/dropck_legal_cycles.rs:229:9: 229:14
                                                    scope 23 {
                                                        debug c => _260; // in scope 23 at ui/drop/dropck_legal_cycles.rs:229:9: 229:14
                                                        let mut _275: std::collections::VecDeque<VD<'_>>; // in scope 23 at ui/drop/dropck_legal_cycles.rs:238:9: 238:15
                                                        scope 24 {
                                                            debug vd => _275; // in scope 24 at ui/drop/dropck_legal_cycles.rs:238:9: 238:15
                                                            let mut _296: ContextData; // in scope 24 at ui/drop/dropck_legal_cycles.rs:244:9: 244:14
                                                            scope 25 {
                                                                debug c => _296; // in scope 25 at ui/drop/dropck_legal_cycles.rs:244:9: 244:14
                                                                let mut _311: std::collections::HashMap<usize, VM<'_>>; // in scope 25 at ui/drop/dropck_legal_cycles.rs:253:9: 253:15
                                                                scope 26 {
                                                                    debug vm => _311; // in scope 26 at ui/drop/dropck_legal_cycles.rs:253:9: 253:15
                                                                    let mut _336: ContextData; // in scope 26 at ui/drop/dropck_legal_cycles.rs:259:9: 259:14
                                                                    let mut _707: &usize; // in scope 26 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
                                                                    let mut _708: &usize; // in scope 26 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
                                                                    scope 27 {
                                                                        debug c => _336; // in scope 27 at ui/drop/dropck_legal_cycles.rs:259:9: 259:14
                                                                        let mut _353: std::collections::LinkedList<LL<'_>>; // in scope 27 at ui/drop/dropck_legal_cycles.rs:268:9: 268:15
                                                                        let mut _706: &usize; // in scope 27 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
                                                                        scope 28 {
                                                                            debug ll => _353; // in scope 28 at ui/drop/dropck_legal_cycles.rs:268:9: 268:15
                                                                            let mut _362: std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 28 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
                                                                            let mut _373: ContextData; // in scope 28 at ui/drop/dropck_legal_cycles.rs:275:9: 275:14
                                                                            scope 29 {
                                                                                debug iter => _362; // in scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
                                                                                let _367: &LL<'_>; // in scope 29 at ui/drop/dropck_legal_cycles.rs:271:9: 271:10
                                                                                scope 30 {
                                                                                    debug e => _367; // in scope 30 at ui/drop/dropck_legal_cycles.rs:271:9: 271:10
                                                                                }
                                                                            }
                                                                            scope 31 {
                                                                                debug c => _373; // in scope 31 at ui/drop/dropck_legal_cycles.rs:275:9: 275:14
                                                                                let mut _377: std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 31 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
                                                                                let mut _391: std::collections::BinaryHeap<BH<'_>>; // in scope 31 at ui/drop/dropck_legal_cycles.rs:288:9: 288:15
                                                                                scope 32 {
                                                                                    debug iter => _377; // in scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
                                                                                    let _382: &LL<'_>; // in scope 32 at ui/drop/dropck_legal_cycles.rs:277:9: 277:10
                                                                                    scope 33 {
                                                                                        debug e => _382; // in scope 33 at ui/drop/dropck_legal_cycles.rs:277:9: 277:10
                                                                                    }
                                                                                }
                                                                                scope 34 {
                                                                                    debug bh => _391; // in scope 34 at ui/drop/dropck_legal_cycles.rs:288:9: 288:15
                                                                                    let mut _401: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 34 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                                                                    let mut _412: ContextData; // in scope 34 at ui/drop/dropck_legal_cycles.rs:295:9: 295:14
                                                                                    scope 35 {
                                                                                        debug iter => _401; // in scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                                                                        let _406: &BH<'_>; // in scope 35 at ui/drop/dropck_legal_cycles.rs:291:9: 291:10
                                                                                        scope 36 {
                                                                                            debug b => _406; // in scope 36 at ui/drop/dropck_legal_cycles.rs:291:9: 291:10
                                                                                        }
                                                                                    }
                                                                                    scope 37 {
                                                                                        debug c => _412; // in scope 37 at ui/drop/dropck_legal_cycles.rs:295:9: 295:14
                                                                                        let mut _416: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 37 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
                                                                                        let mut _430: std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 37 at ui/drop/dropck_legal_cycles.rs:308:9: 308:16
                                                                                        scope 38 {
                                                                                            debug iter => _416; // in scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
                                                                                            let _421: &BH<'_>; // in scope 38 at ui/drop/dropck_legal_cycles.rs:297:9: 297:10
                                                                                            scope 39 {
                                                                                                debug b => _421; // in scope 39 at ui/drop/dropck_legal_cycles.rs:297:9: 297:10
                                                                                            }
                                                                                        }
                                                                                        scope 40 {
                                                                                            debug btm => _430; // in scope 40 at ui/drop/dropck_legal_cycles.rs:308:9: 308:16
                                                                                            let mut _442: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 40 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                                                                            let mut _459: ContextData; // in scope 40 at ui/drop/dropck_legal_cycles.rs:316:9: 316:14
                                                                                            scope 41 {
                                                                                                debug iter => _442; // in scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                                                                                let _447: &BTM<'_>; // in scope 41 at ui/drop/dropck_legal_cycles.rs:311:10: 311:11
                                                                                                let _448: &BTM<'_>; // in scope 41 at ui/drop/dropck_legal_cycles.rs:311:13: 311:14
                                                                                                scope 42 {
                                                                                                    debug k => _447; // in scope 42 at ui/drop/dropck_legal_cycles.rs:311:10: 311:11
                                                                                                    debug v => _448; // in scope 42 at ui/drop/dropck_legal_cycles.rs:311:13: 311:14
                                                                                                }
                                                                                            }
                                                                                            scope 43 {
                                                                                                debug c => _459; // in scope 43 at ui/drop/dropck_legal_cycles.rs:316:9: 316:14
                                                                                                let mut _463: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 43 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
                                                                                                let mut _477: std::collections::BTreeSet<BTS<'_>>; // in scope 43 at ui/drop/dropck_legal_cycles.rs:329:9: 329:16
                                                                                                scope 44 {
                                                                                                    debug iter => _463; // in scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
                                                                                                    let _468: &BTM<'_>; // in scope 44 at ui/drop/dropck_legal_cycles.rs:318:10: 318:11
                                                                                                    scope 45 {
                                                                                                        debug k => _468; // in scope 45 at ui/drop/dropck_legal_cycles.rs:318:10: 318:11
                                                                                                    }
                                                                                                }
                                                                                                scope 46 {
                                                                                                    debug bts => _477; // in scope 46 at ui/drop/dropck_legal_cycles.rs:329:9: 329:16
                                                                                                    let mut _487: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 46 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                                                                                    let mut _498: ContextData; // in scope 46 at ui/drop/dropck_legal_cycles.rs:336:9: 336:14
                                                                                                    scope 47 {
                                                                                                        debug iter => _487; // in scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                                                                                        let _492: &BTS<'_>; // in scope 47 at ui/drop/dropck_legal_cycles.rs:332:9: 332:10
                                                                                                        scope 48 {
                                                                                                            debug v => _492; // in scope 48 at ui/drop/dropck_legal_cycles.rs:332:9: 332:10
                                                                                                        }
                                                                                                    }
                                                                                                    scope 49 {
                                                                                                        debug c => _498; // in scope 49 at ui/drop/dropck_legal_cycles.rs:336:9: 336:14
                                                                                                        let mut _502: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 49 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
                                                                                                        let _516: RCRC<'_>; // in scope 49 at ui/drop/dropck_legal_cycles.rs:349:10: 349:13
                                                                                                        let _517: RCRC<'_>; // in scope 49 at ui/drop/dropck_legal_cycles.rs:349:15: 349:18
                                                                                                        let _518: RCRC<'_>; // in scope 49 at ui/drop/dropck_legal_cycles.rs:349:20: 349:23
                                                                                                        scope 50 {
                                                                                                            debug iter => _502; // in scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
                                                                                                            let _507: &BTS<'_>; // in scope 50 at ui/drop/dropck_legal_cycles.rs:338:9: 338:10
                                                                                                            scope 51 {
                                                                                                                debug b => _507; // in scope 51 at ui/drop/dropck_legal_cycles.rs:338:9: 338:10
                                                                                                            }
                                                                                                        }
                                                                                                        scope 52 {
                                                                                                            debug rc0 => _516; // in scope 52 at ui/drop/dropck_legal_cycles.rs:349:10: 349:13
                                                                                                            debug rc1 => _517; // in scope 52 at ui/drop/dropck_legal_cycles.rs:349:15: 349:18
                                                                                                            debug rc2 => _518; // in scope 52 at ui/drop/dropck_legal_cycles.rs:349:20: 349:23
                                                                                                            let mut _549: ContextData; // in scope 52 at ui/drop/dropck_legal_cycles.rs:357:9: 357:14
                                                                                                            scope 53 {
                                                                                                                debug c => _549; // in scope 53 at ui/drop/dropck_legal_cycles.rs:357:9: 357:14
                                                                                                                let _562: ARCRC<'_>; // in scope 53 at ui/drop/dropck_legal_cycles.rs:383:10: 383:14
                                                                                                                let _563: ARCRC<'_>; // in scope 53 at ui/drop/dropck_legal_cycles.rs:383:16: 383:20
                                                                                                                let _564: ARCRC<'_>; // in scope 53 at ui/drop/dropck_legal_cycles.rs:383:22: 383:26
                                                                                                                scope 54 {
                                                                                                                    debug arc0 => _562; // in scope 54 at ui/drop/dropck_legal_cycles.rs:383:10: 383:14
                                                                                                                    debug arc1 => _563; // in scope 54 at ui/drop/dropck_legal_cycles.rs:383:16: 383:20
                                                                                                                    debug arc2 => _564; // in scope 54 at ui/drop/dropck_legal_cycles.rs:383:22: 383:26
                                                                                                                    let mut _595: ContextData; // in scope 54 at ui/drop/dropck_legal_cycles.rs:391:9: 391:14
                                                                                                                    scope 55 {
                                                                                                                        debug c => _595; // in scope 55 at ui/drop/dropck_legal_cycles.rs:391:9: 391:14
                                                                                                                        let _608: ARCRW<'_>; // in scope 55 at ui/drop/dropck_legal_cycles.rs:401:10: 401:14
                                                                                                                        let _609: ARCRW<'_>; // in scope 55 at ui/drop/dropck_legal_cycles.rs:401:16: 401:20
                                                                                                                        let _610: ARCRW<'_>; // in scope 55 at ui/drop/dropck_legal_cycles.rs:401:22: 401:26
                                                                                                                        scope 56 {
                                                                                                                            debug arc0 => _608; // in scope 56 at ui/drop/dropck_legal_cycles.rs:401:10: 401:14
                                                                                                                            debug arc1 => _609; // in scope 56 at ui/drop/dropck_legal_cycles.rs:401:16: 401:20
                                                                                                                            debug arc2 => _610; // in scope 56 at ui/drop/dropck_legal_cycles.rs:401:22: 401:26
                                                                                                                            let mut _644: ContextData; // in scope 56 at ui/drop/dropck_legal_cycles.rs:409:9: 409:14
                                                                                                                            scope 57 {
                                                                                                                                debug c => _644; // in scope 57 at ui/drop/dropck_legal_cycles.rs:409:9: 409:14
                                                                                                                                let _657: ARCM<'_>; // in scope 57 at ui/drop/dropck_legal_cycles.rs:419:10: 419:14
                                                                                                                                let _658: ARCM<'_>; // in scope 57 at ui/drop/dropck_legal_cycles.rs:419:16: 419:20
                                                                                                                                let _659: ARCM<'_>; // in scope 57 at ui/drop/dropck_legal_cycles.rs:419:22: 419:26
                                                                                                                                scope 58 {
                                                                                                                                    debug arc0 => _657; // in scope 58 at ui/drop/dropck_legal_cycles.rs:419:10: 419:14
                                                                                                                                    debug arc1 => _658; // in scope 58 at ui/drop/dropck_legal_cycles.rs:419:16: 419:20
                                                                                                                                    debug arc2 => _659; // in scope 58 at ui/drop/dropck_legal_cycles.rs:419:22: 419:26
                                                                                                                                    let mut _693: ContextData; // in scope 58 at ui/drop/dropck_legal_cycles.rs:427:9: 427:14
                                                                                                                                    scope 59 {
                                                                                                                                        debug c => _693; // in scope 59 at ui/drop/dropck_legal_cycles.rs:427:9: 427:14
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                scope 6 {
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _719 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _716 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _710 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _713 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _718 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _715 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _709 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _712 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _720 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _717 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _711 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _714 = const false;              // scope 0 at ui/drop/dropck_legal_cycles.rs:118:9: 118:15
        _1 = ContextData { curr_depth: const 0_usize, max_depth: const 3_usize, visited: const 0_usize, max_visits: const 1000_usize, skipped: const 0_usize, curr_mark: const 0_u32, saw_prev_marked: const false, control_bits: const 0_u64 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:118:18: 127:6
        _5 = const 160_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [S2<'_>; 4]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = <S2<'_> as Named>::new(const "s0") -> [return: bb2, unwind: bb410]; // scope 1 at ui/drop/dropck_legal_cycles.rs:131:27: 131:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:131:27: 131:37
                                         // + literal: Const { ty: fn(&'static str) -> S2<'_> {<S2<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:131:38: 131:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _10 = <S2<'_> as Named>::new(const "s1") -> [return: bb3, unwind: bb410]; // scope 1 at ui/drop/dropck_legal_cycles.rs:132:27: 132:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:132:27: 132:37
                                         // + literal: Const { ty: fn(&'static str) -> S2<'_> {<S2<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:132:38: 132:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = <S2<'_> as Named>::new(const "s2") -> [return: bb4, unwind: bb410]; // scope 1 at ui/drop/dropck_legal_cycles.rs:133:27: 133:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:133:27: 133:37
                                         // + literal: Const { ty: fn(&'static str) -> S2<'_> {<S2<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:133:38: 133:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _12 = <S2<'_> as Named>::new(const "s3") -> [return: bb5, unwind: bb410]; // scope 1 at ui/drop/dropck_legal_cycles.rs:134:27: 134:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:134:27: 134:37
                                         // + literal: Const { ty: fn(&'static str) -> S2<'_> {<S2<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:134:38: 134:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _723 = (((_8.0: std::ptr::Unique<[S2<'_>; 4]>).0: std::ptr::NonNull<[S2<'_>; 4]>).0: *const [S2<'_>; 4]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_723) = [move _9, move _10, move _11, move _12]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[S2<'_>]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [S2<'_>]>::into_vec::<std::alloc::Global>(move _3) -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[S2<'_>]>) -> Vec<S2<'_>> {slice::<impl [S2<'_>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:5: 135:6
        _15 = <Vec<S2<'_>> as Index<usize>>::index(move _16, const 0_usize) -> [return: bb7, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:135:5: 135:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:135:5: 135:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = &((*_15).2: std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>); // scope 2 at ui/drop/dropck_legal_cycles.rs:135:5: 135:46
        _22 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:26: 135:27
        _21 = <Vec<S2<'_>> as Index<usize>>::index(move _22, const 1_usize) -> [return: bb8, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:135:26: 135:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:135:26: 135:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = _21;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:25: 135:30
        _19 = _20;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:25: 135:30
        _18 = Option::<&S2<'_>>::Some(move _19); // scope 2 at ui/drop/dropck_legal_cycles.rs:135:20: 135:31
        _27 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:39: 135:40
        _26 = <Vec<S2<'_>> as Index<usize>>::index(move _27, const 2_usize) -> [return: bb9, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:135:39: 135:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:135:39: 135:43
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb9: {
        _25 = _26;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:38: 135:43
        _24 = _25;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:135:38: 135:43
        _23 = Option::<&S2<'_>>::Some(move _24); // scope 2 at ui/drop/dropck_legal_cycles.rs:135:33: 135:44
        _17 = (move _18, move _23);      // scope 2 at ui/drop/dropck_legal_cycles.rs:135:19: 135:45
        _13 = Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set(move _14, move _17) -> [return: bb10, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:135:5: 135:46
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:135:15: 135:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<(Option<&S2<'_>>, Option<&S2<'_>>)>, (Option<&S2<'_>>, Option<&S2<'_>>)) {Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set}, val: Value(<ZST>) }
    }

    bb10: {
        _31 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:136:5: 136:6
        _30 = <Vec<S2<'_>> as Index<usize>>::index(move _31, const 1_usize) -> [return: bb11, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:136:5: 136:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:136:5: 136:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = &((*_30).2: std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>); // scope 2 at ui/drop/dropck_legal_cycles.rs:136:5: 136:39
        _37 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:136:26: 136:27
        _36 = <Vec<S2<'_>> as Index<usize>>::index(move _37, const 3_usize) -> [return: bb12, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:136:26: 136:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:136:26: 136:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb12: {
        _35 = _36;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:136:25: 136:30
        _34 = _35;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:136:25: 136:30
        _33 = Option::<&S2<'_>>::Some(move _34); // scope 2 at ui/drop/dropck_legal_cycles.rs:136:20: 136:31
        _38 = const Option::<&S2<'_>>::None; // scope 2 at ui/drop/dropck_legal_cycles.rs:136:33: 136:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:136:33: 136:37
                                         // + literal: Const { ty: Option<&S2<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _32 = (move _33, move _38);      // scope 2 at ui/drop/dropck_legal_cycles.rs:136:19: 136:38
        _28 = Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set(move _29, move _32) -> [return: bb13, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:136:5: 136:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:136:15: 136:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<(Option<&S2<'_>>, Option<&S2<'_>>)>, (Option<&S2<'_>>, Option<&S2<'_>>)) {Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set}, val: Value(<ZST>) }
    }

    bb13: {
        _42 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:137:5: 137:6
        _41 = <Vec<S2<'_>> as Index<usize>>::index(move _42, const 2_usize) -> [return: bb14, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:137:5: 137:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:137:5: 137:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb14: {
        _40 = &((*_41).2: std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>); // scope 2 at ui/drop/dropck_legal_cycles.rs:137:5: 137:39
        _48 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:137:26: 137:27
        _47 = <Vec<S2<'_>> as Index<usize>>::index(move _48, const 3_usize) -> [return: bb15, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:137:26: 137:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:137:26: 137:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb15: {
        _46 = _47;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:137:25: 137:30
        _45 = _46;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:137:25: 137:30
        _44 = Option::<&S2<'_>>::Some(move _45); // scope 2 at ui/drop/dropck_legal_cycles.rs:137:20: 137:31
        _49 = const Option::<&S2<'_>>::None; // scope 2 at ui/drop/dropck_legal_cycles.rs:137:33: 137:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:137:33: 137:37
                                         // + literal: Const { ty: Option<&S2<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _43 = (move _44, move _49);      // scope 2 at ui/drop/dropck_legal_cycles.rs:137:19: 137:38
        _39 = Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set(move _40, move _43) -> [return: bb16, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:137:5: 137:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:137:15: 137:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<(Option<&S2<'_>>, Option<&S2<'_>>)>, (Option<&S2<'_>>, Option<&S2<'_>>)) {Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set}, val: Value(<ZST>) }
    }

    bb16: {
        _53 = &_2;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:138:5: 138:6
        _52 = <Vec<S2<'_>> as Index<usize>>::index(move _53, const 3_usize) -> [return: bb17, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:138:5: 138:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:138:5: 138:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb17: {
        _51 = &((*_52).2: std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>); // scope 2 at ui/drop/dropck_legal_cycles.rs:138:5: 138:32
        _54 = const (Option::<&S2<'_>>::None, Option::<&S2<'_>>::None); // scope 2 at ui/drop/dropck_legal_cycles.rs:138:19: 138:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:138:19: 138:31
                                         // + literal: Const { ty: (Option<&S2<'_>>, Option<&S2<'_>>), val: Value(ByRef(..)) }
        _50 = Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set(move _51, move _54) -> [return: bb18, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:138:5: 138:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:138:15: 138:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<(Option<&S2<'_>>, Option<&S2<'_>>)>, (Option<&S2<'_>>, Option<&S2<'_>>)) {Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::set}, val: Value(<ZST>) }
    }

    bb18: {
        _56 = &_1;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:140:17: 140:31
        _55 = <ContextData as Clone>::clone(move _56) -> [return: bb19, unwind: bb379]; // scope 2 at ui/drop/dropck_legal_cycles.rs:140:17: 140:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:140:24: 140:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb19: {
        (_55.5: u32) = const 10_u32;     // scope 4 at ui/drop/dropck_legal_cycles.rs:141:5: 141:21
        _59 = (_55.6: bool);             // scope 4 at ui/drop/dropck_legal_cycles.rs:142:14: 142:31
        _58 = Not(move _59);             // scope 4 at ui/drop/dropck_legal_cycles.rs:142:13: 142:31
        _57 = Not(move _58);             // scope 4 at ui/drop/dropck_legal_cycles.rs:142:5: 142:32
        switchInt(move _57) -> [0: bb21, otherwise: bb20]; // scope 4 at ui/drop/dropck_legal_cycles.rs:142:5: 142:32
    }

    bb20: {
        _60 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb379; // scope 4 at ui/drop/dropck_legal_cycles.rs:142:5: 142:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:142:5: 142:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _64 = &_2;                       // scope 4 at ui/drop/dropck_legal_cycles.rs:143:5: 143:6
        _63 = <Vec<S2<'_>> as Index<usize>>::index(move _64, const 0_usize) -> [return: bb22, unwind: bb379]; // scope 4 at ui/drop/dropck_legal_cycles.rs:143:5: 143:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:143:5: 143:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S2<'_>>, usize) -> &'a <Vec<S2<'_>> as Index<usize>>::Output {<Vec<S2<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb22: {
        _62 = _63;                       // scope 4 at ui/drop/dropck_legal_cycles.rs:143:5: 143:35
        _66 = &mut _55;                  // scope 4 at ui/drop/dropck_legal_cycles.rs:143:28: 143:34
        _65 = &mut (*_66);               // scope 4 at ui/drop/dropck_legal_cycles.rs:143:28: 143:34
        _61 = <S2<'_> as Children<'_>>::descend_into_self::<ContextData>(move _62, move _65) -> [return: bb23, unwind: bb379]; // scope 4 at ui/drop/dropck_legal_cycles.rs:143:5: 143:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:143:10: 143:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S2<'_>, &'b mut ContextData) {<S2<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb23: {
        _69 = (_55.6: bool);             // scope 4 at ui/drop/dropck_legal_cycles.rs:144:14: 144:31
        _68 = Not(move _69);             // scope 4 at ui/drop/dropck_legal_cycles.rs:144:13: 144:31
        _67 = Not(move _68);             // scope 4 at ui/drop/dropck_legal_cycles.rs:144:5: 144:32
        switchInt(move _67) -> [0: bb25, otherwise: bb24]; // scope 4 at ui/drop/dropck_legal_cycles.rs:144:5: 144:32
    }

    bb24: {
        _70 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb379; // scope 4 at ui/drop/dropck_legal_cycles.rs:144:5: 144:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:144:5: 144:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _74 = const 64_usize;            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _75 = const 8_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _76 = alloc::alloc::exchange_malloc(move _74, move _75) -> [return: bb26, unwind: bb379]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb26: {
        _77 = ShallowInitBox(move _76, [S<'_>; 2]); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _78 = <S<'_> as Named>::new(const "s0") -> [return: bb27, unwind: bb409]; // scope 4 at ui/drop/dropck_legal_cycles.rs:150:26: 150:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:150:26: 150:36
                                         // + literal: Const { ty: fn(&'static str) -> S<'_> {<S<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:150:37: 150:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _79 = <S<'_> as Named>::new(const "s1") -> [return: bb28, unwind: bb409]; // scope 4 at ui/drop/dropck_legal_cycles.rs:151:26: 151:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:151:26: 151:36
                                         // + literal: Const { ty: fn(&'static str) -> S<'_> {<S<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:151:37: 151:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        _724 = (((_77.0: std::ptr::Unique<[S<'_>; 2]>).0: std::ptr::NonNull<[S<'_>; 2]>).0: *const [S<'_>; 2]); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_724) = [move _78, move _79];  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _73 = move _77;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _72 = move _73 as std::boxed::Box<[S<'_>]> (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _71 = slice::<impl [S<'_>]>::into_vec::<std::alloc::Global>(move _72) -> [return: bb29, unwind: bb379]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Box<[S<'_>]>) -> Vec<S<'_>> {slice::<impl [S<'_>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb29: {
        _83 = &_71;                      // scope 5 at ui/drop/dropck_legal_cycles.rs:152:5: 152:6
        _82 = <Vec<S<'_>> as Index<usize>>::index(move _83, const 0_usize) -> [return: bb30, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:152:5: 152:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:152:5: 152:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S<'_>>, usize) -> &'a <Vec<S<'_>> as Index<usize>>::Output {<Vec<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb30: {
        _81 = &((*_82).2: std::cell::Cell<std::option::Option<&S<'_>>>); // scope 5 at ui/drop/dropck_legal_cycles.rs:152:5: 152:31
        _88 = &_71;                      // scope 5 at ui/drop/dropck_legal_cycles.rs:152:25: 152:26
        _87 = <Vec<S<'_>> as Index<usize>>::index(move _88, const 1_usize) -> [return: bb31, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:152:25: 152:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:152:25: 152:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S<'_>>, usize) -> &'a <Vec<S<'_>> as Index<usize>>::Output {<Vec<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb31: {
        _86 = _87;                       // scope 5 at ui/drop/dropck_legal_cycles.rs:152:24: 152:29
        _85 = _86;                       // scope 5 at ui/drop/dropck_legal_cycles.rs:152:24: 152:29
        _84 = Option::<&S<'_>>::Some(move _85); // scope 5 at ui/drop/dropck_legal_cycles.rs:152:19: 152:30
        _80 = Cell::<Option<&S<'_>>>::set(move _81, move _84) -> [return: bb32, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:152:5: 152:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:152:15: 152:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&S<'_>>>, Option<&S<'_>>) {Cell::<Option<&S<'_>>>::set}, val: Value(<ZST>) }
    }

    bb32: {
        _92 = &_71;                      // scope 5 at ui/drop/dropck_legal_cycles.rs:153:5: 153:6
        _91 = <Vec<S<'_>> as Index<usize>>::index(move _92, const 1_usize) -> [return: bb33, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:153:5: 153:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:153:5: 153:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S<'_>>, usize) -> &'a <Vec<S<'_>> as Index<usize>>::Output {<Vec<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb33: {
        _90 = &((*_91).2: std::cell::Cell<std::option::Option<&S<'_>>>); // scope 5 at ui/drop/dropck_legal_cycles.rs:153:5: 153:31
        _97 = &_71;                      // scope 5 at ui/drop/dropck_legal_cycles.rs:153:25: 153:26
        _96 = <Vec<S<'_>> as Index<usize>>::index(move _97, const 0_usize) -> [return: bb34, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:153:25: 153:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:153:25: 153:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S<'_>>, usize) -> &'a <Vec<S<'_>> as Index<usize>>::Output {<Vec<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb34: {
        _95 = _96;                       // scope 5 at ui/drop/dropck_legal_cycles.rs:153:24: 153:29
        _94 = _95;                       // scope 5 at ui/drop/dropck_legal_cycles.rs:153:24: 153:29
        _93 = Option::<&S<'_>>::Some(move _94); // scope 5 at ui/drop/dropck_legal_cycles.rs:153:19: 153:30
        _89 = Cell::<Option<&S<'_>>>::set(move _90, move _93) -> [return: bb35, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:153:5: 153:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:153:15: 153:18
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&S<'_>>>, Option<&S<'_>>) {Cell::<Option<&S<'_>>>::set}, val: Value(<ZST>) }
    }

    bb35: {
        _99 = &_1;                       // scope 5 at ui/drop/dropck_legal_cycles.rs:155:17: 155:31
        _98 = <ContextData as Clone>::clone(move _99) -> [return: bb36, unwind: bb378]; // scope 5 at ui/drop/dropck_legal_cycles.rs:155:17: 155:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:155:24: 155:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb36: {
        (_98.5: u32) = const 10_u32;     // scope 7 at ui/drop/dropck_legal_cycles.rs:156:5: 156:21
        _102 = (_98.6: bool);            // scope 7 at ui/drop/dropck_legal_cycles.rs:157:14: 157:31
        _101 = Not(move _102);           // scope 7 at ui/drop/dropck_legal_cycles.rs:157:13: 157:31
        _100 = Not(move _101);           // scope 7 at ui/drop/dropck_legal_cycles.rs:157:5: 157:32
        switchInt(move _100) -> [0: bb38, otherwise: bb37]; // scope 7 at ui/drop/dropck_legal_cycles.rs:157:5: 157:32
    }

    bb37: {
        _103 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb378; // scope 7 at ui/drop/dropck_legal_cycles.rs:157:5: 157:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:157:5: 157:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        _107 = &_71;                     // scope 7 at ui/drop/dropck_legal_cycles.rs:158:5: 158:6
        _106 = <Vec<S<'_>> as Index<usize>>::index(move _107, const 0_usize) -> [return: bb39, unwind: bb378]; // scope 7 at ui/drop/dropck_legal_cycles.rs:158:5: 158:9
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:158:5: 158:9
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<S<'_>>, usize) -> &'a <Vec<S<'_>> as Index<usize>>::Output {<Vec<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb39: {
        _105 = _106;                     // scope 7 at ui/drop/dropck_legal_cycles.rs:158:5: 158:35
        _109 = &mut _98;                 // scope 7 at ui/drop/dropck_legal_cycles.rs:158:28: 158:34
        _108 = &mut (*_109);             // scope 7 at ui/drop/dropck_legal_cycles.rs:158:28: 158:34
        _104 = <S<'_> as Children<'_>>::descend_into_self::<ContextData>(move _105, move _108) -> [return: bb40, unwind: bb378]; // scope 7 at ui/drop/dropck_legal_cycles.rs:158:5: 158:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:158:10: 158:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S<'_>, &'b mut ContextData) {<S<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb40: {
        _111 = (_98.6: bool);            // scope 7 at ui/drop/dropck_legal_cycles.rs:159:13: 159:30
        _110 = Not(move _111);           // scope 7 at ui/drop/dropck_legal_cycles.rs:159:5: 159:31
        switchInt(move _110) -> [0: bb42, otherwise: bb41]; // scope 7 at ui/drop/dropck_legal_cycles.rs:159:5: 159:31
    }

    bb41: {
        _112 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb378; // scope 7 at ui/drop/dropck_legal_cycles.rs:159:5: 159:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:159:5: 159:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb42: {
        _113 = <V<'_> as Named>::new(const "v") -> [return: bb43, unwind: bb378]; // scope 7 at ui/drop/dropck_legal_cycles.rs:164:16: 164:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:164:16: 164:26
                                         // + literal: Const { ty: fn(&'static str) -> V<'_> {<V<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:164:27: 164:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb43: {
        _117 = &(_113.2: std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>); // scope 8 at ui/drop/dropck_legal_cycles.rs:165:5: 165:15
        _116 = <Vec<Cell<Option<&V<'_>>>> as Index<usize>>::index(move _117, const 0_usize) -> [return: bb44, unwind: bb377]; // scope 8 at ui/drop/dropck_legal_cycles.rs:165:5: 165:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:165:5: 165:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Cell<Option<&V<'_>>>>, usize) -> &'a <Vec<Cell<Option<&V<'_>>>> as Index<usize>>::Output {<Vec<Cell<Option<&V<'_>>>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb44: {
        _115 = _116;                     // scope 8 at ui/drop/dropck_legal_cycles.rs:165:5: 165:32
        _120 = &_113;                    // scope 8 at ui/drop/dropck_legal_cycles.rs:165:28: 165:30
        _119 = _120;                     // scope 8 at ui/drop/dropck_legal_cycles.rs:165:28: 165:30
        _118 = Option::<&V<'_>>::Some(move _119); // scope 8 at ui/drop/dropck_legal_cycles.rs:165:23: 165:31
        _114 = Cell::<Option<&V<'_>>>::set(move _115, move _118) -> [return: bb45, unwind: bb377]; // scope 8 at ui/drop/dropck_legal_cycles.rs:165:5: 165:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:165:19: 165:22
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&V<'_>>>, Option<&V<'_>>) {Cell::<Option<&V<'_>>>::set}, val: Value(<ZST>) }
    }

    bb45: {
        _124 = &(_113.2: std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>); // scope 8 at ui/drop/dropck_legal_cycles.rs:166:5: 166:15
        _123 = <Vec<Cell<Option<&V<'_>>>> as Index<usize>>::index(move _124, const 1_usize) -> [return: bb46, unwind: bb377]; // scope 8 at ui/drop/dropck_legal_cycles.rs:166:5: 166:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:166:5: 166:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Cell<Option<&V<'_>>>>, usize) -> &'a <Vec<Cell<Option<&V<'_>>>> as Index<usize>>::Output {<Vec<Cell<Option<&V<'_>>>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb46: {
        _122 = _123;                     // scope 8 at ui/drop/dropck_legal_cycles.rs:166:5: 166:32
        _127 = &_113;                    // scope 8 at ui/drop/dropck_legal_cycles.rs:166:28: 166:30
        _126 = _127;                     // scope 8 at ui/drop/dropck_legal_cycles.rs:166:28: 166:30
        _125 = Option::<&V<'_>>::Some(move _126); // scope 8 at ui/drop/dropck_legal_cycles.rs:166:23: 166:31
        _121 = Cell::<Option<&V<'_>>>::set(move _122, move _125) -> [return: bb47, unwind: bb377]; // scope 8 at ui/drop/dropck_legal_cycles.rs:166:5: 166:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:166:19: 166:22
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&V<'_>>>, Option<&V<'_>>) {Cell::<Option<&V<'_>>>::set}, val: Value(<ZST>) }
    }

    bb47: {
        _129 = &_1;                      // scope 8 at ui/drop/dropck_legal_cycles.rs:168:17: 168:31
        _128 = <ContextData as Clone>::clone(move _129) -> [return: bb48, unwind: bb377]; // scope 8 at ui/drop/dropck_legal_cycles.rs:168:17: 168:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:168:24: 168:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb48: {
        (_128.5: u32) = const 20_u32;    // scope 9 at ui/drop/dropck_legal_cycles.rs:169:5: 169:21
        _132 = (_128.6: bool);           // scope 9 at ui/drop/dropck_legal_cycles.rs:170:14: 170:31
        _131 = Not(move _132);           // scope 9 at ui/drop/dropck_legal_cycles.rs:170:13: 170:31
        _130 = Not(move _131);           // scope 9 at ui/drop/dropck_legal_cycles.rs:170:5: 170:32
        switchInt(move _130) -> [0: bb50, otherwise: bb49]; // scope 9 at ui/drop/dropck_legal_cycles.rs:170:5: 170:32
    }

    bb49: {
        _133 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb377; // scope 9 at ui/drop/dropck_legal_cycles.rs:170:5: 170:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:170:5: 170:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _135 = &_113;                    // scope 9 at ui/drop/dropck_legal_cycles.rs:171:5: 171:32
        _137 = &mut _128;                // scope 9 at ui/drop/dropck_legal_cycles.rs:171:25: 171:31
        _136 = &mut (*_137);             // scope 9 at ui/drop/dropck_legal_cycles.rs:171:25: 171:31
        _134 = <V<'_> as Children<'_>>::descend_into_self::<ContextData>(move _135, move _136) -> [return: bb51, unwind: bb377]; // scope 9 at ui/drop/dropck_legal_cycles.rs:171:5: 171:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:171:7: 171:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a V<'_>, &'b mut ContextData) {<V<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb51: {
        _139 = (_128.6: bool);           // scope 9 at ui/drop/dropck_legal_cycles.rs:172:13: 172:30
        _138 = Not(move _139);           // scope 9 at ui/drop/dropck_legal_cycles.rs:172:5: 172:31
        switchInt(move _138) -> [0: bb53, otherwise: bb52]; // scope 9 at ui/drop/dropck_legal_cycles.rs:172:5: 172:31
    }

    bb52: {
        _140 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb377; // scope 9 at ui/drop/dropck_legal_cycles.rs:172:5: 172:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:172:5: 172:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _141 = HashMap::<H<'_>, H<'_>>::new() -> [return: bb54, unwind: bb377]; // scope 9 at ui/drop/dropck_legal_cycles.rs:179:31: 179:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:179:31: 179:43
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn() -> HashMap<H<'_>, H<'_>> {HashMap::<H<'_>, H<'_>>::new}, val: Value(<ZST>) }
    }

    bb54: {
        _143 = &mut _141;                // scope 10 at ui/drop/dropck_legal_cycles.rs:180:5: 180:51
        _144 = <H<'_> as Named>::new(const "hk0") -> [return: bb55, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:180:14: 180:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:180:14: 180:24
                                         // + literal: Const { ty: fn(&'static str) -> H<'_> {<H<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:180:25: 180:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _145 = <H<'_> as Named>::new(const "hv0") -> [return: bb56, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:180:33: 180:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:180:33: 180:43
                                         // + literal: Const { ty: fn(&'static str) -> H<'_> {<H<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:180:44: 180:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _142 = HashMap::<H<'_>, H<'_>>::insert(move _143, move _144, move _145) -> [return: bb57, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:180:5: 180:51
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:180:7: 180:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<H<'_>, H<'_>>, H<'_>, H<'_>) -> Option<H<'_>> {HashMap::<H<'_>, H<'_>>::insert}, val: Value(<ZST>) }
    }

    bb57: {
        _147 = &mut _141;                // scope 10 at ui/drop/dropck_legal_cycles.rs:181:5: 181:51
        _148 = <H<'_> as Named>::new(const "hk1") -> [return: bb58, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:181:14: 181:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:181:14: 181:24
                                         // + literal: Const { ty: fn(&'static str) -> H<'_> {<H<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:181:25: 181:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb58: {
        _149 = <H<'_> as Named>::new(const "hv1") -> [return: bb59, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:181:33: 181:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:181:33: 181:43
                                         // + literal: Const { ty: fn(&'static str) -> H<'_> {<H<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:181:44: 181:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb59: {
        _146 = HashMap::<H<'_>, H<'_>>::insert(move _147, move _148, move _149) -> [return: bb60, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:181:5: 181:51
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:181:7: 181:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<H<'_>, H<'_>>, H<'_>, H<'_>) -> Option<H<'_>> {HashMap::<H<'_>, H<'_>>::insert}, val: Value(<ZST>) }
    }

    bb60: {
        _152 = &_141;                    // scope 10 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
        _151 = HashMap::<H<'_>, H<'_>>::iter(move _152) -> [return: bb61, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:182:25: 182:29
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<H<'_>, H<'_>>) -> std::collections::hash_map::Iter<'a, H<'_>, H<'_>> {HashMap::<H<'_>, H<'_>>::iter}, val: Value(<ZST>) }
    }

    bb61: {
        _150 = <std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as IntoIterator>::into_iter(move _151) -> [return: bb62, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, H<'_>, H<'_>>) -> <std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb62: {
        _153 = move _150;                // scope 10 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
        goto -> bb63;                    // scope 11 at ui/drop/dropck_legal_cycles.rs:182:5: 185:6
    }

    bb63: {
        _156 = &mut _153;                // scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
        _155 = &mut (*_156);             // scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
        _154 = <std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as Iterator>::next(move _155) -> [return: bb64, unwind: bb376]; // scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:182:23: 182:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, H<'_>, H<'_>>) -> Option<<std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb64: {
        _157 = discriminant(_154);       // scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
        switchInt(move _157) -> [0: bb67, 1: bb65, otherwise: bb66]; // scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    }

    bb65: {
        _158 = (((_154 as Some).0: (&H<'_>, &H<'_>)).0: &H<'_>); // scope 11 at ui/drop/dropck_legal_cycles.rs:182:10: 182:13
        _159 = (((_154 as Some).0: (&H<'_>, &H<'_>)).1: &H<'_>); // scope 11 at ui/drop/dropck_legal_cycles.rs:182:15: 182:18
        _161 = &((*_159).2: std::cell::Cell<std::option::Option<&H<'_>>>); // scope 12 at ui/drop/dropck_legal_cycles.rs:183:9: 183:32
        _163 = _158;                     // scope 12 at ui/drop/dropck_legal_cycles.rs:183:27: 183:30
        _162 = Option::<&H<'_>>::Some(move _163); // scope 12 at ui/drop/dropck_legal_cycles.rs:183:22: 183:31
        _160 = Cell::<Option<&H<'_>>>::set(move _161, move _162) -> [return: bb68, unwind: bb376]; // scope 12 at ui/drop/dropck_legal_cycles.rs:183:9: 183:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:183:18: 183:21
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&H<'_>>>, Option<&H<'_>>) {Cell::<Option<&H<'_>>>::set}, val: Value(<ZST>) }
    }

    bb66: {
        unreachable;                     // scope 11 at ui/drop/dropck_legal_cycles.rs:182:23: 182:31
    }

    bb67: {
        _169 = &_1;                      // scope 10 at ui/drop/dropck_legal_cycles.rs:187:17: 187:31
        _168 = <ContextData as Clone>::clone(move _169) -> [return: bb69, unwind: bb376]; // scope 10 at ui/drop/dropck_legal_cycles.rs:187:17: 187:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:187:24: 187:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb68: {
        _165 = &((*_158).2: std::cell::Cell<std::option::Option<&H<'_>>>); // scope 12 at ui/drop/dropck_legal_cycles.rs:184:9: 184:32
        _167 = _159;                     // scope 12 at ui/drop/dropck_legal_cycles.rs:184:27: 184:30
        _166 = Option::<&H<'_>>::Some(move _167); // scope 12 at ui/drop/dropck_legal_cycles.rs:184:22: 184:31
        _164 = Cell::<Option<&H<'_>>>::set(move _165, move _166) -> [return: bb411, unwind: bb376]; // scope 12 at ui/drop/dropck_legal_cycles.rs:184:9: 184:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:184:18: 184:21
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&H<'_>>>, Option<&H<'_>>) {Cell::<Option<&H<'_>>>::set}, val: Value(<ZST>) }
    }

    bb69: {
        (_168.5: u32) = const 30_u32;    // scope 13 at ui/drop/dropck_legal_cycles.rs:188:5: 188:21
        _172 = &_141;                    // scope 13 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
        _171 = HashMap::<H<'_>, H<'_>>::iter(move _172) -> [return: bb70, unwind: bb376]; // scope 13 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:189:23: 189:27
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<H<'_>, H<'_>>) -> std::collections::hash_map::Iter<'a, H<'_>, H<'_>> {HashMap::<H<'_>, H<'_>>::iter}, val: Value(<ZST>) }
    }

    bb70: {
        _170 = <std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as IntoIterator>::into_iter(move _171) -> [return: bb71, unwind: bb376]; // scope 13 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, H<'_>, H<'_>>) -> <std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb71: {
        _173 = move _170;                // scope 13 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
        goto -> bb72;                    // scope 14 at ui/drop/dropck_legal_cycles.rs:189:5: 194:6
    }

    bb72: {
        _176 = &mut _173;                // scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
        _175 = &mut (*_176);             // scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
        _174 = <std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as Iterator>::next(move _175) -> [return: bb73, unwind: bb376]; // scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:189:21: 189:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, H<'_>, H<'_>>) -> Option<<std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, H<'_>, H<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb73: {
        _177 = discriminant(_174);       // scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
        switchInt(move _177) -> [0: bb76, 1: bb74, otherwise: bb75]; // scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    }

    bb74: {
        _178 = (((_174 as Some).0: (&H<'_>, &H<'_>)).0: &H<'_>); // scope 14 at ui/drop/dropck_legal_cycles.rs:189:10: 189:13
        _179 = CheckedAdd((_168.5: u32), const 1_u32); // scope 15 at ui/drop/dropck_legal_cycles.rs:190:9: 190:25
        assert(!move (_179.1: bool), "attempt to compute `{} + {}`, which would overflow", (_168.5: u32), const 1_u32) -> [success: bb77, unwind: bb376]; // scope 15 at ui/drop/dropck_legal_cycles.rs:190:9: 190:25
    }

    bb75: {
        unreachable;                     // scope 14 at ui/drop/dropck_legal_cycles.rs:189:21: 189:29
    }

    bb76: {
        _187 = HashMap::<HM<'_>, HM<'_>>::new() -> [return: bb80, unwind: bb376]; // scope 13 at ui/drop/dropck_legal_cycles.rs:200:33: 200:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:200:33: 200:45
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn() -> HashMap<HM<'_>, HM<'_>> {HashMap::<HM<'_>, HM<'_>>::new}, val: Value(<ZST>) }
    }

    bb77: {
        (_168.5: u32) = move (_179.0: u32); // scope 15 at ui/drop/dropck_legal_cycles.rs:190:9: 190:25
        (_168.6: bool) = const false;    // scope 15 at ui/drop/dropck_legal_cycles.rs:191:9: 191:34
        _181 = _178;                     // scope 15 at ui/drop/dropck_legal_cycles.rs:192:9: 192:38
        _183 = &mut _168;                // scope 15 at ui/drop/dropck_legal_cycles.rs:192:31: 192:37
        _182 = &mut (*_183);             // scope 15 at ui/drop/dropck_legal_cycles.rs:192:31: 192:37
        _180 = <H<'_> as Children<'_>>::descend_into_self::<ContextData>(move _181, move _182) -> [return: bb78, unwind: bb376]; // scope 15 at ui/drop/dropck_legal_cycles.rs:192:9: 192:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:192:13: 192:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a H<'_>, &'b mut ContextData) {<H<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb78: {
        _185 = (_168.6: bool);           // scope 15 at ui/drop/dropck_legal_cycles.rs:193:17: 193:34
        _184 = Not(move _185);           // scope 15 at ui/drop/dropck_legal_cycles.rs:193:9: 193:35
        switchInt(move _184) -> [0: bb72, otherwise: bb79]; // scope 15 at ui/drop/dropck_legal_cycles.rs:193:9: 193:35
    }

    bb79: {
        _186 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb376; // scope 15 at ui/drop/dropck_legal_cycles.rs:193:9: 193:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:193:9: 193:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb80: {
        _189 = &mut _187;                // scope 16 at ui/drop/dropck_legal_cycles.rs:201:5: 201:53
        _190 = <HM<'_> as Named>::new(const "hmk0") -> [return: bb81, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:201:14: 201:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:201:14: 201:24
                                         // + literal: Const { ty: fn(&'static str) -> HM<'_> {<HM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:201:25: 201:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb81: {
        _191 = <HM<'_> as Named>::new(const "hmv0") -> [return: bb82, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:201:34: 201:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:201:34: 201:44
                                         // + literal: Const { ty: fn(&'static str) -> HM<'_> {<HM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:201:45: 201:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb82: {
        _188 = HashMap::<HM<'_>, HM<'_>>::insert(move _189, move _190, move _191) -> [return: bb83, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:201:5: 201:53
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:201:7: 201:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<HM<'_>, HM<'_>>, HM<'_>, HM<'_>) -> Option<HM<'_>> {HashMap::<HM<'_>, HM<'_>>::insert}, val: Value(<ZST>) }
    }

    bb83: {
        _193 = &mut _187;                // scope 16 at ui/drop/dropck_legal_cycles.rs:202:5: 202:53
        _194 = <HM<'_> as Named>::new(const "hmk0") -> [return: bb84, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:202:14: 202:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:202:14: 202:24
                                         // + literal: Const { ty: fn(&'static str) -> HM<'_> {<HM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:202:25: 202:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb84: {
        _195 = <HM<'_> as Named>::new(const "hmv0") -> [return: bb85, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:202:34: 202:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:202:34: 202:44
                                         // + literal: Const { ty: fn(&'static str) -> HM<'_> {<HM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:202:45: 202:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb85: {
        _192 = HashMap::<HM<'_>, HM<'_>>::insert(move _193, move _194, move _195) -> [return: bb86, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:202:5: 202:53
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:202:7: 202:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<HM<'_>, HM<'_>>, HM<'_>, HM<'_>) -> Option<HM<'_>> {HashMap::<HM<'_>, HM<'_>>::insert}, val: Value(<ZST>) }
    }

    bb86: {
        _198 = &_187;                    // scope 16 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
        _197 = HashMap::<HM<'_>, HM<'_>>::iter(move _198) -> [return: bb87, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:203:25: 203:29
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<HM<'_>, HM<'_>>) -> std::collections::hash_map::Iter<'a, HM<'_>, HM<'_>> {HashMap::<HM<'_>, HM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb87: {
        _196 = <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as IntoIterator>::into_iter(move _197) -> [return: bb88, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>) -> <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb88: {
        _199 = move _196;                // scope 16 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
        goto -> bb89;                    // scope 17 at ui/drop/dropck_legal_cycles.rs:203:5: 206:6
    }

    bb89: {
        _202 = &mut _199;                // scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
        _201 = &mut (*_202);             // scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
        _200 = <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::next(move _201) -> [return: bb90, unwind: bb375]; // scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:203:23: 203:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>) -> Option<<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb90: {
        _203 = discriminant(_200);       // scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
        switchInt(move _203) -> [0: bb93, 1: bb91, otherwise: bb92]; // scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    }

    bb91: {
        _204 = (((_200 as Some).0: (&HM<'_>, &HM<'_>)).0: &HM<'_>); // scope 17 at ui/drop/dropck_legal_cycles.rs:203:10: 203:13
        _205 = (((_200 as Some).0: (&HM<'_>, &HM<'_>)).1: &HM<'_>); // scope 17 at ui/drop/dropck_legal_cycles.rs:203:15: 203:18
        _207 = &((*_205).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>); // scope 18 at ui/drop/dropck_legal_cycles.rs:204:9: 204:35
        _210 = &_187;                    // scope 18 at ui/drop/dropck_legal_cycles.rs:204:31: 204:33
        _209 = _210;                     // scope 18 at ui/drop/dropck_legal_cycles.rs:204:31: 204:33
        _208 = Option::<&HashMap<HM<'_>, HM<'_>>>::Some(move _209); // scope 18 at ui/drop/dropck_legal_cycles.rs:204:26: 204:34
        _206 = Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::set(move _207, move _208) -> [return: bb94, unwind: bb375]; // scope 18 at ui/drop/dropck_legal_cycles.rs:204:9: 204:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:204:22: 204:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<HM<'_>, HM<'_>>>>, Option<&HashMap<HM<'_>, HM<'_>>>) {Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb92: {
        unreachable;                     // scope 17 at ui/drop/dropck_legal_cycles.rs:203:23: 203:31
    }

    bb93: {
        _217 = &_1;                      // scope 16 at ui/drop/dropck_legal_cycles.rs:208:17: 208:31
        _216 = <ContextData as Clone>::clone(move _217) -> [return: bb95, unwind: bb375]; // scope 16 at ui/drop/dropck_legal_cycles.rs:208:17: 208:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:208:24: 208:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb94: {
        _212 = &((*_204).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>); // scope 18 at ui/drop/dropck_legal_cycles.rs:205:9: 205:35
        _215 = &_187;                    // scope 18 at ui/drop/dropck_legal_cycles.rs:205:31: 205:33
        _214 = _215;                     // scope 18 at ui/drop/dropck_legal_cycles.rs:205:31: 205:33
        _213 = Option::<&HashMap<HM<'_>, HM<'_>>>::Some(move _214); // scope 18 at ui/drop/dropck_legal_cycles.rs:205:26: 205:34
        _211 = Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::set(move _212, move _213) -> [return: bb412, unwind: bb375]; // scope 18 at ui/drop/dropck_legal_cycles.rs:205:9: 205:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:205:22: 205:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<HM<'_>, HM<'_>>>>, Option<&HashMap<HM<'_>, HM<'_>>>) {Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb95: {
        (_216.1: usize) = const 2_usize; // scope 19 at ui/drop/dropck_legal_cycles.rs:209:5: 209:20
        (_216.5: u32) = const 40_u32;    // scope 19 at ui/drop/dropck_legal_cycles.rs:210:5: 210:21
        _220 = &_187;                    // scope 19 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
        _219 = HashMap::<HM<'_>, HM<'_>>::iter(move _220) -> [return: bb96, unwind: bb375]; // scope 19 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:211:23: 211:27
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<HM<'_>, HM<'_>>) -> std::collections::hash_map::Iter<'a, HM<'_>, HM<'_>> {HashMap::<HM<'_>, HM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb96: {
        _218 = <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as IntoIterator>::into_iter(move _219) -> [return: bb97, unwind: bb375]; // scope 19 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>) -> <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as IntoIterator>::IntoIter {<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb97: {
        _221 = move _218;                // scope 19 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
        goto -> bb98;                    // scope 20 at ui/drop/dropck_legal_cycles.rs:211:5: 217:6
    }

    bb98: {
        _224 = &mut _221;                // scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
        _223 = &mut (*_224);             // scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
        _222 = <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::next(move _223) -> [return: bb99, unwind: bb375]; // scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:211:21: 211:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>) -> Option<<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb99: {
        _225 = discriminant(_222);       // scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
        switchInt(move _225) -> [0: bb102, 1: bb100, otherwise: bb101]; // scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    }

    bb100: {
        _226 = (((_222 as Some).0: (&HM<'_>, &HM<'_>)).0: &HM<'_>); // scope 20 at ui/drop/dropck_legal_cycles.rs:211:10: 211:13
        _227 = CheckedAdd((_216.5: u32), const 1_u32); // scope 21 at ui/drop/dropck_legal_cycles.rs:212:9: 212:25
        assert(!move (_227.1: bool), "attempt to compute `{} + {}`, which would overflow", (_216.5: u32), const 1_u32) -> [success: bb103, unwind: bb375]; // scope 21 at ui/drop/dropck_legal_cycles.rs:212:9: 212:25
    }

    bb101: {
        unreachable;                     // scope 20 at ui/drop/dropck_legal_cycles.rs:211:21: 211:29
    }

    bb102: {
        _235 = VecDeque::<S<'_>>::new() -> [return: bb106, unwind: bb375]; // scope 19 at ui/drop/dropck_legal_cycles.rs:223:31: 223:46
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:223:31: 223:44
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn() -> VecDeque<S<'_>> {VecDeque::<S<'_>>::new}, val: Value(<ZST>) }
    }

    bb103: {
        (_216.5: u32) = move (_227.0: u32); // scope 21 at ui/drop/dropck_legal_cycles.rs:212:9: 212:25
        (_216.6: bool) = const false;    // scope 21 at ui/drop/dropck_legal_cycles.rs:213:9: 213:34
        _229 = _226;                     // scope 21 at ui/drop/dropck_legal_cycles.rs:214:9: 214:38
        _231 = &mut _216;                // scope 21 at ui/drop/dropck_legal_cycles.rs:214:31: 214:37
        _230 = &mut (*_231);             // scope 21 at ui/drop/dropck_legal_cycles.rs:214:31: 214:37
        _228 = <HM<'_> as Children<'_>>::descend_into_self::<ContextData>(move _229, move _230) -> [return: bb104, unwind: bb375]; // scope 21 at ui/drop/dropck_legal_cycles.rs:214:9: 214:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:214:13: 214:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HM<'_>, &'b mut ContextData) {<HM<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb104: {
        _233 = (_216.6: bool);           // scope 21 at ui/drop/dropck_legal_cycles.rs:215:17: 215:34
        _232 = Not(move _233);           // scope 21 at ui/drop/dropck_legal_cycles.rs:215:9: 215:35
        switchInt(move _232) -> [0: bb98, otherwise: bb105]; // scope 21 at ui/drop/dropck_legal_cycles.rs:215:9: 215:35
    }

    bb105: {
        _234 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb375; // scope 21 at ui/drop/dropck_legal_cycles.rs:215:9: 215:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:215:9: 215:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb106: {
        _237 = &mut _235;                // scope 22 at ui/drop/dropck_legal_cycles.rs:224:5: 224:35
        _238 = <S<'_> as Named>::new(const "d0") -> [return: bb107, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:224:18: 224:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:224:18: 224:28
                                         // + literal: Const { ty: fn(&'static str) -> S<'_> {<S<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:224:29: 224:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb107: {
        _236 = VecDeque::<S<'_>>::push_back(move _237, move _238) -> [return: bb108, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:224:5: 224:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:224:8: 224:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut VecDeque<S<'_>>, S<'_>) {VecDeque::<S<'_>>::push_back}, val: Value(<ZST>) }
    }

    bb108: {
        _240 = &mut _235;                // scope 22 at ui/drop/dropck_legal_cycles.rs:225:5: 225:35
        _241 = <S<'_> as Named>::new(const "d1") -> [return: bb109, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:225:18: 225:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:225:18: 225:28
                                         // + literal: Const { ty: fn(&'static str) -> S<'_> {<S<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:225:29: 225:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb109: {
        _239 = VecDeque::<S<'_>>::push_back(move _240, move _241) -> [return: bb110, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:225:5: 225:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:225:8: 225:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut VecDeque<S<'_>>, S<'_>) {VecDeque::<S<'_>>::push_back}, val: Value(<ZST>) }
    }

    bb110: {
        _245 = &_235;                    // scope 22 at ui/drop/dropck_legal_cycles.rs:226:5: 226:7
        _244 = <VecDeque<S<'_>> as Index<usize>>::index(move _245, const 0_usize) -> [return: bb111, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:226:5: 226:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:226:5: 226:10
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<S<'_>>, usize) -> &'a <VecDeque<S<'_>> as Index<usize>>::Output {<VecDeque<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb111: {
        _243 = &((*_244).2: std::cell::Cell<std::option::Option<&S<'_>>>); // scope 22 at ui/drop/dropck_legal_cycles.rs:226:5: 226:33
        _250 = &_235;                    // scope 22 at ui/drop/dropck_legal_cycles.rs:226:26: 226:28
        _249 = <VecDeque<S<'_>> as Index<usize>>::index(move _250, const 1_usize) -> [return: bb112, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:226:26: 226:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:226:26: 226:31
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<S<'_>>, usize) -> &'a <VecDeque<S<'_>> as Index<usize>>::Output {<VecDeque<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb112: {
        _248 = _249;                     // scope 22 at ui/drop/dropck_legal_cycles.rs:226:25: 226:31
        _247 = _248;                     // scope 22 at ui/drop/dropck_legal_cycles.rs:226:25: 226:31
        _246 = Option::<&S<'_>>::Some(move _247); // scope 22 at ui/drop/dropck_legal_cycles.rs:226:20: 226:32
        _242 = Cell::<Option<&S<'_>>>::set(move _243, move _246) -> [return: bb113, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:226:5: 226:33
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:226:16: 226:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&S<'_>>>, Option<&S<'_>>) {Cell::<Option<&S<'_>>>::set}, val: Value(<ZST>) }
    }

    bb113: {
        _254 = &_235;                    // scope 22 at ui/drop/dropck_legal_cycles.rs:227:5: 227:7
        _253 = <VecDeque<S<'_>> as Index<usize>>::index(move _254, const 1_usize) -> [return: bb114, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:227:5: 227:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:227:5: 227:10
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<S<'_>>, usize) -> &'a <VecDeque<S<'_>> as Index<usize>>::Output {<VecDeque<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb114: {
        _252 = &((*_253).2: std::cell::Cell<std::option::Option<&S<'_>>>); // scope 22 at ui/drop/dropck_legal_cycles.rs:227:5: 227:33
        _259 = &_235;                    // scope 22 at ui/drop/dropck_legal_cycles.rs:227:26: 227:28
        _258 = <VecDeque<S<'_>> as Index<usize>>::index(move _259, const 0_usize) -> [return: bb115, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:227:26: 227:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:227:26: 227:31
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<S<'_>>, usize) -> &'a <VecDeque<S<'_>> as Index<usize>>::Output {<VecDeque<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb115: {
        _257 = _258;                     // scope 22 at ui/drop/dropck_legal_cycles.rs:227:25: 227:31
        _256 = _257;                     // scope 22 at ui/drop/dropck_legal_cycles.rs:227:25: 227:31
        _255 = Option::<&S<'_>>::Some(move _256); // scope 22 at ui/drop/dropck_legal_cycles.rs:227:20: 227:32
        _251 = Cell::<Option<&S<'_>>>::set(move _252, move _255) -> [return: bb116, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:227:5: 227:33
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:227:16: 227:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&S<'_>>>, Option<&S<'_>>) {Cell::<Option<&S<'_>>>::set}, val: Value(<ZST>) }
    }

    bb116: {
        _261 = &_1;                      // scope 22 at ui/drop/dropck_legal_cycles.rs:229:17: 229:31
        _260 = <ContextData as Clone>::clone(move _261) -> [return: bb117, unwind: bb374]; // scope 22 at ui/drop/dropck_legal_cycles.rs:229:17: 229:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:229:24: 229:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb117: {
        (_260.5: u32) = const 50_u32;    // scope 23 at ui/drop/dropck_legal_cycles.rs:230:5: 230:21
        _264 = (_260.6: bool);           // scope 23 at ui/drop/dropck_legal_cycles.rs:231:14: 231:31
        _263 = Not(move _264);           // scope 23 at ui/drop/dropck_legal_cycles.rs:231:13: 231:31
        _262 = Not(move _263);           // scope 23 at ui/drop/dropck_legal_cycles.rs:231:5: 231:32
        switchInt(move _262) -> [0: bb119, otherwise: bb118]; // scope 23 at ui/drop/dropck_legal_cycles.rs:231:5: 231:32
    }

    bb118: {
        _265 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb374; // scope 23 at ui/drop/dropck_legal_cycles.rs:231:5: 231:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:231:5: 231:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb119: {
        _269 = &_235;                    // scope 23 at ui/drop/dropck_legal_cycles.rs:232:5: 232:7
        _268 = <VecDeque<S<'_>> as Index<usize>>::index(move _269, const 0_usize) -> [return: bb120, unwind: bb374]; // scope 23 at ui/drop/dropck_legal_cycles.rs:232:5: 232:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:232:5: 232:10
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<S<'_>>, usize) -> &'a <VecDeque<S<'_>> as Index<usize>>::Output {<VecDeque<S<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb120: {
        _267 = _268;                     // scope 23 at ui/drop/dropck_legal_cycles.rs:232:5: 232:36
        _271 = &mut _260;                // scope 23 at ui/drop/dropck_legal_cycles.rs:232:29: 232:35
        _270 = &mut (*_271);             // scope 23 at ui/drop/dropck_legal_cycles.rs:232:29: 232:35
        _266 = <S<'_> as Children<'_>>::descend_into_self::<ContextData>(move _267, move _270) -> [return: bb121, unwind: bb374]; // scope 23 at ui/drop/dropck_legal_cycles.rs:232:5: 232:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:232:11: 232:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S<'_>, &'b mut ContextData) {<S<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb121: {
        _273 = (_260.6: bool);           // scope 23 at ui/drop/dropck_legal_cycles.rs:233:13: 233:30
        _272 = Not(move _273);           // scope 23 at ui/drop/dropck_legal_cycles.rs:233:5: 233:31
        switchInt(move _272) -> [0: bb123, otherwise: bb122]; // scope 23 at ui/drop/dropck_legal_cycles.rs:233:5: 233:31
    }

    bb122: {
        _274 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb374; // scope 23 at ui/drop/dropck_legal_cycles.rs:233:5: 233:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:233:5: 233:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb123: {
        _275 = VecDeque::<VD<'_>>::new() -> [return: bb124, unwind: bb374]; // scope 23 at ui/drop/dropck_legal_cycles.rs:238:32: 238:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:238:32: 238:45
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: fn() -> VecDeque<VD<'_>> {VecDeque::<VD<'_>>::new}, val: Value(<ZST>) }
    }

    bb124: {
        _277 = &mut _275;                // scope 24 at ui/drop/dropck_legal_cycles.rs:239:5: 239:36
        _278 = <VD<'_> as Named>::new(const "vd0") -> [return: bb125, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:239:18: 239:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:239:18: 239:28
                                         // + literal: Const { ty: fn(&'static str) -> VD<'_> {<VD<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:239:29: 239:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb125: {
        _276 = VecDeque::<VD<'_>>::push_back(move _277, move _278) -> [return: bb126, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:239:5: 239:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:239:8: 239:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut VecDeque<VD<'_>>, VD<'_>) {VecDeque::<VD<'_>>::push_back}, val: Value(<ZST>) }
    }

    bb126: {
        _280 = &mut _275;                // scope 24 at ui/drop/dropck_legal_cycles.rs:240:5: 240:36
        _281 = <VD<'_> as Named>::new(const "vd1") -> [return: bb127, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:240:18: 240:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:240:18: 240:28
                                         // + literal: Const { ty: fn(&'static str) -> VD<'_> {<VD<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:240:29: 240:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb127: {
        _279 = VecDeque::<VD<'_>>::push_back(move _280, move _281) -> [return: bb128, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:240:5: 240:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:240:8: 240:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut VecDeque<VD<'_>>, VD<'_>) {VecDeque::<VD<'_>>::push_back}, val: Value(<ZST>) }
    }

    bb128: {
        _285 = &_275;                    // scope 24 at ui/drop/dropck_legal_cycles.rs:241:5: 241:7
        _284 = <VecDeque<VD<'_>> as Index<usize>>::index(move _285, const 0_usize) -> [return: bb129, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:241:5: 241:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:241:5: 241:10
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<VD<'_>>, usize) -> &'a <VecDeque<VD<'_>> as Index<usize>>::Output {<VecDeque<VD<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb129: {
        _283 = &((*_284).2: std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>); // scope 24 at ui/drop/dropck_legal_cycles.rs:241:5: 241:34
        _288 = &_275;                    // scope 24 at ui/drop/dropck_legal_cycles.rs:241:29: 241:32
        _287 = _288;                     // scope 24 at ui/drop/dropck_legal_cycles.rs:241:29: 241:32
        _286 = Option::<&VecDeque<VD<'_>>>::Some(move _287); // scope 24 at ui/drop/dropck_legal_cycles.rs:241:24: 241:33
        _282 = Cell::<Option<&VecDeque<VD<'_>>>>::set(move _283, move _286) -> [return: bb130, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:241:5: 241:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:241:20: 241:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&VecDeque<VD<'_>>>>, Option<&VecDeque<VD<'_>>>) {Cell::<Option<&VecDeque<VD<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb130: {
        _292 = &_275;                    // scope 24 at ui/drop/dropck_legal_cycles.rs:242:5: 242:7
        _291 = <VecDeque<VD<'_>> as Index<usize>>::index(move _292, const 1_usize) -> [return: bb131, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:242:5: 242:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:242:5: 242:10
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<VD<'_>>, usize) -> &'a <VecDeque<VD<'_>> as Index<usize>>::Output {<VecDeque<VD<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb131: {
        _290 = &((*_291).2: std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>); // scope 24 at ui/drop/dropck_legal_cycles.rs:242:5: 242:34
        _295 = &_275;                    // scope 24 at ui/drop/dropck_legal_cycles.rs:242:29: 242:32
        _294 = _295;                     // scope 24 at ui/drop/dropck_legal_cycles.rs:242:29: 242:32
        _293 = Option::<&VecDeque<VD<'_>>>::Some(move _294); // scope 24 at ui/drop/dropck_legal_cycles.rs:242:24: 242:33
        _289 = Cell::<Option<&VecDeque<VD<'_>>>>::set(move _290, move _293) -> [return: bb132, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:242:5: 242:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:242:20: 242:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&VecDeque<VD<'_>>>>, Option<&VecDeque<VD<'_>>>) {Cell::<Option<&VecDeque<VD<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb132: {
        _297 = &_1;                      // scope 24 at ui/drop/dropck_legal_cycles.rs:244:17: 244:31
        _296 = <ContextData as Clone>::clone(move _297) -> [return: bb133, unwind: bb373]; // scope 24 at ui/drop/dropck_legal_cycles.rs:244:17: 244:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:244:24: 244:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb133: {
        (_296.5: u32) = const 60_u32;    // scope 25 at ui/drop/dropck_legal_cycles.rs:245:5: 245:21
        _300 = (_296.6: bool);           // scope 25 at ui/drop/dropck_legal_cycles.rs:246:14: 246:31
        _299 = Not(move _300);           // scope 25 at ui/drop/dropck_legal_cycles.rs:246:13: 246:31
        _298 = Not(move _299);           // scope 25 at ui/drop/dropck_legal_cycles.rs:246:5: 246:32
        switchInt(move _298) -> [0: bb135, otherwise: bb134]; // scope 25 at ui/drop/dropck_legal_cycles.rs:246:5: 246:32
    }

    bb134: {
        _301 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb373; // scope 25 at ui/drop/dropck_legal_cycles.rs:246:5: 246:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:246:5: 246:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb135: {
        _305 = &_275;                    // scope 25 at ui/drop/dropck_legal_cycles.rs:247:5: 247:7
        _304 = <VecDeque<VD<'_>> as Index<usize>>::index(move _305, const 0_usize) -> [return: bb136, unwind: bb373]; // scope 25 at ui/drop/dropck_legal_cycles.rs:247:5: 247:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:247:5: 247:10
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<VD<'_>>, usize) -> &'a <VecDeque<VD<'_>> as Index<usize>>::Output {<VecDeque<VD<'_>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb136: {
        _303 = _304;                     // scope 25 at ui/drop/dropck_legal_cycles.rs:247:5: 247:36
        _307 = &mut _296;                // scope 25 at ui/drop/dropck_legal_cycles.rs:247:29: 247:35
        _306 = &mut (*_307);             // scope 25 at ui/drop/dropck_legal_cycles.rs:247:29: 247:35
        _302 = <VD<'_> as Children<'_>>::descend_into_self::<ContextData>(move _303, move _306) -> [return: bb137, unwind: bb373]; // scope 25 at ui/drop/dropck_legal_cycles.rs:247:5: 247:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:247:11: 247:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a VD<'_>, &'b mut ContextData) {<VD<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb137: {
        _309 = (_296.6: bool);           // scope 25 at ui/drop/dropck_legal_cycles.rs:248:13: 248:30
        _308 = Not(move _309);           // scope 25 at ui/drop/dropck_legal_cycles.rs:248:5: 248:31
        switchInt(move _308) -> [0: bb139, otherwise: bb138]; // scope 25 at ui/drop/dropck_legal_cycles.rs:248:5: 248:31
    }

    bb138: {
        _310 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb373; // scope 25 at ui/drop/dropck_legal_cycles.rs:248:5: 248:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:248:5: 248:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb139: {
        _311 = HashMap::<usize, VM<'_>>::new() -> [return: bb140, unwind: bb373]; // scope 25 at ui/drop/dropck_legal_cycles.rs:253:38: 253:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:253:38: 253:50
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: fn() -> HashMap<usize, VM<'_>> {HashMap::<usize, VM<'_>>::new}, val: Value(<ZST>) }
    }

    bb140: {
        _313 = &mut _311;                // scope 26 at ui/drop/dropck_legal_cycles.rs:254:5: 254:36
        _314 = <VM<'_> as Named>::new(const "vm0") -> [return: bb141, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:254:18: 254:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:254:18: 254:28
                                         // + literal: Const { ty: fn(&'static str) -> VM<'_> {<VM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:254:29: 254:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb141: {
        _312 = HashMap::<usize, VM<'_>>::insert(move _313, const 0_usize, move _314) -> [return: bb142, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:254:5: 254:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:254:8: 254:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, VM<'_>>, usize, VM<'_>) -> Option<VM<'_>> {HashMap::<usize, VM<'_>>::insert}, val: Value(<ZST>) }
    }

    bb142: {
        _316 = &mut _311;                // scope 26 at ui/drop/dropck_legal_cycles.rs:255:5: 255:36
        _317 = <VM<'_> as Named>::new(const "vm1") -> [return: bb143, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:255:18: 255:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:255:18: 255:28
                                         // + literal: Const { ty: fn(&'static str) -> VM<'_> {<VM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:255:29: 255:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb143: {
        _315 = HashMap::<usize, VM<'_>>::insert(move _316, const 1_usize, move _317) -> [return: bb144, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:255:5: 255:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:255:8: 255:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<usize, VM<'_>>, usize, VM<'_>) -> Option<VM<'_>> {HashMap::<usize, VM<'_>>::insert}, val: Value(<ZST>) }
    }

    bb144: {
        _321 = &_311;                    // scope 26 at ui/drop/dropck_legal_cycles.rs:256:5: 256:7
        _708 = const _;                  // scope 26 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:256:8: 256:10
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[18])) }
        _323 = _708;                     // scope 26 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
        _322 = _323;                     // scope 26 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
        _320 = <HashMap<usize, VM<'_>> as Index<&usize>>::index(move _321, move _322) -> [return: bb145, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:256:5: 256:11
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:256:5: 256:11
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, VM<'_>>, &usize) -> &'a <HashMap<usize, VM<'_>> as Index<&usize>>::Output {<HashMap<usize, VM<'_>> as Index<&usize>>::index}, val: Value(<ZST>) }
    }

    bb145: {
        _319 = &((*_320).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>); // scope 26 at ui/drop/dropck_legal_cycles.rs:256:5: 256:35
        _326 = &_311;                    // scope 26 at ui/drop/dropck_legal_cycles.rs:256:30: 256:33
        _325 = _326;                     // scope 26 at ui/drop/dropck_legal_cycles.rs:256:30: 256:33
        _324 = Option::<&HashMap<usize, VM<'_>>>::Some(move _325); // scope 26 at ui/drop/dropck_legal_cycles.rs:256:25: 256:34
        _318 = Cell::<Option<&HashMap<usize, VM<'_>>>>::set(move _319, move _324) -> [return: bb146, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:256:5: 256:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:256:21: 256:24
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<usize, VM<'_>>>>, Option<&HashMap<usize, VM<'_>>>) {Cell::<Option<&HashMap<usize, VM<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb146: {
        _330 = &_311;                    // scope 26 at ui/drop/dropck_legal_cycles.rs:257:5: 257:7
        _707 = const _;                  // scope 26 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:257:8: 257:10
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[17])) }
        _332 = _707;                     // scope 26 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
        _331 = _332;                     // scope 26 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
        _329 = <HashMap<usize, VM<'_>> as Index<&usize>>::index(move _330, move _331) -> [return: bb147, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:257:5: 257:11
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:257:5: 257:11
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, VM<'_>>, &usize) -> &'a <HashMap<usize, VM<'_>> as Index<&usize>>::Output {<HashMap<usize, VM<'_>> as Index<&usize>>::index}, val: Value(<ZST>) }
    }

    bb147: {
        _328 = &((*_329).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>); // scope 26 at ui/drop/dropck_legal_cycles.rs:257:5: 257:35
        _335 = &_311;                    // scope 26 at ui/drop/dropck_legal_cycles.rs:257:30: 257:33
        _334 = _335;                     // scope 26 at ui/drop/dropck_legal_cycles.rs:257:30: 257:33
        _333 = Option::<&HashMap<usize, VM<'_>>>::Some(move _334); // scope 26 at ui/drop/dropck_legal_cycles.rs:257:25: 257:34
        _327 = Cell::<Option<&HashMap<usize, VM<'_>>>>::set(move _328, move _333) -> [return: bb148, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:257:5: 257:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:257:21: 257:24
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<usize, VM<'_>>>>, Option<&HashMap<usize, VM<'_>>>) {Cell::<Option<&HashMap<usize, VM<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb148: {
        _337 = &_1;                      // scope 26 at ui/drop/dropck_legal_cycles.rs:259:17: 259:31
        _336 = <ContextData as Clone>::clone(move _337) -> [return: bb149, unwind: bb372]; // scope 26 at ui/drop/dropck_legal_cycles.rs:259:17: 259:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:259:24: 259:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb149: {
        (_336.5: u32) = const 70_u32;    // scope 27 at ui/drop/dropck_legal_cycles.rs:260:5: 260:21
        _340 = (_336.6: bool);           // scope 27 at ui/drop/dropck_legal_cycles.rs:261:14: 261:31
        _339 = Not(move _340);           // scope 27 at ui/drop/dropck_legal_cycles.rs:261:13: 261:31
        _338 = Not(move _339);           // scope 27 at ui/drop/dropck_legal_cycles.rs:261:5: 261:32
        switchInt(move _338) -> [0: bb151, otherwise: bb150]; // scope 27 at ui/drop/dropck_legal_cycles.rs:261:5: 261:32
    }

    bb150: {
        _341 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb372; // scope 27 at ui/drop/dropck_legal_cycles.rs:261:5: 261:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:261:5: 261:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb151: {
        _345 = &_311;                    // scope 27 at ui/drop/dropck_legal_cycles.rs:262:5: 262:7
        _706 = const _;                  // scope 27 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:262:8: 262:10
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[16])) }
        _347 = _706;                     // scope 27 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
        _346 = _347;                     // scope 27 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
        _344 = <HashMap<usize, VM<'_>> as Index<&usize>>::index(move _345, move _346) -> [return: bb152, unwind: bb372]; // scope 27 at ui/drop/dropck_legal_cycles.rs:262:5: 262:11
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:262:5: 262:11
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, VM<'_>>, &usize) -> &'a <HashMap<usize, VM<'_>> as Index<&usize>>::Output {<HashMap<usize, VM<'_>> as Index<&usize>>::index}, val: Value(<ZST>) }
    }

    bb152: {
        _343 = _344;                     // scope 27 at ui/drop/dropck_legal_cycles.rs:262:5: 262:37
        _349 = &mut _336;                // scope 27 at ui/drop/dropck_legal_cycles.rs:262:30: 262:36
        _348 = &mut (*_349);             // scope 27 at ui/drop/dropck_legal_cycles.rs:262:30: 262:36
        _342 = <VM<'_> as Children<'_>>::descend_into_self::<ContextData>(move _343, move _348) -> [return: bb153, unwind: bb372]; // scope 27 at ui/drop/dropck_legal_cycles.rs:262:5: 262:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:262:12: 262:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a VM<'_>, &'b mut ContextData) {<VM<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb153: {
        _351 = (_336.6: bool);           // scope 27 at ui/drop/dropck_legal_cycles.rs:263:13: 263:30
        _350 = Not(move _351);           // scope 27 at ui/drop/dropck_legal_cycles.rs:263:5: 263:31
        switchInt(move _350) -> [0: bb155, otherwise: bb154]; // scope 27 at ui/drop/dropck_legal_cycles.rs:263:5: 263:31
    }

    bb154: {
        _352 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb372; // scope 27 at ui/drop/dropck_legal_cycles.rs:263:5: 263:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:263:5: 263:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb155: {
        _353 = LinkedList::<LL<'_>>::new() -> [return: bb156, unwind: bb372]; // scope 27 at ui/drop/dropck_legal_cycles.rs:268:34: 268:51
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:268:34: 268:49
                                         // + user_ty: UserType(32)
                                         // + literal: Const { ty: fn() -> LinkedList<LL<'_>> {LinkedList::<LL<'_>>::new}, val: Value(<ZST>) }
    }

    bb156: {
        _355 = &mut _353;                // scope 28 at ui/drop/dropck_legal_cycles.rs:269:5: 269:36
        _356 = <LL<'_> as Named>::new(const "ll0") -> [return: bb157, unwind: bb371]; // scope 28 at ui/drop/dropck_legal_cycles.rs:269:18: 269:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:269:18: 269:28
                                         // + literal: Const { ty: fn(&'static str) -> LL<'_> {<LL<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:269:29: 269:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb157: {
        _354 = LinkedList::<LL<'_>>::push_back(move _355, move _356) -> [return: bb158, unwind: bb371]; // scope 28 at ui/drop/dropck_legal_cycles.rs:269:5: 269:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:269:8: 269:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut LinkedList<LL<'_>>, LL<'_>) {LinkedList::<LL<'_>>::push_back}, val: Value(<ZST>) }
    }

    bb158: {
        _358 = &mut _353;                // scope 28 at ui/drop/dropck_legal_cycles.rs:270:5: 270:36
        _359 = <LL<'_> as Named>::new(const "ll1") -> [return: bb159, unwind: bb371]; // scope 28 at ui/drop/dropck_legal_cycles.rs:270:18: 270:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:270:18: 270:28
                                         // + literal: Const { ty: fn(&'static str) -> LL<'_> {<LL<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:270:29: 270:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb159: {
        _357 = LinkedList::<LL<'_>>::push_back(move _358, move _359) -> [return: bb160, unwind: bb371]; // scope 28 at ui/drop/dropck_legal_cycles.rs:270:5: 270:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:270:8: 270:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut LinkedList<LL<'_>>, LL<'_>) {LinkedList::<LL<'_>>::push_back}, val: Value(<ZST>) }
    }

    bb160: {
        _361 = &_353;                    // scope 28 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
        _360 = <&LinkedList<LL<'_>> as IntoIterator>::into_iter(move _361) -> [return: bb161, unwind: bb371]; // scope 28 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:271:14: 271:17
                                         // + literal: Const { ty: fn(&LinkedList<LL<'_>>) -> <&LinkedList<LL<'_>> as IntoIterator>::IntoIter {<&LinkedList<LL<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb161: {
        _362 = move _360;                // scope 28 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
        goto -> bb162;                   // scope 29 at ui/drop/dropck_legal_cycles.rs:271:5: 273:6
    }

    bb162: {
        _365 = &mut _362;                // scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
        _364 = &mut (*_365);             // scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
        _363 = <std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::next(move _364) -> [return: bb163, unwind: bb371]; // scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:271:14: 271:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::linked_list::Iter<'_, LL<'_>>) -> Option<<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::Item> {<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb163: {
        _366 = discriminant(_363);       // scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
        switchInt(move _366) -> [0: bb166, 1: bb164, otherwise: bb165]; // scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    }

    bb164: {
        _367 = ((_363 as Some).0: &LL<'_>); // scope 29 at ui/drop/dropck_legal_cycles.rs:271:9: 271:10
        _369 = &((*_367).2: std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>); // scope 30 at ui/drop/dropck_legal_cycles.rs:272:9: 272:34
        _372 = &_353;                    // scope 30 at ui/drop/dropck_legal_cycles.rs:272:29: 272:32
        _371 = _372;                     // scope 30 at ui/drop/dropck_legal_cycles.rs:272:29: 272:32
        _370 = Option::<&LinkedList<LL<'_>>>::Some(move _371); // scope 30 at ui/drop/dropck_legal_cycles.rs:272:24: 272:33
        _368 = Cell::<Option<&LinkedList<LL<'_>>>>::set(move _369, move _370) -> [return: bb413, unwind: bb371]; // scope 30 at ui/drop/dropck_legal_cycles.rs:272:9: 272:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:272:20: 272:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&LinkedList<LL<'_>>>>, Option<&LinkedList<LL<'_>>>) {Cell::<Option<&LinkedList<LL<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb165: {
        unreachable;                     // scope 29 at ui/drop/dropck_legal_cycles.rs:271:14: 271:17
    }

    bb166: {
        _374 = &_1;                      // scope 28 at ui/drop/dropck_legal_cycles.rs:275:17: 275:31
        _373 = <ContextData as Clone>::clone(move _374) -> [return: bb167, unwind: bb371]; // scope 28 at ui/drop/dropck_legal_cycles.rs:275:17: 275:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:275:24: 275:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb167: {
        (_373.5: u32) = const 80_u32;    // scope 31 at ui/drop/dropck_legal_cycles.rs:276:5: 276:21
        _376 = &_353;                    // scope 31 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
        _375 = <&LinkedList<LL<'_>> as IntoIterator>::into_iter(move _376) -> [return: bb168, unwind: bb371]; // scope 31 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:277:14: 277:17
                                         // + literal: Const { ty: fn(&LinkedList<LL<'_>>) -> <&LinkedList<LL<'_>> as IntoIterator>::IntoIter {<&LinkedList<LL<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb168: {
        _377 = move _375;                // scope 31 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
        goto -> bb169;                   // scope 32 at ui/drop/dropck_legal_cycles.rs:277:5: 283:6
    }

    bb169: {
        _380 = &mut _377;                // scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
        _379 = &mut (*_380);             // scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
        _378 = <std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::next(move _379) -> [return: bb170, unwind: bb371]; // scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:277:14: 277:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::linked_list::Iter<'_, LL<'_>>) -> Option<<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::Item> {<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb170: {
        _381 = discriminant(_378);       // scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
        switchInt(move _381) -> [0: bb173, 1: bb171, otherwise: bb172]; // scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    }

    bb171: {
        _382 = ((_378 as Some).0: &LL<'_>); // scope 32 at ui/drop/dropck_legal_cycles.rs:277:9: 277:10
        _383 = CheckedAdd((_373.5: u32), const 1_u32); // scope 33 at ui/drop/dropck_legal_cycles.rs:278:9: 278:25
        assert(!move (_383.1: bool), "attempt to compute `{} + {}`, which would overflow", (_373.5: u32), const 1_u32) -> [success: bb174, unwind: bb371]; // scope 33 at ui/drop/dropck_legal_cycles.rs:278:9: 278:25
    }

    bb172: {
        unreachable;                     // scope 32 at ui/drop/dropck_legal_cycles.rs:277:14: 277:17
    }

    bb173: {
        _391 = BinaryHeap::<BH<'_>>::new() -> [return: bb177, unwind: bb371]; // scope 31 at ui/drop/dropck_legal_cycles.rs:288:34: 288:51
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:288:34: 288:49
                                         // + user_ty: UserType(36)
                                         // + literal: Const { ty: fn() -> BinaryHeap<BH<'_>> {BinaryHeap::<BH<'_>>::new}, val: Value(<ZST>) }
    }

    bb174: {
        (_373.5: u32) = move (_383.0: u32); // scope 33 at ui/drop/dropck_legal_cycles.rs:278:9: 278:25
        (_373.6: bool) = const false;    // scope 33 at ui/drop/dropck_legal_cycles.rs:279:9: 279:34
        _385 = _382;                     // scope 33 at ui/drop/dropck_legal_cycles.rs:280:9: 280:36
        _387 = &mut _373;                // scope 33 at ui/drop/dropck_legal_cycles.rs:280:29: 280:35
        _386 = &mut (*_387);             // scope 33 at ui/drop/dropck_legal_cycles.rs:280:29: 280:35
        _384 = <LL<'_> as Children<'_>>::descend_into_self::<ContextData>(move _385, move _386) -> [return: bb175, unwind: bb371]; // scope 33 at ui/drop/dropck_legal_cycles.rs:280:9: 280:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:280:11: 280:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LL<'_>, &'b mut ContextData) {<LL<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb175: {
        _389 = (_373.6: bool);           // scope 33 at ui/drop/dropck_legal_cycles.rs:281:17: 281:34
        _388 = Not(move _389);           // scope 33 at ui/drop/dropck_legal_cycles.rs:281:9: 281:35
        switchInt(move _388) -> [0: bb169, otherwise: bb176]; // scope 33 at ui/drop/dropck_legal_cycles.rs:281:9: 281:35
    }

    bb176: {
        _390 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb371; // scope 33 at ui/drop/dropck_legal_cycles.rs:281:9: 281:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:281:9: 281:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb177: {
        _393 = &mut _391;                // scope 34 at ui/drop/dropck_legal_cycles.rs:289:5: 289:31
        _394 = <BH<'_> as Named>::new(const "bh0") -> [return: bb178, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:289:13: 289:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:289:13: 289:23
                                         // + literal: Const { ty: fn(&'static str) -> BH<'_> {<BH<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:289:24: 289:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb178: {
        _392 = BinaryHeap::<BH<'_>>::push(move _393, move _394) -> [return: bb179, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:289:5: 289:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:289:8: 289:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<BH<'_>>, BH<'_>) {BinaryHeap::<BH<'_>>::push}, val: Value(<ZST>) }
    }

    bb179: {
        _396 = &mut _391;                // scope 34 at ui/drop/dropck_legal_cycles.rs:290:5: 290:31
        _397 = <BH<'_> as Named>::new(const "bh1") -> [return: bb180, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:290:13: 290:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:290:13: 290:23
                                         // + literal: Const { ty: fn(&'static str) -> BH<'_> {<BH<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:290:24: 290:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb180: {
        _395 = BinaryHeap::<BH<'_>>::push(move _396, move _397) -> [return: bb181, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:290:5: 290:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:290:8: 290:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<BH<'_>>, BH<'_>) {BinaryHeap::<BH<'_>>::push}, val: Value(<ZST>) }
    }

    bb181: {
        _400 = &_391;                    // scope 34 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
        _399 = BinaryHeap::<BH<'_>>::iter(move _400) -> [return: bb182, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:291:17: 291:21
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<BH<'_>>) -> std::collections::binary_heap::Iter<'a, BH<'_>> {BinaryHeap::<BH<'_>>::iter}, val: Value(<ZST>) }
    }

    bb182: {
        _398 = <std::collections::binary_heap::Iter<'_, BH<'_>> as IntoIterator>::into_iter(move _399) -> [return: bb183, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                         // + literal: Const { ty: fn(std::collections::binary_heap::Iter<'_, BH<'_>>) -> <std::collections::binary_heap::Iter<'_, BH<'_>> as IntoIterator>::IntoIter {<std::collections::binary_heap::Iter<'_, BH<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb183: {
        _401 = move _398;                // scope 34 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
        goto -> bb184;                   // scope 35 at ui/drop/dropck_legal_cycles.rs:291:5: 293:6
    }

    bb184: {
        _404 = &mut _401;                // scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
        _403 = &mut (*_404);             // scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
        _402 = <std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::next(move _403) -> [return: bb185, unwind: bb370]; // scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:291:14: 291:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::binary_heap::Iter<'_, BH<'_>>) -> Option<<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::Item> {<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb185: {
        _405 = discriminant(_402);       // scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
        switchInt(move _405) -> [0: bb188, 1: bb186, otherwise: bb187]; // scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    }

    bb186: {
        _406 = ((_402 as Some).0: &BH<'_>); // scope 35 at ui/drop/dropck_legal_cycles.rs:291:9: 291:10
        _408 = &((*_406).2: std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>); // scope 36 at ui/drop/dropck_legal_cycles.rs:292:9: 292:34
        _411 = &_391;                    // scope 36 at ui/drop/dropck_legal_cycles.rs:292:29: 292:32
        _410 = _411;                     // scope 36 at ui/drop/dropck_legal_cycles.rs:292:29: 292:32
        _409 = Option::<&BinaryHeap<BH<'_>>>::Some(move _410); // scope 36 at ui/drop/dropck_legal_cycles.rs:292:24: 292:33
        _407 = Cell::<Option<&BinaryHeap<BH<'_>>>>::set(move _408, move _409) -> [return: bb414, unwind: bb370]; // scope 36 at ui/drop/dropck_legal_cycles.rs:292:9: 292:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:292:20: 292:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BinaryHeap<BH<'_>>>>, Option<&BinaryHeap<BH<'_>>>) {Cell::<Option<&BinaryHeap<BH<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb187: {
        unreachable;                     // scope 35 at ui/drop/dropck_legal_cycles.rs:291:14: 291:23
    }

    bb188: {
        _413 = &_1;                      // scope 34 at ui/drop/dropck_legal_cycles.rs:295:17: 295:31
        _412 = <ContextData as Clone>::clone(move _413) -> [return: bb189, unwind: bb370]; // scope 34 at ui/drop/dropck_legal_cycles.rs:295:17: 295:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:295:24: 295:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb189: {
        (_412.5: u32) = const 90_u32;    // scope 37 at ui/drop/dropck_legal_cycles.rs:296:5: 296:21
        _415 = &_391;                    // scope 37 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
        _414 = <&BinaryHeap<BH<'_>> as IntoIterator>::into_iter(move _415) -> [return: bb190, unwind: bb370]; // scope 37 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:297:14: 297:17
                                         // + literal: Const { ty: fn(&BinaryHeap<BH<'_>>) -> <&BinaryHeap<BH<'_>> as IntoIterator>::IntoIter {<&BinaryHeap<BH<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb190: {
        _416 = move _414;                // scope 37 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
        goto -> bb191;                   // scope 38 at ui/drop/dropck_legal_cycles.rs:297:5: 303:6
    }

    bb191: {
        _419 = &mut _416;                // scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
        _418 = &mut (*_419);             // scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
        _417 = <std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::next(move _418) -> [return: bb192, unwind: bb370]; // scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:297:14: 297:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::binary_heap::Iter<'_, BH<'_>>) -> Option<<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::Item> {<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb192: {
        _420 = discriminant(_417);       // scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
        switchInt(move _420) -> [0: bb195, 1: bb193, otherwise: bb194]; // scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    }

    bb193: {
        _421 = ((_417 as Some).0: &BH<'_>); // scope 38 at ui/drop/dropck_legal_cycles.rs:297:9: 297:10
        _422 = CheckedAdd((_412.5: u32), const 1_u32); // scope 39 at ui/drop/dropck_legal_cycles.rs:298:9: 298:25
        assert(!move (_422.1: bool), "attempt to compute `{} + {}`, which would overflow", (_412.5: u32), const 1_u32) -> [success: bb196, unwind: bb370]; // scope 39 at ui/drop/dropck_legal_cycles.rs:298:9: 298:25
    }

    bb194: {
        unreachable;                     // scope 38 at ui/drop/dropck_legal_cycles.rs:297:14: 297:17
    }

    bb195: {
        _430 = BTreeMap::<BTM<'_>, BTM<'_>>::new() -> [return: bb199, unwind: bb370]; // scope 37 at ui/drop/dropck_legal_cycles.rs:308:39: 308:54
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:308:39: 308:52
                                         // + user_ty: UserType(40)
                                         // + literal: Const { ty: fn() -> BTreeMap<BTM<'_>, BTM<'_>> {BTreeMap::<BTM<'_>, BTM<'_>>::new}, val: Value(<ZST>) }
    }

    bb196: {
        (_412.5: u32) = move (_422.0: u32); // scope 39 at ui/drop/dropck_legal_cycles.rs:298:9: 298:25
        (_412.6: bool) = const false;    // scope 39 at ui/drop/dropck_legal_cycles.rs:299:9: 299:34
        _424 = _421;                     // scope 39 at ui/drop/dropck_legal_cycles.rs:300:9: 300:36
        _426 = &mut _412;                // scope 39 at ui/drop/dropck_legal_cycles.rs:300:29: 300:35
        _425 = &mut (*_426);             // scope 39 at ui/drop/dropck_legal_cycles.rs:300:29: 300:35
        _423 = <BH<'_> as Children<'_>>::descend_into_self::<ContextData>(move _424, move _425) -> [return: bb197, unwind: bb370]; // scope 39 at ui/drop/dropck_legal_cycles.rs:300:9: 300:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:300:11: 300:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BH<'_>, &'b mut ContextData) {<BH<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb197: {
        _428 = (_412.6: bool);           // scope 39 at ui/drop/dropck_legal_cycles.rs:301:17: 301:34
        _427 = Not(move _428);           // scope 39 at ui/drop/dropck_legal_cycles.rs:301:9: 301:35
        switchInt(move _427) -> [0: bb191, otherwise: bb198]; // scope 39 at ui/drop/dropck_legal_cycles.rs:301:9: 301:35
    }

    bb198: {
        _429 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb370; // scope 39 at ui/drop/dropck_legal_cycles.rs:301:9: 301:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:301:9: 301:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb199: {
        _432 = &mut _430;                // scope 40 at ui/drop/dropck_legal_cycles.rs:309:5: 309:55
        _433 = <BTM<'_> as Named>::new(const "btk0") -> [return: bb200, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:309:16: 309:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:309:16: 309:26
                                         // + literal: Const { ty: fn(&'static str) -> BTM<'_> {<BTM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:309:27: 309:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb200: {
        _434 = <BTM<'_> as Named>::new(const "btv0") -> [return: bb201, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:309:36: 309:54
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:309:36: 309:46
                                         // + literal: Const { ty: fn(&'static str) -> BTM<'_> {<BTM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:309:47: 309:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb201: {
        _431 = BTreeMap::<BTM<'_>, BTM<'_>>::insert(move _432, move _433, move _434) -> [return: bb202, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:309:5: 309:55
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:309:9: 309:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<BTM<'_>, BTM<'_>>, BTM<'_>, BTM<'_>) -> Option<BTM<'_>> {BTreeMap::<BTM<'_>, BTM<'_>>::insert}, val: Value(<ZST>) }
    }

    bb202: {
        _436 = &mut _430;                // scope 40 at ui/drop/dropck_legal_cycles.rs:310:5: 310:55
        _437 = <BTM<'_> as Named>::new(const "btk1") -> [return: bb203, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:310:16: 310:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:310:16: 310:26
                                         // + literal: Const { ty: fn(&'static str) -> BTM<'_> {<BTM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:310:27: 310:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb203: {
        _438 = <BTM<'_> as Named>::new(const "btv1") -> [return: bb204, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:310:36: 310:54
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:310:36: 310:46
                                         // + literal: Const { ty: fn(&'static str) -> BTM<'_> {<BTM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:310:47: 310:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb204: {
        _435 = BTreeMap::<BTM<'_>, BTM<'_>>::insert(move _436, move _437, move _438) -> [return: bb205, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:310:5: 310:55
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:310:9: 310:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<BTM<'_>, BTM<'_>>, BTM<'_>, BTM<'_>) -> Option<BTM<'_>> {BTreeMap::<BTM<'_>, BTM<'_>>::insert}, val: Value(<ZST>) }
    }

    bb205: {
        _441 = &_430;                    // scope 40 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
        _440 = BTreeMap::<BTM<'_>, BTM<'_>>::iter(move _441) -> [return: bb206, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:311:23: 311:27
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<BTM<'_>, BTM<'_>>) -> std::collections::btree_map::Iter<'a, BTM<'_>, BTM<'_>> {BTreeMap::<BTM<'_>, BTM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb206: {
        _439 = <std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as IntoIterator>::into_iter(move _440) -> [return: bb207, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                         // + literal: Const { ty: fn(std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>) -> <std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as IntoIterator>::IntoIter {<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb207: {
        _442 = move _439;                // scope 40 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
        goto -> bb208;                   // scope 41 at ui/drop/dropck_legal_cycles.rs:311:5: 314:6
    }

    bb208: {
        _445 = &mut _442;                // scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
        _444 = &mut (*_445);             // scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
        _443 = <std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::next(move _444) -> [return: bb209, unwind: bb369]; // scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:311:19: 311:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>) -> Option<<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::Item> {<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb209: {
        _446 = discriminant(_443);       // scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
        switchInt(move _446) -> [0: bb212, 1: bb210, otherwise: bb211]; // scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    }

    bb210: {
        _447 = (((_443 as Some).0: (&BTM<'_>, &BTM<'_>)).0: &BTM<'_>); // scope 41 at ui/drop/dropck_legal_cycles.rs:311:10: 311:11
        _448 = (((_443 as Some).0: (&BTM<'_>, &BTM<'_>)).1: &BTM<'_>); // scope 41 at ui/drop/dropck_legal_cycles.rs:311:13: 311:14
        _450 = &((*_447).2: std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>); // scope 42 at ui/drop/dropck_legal_cycles.rs:312:9: 312:35
        _453 = &_430;                    // scope 42 at ui/drop/dropck_legal_cycles.rs:312:29: 312:33
        _452 = _453;                     // scope 42 at ui/drop/dropck_legal_cycles.rs:312:29: 312:33
        _451 = Option::<&BTreeMap<BTM<'_>, BTM<'_>>>::Some(move _452); // scope 42 at ui/drop/dropck_legal_cycles.rs:312:24: 312:34
        _449 = Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::set(move _450, move _451) -> [return: bb213, unwind: bb369]; // scope 42 at ui/drop/dropck_legal_cycles.rs:312:9: 312:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:312:20: 312:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>, Option<&BTreeMap<BTM<'_>, BTM<'_>>>) {Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb211: {
        unreachable;                     // scope 41 at ui/drop/dropck_legal_cycles.rs:311:19: 311:29
    }

    bb212: {
        _460 = &_1;                      // scope 40 at ui/drop/dropck_legal_cycles.rs:316:17: 316:31
        _459 = <ContextData as Clone>::clone(move _460) -> [return: bb214, unwind: bb369]; // scope 40 at ui/drop/dropck_legal_cycles.rs:316:17: 316:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:316:24: 316:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb213: {
        _455 = &((*_448).2: std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>); // scope 42 at ui/drop/dropck_legal_cycles.rs:313:9: 313:35
        _458 = &_430;                    // scope 42 at ui/drop/dropck_legal_cycles.rs:313:29: 313:33
        _457 = _458;                     // scope 42 at ui/drop/dropck_legal_cycles.rs:313:29: 313:33
        _456 = Option::<&BTreeMap<BTM<'_>, BTM<'_>>>::Some(move _457); // scope 42 at ui/drop/dropck_legal_cycles.rs:313:24: 313:34
        _454 = Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::set(move _455, move _456) -> [return: bb415, unwind: bb369]; // scope 42 at ui/drop/dropck_legal_cycles.rs:313:9: 313:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:313:20: 313:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>, Option<&BTreeMap<BTM<'_>, BTM<'_>>>) {Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb214: {
        (_459.5: u32) = const 100_u32;   // scope 43 at ui/drop/dropck_legal_cycles.rs:317:5: 317:22
        _462 = &_430;                    // scope 43 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
        _461 = <&BTreeMap<BTM<'_>, BTM<'_>> as IntoIterator>::into_iter(move _462) -> [return: bb215, unwind: bb369]; // scope 43 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:318:19: 318:23
                                         // + literal: Const { ty: fn(&BTreeMap<BTM<'_>, BTM<'_>>) -> <&BTreeMap<BTM<'_>, BTM<'_>> as IntoIterator>::IntoIter {<&BTreeMap<BTM<'_>, BTM<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb215: {
        _463 = move _461;                // scope 43 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
        goto -> bb216;                   // scope 44 at ui/drop/dropck_legal_cycles.rs:318:5: 324:6
    }

    bb216: {
        _466 = &mut _463;                // scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
        _465 = &mut (*_466);             // scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
        _464 = <std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::next(move _465) -> [return: bb217, unwind: bb369]; // scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:318:19: 318:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>) -> Option<<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::Item> {<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb217: {
        _467 = discriminant(_464);       // scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
        switchInt(move _467) -> [0: bb220, 1: bb218, otherwise: bb219]; // scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    }

    bb218: {
        _468 = (((_464 as Some).0: (&BTM<'_>, &BTM<'_>)).0: &BTM<'_>); // scope 44 at ui/drop/dropck_legal_cycles.rs:318:10: 318:11
        _469 = CheckedAdd((_459.5: u32), const 1_u32); // scope 45 at ui/drop/dropck_legal_cycles.rs:319:9: 319:25
        assert(!move (_469.1: bool), "attempt to compute `{} + {}`, which would overflow", (_459.5: u32), const 1_u32) -> [success: bb221, unwind: bb369]; // scope 45 at ui/drop/dropck_legal_cycles.rs:319:9: 319:25
    }

    bb219: {
        unreachable;                     // scope 44 at ui/drop/dropck_legal_cycles.rs:318:19: 318:23
    }

    bb220: {
        _477 = BTreeSet::<BTS<'_>>::new() -> [return: bb224, unwind: bb369]; // scope 43 at ui/drop/dropck_legal_cycles.rs:329:34: 329:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:329:34: 329:47
                                         // + user_ty: UserType(44)
                                         // + literal: Const { ty: fn() -> BTreeSet<BTS<'_>> {BTreeSet::<BTS<'_>>::new}, val: Value(<ZST>) }
    }

    bb221: {
        (_459.5: u32) = move (_469.0: u32); // scope 45 at ui/drop/dropck_legal_cycles.rs:319:9: 319:25
        (_459.6: bool) = const false;    // scope 45 at ui/drop/dropck_legal_cycles.rs:320:9: 320:34
        _471 = _468;                     // scope 45 at ui/drop/dropck_legal_cycles.rs:321:9: 321:36
        _473 = &mut _459;                // scope 45 at ui/drop/dropck_legal_cycles.rs:321:29: 321:35
        _472 = &mut (*_473);             // scope 45 at ui/drop/dropck_legal_cycles.rs:321:29: 321:35
        _470 = <BTM<'_> as Children<'_>>::descend_into_self::<ContextData>(move _471, move _472) -> [return: bb222, unwind: bb369]; // scope 45 at ui/drop/dropck_legal_cycles.rs:321:9: 321:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:321:11: 321:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTM<'_>, &'b mut ContextData) {<BTM<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb222: {
        _475 = (_459.6: bool);           // scope 45 at ui/drop/dropck_legal_cycles.rs:322:17: 322:34
        _474 = Not(move _475);           // scope 45 at ui/drop/dropck_legal_cycles.rs:322:9: 322:35
        switchInt(move _474) -> [0: bb216, otherwise: bb223]; // scope 45 at ui/drop/dropck_legal_cycles.rs:322:9: 322:35
    }

    bb223: {
        _476 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb369; // scope 45 at ui/drop/dropck_legal_cycles.rs:322:9: 322:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:322:9: 322:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb224: {
        _479 = &mut _477;                // scope 46 at ui/drop/dropck_legal_cycles.rs:330:5: 330:35
        _480 = <BTS<'_> as Named>::new(const "bts0") -> [return: bb225, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:330:16: 330:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:330:16: 330:26
                                         // + literal: Const { ty: fn(&'static str) -> BTS<'_> {<BTS<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:330:27: 330:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb225: {
        _478 = BTreeSet::<BTS<'_>>::insert(move _479, move _480) -> [return: bb226, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:330:5: 330:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:330:9: 330:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeSet<BTS<'_>>, BTS<'_>) -> bool {BTreeSet::<BTS<'_>>::insert}, val: Value(<ZST>) }
    }

    bb226: {
        _482 = &mut _477;                // scope 46 at ui/drop/dropck_legal_cycles.rs:331:5: 331:35
        _483 = <BTS<'_> as Named>::new(const "bts1") -> [return: bb227, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:331:16: 331:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:331:16: 331:26
                                         // + literal: Const { ty: fn(&'static str) -> BTS<'_> {<BTS<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:331:27: 331:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb227: {
        _481 = BTreeSet::<BTS<'_>>::insert(move _482, move _483) -> [return: bb228, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:331:5: 331:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:331:9: 331:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeSet<BTS<'_>>, BTS<'_>) -> bool {BTreeSet::<BTS<'_>>::insert}, val: Value(<ZST>) }
    }

    bb228: {
        _486 = &_477;                    // scope 46 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
        _485 = BTreeSet::<BTS<'_>>::iter(move _486) -> [return: bb229, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:332:18: 332:22
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeSet<BTS<'_>>) -> std::collections::btree_set::Iter<'a, BTS<'_>> {BTreeSet::<BTS<'_>>::iter}, val: Value(<ZST>) }
    }

    bb229: {
        _484 = <std::collections::btree_set::Iter<'_, BTS<'_>> as IntoIterator>::into_iter(move _485) -> [return: bb230, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                         // + literal: Const { ty: fn(std::collections::btree_set::Iter<'_, BTS<'_>>) -> <std::collections::btree_set::Iter<'_, BTS<'_>> as IntoIterator>::IntoIter {<std::collections::btree_set::Iter<'_, BTS<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb230: {
        _487 = move _484;                // scope 46 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
        goto -> bb231;                   // scope 47 at ui/drop/dropck_legal_cycles.rs:332:5: 334:6
    }

    bb231: {
        _490 = &mut _487;                // scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
        _489 = &mut (*_490);             // scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
        _488 = <std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::next(move _489) -> [return: bb232, unwind: bb368]; // scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:332:14: 332:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::btree_set::Iter<'_, BTS<'_>>) -> Option<<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::Item> {<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb232: {
        _491 = discriminant(_488);       // scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
        switchInt(move _491) -> [0: bb235, 1: bb233, otherwise: bb234]; // scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    }

    bb233: {
        _492 = ((_488 as Some).0: &BTS<'_>); // scope 47 at ui/drop/dropck_legal_cycles.rs:332:9: 332:10
        _494 = &((*_492).2: std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>); // scope 48 at ui/drop/dropck_legal_cycles.rs:333:9: 333:35
        _497 = &_477;                    // scope 48 at ui/drop/dropck_legal_cycles.rs:333:29: 333:33
        _496 = _497;                     // scope 48 at ui/drop/dropck_legal_cycles.rs:333:29: 333:33
        _495 = Option::<&BTreeSet<BTS<'_>>>::Some(move _496); // scope 48 at ui/drop/dropck_legal_cycles.rs:333:24: 333:34
        _493 = Cell::<Option<&BTreeSet<BTS<'_>>>>::set(move _494, move _495) -> [return: bb416, unwind: bb368]; // scope 48 at ui/drop/dropck_legal_cycles.rs:333:9: 333:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:333:20: 333:23
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeSet<BTS<'_>>>>, Option<&BTreeSet<BTS<'_>>>) {Cell::<Option<&BTreeSet<BTS<'_>>>>::set}, val: Value(<ZST>) }
    }

    bb234: {
        unreachable;                     // scope 47 at ui/drop/dropck_legal_cycles.rs:332:14: 332:24
    }

    bb235: {
        _499 = &_1;                      // scope 46 at ui/drop/dropck_legal_cycles.rs:336:17: 336:31
        _498 = <ContextData as Clone>::clone(move _499) -> [return: bb236, unwind: bb368]; // scope 46 at ui/drop/dropck_legal_cycles.rs:336:17: 336:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:336:24: 336:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb236: {
        (_498.5: u32) = const 100_u32;   // scope 49 at ui/drop/dropck_legal_cycles.rs:337:5: 337:22
        _501 = &_477;                    // scope 49 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
        _500 = <&BTreeSet<BTS<'_>> as IntoIterator>::into_iter(move _501) -> [return: bb237, unwind: bb368]; // scope 49 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:338:14: 338:18
                                         // + literal: Const { ty: fn(&BTreeSet<BTS<'_>>) -> <&BTreeSet<BTS<'_>> as IntoIterator>::IntoIter {<&BTreeSet<BTS<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb237: {
        _502 = move _500;                // scope 49 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
        goto -> bb238;                   // scope 50 at ui/drop/dropck_legal_cycles.rs:338:5: 344:6
    }

    bb238: {
        _505 = &mut _502;                // scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
        _504 = &mut (*_505);             // scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
        _503 = <std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::next(move _504) -> [return: bb239, unwind: bb368]; // scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:338:14: 338:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::btree_set::Iter<'_, BTS<'_>>) -> Option<<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::Item> {<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb239: {
        _506 = discriminant(_503);       // scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
        switchInt(move _506) -> [0: bb242, 1: bb240, otherwise: bb241]; // scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    }

    bb240: {
        _507 = ((_503 as Some).0: &BTS<'_>); // scope 50 at ui/drop/dropck_legal_cycles.rs:338:9: 338:10
        _508 = CheckedAdd((_498.5: u32), const 1_u32); // scope 51 at ui/drop/dropck_legal_cycles.rs:339:9: 339:25
        assert(!move (_508.1: bool), "attempt to compute `{} + {}`, which would overflow", (_498.5: u32), const 1_u32) -> [success: bb243, unwind: bb368]; // scope 51 at ui/drop/dropck_legal_cycles.rs:339:9: 339:25
    }

    bb241: {
        unreachable;                     // scope 50 at ui/drop/dropck_legal_cycles.rs:338:14: 338:18
    }

    bb242: {
        _519 = <RCRC<'_> as Named>::new(const "rcrc0") -> [return: bb381, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:350:11: 350:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:350:11: 350:20
                                         // + user_ty: UserType(49)
                                         // + literal: Const { ty: fn(&'static str) -> RCRC<'_> {<RCRC<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:350:21: 350:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb243: {
        (_498.5: u32) = move (_508.0: u32); // scope 51 at ui/drop/dropck_legal_cycles.rs:339:9: 339:25
        (_498.6: bool) = const false;    // scope 51 at ui/drop/dropck_legal_cycles.rs:340:9: 340:34
        _510 = _507;                     // scope 51 at ui/drop/dropck_legal_cycles.rs:341:9: 341:36
        _512 = &mut _498;                // scope 51 at ui/drop/dropck_legal_cycles.rs:341:29: 341:35
        _511 = &mut (*_512);             // scope 51 at ui/drop/dropck_legal_cycles.rs:341:29: 341:35
        _509 = <BTS<'_> as Children<'_>>::descend_into_self::<ContextData>(move _510, move _511) -> [return: bb244, unwind: bb368]; // scope 51 at ui/drop/dropck_legal_cycles.rs:341:9: 341:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:341:11: 341:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTS<'_>, &'b mut ContextData) {<BTS<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb244: {
        _514 = (_498.6: bool);           // scope 51 at ui/drop/dropck_legal_cycles.rs:342:17: 342:34
        _513 = Not(move _514);           // scope 51 at ui/drop/dropck_legal_cycles.rs:342:9: 342:35
        switchInt(move _513) -> [0: bb238, otherwise: bb245]; // scope 51 at ui/drop/dropck_legal_cycles.rs:342:9: 342:35
    }

    bb245: {
        _515 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb368; // scope 51 at ui/drop/dropck_legal_cycles.rs:342:9: 342:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:342:9: 342:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb246: {
        _719 = const true;               // scope 52 at ui/drop/dropck_legal_cycles.rs:351:5: 351:8
        _517 = move _520;                // scope 52 at ui/drop/dropck_legal_cycles.rs:351:5: 351:8
        _521 = <RCRC<'_> as Named>::new(const "rcrc2") -> [return: bb247, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:352:11: 352:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:352:11: 352:20
                                         // + user_ty: UserType(51)
                                         // + literal: Const { ty: fn(&'static str) -> RCRC<'_> {<RCRC<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:352:21: 352:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb247: {
        _718 = const true;               // scope 52 at ui/drop/dropck_legal_cycles.rs:352:5: 352:8
        _518 = move _521;                // scope 52 at ui/drop/dropck_legal_cycles.rs:352:5: 352:8
        _524 = &_517;                    // scope 52 at ui/drop/dropck_legal_cycles.rs:353:42: 353:46
        _523 = _524;                     // scope 52 at ui/drop/dropck_legal_cycles.rs:353:42: 353:46
        _522 = Option::<&RCRC<'_>>::Some(move _523); // scope 52 at ui/drop/dropck_legal_cycles.rs:353:37: 353:47
        _530 = &(_516.0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
        _529 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _530) -> [return: bb248, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:353:5: 353:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb248: {
        _528 = _529;                     // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
        _527 = RefCell::<RCRCData<'_>>::borrow_mut(move _528) -> [return: bb249, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:353:11: 353:21
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> RefMut<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb249: {
        _526 = &mut _527;                // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:23
        _525 = <RefMut<'_, RCRCData<'_>> as DerefMut>::deref_mut(move _526) -> [return: bb250, unwind: bb367]; // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:353:5: 353:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, RCRCData<'_>>) -> &'a mut <RefMut<'_, RCRCData<'_>> as Deref>::Target {<RefMut<'_, RCRCData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb250: {
        (((*_525).2: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>)).0: std::option::Option<&RCRC<'_>>) = move _522; // scope 52 at ui/drop/dropck_legal_cycles.rs:353:5: 353:47
        drop(_527) -> [return: bb251, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:353:47: 353:48
    }

    bb251: {
        _533 = &_518;                    // scope 52 at ui/drop/dropck_legal_cycles.rs:354:42: 354:46
        _532 = _533;                     // scope 52 at ui/drop/dropck_legal_cycles.rs:354:42: 354:46
        _531 = Option::<&RCRC<'_>>::Some(move _532); // scope 52 at ui/drop/dropck_legal_cycles.rs:354:37: 354:47
        _539 = &(_516.0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
        _538 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _539) -> [return: bb252, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:354:5: 354:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb252: {
        _537 = _538;                     // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
        _536 = RefCell::<RCRCData<'_>>::borrow_mut(move _537) -> [return: bb253, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:354:11: 354:21
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> RefMut<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb253: {
        _535 = &mut _536;                // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:23
        _534 = <RefMut<'_, RCRCData<'_>> as DerefMut>::deref_mut(move _535) -> [return: bb254, unwind: bb366]; // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:354:5: 354:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, RCRCData<'_>>) -> &'a mut <RefMut<'_, RCRCData<'_>> as Deref>::Target {<RefMut<'_, RCRCData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb254: {
        (((*_534).2: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>)).1: std::option::Option<&RCRC<'_>>) = move _531; // scope 52 at ui/drop/dropck_legal_cycles.rs:354:5: 354:47
        drop(_536) -> [return: bb255, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:354:47: 354:48
    }

    bb255: {
        _542 = &_516;                    // scope 52 at ui/drop/dropck_legal_cycles.rs:355:42: 355:46
        _541 = _542;                     // scope 52 at ui/drop/dropck_legal_cycles.rs:355:42: 355:46
        _540 = Option::<&RCRC<'_>>::Some(move _541); // scope 52 at ui/drop/dropck_legal_cycles.rs:355:37: 355:47
        _548 = &(_518.0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
        _547 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _548) -> [return: bb256, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:355:5: 355:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb256: {
        _546 = _547;                     // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
        _545 = RefCell::<RCRCData<'_>>::borrow_mut(move _546) -> [return: bb257, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:355:11: 355:21
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> RefMut<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb257: {
        _544 = &mut _545;                // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:23
        _543 = <RefMut<'_, RCRCData<'_>> as DerefMut>::deref_mut(move _544) -> [return: bb258, unwind: bb365]; // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:355:5: 355:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, RCRCData<'_>>) -> &'a mut <RefMut<'_, RCRCData<'_>> as Deref>::Target {<RefMut<'_, RCRCData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb258: {
        (((*_543).2: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>)).0: std::option::Option<&RCRC<'_>>) = move _540; // scope 52 at ui/drop/dropck_legal_cycles.rs:355:5: 355:47
        drop(_545) -> [return: bb259, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:355:47: 355:48
    }

    bb259: {
        _550 = &_1;                      // scope 52 at ui/drop/dropck_legal_cycles.rs:357:17: 357:31
        _549 = <ContextData as Clone>::clone(move _550) -> [return: bb260, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:357:17: 357:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:357:24: 357:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb260: {
        (_549.7: u64) = const 1_u64;     // scope 53 at ui/drop/dropck_legal_cycles.rs:358:5: 358:25
        (_549.5: u32) = const 110_u32;   // scope 53 at ui/drop/dropck_legal_cycles.rs:359:5: 359:22
        _553 = (_549.6: bool);           // scope 53 at ui/drop/dropck_legal_cycles.rs:360:14: 360:31
        _552 = Not(move _553);           // scope 53 at ui/drop/dropck_legal_cycles.rs:360:13: 360:31
        _551 = Not(move _552);           // scope 53 at ui/drop/dropck_legal_cycles.rs:360:5: 360:32
        switchInt(move _551) -> [0: bb262, otherwise: bb261]; // scope 53 at ui/drop/dropck_legal_cycles.rs:360:5: 360:32
    }

    bb261: {
        _554 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb404; // scope 53 at ui/drop/dropck_legal_cycles.rs:360:5: 360:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:360:5: 360:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb262: {
        _556 = &_516;                    // scope 53 at ui/drop/dropck_legal_cycles.rs:361:5: 361:34
        _558 = &mut _549;                // scope 53 at ui/drop/dropck_legal_cycles.rs:361:27: 361:33
        _557 = &mut (*_558);             // scope 53 at ui/drop/dropck_legal_cycles.rs:361:27: 361:33
        _555 = <RCRC<'_> as Children<'_>>::descend_into_self::<ContextData>(move _556, move _557) -> [return: bb263, unwind: bb404]; // scope 53 at ui/drop/dropck_legal_cycles.rs:361:5: 361:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:361:9: 361:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RCRC<'_>, &'b mut ContextData) {<RCRC<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb263: {
        _560 = (_549.6: bool);           // scope 53 at ui/drop/dropck_legal_cycles.rs:362:13: 362:30
        _559 = Not(move _560);           // scope 53 at ui/drop/dropck_legal_cycles.rs:362:5: 362:31
        switchInt(move _559) -> [0: bb265, otherwise: bb264]; // scope 53 at ui/drop/dropck_legal_cycles.rs:362:5: 362:31
    }

    bb264: {
        _561 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb404; // scope 53 at ui/drop/dropck_legal_cycles.rs:362:5: 362:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:362:5: 362:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb265: {
        _565 = <ARCRC<'_> as Named>::new(const "arcrc0") -> [return: bb382, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:384:12: 384:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:384:12: 384:22
                                         // + user_ty: UserType(55)
                                         // + literal: Const { ty: fn(&'static str) -> ARCRC<'_> {<ARCRC<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:384:23: 384:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb266: {
        _716 = const true;               // scope 54 at ui/drop/dropck_legal_cycles.rs:385:5: 385:9
        _563 = move _566;                // scope 54 at ui/drop/dropck_legal_cycles.rs:385:5: 385:9
        _567 = <ARCRC<'_> as Named>::new(const "arcrc2") -> [return: bb267, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:386:12: 386:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:386:12: 386:22
                                         // + user_ty: UserType(57)
                                         // + literal: Const { ty: fn(&'static str) -> ARCRC<'_> {<ARCRC<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:386:23: 386:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb267: {
        _715 = const true;               // scope 54 at ui/drop/dropck_legal_cycles.rs:386:5: 386:9
        _564 = move _567;                // scope 54 at ui/drop/dropck_legal_cycles.rs:386:5: 386:9
        _570 = &_563;                    // scope 54 at ui/drop/dropck_legal_cycles.rs:387:43: 387:48
        _569 = _570;                     // scope 54 at ui/drop/dropck_legal_cycles.rs:387:43: 387:48
        _568 = Option::<&ARCRC<'_>>::Some(move _569); // scope 54 at ui/drop/dropck_legal_cycles.rs:387:38: 387:49
        _576 = &(_562.0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
        _575 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _576) -> [return: bb268, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:387:5: 387:24
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb268: {
        _574 = _575;                     // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
        _573 = RefCell::<ARCRCData<'_>>::borrow_mut(move _574) -> [return: bb269, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:387:12: 387:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> RefMut<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb269: {
        _572 = &mut _573;                // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:24
        _571 = <RefMut<'_, ARCRCData<'_>> as DerefMut>::deref_mut(move _572) -> [return: bb270, unwind: bb364]; // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:33
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:387:5: 387:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, ARCRCData<'_>>) -> &'a mut <RefMut<'_, ARCRCData<'_>> as Deref>::Target {<RefMut<'_, ARCRCData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb270: {
        (((*_571).2: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>)).0: std::option::Option<&ARCRC<'_>>) = move _568; // scope 54 at ui/drop/dropck_legal_cycles.rs:387:5: 387:49
        drop(_573) -> [return: bb271, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:387:49: 387:50
    }

    bb271: {
        _579 = &_564;                    // scope 54 at ui/drop/dropck_legal_cycles.rs:388:43: 388:48
        _578 = _579;                     // scope 54 at ui/drop/dropck_legal_cycles.rs:388:43: 388:48
        _577 = Option::<&ARCRC<'_>>::Some(move _578); // scope 54 at ui/drop/dropck_legal_cycles.rs:388:38: 388:49
        _585 = &(_562.0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
        _584 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _585) -> [return: bb272, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:388:5: 388:24
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb272: {
        _583 = _584;                     // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
        _582 = RefCell::<ARCRCData<'_>>::borrow_mut(move _583) -> [return: bb273, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:388:12: 388:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> RefMut<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb273: {
        _581 = &mut _582;                // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:24
        _580 = <RefMut<'_, ARCRCData<'_>> as DerefMut>::deref_mut(move _581) -> [return: bb274, unwind: bb363]; // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:33
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:388:5: 388:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, ARCRCData<'_>>) -> &'a mut <RefMut<'_, ARCRCData<'_>> as Deref>::Target {<RefMut<'_, ARCRCData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb274: {
        (((*_580).2: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>)).1: std::option::Option<&ARCRC<'_>>) = move _577; // scope 54 at ui/drop/dropck_legal_cycles.rs:388:5: 388:49
        drop(_582) -> [return: bb275, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:388:49: 388:50
    }

    bb275: {
        _588 = &_562;                    // scope 54 at ui/drop/dropck_legal_cycles.rs:389:43: 389:48
        _587 = _588;                     // scope 54 at ui/drop/dropck_legal_cycles.rs:389:43: 389:48
        _586 = Option::<&ARCRC<'_>>::Some(move _587); // scope 54 at ui/drop/dropck_legal_cycles.rs:389:38: 389:49
        _594 = &(_564.0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
        _593 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _594) -> [return: bb276, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:389:5: 389:24
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb276: {
        _592 = _593;                     // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
        _591 = RefCell::<ARCRCData<'_>>::borrow_mut(move _592) -> [return: bb277, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:389:12: 389:22
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> RefMut<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb277: {
        _590 = &mut _591;                // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:24
        _589 = <RefMut<'_, ARCRCData<'_>> as DerefMut>::deref_mut(move _590) -> [return: bb278, unwind: bb362]; // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:33
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:389:5: 389:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, ARCRCData<'_>>) -> &'a mut <RefMut<'_, ARCRCData<'_>> as Deref>::Target {<RefMut<'_, ARCRCData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb278: {
        (((*_589).2: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>)).0: std::option::Option<&ARCRC<'_>>) = move _586; // scope 54 at ui/drop/dropck_legal_cycles.rs:389:5: 389:49
        drop(_591) -> [return: bb279, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:389:49: 389:50
    }

    bb279: {
        _596 = &_1;                      // scope 54 at ui/drop/dropck_legal_cycles.rs:391:17: 391:31
        _595 = <ContextData as Clone>::clone(move _596) -> [return: bb280, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:391:17: 391:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:391:24: 391:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb280: {
        (_595.7: u64) = const 1_u64;     // scope 55 at ui/drop/dropck_legal_cycles.rs:392:5: 392:25
        (_595.5: u32) = const 110_u32;   // scope 55 at ui/drop/dropck_legal_cycles.rs:393:5: 393:22
        _599 = (_595.6: bool);           // scope 55 at ui/drop/dropck_legal_cycles.rs:394:14: 394:31
        _598 = Not(move _599);           // scope 55 at ui/drop/dropck_legal_cycles.rs:394:13: 394:31
        _597 = Not(move _598);           // scope 55 at ui/drop/dropck_legal_cycles.rs:394:5: 394:32
        switchInt(move _597) -> [0: bb282, otherwise: bb281]; // scope 55 at ui/drop/dropck_legal_cycles.rs:394:5: 394:32
    }

    bb281: {
        _600 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb398; // scope 55 at ui/drop/dropck_legal_cycles.rs:394:5: 394:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:394:5: 394:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb282: {
        _602 = &_562;                    // scope 55 at ui/drop/dropck_legal_cycles.rs:395:5: 395:35
        _604 = &mut _595;                // scope 55 at ui/drop/dropck_legal_cycles.rs:395:28: 395:34
        _603 = &mut (*_604);             // scope 55 at ui/drop/dropck_legal_cycles.rs:395:28: 395:34
        _601 = <ARCRC<'_> as Children<'_>>::descend_into_self::<ContextData>(move _602, move _603) -> [return: bb283, unwind: bb398]; // scope 55 at ui/drop/dropck_legal_cycles.rs:395:5: 395:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:395:10: 395:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCRC<'_>, &'b mut ContextData) {<ARCRC<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb283: {
        _606 = (_595.6: bool);           // scope 55 at ui/drop/dropck_legal_cycles.rs:396:13: 396:30
        _605 = Not(move _606);           // scope 55 at ui/drop/dropck_legal_cycles.rs:396:5: 396:31
        switchInt(move _605) -> [0: bb285, otherwise: bb284]; // scope 55 at ui/drop/dropck_legal_cycles.rs:396:5: 396:31
    }

    bb284: {
        _607 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb398; // scope 55 at ui/drop/dropck_legal_cycles.rs:396:5: 396:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:396:5: 396:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb285: {
        _611 = <ARCRW<'_> as Named>::new(const "arcrw0") -> [return: bb383, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:402:12: 402:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:402:12: 402:22
                                         // + user_ty: UserType(61)
                                         // + literal: Const { ty: fn(&'static str) -> ARCRW<'_> {<ARCRW<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:402:23: 402:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb286: {
        _713 = const true;               // scope 56 at ui/drop/dropck_legal_cycles.rs:403:5: 403:9
        _609 = move _612;                // scope 56 at ui/drop/dropck_legal_cycles.rs:403:5: 403:9
        _613 = <ARCRW<'_> as Named>::new(const "arcrw2") -> [return: bb287, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:404:12: 404:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:404:12: 404:22
                                         // + user_ty: UserType(63)
                                         // + literal: Const { ty: fn(&'static str) -> ARCRW<'_> {<ARCRW<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:404:23: 404:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb287: {
        _712 = const true;               // scope 56 at ui/drop/dropck_legal_cycles.rs:404:5: 404:9
        _610 = move _613;                // scope 56 at ui/drop/dropck_legal_cycles.rs:404:5: 404:9
        _616 = &_609;                    // scope 56 at ui/drop/dropck_legal_cycles.rs:405:47: 405:52
        _615 = _616;                     // scope 56 at ui/drop/dropck_legal_cycles.rs:405:47: 405:52
        _614 = Option::<&ARCRW<'_>>::Some(move _615); // scope 56 at ui/drop/dropck_legal_cycles.rs:405:42: 405:53
        _623 = &(_608.0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
        _622 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _623) -> [return: bb288, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:405:5: 405:19
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb288: {
        _621 = _622;                     // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
        _620 = RwLock::<ARCRWData<'_>>::write(move _621) -> [return: bb289, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:19
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:405:12: 405:17
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockWriteGuard<'a, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::write}, val: Value(<ZST>) }
    }

    bb289: {
        _619 = Result::<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>::unwrap(move _620) -> [return: bb290, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:28
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:405:20: 405:26
                                         // + literal: Const { ty: fn(Result<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>) -> RwLockWriteGuard<'_, ARCRWData<'_>> {Result::<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb290: {
        _618 = &mut _619;                // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:28
        _617 = <RwLockWriteGuard<'_, ARCRWData<'_>> as DerefMut>::deref_mut(move _618) -> [return: bb291, unwind: bb361]; // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:405:5: 405:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut RwLockWriteGuard<'_, ARCRWData<'_>>) -> &'a mut <RwLockWriteGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockWriteGuard<'_, ARCRWData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb291: {
        (((*_617).2: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>)).0: std::option::Option<&ARCRW<'_>>) = move _614; // scope 56 at ui/drop/dropck_legal_cycles.rs:405:5: 405:53
        drop(_619) -> [return: bb292, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:405:53: 405:54
    }

    bb292: {
        _626 = &_610;                    // scope 56 at ui/drop/dropck_legal_cycles.rs:406:47: 406:52
        _625 = _626;                     // scope 56 at ui/drop/dropck_legal_cycles.rs:406:47: 406:52
        _624 = Option::<&ARCRW<'_>>::Some(move _625); // scope 56 at ui/drop/dropck_legal_cycles.rs:406:42: 406:53
        _633 = &(_608.0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
        _632 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _633) -> [return: bb293, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:406:5: 406:19
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb293: {
        _631 = _632;                     // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
        _630 = RwLock::<ARCRWData<'_>>::write(move _631) -> [return: bb294, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:19
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:406:12: 406:17
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockWriteGuard<'a, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::write}, val: Value(<ZST>) }
    }

    bb294: {
        _629 = Result::<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>::unwrap(move _630) -> [return: bb295, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:28
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:406:20: 406:26
                                         // + literal: Const { ty: fn(Result<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>) -> RwLockWriteGuard<'_, ARCRWData<'_>> {Result::<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb295: {
        _628 = &mut _629;                // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:28
        _627 = <RwLockWriteGuard<'_, ARCRWData<'_>> as DerefMut>::deref_mut(move _628) -> [return: bb296, unwind: bb360]; // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:406:5: 406:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut RwLockWriteGuard<'_, ARCRWData<'_>>) -> &'a mut <RwLockWriteGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockWriteGuard<'_, ARCRWData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb296: {
        (((*_627).2: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>)).1: std::option::Option<&ARCRW<'_>>) = move _624; // scope 56 at ui/drop/dropck_legal_cycles.rs:406:5: 406:53
        drop(_629) -> [return: bb297, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:406:53: 406:54
    }

    bb297: {
        _636 = &_608;                    // scope 56 at ui/drop/dropck_legal_cycles.rs:407:47: 407:52
        _635 = _636;                     // scope 56 at ui/drop/dropck_legal_cycles.rs:407:47: 407:52
        _634 = Option::<&ARCRW<'_>>::Some(move _635); // scope 56 at ui/drop/dropck_legal_cycles.rs:407:42: 407:53
        _643 = &(_610.0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
        _642 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _643) -> [return: bb298, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:407:5: 407:19
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb298: {
        _641 = _642;                     // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
        _640 = RwLock::<ARCRWData<'_>>::write(move _641) -> [return: bb299, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:19
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:407:12: 407:17
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockWriteGuard<'a, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::write}, val: Value(<ZST>) }
    }

    bb299: {
        _639 = Result::<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>::unwrap(move _640) -> [return: bb300, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:28
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:407:20: 407:26
                                         // + literal: Const { ty: fn(Result<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>) -> RwLockWriteGuard<'_, ARCRWData<'_>> {Result::<RwLockWriteGuard<'_, ARCRWData<'_>>, PoisonError<RwLockWriteGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb300: {
        _638 = &mut _639;                // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:28
        _637 = <RwLockWriteGuard<'_, ARCRWData<'_>> as DerefMut>::deref_mut(move _638) -> [return: bb301, unwind: bb359]; // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:407:5: 407:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut RwLockWriteGuard<'_, ARCRWData<'_>>) -> &'a mut <RwLockWriteGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockWriteGuard<'_, ARCRWData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb301: {
        (((*_637).2: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>)).0: std::option::Option<&ARCRW<'_>>) = move _634; // scope 56 at ui/drop/dropck_legal_cycles.rs:407:5: 407:53
        drop(_639) -> [return: bb302, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:407:53: 407:54
    }

    bb302: {
        _645 = &_1;                      // scope 56 at ui/drop/dropck_legal_cycles.rs:409:17: 409:31
        _644 = <ContextData as Clone>::clone(move _645) -> [return: bb303, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:409:17: 409:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:409:24: 409:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb303: {
        (_644.7: u64) = const 1_u64;     // scope 57 at ui/drop/dropck_legal_cycles.rs:410:5: 410:25
        (_644.5: u32) = const 110_u32;   // scope 57 at ui/drop/dropck_legal_cycles.rs:411:5: 411:22
        _648 = (_644.6: bool);           // scope 57 at ui/drop/dropck_legal_cycles.rs:412:14: 412:31
        _647 = Not(move _648);           // scope 57 at ui/drop/dropck_legal_cycles.rs:412:13: 412:31
        _646 = Not(move _647);           // scope 57 at ui/drop/dropck_legal_cycles.rs:412:5: 412:32
        switchInt(move _646) -> [0: bb305, otherwise: bb304]; // scope 57 at ui/drop/dropck_legal_cycles.rs:412:5: 412:32
    }

    bb304: {
        _649 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb392; // scope 57 at ui/drop/dropck_legal_cycles.rs:412:5: 412:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:412:5: 412:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb305: {
        _651 = &_608;                    // scope 57 at ui/drop/dropck_legal_cycles.rs:413:5: 413:35
        _653 = &mut _644;                // scope 57 at ui/drop/dropck_legal_cycles.rs:413:28: 413:34
        _652 = &mut (*_653);             // scope 57 at ui/drop/dropck_legal_cycles.rs:413:28: 413:34
        _650 = <ARCRW<'_> as Children<'_>>::descend_into_self::<ContextData>(move _651, move _652) -> [return: bb306, unwind: bb392]; // scope 57 at ui/drop/dropck_legal_cycles.rs:413:5: 413:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:413:10: 413:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCRW<'_>, &'b mut ContextData) {<ARCRW<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb306: {
        _655 = (_644.6: bool);           // scope 57 at ui/drop/dropck_legal_cycles.rs:414:13: 414:30
        _654 = Not(move _655);           // scope 57 at ui/drop/dropck_legal_cycles.rs:414:5: 414:31
        switchInt(move _654) -> [0: bb308, otherwise: bb307]; // scope 57 at ui/drop/dropck_legal_cycles.rs:414:5: 414:31
    }

    bb307: {
        _656 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb392; // scope 57 at ui/drop/dropck_legal_cycles.rs:414:5: 414:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:414:5: 414:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb308: {
        _660 = <ARCM<'_> as Named>::new(const "arcm0") -> [return: bb384, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:420:12: 420:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:420:12: 420:21
                                         // + user_ty: UserType(67)
                                         // + literal: Const { ty: fn(&'static str) -> ARCM<'_> {<ARCM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:420:22: 420:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb309: {
        _710 = const true;               // scope 58 at ui/drop/dropck_legal_cycles.rs:421:5: 421:9
        _658 = move _661;                // scope 58 at ui/drop/dropck_legal_cycles.rs:421:5: 421:9
        _662 = <ARCM<'_> as Named>::new(const "arcm2") -> [return: bb310, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:422:12: 422:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:422:12: 422:21
                                         // + user_ty: UserType(69)
                                         // + literal: Const { ty: fn(&'static str) -> ARCM<'_> {<ARCM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:422:22: 422:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb310: {
        _709 = const true;               // scope 58 at ui/drop/dropck_legal_cycles.rs:422:5: 422:9
        _659 = move _662;                // scope 58 at ui/drop/dropck_legal_cycles.rs:422:5: 422:9
        _665 = &_658;                    // scope 58 at ui/drop/dropck_legal_cycles.rs:423:46: 423:51
        _664 = _665;                     // scope 58 at ui/drop/dropck_legal_cycles.rs:423:46: 423:51
        _663 = Option::<&ARCM<'_>>::Some(move _664); // scope 58 at ui/drop/dropck_legal_cycles.rs:423:41: 423:52
        _672 = &(_657.1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
        _671 = <Arc<Mutex<ARCMData<'_>>> as Deref>::deref(move _672) -> [return: bb311, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:423:5: 423:18
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> &'a <Arc<Mutex<ARCMData<'_>>> as Deref>::Target {<Arc<Mutex<ARCMData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb311: {
        _670 = _671;                     // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
        _669 = Mutex::<ARCMData<'_>>::lock(move _670) -> [return: bb312, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:423:12: 423:16
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<ARCMData<'_>>) -> Result<MutexGuard<'a, ARCMData<'_>>, PoisonError<MutexGuard<'a, ARCMData<'_>>>> {Mutex::<ARCMData<'_>>::lock}, val: Value(<ZST>) }
    }

    bb312: {
        _668 = Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap(move _669) -> [return: bb313, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:423:19: 423:25
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>) -> MutexGuard<'_, ARCMData<'_>> {Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb313: {
        _667 = &mut _668;                // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:27
        _666 = <MutexGuard<'_, ARCMData<'_>> as DerefMut>::deref_mut(move _667) -> [return: bb314, unwind: bb358]; // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:423:5: 423:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut MutexGuard<'_, ARCMData<'_>>) -> &'a mut <MutexGuard<'_, ARCMData<'_>> as Deref>::Target {<MutexGuard<'_, ARCMData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb314: {
        (((*_666).1: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>)).0: std::option::Option<&ARCM<'_>>) = move _663; // scope 58 at ui/drop/dropck_legal_cycles.rs:423:5: 423:52
        drop(_668) -> [return: bb315, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:423:52: 423:53
    }

    bb315: {
        _675 = &_659;                    // scope 58 at ui/drop/dropck_legal_cycles.rs:424:46: 424:51
        _674 = _675;                     // scope 58 at ui/drop/dropck_legal_cycles.rs:424:46: 424:51
        _673 = Option::<&ARCM<'_>>::Some(move _674); // scope 58 at ui/drop/dropck_legal_cycles.rs:424:41: 424:52
        _682 = &(_657.1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
        _681 = <Arc<Mutex<ARCMData<'_>>> as Deref>::deref(move _682) -> [return: bb316, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:424:5: 424:18
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> &'a <Arc<Mutex<ARCMData<'_>>> as Deref>::Target {<Arc<Mutex<ARCMData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb316: {
        _680 = _681;                     // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
        _679 = Mutex::<ARCMData<'_>>::lock(move _680) -> [return: bb317, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:424:12: 424:16
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<ARCMData<'_>>) -> Result<MutexGuard<'a, ARCMData<'_>>, PoisonError<MutexGuard<'a, ARCMData<'_>>>> {Mutex::<ARCMData<'_>>::lock}, val: Value(<ZST>) }
    }

    bb317: {
        _678 = Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap(move _679) -> [return: bb318, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:424:19: 424:25
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>) -> MutexGuard<'_, ARCMData<'_>> {Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb318: {
        _677 = &mut _678;                // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:27
        _676 = <MutexGuard<'_, ARCMData<'_>> as DerefMut>::deref_mut(move _677) -> [return: bb319, unwind: bb357]; // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:424:5: 424:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut MutexGuard<'_, ARCMData<'_>>) -> &'a mut <MutexGuard<'_, ARCMData<'_>> as Deref>::Target {<MutexGuard<'_, ARCMData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb319: {
        (((*_676).1: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>)).1: std::option::Option<&ARCM<'_>>) = move _673; // scope 58 at ui/drop/dropck_legal_cycles.rs:424:5: 424:52
        drop(_678) -> [return: bb320, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:424:52: 424:53
    }

    bb320: {
        _685 = &_657;                    // scope 58 at ui/drop/dropck_legal_cycles.rs:425:46: 425:51
        _684 = _685;                     // scope 58 at ui/drop/dropck_legal_cycles.rs:425:46: 425:51
        _683 = Option::<&ARCM<'_>>::Some(move _684); // scope 58 at ui/drop/dropck_legal_cycles.rs:425:41: 425:52
        _692 = &(_659.1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
        _691 = <Arc<Mutex<ARCMData<'_>>> as Deref>::deref(move _692) -> [return: bb321, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:425:5: 425:18
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> &'a <Arc<Mutex<ARCMData<'_>>> as Deref>::Target {<Arc<Mutex<ARCMData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb321: {
        _690 = _691;                     // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
        _689 = Mutex::<ARCMData<'_>>::lock(move _690) -> [return: bb322, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:18
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:425:12: 425:16
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<ARCMData<'_>>) -> Result<MutexGuard<'a, ARCMData<'_>>, PoisonError<MutexGuard<'a, ARCMData<'_>>>> {Mutex::<ARCMData<'_>>::lock}, val: Value(<ZST>) }
    }

    bb322: {
        _688 = Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap(move _689) -> [return: bb323, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:425:19: 425:25
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>) -> MutexGuard<'_, ARCMData<'_>> {Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb323: {
        _687 = &mut _688;                // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:27
        _686 = <MutexGuard<'_, ARCMData<'_>> as DerefMut>::deref_mut(move _687) -> [return: bb324, unwind: bb356]; // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:425:5: 425:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut MutexGuard<'_, ARCMData<'_>>) -> &'a mut <MutexGuard<'_, ARCMData<'_>> as Deref>::Target {<MutexGuard<'_, ARCMData<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb324: {
        (((*_686).1: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>)).0: std::option::Option<&ARCM<'_>>) = move _683; // scope 58 at ui/drop/dropck_legal_cycles.rs:425:5: 425:52
        drop(_688) -> [return: bb325, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:425:52: 425:53
    }

    bb325: {
        _694 = &_1;                      // scope 58 at ui/drop/dropck_legal_cycles.rs:427:17: 427:31
        _693 = <ContextData as Clone>::clone(move _694) -> [return: bb326, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:427:17: 427:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:427:24: 427:29
                                         // + literal: Const { ty: for<'a> fn(&'a ContextData) -> ContextData {<ContextData as Clone>::clone}, val: Value(<ZST>) }
    }

    bb326: {
        (_693.7: u64) = const 1_u64;     // scope 59 at ui/drop/dropck_legal_cycles.rs:428:5: 428:25
        (_693.5: u32) = const 110_u32;   // scope 59 at ui/drop/dropck_legal_cycles.rs:429:5: 429:22
        _697 = (_693.6: bool);           // scope 59 at ui/drop/dropck_legal_cycles.rs:430:14: 430:31
        _696 = Not(move _697);           // scope 59 at ui/drop/dropck_legal_cycles.rs:430:13: 430:31
        _695 = Not(move _696);           // scope 59 at ui/drop/dropck_legal_cycles.rs:430:5: 430:32
        switchInt(move _695) -> [0: bb328, otherwise: bb327]; // scope 59 at ui/drop/dropck_legal_cycles.rs:430:5: 430:32
    }

    bb327: {
        _698 = core::panicking::panic(const "assertion failed: !c.saw_prev_marked") -> bb386; // scope 59 at ui/drop/dropck_legal_cycles.rs:430:5: 430:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:430:5: 430:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb328: {
        _700 = &_657;                    // scope 59 at ui/drop/dropck_legal_cycles.rs:431:5: 431:35
        _702 = &mut _693;                // scope 59 at ui/drop/dropck_legal_cycles.rs:431:28: 431:34
        _701 = &mut (*_702);             // scope 59 at ui/drop/dropck_legal_cycles.rs:431:28: 431:34
        _699 = <ARCM<'_> as Children<'_>>::descend_into_self::<ContextData>(move _700, move _701) -> [return: bb329, unwind: bb386]; // scope 59 at ui/drop/dropck_legal_cycles.rs:431:5: 431:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:431:10: 431:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCM<'_>, &'b mut ContextData) {<ARCM<'_> as Children<'_>>::descend_into_self::<ContextData>}, val: Value(<ZST>) }
    }

    bb329: {
        _704 = (_693.6: bool);           // scope 59 at ui/drop/dropck_legal_cycles.rs:432:13: 432:30
        _703 = Not(move _704);           // scope 59 at ui/drop/dropck_legal_cycles.rs:432:5: 432:31
        switchInt(move _703) -> [0: bb331, otherwise: bb330]; // scope 59 at ui/drop/dropck_legal_cycles.rs:432:5: 432:31
    }

    bb330: {
        _705 = core::panicking::panic(const "assertion failed: c.saw_prev_marked") -> bb386; // scope 59 at ui/drop/dropck_legal_cycles.rs:432:5: 432:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:432:5: 432:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb331: {
        drop(_659) -> [return: bb332, unwind: bb388]; // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb332: {
        _709 = const false;              // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_658) -> [return: bb333, unwind: bb390]; // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb333: {
        _710 = const false;              // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_657) -> [return: bb334, unwind: bb392]; // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb334: {
        _711 = const false;              // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_610) -> [return: bb335, unwind: bb394]; // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb335: {
        _712 = const false;              // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_609) -> [return: bb336, unwind: bb396]; // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb336: {
        _713 = const false;              // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_608) -> [return: bb337, unwind: bb398]; // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb337: {
        _714 = const false;              // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_564) -> [return: bb338, unwind: bb400]; // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb338: {
        _715 = const false;              // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_563) -> [return: bb339, unwind: bb402]; // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb339: {
        _716 = const false;              // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_562) -> [return: bb340, unwind: bb404]; // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb340: {
        _717 = const false;              // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_518) -> [return: bb341, unwind: bb406]; // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb341: {
        _718 = const false;              // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_517) -> [return: bb342, unwind: bb408]; // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb342: {
        _719 = const false;              // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_516) -> [return: bb343, unwind: bb368]; // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb343: {
        _720 = const false;              // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
        drop(_477) -> [return: bb344, unwind: bb369]; // scope 43 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb344: {
        drop(_430) -> [return: bb345, unwind: bb370]; // scope 37 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb345: {
        drop(_391) -> [return: bb346, unwind: bb371]; // scope 31 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb346: {
        drop(_353) -> [return: bb347, unwind: bb372]; // scope 27 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb347: {
        drop(_311) -> [return: bb348, unwind: bb373]; // scope 25 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb348: {
        drop(_275) -> [return: bb349, unwind: bb374]; // scope 23 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb349: {
        drop(_235) -> [return: bb350, unwind: bb375]; // scope 19 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb350: {
        drop(_187) -> [return: bb351, unwind: bb376]; // scope 13 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb351: {
        drop(_141) -> [return: bb352, unwind: bb377]; // scope 9 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb352: {
        drop(_113) -> [return: bb353, unwind: bb378]; // scope 7 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb353: {
        drop(_71) -> [return: bb354, unwind: bb379]; // scope 4 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb354: {
        drop(_2) -> bb355;               // scope 1 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb355: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:433:2: 433:2
    }

    bb356 (cleanup): {
        drop(_688) -> bb386;             // scope 58 at ui/drop/dropck_legal_cycles.rs:425:52: 425:53
    }

    bb357 (cleanup): {
        drop(_678) -> bb386;             // scope 58 at ui/drop/dropck_legal_cycles.rs:424:52: 424:53
    }

    bb358 (cleanup): {
        drop(_668) -> bb386;             // scope 58 at ui/drop/dropck_legal_cycles.rs:423:52: 423:53
    }

    bb359 (cleanup): {
        drop(_639) -> bb392;             // scope 56 at ui/drop/dropck_legal_cycles.rs:407:53: 407:54
    }

    bb360 (cleanup): {
        drop(_629) -> bb392;             // scope 56 at ui/drop/dropck_legal_cycles.rs:406:53: 406:54
    }

    bb361 (cleanup): {
        drop(_619) -> bb392;             // scope 56 at ui/drop/dropck_legal_cycles.rs:405:53: 405:54
    }

    bb362 (cleanup): {
        drop(_591) -> bb398;             // scope 54 at ui/drop/dropck_legal_cycles.rs:389:49: 389:50
    }

    bb363 (cleanup): {
        drop(_582) -> bb398;             // scope 54 at ui/drop/dropck_legal_cycles.rs:388:49: 388:50
    }

    bb364 (cleanup): {
        drop(_573) -> bb398;             // scope 54 at ui/drop/dropck_legal_cycles.rs:387:49: 387:50
    }

    bb365 (cleanup): {
        drop(_545) -> bb404;             // scope 52 at ui/drop/dropck_legal_cycles.rs:355:47: 355:48
    }

    bb366 (cleanup): {
        drop(_536) -> bb404;             // scope 52 at ui/drop/dropck_legal_cycles.rs:354:47: 354:48
    }

    bb367 (cleanup): {
        drop(_527) -> bb404;             // scope 52 at ui/drop/dropck_legal_cycles.rs:353:47: 353:48
    }

    bb368 (cleanup): {
        drop(_477) -> bb369;             // scope 43 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb369 (cleanup): {
        drop(_430) -> bb370;             // scope 37 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb370 (cleanup): {
        drop(_391) -> bb371;             // scope 31 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb371 (cleanup): {
        drop(_353) -> bb372;             // scope 27 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb372 (cleanup): {
        drop(_311) -> bb373;             // scope 25 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb373 (cleanup): {
        drop(_275) -> bb374;             // scope 23 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb374 (cleanup): {
        drop(_235) -> bb375;             // scope 19 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb375 (cleanup): {
        drop(_187) -> bb376;             // scope 13 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb376 (cleanup): {
        drop(_141) -> bb377;             // scope 9 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb377 (cleanup): {
        drop(_113) -> bb378;             // scope 7 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb378 (cleanup): {
        drop(_71) -> bb379;              // scope 4 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb379 (cleanup): {
        drop(_2) -> bb380;               // scope 1 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb380 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:117:1: 433:2
    }

    bb381: {
        _720 = const true;               // scope 52 at ui/drop/dropck_legal_cycles.rs:350:5: 350:8
        _516 = move _519;                // scope 52 at ui/drop/dropck_legal_cycles.rs:350:5: 350:8
        _520 = <RCRC<'_> as Named>::new(const "rcrc1") -> [return: bb246, unwind: bb404]; // scope 52 at ui/drop/dropck_legal_cycles.rs:351:11: 351:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:351:11: 351:20
                                         // + user_ty: UserType(50)
                                         // + literal: Const { ty: fn(&'static str) -> RCRC<'_> {<RCRC<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:351:21: 351:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb382: {
        _717 = const true;               // scope 54 at ui/drop/dropck_legal_cycles.rs:384:5: 384:9
        _562 = move _565;                // scope 54 at ui/drop/dropck_legal_cycles.rs:384:5: 384:9
        _566 = <ARCRC<'_> as Named>::new(const "arcrc1") -> [return: bb266, unwind: bb398]; // scope 54 at ui/drop/dropck_legal_cycles.rs:385:12: 385:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:385:12: 385:22
                                         // + user_ty: UserType(56)
                                         // + literal: Const { ty: fn(&'static str) -> ARCRC<'_> {<ARCRC<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:385:23: 385:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb383: {
        _714 = const true;               // scope 56 at ui/drop/dropck_legal_cycles.rs:402:5: 402:9
        _608 = move _611;                // scope 56 at ui/drop/dropck_legal_cycles.rs:402:5: 402:9
        _612 = <ARCRW<'_> as Named>::new(const "arcrw1") -> [return: bb286, unwind: bb392]; // scope 56 at ui/drop/dropck_legal_cycles.rs:403:12: 403:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:403:12: 403:22
                                         // + user_ty: UserType(62)
                                         // + literal: Const { ty: fn(&'static str) -> ARCRW<'_> {<ARCRW<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:403:23: 403:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb384: {
        _711 = const true;               // scope 58 at ui/drop/dropck_legal_cycles.rs:420:5: 420:9
        _657 = move _660;                // scope 58 at ui/drop/dropck_legal_cycles.rs:420:5: 420:9
        _661 = <ARCM<'_> as Named>::new(const "arcm1") -> [return: bb309, unwind: bb386]; // scope 58 at ui/drop/dropck_legal_cycles.rs:421:12: 421:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:421:12: 421:21
                                         // + user_ty: UserType(68)
                                         // + literal: Const { ty: fn(&'static str) -> ARCM<'_> {<ARCM<'_> as Named>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:421:22: 421:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb385 (cleanup): {
        drop(_659) -> bb388;             // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb386 (cleanup): {
        switchInt(_709) -> [0: bb388, otherwise: bb385]; // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb387 (cleanup): {
        drop(_658) -> bb390;             // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb388 (cleanup): {
        switchInt(_710) -> [0: bb390, otherwise: bb387]; // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb389 (cleanup): {
        drop(_657) -> bb392;             // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb390 (cleanup): {
        switchInt(_711) -> [0: bb392, otherwise: bb389]; // scope 57 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb391 (cleanup): {
        drop(_610) -> bb394;             // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb392 (cleanup): {
        switchInt(_712) -> [0: bb394, otherwise: bb391]; // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb393 (cleanup): {
        drop(_609) -> bb396;             // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb394 (cleanup): {
        switchInt(_713) -> [0: bb396, otherwise: bb393]; // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb395 (cleanup): {
        drop(_608) -> bb398;             // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb396 (cleanup): {
        switchInt(_714) -> [0: bb398, otherwise: bb395]; // scope 55 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb397 (cleanup): {
        drop(_564) -> bb400;             // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb398 (cleanup): {
        switchInt(_715) -> [0: bb400, otherwise: bb397]; // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb399 (cleanup): {
        drop(_563) -> bb402;             // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb400 (cleanup): {
        switchInt(_716) -> [0: bb402, otherwise: bb399]; // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb401 (cleanup): {
        drop(_562) -> bb404;             // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb402 (cleanup): {
        switchInt(_717) -> [0: bb404, otherwise: bb401]; // scope 53 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb403 (cleanup): {
        drop(_518) -> bb406;             // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb404 (cleanup): {
        switchInt(_718) -> [0: bb406, otherwise: bb403]; // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb405 (cleanup): {
        drop(_517) -> bb408;             // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb406 (cleanup): {
        switchInt(_719) -> [0: bb408, otherwise: bb405]; // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb407 (cleanup): {
        drop(_516) -> bb368;             // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb408 (cleanup): {
        switchInt(_720) -> [0: bb368, otherwise: bb407]; // scope 49 at ui/drop/dropck_legal_cycles.rs:433:1: 433:2
    }

    bb409 (cleanup): {
        _721 = alloc::alloc::box_free::<[S<'_>; 2], std::alloc::Global>(move (_77.0: std::ptr::Unique<[S<'_>; 2]>), move (_77.1: std::alloc::Global)) -> bb379; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[S<'_>; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[S<'_>; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb410 (cleanup): {
        _722 = alloc::alloc::box_free::<[S2<'_>; 4], std::alloc::Global>(move (_8.0: std::ptr::Unique<[S2<'_>; 4]>), move (_8.1: std::alloc::Global)) -> bb380; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[S2<'_>; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[S2<'_>; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb411: {
        goto -> bb63;                    // scope 12 at ui/drop/dropck_legal_cycles.rs:184:9: 184:32
    }

    bb412: {
        goto -> bb89;                    // scope 18 at ui/drop/dropck_legal_cycles.rs:205:9: 205:35
    }

    bb413: {
        goto -> bb162;                   // scope 30 at ui/drop/dropck_legal_cycles.rs:272:9: 272:34
    }

    bb414: {
        goto -> bb184;                   // scope 36 at ui/drop/dropck_legal_cycles.rs:292:9: 292:34
    }

    bb415: {
        goto -> bb208;                   // scope 42 at ui/drop/dropck_legal_cycles.rs:313:9: 313:35
    }

    bb416: {
        goto -> bb231;                   // scope 48 at ui/drop/dropck_legal_cycles.rs:333:9: 333:35
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[2] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[4] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[6] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[8] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[10] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[12] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[14] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[16] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
    let mut _1: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:262:9: 262:10

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:262:9: 262:10
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:262:8: 262:10
    }
}

promoted[17] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
    let mut _1: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:257:9: 257:10

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:257:9: 257:10
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:257:8: 257:10
    }
}

promoted[18] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
    let mut _1: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:256:9: 256:10

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:256:9: 256:10
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:256:8: 256:10
    }
}

promoted[19] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[21] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[22] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[23] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[24] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[25] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[26] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[27] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[28] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[29] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[30] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

promoted[31] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[32] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    let mut _1: [&str; 1];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28

    bb0: {
        _1 = [const "\n"];               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:134:24: 134:28
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:451:1: 451:25>::new(_1: &str) -> S<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:452:12: 452:16
    let mut _0: S<'_>;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:452:35: 452:40
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:453:19: 453:23
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:453:31: 453:43
    let mut _4: std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:453:51: 453:66
    let mut _5: std::option::Option<&S<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:453:61: 453:65

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:453:19: 453:23
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:453:31: 453:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:453:31: 453:40
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&S<'_>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:453:61: 453:65
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:453:61: 453:65
                                         // + literal: Const { ty: Option<&S<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&S<'_>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:453:51: 453:66
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:453:51: 453:60
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&S<'_>>) -> Cell<Option<&S<'_>>> {Cell::<Option<&S<'_>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = S::<'_> { name: move _2, mark: move _3, next: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:453:9: 453:68
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:454:6: 454:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:451:1: 451:25>::name(_1: &S<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:455:13: 455:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:455:13: 455:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:455:30: 455:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:455:41: 455:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:458:1: 458:31>::mark(_1: &S<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:459:13: 459:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:459:23: 459:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:459:29: 459:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:459:29: 459:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:459:29: 459:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:459:39: 459:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:459:46: 459:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:458:1: 458:31>::set_mark(_1: &S<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:460:17: 460:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:460:24: 460:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:460:35: 460:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:460:37: 460:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:460:37: 460:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:460:51: 460:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:460:37: 460:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:460:51: 460:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:460:37: 460:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:460:47: 460:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:460:59: 460:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:469:1: 469:26>::new(_1: &str) -> S2<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:470:12: 470:16
    let mut _0: S2<'_>;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:470:35: 470:41
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:471:20: 471:24
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:471:32: 471:44
    let mut _4: std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:471:52: 471:75
    let mut _5: (std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:471:62: 471:74

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:471:20: 471:24
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:471:32: 471:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:471:32: 471:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const (Option::<&S2<'_>>::None, Option::<&S2<'_>>::None); // scope 0 at ui/drop/dropck_legal_cycles.rs:471:62: 471:74
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:471:62: 471:74
                                         // + literal: Const { ty: (Option<&S2<'_>>, Option<&S2<'_>>), val: Value(ByRef(..)) }
        _4 = Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:471:52: 471:75
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:471:52: 471:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn((Option<&S2<'_>>, Option<&S2<'_>>)) -> Cell<(Option<&S2<'_>>, Option<&S2<'_>>)> {Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = S2::<'_> { name: move _2, mark: move _3, next: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:471:9: 471:77
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:472:6: 472:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:469:1: 469:26>::name(_1: &S2<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:473:13: 473:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:473:13: 473:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:473:30: 473:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:473:41: 473:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:476:1: 476:32>::mark(_1: &S2<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:477:13: 477:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:477:23: 477:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:477:29: 477:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:477:29: 477:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:477:29: 477:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:477:39: 477:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:477:46: 477:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:476:1: 476:32>::set_mark(_1: &S2<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:478:17: 478:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:478:24: 478:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:478:35: 478:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:479:9: 479:28
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:479:9: 479:28
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:479:23: 479:27

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:479:9: 479:28
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:479:23: 479:27
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:479:9: 479:28
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:479:19: 479:22
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:480:6: 480:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:489:1: 489:25>::new(_1: &str) -> V<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:490:12: 490:16
    let mut _0: V<'_>;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:490:35: 490:40
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:491:19: 491:23
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:492:19: 492:31
    let mut _4: std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _5: std::boxed::Box<[std::cell::Cell<std::option::Option<&V<'_>>>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[std::cell::Cell<std::option::Option<&V<'_>>>; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: std::boxed::Box<[std::cell::Cell<std::option::Option<&V<'_>>>; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:493:28: 493:43
    let mut _12: std::option::Option<&V<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:493:38: 493:42
    let mut _13: std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:493:45: 493:60
    let mut _14: std::option::Option<&V<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:493:55: 493:59
    let mut _15: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _16: *const [std::cell::Cell<std::option::Option<&V<'_>>>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:491:19: 491:23
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:492:19: 492:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:492:19: 492:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const 16_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = ShallowInitBox(move _9, [std::cell::Cell<std::option::Option<&V<'_>>>; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const Option::<&V<'_>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:493:38: 493:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:493:38: 493:42
                                         // + literal: Const { ty: Option<&V<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _11 = Cell::<Option<&V<'_>>>::new(move _12) -> [return: bb3, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:493:28: 493:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:493:28: 493:37
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Option<&V<'_>>) -> Cell<Option<&V<'_>>> {Cell::<Option<&V<'_>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = const Option::<&V<'_>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:493:55: 493:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:493:55: 493:59
                                         // + literal: Const { ty: Option<&V<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _13 = Cell::<Option<&V<'_>>>::new(move _14) -> [return: bb4, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:493:45: 493:60
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:493:45: 493:54
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Option<&V<'_>>) -> Cell<Option<&V<'_>>> {Cell::<Option<&V<'_>>>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = (((_10.0: std::ptr::Unique<[std::cell::Cell<std::option::Option<&V<'_>>>; 2]>).0: std::ptr::NonNull<[std::cell::Cell<std::option::Option<&V<'_>>>; 2]>).0: *const [std::cell::Cell<std::option::Option<&V<'_>>>; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_16) = [move _11, move _13];   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _6 = move _10;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = move _6 as std::boxed::Box<[std::cell::Cell<std::option::Option<&V<'_>>>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = slice::<impl [Cell<Option<&V<'_>>>]>::into_vec::<std::alloc::Global>(move _5) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[Cell<Option<&V<'_>>>]>) -> Vec<Cell<Option<&V<'_>>>> {slice::<impl [Cell<Option<&V<'_>>>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = V::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:491:9: 494:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:495:6: 495:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:490:5: 495:6
    }

    bb7 (cleanup): {
        _15 = alloc::alloc::box_free::<[Cell<Option<&V<'_>>>; 2], std::alloc::Global>(move (_10.0: std::ptr::Unique<[std::cell::Cell<std::option::Option<&V<'_>>>; 2]>), move (_10.1: std::alloc::Global)) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Cell<Option<&V<'_>>>; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[Cell<Option<&V<'_>>>; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:489:1: 489:25>::name(_1: &V<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:496:13: 496:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:496:13: 496:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:496:30: 496:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:496:41: 496:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:499:1: 499:31>::mark(_1: &V<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:500:13: 500:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:500:23: 500:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:500:29: 500:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:500:29: 500:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:500:29: 500:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:500:39: 500:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:500:46: 500:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:499:1: 499:31>::set_mark(_1: &V<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:501:17: 501:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:501:24: 501:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:501:35: 501:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:501:37: 501:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:501:37: 501:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:501:51: 501:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:501:37: 501:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:501:51: 501:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:501:37: 501:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:501:47: 501:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:501:59: 501:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:504:10: 504:12>::assert_receiver_is_total_eq(_1: &H<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:504:10: 504:12
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:504:10: 504:12
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:504:12: 504:12
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:511:1: 511:25>::new(_1: &str) -> H<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:512:12: 512:16
    let mut _0: H<'_>;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:512:35: 512:40
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:513:19: 513:23
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:513:31: 513:43
    let mut _4: std::cell::Cell<std::option::Option<&H<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:513:51: 513:66
    let mut _5: std::option::Option<&H<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:513:61: 513:65

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:513:19: 513:23
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:513:31: 513:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:513:31: 513:40
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&H<'_>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:513:61: 513:65
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:513:61: 513:65
                                         // + literal: Const { ty: Option<&H<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&H<'_>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:513:51: 513:66
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:513:51: 513:60
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&H<'_>>) -> Cell<Option<&H<'_>>> {Cell::<Option<&H<'_>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = H::<'_> { name: move _2, mark: move _3, next: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:513:9: 513:68
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:514:6: 514:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:511:1: 511:25>::name(_1: &H<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:515:13: 515:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:515:13: 515:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:515:30: 515:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:515:41: 515:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:518:1: 518:31>::mark(_1: &H<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:519:13: 519:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:519:23: 519:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:519:29: 519:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:519:29: 519:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:519:29: 519:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:519:39: 519:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:519:46: 519:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:518:1: 518:31>::set_mark(_1: &H<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:520:17: 520:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:520:24: 520:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:520:35: 520:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:520:37: 520:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:520:37: 520:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:520:51: 520:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:520:37: 520:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:520:51: 520:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:520:37: 520:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:520:47: 520:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:520:59: 520:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:523:1: 523:29>::eq(_1: &H<'_>, _2: &H<'_>) -> bool {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:524:11: 524:16
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:524:18: 524:21
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:524:34: 524:38
    let mut _3: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:525:9: 525:18
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:525:22: 525:30

    bb0: {
        _3 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:525:9: 525:18
        _4 = &((*_2).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:525:22: 525:30
        _0 = <&str as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:525:9: 525:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:525:9: 525:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:526:6: 526:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:529:1: 529:24>::hash(_1: &H<'_>, _2: &mut H) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:530:24: 530:29
    debug state => _2;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:530:31: 530:36
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:530:46: 530:46
    let mut _3: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:531:9: 531:30
    let mut _4: &mut H;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:531:24: 531:29
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:530:24: 530:29

    bb0: {
        _5 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:531:9: 531:30
        _3 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:531:9: 531:30
        _4 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:531:24: 531:29
        _0 = <str as Hash>::hash::<H>(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:531:9: 531:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:531:19: 531:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b mut H) {<str as Hash>::hash::<H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:532:6: 532:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:535:10: 535:12>::assert_receiver_is_total_eq(_1: &HM<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:535:10: 535:12
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:535:10: 535:12
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:535:12: 535:12
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:542:1: 542:26>::new(_1: &str) -> HM<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:543:12: 543:16
    let mut _0: HM<'_>;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:543:35: 543:41
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:544:20: 544:24
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:545:20: 545:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:546:24: 546:39
    let mut _5: std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:546:34: 546:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:544:20: 544:24
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:545:20: 545:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:545:20: 545:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&HashMap<HM<'_>, HM<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:546:34: 546:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:546:34: 546:38
                                         // + literal: Const { ty: Option<&HashMap<HM<'_>, HM<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:546:24: 546:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:546:24: 546:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&HashMap<HM<'_>, HM<'_>>>) -> Cell<Option<&HashMap<HM<'_>, HM<'_>>>> {Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = HM::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:544:9: 547:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:548:6: 548:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:542:1: 542:26>::name(_1: &HM<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:549:13: 549:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:549:13: 549:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:549:30: 549:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:549:41: 549:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:552:1: 552:32>::mark(_1: &HM<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:553:13: 553:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:553:23: 553:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:553:29: 553:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:553:29: 553:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:553:29: 553:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:553:39: 553:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:553:46: 553:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:552:1: 552:32>::set_mark(_1: &HM<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:554:17: 554:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:554:24: 554:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:554:35: 554:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:554:37: 554:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:554:37: 554:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:554:51: 554:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:554:37: 554:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:554:51: 554:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:554:37: 554:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:554:47: 554:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:554:59: 554:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:557:1: 557:30>::eq(_1: &HM<'_>, _2: &HM<'_>) -> bool {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:558:11: 558:16
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:558:18: 558:21
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:558:35: 558:39
    let mut _3: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:559:9: 559:18
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:559:22: 559:30

    bb0: {
        _3 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:559:9: 559:18
        _4 = &((*_2).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:559:22: 559:30
        _0 = <&str as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:559:9: 559:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:559:9: 559:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:560:6: 560:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:563:1: 563:25>::hash(_1: &HM<'_>, _2: &mut H) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:564:24: 564:29
    debug state => _2;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:564:31: 564:36
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:564:46: 564:46
    let mut _3: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:565:9: 565:30
    let mut _4: &mut H;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:565:24: 565:29
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:564:24: 564:29

    bb0: {
        _5 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:565:9: 565:30
        _3 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:565:9: 565:30
        _4 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:565:24: 565:29
        _0 = <str as Hash>::hash::<H>(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:565:9: 565:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:565:19: 565:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b mut H) {<str as Hash>::hash::<H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:566:6: 566:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:576:1: 576:26>::new(_1: &str) -> VD<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:577:12: 577:16
    let mut _0: VD<'_>;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:577:35: 577:41
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:578:20: 578:24
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:579:20: 579:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:580:24: 580:39
    let mut _5: std::option::Option<&std::collections::VecDeque<VD<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:580:34: 580:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:578:20: 578:24
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:579:20: 579:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:579:20: 579:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&VecDeque<VD<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:580:34: 580:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:580:34: 580:38
                                         // + literal: Const { ty: Option<&VecDeque<VD<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&VecDeque<VD<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:580:24: 580:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:580:24: 580:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&VecDeque<VD<'_>>>) -> Cell<Option<&VecDeque<VD<'_>>>> {Cell::<Option<&VecDeque<VD<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = VD::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:578:9: 581:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:582:6: 582:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:576:1: 576:26>::name(_1: &VD<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:583:13: 583:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:583:13: 583:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:583:30: 583:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:583:41: 583:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:586:1: 586:32>::mark(_1: &VD<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:587:13: 587:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:587:23: 587:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:587:29: 587:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:587:29: 587:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:587:29: 587:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:587:39: 587:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:587:46: 587:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:586:1: 586:32>::set_mark(_1: &VD<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:588:17: 588:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:588:24: 588:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:588:35: 588:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:588:37: 588:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:588:37: 588:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:588:51: 588:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:588:37: 588:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:588:51: 588:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:588:37: 588:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:588:47: 588:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:588:59: 588:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:597:1: 597:26>::new(_1: &str) -> VM<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:598:12: 598:16
    let mut _0: VM<'_>;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:598:35: 598:41
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:599:20: 599:24
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:600:20: 600:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:601:24: 601:39
    let mut _5: std::option::Option<&std::collections::HashMap<usize, VM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:601:34: 601:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:599:20: 599:24
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:600:20: 600:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:600:20: 600:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&HashMap<usize, VM<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:601:34: 601:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:601:34: 601:38
                                         // + literal: Const { ty: Option<&HashMap<usize, VM<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&HashMap<usize, VM<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:601:24: 601:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:601:24: 601:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&HashMap<usize, VM<'_>>>) -> Cell<Option<&HashMap<usize, VM<'_>>>> {Cell::<Option<&HashMap<usize, VM<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = VM::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:599:9: 602:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:603:6: 603:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:597:1: 597:26>::name(_1: &VM<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:604:13: 604:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:604:13: 604:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:604:30: 604:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:604:41: 604:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:607:1: 607:32>::mark(_1: &VM<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:608:13: 608:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:608:23: 608:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:608:29: 608:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:608:29: 608:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:608:29: 608:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:608:39: 608:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:608:46: 608:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:607:1: 607:32>::set_mark(_1: &VM<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:609:17: 609:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:609:24: 609:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:609:35: 609:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:609:37: 609:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:609:37: 609:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:609:51: 609:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:609:37: 609:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:609:51: 609:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:609:37: 609:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:609:47: 609:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:609:59: 609:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:618:1: 618:26>::new(_1: &str) -> LL<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:619:12: 619:16
    let mut _0: LL<'_>;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:619:35: 619:41
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:620:20: 620:24
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:621:20: 621:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:622:24: 622:39
    let mut _5: std::option::Option<&std::collections::LinkedList<LL<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:622:34: 622:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:620:20: 620:24
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:621:20: 621:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:621:20: 621:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&LinkedList<LL<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:622:34: 622:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:622:34: 622:38
                                         // + literal: Const { ty: Option<&LinkedList<LL<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&LinkedList<LL<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:622:24: 622:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:622:24: 622:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&LinkedList<LL<'_>>>) -> Cell<Option<&LinkedList<LL<'_>>>> {Cell::<Option<&LinkedList<LL<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = LL::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:620:9: 623:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:624:6: 624:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:618:1: 618:26>::name(_1: &LL<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:625:13: 625:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:625:13: 625:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:625:30: 625:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:625:41: 625:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:628:1: 628:32>::mark(_1: &LL<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:629:13: 629:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:629:23: 629:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:629:29: 629:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:629:29: 629:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:629:29: 629:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:629:39: 629:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:629:46: 629:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:628:1: 628:32>::set_mark(_1: &LL<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:630:17: 630:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:630:24: 630:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:630:35: 630:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:630:37: 630:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:630:37: 630:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:630:51: 630:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:630:37: 630:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:630:51: 630:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:630:37: 630:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:630:47: 630:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:630:59: 630:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:639:1: 639:26>::new(_1: &str) -> BH<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:640:12: 640:16
    let mut _0: BH<'_>;                  // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:640:35: 640:41
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:641:20: 641:24
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:642:20: 642:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:643:24: 643:39
    let mut _5: std::option::Option<&std::collections::BinaryHeap<BH<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:643:34: 643:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:641:20: 641:24
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:642:20: 642:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:642:20: 642:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&BinaryHeap<BH<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:643:34: 643:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:643:34: 643:38
                                         // + literal: Const { ty: Option<&BinaryHeap<BH<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&BinaryHeap<BH<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:643:24: 643:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:643:24: 643:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&BinaryHeap<BH<'_>>>) -> Cell<Option<&BinaryHeap<BH<'_>>>> {Cell::<Option<&BinaryHeap<BH<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = BH::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:641:9: 644:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:645:6: 645:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:639:1: 639:26>::name(_1: &BH<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:646:13: 646:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:646:13: 646:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:646:30: 646:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:646:41: 646:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:649:1: 649:32>::mark(_1: &BH<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:650:13: 650:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:650:23: 650:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:650:29: 650:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:650:29: 650:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:650:29: 650:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:650:39: 650:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:650:46: 650:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:649:1: 649:32>::set_mark(_1: &BH<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:651:17: 651:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:651:24: 651:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:651:35: 651:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:651:37: 651:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:651:37: 651:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:651:51: 651:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:651:37: 651:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:651:51: 651:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:651:37: 651:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:651:47: 651:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:651:59: 651:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:656:1: 656:30>::eq(_1: &BH<'_>, _2: &BH<'_>) -> bool {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:657:11: 657:16
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:657:18: 657:21
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:657:35: 657:39
    let mut _3: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:658:9: 658:18
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:658:22: 658:30

    bb0: {
        _3 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:658:9: 658:18
        _4 = &((*_2).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:658:22: 658:30
        _0 = <&str as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:658:9: 658:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:658:9: 658:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:659:6: 659:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:662:1: 662:31>::partial_cmp(_1: &BH<'_>, _2: &BH<'_>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:663:20: 663:25
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:663:27: 663:30
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:663:44: 663:60
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:664:14: 664:27
    let mut _4: &BH<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:664:14: 664:27
    let mut _5: &BH<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:664:23: 664:26

    bb0: {
        _4 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:664:14: 664:27
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:664:23: 664:26
        _3 = <BH<'_> as Ord>::cmp(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:664:14: 664:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:664:19: 664:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BH<'_>, &'b BH<'_>) -> std::cmp::Ordering {<BH<'_> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<std::cmp::Ordering>::Some(move _3); // scope 0 at ui/drop/dropck_legal_cycles.rs:664:9: 664:28
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:665:6: 665:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:668:1: 668:24>::cmp(_1: &BH<'_>, _2: &BH<'_>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:669:12: 669:17
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:669:19: 669:22
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:669:36: 669:44
    let mut _3: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:670:9: 670:32
    let mut _4: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:670:23: 670:31
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:669:12: 669:17
    let mut _6: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:669:19: 669:22

    bb0: {
        _5 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:670:9: 670:32
        _3 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:670:9: 670:32
        _6 = deref_copy ((*_2).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:670:23: 670:31
        _4 = _6;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:670:23: 670:31
        _0 = <str as Ord>::cmp(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:670:9: 670:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:670:19: 670:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> std::cmp::Ordering {<str as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:671:6: 671:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:680:1: 680:27>::new(_1: &str) -> BTM<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:681:12: 681:16
    let mut _0: BTM<'_>;                 // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:681:35: 681:42
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:682:21: 682:25
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:683:20: 683:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:684:24: 684:39
    let mut _5: std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:684:34: 684:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:682:21: 682:25
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:683:20: 683:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:683:20: 683:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&BTreeMap<BTM<'_>, BTM<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:684:34: 684:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:684:34: 684:38
                                         // + literal: Const { ty: Option<&BTreeMap<BTM<'_>, BTM<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:684:24: 684:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:684:24: 684:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&BTreeMap<BTM<'_>, BTM<'_>>>) -> Cell<Option<&BTreeMap<BTM<'_>, BTM<'_>>>> {Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = BTM::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:682:9: 685:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:686:6: 686:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:680:1: 680:27>::name(_1: &BTM<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:687:13: 687:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:687:13: 687:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:687:30: 687:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:687:41: 687:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:690:1: 690:33>::mark(_1: &BTM<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:691:13: 691:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:691:23: 691:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:691:29: 691:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:691:29: 691:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:691:29: 691:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:691:39: 691:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:691:46: 691:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:690:1: 690:33>::set_mark(_1: &BTM<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:692:17: 692:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:692:24: 692:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:692:35: 692:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:692:37: 692:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:692:37: 692:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:692:51: 692:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:692:37: 692:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:692:51: 692:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:692:37: 692:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:692:47: 692:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:692:59: 692:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:697:1: 697:31>::eq(_1: &BTM<'_>, _2: &BTM<'_>) -> bool {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:698:11: 698:16
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:698:18: 698:21
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:698:36: 698:40
    let mut _3: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:699:9: 699:18
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:699:22: 699:30

    bb0: {
        _3 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:699:9: 699:18
        _4 = &((*_2).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:699:22: 699:30
        _0 = <&str as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:699:9: 699:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:699:9: 699:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:700:6: 700:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:703:1: 703:32>::partial_cmp(_1: &BTM<'_>, _2: &BTM<'_>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:704:20: 704:25
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:704:27: 704:30
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:704:45: 704:61
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:705:14: 705:27
    let mut _4: &BTM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:705:14: 705:27
    let mut _5: &BTM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:705:23: 705:26

    bb0: {
        _4 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:705:14: 705:27
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:705:23: 705:26
        _3 = <BTM<'_> as Ord>::cmp(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:705:14: 705:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:705:19: 705:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTM<'_>, &'b BTM<'_>) -> std::cmp::Ordering {<BTM<'_> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<std::cmp::Ordering>::Some(move _3); // scope 0 at ui/drop/dropck_legal_cycles.rs:705:9: 705:28
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:706:6: 706:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:709:1: 709:25>::cmp(_1: &BTM<'_>, _2: &BTM<'_>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:710:12: 710:17
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:710:19: 710:22
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:710:37: 710:45
    let mut _3: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:711:9: 711:32
    let mut _4: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:711:23: 711:31
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:710:12: 710:17
    let mut _6: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:710:19: 710:22

    bb0: {
        _5 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:711:9: 711:32
        _3 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:711:9: 711:32
        _6 = deref_copy ((*_2).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:711:23: 711:31
        _4 = _6;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:711:23: 711:31
        _0 = <str as Ord>::cmp(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:711:9: 711:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:711:19: 711:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> std::cmp::Ordering {<str as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:712:6: 712:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:721:1: 721:27>::new(_1: &str) -> BTS<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:722:12: 722:16
    let mut _0: BTS<'_>;                 // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:722:35: 722:42
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:723:21: 723:25
    let mut _3: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:724:20: 724:32
    let mut _4: std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:725:24: 725:39
    let mut _5: std::option::Option<&std::collections::BTreeSet<BTS<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:725:34: 725:38

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:723:21: 723:25
        _3 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:724:20: 724:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:724:20: 724:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const Option::<&BTreeSet<BTS<'_>>>::None; // scope 0 at ui/drop/dropck_legal_cycles.rs:725:34: 725:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:725:34: 725:38
                                         // + literal: Const { ty: Option<&BTreeSet<BTS<'_>>>, val: Value(Scalar(0x0000000000000000)) }
        _4 = Cell::<Option<&BTreeSet<BTS<'_>>>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:725:24: 725:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:725:24: 725:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Option<&BTreeSet<BTS<'_>>>) -> Cell<Option<&BTreeSet<BTS<'_>>>> {Cell::<Option<&BTreeSet<BTS<'_>>>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = BTS::<'_> { name: move _2, mark: move _3, contents: move _4 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:723:9: 726:10
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:727:6: 727:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:721:1: 721:27>::name(_1: &BTS<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:728:13: 728:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:728:13: 728:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:728:30: 728:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:728:41: 728:41
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:731:1: 731:33>::mark(_1: &BTS<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:732:13: 732:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:732:23: 732:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:732:29: 732:44

    bb0: {
        _2 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:732:29: 732:44
        _0 = Cell::<u32>::get(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:732:29: 732:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:732:39: 732:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:732:46: 732:46
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:731:1: 731:33>::set_mark(_1: &BTS<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:733:17: 733:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:733:24: 733:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:733:35: 733:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:733:37: 733:56
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:733:37: 733:56
    let mut _5: u32;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:733:51: 733:55

    bb0: {
        _4 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:733:37: 733:56
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:733:51: 733:55
        _3 = Cell::<u32>::set(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:733:37: 733:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:733:47: 733:50
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:733:59: 733:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:738:1: 738:31>::eq(_1: &BTS<'_>, _2: &BTS<'_>) -> bool {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:739:11: 739:16
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:739:18: 739:21
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:739:36: 739:40
    let mut _3: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:740:9: 740:18
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:740:22: 740:30

    bb0: {
        _3 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:740:9: 740:18
        _4 = &((*_2).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:740:22: 740:30
        _0 = <&str as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:740:9: 740:30
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:740:9: 740:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:741:6: 741:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:744:1: 744:32>::partial_cmp(_1: &BTS<'_>, _2: &BTS<'_>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:745:20: 745:25
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:745:27: 745:30
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:745:45: 745:61
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/drop/dropck_legal_cycles.rs:746:14: 746:27
    let mut _4: &BTS<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:746:14: 746:27
    let mut _5: &BTS<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:746:23: 746:26

    bb0: {
        _4 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:746:14: 746:27
        _5 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:746:23: 746:26
        _3 = <BTS<'_> as Ord>::cmp(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:746:14: 746:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:746:19: 746:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTS<'_>, &'b BTS<'_>) -> std::cmp::Ordering {<BTS<'_> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<std::cmp::Ordering>::Some(move _3); // scope 0 at ui/drop/dropck_legal_cycles.rs:746:9: 746:28
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:747:6: 747:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:750:1: 750:25>::cmp(_1: &BTS<'_>, _2: &BTS<'_>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:751:12: 751:17
    debug rhs => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:751:19: 751:22
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:751:37: 751:45
    let mut _3: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:752:9: 752:32
    let mut _4: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:752:23: 752:31
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:751:12: 751:17
    let mut _6: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:751:19: 751:22

    bb0: {
        _5 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:752:9: 752:32
        _3 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:752:9: 752:32
        _6 = deref_copy ((*_2).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:752:23: 752:31
        _4 = _6;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:752:23: 752:31
        _0 = <str as Ord>::cmp(move _3, move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:752:9: 752:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:752:19: 752:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> std::cmp::Ordering {<str as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:753:6: 753:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:756:10: 756:15>::clone(_1: &RCRCData<'_>) -> RCRCData<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:756:10: 756:15
    let mut _0: RCRCData<'_>;            // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:756:10: 756:15
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
    let _3: &str;                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
    let _5: &&str;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:759:5: 759:20
    let mut _7: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:759:5: 759:20
    let _8: &std::cell::Cell<u32>;       // in scope 0 at ui/drop/dropck_legal_cycles.rs:759:5: 759:20
    let mut _9: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:760:5: 760:59
    let mut _10: &(std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:760:5: 760:59
    let _11: &(std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:760:5: 760:59

    bb0: {
        _5 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
        _4 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
        _3 = <&str as Clone>::clone(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:758:5: 758:23
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> &str {<&str as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:758:5: 758:23
        _8 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:759:5: 759:20
        _7 = _8;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:759:5: 759:20
        _6 = <Cell<u32> as Clone>::clone(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:759:5: 759:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:759:5: 759:20
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> Cell<u32> {<Cell<u32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &((*_1).2: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:760:5: 760:59
        _10 = _11;                       // scope 0 at ui/drop/dropck_legal_cycles.rs:760:5: 760:59
        _9 = <(Option<&RCRC<'_>>, Option<&RCRC<'_>>) as Clone>::clone(move _10) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:760:5: 760:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:760:5: 760:59
                                         // + literal: Const { ty: for<'a> fn(&'a (Option<&RCRC<'_>>, Option<&RCRC<'_>>)) -> (Option<&RCRC<'_>>, Option<&RCRC<'_>>) {<(Option<&RCRC<'_>>, Option<&RCRC<'_>>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = RCRCData::<'_> { name: move _2, mark: move _6, children: move _9 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:756:10: 756:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:756:15: 756:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:762:10: 762:15>::clone(_1: &RCRC<'_>) -> RCRC<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:762:10: 762:15
    let mut _0: RCRC<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:762:10: 762:15
    let mut _2: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:763:17: 763:42
    let mut _3: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:763:17: 763:42
    let _4: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:763:17: 763:42

    bb0: {
        _4 = &((*_1).0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:763:17: 763:42
        _3 = _4;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:763:17: 763:42
        _2 = <Rc<RefCell<RCRCData<'_>>> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:763:17: 763:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:763:17: 763:42
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> Rc<RefCell<RCRCData<'_>>> {<Rc<RefCell<RCRCData<'_>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = RCRC::<'_>(move _2);        // scope 0 at ui/drop/dropck_legal_cycles.rs:762:10: 762:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:762:15: 762:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:765:1: 765:28>::new(_1: &str) -> RCRC<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:766:12: 766:16
    let mut _0: RCRC<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:766:35: 766:39
    let mut _2: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:767:14: 768:72
    let mut _3: std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:767:22: 768:71
    let mut _4: RCRCData<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:767:35: 768:70
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:768:19: 768:23
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:768:31: 768:43
    let mut _7: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:768:55: 768:67

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:768:19: 768:23
        _6 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:768:31: 768:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:768:31: 768:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const (Option::<&RCRC<'_>>::None, Option::<&RCRC<'_>>::None); // scope 0 at ui/drop/dropck_legal_cycles.rs:768:55: 768:67
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:768:55: 768:67
                                         // + literal: Const { ty: (Option<&RCRC<'_>>, Option<&RCRC<'_>>), val: Value(ByRef(..)) }
        _4 = RCRCData::<'_> { name: move _5, mark: move _6, children: move _7 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:767:35: 768:70
        _3 = RefCell::<RCRCData<'_>>::new(move _4) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:767:22: 768:71
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:767:22: 767:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(RCRCData<'_>) -> RefCell<RCRCData<'_>> {RefCell::<RCRCData<'_>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Rc::<RefCell<RCRCData<'_>>>::new(move _3) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:767:14: 768:72
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:767:14: 767:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RefCell<RCRCData<'_>>) -> Rc<RefCell<RCRCData<'_>>> {Rc::<RefCell<RCRCData<'_>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = RCRC::<'_>(move _2);        // scope 0 at ui/drop/dropck_legal_cycles.rs:767:9: 768:73
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:769:6: 769:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:765:1: 765:28>::name(_1: &RCRC<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:13: 770:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:50
    let _2: &RCRCData<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:50
    let mut _3: &std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
    let _4: std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
    let mut _5: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
    let _6: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
    let mut _7: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45

    bb0: {
        _7 = &((*_1).0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
        _6 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _7) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:770:30: 770:45
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
        _4 = RefCell::<RCRCData<'_>>::borrow(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:770:37: 770:43
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> Ref<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:45
        _2 = <Ref<'_, RCRCData<'_>> as Deref>::deref(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:770:30: 770:50
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, RCRCData<'_>>) -> &'a <Ref<'_, RCRCData<'_>> as Deref>::Target {<Ref<'_, RCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = deref_copy ((*_2).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:770:30: 770:50
        drop(_4) -> bb4;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:770:51: 770:52
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:770:52: 770:52
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:770:51: 770:52
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:770:5: 770:52
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:773:1: 773:34>::mark(_1: &RCRC<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:13: 774:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:774:23: 774:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:55
    let _3: &RCRCData<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:49
    let mut _4: &std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
    let _5: std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
    let mut _6: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
    let _7: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
    let mut _8: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44

    bb0: {
        _8 = &((*_1).0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
        _7 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _8) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:774:29: 774:44
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
        _5 = RefCell::<RCRCData<'_>>::borrow(move _6) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:774:36: 774:42
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> Ref<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:44
        _3 = <Ref<'_, RCRCData<'_>> as Deref>::deref(move _4) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:774:29: 774:49
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, RCRCData<'_>>) -> &'a <Ref<'_, RCRCData<'_>> as Deref>::Target {<Ref<'_, RCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &((*_3).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:55
        _0 = Cell::<u32>::get(move _2) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:774:29: 774:55
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:774:50: 774:53
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> bb5;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:774:56: 774:57
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:774:57: 774:57
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:774:56: 774:57
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:774:5: 774:57
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:773:1: 773:34>::set_mark(_1: &RCRC<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:17: 775:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:24: 775:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:775:35: 775:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:67
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:67
    let _5: &RCRCData<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:57
    let mut _6: &std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
    let _7: std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
    let mut _8: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
    let _9: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
    let mut _10: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
    let mut _11: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:775:62: 775:66

    bb0: {
        _10 = &((*_1).0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
        _9 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _10) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:775:37: 775:52
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
        _7 = RefCell::<RCRCData<'_>>::borrow(move _8) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:775:44: 775:50
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> Ref<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:52
        _5 = <Ref<'_, RCRCData<'_>> as Deref>::deref(move _6) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:57
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:775:37: 775:57
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, RCRCData<'_>>) -> &'a <Ref<'_, RCRCData<'_>> as Deref>::Target {<Ref<'_, RCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &((*_5).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:67
        _11 = _2;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:775:62: 775:66
        _3 = Cell::<u32>::set(move _4, move _11) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:775:37: 775:67
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:775:58: 775:61
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:775:67: 775:68
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:775:70: 775:70
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:775:67: 775:68
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:775:5: 775:70
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:778:1: 778:35>::count_children(_1: &RCRC<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:779:23: 779:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:779:33: 779:38

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:779:41: 779:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:779:44: 779:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:778:1: 778:35>::descend_one_child(_1: &RCRC<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:780:29: 780:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:780:36: 780:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:780:53: 780:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:781:9: 781:9
    let _4: &(std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:13: 783:21
    let _5: &RCRCData<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:49
    let mut _6: &std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
    let _7: std::cell::Ref<'_, RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
    let mut _8: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
    let _9: &std::cell::RefCell<RCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
    let mut _10: &std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
    let mut _12: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:785:25: 785:36
    let _14: &RCRC<'_>;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:786:18: 786:76
    let mut _15: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:786:25: 786:36
    let mut _17: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let _18: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:790:9: 790:41
    let mut _19: &RCRC<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:790:9: 790:41
    let mut _20: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:790:33: 790:40
    scope 1 {
        debug children => _4;            // in scope 1 at ui/drop/dropck_legal_cycles.rs:783:13: 783:21
        let _11: &RCRC<'_>;              // in scope 1 at ui/drop/dropck_legal_cycles.rs:784:13: 784:18
        scope 2 {
            debug child => _11;          // in scope 2 at ui/drop/dropck_legal_cycles.rs:784:13: 784:18
        }
        scope 3 {
            debug child => _13;          // in scope 3 at ui/drop/dropck_legal_cycles.rs:785:30: 785:35
            let _13: &RCRC<'_>;          // in scope 3 at ui/drop/dropck_legal_cycles.rs:785:30: 785:35
        }
        scope 4 {
            debug child => _16;          // in scope 4 at ui/drop/dropck_legal_cycles.rs:786:30: 786:35
            let _16: &RCRC<'_>;          // in scope 4 at ui/drop/dropck_legal_cycles.rs:786:30: 786:35
        }
    }

    bb0: {
        _10 = &((*_1).0: std::rc::Rc<std::cell::RefCell<RCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
        _9 = <Rc<RefCell<RCRCData<'_>>> as Deref>::deref(move _10) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:783:25: 783:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<RCRCData<'_>>>) -> &'a <Rc<RefCell<RCRCData<'_>>> as Deref>::Target {<Rc<RefCell<RCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
        _7 = RefCell::<RCRCData<'_>>::borrow(move _8) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:783:32: 783:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<RCRCData<'_>>) -> Ref<'a, RCRCData<'_>> {RefCell::<RCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:40
        _5 = <Ref<'_, RCRCData<'_>> as Deref>::deref(move _6) -> [return: bb3, unwind: bb13]; // scope 0 at ui/drop/dropck_legal_cycles.rs:783:25: 783:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:783:25: 783:49
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, RCRCData<'_>>) -> &'a <Ref<'_, RCRCData<'_>> as Deref>::Target {<Ref<'_, RCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &((*_5).2: (std::option::Option<&RCRC<'_>>, std::option::Option<&RCRC<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:783:24: 783:49
        switchInt(_3) -> [0: bb5, 1: bb7, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:784:21: 784:32
    }

    bb4: {
        _17 = begin_panic::<&str>(const "bad children") -> bb13; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:787:25: 787:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _12 = discriminant(((*_4).0: std::option::Option<&RCRC<'_>>)); // scope 3 at ui/drop/dropck_legal_cycles.rs:785:25: 785:36
        switchInt(move _12) -> [1: bb6, otherwise: bb11]; // scope 3 at ui/drop/dropck_legal_cycles.rs:785:25: 785:36
    }

    bb6: {
        _13 = ((((*_4).0: std::option::Option<&RCRC<'_>>) as Some).0: &RCRC<'_>); // scope 3 at ui/drop/dropck_legal_cycles.rs:785:30: 785:35
        _11 = _13;                       // scope 3 at ui/drop/dropck_legal_cycles.rs:785:52: 785:57
        goto -> bb9;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:785:18: 785:76
    }

    bb7: {
        _15 = discriminant(((*_4).1: std::option::Option<&RCRC<'_>>)); // scope 4 at ui/drop/dropck_legal_cycles.rs:786:25: 786:36
        switchInt(move _15) -> [1: bb8, otherwise: bb11]; // scope 4 at ui/drop/dropck_legal_cycles.rs:786:25: 786:36
    }

    bb8: {
        _16 = ((((*_4).1: std::option::Option<&RCRC<'_>>) as Some).0: &RCRC<'_>); // scope 4 at ui/drop/dropck_legal_cycles.rs:786:30: 786:35
        _14 = _16;                       // scope 4 at ui/drop/dropck_legal_cycles.rs:786:52: 786:57
        _11 = _14;                       // scope 1 at ui/drop/dropck_legal_cycles.rs:786:18: 786:76
        goto -> bb9;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:786:75: 786:76
    }

    bb9: {
        _19 = _11;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:790:9: 790:41
        _20 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:790:33: 790:40
        _18 = <RCRC<'_> as Children<'_>>::descend_into_self::<C>(move _19, move _20) -> [return: bb10, unwind: bb13]; // scope 2 at ui/drop/dropck_legal_cycles.rs:790:9: 790:41
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:790:15: 790:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RCRC<'_>, &'b mut C) {<RCRC<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_7) -> bb12;                // scope 0 at ui/drop/dropck_legal_cycles.rs:791:5: 791:6
    }

    bb11: {
        drop(_7) -> bb12;                // scope 0 at ui/drop/dropck_legal_cycles.rs:791:5: 791:6
    }

    bb12: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:791:6: 791:6
    }

    bb13 (cleanup): {
        drop(_7) -> bb14;                // scope 0 at ui/drop/dropck_legal_cycles.rs:791:5: 791:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:780:5: 791:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:793:10: 793:15>::clone(_1: &ARCRCData<'_>) -> ARCRCData<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:793:10: 793:15
    let mut _0: ARCRCData<'_>;           // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:793:10: 793:15
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
    let _3: &str;                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
    let _5: &&str;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:796:5: 796:20
    let mut _7: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:796:5: 796:20
    let _8: &std::cell::Cell<u32>;       // in scope 0 at ui/drop/dropck_legal_cycles.rs:796:5: 796:20
    let mut _9: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:797:5: 797:61
    let mut _10: &(std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:797:5: 797:61
    let _11: &(std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:797:5: 797:61

    bb0: {
        _5 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
        _4 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
        _3 = <&str as Clone>::clone(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:795:5: 795:23
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> &str {<&str as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:795:5: 795:23
        _8 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:796:5: 796:20
        _7 = _8;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:796:5: 796:20
        _6 = <Cell<u32> as Clone>::clone(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:796:5: 796:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:796:5: 796:20
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> Cell<u32> {<Cell<u32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &((*_1).2: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:797:5: 797:61
        _10 = _11;                       // scope 0 at ui/drop/dropck_legal_cycles.rs:797:5: 797:61
        _9 = <(Option<&ARCRC<'_>>, Option<&ARCRC<'_>>) as Clone>::clone(move _10) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:797:5: 797:61
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:797:5: 797:61
                                         // + literal: Const { ty: for<'a> fn(&'a (Option<&ARCRC<'_>>, Option<&ARCRC<'_>>)) -> (Option<&ARCRC<'_>>, Option<&ARCRC<'_>>) {<(Option<&ARCRC<'_>>, Option<&ARCRC<'_>>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = ARCRCData::<'_> { name: move _2, mark: move _6, children: move _9 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:793:10: 793:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:793:15: 793:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:799:10: 799:15>::clone(_1: &ARCRC<'_>) -> ARCRC<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:799:10: 799:15
    let mut _0: ARCRC<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:799:10: 799:15
    let mut _2: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:800:18: 800:45
    let mut _3: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:800:18: 800:45
    let _4: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:800:18: 800:45

    bb0: {
        _4 = &((*_1).0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:800:18: 800:45
        _3 = _4;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:800:18: 800:45
        _2 = <Arc<RefCell<ARCRCData<'_>>> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:800:18: 800:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:800:18: 800:45
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> Arc<RefCell<ARCRCData<'_>>> {<Arc<RefCell<ARCRCData<'_>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = ARCRC::<'_>(move _2);       // scope 0 at ui/drop/dropck_legal_cycles.rs:799:10: 799:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:799:15: 799:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:802:1: 802:29>::new(_1: &str) -> ARCRC<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:803:12: 803:16
    let mut _0: ARCRC<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:803:35: 803:39
    let mut _2: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:804:15: 805:72
    let mut _3: std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:804:24: 805:71
    let mut _4: ARCRCData<'_>;           // in scope 0 at ui/drop/dropck_legal_cycles.rs:804:37: 805:70
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:805:19: 805:23
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:805:31: 805:43
    let mut _7: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:805:55: 805:67

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:805:19: 805:23
        _6 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:805:31: 805:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:805:31: 805:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const (Option::<&ARCRC<'_>>::None, Option::<&ARCRC<'_>>::None); // scope 0 at ui/drop/dropck_legal_cycles.rs:805:55: 805:67
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:805:55: 805:67
                                         // + literal: Const { ty: (Option<&ARCRC<'_>>, Option<&ARCRC<'_>>), val: Value(ByRef(..)) }
        _4 = ARCRCData::<'_> { name: move _5, mark: move _6, children: move _7 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:804:37: 805:70
        _3 = RefCell::<ARCRCData<'_>>::new(move _4) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:804:24: 805:71
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:804:24: 804:36
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(ARCRCData<'_>) -> RefCell<ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Arc::<RefCell<ARCRCData<'_>>>::new(move _3) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:804:15: 805:72
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:804:15: 804:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RefCell<ARCRCData<'_>>) -> Arc<RefCell<ARCRCData<'_>>> {Arc::<RefCell<ARCRCData<'_>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = ARCRC::<'_>(move _2);       // scope 0 at ui/drop/dropck_legal_cycles.rs:804:9: 805:73
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:806:6: 806:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:802:1: 802:29>::name(_1: &ARCRC<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:13: 807:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:50
    let _2: &ARCRCData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:50
    let mut _3: &std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
    let _4: std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
    let mut _5: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
    let _6: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
    let mut _7: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45

    bb0: {
        _7 = &((*_1).0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
        _6 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _7) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:807:30: 807:45
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
        _4 = RefCell::<ARCRCData<'_>>::borrow(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:807:37: 807:43
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> Ref<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:45
        _2 = <Ref<'_, ARCRCData<'_>> as Deref>::deref(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:807:30: 807:50
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, ARCRCData<'_>>) -> &'a <Ref<'_, ARCRCData<'_>> as Deref>::Target {<Ref<'_, ARCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = deref_copy ((*_2).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:807:30: 807:50
        drop(_4) -> bb4;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:807:51: 807:52
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:807:52: 807:52
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:807:51: 807:52
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:807:5: 807:52
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:810:1: 810:35>::mark(_1: &ARCRC<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:13: 811:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:811:23: 811:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:55
    let _3: &ARCRCData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:49
    let mut _4: &std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
    let _5: std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
    let mut _6: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
    let _7: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
    let mut _8: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44

    bb0: {
        _8 = &((*_1).0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
        _7 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _8) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:811:29: 811:44
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
        _5 = RefCell::<ARCRCData<'_>>::borrow(move _6) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:811:36: 811:42
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> Ref<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:44
        _3 = <Ref<'_, ARCRCData<'_>> as Deref>::deref(move _4) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:811:29: 811:49
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, ARCRCData<'_>>) -> &'a <Ref<'_, ARCRCData<'_>> as Deref>::Target {<Ref<'_, ARCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &((*_3).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:55
        _0 = Cell::<u32>::get(move _2) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:811:29: 811:55
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:811:50: 811:53
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> bb5;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:811:56: 811:57
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:811:57: 811:57
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:811:56: 811:57
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:811:5: 811:57
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:810:1: 810:35>::set_mark(_1: &ARCRC<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:17: 812:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:24: 812:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:812:35: 812:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:67
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:67
    let _5: &ARCRCData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:57
    let mut _6: &std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
    let _7: std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
    let mut _8: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
    let _9: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
    let mut _10: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
    let mut _11: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:812:62: 812:66

    bb0: {
        _10 = &((*_1).0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
        _9 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _10) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:812:37: 812:52
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
        _7 = RefCell::<ARCRCData<'_>>::borrow(move _8) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:812:44: 812:50
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> Ref<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:52
        _5 = <Ref<'_, ARCRCData<'_>> as Deref>::deref(move _6) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:57
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:812:37: 812:57
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, ARCRCData<'_>>) -> &'a <Ref<'_, ARCRCData<'_>> as Deref>::Target {<Ref<'_, ARCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &((*_5).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:67
        _11 = _2;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:812:62: 812:66
        _3 = Cell::<u32>::set(move _4, move _11) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:812:37: 812:67
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:812:58: 812:61
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:812:67: 812:68
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:812:70: 812:70
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:812:67: 812:68
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:812:5: 812:70
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:815:1: 815:36>::count_children(_1: &ARCRC<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:816:23: 816:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:816:33: 816:38

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:816:41: 816:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:816:44: 816:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:815:1: 815:36>::descend_one_child(_1: &ARCRC<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:817:29: 817:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:817:36: 817:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:817:53: 817:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:818:9: 818:9
    let _4: &(std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:13: 820:21
    let _5: &ARCRCData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:49
    let mut _6: &std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
    let _7: std::cell::Ref<'_, ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
    let mut _8: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
    let _9: &std::cell::RefCell<ARCRCData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
    let mut _10: &std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
    let mut _11: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:822:25: 822:40
    let _13: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:823:17: 823:49
    let mut _14: &ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:823:17: 823:49
    let mut _15: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:823:41: 823:48
    let mut _16: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:825:25: 825:40
    let _18: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:826:17: 826:49
    let mut _19: &ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:826:17: 826:49
    let mut _20: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:826:41: 826:48
    let mut _21: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _22: &ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:822:30: 822:39
    let mut _23: &ARCRC<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:825:30: 825:39
    scope 1 {
        debug children => _4;            // in scope 1 at ui/drop/dropck_legal_cycles.rs:820:13: 820:21
        scope 2 {
            debug child => _12;          // in scope 2 at ui/drop/dropck_legal_cycles.rs:822:30: 822:39
            let _12: &&ARCRC<'_>;        // in scope 2 at ui/drop/dropck_legal_cycles.rs:822:30: 822:39
        }
        scope 3 {
            debug child => _17;          // in scope 3 at ui/drop/dropck_legal_cycles.rs:825:30: 825:39
            let _17: &&ARCRC<'_>;        // in scope 3 at ui/drop/dropck_legal_cycles.rs:825:30: 825:39
        }
    }

    bb0: {
        _10 = &((*_1).0: std::sync::Arc<std::cell::RefCell<ARCRCData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
        _9 = <Arc<RefCell<ARCRCData<'_>>> as Deref>::deref(move _10) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:820:25: 820:40
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RefCell<ARCRCData<'_>>>) -> &'a <Arc<RefCell<ARCRCData<'_>>> as Deref>::Target {<Arc<RefCell<ARCRCData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _9;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
        _7 = RefCell::<ARCRCData<'_>>::borrow(move _8) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:820:32: 820:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<ARCRCData<'_>>) -> Ref<'a, ARCRCData<'_>> {RefCell::<ARCRCData<'_>>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:40
        _5 = <Ref<'_, ARCRCData<'_>> as Deref>::deref(move _6) -> [return: bb3, unwind: bb11]; // scope 0 at ui/drop/dropck_legal_cycles.rs:820:25: 820:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:820:25: 820:49
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, ARCRCData<'_>>) -> &'a <Ref<'_, ARCRCData<'_>> as Deref>::Target {<Ref<'_, ARCRCData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &((*_5).2: (std::option::Option<&ARCRC<'_>>, std::option::Option<&ARCRC<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:820:24: 820:49
        switchInt(_3) -> [0: bb5, 1: bb7, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:821:9: 821:20
    }

    bb4: {
        _21 = begin_panic::<&str>(const "bad children!") -> bb11; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:828:25: 828:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _11 = discriminant(((*_4).0: std::option::Option<&ARCRC<'_>>)); // scope 2 at ui/drop/dropck_legal_cycles.rs:822:25: 822:40
        switchInt(move _11) -> [1: bb6, otherwise: bb9]; // scope 2 at ui/drop/dropck_legal_cycles.rs:822:25: 822:40
    }

    bb6: {
        _12 = &((((*_4).0: std::option::Option<&ARCRC<'_>>) as Some).0: &ARCRC<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:822:30: 822:39
        _22 = deref_copy (*_12);         // scope 2 at ui/drop/dropck_legal_cycles.rs:823:17: 823:49
        _14 = _22;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:823:17: 823:49
        _15 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:823:41: 823:48
        _13 = <ARCRC<'_> as Children<'_>>::descend_into_self::<C>(move _14, move _15) -> [return: bb13, unwind: bb11]; // scope 2 at ui/drop/dropck_legal_cycles.rs:823:17: 823:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:823:23: 823:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCRC<'_>, &'b mut C) {<ARCRC<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(((*_4).1: std::option::Option<&ARCRC<'_>>)); // scope 3 at ui/drop/dropck_legal_cycles.rs:825:25: 825:40
        switchInt(move _16) -> [1: bb8, otherwise: bb9]; // scope 3 at ui/drop/dropck_legal_cycles.rs:825:25: 825:40
    }

    bb8: {
        _17 = &((((*_4).1: std::option::Option<&ARCRC<'_>>) as Some).0: &ARCRC<'_>); // scope 3 at ui/drop/dropck_legal_cycles.rs:825:30: 825:39
        _23 = deref_copy (*_17);         // scope 3 at ui/drop/dropck_legal_cycles.rs:826:17: 826:49
        _19 = _23;                       // scope 3 at ui/drop/dropck_legal_cycles.rs:826:17: 826:49
        _20 = &mut (*_2);                // scope 3 at ui/drop/dropck_legal_cycles.rs:826:41: 826:48
        _18 = <ARCRC<'_> as Children<'_>>::descend_into_self::<C>(move _19, move _20) -> [return: bb14, unwind: bb11]; // scope 3 at ui/drop/dropck_legal_cycles.rs:826:17: 826:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:826:23: 826:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCRC<'_>, &'b mut C) {<ARCRC<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_7) -> bb10;                // scope 0 at ui/drop/dropck_legal_cycles.rs:830:5: 830:6
    }

    bb10: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:830:6: 830:6
    }

    bb11 (cleanup): {
        drop(_7) -> bb12;                // scope 0 at ui/drop/dropck_legal_cycles.rs:830:5: 830:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:817:5: 830:6
    }

    bb13: {
        goto -> bb9;                     // scope 2 at ui/drop/dropck_legal_cycles.rs:823:17: 823:49
    }

    bb14: {
        goto -> bb9;                     // scope 3 at ui/drop/dropck_legal_cycles.rs:826:17: 826:49
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:833:10: 833:15>::clone(_1: &ARCMData<'_>) -> ARCMData<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:833:10: 833:15
    let mut _0: ARCMData<'_>;            // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:833:10: 833:15
    let mut _2: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:835:5: 835:20
    let mut _3: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:835:5: 835:20
    let _4: &std::cell::Cell<u32>;       // in scope 0 at ui/drop/dropck_legal_cycles.rs:835:5: 835:20
    let mut _5: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:836:5: 836:59
    let mut _6: &(std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:836:5: 836:59
    let _7: &(std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:836:5: 836:59

    bb0: {
        _4 = &((*_1).0: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:835:5: 835:20
        _3 = _4;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:835:5: 835:20
        _2 = <Cell<u32> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:835:5: 835:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:835:5: 835:20
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> Cell<u32> {<Cell<u32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:836:5: 836:59
        _6 = _7;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:836:5: 836:59
        _5 = <(Option<&ARCM<'_>>, Option<&ARCM<'_>>) as Clone>::clone(move _6) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:836:5: 836:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:836:5: 836:59
                                         // + literal: Const { ty: for<'a> fn(&'a (Option<&ARCM<'_>>, Option<&ARCM<'_>>)) -> (Option<&ARCM<'_>>, Option<&ARCM<'_>>) {<(Option<&ARCM<'_>>, Option<&ARCM<'_>>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = ARCMData::<'_> { mark: move _2, children: move _5 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:833:10: 833:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:833:15: 833:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:839:10: 839:15>::clone(_1: &ARCM<'_>) -> ARCM<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:839:10: 839:15
    let mut _0: ARCM<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:839:10: 839:15
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
    let _3: &str;                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
    let _5: &&str;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
    let mut _6: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:31: 840:55
    let mut _7: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:31: 840:55
    let _8: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:840:31: 840:55

    bb0: {
        _5 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
        _4 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
        _3 = <&str as Clone>::clone(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:840:17: 840:29
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> &str {<&str as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:840:17: 840:29
        _8 = &((*_1).1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:840:31: 840:55
        _7 = _8;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:840:31: 840:55
        _6 = <Arc<Mutex<ARCMData<'_>>> as Clone>::clone(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:840:31: 840:55
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:840:31: 840:55
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> Arc<Mutex<ARCMData<'_>>> {<Arc<Mutex<ARCMData<'_>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = ARCM::<'_>(move _2, move _6); // scope 0 at ui/drop/dropck_legal_cycles.rs:839:10: 839:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:839:15: 839:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:842:1: 842:28>::new(_1: &str) -> ARCM<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:843:12: 843:16
    let mut _0: ARCM<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:843:35: 843:39
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:844:14: 844:18
    let mut _3: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:844:20: 845:60
    let mut _4: std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:844:29: 845:59
    let mut _5: ARCMData<'_>;            // in scope 0 at ui/drop/dropck_legal_cycles.rs:844:40: 845:58
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:845:19: 845:31
    let mut _7: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:845:43: 845:55

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:844:14: 844:18
        _6 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:845:19: 845:31
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:845:19: 845:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const (Option::<&ARCM<'_>>::None, Option::<&ARCM<'_>>::None); // scope 0 at ui/drop/dropck_legal_cycles.rs:845:43: 845:55
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:845:43: 845:55
                                         // + literal: Const { ty: (Option<&ARCM<'_>>, Option<&ARCM<'_>>), val: Value(ByRef(..)) }
        _5 = ARCMData::<'_> { mark: move _6, children: move _7 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:844:40: 845:58
        _4 = Mutex::<ARCMData<'_>>::new(move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:844:29: 845:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:844:29: 844:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(ARCMData<'_>) -> Mutex<ARCMData<'_>> {Mutex::<ARCMData<'_>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Arc::<Mutex<ARCMData<'_>>>::new(move _4) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:844:20: 845:60
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:844:20: 844:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Mutex<ARCMData<'_>>) -> Arc<Mutex<ARCMData<'_>>> {Arc::<Mutex<ARCMData<'_>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = ARCM::<'_>(move _2, move _3); // scope 0 at ui/drop/dropck_legal_cycles.rs:844:9: 845:61
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:846:6: 846:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:842:1: 842:28>::name(_1: &ARCM<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:847:13: 847:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:847:13: 847:18

    bb0: {
        _0 = deref_copy ((*_1).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:847:30: 847:36
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:847:38: 847:38
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:850:1: 850:34>::mark(_1: &ARCM<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:13: 851:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:851:23: 851:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:62
    let _3: &ARCMData<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:56
    let mut _4: &std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:51
    let _5: std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:51
    let mut _6: std::result::Result<std::sync::MutexGuard<'_, ARCMData<'_>>, std::sync::PoisonError<std::sync::MutexGuard<'_, ARCMData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
    let mut _7: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
    let _8: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
    let mut _9: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42

    bb0: {
        _9 = &((*_1).1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
        _8 = <Arc<Mutex<ARCMData<'_>>> as Deref>::deref(move _9) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:851:29: 851:42
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> &'a <Arc<Mutex<ARCMData<'_>>> as Deref>::Target {<Arc<Mutex<ARCMData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
        _6 = Mutex::<ARCMData<'_>>::lock(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:851:36: 851:40
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<ARCMData<'_>>) -> Result<MutexGuard<'a, ARCMData<'_>>, PoisonError<MutexGuard<'a, ARCMData<'_>>>> {Mutex::<ARCMData<'_>>::lock}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap(move _6) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:51
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:851:43: 851:49
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>) -> MutexGuard<'_, ARCMData<'_>> {Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &_5;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:51
        _3 = <MutexGuard<'_, ARCMData<'_>> as Deref>::deref(move _4) -> [return: bb4, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:851:29: 851:56
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, ARCMData<'_>>) -> &'a <MutexGuard<'_, ARCMData<'_>> as Deref>::Target {<MutexGuard<'_, ARCMData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = &((*_3).0: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:62
        _0 = Cell::<u32>::get(move _2) -> [return: bb5, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:851:29: 851:62
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:851:57: 851:60
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> bb6;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:851:63: 851:64
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:851:64: 851:64
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:851:63: 851:64
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:851:5: 851:64
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:850:1: 850:34>::set_mark(_1: &ARCM<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:17: 852:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:24: 852:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:852:35: 852:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:74
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:74
    let _5: &ARCMData<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:64
    let mut _6: &std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:59
    let _7: std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:59
    let mut _8: std::result::Result<std::sync::MutexGuard<'_, ARCMData<'_>>, std::sync::PoisonError<std::sync::MutexGuard<'_, ARCMData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
    let mut _9: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
    let _10: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
    let mut _11: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
    let mut _12: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:852:69: 852:73

    bb0: {
        _11 = &((*_1).1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
        _10 = <Arc<Mutex<ARCMData<'_>>> as Deref>::deref(move _11) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:852:37: 852:50
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> &'a <Arc<Mutex<ARCMData<'_>>> as Deref>::Target {<Arc<Mutex<ARCMData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _10;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
        _8 = Mutex::<ARCMData<'_>>::lock(move _9) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:852:44: 852:48
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<ARCMData<'_>>) -> Result<MutexGuard<'a, ARCMData<'_>>, PoisonError<MutexGuard<'a, ARCMData<'_>>>> {Mutex::<ARCMData<'_>>::lock}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap(move _8) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:852:51: 852:57
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>) -> MutexGuard<'_, ARCMData<'_>> {Result::<MutexGuard<'_, ARCMData<'_>>, PoisonError<MutexGuard<'_, ARCMData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:59
        _5 = <MutexGuard<'_, ARCMData<'_>> as Deref>::deref(move _6) -> [return: bb4, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:852:37: 852:64
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, ARCMData<'_>>) -> &'a <MutexGuard<'_, ARCMData<'_>> as Deref>::Target {<MutexGuard<'_, ARCMData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = &((*_5).0: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:74
        _12 = _2;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:852:69: 852:73
        _3 = Cell::<u32>::set(move _4, move _12) -> [return: bb5, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:852:37: 852:74
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:852:65: 852:68
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> bb6;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:852:74: 852:75
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:852:77: 852:77
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:852:74: 852:75
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:852:5: 852:77
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:855:1: 855:35>::count_children(_1: &ARCM<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:856:23: 856:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:856:33: 856:38

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:856:41: 856:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:856:44: 856:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:855:1: 855:35>::descend_one_child(_1: &ARCM<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:857:29: 857:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:857:36: 857:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:857:53: 857:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:858:9: 858:9
    let _4: &(std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:13: 860:25
    let mut _5: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:28: 862:27
    let mut _6: std::result::Result<std::sync::MutexGuard<'_, ARCMData<'_>>, std::sync::TryLockError<std::sync::MutexGuard<'_, ARCMData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
    let mut _7: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
    let _8: &std::sync::Mutex<ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
    let mut _9: &std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
    let mut _10: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:860:35: 860:43
    let mut _12: &ARCMData<'_>;          // in scope 0 at ui/drop/dropck_legal_cycles.rs:861:13: 861:26
    let mut _13: &std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:861:13: 861:17
    let mut _14: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:864:25: 864:40
    let _16: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:865:17: 865:49
    let mut _17: &ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:865:17: 865:49
    let mut _18: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:865:41: 865:48
    let mut _19: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:867:25: 867:40
    let _21: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:868:17: 868:49
    let mut _22: &ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:868:17: 868:49
    let mut _23: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:868:41: 868:48
    let mut _24: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _25: &ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:864:30: 864:39
    let mut _26: &ARCM<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:867:30: 867:39
    let mut _27: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    let mut _28: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    scope 1 {
        debug children => _4;            // in scope 1 at ui/drop/dropck_legal_cycles.rs:860:13: 860:25
        scope 3 {
            debug child => _15;          // in scope 3 at ui/drop/dropck_legal_cycles.rs:864:30: 864:39
            let _15: &&ARCM<'_>;         // in scope 3 at ui/drop/dropck_legal_cycles.rs:864:30: 864:39
        }
        scope 4 {
            debug child => _20;          // in scope 4 at ui/drop/dropck_legal_cycles.rs:867:30: 867:39
            let _20: &&ARCM<'_>;         // in scope 4 at ui/drop/dropck_legal_cycles.rs:867:30: 867:39
        }
    }
    scope 2 {
        debug data => _11;               // in scope 2 at ui/drop/dropck_legal_cycles.rs:860:38: 860:42
        let _11: std::sync::MutexGuard<'_, ARCMData<'_>>; // in scope 2 at ui/drop/dropck_legal_cycles.rs:860:38: 860:42
    }

    bb0: {
        _9 = &((*_1).1: std::sync::Arc<std::sync::Mutex<ARCMData<'_>>>); // scope 2 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
        _8 = <Arc<Mutex<ARCMData<'_>>> as Deref>::deref(move _9) -> bb1; // scope 2 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:860:46: 860:63
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<Mutex<ARCMData<'_>>>) -> &'a <Arc<Mutex<ARCMData<'_>>> as Deref>::Target {<Arc<Mutex<ARCMData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 2 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
        _6 = Mutex::<ARCMData<'_>>::try_lock(move _7) -> bb2; // scope 2 at ui/drop/dropck_legal_cycles.rs:860:46: 860:63
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:860:53: 860:61
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<ARCMData<'_>>) -> Result<MutexGuard<'a, ARCMData<'_>>, TryLockError<MutexGuard<'a, ARCMData<'_>>>> {Mutex::<ARCMData<'_>>::try_lock}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = discriminant(_6);          // scope 2 at ui/drop/dropck_legal_cycles.rs:860:35: 860:43
        switchInt(move _10) -> [0: bb3, otherwise: bb5]; // scope 2 at ui/drop/dropck_legal_cycles.rs:860:35: 860:43
    }

    bb3: {
        _11 = move ((_6 as Ok).0: std::sync::MutexGuard<'_, ARCMData<'_>>); // scope 2 at ui/drop/dropck_legal_cycles.rs:860:38: 860:42
        _13 = &_11;                      // scope 2 at ui/drop/dropck_legal_cycles.rs:861:13: 861:17
        _12 = <MutexGuard<'_, ARCMData<'_>> as Deref>::deref(move _13) -> [return: bb4, unwind: bb13]; // scope 2 at ui/drop/dropck_legal_cycles.rs:861:13: 861:26
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:861:13: 861:26
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, ARCMData<'_>>) -> &'a <MutexGuard<'_, ARCMData<'_>> as Deref>::Target {<MutexGuard<'_, ARCMData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = ((*_12).1: (std::option::Option<&ARCM<'_>>, std::option::Option<&ARCM<'_>>)); // scope 2 at ui/drop/dropck_legal_cycles.rs:861:13: 861:26
        drop(_11) -> [return: bb6, unwind: bb18]; // scope 0 at ui/drop/dropck_legal_cycles.rs:862:9: 862:10
    }

    bb5: {
        drop(_6) -> bb12;                // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    }

    bb6: {
        _4 = &_5;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:860:13: 860:25
        _27 = discriminant(_6);          // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
        switchInt(move _27) -> [0: bb15, otherwise: bb16]; // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    }

    bb7: {
        _24 = begin_panic::<&str>(const "bad children!"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:870:25: 870:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _14 = discriminant(((*_4).0: std::option::Option<&ARCM<'_>>)); // scope 3 at ui/drop/dropck_legal_cycles.rs:864:25: 864:40
        switchInt(move _14) -> [1: bb9, otherwise: bb12]; // scope 3 at ui/drop/dropck_legal_cycles.rs:864:25: 864:40
    }

    bb9: {
        _15 = &((((*_4).0: std::option::Option<&ARCM<'_>>) as Some).0: &ARCM<'_>); // scope 3 at ui/drop/dropck_legal_cycles.rs:864:30: 864:39
        _25 = deref_copy (*_15);         // scope 3 at ui/drop/dropck_legal_cycles.rs:865:17: 865:49
        _17 = _25;                       // scope 3 at ui/drop/dropck_legal_cycles.rs:865:17: 865:49
        _18 = &mut (*_2);                // scope 3 at ui/drop/dropck_legal_cycles.rs:865:41: 865:48
        _16 = <ARCM<'_> as Children<'_>>::descend_into_self::<C>(move _17, move _18) -> bb12; // scope 3 at ui/drop/dropck_legal_cycles.rs:865:17: 865:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:865:23: 865:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCM<'_>, &'b mut C) {<ARCM<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = discriminant(((*_4).1: std::option::Option<&ARCM<'_>>)); // scope 4 at ui/drop/dropck_legal_cycles.rs:867:25: 867:40
        switchInt(move _19) -> [1: bb11, otherwise: bb12]; // scope 4 at ui/drop/dropck_legal_cycles.rs:867:25: 867:40
    }

    bb11: {
        _20 = &((((*_4).1: std::option::Option<&ARCM<'_>>) as Some).0: &ARCM<'_>); // scope 4 at ui/drop/dropck_legal_cycles.rs:867:30: 867:39
        _26 = deref_copy (*_20);         // scope 4 at ui/drop/dropck_legal_cycles.rs:868:17: 868:49
        _22 = _26;                       // scope 4 at ui/drop/dropck_legal_cycles.rs:868:17: 868:49
        _23 = &mut (*_2);                // scope 4 at ui/drop/dropck_legal_cycles.rs:868:41: 868:48
        _21 = <ARCM<'_> as Children<'_>>::descend_into_self::<C>(move _22, move _23) -> bb12; // scope 4 at ui/drop/dropck_legal_cycles.rs:868:17: 868:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:868:23: 868:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCM<'_>, &'b mut C) {<ARCM<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:872:6: 872:6
    }

    bb13 (cleanup): {
        drop(_11) -> bb18;               // scope 0 at ui/drop/dropck_legal_cycles.rs:862:9: 862:10
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:857:5: 872:6
    }

    bb15: {
        switchInt(_3) -> [0: bb8, 1: bb10, otherwise: bb7]; // scope 1 at ui/drop/dropck_legal_cycles.rs:863:9: 863:20
    }

    bb16: {
        drop(_6) -> bb15;                // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    }

    bb17 (cleanup): {
        drop(_6) -> bb14;                // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    }

    bb18 (cleanup): {
        _28 = discriminant(_6);          // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
        switchInt(move _28) -> [0: bb14, otherwise: bb17]; // scope 0 at ui/drop/dropck_legal_cycles.rs:862:27: 862:28
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:875:10: 875:15>::clone(_1: &ARCRWData<'_>) -> ARCRWData<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:875:10: 875:15
    let mut _0: ARCRWData<'_>;           // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:875:10: 875:15
    let mut _2: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
    let _3: &str;                        // in scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
    let mut _4: &&str;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
    let _5: &&str;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:878:5: 878:20
    let mut _7: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:878:5: 878:20
    let _8: &std::cell::Cell<u32>;       // in scope 0 at ui/drop/dropck_legal_cycles.rs:878:5: 878:20
    let mut _9: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:879:5: 879:61
    let mut _10: &(std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:879:5: 879:61
    let _11: &(std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:879:5: 879:61

    bb0: {
        _5 = &((*_1).0: &str);           // scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
        _4 = _5;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
        _3 = <&str as Clone>::clone(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:877:5: 877:23
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> &str {<&str as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:877:5: 877:23
        _8 = &((*_1).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:878:5: 878:20
        _7 = _8;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:878:5: 878:20
        _6 = <Cell<u32> as Clone>::clone(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:878:5: 878:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:878:5: 878:20
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> Cell<u32> {<Cell<u32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &((*_1).2: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:879:5: 879:61
        _10 = _11;                       // scope 0 at ui/drop/dropck_legal_cycles.rs:879:5: 879:61
        _9 = <(Option<&ARCRW<'_>>, Option<&ARCRW<'_>>) as Clone>::clone(move _10) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:879:5: 879:61
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:879:5: 879:61
                                         // + literal: Const { ty: for<'a> fn(&'a (Option<&ARCRW<'_>>, Option<&ARCRW<'_>>)) -> (Option<&ARCRW<'_>>, Option<&ARCRW<'_>>) {<(Option<&ARCRW<'_>>, Option<&ARCRW<'_>>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = ARCRWData::<'_> { name: move _2, mark: move _6, children: move _9 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:875:10: 875:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:875:15: 875:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:882:10: 882:15>::clone(_1: &ARCRW<'_>) -> ARCRW<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:882:10: 882:15
    let mut _0: ARCRW<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:882:10: 882:15
    let mut _2: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:883:18: 883:44
    let mut _3: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:883:18: 883:44
    let _4: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:883:18: 883:44

    bb0: {
        _4 = &((*_1).0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:883:18: 883:44
        _3 = _4;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:883:18: 883:44
        _2 = <Arc<RwLock<ARCRWData<'_>>> as Clone>::clone(move _3) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:883:18: 883:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:883:18: 883:44
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> Arc<RwLock<ARCRWData<'_>>> {<Arc<RwLock<ARCRWData<'_>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = ARCRW::<'_>(move _2);       // scope 0 at ui/drop/dropck_legal_cycles.rs:882:10: 882:15
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:882:15: 882:15
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:885:1: 885:29>::new(_1: &str) -> ARCRW<'_> {
    debug name => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:886:12: 886:16
    let mut _0: ARCRW<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:886:35: 886:39
    let mut _2: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:887:15: 888:72
    let mut _3: std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:887:24: 888:71
    let mut _4: ARCRWData<'_>;           // in scope 0 at ui/drop/dropck_legal_cycles.rs:887:36: 888:70
    let mut _5: &str;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:888:19: 888:23
    let mut _6: std::cell::Cell<u32>;    // in scope 0 at ui/drop/dropck_legal_cycles.rs:888:31: 888:43
    let mut _7: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:888:55: 888:67

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:888:19: 888:23
        _6 = Cell::<u32>::new(const 0_u32) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:888:31: 888:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:888:31: 888:40
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(u32) -> Cell<u32> {Cell::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const (Option::<&ARCRW<'_>>::None, Option::<&ARCRW<'_>>::None); // scope 0 at ui/drop/dropck_legal_cycles.rs:888:55: 888:67
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:888:55: 888:67
                                         // + literal: Const { ty: (Option<&ARCRW<'_>>, Option<&ARCRW<'_>>), val: Value(ByRef(..)) }
        _4 = ARCRWData::<'_> { name: move _5, mark: move _6, children: move _7 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:887:36: 888:70
        _3 = RwLock::<ARCRWData<'_>>::new(move _4) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:887:24: 888:71
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:887:24: 887:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(ARCRWData<'_>) -> RwLock<ARCRWData<'_>> {RwLock::<ARCRWData<'_>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Arc::<RwLock<ARCRWData<'_>>>::new(move _3) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:887:15: 888:72
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:887:15: 887:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RwLock<ARCRWData<'_>>) -> Arc<RwLock<ARCRWData<'_>>> {Arc::<RwLock<ARCRWData<'_>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = ARCRW::<'_>(move _2);       // scope 0 at ui/drop/dropck_legal_cycles.rs:887:9: 888:73
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:889:6: 889:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:885:1: 885:29>::name(_1: &ARCRW<'_>) -> &str {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:13: 890:18
    let mut _0: &str;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:57
    let _2: &ARCRWData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:57
    let mut _3: &std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:52
    let _4: std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:52
    let mut _5: std::result::Result<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
    let mut _6: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
    let _7: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
    let mut _8: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43

    bb0: {
        _8 = &((*_1).0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
        _7 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _8) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:890:30: 890:43
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
        _5 = RwLock::<ARCRWData<'_>>::read(move _6) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:43
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:890:37: 890:41
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockReadGuard<'a, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::read}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap(move _5) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:52
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:890:44: 890:50
                                         // + literal: Const { ty: fn(Result<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>) -> RwLockReadGuard<'_, ARCRWData<'_>> {Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = &_4;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:52
        _2 = <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref(move _3) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:57
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:890:30: 890:57
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, ARCRWData<'_>>) -> &'a <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = deref_copy ((*_2).0: &str); // scope 0 at ui/drop/dropck_legal_cycles.rs:890:30: 890:57
        drop(_4) -> bb5;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:890:58: 890:59
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:890:59: 890:59
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:890:58: 890:59
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:890:5: 890:59
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:893:1: 893:35>::mark(_1: &ARCRW<'_>) -> u32 {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:13: 894:18
    let mut _0: u32;                     // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:894:23: 894:26
    let mut _2: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:62
    let _3: &ARCRWData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:56
    let mut _4: &std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:51
    let _5: std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:51
    let mut _6: std::result::Result<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
    let mut _7: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
    let _8: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
    let mut _9: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42

    bb0: {
        _9 = &((*_1).0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
        _8 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _9) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:894:29: 894:42
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
        _6 = RwLock::<ARCRWData<'_>>::read(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:894:36: 894:40
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockReadGuard<'a, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::read}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap(move _6) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:51
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:894:43: 894:49
                                         // + literal: Const { ty: fn(Result<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>) -> RwLockReadGuard<'_, ARCRWData<'_>> {Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &_5;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:51
        _3 = <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref(move _4) -> [return: bb4, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:894:29: 894:56
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, ARCRWData<'_>>) -> &'a <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = &((*_3).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:62
        _0 = Cell::<u32>::get(move _2) -> [return: bb5, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:894:29: 894:62
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:894:57: 894:60
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>) -> u32 {Cell::<u32>::get}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> bb6;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:894:63: 894:64
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:894:64: 894:64
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:894:63: 894:64
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:894:5: 894:64
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:893:1: 893:35>::set_mark(_1: &ARCRW<'_>, _2: u32) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:17: 895:22
    debug mark => _2;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:24: 895:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:895:35: 895:35
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:74
    let mut _4: &std::cell::Cell<u32>;   // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:74
    let _5: &ARCRWData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:64
    let mut _6: &std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:59
    let _7: std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:59
    let mut _8: std::result::Result<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
    let mut _9: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
    let _10: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
    let mut _11: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
    let mut _12: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:895:69: 895:73

    bb0: {
        _11 = &((*_1).0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
        _10 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _11) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:895:37: 895:50
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _10;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
        _8 = RwLock::<ARCRWData<'_>>::read(move _9) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:895:44: 895:48
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockReadGuard<'a, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::read}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap(move _8) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:895:51: 895:57
                                         // + literal: Const { ty: fn(Result<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>) -> RwLockReadGuard<'_, ARCRWData<'_>> {Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:59
        _5 = <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref(move _6) -> [return: bb4, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:895:37: 895:64
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, ARCRWData<'_>>) -> &'a <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = &((*_5).1: std::cell::Cell<u32>); // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:74
        _12 = _2;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:895:69: 895:73
        _3 = Cell::<u32>::set(move _4, move _12) -> [return: bb5, unwind: bb7]; // scope 0 at ui/drop/dropck_legal_cycles.rs:895:37: 895:74
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:895:65: 895:68
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<u32>, u32) {Cell::<u32>::set}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> bb6;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:895:74: 895:75
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:895:77: 895:77
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/drop/dropck_legal_cycles.rs:895:74: 895:75
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:895:5: 895:77
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:898:1: 898:36>::count_children(_1: &ARCRW<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:899:23: 899:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:899:33: 899:38

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:899:41: 899:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:899:44: 899:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:898:1: 898:36>::descend_one_child(_1: &ARCRW<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:900:29: 900:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:900:36: 900:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:900:53: 900:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:901:9: 901:9
    let _4: &(std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:13: 903:21
    let _5: &ARCRWData<'_>;              // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:56
    let mut _6: &std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:47
    let _7: std::sync::RwLockReadGuard<'_, ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:47
    let mut _8: std::result::Result<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>, std::sync::PoisonError<std::sync::RwLockReadGuard<'_, ARCRWData<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
    let mut _9: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
    let _10: &std::sync::RwLock<ARCRWData<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
    let mut _11: &std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
    let mut _12: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:905:25: 905:40
    let _14: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:906:17: 906:49
    let mut _15: &ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:906:17: 906:49
    let mut _16: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:906:41: 906:48
    let mut _17: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:908:25: 908:40
    let _19: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:909:17: 909:49
    let mut _20: &ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:909:17: 909:49
    let mut _21: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:909:41: 909:48
    let mut _22: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _23: &ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:905:30: 905:39
    let mut _24: &ARCRW<'_>;             // in scope 0 at ui/drop/dropck_legal_cycles.rs:908:30: 908:39
    scope 1 {
        debug children => _4;            // in scope 1 at ui/drop/dropck_legal_cycles.rs:903:13: 903:21
        scope 2 {
            debug child => _13;          // in scope 2 at ui/drop/dropck_legal_cycles.rs:905:30: 905:39
            let _13: &&ARCRW<'_>;        // in scope 2 at ui/drop/dropck_legal_cycles.rs:905:30: 905:39
        }
        scope 3 {
            debug child => _18;          // in scope 3 at ui/drop/dropck_legal_cycles.rs:908:30: 908:39
            let _18: &&ARCRW<'_>;        // in scope 3 at ui/drop/dropck_legal_cycles.rs:908:30: 908:39
        }
    }

    bb0: {
        _11 = &((*_1).0: std::sync::Arc<std::sync::RwLock<ARCRWData<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
        _10 = <Arc<RwLock<ARCRWData<'_>>> as Deref>::deref(move _11) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:903:25: 903:38
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<RwLock<ARCRWData<'_>>>) -> &'a <Arc<RwLock<ARCRWData<'_>>> as Deref>::Target {<Arc<RwLock<ARCRWData<'_>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _10;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
        _8 = RwLock::<ARCRWData<'_>>::read(move _9) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:903:32: 903:36
                                         // + literal: Const { ty: for<'a> fn(&'a RwLock<ARCRWData<'_>>) -> Result<RwLockReadGuard<'a, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'a, ARCRWData<'_>>>> {RwLock::<ARCRWData<'_>>::read}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap(move _8) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:903:39: 903:45
                                         // + literal: Const { ty: fn(Result<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>) -> RwLockReadGuard<'_, ARCRWData<'_>> {Result::<RwLockReadGuard<'_, ARCRWData<'_>>, PoisonError<RwLockReadGuard<'_, ARCRWData<'_>>>>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:47
        _5 = <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref(move _6) -> [return: bb4, unwind: bb12]; // scope 0 at ui/drop/dropck_legal_cycles.rs:903:25: 903:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:903:25: 903:56
                                         // + literal: Const { ty: for<'a> fn(&'a RwLockReadGuard<'_, ARCRWData<'_>>) -> &'a <RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::Target {<RwLockReadGuard<'_, ARCRWData<'_>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = &((*_5).2: (std::option::Option<&ARCRW<'_>>, std::option::Option<&ARCRW<'_>>)); // scope 0 at ui/drop/dropck_legal_cycles.rs:903:24: 903:56
        switchInt(_3) -> [0: bb6, 1: bb8, otherwise: bb5]; // scope 1 at ui/drop/dropck_legal_cycles.rs:904:9: 904:20
    }

    bb5: {
        _22 = begin_panic::<&str>(const "bad children!") -> bb12; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:911:25: 911:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _12 = discriminant(((*_4).0: std::option::Option<&ARCRW<'_>>)); // scope 2 at ui/drop/dropck_legal_cycles.rs:905:25: 905:40
        switchInt(move _12) -> [1: bb7, otherwise: bb10]; // scope 2 at ui/drop/dropck_legal_cycles.rs:905:25: 905:40
    }

    bb7: {
        _13 = &((((*_4).0: std::option::Option<&ARCRW<'_>>) as Some).0: &ARCRW<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:905:30: 905:39
        _23 = deref_copy (*_13);         // scope 2 at ui/drop/dropck_legal_cycles.rs:906:17: 906:49
        _15 = _23;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:906:17: 906:49
        _16 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:906:41: 906:48
        _14 = <ARCRW<'_> as Children<'_>>::descend_into_self::<C>(move _15, move _16) -> [return: bb14, unwind: bb12]; // scope 2 at ui/drop/dropck_legal_cycles.rs:906:17: 906:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:906:23: 906:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCRW<'_>, &'b mut C) {<ARCRW<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = discriminant(((*_4).1: std::option::Option<&ARCRW<'_>>)); // scope 3 at ui/drop/dropck_legal_cycles.rs:908:25: 908:40
        switchInt(move _17) -> [1: bb9, otherwise: bb10]; // scope 3 at ui/drop/dropck_legal_cycles.rs:908:25: 908:40
    }

    bb9: {
        _18 = &((((*_4).1: std::option::Option<&ARCRW<'_>>) as Some).0: &ARCRW<'_>); // scope 3 at ui/drop/dropck_legal_cycles.rs:908:30: 908:39
        _24 = deref_copy (*_18);         // scope 3 at ui/drop/dropck_legal_cycles.rs:909:17: 909:49
        _20 = _24;                       // scope 3 at ui/drop/dropck_legal_cycles.rs:909:17: 909:49
        _21 = &mut (*_2);                // scope 3 at ui/drop/dropck_legal_cycles.rs:909:41: 909:48
        _19 = <ARCRW<'_> as Children<'_>>::descend_into_self::<C>(move _20, move _21) -> [return: bb15, unwind: bb12]; // scope 3 at ui/drop/dropck_legal_cycles.rs:909:17: 909:49
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:909:23: 909:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ARCRW<'_>, &'b mut C) {<ARCRW<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_7) -> bb11;                // scope 0 at ui/drop/dropck_legal_cycles.rs:913:5: 913:6
    }

    bb11: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:913:6: 913:6
    }

    bb12 (cleanup): {
        drop(_7) -> bb13;                // scope 0 at ui/drop/dropck_legal_cycles.rs:913:5: 913:6
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:900:5: 913:6
    }

    bb14: {
        goto -> bb10;                    // scope 2 at ui/drop/dropck_legal_cycles.rs:906:17: 906:49
    }

    bb15: {
        goto -> bb10;                    // scope 3 at ui/drop/dropck_legal_cycles.rs:909:17: 909:49
    }
}

fn Children::next_child(_1: &Self, _2: &mut C) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:936:22: 936:27
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:936:29: 936:36
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:937:9: 937:9
    let _3: usize;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:939:13: 939:18
    let mut _4: &mut C;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:939:21: 939:62
    let mut _5: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:939:40: 939:61
    let mut _6: &Self;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:939:40: 939:61
    let _7: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:940:9: 940:47
    let mut _8: &Self;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:940:9: 940:47
    let mut _9: &mut C;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:940:32: 940:39
    let mut _10: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:940:41: 940:46
    scope 1 {
        debug index => _3;               // in scope 1 at ui/drop/dropck_legal_cycles.rs:939:13: 939:18
    }

    bb0: {
        _4 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:939:21: 939:62
        _6 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:939:40: 939:61
        _5 = <Self as Children<'_>>::count_children(move _6) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:939:40: 939:61
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:939:45: 939:59
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> usize {<Self as Children<'_>>::count_children}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <C as Context>::next_index(move _4, move _5) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:939:21: 939:62
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:939:29: 939:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut C, usize) -> usize {<C as Context>::next_index}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:940:9: 940:47
        _9 = &mut (*_2);                 // scope 1 at ui/drop/dropck_legal_cycles.rs:940:32: 940:39
        _10 = _3;                        // scope 1 at ui/drop/dropck_legal_cycles.rs:940:41: 940:46
        _7 = <Self as Children<'_>>::descend_one_child::<C>(move _8, move _9, move _10) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:940:9: 940:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:940:14: 940:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Self, &'b mut C, usize) {<Self as Children<'_>>::descend_one_child::<C>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:941:6: 941:6
    }
}

fn Children::descend_into_self(_1: &Self, _2: &mut C) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:943:29: 943:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:943:36: 943:43
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:944:9: 944:9
    let _3: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:946:9: 946:26
    let mut _4: &mut C;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:946:9: 946:26
    let mut _5: &Self;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:946:21: 946:25
    let mut _6: bool;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:947:12: 947:32
    let mut _7: &C;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:947:12: 947:32
    let _8: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:948:13: 948:39
    let mut _9: &mut C;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:948:13: 948:39
    let _10: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:949:13: 949:37
    let mut _11: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:949:13: 949:37
    let _12: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:950:13: 950:37
    let mut _13: &Self;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:950:13: 950:37
    let mut _14: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:950:29: 950:36
    let _15: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:951:13: 951:37
    let mut _16: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:951:13: 951:37
    let _17: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:953:13: 953:36
    let mut _18: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:953:13: 953:36
    let mut _19: &Self;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:953:31: 953:35
    let _20: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:954:13: 954:39
    let mut _21: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:954:13: 954:39
    let _22: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:956:9: 956:27
    let mut _23: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:956:9: 956:27
    let mut _24: &Self;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:956:22: 956:26

    bb0: {
        _4 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:946:9: 946:26
        _5 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:946:21: 946:25
        _3 = <C as PrePost<Self>>::pre(move _4, move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:946:9: 946:26
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:946:17: 946:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut C, &'b Self) {<C as PrePost<Self>>::pre}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &(*_2);                     // scope 0 at ui/drop/dropck_legal_cycles.rs:947:12: 947:32
        _6 = <C as Context>::should_act(move _7) -> bb2; // scope 0 at ui/drop/dropck_legal_cycles.rs:947:12: 947:32
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:947:20: 947:30
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> bool {<C as Context>::should_act}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _6) -> [0: bb7, otherwise: bb3]; // scope 0 at ui/drop/dropck_legal_cycles.rs:947:12: 947:32
    }

    bb3: {
        _9 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:948:13: 948:39
        _8 = <C as Context>::increase_visited(move _9) -> bb4; // scope 0 at ui/drop/dropck_legal_cycles.rs:948:13: 948:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:948:21: 948:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut C) {<C as Context>::increase_visited}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &mut (*_2);                // scope 0 at ui/drop/dropck_legal_cycles.rs:949:13: 949:37
        _10 = <C as Context>::increase_depth(move _11) -> bb5; // scope 0 at ui/drop/dropck_legal_cycles.rs:949:13: 949:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:949:21: 949:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut C) {<C as Context>::increase_depth}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:950:13: 950:37
        _14 = &mut (*_2);                // scope 0 at ui/drop/dropck_legal_cycles.rs:950:29: 950:36
        _12 = <Self as Children<'_>>::next_child::<C>(move _13, move _14) -> bb6; // scope 0 at ui/drop/dropck_legal_cycles.rs:950:13: 950:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:950:18: 950:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Self, &'b mut C) {<Self as Children<'_>>::next_child::<C>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &mut (*_2);                // scope 0 at ui/drop/dropck_legal_cycles.rs:951:13: 951:37
        _15 = <C as Context>::decrease_depth(move _16) -> bb9; // scope 0 at ui/drop/dropck_legal_cycles.rs:951:13: 951:37
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:951:21: 951:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut C) {<C as Context>::decrease_depth}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = &mut (*_2);                // scope 0 at ui/drop/dropck_legal_cycles.rs:953:13: 953:36
        _19 = _1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:953:31: 953:35
        _17 = <C as PrePost<Self>>::hit_limit(move _18, move _19) -> bb8; // scope 0 at ui/drop/dropck_legal_cycles.rs:953:13: 953:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:953:21: 953:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut C, &'b Self) {<C as PrePost<Self>>::hit_limit}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = &mut (*_2);                // scope 0 at ui/drop/dropck_legal_cycles.rs:954:13: 954:39
        _20 = <C as Context>::increase_skipped(move _21) -> bb9; // scope 0 at ui/drop/dropck_legal_cycles.rs:954:13: 954:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:954:21: 954:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut C) {<C as Context>::increase_skipped}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = &mut (*_2);                // scope 0 at ui/drop/dropck_legal_cycles.rs:956:9: 956:27
        _24 = _1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:956:22: 956:26
        _22 = <C as PrePost<Self>>::post(move _23, move _24) -> bb10; // scope 0 at ui/drop/dropck_legal_cycles.rs:956:9: 956:27
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:956:17: 956:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut C, &'b Self) {<C as PrePost<Self>>::post}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:957:6: 957:6
    }
}

fn Children::descend(_1: &Self, _2: &Cell<Option<&Self>>, _3: &mut C) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:959:23: 959:28
    debug c => _2;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:959:30: 959:31
    debug context => _3;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:959:58: 959:65
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:960:9: 960:9
    let mut _4: std::option::Option<&Self>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:962:26: 962:33
    let mut _5: &std::cell::Cell<std::option::Option<&Self>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:962:26: 962:33
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:962:16: 962:23
    let _8: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:963:13: 963:41
    let mut _9: &Self;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:963:13: 963:41
    let mut _10: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:963:33: 963:40
    scope 1 {
        debug r => _7;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:962:21: 962:22
        let _7: &Self;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:962:21: 962:22
    }

    bb0: {
        _5 = _2;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:962:26: 962:33
        _4 = Cell::<Option<&Self>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:962:26: 962:33
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:962:28: 962:31
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&Self>>) -> Option<&Self> {Cell::<Option<&Self>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:962:16: 962:23
        switchInt(move _6) -> [1: bb2, otherwise: bb3]; // scope 1 at ui/drop/dropck_legal_cycles.rs:962:16: 962:23
    }

    bb2: {
        _7 = ((_4 as Some).0: &Self);    // scope 1 at ui/drop/dropck_legal_cycles.rs:962:21: 962:22
        _9 = _7;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:963:13: 963:41
        _10 = &mut (*_3);                // scope 1 at ui/drop/dropck_legal_cycles.rs:963:33: 963:40
        _8 = <Self as Children<'_>>::descend_into_self::<C>(move _9, move _10) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:963:13: 963:41
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:963:15: 963:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Self, &'b mut C) {<Self as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:965:6: 965:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:968:1: 968:32>::count_children(_1: &S<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:969:23: 969:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:969:33: 969:38

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:969:41: 969:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:969:44: 969:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:968:1: 968:32>::descend_one_child(_1: &S<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:970:29: 970:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:970:36: 970:43
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:971:9: 971:9
    let _4: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:972:13: 972:46
    let mut _5: &S<'_>;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:972:13: 972:46
    let mut _6: &std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:972:26: 972:36
    let _7: &std::cell::Cell<std::option::Option<&S<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:972:26: 972:36
    let mut _8: &mut C;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:972:38: 972:45

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:972:13: 972:46
        _7 = &((*_1).2: std::cell::Cell<std::option::Option<&S<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:972:26: 972:36
        _6 = _7;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:972:26: 972:36
        _8 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:972:38: 972:45
        _4 = <S<'_> as Children<'_>>::descend::<C>(move _5, move _6, move _8) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:972:13: 972:46
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:972:18: 972:25
                                         // + literal: Const { ty: for<'a, 'c, 'b, 'd> fn(&'a S<'_>, &'c Cell<Option<&'b S<'_>>>, &'d mut C) {<S<'_> as Children<'_>>::descend::<C>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:973:10: 973:10
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:976:1: 976:33>::count_children(_1: &S2<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:977:23: 977:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:977:33: 977:38

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:977:41: 977:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:977:44: 977:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:976:1: 976:33>::descend_one_child(_1: &S2<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:978:29: 978:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:978:36: 978:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:978:53: 978:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:979:9: 979:9
    let _4: (std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>); // in scope 0 at ui/drop/dropck_legal_cycles.rs:981:13: 981:21
    let mut _5: &std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:981:24: 981:39
    let mut _7: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:983:25: 983:36
    let _9: &S2<'_>;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:984:18: 984:76
    let mut _10: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:984:25: 984:36
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let _13: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:988:9: 988:41
    let mut _14: &S2<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:988:9: 988:41
    let mut _15: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:988:33: 988:40
    scope 1 {
        debug children => _4;            // in scope 1 at ui/drop/dropck_legal_cycles.rs:981:13: 981:21
        let _6: &S2<'_>;                 // in scope 1 at ui/drop/dropck_legal_cycles.rs:982:13: 982:18
        scope 2 {
            debug child => _6;           // in scope 2 at ui/drop/dropck_legal_cycles.rs:982:13: 982:18
        }
        scope 3 {
            debug child => _8;           // in scope 3 at ui/drop/dropck_legal_cycles.rs:983:30: 983:35
            let _8: &S2<'_>;             // in scope 3 at ui/drop/dropck_legal_cycles.rs:983:30: 983:35
        }
        scope 4 {
            debug child => _11;          // in scope 4 at ui/drop/dropck_legal_cycles.rs:984:30: 984:35
            let _11: &S2<'_>;            // in scope 4 at ui/drop/dropck_legal_cycles.rs:984:30: 984:35
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<(std::option::Option<&S2<'_>>, std::option::Option<&S2<'_>>)>); // scope 0 at ui/drop/dropck_legal_cycles.rs:981:24: 981:39
        _4 = Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::get(move _5) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:981:24: 981:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:981:34: 981:37
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<(Option<&S2<'_>>, Option<&S2<'_>>)>) -> (Option<&S2<'_>>, Option<&S2<'_>>) {Cell::<(Option<&S2<'_>>, Option<&S2<'_>>)>::get}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(_3) -> [0: bb3, 1: bb5, otherwise: bb2]; // scope 1 at ui/drop/dropck_legal_cycles.rs:982:21: 982:32
    }

    bb2: {
        _12 = begin_panic::<&str>(const "bad children"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:985:25: 985:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _7 = discriminant((_4.0: std::option::Option<&S2<'_>>)); // scope 3 at ui/drop/dropck_legal_cycles.rs:983:25: 983:36
        switchInt(move _7) -> [1: bb4, otherwise: bb8]; // scope 3 at ui/drop/dropck_legal_cycles.rs:983:25: 983:36
    }

    bb4: {
        _8 = (((_4.0: std::option::Option<&S2<'_>>) as Some).0: &S2<'_>); // scope 3 at ui/drop/dropck_legal_cycles.rs:983:30: 983:35
        _6 = _8;                         // scope 3 at ui/drop/dropck_legal_cycles.rs:983:52: 983:57
        goto -> bb7;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:983:18: 983:76
    }

    bb5: {
        _10 = discriminant((_4.1: std::option::Option<&S2<'_>>)); // scope 4 at ui/drop/dropck_legal_cycles.rs:984:25: 984:36
        switchInt(move _10) -> [1: bb6, otherwise: bb8]; // scope 4 at ui/drop/dropck_legal_cycles.rs:984:25: 984:36
    }

    bb6: {
        _11 = (((_4.1: std::option::Option<&S2<'_>>) as Some).0: &S2<'_>); // scope 4 at ui/drop/dropck_legal_cycles.rs:984:30: 984:35
        _9 = _11;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:984:52: 984:57
        _6 = _9;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:984:18: 984:76
        goto -> bb7;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:984:75: 984:76
    }

    bb7: {
        _14 = _6;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:988:9: 988:41
        _15 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:988:33: 988:40
        _13 = <S2<'_> as Children<'_>>::descend_into_self::<C>(move _14, move _15) -> bb8; // scope 2 at ui/drop/dropck_legal_cycles.rs:988:9: 988:41
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:988:15: 988:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S2<'_>, &'b mut C) {<S2<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:989:6: 989:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:992:1: 992:32>::count_children(_1: &V<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:993:23: 993:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:993:33: 993:38
    let mut _2: &std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:993:41: 993:60

    bb0: {
        _2 = &((*_1).2: std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:993:41: 993:60
        _0 = Vec::<Cell<Option<&V<'_>>>>::len(move _2) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:993:41: 993:60
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:993:55: 993:58
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Cell<Option<&V<'_>>>>) -> usize {Vec::<Cell<Option<&V<'_>>>>::len}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:993:62: 993:62
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:992:1: 992:32>::descend_one_child(_1: &V<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:994:29: 994:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:994:36: 994:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:994:53: 994:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:995:9: 995:9
    let mut _4: std::option::Option<&V<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:997:30: 997:56
    let mut _5: &std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:997:30: 997:56
    let _6: &std::cell::Cell<std::option::Option<&V<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:997:30: 997:50
    let mut _7: &std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:997:30: 997:43
    let mut _8: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:997:44: 997:49
    let mut _9: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:997:16: 997:27
    let _11: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:998:13: 998:45
    let mut _12: &V<'_>;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:998:13: 998:45
    let mut _13: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:998:37: 998:44
    scope 1 {
        debug child => _10;              // in scope 1 at ui/drop/dropck_legal_cycles.rs:997:21: 997:26
        let _10: &V<'_>;                 // in scope 1 at ui/drop/dropck_legal_cycles.rs:997:21: 997:26
    }

    bb0: {
        _7 = &((*_1).2: std::vec::Vec<std::cell::Cell<std::option::Option<&V<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:997:30: 997:43
        _8 = _3;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:997:44: 997:49
        _6 = <Vec<Cell<Option<&V<'_>>>> as Index<usize>>::index(move _7, move _8) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:997:30: 997:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:997:30: 997:50
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Cell<Option<&V<'_>>>>, usize) -> &'a <Vec<Cell<Option<&V<'_>>>> as Index<usize>>::Output {<Vec<Cell<Option<&V<'_>>>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:997:30: 997:56
        _4 = Cell::<Option<&V<'_>>>::get(move _5) -> bb2; // scope 1 at ui/drop/dropck_legal_cycles.rs:997:30: 997:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:997:51: 997:54
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&V<'_>>>) -> Option<&V<'_>> {Cell::<Option<&V<'_>>>::get}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:997:16: 997:27
        switchInt(move _9) -> [1: bb3, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:997:16: 997:27
    }

    bb3: {
        _10 = ((_4 as Some).0: &V<'_>);  // scope 1 at ui/drop/dropck_legal_cycles.rs:997:21: 997:26
        _12 = _10;                       // scope 1 at ui/drop/dropck_legal_cycles.rs:998:13: 998:45
        _13 = &mut (*_2);                // scope 1 at ui/drop/dropck_legal_cycles.rs:998:37: 998:44
        _11 = <V<'_> as Children<'_>>::descend_into_self::<C>(move _12, move _13) -> bb4; // scope 1 at ui/drop/dropck_legal_cycles.rs:998:13: 998:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:998:19: 998:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a V<'_>, &'b mut C) {<V<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1000:6: 1000:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1003:1: 1003:32>::count_children(_1: &H<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1004:23: 1004:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1004:33: 1004:38

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1004:41: 1004:42
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1004:44: 1004:44
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1003:1: 1003:32>::descend_one_child(_1: &H<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1005:29: 1005:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1005:36: 1005:43
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1006:9: 1006:9
    let _4: ();                          // in scope 0 at ui/drop/dropck_legal_cycles.rs:1008:9: 1008:42
    let mut _5: &H<'_>;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1008:9: 1008:42
    let mut _6: &std::cell::Cell<std::option::Option<&H<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1008:22: 1008:32
    let _7: &std::cell::Cell<std::option::Option<&H<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1008:22: 1008:32
    let mut _8: &mut C;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1008:34: 1008:41

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:1008:9: 1008:42
        _7 = &((*_1).2: std::cell::Cell<std::option::Option<&H<'_>>>); // scope 0 at ui/drop/dropck_legal_cycles.rs:1008:22: 1008:32
        _6 = _7;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:1008:22: 1008:32
        _8 = &mut (*_2);                 // scope 0 at ui/drop/dropck_legal_cycles.rs:1008:34: 1008:41
        _4 = <H<'_> as Children<'_>>::descend::<C>(move _5, move _6, move _8) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1008:9: 1008:42
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1008:14: 1008:21
                                         // + literal: Const { ty: for<'a, 'c, 'b, 'd> fn(&'a H<'_>, &'c Cell<Option<&'b H<'_>>>, &'d mut C) {<H<'_> as Children<'_>>::descend::<C>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1009:6: 1009:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1012:1: 1012:33>::count_children(_1: &HM<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1013:23: 1013:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1013:33: 1013:38
    let mut _2: std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:26: 1014:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:26: 1014:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:16: 1014:23
    let mut _6: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:52: 1014:68
    let mut _7: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:52: 1014:60
    let mut _8: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:52: 1014:60
    let mut _9: (usize, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:1014:48: 1014:68
    scope 1 {
        debug m => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1014:21: 1014:22
        let _5: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1014:21: 1014:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:26: 1014:45
        _2 = Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:26: 1014:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1014:40: 1014:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<HM<'_>, HM<'_>>>>) -> Option<&HashMap<HM<'_>, HM<'_>>> {Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:16: 1014:23
        switchInt(move _4) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:16: 1014:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::HashMap<HM<'_>, HM<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:21: 1014:22
        _8 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:52: 1014:60
        _7 = HashMap::<HM<'_>, HM<'_>>::iter(move _8) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:52: 1014:60
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1014:54: 1014:58
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<HM<'_>, HM<'_>>) -> std::collections::hash_map::Iter<'a, HM<'_>, HM<'_>> {HashMap::<HM<'_>, HM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::count(move _7) -> bb4; // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:52: 1014:68
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1014:61: 1014:66
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>) -> usize {<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = CheckedMul(const 2_usize, _6); // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:48: 1014:68
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:48: 1014:68
    }

    bb5: {
        _0 = move (_9.0: usize);         // scope 1 at ui/drop/dropck_legal_cycles.rs:1014:48: 1014:68
        goto -> bb7;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1014:9: 1014:81
    }

    bb6: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1014:78: 1014:79
        goto -> bb7;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1014:9: 1014:81
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1015:6: 1015:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1012:1: 1012:33>::descend_one_child(_1: &HM<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1016:29: 1016:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1016:36: 1016:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1016:53: 1016:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1017:9: 1017:9
    let mut _4: std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1019:31: 1019:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1019:31: 1019:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1019:16: 1019:28
    let mut _8: std::option::Option<(&HM<'_>, &HM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:59
    let mut _9: &mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:59
    let mut _10: std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:44
    let mut _11: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:44
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:49: 1020:58
    let mut _13: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:49: 1020:54
    let mut _14: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1020:20: 1020:32
    let _17: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:61
    let mut _18: &HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:61
    let _19: [&HM<'_>; 2];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:23
    let mut _20: &HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:18: 1021:19
    let mut _21: &HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:21: 1021:22
    let _22: usize;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:24: 1021:33
    let mut _23: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:24: 1021:29
    let mut _24: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:34
    let mut _25: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:34
    let mut _26: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:53: 1021:60
    let mut _27: &std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1019:21: 1019:27
    let mut _28: &HM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:23
    scope 1 {
        debug hm => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1019:21: 1019:27
        let _7: &&std::collections::HashMap<HM<'_>, HM<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1019:21: 1019:27
        scope 2 {
            debug k => _15;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1020:26: 1020:27
            debug v => _16;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1020:29: 1020:30
            let _15: &HM<'_>;            // in scope 2 at ui/drop/dropck_legal_cycles.rs:1020:26: 1020:27
            let _16: &HM<'_>;            // in scope 2 at ui/drop/dropck_legal_cycles.rs:1020:29: 1020:30
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<HM<'_>, HM<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1019:31: 1019:50
        _4 = Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1019:31: 1019:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1019:45: 1019:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<HM<'_>, HM<'_>>>>) -> Option<&HashMap<HM<'_>, HM<'_>>> {Cell::<Option<&HashMap<HM<'_>, HM<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1019:16: 1019:28
        switchInt(move _6) -> [1: bb2, otherwise: bb7]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1019:16: 1019:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::HashMap<HM<'_>, HM<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1019:21: 1019:27
        _27 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:44
        _11 = _27;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:44
        _10 = HashMap::<HM<'_>, HM<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1020:38: 1020:42
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<HM<'_>, HM<'_>>) -> std::collections::hash_map::Iter<'a, HM<'_>, HM<'_>> {HashMap::<HM<'_>, HM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:59
        _13 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:49: 1020:54
        _12 = Div(move _13, const 2_usize); // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:49: 1020:58
        _8 = <std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:35: 1020:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1020:45: 1020:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>>, usize) -> Option<<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, HM<'_>, HM<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:20: 1020:32
        switchInt(move _14) -> [1: bb5, otherwise: bb7]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:20: 1020:32
    }

    bb5: {
        _15 = (((_8 as Some).0: (&HM<'_>, &HM<'_>)).0: &HM<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:26: 1020:27
        _16 = (((_8 as Some).0: (&HM<'_>, &HM<'_>)).1: &HM<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1020:29: 1020:30
        _20 = _15;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:18: 1021:19
        _21 = _16;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:21: 1021:22
        _19 = [move _20, move _21];      // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:23
        _23 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:24: 1021:29
        _22 = Rem(move _23, const 2_usize); // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:24: 1021:33
        _24 = const 2_usize;             // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:34
        _25 = Lt(_22, _24);              // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:34
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _22) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:34
    }

    bb6: {
        _28 = deref_copy _19[_22];       // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:61
        _18 = _28;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:61
        _26 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:53: 1021:60
        _17 = <HM<'_> as Children<'_>>::descend_into_self::<C>(move _18, move _26) -> bb7; // scope 2 at ui/drop/dropck_legal_cycles.rs:1021:17: 1021:61
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1021:35: 1021:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a HM<'_>, &'b mut C) {<HM<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1024:6: 1024:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1027:1: 1027:33>::count_children(_1: &VD<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1028:23: 1028:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1028:33: 1028:38
    let mut _2: std::option::Option<&std::collections::VecDeque<VD<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1029:26: 1029:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1029:26: 1029:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1029:16: 1029:23
    let mut _6: std::collections::vec_deque::Iter<'_, VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1029:48: 1029:56
    let mut _7: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1029:48: 1029:56
    scope 1 {
        debug d => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1029:21: 1029:22
        let _5: &std::collections::VecDeque<VD<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1029:21: 1029:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:26: 1029:45
        _2 = Cell::<Option<&VecDeque<VD<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:26: 1029:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1029:40: 1029:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&VecDeque<VD<'_>>>>) -> Option<&VecDeque<VD<'_>>> {Cell::<Option<&VecDeque<VD<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:16: 1029:23
        switchInt(move _4) -> [1: bb2, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:16: 1029:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::VecDeque<VD<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:21: 1029:22
        _7 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:48: 1029:56
        _6 = VecDeque::<VD<'_>>::iter(move _7) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:48: 1029:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1029:50: 1029:54
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<VD<'_>>) -> std::collections::vec_deque::Iter<'a, VD<'_>> {VecDeque::<VD<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::collections::vec_deque::Iter<'_, VD<'_>> as Iterator>::count(move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1029:48: 1029:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1029:57: 1029:62
                                         // + literal: Const { ty: fn(std::collections::vec_deque::Iter<'_, VD<'_>>) -> usize {<std::collections::vec_deque::Iter<'_, VD<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1029:74: 1029:75
        goto -> bb5;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1029:9: 1029:77
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1030:6: 1030:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1027:1: 1027:33>::descend_one_child(_1: &VD<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1031:29: 1031:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1031:36: 1031:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1031:53: 1031:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1032:9: 1032:9
    let mut _4: std::option::Option<&std::collections::VecDeque<VD<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1034:31: 1034:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1034:31: 1034:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1034:16: 1034:28
    let mut _8: std::option::Option<&VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:50
    let mut _9: &mut std::collections::vec_deque::Iter<'_, VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:50
    let mut _10: std::collections::vec_deque::Iter<'_, VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:39
    let mut _11: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:39
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1035:44: 1035:49
    let mut _13: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1035:20: 1035:27
    let _15: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1036:17: 1036:45
    let mut _16: &VD<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1036:17: 1036:45
    let mut _17: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1036:37: 1036:44
    let mut _18: &std::collections::VecDeque<VD<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1034:21: 1034:27
    scope 1 {
        debug vd => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1034:21: 1034:27
        let _7: &&std::collections::VecDeque<VD<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1034:21: 1034:27
        scope 2 {
            debug r => _14;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1035:25: 1035:26
            let _14: &VD<'_>;            // in scope 2 at ui/drop/dropck_legal_cycles.rs:1035:25: 1035:26
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::VecDeque<VD<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1034:31: 1034:50
        _4 = Cell::<Option<&VecDeque<VD<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1034:31: 1034:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1034:45: 1034:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&VecDeque<VD<'_>>>>) -> Option<&VecDeque<VD<'_>>> {Cell::<Option<&VecDeque<VD<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1034:16: 1034:28
        switchInt(move _6) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1034:16: 1034:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::VecDeque<VD<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1034:21: 1034:27
        _18 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:39
        _11 = _18;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:39
        _10 = VecDeque::<VD<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1035:33: 1035:37
                                         // + literal: Const { ty: for<'a> fn(&'a VecDeque<VD<'_>>) -> std::collections::vec_deque::Iter<'a, VD<'_>> {VecDeque::<VD<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:50
        _12 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:44: 1035:49
        _8 = <std::collections::vec_deque::Iter<'_, VD<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:30: 1035:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1035:40: 1035:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::vec_deque::Iter<'_, VD<'_>>, usize) -> Option<<std::collections::vec_deque::Iter<'_, VD<'_>> as Iterator>::Item> {<std::collections::vec_deque::Iter<'_, VD<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:20: 1035:27
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:20: 1035:27
    }

    bb5: {
        _14 = ((_8 as Some).0: &VD<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1035:25: 1035:26
        _16 = _14;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1036:17: 1036:45
        _17 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1036:37: 1036:44
        _15 = <VD<'_> as Children<'_>>::descend_into_self::<C>(move _16, move _17) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1036:17: 1036:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1036:19: 1036:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a VD<'_>, &'b mut C) {<VD<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1039:6: 1039:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1042:1: 1042:33>::count_children(_1: &VM<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1043:23: 1043:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1043:33: 1043:38
    let mut _2: std::option::Option<&std::collections::HashMap<usize, VM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1044:26: 1044:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1044:26: 1044:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1044:16: 1044:23
    let mut _6: std::collections::hash_map::Iter<'_, usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1044:48: 1044:56
    let mut _7: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1044:48: 1044:56
    scope 1 {
        debug m => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1044:21: 1044:22
        let _5: &std::collections::HashMap<usize, VM<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1044:21: 1044:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:26: 1044:45
        _2 = Cell::<Option<&HashMap<usize, VM<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:26: 1044:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1044:40: 1044:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<usize, VM<'_>>>>) -> Option<&HashMap<usize, VM<'_>>> {Cell::<Option<&HashMap<usize, VM<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:16: 1044:23
        switchInt(move _4) -> [1: bb2, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:16: 1044:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::HashMap<usize, VM<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:21: 1044:22
        _7 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:48: 1044:56
        _6 = HashMap::<usize, VM<'_>>::iter(move _7) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:48: 1044:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1044:50: 1044:54
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, VM<'_>>) -> std::collections::hash_map::Iter<'a, usize, VM<'_>> {HashMap::<usize, VM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::collections::hash_map::Iter<'_, usize, VM<'_>> as Iterator>::count(move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1044:48: 1044:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1044:57: 1044:62
                                         // + literal: Const { ty: fn(std::collections::hash_map::Iter<'_, usize, VM<'_>>) -> usize {<std::collections::hash_map::Iter<'_, usize, VM<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1044:74: 1044:75
        goto -> bb5;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1044:9: 1044:77
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1045:6: 1045:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1042:1: 1042:33>::descend_one_child(_1: &VM<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1046:29: 1046:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1046:36: 1046:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1046:53: 1046:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1047:9: 1047:9
    let mut _4: std::option::Option<&std::collections::HashMap<usize, VM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1049:31: 1049:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1049:31: 1049:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1049:16: 1049:28
    let mut _8: std::option::Option<(&usize, &VM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:58
    let mut _9: &mut std::collections::hash_map::Iter<'_, usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:58
    let mut _10: std::collections::hash_map::Iter<'_, usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:47
    let mut _11: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:47
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1050:52: 1050:57
    let mut _13: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1050:20: 1050:35
    let _16: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1051:17: 1051:45
    let mut _17: &VM<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1051:17: 1051:45
    let mut _18: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1051:37: 1051:44
    let mut _19: &std::collections::HashMap<usize, VM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1049:21: 1049:27
    scope 1 {
        debug vd => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1049:21: 1049:27
        let _7: &&std::collections::HashMap<usize, VM<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1049:21: 1049:27
        scope 2 {
            debug _idx => _14;           // in scope 2 at ui/drop/dropck_legal_cycles.rs:1050:26: 1050:30
            debug r => _15;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1050:32: 1050:33
            let _14: &usize;             // in scope 2 at ui/drop/dropck_legal_cycles.rs:1050:26: 1050:30
            let _15: &VM<'_>;            // in scope 2 at ui/drop/dropck_legal_cycles.rs:1050:32: 1050:33
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::HashMap<usize, VM<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1049:31: 1049:50
        _4 = Cell::<Option<&HashMap<usize, VM<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1049:31: 1049:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1049:45: 1049:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&HashMap<usize, VM<'_>>>>) -> Option<&HashMap<usize, VM<'_>>> {Cell::<Option<&HashMap<usize, VM<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1049:16: 1049:28
        switchInt(move _6) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1049:16: 1049:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::HashMap<usize, VM<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1049:21: 1049:27
        _19 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:47
        _11 = _19;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:47
        _10 = HashMap::<usize, VM<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1050:41: 1050:45
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<usize, VM<'_>>) -> std::collections::hash_map::Iter<'a, usize, VM<'_>> {HashMap::<usize, VM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:58
        _12 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:52: 1050:57
        _8 = <std::collections::hash_map::Iter<'_, usize, VM<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:38: 1050:58
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1050:48: 1050:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::hash_map::Iter<'_, usize, VM<'_>>, usize) -> Option<<std::collections::hash_map::Iter<'_, usize, VM<'_>> as Iterator>::Item> {<std::collections::hash_map::Iter<'_, usize, VM<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:20: 1050:35
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:20: 1050:35
    }

    bb5: {
        _14 = (((_8 as Some).0: (&usize, &VM<'_>)).0: &usize); // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:26: 1050:30
        _15 = (((_8 as Some).0: (&usize, &VM<'_>)).1: &VM<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1050:32: 1050:33
        _17 = _15;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1051:17: 1051:45
        _18 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1051:37: 1051:44
        _16 = <VM<'_> as Children<'_>>::descend_into_self::<C>(move _17, move _18) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1051:17: 1051:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1051:19: 1051:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a VM<'_>, &'b mut C) {<VM<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1054:6: 1054:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1057:1: 1057:33>::count_children(_1: &LL<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1058:23: 1058:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1058:33: 1058:38
    let mut _2: std::option::Option<&std::collections::LinkedList<LL<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1059:26: 1059:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1059:26: 1059:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1059:16: 1059:23
    let mut _6: std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1059:48: 1059:56
    let mut _7: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1059:48: 1059:56
    scope 1 {
        debug l => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1059:21: 1059:22
        let _5: &std::collections::LinkedList<LL<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1059:21: 1059:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:26: 1059:45
        _2 = Cell::<Option<&LinkedList<LL<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:26: 1059:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1059:40: 1059:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&LinkedList<LL<'_>>>>) -> Option<&LinkedList<LL<'_>>> {Cell::<Option<&LinkedList<LL<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:16: 1059:23
        switchInt(move _4) -> [1: bb2, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:16: 1059:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::LinkedList<LL<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:21: 1059:22
        _7 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:48: 1059:56
        _6 = LinkedList::<LL<'_>>::iter(move _7) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:48: 1059:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1059:50: 1059:54
                                         // + literal: Const { ty: for<'a> fn(&'a LinkedList<LL<'_>>) -> std::collections::linked_list::Iter<'a, LL<'_>> {LinkedList::<LL<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::count(move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1059:48: 1059:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1059:57: 1059:62
                                         // + literal: Const { ty: fn(std::collections::linked_list::Iter<'_, LL<'_>>) -> usize {<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1059:74: 1059:75
        goto -> bb5;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1059:9: 1059:77
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1060:6: 1060:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1057:1: 1057:33>::descend_one_child(_1: &LL<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1061:29: 1061:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1061:36: 1061:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1061:53: 1061:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1062:9: 1062:9
    let mut _4: std::option::Option<&std::collections::LinkedList<LL<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1064:31: 1064:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1064:31: 1064:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1064:16: 1064:28
    let mut _8: std::option::Option<&LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:50
    let mut _9: &mut std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:50
    let mut _10: std::collections::linked_list::Iter<'_, LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:39
    let mut _11: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:39
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1065:44: 1065:49
    let mut _13: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1065:20: 1065:27
    let _15: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1066:17: 1066:45
    let mut _16: &LL<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1066:17: 1066:45
    let mut _17: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1066:37: 1066:44
    let mut _18: &std::collections::LinkedList<LL<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1064:21: 1064:27
    scope 1 {
        debug ll => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1064:21: 1064:27
        let _7: &&std::collections::LinkedList<LL<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1064:21: 1064:27
        scope 2 {
            debug r => _14;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1065:25: 1065:26
            let _14: &LL<'_>;            // in scope 2 at ui/drop/dropck_legal_cycles.rs:1065:25: 1065:26
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::LinkedList<LL<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1064:31: 1064:50
        _4 = Cell::<Option<&LinkedList<LL<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1064:31: 1064:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1064:45: 1064:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&LinkedList<LL<'_>>>>) -> Option<&LinkedList<LL<'_>>> {Cell::<Option<&LinkedList<LL<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1064:16: 1064:28
        switchInt(move _6) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1064:16: 1064:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::LinkedList<LL<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1064:21: 1064:27
        _18 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:39
        _11 = _18;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:39
        _10 = LinkedList::<LL<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1065:33: 1065:37
                                         // + literal: Const { ty: for<'a> fn(&'a LinkedList<LL<'_>>) -> std::collections::linked_list::Iter<'a, LL<'_>> {LinkedList::<LL<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:50
        _12 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:44: 1065:49
        _8 = <std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:30: 1065:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1065:40: 1065:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::linked_list::Iter<'_, LL<'_>>, usize) -> Option<<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::Item> {<std::collections::linked_list::Iter<'_, LL<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:20: 1065:27
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:20: 1065:27
    }

    bb5: {
        _14 = ((_8 as Some).0: &LL<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1065:25: 1065:26
        _16 = _14;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1066:17: 1066:45
        _17 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1066:37: 1066:44
        _15 = <LL<'_> as Children<'_>>::descend_into_self::<C>(move _16, move _17) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1066:17: 1066:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1066:19: 1066:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a LL<'_>, &'b mut C) {<LL<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1069:6: 1069:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1072:1: 1072:33>::count_children(_1: &BH<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1073:23: 1073:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1073:33: 1073:38
    let mut _2: std::option::Option<&std::collections::BinaryHeap<BH<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1074:26: 1074:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1074:26: 1074:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1074:16: 1074:23
    let mut _6: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1074:48: 1074:56
    let mut _7: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1074:48: 1074:56
    scope 1 {
        debug h => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1074:21: 1074:22
        let _5: &std::collections::BinaryHeap<BH<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1074:21: 1074:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:26: 1074:45
        _2 = Cell::<Option<&BinaryHeap<BH<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:26: 1074:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1074:40: 1074:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BinaryHeap<BH<'_>>>>) -> Option<&BinaryHeap<BH<'_>>> {Cell::<Option<&BinaryHeap<BH<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:16: 1074:23
        switchInt(move _4) -> [1: bb2, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:16: 1074:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::BinaryHeap<BH<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:21: 1074:22
        _7 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:48: 1074:56
        _6 = BinaryHeap::<BH<'_>>::iter(move _7) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:48: 1074:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1074:50: 1074:54
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<BH<'_>>) -> std::collections::binary_heap::Iter<'a, BH<'_>> {BinaryHeap::<BH<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::count(move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1074:48: 1074:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1074:57: 1074:62
                                         // + literal: Const { ty: fn(std::collections::binary_heap::Iter<'_, BH<'_>>) -> usize {<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1074:74: 1074:75
        goto -> bb5;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1074:9: 1074:77
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1075:6: 1075:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1072:1: 1072:33>::descend_one_child(_1: &BH<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1076:29: 1076:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1076:36: 1076:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1076:53: 1076:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1077:9: 1077:9
    let mut _4: std::option::Option<&std::collections::BinaryHeap<BH<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1079:31: 1079:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1079:31: 1079:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1079:16: 1079:28
    let mut _8: std::option::Option<&BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:50
    let mut _9: &mut std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:50
    let mut _10: std::collections::binary_heap::Iter<'_, BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:39
    let mut _11: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:39
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1080:44: 1080:49
    let mut _13: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1080:20: 1080:27
    let _15: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1081:17: 1081:45
    let mut _16: &BH<'_>;                // in scope 0 at ui/drop/dropck_legal_cycles.rs:1081:17: 1081:45
    let mut _17: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1081:37: 1081:44
    let mut _18: &std::collections::BinaryHeap<BH<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1079:21: 1079:27
    scope 1 {
        debug bh => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1079:21: 1079:27
        let _7: &&std::collections::BinaryHeap<BH<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1079:21: 1079:27
        scope 2 {
            debug r => _14;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1080:25: 1080:26
            let _14: &BH<'_>;            // in scope 2 at ui/drop/dropck_legal_cycles.rs:1080:25: 1080:26
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::BinaryHeap<BH<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1079:31: 1079:50
        _4 = Cell::<Option<&BinaryHeap<BH<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1079:31: 1079:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1079:45: 1079:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BinaryHeap<BH<'_>>>>) -> Option<&BinaryHeap<BH<'_>>> {Cell::<Option<&BinaryHeap<BH<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1079:16: 1079:28
        switchInt(move _6) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1079:16: 1079:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::BinaryHeap<BH<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1079:21: 1079:27
        _18 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:39
        _11 = _18;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:39
        _10 = BinaryHeap::<BH<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1080:33: 1080:37
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<BH<'_>>) -> std::collections::binary_heap::Iter<'a, BH<'_>> {BinaryHeap::<BH<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:50
        _12 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:44: 1080:49
        _8 = <std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:30: 1080:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1080:40: 1080:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::binary_heap::Iter<'_, BH<'_>>, usize) -> Option<<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::Item> {<std::collections::binary_heap::Iter<'_, BH<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:20: 1080:27
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:20: 1080:27
    }

    bb5: {
        _14 = ((_8 as Some).0: &BH<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1080:25: 1080:26
        _16 = _14;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1081:17: 1081:45
        _17 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1081:37: 1081:44
        _15 = <BH<'_> as Children<'_>>::descend_into_self::<C>(move _16, move _17) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1081:17: 1081:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1081:19: 1081:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BH<'_>, &'b mut C) {<BH<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1084:6: 1084:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1087:1: 1087:34>::count_children(_1: &BTM<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1088:23: 1088:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1088:33: 1088:38
    let mut _2: std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:26: 1089:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:26: 1089:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:16: 1089:23
    let mut _6: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:52: 1089:68
    let mut _7: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:52: 1089:60
    let mut _8: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:52: 1089:60
    let mut _9: (usize, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:1089:48: 1089:68
    scope 1 {
        debug m => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1089:21: 1089:22
        let _5: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1089:21: 1089:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:26: 1089:45
        _2 = Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:26: 1089:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1089:40: 1089:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>) -> Option<&BTreeMap<BTM<'_>, BTM<'_>>> {Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:16: 1089:23
        switchInt(move _4) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:16: 1089:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:21: 1089:22
        _8 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:52: 1089:60
        _7 = BTreeMap::<BTM<'_>, BTM<'_>>::iter(move _8) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:52: 1089:60
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1089:54: 1089:58
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<BTM<'_>, BTM<'_>>) -> std::collections::btree_map::Iter<'a, BTM<'_>, BTM<'_>> {BTreeMap::<BTM<'_>, BTM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = <std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::count(move _7) -> bb4; // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:52: 1089:68
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1089:61: 1089:66
                                         // + literal: Const { ty: fn(std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>) -> usize {<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = CheckedMul(const 2_usize, _6); // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:48: 1089:68
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:48: 1089:68
    }

    bb5: {
        _0 = move (_9.0: usize);         // scope 1 at ui/drop/dropck_legal_cycles.rs:1089:48: 1089:68
        goto -> bb7;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1089:9: 1089:81
    }

    bb6: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1089:78: 1089:79
        goto -> bb7;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1089:9: 1089:81
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1090:6: 1090:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1087:1: 1087:34>::descend_one_child(_1: &BTM<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1091:29: 1091:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1091:36: 1091:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1091:53: 1091:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1092:9: 1092:9
    let mut _4: std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1094:31: 1094:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1094:31: 1094:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1094:16: 1094:28
    let mut _8: std::option::Option<(&BTM<'_>, &BTM<'_>)>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:59
    let mut _9: &mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:59
    let mut _10: std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:44
    let mut _11: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:44
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:49: 1095:58
    let mut _13: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:49: 1095:54
    let mut _14: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1095:20: 1095:32
    let _17: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:61
    let mut _18: &BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:61
    let _19: [&BTM<'_>; 2];              // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:23
    let mut _20: &BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:18: 1096:19
    let mut _21: &BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:21: 1096:22
    let _22: usize;                      // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:24: 1096:33
    let mut _23: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:24: 1096:29
    let mut _24: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:34
    let mut _25: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:34
    let mut _26: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:53: 1096:60
    let mut _27: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1094:21: 1094:27
    let mut _28: &BTM<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:23
    scope 1 {
        debug bh => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1094:21: 1094:27
        let _7: &&std::collections::BTreeMap<BTM<'_>, BTM<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1094:21: 1094:27
        scope 2 {
            debug k => _15;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1095:26: 1095:27
            debug v => _16;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1095:29: 1095:30
            let _15: &BTM<'_>;           // in scope 2 at ui/drop/dropck_legal_cycles.rs:1095:26: 1095:27
            let _16: &BTM<'_>;           // in scope 2 at ui/drop/dropck_legal_cycles.rs:1095:29: 1095:30
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::BTreeMap<BTM<'_>, BTM<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1094:31: 1094:50
        _4 = Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1094:31: 1094:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1094:45: 1094:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>) -> Option<&BTreeMap<BTM<'_>, BTM<'_>>> {Cell::<Option<&BTreeMap<BTM<'_>, BTM<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1094:16: 1094:28
        switchInt(move _6) -> [1: bb2, otherwise: bb7]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1094:16: 1094:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::BTreeMap<BTM<'_>, BTM<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1094:21: 1094:27
        _27 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:44
        _11 = _27;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:44
        _10 = BTreeMap::<BTM<'_>, BTM<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:44
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1095:38: 1095:42
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<BTM<'_>, BTM<'_>>) -> std::collections::btree_map::Iter<'a, BTM<'_>, BTM<'_>> {BTreeMap::<BTM<'_>, BTM<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:59
        _13 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:49: 1095:54
        _12 = Div(move _13, const 2_usize); // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:49: 1095:58
        _8 = <std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:35: 1095:59
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1095:45: 1095:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>>, usize) -> Option<<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::Item> {<std::collections::btree_map::Iter<'_, BTM<'_>, BTM<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:20: 1095:32
        switchInt(move _14) -> [1: bb5, otherwise: bb7]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:20: 1095:32
    }

    bb5: {
        _15 = (((_8 as Some).0: (&BTM<'_>, &BTM<'_>)).0: &BTM<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:26: 1095:27
        _16 = (((_8 as Some).0: (&BTM<'_>, &BTM<'_>)).1: &BTM<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1095:29: 1095:30
        _20 = _15;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:18: 1096:19
        _21 = _16;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:21: 1096:22
        _19 = [move _20, move _21];      // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:23
        _23 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:24: 1096:29
        _22 = Rem(move _23, const 2_usize); // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:24: 1096:33
        _24 = const 2_usize;             // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:34
        _25 = Lt(_22, _24);              // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:34
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _22) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:34
    }

    bb6: {
        _28 = deref_copy _19[_22];       // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:61
        _18 = _28;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:61
        _26 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:53: 1096:60
        _17 = <BTM<'_> as Children<'_>>::descend_into_self::<C>(move _18, move _26) -> bb7; // scope 2 at ui/drop/dropck_legal_cycles.rs:1096:17: 1096:61
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1096:35: 1096:52
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTM<'_>, &'b mut C) {<BTM<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1099:6: 1099:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1102:1: 1102:34>::count_children(_1: &BTS<'_>) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1103:23: 1103:28
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1103:33: 1103:38
    let mut _2: std::option::Option<&std::collections::BTreeSet<BTS<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1104:26: 1104:45
    let mut _3: &std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1104:26: 1104:45
    let mut _4: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1104:16: 1104:23
    let mut _6: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1104:48: 1104:56
    let mut _7: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1104:48: 1104:56
    scope 1 {
        debug s => _5;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1104:21: 1104:22
        let _5: &std::collections::BTreeSet<BTS<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1104:21: 1104:22
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:26: 1104:45
        _2 = Cell::<Option<&BTreeSet<BTS<'_>>>>::get(move _3) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:26: 1104:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1104:40: 1104:43
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeSet<BTS<'_>>>>) -> Option<&BTreeSet<BTS<'_>>> {Cell::<Option<&BTreeSet<BTS<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:16: 1104:23
        switchInt(move _4) -> [1: bb2, otherwise: bb4]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:16: 1104:23
    }

    bb2: {
        _5 = ((_2 as Some).0: &std::collections::BTreeSet<BTS<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:21: 1104:22
        _7 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:48: 1104:56
        _6 = BTreeSet::<BTS<'_>>::iter(move _7) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:48: 1104:56
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1104:50: 1104:54
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeSet<BTS<'_>>) -> std::collections::btree_set::Iter<'a, BTS<'_>> {BTreeSet::<BTS<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = <std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::count(move _6) -> bb5; // scope 1 at ui/drop/dropck_legal_cycles.rs:1104:48: 1104:64
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1104:57: 1104:62
                                         // + literal: Const { ty: fn(std::collections::btree_set::Iter<'_, BTS<'_>>) -> usize {<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1104:74: 1104:75
        goto -> bb5;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1104:9: 1104:77
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1105:6: 1105:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1102:1: 1102:34>::descend_one_child(_1: &BTS<'_>, _2: &mut C, _3: usize) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1106:29: 1106:34
    debug context => _2;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1106:36: 1106:43
    debug index => _3;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1106:53: 1106:58
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1107:9: 1107:9
    let mut _4: std::option::Option<&std::collections::BTreeSet<BTS<'_>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1109:31: 1109:50
    let mut _5: &std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1109:31: 1109:50
    let mut _6: isize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1109:16: 1109:28
    let mut _8: std::option::Option<&BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:50
    let mut _9: &mut std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:50
    let mut _10: std::collections::btree_set::Iter<'_, BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:39
    let mut _11: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:39
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1110:44: 1110:49
    let mut _13: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1110:20: 1110:27
    let _15: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1111:17: 1111:45
    let mut _16: &BTS<'_>;               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1111:17: 1111:45
    let mut _17: &mut C;                 // in scope 0 at ui/drop/dropck_legal_cycles.rs:1111:37: 1111:44
    let mut _18: &std::collections::BTreeSet<BTS<'_>>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1109:21: 1109:27
    scope 1 {
        debug bh => _7;                  // in scope 1 at ui/drop/dropck_legal_cycles.rs:1109:21: 1109:27
        let _7: &&std::collections::BTreeSet<BTS<'_>>; // in scope 1 at ui/drop/dropck_legal_cycles.rs:1109:21: 1109:27
        scope 2 {
            debug r => _14;              // in scope 2 at ui/drop/dropck_legal_cycles.rs:1110:25: 1110:26
            let _14: &BTS<'_>;           // in scope 2 at ui/drop/dropck_legal_cycles.rs:1110:25: 1110:26
        }
    }

    bb0: {
        _5 = &((*_1).2: std::cell::Cell<std::option::Option<&std::collections::BTreeSet<BTS<'_>>>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1109:31: 1109:50
        _4 = Cell::<Option<&BTreeSet<BTS<'_>>>>::get(move _5) -> bb1; // scope 1 at ui/drop/dropck_legal_cycles.rs:1109:31: 1109:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1109:45: 1109:48
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<Option<&BTreeSet<BTS<'_>>>>) -> Option<&BTreeSet<BTS<'_>>> {Cell::<Option<&BTreeSet<BTS<'_>>>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_4);           // scope 1 at ui/drop/dropck_legal_cycles.rs:1109:16: 1109:28
        switchInt(move _6) -> [1: bb2, otherwise: bb6]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1109:16: 1109:28
    }

    bb2: {
        _7 = &((_4 as Some).0: &std::collections::BTreeSet<BTS<'_>>); // scope 1 at ui/drop/dropck_legal_cycles.rs:1109:21: 1109:27
        _18 = deref_copy (*_7);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:39
        _11 = _18;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:39
        _10 = BTreeSet::<BTS<'_>>::iter(move _11) -> bb3; // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1110:33: 1110:37
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeSet<BTS<'_>>) -> std::collections::btree_set::Iter<'a, BTS<'_>> {BTreeSet::<BTS<'_>>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _10;                   // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:50
        _12 = _3;                        // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:44: 1110:49
        _8 = <std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::nth(move _9, move _12) -> bb4; // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:30: 1110:50
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1110:40: 1110:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::collections::btree_set::Iter<'_, BTS<'_>>, usize) -> Option<<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::Item> {<std::collections::btree_set::Iter<'_, BTS<'_>> as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = discriminant(_8);          // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:20: 1110:27
        switchInt(move _13) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:20: 1110:27
    }

    bb5: {
        _14 = ((_8 as Some).0: &BTS<'_>); // scope 2 at ui/drop/dropck_legal_cycles.rs:1110:25: 1110:26
        _16 = _14;                       // scope 2 at ui/drop/dropck_legal_cycles.rs:1111:17: 1111:45
        _17 = &mut (*_2);                // scope 2 at ui/drop/dropck_legal_cycles.rs:1111:37: 1111:44
        _15 = <BTS<'_> as Children<'_>>::descend_into_self::<C>(move _16, move _17) -> bb6; // scope 2 at ui/drop/dropck_legal_cycles.rs:1111:17: 1111:45
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1111:19: 1111:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTS<'_>, &'b mut C) {<BTS<'_> as Children<'_>>::descend_into_self::<C>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1114:6: 1114:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1117:16: 1117:21>::clone(_1: &ContextData) -> ContextData {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1117:16: 1117:21
    let mut _0: ContextData;             // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1117:16: 1117:21
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 4 at ui/drop/dropck_legal_cycles.rs:1117:16: 1117:21
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1117:21: 1117:21
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1129:1: 1129:29>::next_index(_1: &mut ContextData, _2: usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1130:19: 1130:28
    debug len => _2;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:1130:30: 1130:33
    let mut _0: usize;                   // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1130:45: 1130:50
    let mut _3: bool;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1131:12: 1131:19
    let mut _4: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1131:12: 1131:15
    let mut _5: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1132:13: 1132:21
    let mut _6: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1132:24: 1132:27
    let mut _10: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1136:15: 1136:23
    let mut _11: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1136:15: 1136:19
    let mut _12: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1137:19: 1137:29
    let mut _13: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1137:20: 1137:23
    let mut _14: (usize, bool);          // in scope 0 at ui/drop/dropck_legal_cycles.rs:1137:19: 1137:29
    let mut _15: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1137:32: 1137:51
    let mut _16: u64;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1137:32: 1137:42
    let mut _17: u64;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1137:33: 1137:37
    let mut _18: u64;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1138:20: 1138:24
    let mut _19: (u64, bool);            // in scope 0 at ui/drop/dropck_legal_cycles.rs:1138:20: 1138:29
    let mut _20: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1139:20: 1139:24
    let mut _21: (usize, bool);          // in scope 0 at ui/drop/dropck_legal_cycles.rs:1139:20: 1139:29
    let mut _22: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1141:15: 1141:18
    let mut _23: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1141:21: 1141:24
    let mut _24: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1141:15: 1141:24
    let mut _25: u64;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1144:29: 1144:33
    scope 1 {
        debug pow2 => _5;                // in scope 1 at ui/drop/dropck_legal_cycles.rs:1132:13: 1132:21
        let _7: usize;                   // in scope 1 at ui/drop/dropck_legal_cycles.rs:1133:13: 1133:23
        scope 2 {
            debug _pow2_orig => _7;      // in scope 2 at ui/drop/dropck_legal_cycles.rs:1133:13: 1133:23
            let mut _8: usize;           // in scope 2 at ui/drop/dropck_legal_cycles.rs:1134:13: 1134:20
            scope 3 {
                debug idx => _8;         // in scope 3 at ui/drop/dropck_legal_cycles.rs:1134:13: 1134:20
                let mut _9: u64;         // in scope 3 at ui/drop/dropck_legal_cycles.rs:1135:13: 1135:21
                scope 4 {
                    debug bits => _9;    // in scope 4 at ui/drop/dropck_legal_cycles.rs:1135:13: 1135:21
                }
            }
        }
    }

    bb0: {
        _4 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:1131:12: 1131:15
        _3 = Lt(move _4, const 2_usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1131:12: 1131:19
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1131:12: 1131:19
    }

    bb1: {
        _0 = const 0_usize;              // scope 0 at ui/drop/dropck_legal_cycles.rs:1131:29: 1131:30
        goto -> bb11;                    // scope 0 at no-location
    }

    bb2: {
        _6 = _2;                         // scope 0 at ui/drop/dropck_legal_cycles.rs:1132:24: 1132:27
        _5 = core::num::<impl usize>::next_power_of_two(move _6) -> bb3; // scope 0 at ui/drop/dropck_legal_cycles.rs:1132:24: 1132:47
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1132:28: 1132:45
                                         // + literal: Const { ty: fn(usize) -> usize {core::num::<impl usize>::next_power_of_two}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _5;                         // scope 1 at ui/drop/dropck_legal_cycles.rs:1133:26: 1133:30
        _8 = const 0_usize;              // scope 2 at ui/drop/dropck_legal_cycles.rs:1134:23: 1134:24
        _9 = ((*_1).7: u64);             // scope 3 at ui/drop/dropck_legal_cycles.rs:1135:24: 1135:41
        goto -> bb4;                     // scope 4 at ui/drop/dropck_legal_cycles.rs:1136:9: 1140:10
    }

    bb4: {
        _11 = _5;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1136:15: 1136:19
        _10 = Gt(move _11, const 1_usize); // scope 4 at ui/drop/dropck_legal_cycles.rs:1136:15: 1136:23
        switchInt(move _10) -> [0: bb9, otherwise: bb5]; // scope 4 at ui/drop/dropck_legal_cycles.rs:1136:15: 1136:23
    }

    bb5: {
        _13 = _8;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:20: 1137:23
        _14 = CheckedShl(_13, const 1_i32); // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:19: 1137:29
        assert(!move (_14.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb6; // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:19: 1137:29
    }

    bb6: {
        _12 = move (_14.0: usize);       // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:19: 1137:29
        _17 = _9;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:33: 1137:37
        _16 = BitAnd(move _17, const 1_u64); // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:32: 1137:42
        _15 = move _16 as usize (IntToInt); // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:32: 1137:51
        _8 = BitOr(move _12, move _15);  // scope 4 at ui/drop/dropck_legal_cycles.rs:1137:13: 1137:51
        _18 = _9;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1138:20: 1138:24
        _19 = CheckedShr(_18, const 1_i32); // scope 4 at ui/drop/dropck_legal_cycles.rs:1138:20: 1138:29
        assert(!move (_19.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb7; // scope 4 at ui/drop/dropck_legal_cycles.rs:1138:20: 1138:29
    }

    bb7: {
        _9 = move (_19.0: u64);          // scope 4 at ui/drop/dropck_legal_cycles.rs:1138:13: 1138:29
        _20 = _5;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1139:20: 1139:24
        _21 = CheckedShr(_20, const 1_i32); // scope 4 at ui/drop/dropck_legal_cycles.rs:1139:20: 1139:29
        assert(!move (_21.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb8; // scope 4 at ui/drop/dropck_legal_cycles.rs:1139:20: 1139:29
    }

    bb8: {
        _5 = move (_21.0: usize);        // scope 4 at ui/drop/dropck_legal_cycles.rs:1139:13: 1139:29
        goto -> bb4;                     // scope 4 at ui/drop/dropck_legal_cycles.rs:1136:9: 1140:10
    }

    bb9: {
        _22 = _8;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1141:15: 1141:18
        _23 = _2;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1141:21: 1141:24
        _24 = Eq(_23, const 0_usize);    // scope 4 at ui/drop/dropck_legal_cycles.rs:1141:15: 1141:24
        assert(!move _24, "attempt to calculate the remainder of `{}` with a divisor of zero", _22) -> bb10; // scope 4 at ui/drop/dropck_legal_cycles.rs:1141:15: 1141:24
    }

    bb10: {
        _8 = Rem(move _22, move _23);    // scope 4 at ui/drop/dropck_legal_cycles.rs:1141:9: 1141:24
        _25 = _9;                        // scope 4 at ui/drop/dropck_legal_cycles.rs:1144:29: 1144:33
        ((*_1).7: u64) = move _25;       // scope 4 at ui/drop/dropck_legal_cycles.rs:1144:9: 1144:33
        _0 = _8;                         // scope 4 at ui/drop/dropck_legal_cycles.rs:1145:16: 1145:19
        goto -> bb11;                    // scope 0 at no-location
    }

    bb11: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1146:6: 1146:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1129:1: 1129:29>::should_act(_1: &ContextData) -> bool {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1147:19: 1147:24
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1147:29: 1147:33
    let mut _2: bool;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:41
    let mut _3: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:24
    let mut _4: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1148:27: 1148:41
    let mut _5: bool;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1148:45: 1148:75
    let mut _6: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1148:45: 1148:57
    let mut _7: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1148:60: 1148:75

    bb0: {
        _3 = ((*_1).0: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:24
        _4 = ((*_1).1: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:27: 1148:41
        _2 = Lt(move _3, move _4);       // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:41
        switchInt(move _2) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:75
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:75
        goto -> bb3;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:75
    }

    bb2: {
        _6 = ((*_1).2: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:45: 1148:57
        _7 = ((*_1).3: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:60: 1148:75
        _5 = Lt(move _6, move _7);       // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:45: 1148:75
        _0 = move _5;                    // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:75
        goto -> bb3;                     // scope 0 at ui/drop/dropck_legal_cycles.rs:1148:9: 1148:75
    }

    bb3: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1149:6: 1149:6
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1129:1: 1129:29>::increase_visited(_1: &mut ContextData) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1150:25: 1150:34
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1150:36: 1150:36
    let mut _2: (usize, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:1150:38: 1150:55

    bb0: {
        _2 = CheckedAdd(((*_1).2: usize), const 1_usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1150:38: 1150:55
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).2: usize), const 1_usize) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1150:38: 1150:55
    }

    bb1: {
        ((*_1).2: usize) = move (_2.0: usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1150:38: 1150:55
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1150:58: 1150:58
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1129:1: 1129:29>::increase_skipped(_1: &mut ContextData) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1151:25: 1151:34
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1151:36: 1151:36
    let mut _2: (usize, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:1151:38: 1151:55

    bb0: {
        _2 = CheckedAdd(((*_1).4: usize), const 1_usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1151:38: 1151:55
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).4: usize), const 1_usize) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1151:38: 1151:55
    }

    bb1: {
        ((*_1).4: usize) = move (_2.0: usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1151:38: 1151:55
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1151:58: 1151:58
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1129:1: 1129:29>::increase_depth(_1: &mut ContextData) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1152:23: 1152:32
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1152:34: 1152:34
    let mut _2: (usize, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:1152:37: 1152:57

    bb0: {
        _2 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1152:37: 1152:57
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1152:37: 1152:57
    }

    bb1: {
        ((*_1).0: usize) = move (_2.0: usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1152:37: 1152:57
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1152:60: 1152:60
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1129:1: 1129:29>::decrease_depth(_1: &mut ContextData) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1153:23: 1153:32
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1153:34: 1153:34
    let mut _2: (usize, bool);           // in scope 0 at ui/drop/dropck_legal_cycles.rs:1153:37: 1153:57

    bb0: {
        _2 = CheckedSub(((*_1).0: usize), const 1_usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1153:37: 1153:57
        assert(!move (_2.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1153:37: 1153:57
    }

    bb1: {
        ((*_1).0: usize) = move (_2.0: usize); // scope 0 at ui/drop/dropck_legal_cycles.rs:1153:37: 1153:57
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1153:60: 1153:60
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre(_1: &mut ContextData, _2: &T) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1157:12: 1157:21
    debug t => _2;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:1157:23: 1157:24
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1157:30: 1157:30
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    let mut _5: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:21: 1158:36
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    let mut _7: std::option::Option<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    let mut _9: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    let mut _10: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1158:9: 1160:10
    let mut _11: bool;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:38
    let mut _12: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:20
    let mut _13: &T;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:20
    let mut _14: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1162:24: 1162:38
    let mut _15: std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    let mut _16: std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    let mut _17: usize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:25: 1163:40
    let mut _18: std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    let mut _19: std::option::Option<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    let mut _20: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    let mut _21: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    let mut _22: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1163:13: 1165:14
    let _23: ();                         // in scope 0 at ui/drop/dropck_legal_cycles.rs:1169:9: 1169:35
    let mut _24: &T;                     // in scope 0 at ui/drop/dropck_legal_cycles.rs:1169:9: 1169:35
    let mut _25: u32;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1169:20: 1169:34
    scope 1 {
        debug iter => _6;                // in scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    }
    scope 2 {
        debug iter => _18;               // in scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    }

    bb0: {
        _5 = ((*_1).0: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1158:21: 1158:36
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _3;                    // scope 0 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
        goto -> bb2;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:9: 1160:10
    }

    bb2: {
        _9 = &mut _6;                    // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
        _8 = &mut (*_9);                 // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
        _7 = <std::ops::Range<usize> as Iterator>::next(move _8) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    }

    bb4: {
        goto -> bb2;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1159:16: 1159:21
    }

    bb5: {
        unreachable;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1158:18: 1158:36
    }

    bb6: {
        _13 = _2;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:20
        _12 = <T as Marked<u32>>::mark(move _13) -> bb7; // scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:20
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1162:14: 1162:18
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> u32 {<T as Marked<u32>>::mark}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = ((*_1).5: u32);            // scope 0 at ui/drop/dropck_legal_cycles.rs:1162:24: 1162:38
        _11 = Eq(move _12, move _14);    // scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:38
        switchInt(move _11) -> [0: bb15, otherwise: bb8]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1162:12: 1162:38
    }

    bb8: {
        _17 = ((*_1).0: usize);          // scope 0 at ui/drop/dropck_legal_cycles.rs:1163:25: 1163:40
        _16 = std::ops::Range::<usize> { start: const 0_usize, end: move _17 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
        _15 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _16) -> bb9; // scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = move _15;                  // scope 0 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
        goto -> bb10;                    // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:13: 1165:14
    }

    bb10: {
        _21 = &mut _18;                  // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
        _20 = &mut (*_21);               // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
        _19 = <std::ops::Range<usize> as Iterator>::next(move _20) -> bb11; // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = discriminant(_19);         // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
        switchInt(move _22) -> [0: bb14, 1: bb12, otherwise: bb13]; // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    }

    bb12: {
        goto -> bb10;                    // scope 2 at ui/drop/dropck_legal_cycles.rs:1164:20: 1164:25
    }

    bb13: {
        unreachable;                     // scope 2 at ui/drop/dropck_legal_cycles.rs:1163:22: 1163:40
    }

    bb14: {
        ((*_1).6: bool) = const true;    // scope 0 at ui/drop/dropck_legal_cycles.rs:1167:13: 1167:40
        goto -> bb15;                    // scope 0 at ui/drop/dropck_legal_cycles.rs:1162:9: 1168:10
    }

    bb15: {
        _24 = _2;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1169:9: 1169:35
        _25 = ((*_1).5: u32);            // scope 0 at ui/drop/dropck_legal_cycles.rs:1169:20: 1169:34
        _23 = <T as Marked<u32>>::set_mark(move _24, move _25) -> bb16; // scope 0 at ui/drop/dropck_legal_cycles.rs:1169:9: 1169:35
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1169:11: 1169:19
                                         // + literal: Const { ty: for<'a> fn(&'a T, u32) {<T as Marked<u32>>::set_mark}, val: Value(<ZST>) }
    }

    bb16: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1170:6: 1170:6
    }
}

promoted[0] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1166:33: 1166:63
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1166:33: 1166:63

    bb0: {
        _1 = [const "(probably previously marked)\n"]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1166:33: 1166:63
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1166:33: 1166:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1166:33: 1166:63
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1166:33: 1166:63
    }
}

promoted[2] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[3] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1164:35: 1164:38
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1164:35: 1164:38

    bb0: {
        _1 = [const " "];                // scope 0 at ui/drop/dropck_legal_cycles.rs:1164:35: 1164:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1164:35: 1164:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1164:35: 1164:38
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1164:35: 1164:38
    }
}

promoted[4] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38

    bb0: {
        _1 = [const "prev ", const "\n"]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1161:29: 1161:38
    }
}

promoted[5] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[6] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::pre: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1159:31: 1159:34
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1159:31: 1159:34

    bb0: {
        _1 = [const " "];                // scope 0 at ui/drop/dropck_legal_cycles.rs:1159:31: 1159:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1159:31: 1159:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1159:31: 1159:34
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1159:31: 1159:34
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::post(_1: &mut ContextData, _2: &T) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1171:13: 1171:22
    debug t => _2;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:1171:24: 1171:25
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1171:31: 1171:31
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    let mut _5: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:21: 1172:36
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    let mut _7: std::option::Option<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    let mut _9: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    let mut _10: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1172:9: 1174:10
    scope 1 {
        debug iter => _6;                // in scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    }

    bb0: {
        _5 = ((*_1).0: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1172:21: 1172:36
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _3;                    // scope 0 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
        goto -> bb2;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:9: 1174:10
    }

    bb2: {
        _9 = &mut _6;                    // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
        _8 = &mut (*_9);                 // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
        _7 = <std::ops::Range<usize> as Iterator>::next(move _8) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    }

    bb4: {
        goto -> bb2;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1173:16: 1173:21
    }

    bb5: {
        unreachable;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1172:18: 1172:36
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1176:6: 1176:6
    }
}

promoted[0] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::post: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38

    bb0: {
        _1 = [const "post ", const "\n"]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1175:29: 1175:38
    }
}

promoted[1] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::post: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[2] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::post: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1173:31: 1173:34
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1173:31: 1173:34

    bb0: {
        _1 = [const " "];                // scope 0 at ui/drop/dropck_legal_cycles.rs:1173:31: 1173:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1173:31: 1173:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1173:31: 1173:34
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1173:31: 1173:34
    }
}

fn <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::hit_limit(_1: &mut ContextData, _2: &T) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dropck_legal_cycles.rs:1177:18: 1177:27
    debug t => _2;                       // in scope 0 at ui/drop/dropck_legal_cycles.rs:1177:29: 1177:30
    let mut _0: ();                      // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1177:36: 1177:36
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    let mut _5: usize;                   // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:21: 1178:36
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    let mut _7: std::option::Option<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    let mut _9: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    let mut _10: isize;                  // in scope 0 at ui/drop/dropck_legal_cycles.rs:1178:9: 1180:10
    scope 1 {
        debug iter => _6;                // in scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    }

    bb0: {
        _5 = ((*_1).0: usize);           // scope 0 at ui/drop/dropck_legal_cycles.rs:1178:21: 1178:36
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: move _5 }; // scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _3;                    // scope 0 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
        goto -> bb2;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:9: 1180:10
    }

    bb2: {
        _9 = &mut _6;                    // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
        _8 = &mut (*_9);                 // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
        _7 = <std::ops::Range<usize> as Iterator>::next(move _8) -> bb3; // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    }

    bb4: {
        goto -> bb2;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1179:16: 1179:21
    }

    bb5: {
        unreachable;                     // scope 1 at ui/drop/dropck_legal_cycles.rs:1178:18: 1178:36
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1182:6: 1182:6
    }
}

promoted[0] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::hit_limit: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39

    bb0: {
        _1 = [const "LIMIT ", const "\n"]; // scope 0 at ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1181:29: 1181:39
    }
}

promoted[1] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::hit_limit: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:81:28: 81:58
    }
}

promoted[2] in <impl at ui/drop/dropck_legal_cycles.rs:1156:1: 1156:53>::hit_limit: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:1179:31: 1179:34
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dropck_legal_cycles.rs:1179:31: 1179:34

    bb0: {
        _1 = [const " "];                // scope 0 at ui/drop/dropck_legal_cycles.rs:1179:31: 1179:34
                                         // mir::Constant
                                         // + span: ui/drop/dropck_legal_cycles.rs:1179:31: 1179:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dropck_legal_cycles.rs:1179:31: 1179:34
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:1179:31: 1179:34
    }
}

fn RCRC(_1: Rc<RefCell<RCRCData<'_>>>) -> RCRC<'_> {
    let mut _0: RCRC<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:763:1: 763:16

    bb0: {
        _0 = RCRC::<'_>(move _1);        // scope 0 at ui/drop/dropck_legal_cycles.rs:763:1: 763:16
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:763:1: 763:16
    }
}

// MIR FOR CTFE
fn RCRC(_1: Rc<RefCell<RCRCData<'_>>>) -> RCRC<'_> {
    let mut _0: RCRC<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:763:1: 763:16

    bb0: {
        _0 = RCRC::<'_>(move _1);        // scope 0 at ui/drop/dropck_legal_cycles.rs:763:1: 763:16
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:763:1: 763:16
    }
}

fn ARCRC(_1: Arc<RefCell<ARCRCData<'_>>>) -> ARCRC<'_> {
    let mut _0: ARCRC<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:800:1: 800:17

    bb0: {
        _0 = ARCRC::<'_>(move _1);       // scope 0 at ui/drop/dropck_legal_cycles.rs:800:1: 800:17
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:800:1: 800:17
    }
}

// MIR FOR CTFE
fn ARCRC(_1: Arc<RefCell<ARCRCData<'_>>>) -> ARCRC<'_> {
    let mut _0: ARCRC<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:800:1: 800:17

    bb0: {
        _0 = ARCRC::<'_>(move _1);       // scope 0 at ui/drop/dropck_legal_cycles.rs:800:1: 800:17
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:800:1: 800:17
    }
}

fn ARCM(_1: &str, _2: Arc<Mutex<ARCMData<'_>>>) -> ARCM<'_> {
    let mut _0: ARCM<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:840:1: 840:16

    bb0: {
        _0 = ARCM::<'_>(move _1, move _2); // scope 0 at ui/drop/dropck_legal_cycles.rs:840:1: 840:16
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:840:1: 840:16
    }
}

// MIR FOR CTFE
fn ARCM(_1: &str, _2: Arc<Mutex<ARCMData<'_>>>) -> ARCM<'_> {
    let mut _0: ARCM<'_>;                // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:840:1: 840:16

    bb0: {
        _0 = ARCM::<'_>(move _1, move _2); // scope 0 at ui/drop/dropck_legal_cycles.rs:840:1: 840:16
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:840:1: 840:16
    }
}

fn ARCRW(_1: Arc<RwLock<ARCRWData<'_>>>) -> ARCRW<'_> {
    let mut _0: ARCRW<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:883:1: 883:17

    bb0: {
        _0 = ARCRW::<'_>(move _1);       // scope 0 at ui/drop/dropck_legal_cycles.rs:883:1: 883:17
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:883:1: 883:17
    }
}

// MIR FOR CTFE
fn ARCRW(_1: Arc<RwLock<ARCRWData<'_>>>) -> ARCRW<'_> {
    let mut _0: ARCRW<'_>;               // return place in scope 0 at ui/drop/dropck_legal_cycles.rs:883:1: 883:17

    bb0: {
        _0 = ARCRW::<'_>(move _1);       // scope 0 at ui/drop/dropck_legal_cycles.rs:883:1: 883:17
        return;                          // scope 0 at ui/drop/dropck_legal_cycles.rs:883:1: 883:17
    }
}
