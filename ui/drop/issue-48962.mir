// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut ORDER: [usize; 3] = {
    let mut _0: [usize; 3];              // return place in scope 0 at ui/drop/issue-48962.rs:4:19: 4:29

    bb0: {
        _0 = [const 0_usize, const 0_usize, const 0_usize]; // scope 0 at ui/drop/issue-48962.rs:4:32: 4:41
        return;                          // scope 0 at ui/drop/issue-48962.rs:4:1: 4:42
    }
}

ORDER::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/drop/issue-48962.rs:4:27: 4:28

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/drop/issue-48962.rs:4:27: 4:28
        return;                          // scope 0 at ui/drop/issue-48962.rs:4:27: 4:28
    }
}

static mut INDEX: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/drop/issue-48962.rs:5:19: 5:24

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/drop/issue-48962.rs:5:27: 5:28
        return;                          // scope 0 at ui/drop/issue-48962.rs:5:1: 5:29
    }
}

fn <impl at ui/drop/issue-48962.rs:9:1: 9:21>::drop(_1: &mut Dropee) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/issue-48962.rs:10:13: 10:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-48962.rs:10:24: 10:24
    let mut _2: usize;                   // in scope 0 at ui/drop/issue-48962.rs:12:28: 12:34
    let mut _3: *mut [usize; 3];         // in scope 0 at ui/drop/issue-48962.rs:12:13: 12:18
    let _4: usize;                       // in scope 0 at ui/drop/issue-48962.rs:12:19: 12:24
    let mut _5: *mut usize;              // in scope 0 at ui/drop/issue-48962.rs:12:19: 12:24
    let mut _6: usize;                   // in scope 0 at ui/drop/issue-48962.rs:12:13: 12:25
    let mut _7: bool;                    // in scope 0 at ui/drop/issue-48962.rs:12:13: 12:25
    let mut _8: usize;                   // in scope 0 at ui/drop/issue-48962.rs:13:21: 13:26
    let mut _9: *mut usize;              // in scope 0 at ui/drop/issue-48962.rs:13:21: 13:26
    let mut _10: (usize, bool);          // in scope 0 at ui/drop/issue-48962.rs:13:21: 13:30
    let mut _11: *mut usize;             // in scope 0 at ui/drop/issue-48962.rs:13:13: 13:18
    scope 1 {
    }

    bb0: {
        _2 = ((*_1).0: usize);           // scope 1 at ui/drop/issue-48962.rs:12:28: 12:34
        _3 = const {alloc1: *mut [usize; 3]}; // scope 1 at ui/drop/issue-48962.rs:12:13: 12:18
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:12:13: 12:18
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _5 = const {alloc2: *mut usize}; // scope 1 at ui/drop/issue-48962.rs:12:19: 12:24
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:12:19: 12:24
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _4 = (*_5);                      // scope 1 at ui/drop/issue-48962.rs:12:19: 12:24
        _6 = const 3_usize;              // scope 1 at ui/drop/issue-48962.rs:12:13: 12:25
        _7 = Lt(_4, _6);                 // scope 1 at ui/drop/issue-48962.rs:12:13: 12:25
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> bb1; // scope 1 at ui/drop/issue-48962.rs:12:13: 12:25
    }

    bb1: {
        (*_3)[_4] = move _2;             // scope 1 at ui/drop/issue-48962.rs:12:13: 12:34
        _9 = const {alloc2: *mut usize}; // scope 1 at ui/drop/issue-48962.rs:13:21: 13:26
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:13:21: 13:26
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _8 = (*_9);                      // scope 1 at ui/drop/issue-48962.rs:13:21: 13:26
        _10 = CheckedAdd(_8, const 1_usize); // scope 1 at ui/drop/issue-48962.rs:13:21: 13:30
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", move _8, const 1_usize) -> bb2; // scope 1 at ui/drop/issue-48962.rs:13:21: 13:30
    }

    bb2: {
        _11 = const {alloc2: *mut usize}; // scope 1 at ui/drop/issue-48962.rs:13:13: 13:18
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:13:13: 13:18
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        (*_11) = move (_10.0: usize);    // scope 1 at ui/drop/issue-48962.rs:13:13: 13:30
        return;                          // scope 0 at ui/drop/issue-48962.rs:15:6: 15:6
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn add_sentintel() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-48962.rs:18:20: 18:20
    let mut _1: *mut [usize; 3];         // in scope 0 at ui/drop/issue-48962.rs:20:9: 20:14
    let _2: usize;                       // in scope 0 at ui/drop/issue-48962.rs:20:15: 20:20
    let mut _3: *mut usize;              // in scope 0 at ui/drop/issue-48962.rs:20:15: 20:20
    let mut _4: usize;                   // in scope 0 at ui/drop/issue-48962.rs:20:9: 20:21
    let mut _5: bool;                    // in scope 0 at ui/drop/issue-48962.rs:20:9: 20:21
    let mut _6: usize;                   // in scope 0 at ui/drop/issue-48962.rs:21:17: 21:22
    let mut _7: *mut usize;              // in scope 0 at ui/drop/issue-48962.rs:21:17: 21:22
    let mut _8: (usize, bool);           // in scope 0 at ui/drop/issue-48962.rs:21:17: 21:26
    let mut _9: *mut usize;              // in scope 0 at ui/drop/issue-48962.rs:21:9: 21:14
    scope 1 {
    }

    bb0: {
        _1 = const {alloc1: *mut [usize; 3]}; // scope 1 at ui/drop/issue-48962.rs:20:9: 20:14
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:20:9: 20:14
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _3 = const {alloc2: *mut usize}; // scope 1 at ui/drop/issue-48962.rs:20:15: 20:20
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:20:15: 20:20
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _2 = (*_3);                      // scope 1 at ui/drop/issue-48962.rs:20:15: 20:20
        _4 = const 3_usize;              // scope 1 at ui/drop/issue-48962.rs:20:9: 20:21
        _5 = Lt(_2, _4);                 // scope 1 at ui/drop/issue-48962.rs:20:9: 20:21
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _2) -> bb1; // scope 1 at ui/drop/issue-48962.rs:20:9: 20:21
    }

    bb1: {
        (*_1)[_2] = const 2_usize;       // scope 1 at ui/drop/issue-48962.rs:20:9: 20:25
        _7 = const {alloc2: *mut usize}; // scope 1 at ui/drop/issue-48962.rs:21:17: 21:22
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:21:17: 21:22
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _6 = (*_7);                      // scope 1 at ui/drop/issue-48962.rs:21:17: 21:22
        _8 = CheckedAdd(_6, const 1_usize); // scope 1 at ui/drop/issue-48962.rs:21:17: 21:26
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_usize) -> bb2; // scope 1 at ui/drop/issue-48962.rs:21:17: 21:26
    }

    bb2: {
        _9 = const {alloc2: *mut usize}; // scope 1 at ui/drop/issue-48962.rs:21:9: 21:14
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:21:9: 21:14
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        (*_9) = move (_8.0: usize);      // scope 1 at ui/drop/issue-48962.rs:21:9: 21:26
        return;                          // scope 0 at ui/drop/issue-48962.rs:23:2: 23:2
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-48962.rs:25:11: 25:11
    let mut _1: std::boxed::Box<Dropee>; // in scope 0 at ui/drop/issue-48962.rs:26:9: 26:14
    let mut _2: Dropee;                  // in scope 0 at ui/drop/issue-48962.rs:26:26: 26:35
    let _3: Dropee;                      // in scope 0 at ui/drop/issue-48962.rs:27:5: 27:7
    let _4: ();                          // in scope 0 at ui/drop/issue-48962.rs:28:5: 28:20
    let mut _5: Dropee;                  // in scope 0 at ui/drop/issue-48962.rs:29:10: 29:19
    let _6: std::boxed::Box<Dropee>;     // in scope 0 at ui/drop/issue-48962.rs:30:6: 30:7
    let mut _7: (&[usize; 3], &[usize; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &[usize; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: *mut [usize; 3];             // in scope 0 at ui/drop/issue-48962.rs:32:20: 32:25
    let mut _10: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &[usize; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &[usize; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: bool;                   // in scope 0 at ui/drop/issue-48962.rs:34:1: 34:2
    let mut _27: ();                     // in scope 0 at ui/drop/issue-48962.rs:34:1: 34:2
    let mut _28: *const Dropee;          // in scope 0 at ui/drop/issue-48962.rs:26:9: 26:14
    let mut _29: *const Dropee;          // in scope 0 at ui/drop/issue-48962.rs:26:9: 26:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/drop/issue-48962.rs:26:9: 26:14
        scope 2 {
            let _11: &[usize; 3];        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _12: &[usize; 3];        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _25: &[usize; 3];    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _11;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _12;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _17: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _17;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _26 = const false;               // scope 0 at ui/drop/issue-48962.rs:26:9: 26:14
        _2 = const Dropee(1_usize);      // scope 0 at ui/drop/issue-48962.rs:26:26: 26:35
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:26:26: 26:35
                                         // + literal: Const { ty: Dropee, val: Value(Scalar(0x0000000000000001)) }
        _1 = Box::<Dropee>::new(move _2) -> bb1; // scope 0 at ui/drop/issue-48962.rs:26:17: 26:36
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:26:17: 26:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Dropee) -> Box<Dropee> {Box::<Dropee>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _26 = const true;                // scope 0 at ui/drop/issue-48962.rs:26:35: 26:36
        _28 = (((_1.0: std::ptr::Unique<Dropee>).0: std::ptr::NonNull<Dropee>).0: *const Dropee); // scope 1 at ui/drop/issue-48962.rs:27:5: 27:7
        _3 = move (*_28);                // scope 1 at ui/drop/issue-48962.rs:27:5: 27:7
        drop(_3) -> [return: bb2, unwind: bb10]; // scope 1 at ui/drop/issue-48962.rs:27:7: 27:8
    }

    bb2: {
        _4 = add_sentintel() -> [return: bb3, unwind: bb10]; // scope 1 at ui/drop/issue-48962.rs:28:5: 28:20
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:28:5: 28:18
                                         // + literal: Const { ty: fn() {add_sentintel}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = const Dropee(3_usize);      // scope 1 at ui/drop/issue-48962.rs:29:10: 29:19
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:29:10: 29:19
                                         // + literal: Const { ty: Dropee, val: Value(Scalar(0x0000000000000003)) }
        _29 = (((_1.0: std::ptr::Unique<Dropee>).0: std::ptr::NonNull<Dropee>).0: *const Dropee); // scope 1 at ui/drop/issue-48962.rs:29:5: 29:7
        (*_29) = move _5;                // scope 1 at ui/drop/issue-48962.rs:29:5: 29:7
        _26 = const false;               // scope 1 at ui/drop/issue-48962.rs:30:6: 30:7
        _6 = move _1;                    // scope 1 at ui/drop/issue-48962.rs:30:6: 30:7
        drop(_6) -> [return: bb4, unwind: bb10]; // scope 1 at ui/drop/issue-48962.rs:30:8: 30:9
    }

    bb4: {
        _9 = const {alloc1: *mut [usize; 3]}; // scope 2 at ui/drop/issue-48962.rs:32:20: 32:25
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:32:20: 32:25
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _8 = &(*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[usize; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_7.0: &[usize; 3]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_7.1: &[usize; 3]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <[usize; 3] as PartialEq>::eq(move _15, move _16) -> [return: bb5, unwind: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [usize; 3], &'b [usize; 3]) -> bool {<[usize; 3] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = Not(move _14);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<[usize; 3], [usize; 3]>(move _19, move _20, move _22, move _24) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [usize; 3], &'b [usize; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[usize; 3], [usize; 3]>}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = const false;               // scope 0 at ui/drop/issue-48962.rs:34:1: 34:2
        return;                          // scope 0 at ui/drop/issue-48962.rs:34:2: 34:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/issue-48962.rs:25:1: 34:2
    }

    bb9 (cleanup): {
        _26 = const false;               // scope 0 at ui/drop/issue-48962.rs:34:1: 34:2
        _27 = alloc::alloc::box_free::<Dropee, std::alloc::Global>(move (_1.0: std::ptr::Unique<Dropee>), move (_1.1: std::alloc::Global)) -> bb8; // scope 0 at ui/drop/issue-48962.rs:34:1: 34:2
                                         // mir::Constant
                                         // + span: ui/drop/issue-48962.rs:34:1: 34:2
                                         // + literal: Const { ty: unsafe fn(Unique<Dropee>, std::alloc::Global) {alloc::alloc::box_free::<Dropee, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb10 (cleanup): {
        switchInt(_26) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/drop/issue-48962.rs:34:1: 34:2
    }
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &[usize; 3] = {
    let mut _0: &[usize; 3];             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [usize; 3];              // in scope 0 at ui/drop/issue-48962.rs:32:27: 32:36

    bb0: {
        _1 = [const 1_usize, const 2_usize, const 3_usize]; // scope 0 at ui/drop/issue-48962.rs:32:27: 32:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Dropee(_1: usize) -> Dropee {
    let mut _0: Dropee;                  // return place in scope 0 at ui/drop/issue-48962.rs:7:1: 7:14

    bb0: {
        _0 = Dropee(move _1);            // scope 0 at ui/drop/issue-48962.rs:7:1: 7:14
        return;                          // scope 0 at ui/drop/issue-48962.rs:7:1: 7:14
    }
}

// MIR FOR CTFE
fn Dropee(_1: usize) -> Dropee {
    let mut _0: Dropee;                  // return place in scope 0 at ui/drop/issue-48962.rs:7:1: 7:14

    bb0: {
        _0 = Dropee(move _1);            // scope 0 at ui/drop/issue-48962.rs:7:1: 7:14
        return;                          // scope 0 at ui/drop/issue-48962.rs:7:1: 7:14
    }
}
