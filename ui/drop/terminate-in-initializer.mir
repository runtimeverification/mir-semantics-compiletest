// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_break() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:11:17: 11:17
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/drop/terminate-in-initializer.rs:11:30: 11:32
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/drop/terminate-in-initializer.rs:11:30: 11:32
    }

    bb0: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:11:57: 11:57
    }
}

fn test_cont() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:13:16: 13:16
    let mut _1: i32;                     // in scope 0 at ui/drop/terminate-in-initializer.rs:13:22: 13:27
    let mut _2: bool;                    // in scope 0 at ui/drop/terminate-in-initializer.rs:13:39: 13:44
    let mut _3: i32;                     // in scope 0 at ui/drop/terminate-in-initializer.rs:13:39: 13:40
    let mut _4: (i32, bool);             // in scope 0 at ui/drop/terminate-in-initializer.rs:13:47: 13:53
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/drop/terminate-in-initializer.rs:13:22: 13:27
        let _5: std::boxed::Box<isize>;  // in scope 1 at ui/drop/terminate-in-initializer.rs:13:59: 13:61
        scope 2 {
            debug _x => _5;              // in scope 2 at ui/drop/terminate-in-initializer.rs:13:59: 13:61
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/drop/terminate-in-initializer.rs:13:30: 13:31
        goto -> bb1;                     // scope 1 at ui/drop/terminate-in-initializer.rs:13:33: 13:87
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/drop/terminate-in-initializer.rs:13:39: 13:40
        _2 = Lt(move _3, const 1_i32);   // scope 1 at ui/drop/terminate-in-initializer.rs:13:39: 13:44
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 1 at ui/drop/terminate-in-initializer.rs:13:39: 13:44
    }

    bb2: {
        _4 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/drop/terminate-in-initializer.rs:13:47: 13:53
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb3; // scope 1 at ui/drop/terminate-in-initializer.rs:13:47: 13:53
    }

    bb3: {
        _1 = move (_4.0: i32);           // scope 1 at ui/drop/terminate-in-initializer.rs:13:47: 13:53
        goto -> bb1;                     // scope 1 at no-location
    }

    bb4: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:13:89: 13:89
    }
}

fn test_ret() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:15:15: 15:15
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/drop/terminate-in-initializer.rs:15:21: 15:23
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/drop/terminate-in-initializer.rs:15:21: 15:23
    }

    bb0: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:15:47: 15:47
    }
}

fn test_panic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:17:17: 17:17
    let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/drop/terminate-in-initializer.rs:19:5: 19:51
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/drop/terminate-in-initializer.rs:19:5: 19:38
    let mut _3: std::thread::JoinHandle<()>; // in scope 0 at ui/drop/terminate-in-initializer.rs:19:5: 19:31
    let mut _4: [closure@ui/drop/terminate-in-initializer.rs:19:19: 19:25]; // in scope 0 at ui/drop/terminate-in-initializer.rs:19:19: 19:29

    bb0: {
        _3 = spawn::<[closure@ui/drop/terminate-in-initializer.rs:19:19: 19:25], ()>(move _4) -> bb1; // scope 0 at ui/drop/terminate-in-initializer.rs:19:5: 19:31
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:19:5: 19:18
                                         // + literal: Const { ty: fn([closure@ui/drop/terminate-in-initializer.rs:19:19: 19:25]) -> JoinHandle<()> {spawn::<[closure@ui/drop/terminate-in-initializer.rs:19:19: 19:25], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = JoinHandle::<()>::join(move _3) -> bb2; // scope 0 at ui/drop/terminate-in-initializer.rs:19:5: 19:38
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:19:32: 19:36
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> bb3; // scope 0 at ui/drop/terminate-in-initializer.rs:19:5: 19:51
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:19:39: 19:49
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/drop/terminate-in-initializer.rs:19:51: 19:52
    }

    bb4: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:20:2: 20:2
    }
}

fn test_panic::f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:18:12: 18:12
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/drop/terminate-in-initializer.rs:18:18: 18:20
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/drop/terminate-in-initializer.rs:18:18: 18:20
    }

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn test_panic::{closure#0}(_1: [closure@ui/drop/terminate-in-initializer.rs:19:19: 19:25]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:19:26: 19:26

    bb0: {
        _0 = test_panic::f() -> bb1;     // scope 0 at ui/drop/terminate-in-initializer.rs:19:26: 19:29
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:19:26: 19:27
                                         // + literal: Const { ty: fn() {test_panic::f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:19:29: 19:29
    }
}

fn test_panic_indirect() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:22:26: 22:26
    let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/drop/terminate-in-initializer.rs:25:5: 25:51
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/drop/terminate-in-initializer.rs:25:5: 25:38
    let mut _3: std::thread::JoinHandle<()>; // in scope 0 at ui/drop/terminate-in-initializer.rs:25:5: 25:31
    let mut _4: [closure@ui/drop/terminate-in-initializer.rs:25:19: 25:25]; // in scope 0 at ui/drop/terminate-in-initializer.rs:25:19: 25:29

    bb0: {
        _3 = spawn::<[closure@ui/drop/terminate-in-initializer.rs:25:19: 25:25], ()>(move _4) -> bb1; // scope 0 at ui/drop/terminate-in-initializer.rs:25:5: 25:31
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:25:5: 25:18
                                         // + literal: Const { ty: fn([closure@ui/drop/terminate-in-initializer.rs:25:19: 25:25]) -> JoinHandle<()> {spawn::<[closure@ui/drop/terminate-in-initializer.rs:25:19: 25:25], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = JoinHandle::<()>::join(move _3) -> bb2; // scope 0 at ui/drop/terminate-in-initializer.rs:25:5: 25:38
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:25:32: 25:36
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> bb3; // scope 0 at ui/drop/terminate-in-initializer.rs:25:5: 25:51
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:25:39: 25:49
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/drop/terminate-in-initializer.rs:25:51: 25:52
    }

    bb4: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:26:2: 26:2
    }
}

fn test_panic_indirect::f() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/drop/terminate-in-initializer.rs:23:15: 23:16
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn g() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:24:12: 24:12
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/drop/terminate-in-initializer.rs:24:18: 24:20
    let mut _2: !;                       // in scope 0 at ui/drop/terminate-in-initializer.rs:24:35: 24:38
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/drop/terminate-in-initializer.rs:24:18: 24:20
    }

    bb0: {
        _2 = test_panic_indirect::f();   // scope 0 at ui/drop/terminate-in-initializer.rs:24:35: 24:38
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:24:35: 24:36
                                         // + literal: Const { ty: fn() -> ! {test_panic_indirect::f}, val: Value(<ZST>) }
    }
}

fn test_panic_indirect::{closure#0}(_1: [closure@ui/drop/terminate-in-initializer.rs:25:19: 25:25]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:25:26: 25:26

    bb0: {
        _0 = g() -> bb1;                 // scope 0 at ui/drop/terminate-in-initializer.rs:25:26: 25:29
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:25:26: 25:27
                                         // + literal: Const { ty: fn() {g}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:25:29: 25:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/terminate-in-initializer.rs:28:15: 28:15
    let _1: ();                          // in scope 0 at ui/drop/terminate-in-initializer.rs:29:5: 29:17
    let _2: ();                          // in scope 0 at ui/drop/terminate-in-initializer.rs:30:5: 30:16
    let _3: ();                          // in scope 0 at ui/drop/terminate-in-initializer.rs:31:5: 31:15
    let _4: ();                          // in scope 0 at ui/drop/terminate-in-initializer.rs:32:5: 32:17
    let _5: ();                          // in scope 0 at ui/drop/terminate-in-initializer.rs:33:5: 33:26

    bb0: {
        _1 = test_break() -> bb1;        // scope 0 at ui/drop/terminate-in-initializer.rs:29:5: 29:17
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:29:5: 29:15
                                         // + literal: Const { ty: fn() {test_break}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_cont() -> bb2;         // scope 0 at ui/drop/terminate-in-initializer.rs:30:5: 30:16
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:30:5: 30:14
                                         // + literal: Const { ty: fn() {test_cont}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = test_ret() -> bb3;          // scope 0 at ui/drop/terminate-in-initializer.rs:31:5: 31:15
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:31:5: 31:13
                                         // + literal: Const { ty: fn() {test_ret}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = test_panic() -> bb4;        // scope 0 at ui/drop/terminate-in-initializer.rs:32:5: 32:17
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:32:5: 32:15
                                         // + literal: Const { ty: fn() {test_panic}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = test_panic_indirect() -> bb5; // scope 0 at ui/drop/terminate-in-initializer.rs:33:5: 33:26
                                         // mir::Constant
                                         // + span: ui/drop/terminate-in-initializer.rs:33:5: 33:24
                                         // + literal: Const { ty: fn() {test_panic_indirect}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/drop/terminate-in-initializer.rs:34:2: 34:2
    }
}
