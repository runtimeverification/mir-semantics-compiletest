// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<&str>;
    let mut _2: std::boxed::Box<[&str]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[&str; 2]>;
    let _7: &str;
    let mut _9: std::str::Split<'_, &str>;
    let _10: &&str;
    let mut _11: &std::vec::Vec<&str>;
    let mut _12: (&&str, &&str);
    let mut _13: &&str;
    let _14: &&str;
    let mut _15: &std::vec::Vec<&str>;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&&str, &&str);
    let mut _24: &&str;
    let _25: &&str;
    let mut _26: &std::vec::Vec<&str>;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: &str;
    let mut _37: *const [&str; 2];
    let mut _38: *const ();
    let mut _39: usize;
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: bool;
    scope 1 {
        debug args => _1;
        let _8: std::vec::Vec<&str>;
        scope 3 {
            debug arr => _8;
            let _16: &&str;
            let _17: &&str;
            let _27: &&str;
            let _28: &&str;
            let mut _34: &&str;
            let mut _35: &&str;
            scope 4 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _20;
                }
            }
            scope 6 {
                debug left_val => _27;
                debug right_val => _28;
                let _31: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _31;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([&str; 2]);
        _4 = AlignOf([&str; 2]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [&str; 2]);
        _7 = const "asdf::asdf";
        _37 = (((_6.0: std::ptr::Unique<[&str; 2]>).0: std::ptr::NonNull<[&str; 2]>).0: *const [&str; 2]);
        _38 = _37 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(&str);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb19, unwind unreachable];
    }

    bb2: {
        _11 = &_1;
        _10 = <Vec<&str> as Index<usize>>::index(move _11, const 1_usize) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _36 = deref_copy (*_10);
        _9 = core::str::<impl str>::split::<'_, &str>(_36, const "::") -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _8 = <std::str::Split<'_, &str> as Iterator>::collect::<Vec<&str>>(move _9) -> [return: bb5, unwind: bb17];
    }

    bb5: {
        _15 = &_8;
        _14 = <Vec<&str> as Index<usize>>::index(move _15, const 0_usize) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _13 = _14;
        _35 = const _;
        _12 = (move _13, _35);
        _16 = (_12.0: &&str);
        _17 = (_12.1: &&str);
        _19 = <&str as PartialEq>::eq(_16, _17) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, &str>(move _20, _16, _17, move _22) -> bb16;
    }

    bb9: {
        _26 = &_8;
        _25 = <Vec<&str> as Index<usize>>::index(move _26, const 0_usize) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _24 = _25;
        _34 = const _;
        _23 = (move _24, _34);
        _27 = (_23.0: &&str);
        _28 = (_23.1: &&str);
        _30 = <&str as PartialEq>::eq(_27, _28) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<&str, &str>(move _31, _27, _28, move _33) -> bb16;
    }

    bb13: {
        drop(_8) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_1) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_8) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        (*_37) = [const "foobie", _7];
        _2 = move _6 as std::boxed::Box<[&str]> (Pointer(Unsize));
        _1 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "asdf";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "asdf";
        _0 = &_1;
        return;
    }
}
