// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut value: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/drop/drop-struct-as-object.rs:8:19: 8:24

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/drop/drop-struct-as-object.rs:8:27: 8:28
        return;                          // scope 0 at ui/drop/drop-struct-as-object.rs:8:1: 8:29
    }
}

fn <impl at ui/drop/drop-struct-as-object.rs:18:1: 18:19>::get(_1: &Cat) -> usize {
    debug self => _1;                    // in scope 0 at ui/drop/drop-struct-as-object.rs:19:12: 19:17
    let mut _0: usize;                   // return place in scope 0 at ui/drop/drop-struct-as-object.rs:19:22: 19:27

    bb0: {
        _0 = ((*_1).0: usize);           // scope 0 at ui/drop/drop-struct-as-object.rs:19:30: 19:39
        return;                          // scope 0 at ui/drop/drop-struct-as-object.rs:19:41: 19:41
    }
}

fn <impl at ui/drop/drop-struct-as-object.rs:22:1: 22:18>::drop(_1: &mut Cat) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/drop-struct-as-object.rs:23:13: 23:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/drop-struct-as-object.rs:23:24: 23:24
    let mut _2: usize;                   // in scope 0 at ui/drop/drop-struct-as-object.rs:24:26: 24:35
    let mut _3: *mut usize;              // in scope 0 at ui/drop/drop-struct-as-object.rs:24:18: 24:23
    scope 1 {
    }

    bb0: {
        _2 = ((*_1).0: usize);           // scope 1 at ui/drop/drop-struct-as-object.rs:24:26: 24:35
        _3 = const {alloc1: *mut usize}; // scope 1 at ui/drop/drop-struct-as-object.rs:24:18: 24:23
                                         // mir::Constant
                                         // + span: ui/drop/drop-struct-as-object.rs:24:18: 24:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        (*_3) = move _2;                 // scope 1 at ui/drop/drop-struct-as-object.rs:24:18: 24:35
        return;                          // scope 0 at ui/drop/drop-struct-as-object.rs:25:6: 25:6
    }
}

alloc1 (static: value, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/drop-struct-as-object.rs:28:15: 28:15
    let _1: std::boxed::Box<Cat>;        // in scope 0 at ui/drop/drop-struct-as-object.rs:30:13: 30:14
    let mut _2: Cat;                     // in scope 0 at ui/drop/drop-struct-as-object.rs:30:26: 30:40
    let mut _4: std::boxed::Box<dyn Dummy>; // in scope 0 at ui/drop/drop-struct-as-object.rs:31:36: 31:55
    let mut _5: std::boxed::Box<dyn Dummy>; // in scope 0 at ui/drop/drop-struct-as-object.rs:31:36: 31:55
    let mut _6: std::boxed::Box<Cat>;    // in scope 0 at ui/drop/drop-struct-as-object.rs:31:36: 31:37
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: *mut usize;                  // in scope 0 at ui/drop/drop-struct-as-object.rs:34:20: 34:25
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/drop/drop-struct-as-object.rs:30:13: 30:14
        let _3: std::boxed::Box<dyn Dummy>; // in scope 1 at ui/drop/drop-struct-as-object.rs:31:13: 31:17
        scope 2 {
            debug nyan => _3;            // in scope 2 at ui/drop/drop-struct-as-object.rs:31:13: 31:17
        }
    }
    scope 3 {
        let _11: &usize;                 // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &usize;                 // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _25: &usize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 4 {
            debug left_val => _11;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _17;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = const Cat {{ name: 22_usize }}; // scope 0 at ui/drop/drop-struct-as-object.rs:30:26: 30:40
                                         // mir::Constant
                                         // + span: ui/drop/drop-struct-as-object.rs:30:26: 30:40
                                         // + literal: Const { ty: Cat, val: Value(Scalar(0x0000000000000016)) }
        _1 = Box::<Cat>::new(move _2) -> bb1; // scope 0 at ui/drop/drop-struct-as-object.rs:30:17: 30:41
                                         // mir::Constant
                                         // + span: ui/drop/drop-struct-as-object.rs:30:17: 30:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Cat) -> Box<Cat> {Box::<Cat>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _1;                    // scope 1 at ui/drop/drop-struct-as-object.rs:31:36: 31:37
        _5 = move _6 as std::boxed::Box<dyn Dummy> (Pointer(Unsize)); // scope 1 at ui/drop/drop-struct-as-object.rs:31:36: 31:37
        _4 = move _5;                    // scope 1 at ui/drop/drop-struct-as-object.rs:31:36: 31:55
        _3 = move _4 as std::boxed::Box<dyn Dummy> (Pointer(Unsize)); // scope 1 at ui/drop/drop-struct-as-object.rs:31:36: 31:55
        drop(_3) -> bb2;                 // scope 1 at ui/drop/drop-struct-as-object.rs:32:5: 32:6
    }

    bb2: {
        _9 = const {alloc1: *mut usize}; // scope 3 at ui/drop/drop-struct-as-object.rs:34:20: 34:25
                                         // mir::Constant
                                         // + span: ui/drop/drop-struct-as-object.rs:34:20: 34:25
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _8 = &(*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _10);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_7.0: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_7.1: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = const 22_usize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<usize, usize>(move _19, move _20, move _22, move _24); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/drop/drop-struct-as-object.rs:36:2: 36:2
    }
}

alloc1 (static: value, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/drop/drop-struct-as-object.rs:34:27: 34:29

    bb0: {
        _1 = const 22_usize;             // scope 0 at ui/drop/drop-struct-as-object.rs:34:27: 34:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
