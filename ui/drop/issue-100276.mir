// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn let_chains(_1: Result<DirEntry, std::io::Error>) -> () {
    debug entry => _1;                   // in scope 0 at ui/drop/issue-100276.rs:5:15: 5:20
    debug entry => _3;                   // in scope 0 at ui/drop/issue-100276.rs:6:15: 6:20
    debug s => _11;                      // in scope 0 at ui/drop/issue-100276.rs:7:21: 7:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-100276.rs:5:58: 5:58
    let mut _2: isize;                   // in scope 0 at ui/drop/issue-100276.rs:6:12: 6:21
    let _3: std::fs::DirEntry;           // in scope 0 at ui/drop/issue-100276.rs:6:15: 6:20
    let mut _4: std::option::Option<&str>; // in scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
    let mut _5: &std::ffi::OsStr;        // in scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
    let _6: &std::ffi::OsStr;            // in scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
    let mut _7: &std::ffi::OsString;     // in scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
    let _8: std::ffi::OsString;          // in scope 0 at ui/drop/issue-100276.rs:7:26: 7:43
    let mut _9: &std::fs::DirEntry;      // in scope 0 at ui/drop/issue-100276.rs:7:26: 7:43
    let mut _10: isize;                  // in scope 0 at ui/drop/issue-100276.rs:7:16: 7:23
    let _11: &str;                       // in scope 0 at ui/drop/issue-100276.rs:7:21: 7:22
    let mut _12: bool;                   // in scope 0 at ui/drop/issue-100276.rs:8:12: 8:26
    let mut _13: &str;                   // in scope 0 at ui/drop/issue-100276.rs:8:12: 8:26
    let mut _14: bool;                   // in scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    let mut _15: bool;                   // in scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    let mut _16: isize;                  // in scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    let mut _17: isize;                  // in scope 0 at ui/drop/issue-100276.rs:10:1: 10:2

    bb0: {
        _14 = const false;               // scope 0 at ui/drop/issue-100276.rs:6:12: 6:21
        _15 = const false;               // scope 0 at ui/drop/issue-100276.rs:6:12: 6:21
        _15 = const true;                // scope 0 at ui/drop/issue-100276.rs:6:12: 6:21
        _2 = discriminant(_1);           // scope 0 at ui/drop/issue-100276.rs:6:12: 6:21
        switchInt(move _2) -> [0: bb1, otherwise: bb9]; // scope 0 at ui/drop/issue-100276.rs:6:12: 6:21
    }

    bb1: {
        _15 = const false;               // scope 0 at ui/drop/issue-100276.rs:6:15: 6:20
        _3 = move ((_1 as Ok).0: std::fs::DirEntry); // scope 0 at ui/drop/issue-100276.rs:6:15: 6:20
        _9 = &_3;                        // scope 0 at ui/drop/issue-100276.rs:7:26: 7:43
        _8 = DirEntry::file_name(move _9) -> [return: bb2, unwind: bb13]; // scope 0 at ui/drop/issue-100276.rs:7:26: 7:43
                                         // mir::Constant
                                         // + span: ui/drop/issue-100276.rs:7:32: 7:41
                                         // + literal: Const { ty: for<'a> fn(&'a DirEntry) -> OsString {DirEntry::file_name}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = const true;                // scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
        _7 = &_8;                        // scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
        _6 = <OsString as Deref>::deref(move _7) -> [return: bb3, unwind: bb11]; // scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
                                         // mir::Constant
                                         // + span: ui/drop/issue-100276.rs:7:26: 7:52
                                         // + literal: Const { ty: for<'a> fn(&'a OsString) -> &'a <OsString as Deref>::Target {<OsString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _6;                         // scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
        _4 = OsStr::to_str(move _5) -> [return: bb4, unwind: bb11]; // scope 0 at ui/drop/issue-100276.rs:7:26: 7:52
                                         // mir::Constant
                                         // + span: ui/drop/issue-100276.rs:7:44: 7:50
                                         // + literal: Const { ty: for<'a> fn(&'a OsStr) -> Option<&'a str> {OsStr::to_str}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = discriminant(_4);          // scope 0 at ui/drop/issue-100276.rs:7:16: 7:23
        switchInt(move _10) -> [1: bb5, otherwise: bb8]; // scope 0 at ui/drop/issue-100276.rs:7:16: 7:23
    }

    bb5: {
        _11 = ((_4 as Some).0: &str);    // scope 0 at ui/drop/issue-100276.rs:7:21: 7:22
        _13 = _11;                       // scope 0 at ui/drop/issue-100276.rs:8:12: 8:26
        _12 = core::str::<impl str>::contains::<'_, &str>(move _13, const "") -> [return: bb6, unwind: bb11]; // scope 0 at ui/drop/issue-100276.rs:8:12: 8:26
                                         // mir::Constant
                                         // + span: ui/drop/issue-100276.rs:8:14: 8:22
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/issue-100276.rs:8:23: 8:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        switchInt(move _12) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/drop/issue-100276.rs:8:12: 8:26
    }

    bb7: {
        drop(_3) -> [return: bb9, unwind: bb12]; // scope 0 at ui/drop/issue-100276.rs:9:6: 9:7
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind: bb12]; // scope 0 at ui/drop/issue-100276.rs:9:6: 9:7
    }

    bb9: {
        switchInt(_14) -> [0: bb10, otherwise: bb15]; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb10: {
        _14 = const false;               // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
        _16 = discriminant(_1);          // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
        switchInt(move _16) -> [0: bb17, otherwise: bb19]; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb11 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at ui/drop/issue-100276.rs:9:6: 9:7
    }

    bb12 (cleanup): {
        drop(_8) -> bb23;                // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb13 (cleanup): {
        drop(_3) -> bb23;                // scope 0 at ui/drop/issue-100276.rs:9:6: 9:7
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/issue-100276.rs:5:1: 10:2
    }

    bb15: {
        drop(_8) -> [return: bb10, unwind: bb23]; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb16: {
        return;                          // scope 0 at ui/drop/issue-100276.rs:10:2: 10:2
    }

    bb17: {
        switchInt(_15) -> [0: bb16, otherwise: bb18]; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb18: {
        drop(((_1 as Ok).0: std::fs::DirEntry)) -> bb16; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb19: {
        drop(_1) -> bb16;                // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb20 (cleanup): {
        switchInt(_15) -> [0: bb14, otherwise: bb21]; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb21 (cleanup): {
        drop(((_1 as Ok).0: std::fs::DirEntry)) -> bb14; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb22 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }

    bb23 (cleanup): {
        _17 = discriminant(_1);          // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
        switchInt(move _17) -> [0: bb20, otherwise: bb22]; // scope 0 at ui/drop/issue-100276.rs:10:1: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/issue-100276.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/drop/issue-100276.rs:12:13: 12:13
    }
}
