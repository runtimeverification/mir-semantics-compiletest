// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/drop-with-type-ascription-1.rs:3:11: 3:11
    let _1: std::string::String;         // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:4:9: 4:12
    let mut _2: &str;                    // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:4:15: 4:34
    let _3: &str;                        // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:4:15: 4:22
    let mut _5: std::str::SplitWhitespace<'_>; // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
    let mut _6: &str;                    // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
    let _7: &str;                        // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
    let mut _8: &std::string::String;    // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
    let _10: &&str;                      // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:6:27: 6:33
    let mut _11: &std::vec::Vec<&str>;   // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:6:27: 6:30
    let mut _12: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/drop/drop-with-type-ascription-1.rs:4:9: 4:12
        let _4: std::vec::Vec<&str>;     // in scope 1 at ui/drop/drop-with-type-ascription-1.rs:5:9: 5:12
        scope 2 {
            debug foo => _4;             // in scope 2 at ui/drop/drop-with-type-ascription-1.rs:5:9: 5:12
            let _9: &&str;               // in scope 2 at ui/drop/drop-with-type-ascription-1.rs:6:9: 6:23
            scope 3 {
                debug invalid_string => _9; // in scope 3 at ui/drop/drop-with-type-ascription-1.rs:6:9: 6:23
                let _15: &&str;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _16: &&str;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _29: &&str;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _15; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _16; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _21: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _21; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _3 = const "hello";              // scope 0 at ui/drop/drop-with-type-ascription-1.rs:4:15: 4:22
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:4:15: 4:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/drop/drop-with-type-ascription-1.rs:4:15: 4:34
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/drop/drop-with-type-ascription-1.rs:4:15: 4:34
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:4:23: 4:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_1;                        // scope 1 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
        _7 = <String as Deref>::deref(move _8) -> [return: bb2, unwind: bb12]; // scope 1 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = _7;                         // scope 1 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
        _5 = core::str::<impl str>::split_whitespace(move _6) -> [return: bb3, unwind: bb12]; // scope 1 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:48
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:5:30: 5:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> SplitWhitespace<'a> {core::str::<impl str>::split_whitespace}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <SplitWhitespace<'_> as Iterator>::collect::<Vec<&str>>(move _5) -> [return: bb4, unwind: bb12]; // scope 1 at ui/drop/drop-with-type-ascription-1.rs:5:26: 5:58
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:5:49: 5:56
                                         // + literal: Const { ty: fn(SplitWhitespace<'_>) -> Vec<&str> {<SplitWhitespace<'_> as Iterator>::collect::<Vec<&str>>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_4;                       // scope 2 at ui/drop/drop-with-type-ascription-1.rs:6:27: 6:30
        _10 = <Vec<&str> as Index<usize>>::index(move _11, const 0_usize) -> [return: bb5, unwind: bb11]; // scope 2 at ui/drop/drop-with-type-ascription-1.rs:6:27: 6:33
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:6:27: 6:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&str>, usize) -> &'a <Vec<&str> as Index<usize>>::Output {<Vec<&str> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = _10;                        // scope 2 at ui/drop/drop-with-type-ascription-1.rs:6:26: 6:33
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _14);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_12.0: &&str);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_12.1: &&str);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = <&str as PartialEq>::eq(move _19, move _20) -> [return: bb6, unwind: bb11]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = Not(move _18);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<&str, &str>(move _23, move _24, move _26, move _28) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_4) -> [return: bb9, unwind: bb12]; // scope 1 at ui/drop/drop-with-type-ascription-1.rs:8:1: 8:2
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/drop/drop-with-type-ascription-1.rs:8:1: 8:2
    }

    bb10: {
        return;                          // scope 0 at ui/drop/drop-with-type-ascription-1.rs:8:2: 8:2
    }

    bb11 (cleanup): {
        drop(_4) -> bb12;                // scope 1 at ui/drop/drop-with-type-ascription-1.rs:8:1: 8:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/drop/drop-with-type-ascription-1.rs:8:1: 8:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/drop/drop-with-type-ascription-1.rs:3:1: 8:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/drop/drop-with-type-ascription-1.rs:7:33: 7:40

    bb0: {
        _1 = const "hello";              // scope 0 at ui/drop/drop-with-type-ascription-1.rs:7:33: 7:40
                                         // mir::Constant
                                         // + span: ui/drop/drop-with-type-ascription-1.rs:7:33: 7:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
