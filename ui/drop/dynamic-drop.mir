// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/drop/dynamic-drop.rs:26:1: 26:24>::drop(_1: &mut Allocator) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dynamic-drop.rs:27:13: 27:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:27:24: 27:24
    let _2: std::cell::Ref<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:28:13: 28:17
    let mut _3: &std::cell::RefCell<std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:28:20: 28:38
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:35
    let mut _5: &mut std::slice::Iter<'_, bool>; // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:35
    let mut _6: std::slice::Iter<'_, bool>; // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:23
    let mut _7: &[bool];                 // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:23
    let _8: &[bool];                     // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:23
    let mut _9: &std::vec::Vec<bool>;    // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:23
    let _10: &std::vec::Vec<bool>;       // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:23
    let mut _11: &std::cell::Ref<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:29:12: 29:23
    let mut _12: [closure@ui/drop/dynamic-drop.rs:29:28: 29:31]; // in scope 0 at ui/drop/dynamic-drop.rs:29:28: 29:34
    let mut _13: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _15: &[&str];                // in scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
    let mut _16: &[&str; 1];             // in scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
    let _17: &[&str; 1];                 // in scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dynamic-drop.rs:30:42: 30:46
    let mut _23: &std::cell::Ref<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:30:42: 30:46
    let _24: &std::cell::Ref<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:30:42: 30:46
    scope 1 {
        debug data => _2;                // in scope 1 at ui/drop/dynamic-drop.rs:28:13: 28:17
        let mut _25: &[&str; 1];         // in scope 1 at ui/drop/dynamic-drop.rs:30:20: 30:40
    }

    bb0: {
        _3 = &((*_1).0: std::cell::RefCell<std::vec::Vec<bool>>); // scope 0 at ui/drop/dynamic-drop.rs:28:20: 28:38
        _2 = RefCell::<Vec<bool>>::borrow(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:28:20: 28:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:28:30: 28:36
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<bool>>) -> Ref<'a, Vec<bool>> {RefCell::<Vec<bool>>::borrow}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_2;                       // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:23
        _10 = <Ref<'_, Vec<bool>> as Deref>::deref(move _11) -> [return: bb2, unwind: bb11]; // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:29:12: 29:23
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<bool>>) -> &'a <Ref<'_, Vec<bool>> as Deref>::Target {<Ref<'_, Vec<bool>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _10;                        // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:23
        _8 = <Vec<bool> as Deref>::deref(move _9) -> [return: bb3, unwind: bb11]; // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:29:12: 29:23
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<bool>) -> &'a <Vec<bool> as Deref>::Target {<Vec<bool> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _8;                         // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:23
        _6 = core::slice::<impl [bool]>::iter(move _7) -> [return: bb4, unwind: bb11]; // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:29:17: 29:21
                                         // + literal: Const { ty: for<'a> fn(&'a [bool]) -> std::slice::Iter<'a, bool> {core::slice::<impl [bool]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = &mut _6;                    // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:35
        _4 = <std::slice::Iter<'_, bool> as Iterator>::any::<[closure@ui/drop/dynamic-drop.rs:29:28: 29:31]>(move _5, move _12) -> [return: bb5, unwind: bb11]; // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:29:24: 29:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, bool>, [closure@ui/drop/dynamic-drop.rs:29:28: 29:31]) -> bool {<std::slice::Iter<'_, bool> as Iterator>::any::<[closure@ui/drop/dynamic-drop.rs:29:28: 29:31]>}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _4) -> [0: bb9, otherwise: bb6]; // scope 1 at ui/drop/dynamic-drop.rs:29:12: 29:35
    }

    bb6: {
        _25 = const _;                   // scope 1 at ui/drop/dynamic-drop.rs:30:20: 30:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:30:20: 30:40
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Allocator as Drop>::drop, [], Some(promoted[0])) }
        _17 = _25;                       // scope 1 at ui/drop/dynamic-drop.rs:30:20: 30:40
        _16 = _17;                       // scope 1 at ui/drop/dynamic-drop.rs:30:20: 30:40
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 1 at ui/drop/dynamic-drop.rs:30:20: 30:40
        _24 = &_2;                       // scope 1 at ui/drop/dynamic-drop.rs:30:42: 30:46
        _23 = _24;                       // scope 1 at ui/drop/dynamic-drop.rs:30:42: 30:46
        _22 = core::fmt::ArgumentV1::<'_>::new_debug::<Ref<'_, Vec<bool>>>(move _23) -> [return: bb7, unwind: bb11]; // scope 1 at ui/drop/dynamic-drop.rs:30:42: 30:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:30:42: 30:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Ref<'_, Vec<bool>>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Ref<'_, Vec<bool>>>}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = [move _22];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _20 = &_21;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _19 = _20;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb8, unwind: bb11]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = panic_fmt(move _14) -> bb11; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_2) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:32:5: 32:6
    }

    bb10: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:32:6: 32:6
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/drop/dynamic-drop.rs:32:5: 32:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:27:5: 32:6
    }
}

promoted[0] in <impl at ui/drop/dynamic-drop.rs:26:1: 26:24>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40

    bb0: {
        _1 = [const "missing free: "];   // scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:30:20: 30:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:30:20: 30:40
    }
}

fn <impl at ui/drop/dynamic-drop.rs:26:1: 26:24>::drop::{closure#0}(_1: &mut [closure@ui/drop/dynamic-drop.rs:29:28: 29:31], _2: &bool) -> bool {
    debug d => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:29:29: 29:30
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dynamic-drop.rs:29:32: 29:32

    bb0: {
        _0 = (*_2);                      // scope 0 at ui/drop/dynamic-drop.rs:29:32: 29:34
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:29:34: 29:34
    }
}

fn <impl at ui/drop/dynamic-drop.rs:35:1: 35:15>::new(_1: usize) -> Allocator {
    debug failing_op => _1;              // in scope 0 at ui/drop/dynamic-drop.rs:36:12: 36:22
    let mut _0: Allocator;               // return place in scope 0 at ui/drop/dynamic-drop.rs:36:34: 36:38
    let mut _2: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:38:25: 38:35
    let mut _3: std::cell::Cell<usize>;  // in scope 0 at ui/drop/dynamic-drop.rs:39:22: 39:34
    let mut _4: std::cell::RefCell<std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:40:19: 40:39
    let mut _5: std::vec::Vec<bool>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59

    bb0: {
        _2 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:38:25: 38:35
        _3 = Cell::<usize>::new(const 0_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:39:22: 39:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:39:22: 39:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Cell<usize> {Cell::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Vec::<bool>::new() -> bb2;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<bool> {Vec::<bool>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = RefCell::<Vec<bool>>::new(move _5) -> bb3; // scope 0 at ui/drop/dynamic-drop.rs:40:19: 40:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:40:19: 40:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<bool>) -> RefCell<Vec<bool>> {RefCell::<Vec<bool>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Allocator { data: move _4, failing_op: move _2, cur_ops: move _3 }; // scope 0 at ui/drop/dynamic-drop.rs:37:9: 41:10
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:42:6: 42:6
    }
}

fn <impl at ui/drop/dynamic-drop.rs:35:1: 35:15>::alloc(_1: &Allocator) -> Ptr<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dynamic-drop.rs:43:14: 43:19
    let mut _0: Ptr<'_>;                 // return place in scope 0 at ui/drop/dynamic-drop.rs:43:24: 43:31
    let _2: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:44:9: 44:49
    let mut _3: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:44:9: 44:49
    let mut _4: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:48
    let mut _5: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:44
    let mut _6: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:44
    let mut _7: (usize, bool);           // in scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:48
    let mut _8: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:49
    let mut _9: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:30
    let mut _10: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:30
    let mut _11: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:46:34: 46:49
    let _12: !;                          // in scope 0 at ui/drop/dynamic-drop.rs:47:13: 47:46
    let mut _13: InjectedFailure;        // in scope 0 at ui/drop/dynamic-drop.rs:47:30: 47:45
    let mut _14: std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:50:13: 50:21
    let mut _15: &std::cell::RefCell<std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:50:24: 50:46
    let mut _17: &std::vec::Vec<bool>;   // in scope 0 at ui/drop/dynamic-drop.rs:51:20: 51:30
    let _18: &std::vec::Vec<bool>;       // in scope 0 at ui/drop/dynamic-drop.rs:51:20: 51:30
    let mut _19: &std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:51:20: 51:30
    let _20: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:52:9: 52:24
    let mut _21: &mut std::vec::Vec<bool>; // in scope 0 at ui/drop/dynamic-drop.rs:52:9: 52:24
    let mut _22: &mut std::vec::Vec<bool>; // in scope 0 at ui/drop/dynamic-drop.rs:52:9: 52:24
    let mut _23: &mut std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:52:9: 52:24
    let mut _24: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:53:13: 53:17
    let mut _25: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:53:19: 53:23
    scope 1 {
        debug data => _14;               // in scope 1 at ui/drop/dynamic-drop.rs:50:13: 50:21
        let _16: usize;                  // in scope 1 at ui/drop/dynamic-drop.rs:51:13: 51:17
        scope 2 {
            debug addr => _16;           // in scope 2 at ui/drop/dynamic-drop.rs:51:13: 51:17
        }
    }

    bb0: {
        _3 = &((*_1).2: std::cell::Cell<usize>); // scope 0 at ui/drop/dynamic-drop.rs:44:9: 44:49
        _6 = &((*_1).2: std::cell::Cell<usize>); // scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:44
        _5 = Cell::<usize>::get(move _6) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:44:39: 44:42
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = CheckedAdd(_5, const 1_usize); // scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:48
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_usize) -> bb2; // scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:48
    }

    bb2: {
        _4 = move (_7.0: usize);         // scope 0 at ui/drop/dynamic-drop.rs:44:26: 44:48
        _2 = Cell::<usize>::set(move _3, move _4) -> bb3; // scope 0 at ui/drop/dynamic-drop.rs:44:9: 44:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:44:22: 44:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &((*_1).2: std::cell::Cell<usize>); // scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:30
        _9 = Cell::<usize>::get(move _10) -> bb4; // scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:30
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:46:25: 46:28
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = ((*_1).1: usize);          // scope 0 at ui/drop/dynamic-drop.rs:46:34: 46:49
        _8 = Eq(move _9, move _11);      // scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:49
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/drop/dynamic-drop.rs:46:12: 46:49
    }

    bb5: {
        _12 = panic_any::<InjectedFailure>(move _13); // scope 0 at ui/drop/dynamic-drop.rs:47:13: 47:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:47:13: 47:29
                                         // + literal: Const { ty: fn(InjectedFailure) -> ! {panic_any::<InjectedFailure>}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &((*_1).0: std::cell::RefCell<std::vec::Vec<bool>>); // scope 0 at ui/drop/dynamic-drop.rs:50:24: 50:46
        _14 = RefCell::<Vec<bool>>::borrow_mut(move _15) -> bb7; // scope 0 at ui/drop/dynamic-drop.rs:50:24: 50:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:50:34: 50:44
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<bool>>) -> RefMut<'a, Vec<bool>> {RefCell::<Vec<bool>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _19 = &_14;                      // scope 1 at ui/drop/dynamic-drop.rs:51:20: 51:30
        _18 = <RefMut<'_, Vec<bool>> as Deref>::deref(move _19) -> [return: bb8, unwind: bb13]; // scope 1 at ui/drop/dynamic-drop.rs:51:20: 51:30
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:51:20: 51:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefMut<'_, Vec<bool>>) -> &'a <RefMut<'_, Vec<bool>> as Deref>::Target {<RefMut<'_, Vec<bool>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = _18;                       // scope 1 at ui/drop/dynamic-drop.rs:51:20: 51:30
        _16 = Vec::<bool>::len(move _17) -> [return: bb9, unwind: bb13]; // scope 1 at ui/drop/dynamic-drop.rs:51:20: 51:30
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:51:25: 51:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<bool>) -> usize {Vec::<bool>::len}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = &mut _14;                  // scope 2 at ui/drop/dynamic-drop.rs:52:9: 52:24
        _22 = <RefMut<'_, Vec<bool>> as DerefMut>::deref_mut(move _23) -> [return: bb10, unwind: bb13]; // scope 2 at ui/drop/dynamic-drop.rs:52:9: 52:24
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:52:9: 52:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<bool>>) -> &'a mut <RefMut<'_, Vec<bool>> as Deref>::Target {<RefMut<'_, Vec<bool>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = &mut (*_22);               // scope 2 at ui/drop/dynamic-drop.rs:52:9: 52:24
        _20 = Vec::<bool>::push(move _21, const true) -> [return: bb11, unwind: bb13]; // scope 2 at ui/drop/dynamic-drop.rs:52:9: 52:24
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:52:14: 52:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<bool>, bool) {Vec::<bool>::push}, val: Value(<ZST>) }
    }

    bb11: {
        _24 = _16;                       // scope 2 at ui/drop/dynamic-drop.rs:53:13: 53:17
        _25 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:53:19: 53:23
        _0 = Ptr::<'_>(move _24, move _25); // scope 2 at ui/drop/dynamic-drop.rs:53:9: 53:24
        drop(_14) -> bb12;               // scope 0 at ui/drop/dynamic-drop.rs:54:5: 54:6
    }

    bb12: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:54:6: 54:6
    }

    bb13 (cleanup): {
        drop(_14) -> bb14;               // scope 0 at ui/drop/dynamic-drop.rs:54:5: 54:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:43:5: 54:6
    }
}

fn <impl at ui/drop/dynamic-drop.rs:35:1: 35:15>::alloc_leaked(_1: &Allocator, _2: Vec<usize>) -> Ptr<'_> {
    debug self => _1;                    // in scope 0 at ui/drop/dynamic-drop.rs:60:21: 60:26
    debug exceptions => _2;              // in scope 0 at ui/drop/dynamic-drop.rs:60:28: 60:38
    let mut _0: Ptr<'_>;                 // return place in scope 0 at ui/drop/dynamic-drop.rs:61:13: 61:16
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:61:19: 61:31
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:63:12: 63:76
    let mut _5: &mut std::slice::Iter<'_, usize>; // in scope 0 at ui/drop/dynamic-drop.rs:63:12: 63:76
    let mut _6: std::slice::Iter<'_, usize>; // in scope 0 at ui/drop/dynamic-drop.rs:63:12: 63:29
    let mut _7: &[usize];                // in scope 0 at ui/drop/dynamic-drop.rs:63:12: 63:29
    let _8: &[usize];                    // in scope 0 at ui/drop/dynamic-drop.rs:63:12: 63:29
    let mut _9: &std::vec::Vec<usize>;   // in scope 0 at ui/drop/dynamic-drop.rs:63:12: 63:29
    let mut _10: [closure@ui/drop/dynamic-drop.rs:63:34: 63:45]; // in scope 0 at ui/drop/dynamic-drop.rs:63:34: 63:75
    let mut _11: &&Allocator;            // in scope 0 at ui/drop/dynamic-drop.rs:63:34: 63:75
    let mut _13: &std::cell::RefCell<std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:64:28: 64:50
    let mut _14: &mut bool;              // in scope 0 at ui/drop/dynamic-drop.rs:65:13: 65:24
    let mut _15: &mut std::vec::Vec<bool>; // in scope 0 at ui/drop/dynamic-drop.rs:65:13: 65:17
    let mut _16: &mut std::vec::Vec<bool>; // in scope 0 at ui/drop/dynamic-drop.rs:65:13: 65:17
    let mut _17: &mut std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:65:13: 65:17
    let mut _18: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:65:18: 65:23
    scope 1 {
        debug ptr => _0;                 // in scope 1 at ui/drop/dynamic-drop.rs:61:13: 61:16
        let mut _12: std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 1 at ui/drop/dynamic-drop.rs:64:17: 64:25
        scope 2 {
            debug data => _12;           // in scope 2 at ui/drop/dynamic-drop.rs:64:17: 64:25
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:61:19: 61:31
        _0 = Allocator::alloc(move _3) -> [return: bb1, unwind: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:61:19: 61:31
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:61:24: 61:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_2;                        // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:29
        _8 = <Vec<usize> as Deref>::deref(move _9) -> [return: bb2, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:29
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:63:12: 63:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<usize>) -> &'a <Vec<usize> as Deref>::Target {<Vec<usize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _8;                         // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:29
        _6 = core::slice::<impl [usize]>::iter(move _7) -> [return: bb3, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:29
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:63:23: 63:27
                                         // + literal: Const { ty: for<'a> fn(&'a [usize]) -> std::slice::Iter<'a, usize> {core::slice::<impl [usize]>::iter}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &mut _6;                    // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:76
        _11 = &_1;                       // scope 1 at ui/drop/dynamic-drop.rs:63:34: 63:75
        _10 = [closure@ui/drop/dynamic-drop.rs:63:34: 63:45] { self: move _11 }; // scope 1 at ui/drop/dynamic-drop.rs:63:34: 63:75
                                         // closure
                                         // + def_id: DefId(0:25 ~ dynamic_drop[d7db]::{impl#3}::alloc_leaked::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((&usize,)) -> bool,
                                         //     (&&Allocator,),
                                         // ]
        _4 = <std::slice::Iter<'_, usize> as Iterator>::any::<[closure@ui/drop/dynamic-drop.rs:63:34: 63:45]>(move _5, move _10) -> [return: bb4, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:76
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:63:30: 63:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, usize>, [closure@ui/drop/dynamic-drop.rs:63:34: 63:45]) -> bool {<std::slice::Iter<'_, usize> as Iterator>::any::<[closure@ui/drop/dynamic-drop.rs:63:34: 63:45]>}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _4) -> [0: bb9, otherwise: bb5]; // scope 1 at ui/drop/dynamic-drop.rs:63:12: 63:76
    }

    bb5: {
        _13 = &((*_1).0: std::cell::RefCell<std::vec::Vec<bool>>); // scope 1 at ui/drop/dynamic-drop.rs:64:28: 64:50
        _12 = RefCell::<Vec<bool>>::borrow_mut(move _13) -> [return: bb6, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:64:28: 64:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:64:38: 64:48
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<bool>>) -> RefMut<'a, Vec<bool>> {RefCell::<Vec<bool>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = &mut _12;                  // scope 2 at ui/drop/dynamic-drop.rs:65:13: 65:17
        _16 = <RefMut<'_, Vec<bool>> as DerefMut>::deref_mut(move _17) -> [return: bb7, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:65:13: 65:17
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:65:13: 65:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<bool>>) -> &'a mut <RefMut<'_, Vec<bool>> as Deref>::Target {<RefMut<'_, Vec<bool>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = &mut (*_16);               // scope 2 at ui/drop/dynamic-drop.rs:65:13: 65:17
        _18 = (_0.0: usize);             // scope 2 at ui/drop/dynamic-drop.rs:65:18: 65:23
        _14 = <Vec<bool> as IndexMut<usize>>::index_mut(move _15, move _18) -> [return: bb8, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:65:13: 65:24
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:65:13: 65:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<bool>, usize) -> &'a mut <Vec<bool> as Index<usize>>::Output {<Vec<bool> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb8: {
        (*_14) = const false;            // scope 2 at ui/drop/dynamic-drop.rs:65:13: 65:32
        drop(_12) -> [return: bb9, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:66:9: 66:10
    }

    bb9: {
        drop(_2) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:68:5: 68:6
    }

    bb10: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:68:6: 68:6
    }

    bb11 (cleanup): {
        drop(_12) -> bb12;               // scope 1 at ui/drop/dynamic-drop.rs:66:9: 66:10
    }

    bb12 (cleanup): {
        drop(_0) -> bb13;                // scope 0 at ui/drop/dynamic-drop.rs:68:5: 68:6
    }

    bb13 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at ui/drop/dynamic-drop.rs:68:5: 68:6
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:60:5: 68:6
    }
}

fn <impl at ui/drop/dynamic-drop.rs:35:1: 35:15>::alloc_leaked::{closure#0}(_1: &mut [closure@ui/drop/dynamic-drop.rs:63:34: 63:45], _2: &usize) -> bool {
    debug operation => _2;               // in scope 0 at ui/drop/dynamic-drop.rs:63:35: 63:44
    debug self => (*((*_1).0: &&Allocator)); // in scope 0 at ui/drop/dynamic-drop.rs:60:21: 60:26
    let mut _0: bool;                    // return place in scope 0 at ui/drop/dynamic-drop.rs:63:46: 63:46
    let mut _3: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:63:46: 63:56
    let mut _4: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:63:60: 63:75
    let mut _5: &&Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:63:34: 63:75
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:63:34: 63:75

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/drop/dynamic-drop.rs:63:46: 63:56
        _5 = deref_copy ((*_1).0: &&Allocator); // scope 0 at ui/drop/dynamic-drop.rs:63:60: 63:75
        _6 = deref_copy (*_5);           // scope 0 at ui/drop/dynamic-drop.rs:63:60: 63:75
        _4 = ((*_6).1: usize);           // scope 0 at ui/drop/dynamic-drop.rs:63:60: 63:75
        _0 = Eq(move _3, move _4);       // scope 0 at ui/drop/dynamic-drop.rs:63:46: 63:75
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:63:75: 63:75
    }
}

fn <impl at ui/drop/dynamic-drop.rs:72:1: 72:26>::drop(_1: &mut Ptr<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/drop/dynamic-drop.rs:73:13: 73:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:73:24: 73:24
    let mut _2: &mut bool;               // in scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:47
    let mut _3: &mut std::vec::Vec<bool>; // in scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
    let mut _4: &mut std::vec::Vec<bool>; // in scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
    let mut _7: &std::cell::RefCell<std::vec::Vec<bool>>; // in scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
    let mut _8: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:74:40: 74:46
    let mut _9: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _10: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _11: &[&str];                // in scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
    let mut _12: &[&str; 1];             // in scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
    let _13: &[&str; 1];                 // in scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dynamic-drop.rs:76:53: 76:59
    let mut _19: &usize;                 // in scope 0 at ui/drop/dynamic-drop.rs:76:53: 76:59
    let _20: &usize;                     // in scope 0 at ui/drop/dynamic-drop.rs:76:53: 76:59
    let _21: &mut bool;                  // in scope 0 at ui/drop/dynamic-drop.rs:78:13: 78:22
    let _22: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:81:9: 81:51
    let mut _23: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:81:9: 81:51
    let mut _24: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:50
    let mut _25: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:48
    let mut _26: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:48
    let mut _27: (usize, bool);          // in scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:50
    let mut _28: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:53
    let mut _29: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:32
    let mut _30: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:32
    let mut _31: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:83:36: 83:53
    let _32: !;                          // in scope 0 at ui/drop/dynamic-drop.rs:84:13: 84:46
    let mut _33: InjectedFailure;        // in scope 0 at ui/drop/dynamic-drop.rs:84:30: 84:45
    let mut _34: &[&str; 1];             // in scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
    let mut _35: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:73:13: 73:22
    let mut _36: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:73:13: 73:22
    let mut _37: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:73:13: 73:22
    let mut _38: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:73:13: 73:22
    let mut _39: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:73:13: 73:22
    scope 1 {
        debug d => _21;                  // in scope 1 at ui/drop/dynamic-drop.rs:78:13: 78:22
    }

    bb0: {
        _35 = deref_copy ((*_1).1: &Allocator); // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
        _7 = &((*_35).0: std::cell::RefCell<std::vec::Vec<bool>>); // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
        _6 = RefCell::<Vec<bool>>::borrow_mut(move _7) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:74:27: 74:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<bool>>) -> RefMut<'a, Vec<bool>> {RefCell::<Vec<bool>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut _6;                    // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
        _4 = <RefMut<'_, Vec<bool>> as DerefMut>::deref_mut(move _5) -> [return: bb2, unwind: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:74:15: 74:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<bool>>) -> &'a mut <RefMut<'_, Vec<bool>> as Deref>::Target {<RefMut<'_, Vec<bool>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut (*_4);                 // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:39
        _8 = ((*_1).0: usize);           // scope 0 at ui/drop/dynamic-drop.rs:74:40: 74:46
        _2 = <Vec<bool> as IndexMut<usize>>::index_mut(move _3, move _8) -> [return: bb3, unwind: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:74:15: 74:47
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:74:15: 74:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<bool>, usize) -> &'a mut <Vec<bool> as Index<usize>>::Output {<Vec<bool> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt((*_2)) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/drop/dynamic-drop.rs:74:9: 74:47
    }

    bb4: {
        _21 = &mut (*_2);                // scope 0 at ui/drop/dynamic-drop.rs:78:13: 78:22
        (*_21) = const false;            // scope 1 at ui/drop/dynamic-drop.rs:78:26: 78:36
        drop(_6) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:79:9: 79:10
    }

    bb5: {
        _34 = const _;                   // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:76:24: 76:51
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Ptr<'a> as Drop>::drop, [ReErased], Some(promoted[0])) }
        _13 = _34;                       // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
        _12 = _13;                       // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
        _11 = move _12 as &[&str] (Pointer(Unsize)); // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
        _20 = &((*_1).0: usize);         // scope 0 at ui/drop/dynamic-drop.rs:76:53: 76:59
        _19 = _20;                       // scope 0 at ui/drop/dynamic-drop.rs:76:53: 76:59
        _18 = core::fmt::ArgumentV1::<'_>::new_debug::<usize>(move _19) -> [return: bb6, unwind: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:76:53: 76:59
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:76:53: 76:59
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<usize>}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = [move _18];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _16 = &_17;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _15 = _16;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _14 = move _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> [return: bb7, unwind: bb15]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _9 = panic_fmt(move _10) -> bb15; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb8: {
        _36 = deref_copy ((*_1).1: &Allocator); // scope 0 at ui/drop/dynamic-drop.rs:81:9: 81:51
        _23 = &((*_36).2: std::cell::Cell<usize>); // scope 0 at ui/drop/dynamic-drop.rs:81:9: 81:51
        _37 = deref_copy ((*_1).1: &Allocator); // scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:48
        _26 = &((*_37).2: std::cell::Cell<usize>); // scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:48
        _25 = Cell::<usize>::get(move _26) -> bb9; // scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:48
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:81:43: 81:46
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = CheckedAdd(_25, const 1_usize); // scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:50
        assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", move _25, const 1_usize) -> bb10; // scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:50
    }

    bb10: {
        _24 = move (_27.0: usize);       // scope 0 at ui/drop/dynamic-drop.rs:81:28: 81:50
        _22 = Cell::<usize>::set(move _23, move _24) -> bb11; // scope 0 at ui/drop/dynamic-drop.rs:81:9: 81:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:81:24: 81:27
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>, usize) {Cell::<usize>::set}, val: Value(<ZST>) }
    }

    bb11: {
        _38 = deref_copy ((*_1).1: &Allocator); // scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:32
        _30 = &((*_38).2: std::cell::Cell<usize>); // scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:32
        _29 = Cell::<usize>::get(move _30) -> bb12; // scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:32
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:83:27: 83:30
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb12: {
        _39 = deref_copy ((*_1).1: &Allocator); // scope 0 at ui/drop/dynamic-drop.rs:83:36: 83:53
        _31 = ((*_39).1: usize);         // scope 0 at ui/drop/dynamic-drop.rs:83:36: 83:53
        _28 = Eq(move _29, move _31);    // scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:53
        switchInt(move _28) -> [0: bb14, otherwise: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:83:12: 83:53
    }

    bb13: {
        _32 = panic_any::<InjectedFailure>(move _33); // scope 0 at ui/drop/dynamic-drop.rs:84:13: 84:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:84:13: 84:29
                                         // + literal: Const { ty: fn(InjectedFailure) -> ! {panic_any::<InjectedFailure>}, val: Value(<ZST>) }
    }

    bb14: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:86:6: 86:6
    }

    bb15 (cleanup): {
        drop(_6) -> bb16;                // scope 0 at ui/drop/dynamic-drop.rs:79:9: 79:10
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:73:5: 86:6
    }
}

promoted[0] in <impl at ui/drop/dynamic-drop.rs:72:1: 72:26>::drop: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
    let mut _1: [&str; 1];               // in scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51

    bb0: {
        _1 = [const "double free at index "]; // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:76:24: 76:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:76:24: 76:51
    }
}

fn dynamic_init(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:89:17: 89:18
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:89:32: 89:33
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:89:41: 89:41
    let _3: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:90:9: 90:11
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:91:8: 91:9
    let mut _5: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:92:14: 92:29
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:92:19: 92:28
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:92:19: 92:28
    let mut _8: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:94:1: 94:2
    scope 1 {
        debug _x => _3;                  // in scope 1 at ui/drop/dynamic-drop.rs:90:9: 90:11
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/drop/dynamic-drop.rs:90:9: 90:11
        _4 = _2;                         // scope 1 at ui/drop/dynamic-drop.rs:91:8: 91:9
        switchInt(move _4) -> [0: bb3, otherwise: bb1]; // scope 1 at ui/drop/dynamic-drop.rs:91:8: 91:9
    }

    bb1: {
        _7 = _1;                         // scope 1 at ui/drop/dynamic-drop.rs:92:19: 92:28
        _6 = Allocator::alloc(move _7) -> bb2; // scope 1 at ui/drop/dynamic-drop.rs:92:19: 92:28
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:92:21: 92:26
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Option::<Ptr<'_>>::Some(move _6); // scope 1 at ui/drop/dynamic-drop.rs:92:14: 92:29
        _8 = const true;                 // scope 1 at ui/drop/dynamic-drop.rs:92:9: 92:11
        _3 = move _5;                    // scope 1 at ui/drop/dynamic-drop.rs:92:9: 92:11
        goto -> bb3;                     // scope 1 at ui/drop/dynamic-drop.rs:91:5: 93:6
    }

    bb3: {
        switchInt(_8) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/drop/dynamic-drop.rs:94:1: 94:2
    }

    bb4: {
        _8 = const false;                // scope 0 at ui/drop/dynamic-drop.rs:94:1: 94:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:94:2: 94:2
    }

    bb5: {
        drop(_3) -> bb4;                 // scope 0 at ui/drop/dynamic-drop.rs:94:1: 94:2
    }
}

fn dynamic_drop(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:96:17: 96:18
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:96:32: 96:33
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:96:41: 96:41
    let _3: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:97:9: 97:10
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:97:13: 97:22
    let _5: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:98:5: 102:6
    let mut _6: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:98:8: 98:9
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:99:14: 99:15
    let mut _8: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:103:1: 103:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/drop/dynamic-drop.rs:97:9: 97:10
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/drop/dynamic-drop.rs:97:9: 97:10
        _4 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:97:13: 97:22
        _8 = const true;                 // scope 0 at ui/drop/dynamic-drop.rs:97:13: 97:22
        _3 = Allocator::alloc(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:97:13: 97:22
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:97:15: 97:20
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 1 at ui/drop/dynamic-drop.rs:98:8: 98:9
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/drop/dynamic-drop.rs:98:8: 98:9
    }

    bb2: {
        _8 = const false;                // scope 1 at ui/drop/dynamic-drop.rs:99:14: 99:15
        _7 = move _3;                    // scope 1 at ui/drop/dynamic-drop.rs:99:14: 99:15
        _5 = Option::<Ptr<'_>>::Some(move _7); // scope 1 at ui/drop/dynamic-drop.rs:99:9: 99:16
        goto -> bb4;                     // scope 1 at ui/drop/dynamic-drop.rs:98:5: 102:6
    }

    bb3: {
        _5 = Option::<Ptr<'_>>::None;    // scope 1 at ui/drop/dynamic-drop.rs:101:9: 101:13
        goto -> bb4;                     // scope 1 at ui/drop/dynamic-drop.rs:98:5: 102:6
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb10]; // scope 1 at ui/drop/dynamic-drop.rs:102:6: 102:7
    }

    bb5: {
        switchInt(_8) -> [0: bb6, otherwise: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:103:1: 103:2
    }

    bb6: {
        _8 = const false;                // scope 0 at ui/drop/dynamic-drop.rs:103:1: 103:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:103:2: 103:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:96:1: 103:2
    }

    bb8: {
        drop(_3) -> bb6;                 // scope 0 at ui/drop/dynamic-drop.rs:103:1: 103:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:103:1: 103:2
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:103:1: 103:2
    }
}

fn struct_dynamic_drop(_1: &Allocator, _2: bool, _3: bool, _4: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:106:24: 106:25
    debug c0 => _2;                      // in scope 0 at ui/drop/dynamic-drop.rs:106:39: 106:41
    debug c1 => _3;                      // in scope 0 at ui/drop/dynamic-drop.rs:106:49: 106:51
    debug c => _4;                       // in scope 0 at ui/drop/dynamic-drop.rs:106:59: 106:60
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:106:68: 106:68
    let mut _5: std::ops::Range<i32>;    // in scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
    let mut _6: std::ops::Range<i32>;    // in scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
    let mut _7: std::ops::Range<i32>;    // in scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
    let mut _8: std::option::Option<i32>; // in scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
    let mut _9: &mut std::ops::Range<i32>; // in scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
    let mut _10: &mut std::ops::Range<i32>; // in scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
    let mut _11: isize;                  // in scope 0 at ui/drop/dynamic-drop.rs:107:5: 118:6
    let mut _15: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:12: 110:44
    let mut _16: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:12: 110:26
    let mut _17: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:13: 110:15
    let mut _18: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:19: 110:25
    let mut _19: i32;                    // in scope 0 at ui/drop/dynamic-drop.rs:110:19: 110:20
    let mut _20: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:30: 110:44
    let mut _21: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:31: 110:33
    let mut _22: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:110:37: 110:43
    let mut _23: i32;                    // in scope 0 at ui/drop/dynamic-drop.rs:110:37: 110:38
    let mut _24: (Ptr<'_>, Ptr<'_>, Ptr<'_>); // in scope 0 at ui/drop/dynamic-drop.rs:111:17: 111:50
    let mut _25: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:111:18: 111:27
    let mut _26: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:111:18: 111:27
    let mut _27: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:111:29: 111:38
    let mut _28: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:111:29: 111:38
    let mut _29: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:111:40: 111:49
    let mut _30: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:111:40: 111:49
    let mut _31: TwoPtrs<'_>;            // in scope 0 at ui/drop/dynamic-drop.rs:112:17: 112:46
    let mut _32: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:112:25: 112:34
    let mut _33: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:112:25: 112:34
    let mut _34: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:112:36: 112:45
    let mut _35: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:112:36: 112:45
    let mut _36: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:113:16: 113:17
    let _37: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:114:17: 114:26
    let mut _38: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:114:22: 114:25
    let _39: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:115:17: 115:26
    let mut _40: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:115:22: 115:25
    let mut _41: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:118:5: 118:6
    let mut _42: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:118:5: 118:6
    let mut _43: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:118:5: 118:6
    let mut _44: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:118:5: 118:6
    scope 1 {
        debug iter => _7;                // in scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
        let _12: i32;                    // in scope 1 at ui/drop/dynamic-drop.rs:107:9: 107:10
        scope 2 {
            debug i => _12;              // in scope 2 at ui/drop/dynamic-drop.rs:107:9: 107:10
            let _13: (Ptr<'_>, Ptr<'_>, Ptr<'_>); // in scope 2 at ui/drop/dynamic-drop.rs:108:13: 108:14
            scope 3 {
                debug x => _13;          // in scope 3 at ui/drop/dynamic-drop.rs:108:13: 108:14
                let _14: TwoPtrs<'_>;    // in scope 3 at ui/drop/dynamic-drop.rs:109:13: 109:14
                scope 4 {
                    debug y => _14;      // in scope 4 at ui/drop/dynamic-drop.rs:109:13: 109:14
                }
            }
        }
    }

    bb0: {
        _43 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _42 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _44 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _41 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _6 = std::ops::Range::<i32> { start: const 0_i32, end: const 2_i32 }; // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _5 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _6) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:107:14: 107:18
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _5;                    // scope 0 at ui/drop/dynamic-drop.rs:107:14: 107:18
        goto -> bb2;                     // scope 1 at ui/drop/dynamic-drop.rs:107:5: 118:6
    }

    bb2: {
        _10 = &mut _7;                   // scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _9 = &mut (*_10);                // scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
        _8 = <std::ops::Range<i32> as Iterator>::next(move _9) -> bb3; // scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:107:14: 107:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = discriminant(_8);          // scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
        switchInt(move _11) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
    }

    bb4: {
        _12 = ((_8 as Some).0: i32);     // scope 1 at ui/drop/dynamic-drop.rs:107:9: 107:10
        _17 = _2;                        // scope 4 at ui/drop/dynamic-drop.rs:110:13: 110:15
        switchInt(move _17) -> [0: bb10, otherwise: bb11]; // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:26
    }

    bb5: {
        unreachable;                     // scope 1 at ui/drop/dynamic-drop.rs:107:14: 107:18
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:119:2: 119:2
    }

    bb7: {
        _15 = const true;                // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:44
        goto -> bb9;                     // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:44
    }

    bb8: {
        _21 = _3;                        // scope 4 at ui/drop/dynamic-drop.rs:110:31: 110:33
        switchInt(move _21) -> [0: bb13, otherwise: bb14]; // scope 4 at ui/drop/dynamic-drop.rs:110:30: 110:44
    }

    bb9: {
        switchInt(move _15) -> [0: bb24, otherwise: bb16]; // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:44
    }

    bb10: {
        _16 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:26
        goto -> bb12;                    // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:26
    }

    bb11: {
        _19 = _12;                       // scope 4 at ui/drop/dynamic-drop.rs:110:19: 110:20
        _18 = Eq(move _19, const 0_i32); // scope 4 at ui/drop/dynamic-drop.rs:110:19: 110:25
        _16 = move _18;                  // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:26
        goto -> bb12;                    // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:26
    }

    bb12: {
        switchInt(move _16) -> [0: bb8, otherwise: bb7]; // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:44
    }

    bb13: {
        _20 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:110:30: 110:44
        goto -> bb15;                    // scope 4 at ui/drop/dynamic-drop.rs:110:30: 110:44
    }

    bb14: {
        _23 = _12;                       // scope 4 at ui/drop/dynamic-drop.rs:110:37: 110:38
        _22 = Eq(move _23, const 1_i32); // scope 4 at ui/drop/dynamic-drop.rs:110:37: 110:43
        _20 = move _22;                  // scope 4 at ui/drop/dynamic-drop.rs:110:30: 110:44
        goto -> bb15;                    // scope 4 at ui/drop/dynamic-drop.rs:110:30: 110:44
    }

    bb15: {
        _15 = move _20;                  // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:44
        goto -> bb9;                     // scope 4 at ui/drop/dynamic-drop.rs:110:12: 110:44
    }

    bb16: {
        _26 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:111:18: 111:27
        _25 = Allocator::alloc(move _26) -> [return: bb17, unwind: bb49]; // scope 4 at ui/drop/dynamic-drop.rs:111:18: 111:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:111:20: 111:25
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb17: {
        _28 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:111:29: 111:38
        _27 = Allocator::alloc(move _28) -> [return: bb18, unwind: bb27]; // scope 4 at ui/drop/dynamic-drop.rs:111:29: 111:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:111:31: 111:36
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb18: {
        _30 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:111:40: 111:49
        _29 = Allocator::alloc(move _30) -> [return: bb19, unwind: bb26]; // scope 4 at ui/drop/dynamic-drop.rs:111:40: 111:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:111:42: 111:47
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb19: {
        _24 = (move _25, move _27, move _29); // scope 4 at ui/drop/dynamic-drop.rs:111:17: 111:50
        _43 = const true;                // scope 4 at ui/drop/dynamic-drop.rs:111:13: 111:14
        _44 = const true;                // scope 4 at ui/drop/dynamic-drop.rs:111:13: 111:14
        _13 = move _24;                  // scope 4 at ui/drop/dynamic-drop.rs:111:13: 111:14
        _33 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:112:25: 112:34
        _32 = Allocator::alloc(move _33) -> [return: bb20, unwind: bb49]; // scope 4 at ui/drop/dynamic-drop.rs:112:25: 112:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:112:27: 112:32
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb20: {
        _35 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:112:36: 112:45
        _34 = Allocator::alloc(move _35) -> [return: bb21, unwind: bb25]; // scope 4 at ui/drop/dynamic-drop.rs:112:36: 112:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:112:38: 112:43
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb21: {
        _31 = TwoPtrs::<'_>(move _32, move _34); // scope 4 at ui/drop/dynamic-drop.rs:112:17: 112:46
        _41 = const true;                // scope 4 at ui/drop/dynamic-drop.rs:112:13: 112:14
        _42 = const true;                // scope 4 at ui/drop/dynamic-drop.rs:112:13: 112:14
        _14 = move _31;                  // scope 4 at ui/drop/dynamic-drop.rs:112:13: 112:14
        _36 = _4;                        // scope 4 at ui/drop/dynamic-drop.rs:113:16: 113:17
        switchInt(move _36) -> [0: bb24, otherwise: bb22]; // scope 4 at ui/drop/dynamic-drop.rs:113:16: 113:17
    }

    bb22: {
        _44 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:114:22: 114:25
        _38 = move (_13.1: Ptr<'_>);     // scope 4 at ui/drop/dynamic-drop.rs:114:22: 114:25
        _37 = std::mem::drop::<Ptr<'_>>(move _38) -> [return: bb23, unwind: bb49]; // scope 4 at ui/drop/dynamic-drop.rs:114:17: 114:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:114:17: 114:21
                                         // + literal: Const { ty: fn(Ptr<'_>) {std::mem::drop::<Ptr<'_>>}, val: Value(<ZST>) }
    }

    bb23: {
        _42 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:115:22: 115:25
        _40 = move (_14.0: Ptr<'_>);     // scope 4 at ui/drop/dynamic-drop.rs:115:22: 115:25
        _39 = std::mem::drop::<Ptr<'_>>(move _40) -> [return: bb55, unwind: bb49]; // scope 4 at ui/drop/dynamic-drop.rs:115:17: 115:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:115:17: 115:21
                                         // + literal: Const { ty: fn(Ptr<'_>) {std::mem::drop::<Ptr<'_>>}, val: Value(<ZST>) }
    }

    bb24: {
        switchInt(_42) -> [0: bb34, otherwise: bb35]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb25 (cleanup): {
        drop(_32) -> bb49;               // scope 4 at ui/drop/dynamic-drop.rs:112:45: 112:46
    }

    bb26 (cleanup): {
        drop(_27) -> bb27;               // scope 4 at ui/drop/dynamic-drop.rs:111:49: 111:50
    }

    bb27 (cleanup): {
        drop(_25) -> bb49;               // scope 4 at ui/drop/dynamic-drop.rs:111:49: 111:50
    }

    bb28 (cleanup): {
        switchInt(_43) -> [0: bb52, otherwise: bb54]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:106:1: 119:2
    }

    bb30: {
        _41 = const false;               // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
        _41 = const false;               // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
        _42 = const false;               // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
        switchInt(_43) -> [0: bb43, otherwise: bb45]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb31 (cleanup): {
        drop((_14.1: Ptr<'_>)) -> bb28;  // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb32 (cleanup): {
        switchInt(_41) -> [0: bb28, otherwise: bb31]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb33: {
        drop((_14.1: Ptr<'_>)) -> [return: bb30, unwind: bb28]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb34: {
        switchInt(_41) -> [0: bb30, otherwise: bb33]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb35: {
        drop((_14.0: Ptr<'_>)) -> [return: bb34, unwind: bb32]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb36: {
        _43 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
        _43 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
        _44 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
        goto -> bb2;                     // scope 1 at ui/drop/dynamic-drop.rs:107:5: 118:6
    }

    bb37 (cleanup): {
        drop((_13.2: Ptr<'_>)) -> bb29;  // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb38 (cleanup): {
        switchInt(_43) -> [0: bb29, otherwise: bb37]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb39 (cleanup): {
        switchInt(_44) -> [0: bb38, otherwise: bb40]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb40 (cleanup): {
        drop((_13.1: Ptr<'_>)) -> bb38;  // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb41: {
        drop((_13.2: Ptr<'_>)) -> bb36;  // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb42: {
        switchInt(_43) -> [0: bb36, otherwise: bb41]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb43: {
        switchInt(_44) -> [0: bb42, otherwise: bb44]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb44: {
        drop((_13.1: Ptr<'_>)) -> [return: bb42, unwind: bb38]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb45: {
        drop((_13.0: Ptr<'_>)) -> [return: bb43, unwind: bb39]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb46 (cleanup): {
        drop((_14.1: Ptr<'_>)) -> bb28;  // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb47 (cleanup): {
        switchInt(_41) -> [0: bb28, otherwise: bb46]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb48 (cleanup): {
        drop((_14.0: Ptr<'_>)) -> bb47;  // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb49 (cleanup): {
        switchInt(_42) -> [0: bb47, otherwise: bb48]; // scope 3 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb50 (cleanup): {
        drop((_13.2: Ptr<'_>)) -> bb29;  // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb51 (cleanup): {
        switchInt(_43) -> [0: bb29, otherwise: bb50]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb52 (cleanup): {
        switchInt(_44) -> [0: bb51, otherwise: bb53]; // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb53 (cleanup): {
        drop((_13.1: Ptr<'_>)) -> bb51;  // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb54 (cleanup): {
        drop((_13.0: Ptr<'_>)) -> bb52;  // scope 2 at ui/drop/dynamic-drop.rs:118:5: 118:6
    }

    bb55: {
        goto -> bb24;                    // scope 4 at ui/drop/dynamic-drop.rs:115:17: 115:26
    }
}

fn field_assignment(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:121:21: 121:22
    debug c0 => _2;                      // in scope 0 at ui/drop/dynamic-drop.rs:121:36: 121:38
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:121:46: 121:46
    let mut _3: (TwoPtrs<'_>, Ptr<'_>);  // in scope 0 at ui/drop/dynamic-drop.rs:122:9: 122:14
    let mut _4: TwoPtrs<'_>;             // in scope 0 at ui/drop/dynamic-drop.rs:122:18: 122:47
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:122:26: 122:35
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:122:26: 122:35
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:122:37: 122:46
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:122:37: 122:46
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:122:49: 122:58
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:122:49: 122:58
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:124:11: 124:20
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:124:11: 124:20
    let mut _13: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:125:11: 125:20
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:125:11: 125:20
    let mut _16: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:128:8: 128:10
    let mut _17: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:129:19: 129:20
    let mut _18: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    let mut _19: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/drop/dynamic-drop.rs:122:9: 122:14
        let _15: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:127:9: 127:10
        scope 2 {
            debug f => _15;              // in scope 2 at ui/drop/dynamic-drop.rs:127:9: 127:10
        }
    }

    bb0: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:122:9: 122:14
        _18 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:122:9: 122:14
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:122:26: 122:35
        _5 = Allocator::alloc(move _6) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:122:26: 122:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:122:28: 122:33
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:122:37: 122:46
        _7 = Allocator::alloc(move _8) -> [return: bb2, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:122:37: 122:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:122:39: 122:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = TwoPtrs::<'_>(move _5, move _7); // scope 0 at ui/drop/dynamic-drop.rs:122:18: 122:47
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:122:49: 122:58
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:122:49: 122:58
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:122:51: 122:56
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:122:17: 122:59
        _3 = (move _4, move _9);         // scope 0 at ui/drop/dynamic-drop.rs:122:17: 122:59
        _12 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:124:11: 124:20
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb26]; // scope 1 at ui/drop/dynamic-drop.rs:124:11: 124:20
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:124:13: 124:18
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        drop((_3.1: Ptr<'_>)) -> [return: bb13, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:124:5: 124:8
    }

    bb5: {
        drop((_3.1: Ptr<'_>)) -> [return: bb15, unwind: bb14]; // scope 1 at ui/drop/dynamic-drop.rs:125:5: 125:8
    }

    bb6: {
        _18 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:129:19: 129:20
        _17 = move _15;                  // scope 2 at ui/drop/dynamic-drop.rs:129:19: 129:20
        _19 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:129:9: 129:16
        ((_3.0: TwoPtrs<'_>).0: Ptr<'_>) = move _17; // scope 2 at ui/drop/dynamic-drop.rs:129:9: 129:16
        goto -> bb7;                     // scope 2 at ui/drop/dynamic-drop.rs:128:5: 130:6
    }

    bb7: {
        switchInt(_18) -> [0: bb8, otherwise: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb8: {
        _18 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:131:1: 131:2
        switchInt(_19) -> [0: bb21, otherwise: bb22]; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb9 (cleanup): {
        drop(_4) -> bb11;                // scope 0 at ui/drop/dynamic-drop.rs:122:58: 122:59
    }

    bb10 (cleanup): {
        drop(_5) -> bb11;                // scope 0 at ui/drop/dynamic-drop.rs:122:46: 122:47
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:121:1: 131:2
    }

    bb12 (cleanup): {
        (_3.1: Ptr<'_>) = move _11;      // scope 1 at ui/drop/dynamic-drop.rs:124:5: 124:8
        goto -> bb26;                    // scope 1 at ui/drop/dynamic-drop.rs:124:5: 124:8
    }

    bb13: {
        (_3.1: Ptr<'_>) = move _11;      // scope 1 at ui/drop/dynamic-drop.rs:124:5: 124:8
        _14 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:125:11: 125:20
        _13 = Allocator::alloc(move _14) -> [return: bb5, unwind: bb26]; // scope 1 at ui/drop/dynamic-drop.rs:125:11: 125:20
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:125:13: 125:18
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb14 (cleanup): {
        (_3.1: Ptr<'_>) = move _13;      // scope 1 at ui/drop/dynamic-drop.rs:125:5: 125:8
        goto -> bb26;                    // scope 1 at ui/drop/dynamic-drop.rs:125:5: 125:8
    }

    bb15: {
        (_3.1: Ptr<'_>) = move _13;      // scope 1 at ui/drop/dynamic-drop.rs:125:5: 125:8
        _19 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:127:13: 127:20
        _18 = const true;                // scope 1 at ui/drop/dynamic-drop.rs:127:13: 127:20
        _15 = move ((_3.0: TwoPtrs<'_>).0: Ptr<'_>); // scope 1 at ui/drop/dynamic-drop.rs:127:13: 127:20
        _16 = _2;                        // scope 2 at ui/drop/dynamic-drop.rs:128:8: 128:10
        switchInt(move _16) -> [0: bb7, otherwise: bb6]; // scope 2 at ui/drop/dynamic-drop.rs:128:8: 128:10
    }

    bb16: {
        drop(_15) -> [return: bb8, unwind: bb26]; // scope 1 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb17: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:131:2: 131:2
    }

    bb18 (cleanup): {
        drop((_3.1: Ptr<'_>)) -> bb11;   // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb19: {
        drop((_3.1: Ptr<'_>)) -> bb17;   // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb20 (cleanup): {
        drop(((_3.0: TwoPtrs<'_>).1: Ptr<'_>)) -> bb18; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb21: {
        drop(((_3.0: TwoPtrs<'_>).1: Ptr<'_>)) -> [return: bb19, unwind: bb18]; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb22: {
        drop(((_3.0: TwoPtrs<'_>).0: Ptr<'_>)) -> [return: bb21, unwind: bb20]; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb23 (cleanup): {
        drop((_3.1: Ptr<'_>)) -> bb11;   // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb24 (cleanup): {
        drop(((_3.0: TwoPtrs<'_>).1: Ptr<'_>)) -> bb23; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb25 (cleanup): {
        drop(((_3.0: TwoPtrs<'_>).0: Ptr<'_>)) -> bb24; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }

    bb26 (cleanup): {
        switchInt(_19) -> [0: bb24, otherwise: bb25]; // scope 0 at ui/drop/dynamic-drop.rs:131:1: 131:2
    }
}

fn assignment2(_1: &Allocator, _2: bool, _3: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:133:16: 133:17
    debug c0 => _2;                      // in scope 0 at ui/drop/dynamic-drop.rs:133:31: 133:33
    debug c1 => _3;                      // in scope 0 at ui/drop/dynamic-drop.rs:133:41: 133:43
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:133:51: 133:51
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:134:9: 134:15
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:134:18: 134:27
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:135:18: 135:27
    let mut _8: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:136:8: 136:10
    let _9: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:137:9: 137:17
    let mut _10: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:137:14: 137:16
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:139:10: 139:12
    let mut _12: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:140:8: 140:10
    let mut _13: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:141:14: 141:23
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:141:14: 141:23
    let mut _15: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:139:5: 139:7
    let mut _16: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:143:1: 143:2
    scope 1 {
        debug _v => _4;                  // in scope 1 at ui/drop/dynamic-drop.rs:134:9: 134:15
        let mut _6: Ptr<'_>;             // in scope 1 at ui/drop/dynamic-drop.rs:135:9: 135:15
        scope 2 {
            debug _w => _6;              // in scope 2 at ui/drop/dynamic-drop.rs:135:9: 135:15
        }
    }

    bb0: {
        _15 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:134:9: 134:15
        _16 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:134:9: 134:15
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:134:18: 134:27
        _15 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:134:18: 134:27
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:134:18: 134:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:134:20: 134:25
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 1 at ui/drop/dynamic-drop.rs:135:18: 135:27
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb18]; // scope 1 at ui/drop/dynamic-drop.rs:135:18: 135:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:135:20: 135:25
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = const true;                // scope 1 at ui/drop/dynamic-drop.rs:135:26: 135:27
        _8 = _2;                         // scope 2 at ui/drop/dynamic-drop.rs:136:8: 136:10
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 2 at ui/drop/dynamic-drop.rs:136:8: 136:10
    }

    bb3: {
        _15 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:137:14: 137:16
        _10 = move _4;                   // scope 2 at ui/drop/dynamic-drop.rs:137:14: 137:16
        _9 = std::mem::drop::<Ptr<'_>>(move _10) -> [return: bb19, unwind: bb16]; // scope 2 at ui/drop/dynamic-drop.rs:137:9: 137:17
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:137:9: 137:13
                                         // + literal: Const { ty: fn(Ptr<'_>) {std::mem::drop::<Ptr<'_>>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:139:10: 139:12
        _11 = move _6;                   // scope 2 at ui/drop/dynamic-drop.rs:139:10: 139:12
        switchInt(_15) -> [0: bb12, otherwise: bb13]; // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
    }

    bb5: {
        _14 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:141:14: 141:23
        _13 = Allocator::alloc(move _14) -> [return: bb6, unwind: bb16]; // scope 2 at ui/drop/dynamic-drop.rs:141:14: 141:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:141:16: 141:21
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:141:9: 141:11
        _6 = move _13;                   // scope 2 at ui/drop/dynamic-drop.rs:141:9: 141:11
        goto -> bb7;                     // scope 2 at ui/drop/dynamic-drop.rs:140:5: 142:6
    }

    bb7: {
        switchInt(_16) -> [0: bb8, otherwise: bb14]; // scope 1 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb8: {
        _16 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:143:1: 143:2
        drop(_4) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb9: {
        _15 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:143:1: 143:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:143:2: 143:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:133:1: 143:2
    }

    bb11 (cleanup): {
        _15 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
        _4 = move _11;                   // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
        goto -> bb16;                    // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
    }

    bb12: {
        _15 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
        _4 = move _11;                   // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
        _12 = _3;                        // scope 2 at ui/drop/dynamic-drop.rs:140:8: 140:10
        switchInt(move _12) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/drop/dynamic-drop.rs:140:8: 140:10
    }

    bb13: {
        drop(_4) -> [return: bb12, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:139:5: 139:7
    }

    bb14: {
        drop(_6) -> [return: bb8, unwind: bb18]; // scope 1 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb15 (cleanup): {
        drop(_6) -> bb18;                // scope 1 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb16 (cleanup): {
        switchInt(_16) -> [0: bb18, otherwise: bb15]; // scope 1 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb17 (cleanup): {
        drop(_4) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb18 (cleanup): {
        switchInt(_15) -> [0: bb10, otherwise: bb17]; // scope 0 at ui/drop/dynamic-drop.rs:143:1: 143:2
    }

    bb19: {
        goto -> bb4;                     // scope 2 at ui/drop/dynamic-drop.rs:137:9: 137:17
    }
}

fn assignment1(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:145:16: 145:17
    debug c0 => _2;                      // in scope 0 at ui/drop/dynamic-drop.rs:145:31: 145:33
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:145:41: 145:41
    let mut _3: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:146:9: 146:15
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:146:18: 146:27
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:147:18: 147:27
    let mut _7: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:148:8: 148:10
    let _8: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:149:9: 149:17
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:149:14: 149:16
    let mut _10: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:151:10: 151:12
    let mut _11: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:151:5: 151:7
    let mut _12: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:152:1: 152:2
    scope 1 {
        debug _v => _3;                  // in scope 1 at ui/drop/dynamic-drop.rs:146:9: 146:15
        let mut _5: Ptr<'_>;             // in scope 1 at ui/drop/dynamic-drop.rs:147:9: 147:15
        scope 2 {
            debug _w => _5;              // in scope 2 at ui/drop/dynamic-drop.rs:147:9: 147:15
        }
    }

    bb0: {
        _12 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:146:9: 146:15
        _11 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:146:9: 146:15
        _4 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:146:18: 146:27
        _11 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:146:18: 146:27
        _3 = Allocator::alloc(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:146:18: 146:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:146:20: 146:25
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 1 at ui/drop/dynamic-drop.rs:147:18: 147:27
        _5 = Allocator::alloc(move _6) -> [return: bb2, unwind: bb13]; // scope 1 at ui/drop/dynamic-drop.rs:147:18: 147:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:147:20: 147:25
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const true;                // scope 1 at ui/drop/dynamic-drop.rs:147:26: 147:27
        _7 = _2;                         // scope 2 at ui/drop/dynamic-drop.rs:148:8: 148:10
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 2 at ui/drop/dynamic-drop.rs:148:8: 148:10
    }

    bb3: {
        _11 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:149:14: 149:16
        _9 = move _3;                    // scope 2 at ui/drop/dynamic-drop.rs:149:14: 149:16
        _8 = std::mem::drop::<Ptr<'_>>(move _9) -> [return: bb14, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:149:9: 149:17
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:149:9: 149:13
                                         // + literal: Const { ty: fn(Ptr<'_>) {std::mem::drop::<Ptr<'_>>}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:151:10: 151:12
        _10 = move _5;                   // scope 2 at ui/drop/dynamic-drop.rs:151:10: 151:12
        switchInt(_11) -> [0: bb8, otherwise: bb9]; // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
    }

    bb5: {
        _11 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:152:1: 152:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:152:2: 152:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:145:1: 152:2
    }

    bb7 (cleanup): {
        _11 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
        _3 = move _10;                   // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
        goto -> bb11;                    // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
    }

    bb8: {
        _11 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
        _3 = move _10;                   // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
        _12 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:152:1: 152:2
        drop(_3) -> bb5;                 // scope 0 at ui/drop/dynamic-drop.rs:152:1: 152:2
    }

    bb9: {
        drop(_3) -> [return: bb8, unwind: bb7]; // scope 2 at ui/drop/dynamic-drop.rs:151:5: 151:7
    }

    bb10 (cleanup): {
        drop(_5) -> bb13;                // scope 1 at ui/drop/dynamic-drop.rs:152:1: 152:2
    }

    bb11 (cleanup): {
        switchInt(_12) -> [0: bb13, otherwise: bb10]; // scope 1 at ui/drop/dynamic-drop.rs:152:1: 152:2
    }

    bb12 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/drop/dynamic-drop.rs:152:1: 152:2
    }

    bb13 (cleanup): {
        switchInt(_11) -> [0: bb6, otherwise: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:152:1: 152:2
    }

    bb14: {
        goto -> bb4;                     // scope 2 at ui/drop/dynamic-drop.rs:149:9: 149:17
    }
}

fn union1(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:159:11: 159:12
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:159:26: 159:26
    let mut _3: std::mem::ManuallyDrop<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:161:31: 161:59
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:161:49: 161:58
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:161:49: 161:58
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:162:16: 162:25
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:162:16: 162:25
    let mut _8: &mut Ptr<'_>;            // in scope 0 at ui/drop/dynamic-drop.rs:162:9: 162:13
    let mut _9: &mut std::mem::ManuallyDrop<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:162:10: 162:13
    let _10: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:163:9: 163:44
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:163:14: 163:43
    let mut _12: std::mem::ManuallyDrop<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:163:39: 163:42
    let mut _13: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:162:24: 162:25
    scope 1 {
        let mut _2: Boxy<Ptr<'_>>;       // in scope 1 at ui/drop/dynamic-drop.rs:161:13: 161:18
        scope 2 {
            debug u => _2;               // in scope 2 at ui/drop/dynamic-drop.rs:161:13: 161:18
        }
    }

    bb0: {
        _13 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:161:13: 161:18
        _5 = _1;                         // scope 1 at ui/drop/dynamic-drop.rs:161:49: 161:58
        _4 = Allocator::alloc(move _5) -> bb1; // scope 1 at ui/drop/dynamic-drop.rs:161:49: 161:58
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:161:51: 161:56
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = ManuallyDrop::<Ptr<'_>>::new(move _4) -> bb2; // scope 1 at ui/drop/dynamic-drop.rs:161:31: 161:59
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:161:31: 161:48
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Ptr<'_>) -> ManuallyDrop<Ptr<'_>> {ManuallyDrop::<Ptr<'_>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Boxy::<Ptr<'_>> { a: move _3 }; // scope 1 at ui/drop/dynamic-drop.rs:161:21: 161:61
        _7 = _1;                         // scope 2 at ui/drop/dynamic-drop.rs:162:16: 162:25
        _13 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:162:16: 162:25
        _6 = Allocator::alloc(move _7) -> bb3; // scope 2 at ui/drop/dynamic-drop.rs:162:16: 162:25
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:162:18: 162:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut (_2.1: std::mem::ManuallyDrop<Ptr<'_>>); // scope 2 at ui/drop/dynamic-drop.rs:162:10: 162:13
        _8 = <ManuallyDrop<Ptr<'_>> as DerefMut>::deref_mut(move _9) -> [return: bb4, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:162:9: 162:13
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:162:9: 162:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut ManuallyDrop<Ptr<'_>>) -> &'a mut <ManuallyDrop<Ptr<'_>> as Deref>::Target {<ManuallyDrop<Ptr<'_>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:162:9: 162:13
        drop((*_8)) -> [return: bb9, unwind: bb8]; // scope 2 at ui/drop/dynamic-drop.rs:162:9: 162:13
    }

    bb5: {
        _10 = std::mem::drop::<Ptr<'_>>(move _11) -> bb6; // scope 2 at ui/drop/dynamic-drop.rs:163:9: 163:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:163:9: 163:13
                                         // + literal: Const { ty: fn(Ptr<'_>) {std::mem::drop::<Ptr<'_>>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:165:2: 165:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:159:1: 165:2
    }

    bb8 (cleanup): {
        (*_8) = move _6;                 // scope 2 at ui/drop/dynamic-drop.rs:162:9: 162:13
        goto -> bb11;                    // scope 2 at ui/drop/dynamic-drop.rs:162:9: 162:13
    }

    bb9: {
        (*_8) = move _6;                 // scope 2 at ui/drop/dynamic-drop.rs:162:9: 162:13
        _13 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:162:24: 162:25
        _12 = move (_2.0: std::mem::ManuallyDrop<Ptr<'_>>); // scope 2 at ui/drop/dynamic-drop.rs:163:39: 163:42
        _11 = ManuallyDrop::<Ptr<'_>>::into_inner(move _12) -> bb5; // scope 2 at ui/drop/dynamic-drop.rs:163:14: 163:43
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:163:14: 163:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(ManuallyDrop<Ptr<'_>>) -> Ptr<'_> {ManuallyDrop::<Ptr<'_>>::into_inner}, val: Value(<ZST>) }
    }

    bb10 (cleanup): {
        drop(_6) -> bb7;                 // scope 2 at ui/drop/dynamic-drop.rs:162:24: 162:25
    }

    bb11 (cleanup): {
        switchInt(_13) -> [0: bb7, otherwise: bb10]; // scope 2 at ui/drop/dynamic-drop.rs:162:24: 162:25
    }
}

fn array_simple(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:167:17: 167:18
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:167:32: 167:32
    let _2: [Ptr<'_>; 4];                // in scope 0 at ui/drop/dynamic-drop.rs:168:9: 168:11
    let mut _3: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:168:15: 168:24
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:168:15: 168:24
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:168:26: 168:35
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:168:26: 168:35
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:168:37: 168:46
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:168:37: 168:46
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:168:48: 168:57
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:168:48: 168:57
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:168:9: 168:11
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:168:15: 168:24
        _3 = Allocator::alloc(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:168:15: 168:24
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:168:17: 168:22
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:168:26: 168:35
        _5 = Allocator::alloc(move _6) -> [return: bb2, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:168:26: 168:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:168:28: 168:33
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:168:37: 168:46
        _7 = Allocator::alloc(move _8) -> [return: bb3, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:168:37: 168:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:168:39: 168:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:168:48: 168:57
        _9 = Allocator::alloc(move _10) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:168:48: 168:57
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:168:50: 168:55
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = [move _3, move _5, move _7, move _9]; // scope 0 at ui/drop/dynamic-drop.rs:168:14: 168:58
        drop(_2) -> bb5;                 // scope 0 at ui/drop/dynamic-drop.rs:169:1: 169:2
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:169:2: 169:2
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:168:57: 168:58
    }

    bb7 (cleanup): {
        drop(_5) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:168:57: 168:58
    }

    bb8 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:168:57: 168:58
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:167:1: 169:2
    }
}

fn vec_simple(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:171:15: 171:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:171:30: 171:30
    let _2: std::vec::Vec<Ptr<'_>>;      // in scope 0 at ui/drop/dynamic-drop.rs:172:9: 172:11
    let mut _3: std::boxed::Box<[Ptr<'_>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[Ptr<'_>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[Ptr<'_>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:172:19: 172:28
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:172:19: 172:28
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:172:30: 172:39
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:172:30: 172:39
    let mut _13: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:172:41: 172:50
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:172:41: 172:50
    let mut _15: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:172:52: 172:61
    let mut _16: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:172:52: 172:61
    let mut _17: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _18: *const [Ptr<'_>; 4];    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:172:9: 172:11
    }
    scope 2 {
    }

    bb0: {
        _5 = const 64_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [Ptr<'_>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:172:19: 172:28
        _9 = Allocator::alloc(move _10) -> [return: bb2, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:172:19: 172:28
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:172:21: 172:26
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:172:30: 172:39
        _11 = Allocator::alloc(move _12) -> [return: bb3, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:172:30: 172:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:172:32: 172:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:172:41: 172:50
        _13 = Allocator::alloc(move _14) -> [return: bb4, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:172:41: 172:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:172:43: 172:48
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:172:52: 172:61
        _15 = Allocator::alloc(move _16) -> [return: bb5, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:172:52: 172:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:172:54: 172:59
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = (((_8.0: std::ptr::Unique<[Ptr<'_>; 4]>).0: std::ptr::NonNull<[Ptr<'_>; 4]>).0: *const [Ptr<'_>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_18) = [move _9, move _11, move _13, move _15]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[Ptr<'_>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [Ptr<'_>]>::into_vec::<std::alloc::Global>(move _3) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Ptr<'_>]>) -> Vec<Ptr<'_>> {slice::<impl [Ptr<'_>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:173:1: 173:2
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:173:2: 173:2
    }

    bb8 (cleanup): {
        drop(_13) -> bb9;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb9 (cleanup): {
        drop(_11) -> bb10;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb10 (cleanup): {
        drop(_9) -> bb12;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:171:1: 173:2
    }

    bb12 (cleanup): {
        _17 = alloc::alloc::box_free::<[Ptr<'_>; 4], std::alloc::Global>(move (_8.0: std::ptr::Unique<[Ptr<'_>; 4]>), move (_8.1: std::alloc::Global)) -> bb11; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Ptr<'_>; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[Ptr<'_>; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn generator(_1: &Allocator, _2: usize) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:175:14: 175:15
    debug run_count => _2;               // in scope 0 at ui/drop/dynamic-drop.rs:175:29: 175:38
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:175:47: 175:47
    let mut _3: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:176:5: 176:27
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:176:13: 176:26
    let mut _5: usize;                   // in scope 0 at ui/drop/dynamic-drop.rs:176:13: 176:22
    let mut _6: !;                       // in scope 0 at ui/drop/dynamic-drop.rs:176:5: 176:27
    let mut _7: [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:9: 178:16
    let mut _8: &&Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _9: std::ops::Range<usize>;  // in scope 0 at ui/drop/dynamic-drop.rs:185:14: 185:26
    let mut _10: std::ops::Range<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:185:14: 185:26
    let mut _11: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:185:17: 185:26
    let mut _13: std::option::Option<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:185:14: 185:26
    let mut _14: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:185:14: 185:26
    let mut _15: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:185:14: 185:26
    let mut _16: isize;                  // in scope 0 at ui/drop/dynamic-drop.rs:185:5: 187:6
    let _17: std::ops::GeneratorState<Ptr<'_>, ()>; // in scope 0 at ui/drop/dynamic-drop.rs:186:9: 186:38
    let mut _18: std::pin::Pin<&mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]>; // in scope 0 at ui/drop/dynamic-drop.rs:186:9: 186:27
    let mut _19: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:186:18: 186:26
    let mut _20: ();                     // in scope 0 at ui/drop/dynamic-drop.rs:186:35: 186:37
    scope 1 {
        debug gen => _7;                 // in scope 1 at ui/drop/dynamic-drop.rs:178:9: 178:16
        let mut _12: std::ops::Range<usize>; // in scope 1 at ui/drop/dynamic-drop.rs:185:14: 185:26
        scope 2 {
            debug iter => _12;           // in scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
        }
    }

    bb0: {
        _5 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:176:13: 176:22
        _4 = Lt(move _5, const 4_usize); // scope 0 at ui/drop/dynamic-drop.rs:176:13: 176:26
        _3 = Not(move _4);               // scope 0 at ui/drop/dynamic-drop.rs:176:5: 176:27
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/drop/dynamic-drop.rs:176:5: 176:27
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: run_count < 4"); // scope 0 at ui/drop/dynamic-drop.rs:176:5: 176:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:176:5: 176:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _8 = &_1;                        // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        _7 = [generator@ui/drop/dynamic-drop.rs:178:19: 178:21 (#0)] { a: move _8 }; // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
                                         // generator
                                         // + def_id: DefId(0:53 ~ dynamic_drop[d7db]::generator::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     Ptr<'_>,
                                         //     (),
                                         //     for<'a, 'b, 'c> {&'a Allocator, &'b Allocator, Ptr<'c>, ()},
                                         //     (&&Allocator,),
                                         // ]
                                         // + movability: Movable
        _11 = _2;                        // scope 1 at ui/drop/dynamic-drop.rs:185:17: 185:26
        _10 = std::ops::Range::<usize> { start: const 0_usize, end: move _11 }; // scope 1 at ui/drop/dynamic-drop.rs:185:14: 185:26
        _9 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _10) -> [return: bb3, unwind: bb12]; // scope 1 at ui/drop/dynamic-drop.rs:185:14: 185:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:185:14: 185:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = move _9;                   // scope 1 at ui/drop/dynamic-drop.rs:185:14: 185:26
        goto -> bb4;                     // scope 2 at ui/drop/dynamic-drop.rs:185:5: 187:6
    }

    bb4: {
        _15 = &mut _12;                  // scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
        _14 = &mut (*_15);               // scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
        _13 = <std::ops::Range<usize> as Iterator>::next(move _14) -> [return: bb5, unwind: bb12]; // scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:185:14: 185:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = discriminant(_13);         // scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
        switchInt(move _16) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
    }

    bb6: {
        _19 = &mut _7;                   // scope 2 at ui/drop/dynamic-drop.rs:186:18: 186:26
        _18 = Pin::<&mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]>::new(move _19) -> [return: bb9, unwind: bb12]; // scope 2 at ui/drop/dynamic-drop.rs:186:9: 186:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:186:9: 186:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]) -> Pin<&mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]> {Pin::<&mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]>::new}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 2 at ui/drop/dynamic-drop.rs:185:14: 185:26
    }

    bb8: {
        drop(_7) -> bb11;                // scope 0 at ui/drop/dynamic-drop.rs:188:1: 188:2
    }

    bb9: {
        _17 = <[generator@ui/drop/dynamic-drop.rs:178:19: 178:21] as Generator>::resume(move _18, move _20) -> [return: bb10, unwind: bb12]; // scope 2 at ui/drop/dynamic-drop.rs:186:9: 186:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:186:28: 186:34
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]>, ()) -> GeneratorState<<[generator@ui/drop/dynamic-drop.rs:178:19: 178:21] as Generator>::Yield, <[generator@ui/drop/dynamic-drop.rs:178:19: 178:21] as Generator>::Return> {<[generator@ui/drop/dynamic-drop.rs:178:19: 178:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_17) -> [return: bb4, unwind: bb12]; // scope 2 at ui/drop/dynamic-drop.rs:186:38: 186:39
    }

    bb11: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:188:2: 188:2
    }

    bb12 (cleanup): {
        drop(_7) -> bb13;                // scope 0 at ui/drop/dynamic-drop.rs:188:1: 188:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:175:1: 188:2
    }
}

fn generator::{closure#0}(_1: Pin<&mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]>, _2: ()) -> GeneratorState<Ptr<'_>, ()> {
    debug a => (*((*(_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21])).0: &&Allocator)); // in scope 0 at ui/drop/dynamic-drop.rs:175:14: 175:15
    let mut _0: std::ops::GeneratorState<Ptr<'_>, ()>; // return place in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let _3: (Ptr<'_>, (), Ptr<'_>, ());  // in scope 0 at ui/drop/dynamic-drop.rs:179:9: 183:11
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
    let mut _8: ();                      // in scope 0 at ui/drop/dynamic-drop.rs:182:10: 182:25
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
    let mut _11: &&Allocator;            // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _13: &&Allocator;            // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _15: &&Allocator;            // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _16: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _17: &&Allocator;            // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _18: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _19: ();                     // in scope 0 at ui/drop/dynamic-drop.rs:178:22: 178:22
    let mut _20: u32;                    // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _21: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _22: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _23: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _24: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _25: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _26: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _27: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _28: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _29: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _30: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _31: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _32: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _33: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _34: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _35: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _36: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    let mut _37: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]; // in scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6

    bb0: {
        _21 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        _20 = discriminant((*_21));      // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        switchInt(move _20) -> [0: bb1, 1: bb13, 2: bb12, 3: bb10, 4: bb11, otherwise: bb14]; // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    }

    bb1: {
        _22 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
        _11 = deref_copy ((*_22).0: &&Allocator); // scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
        _12 = deref_copy (*_11);         // scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
        _4 = _12;                        // scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
        _23 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
        (((*_23) as variant#3).0: Ptr<'_>) = Allocator::alloc(move _4) -> [return: bb2, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:179:10: 179:19
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:179:12: 179:17
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _24 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
        _13 = deref_copy ((*_24).0: &&Allocator); // scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
        _14 = deref_copy (*_13);         // scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
        _6 = _14;                        // scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
        _5 = Allocator::alloc(move _6) -> [return: bb3, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:180:16: 180:25
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:180:18: 180:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = GeneratorState::<Ptr<'_>, ()>::Yielded(move _5); // scope 0 at ui/drop/dynamic-drop.rs:180:10: 180:25
        _25 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:180:10: 180:25
        discriminant((*_25)) = 3;        // scope 0 at ui/drop/dynamic-drop.rs:180:10: 180:25
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:180:10: 180:25
    }

    bb4: {
        _28 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
        _17 = deref_copy ((*_28).0: &&Allocator); // scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
        _18 = deref_copy (*_17);         // scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
        _10 = _18;                       // scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
        _9 = Allocator::alloc(move _10) -> [return: bb5, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:182:16: 182:25
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:182:18: 182:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = GeneratorState::<Ptr<'_>, ()>::Yielded(move _9); // scope 0 at ui/drop/dynamic-drop.rs:182:10: 182:25
        _29 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:182:10: 182:25
        discriminant((*_29)) = 4;        // scope 0 at ui/drop/dynamic-drop.rs:182:10: 182:25
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:182:10: 182:25
    }

    bb6: {
        _19 = const ();                  // scope 0 at ui/drop/dynamic-drop.rs:178:22: 184:6
        _0 = GeneratorState::<Ptr<'_>, ()>::Complete(move _19); // scope 0 at ui/drop/dynamic-drop.rs:184:6: 184:6
        _33 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:184:6: 184:6
        discriminant((*_33)) = 1;        // scope 0 at ui/drop/dynamic-drop.rs:184:6: 184:6
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:184:6: 184:6
    }

    bb7 (cleanup): {
        _34 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:183:10: 183:11
        drop((((*_34) as variant#4).2: Ptr<'_>)) -> bb8; // scope 0 at ui/drop/dynamic-drop.rs:183:10: 183:11
    }

    bb8 (cleanup): {
        _35 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:183:10: 183:11
        drop((((*_35) as variant#3).0: Ptr<'_>)) -> bb9; // scope 0 at ui/drop/dynamic-drop.rs:183:10: 183:11
    }

    bb9 (cleanup): {
        _36 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        discriminant((*_36)) = 2;        // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    }

    bb10: {
        _37 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        (((*_37) as variant#4).1: ()) = move _2; // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        _26 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
        _15 = deref_copy ((*_26).0: &&Allocator); // scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
        _16 = deref_copy (*_15);         // scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
        _7 = _16;                        // scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
        _27 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
        (((*_27) as variant#4).2: Ptr<'_>) = Allocator::alloc(move _7) -> [return: bb4, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:181:10: 181:19
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:181:12: 181:17
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb11: {
        _8 = move _2;                    // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
        _30 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:179:9: 183:11
        _31 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:179:9: 183:11
        _32 = deref_copy (_1.0: &mut [generator@ui/drop/dynamic-drop.rs:178:19: 178:21]); // scope 0 at ui/drop/dynamic-drop.rs:179:9: 183:11
        _3 = (move (((*_30) as variant#3).0: Ptr<'_>), move (((*_31) as variant#4).1: ()), move (((*_32) as variant#4).2: Ptr<'_>), move _8); // scope 0 at ui/drop/dynamic-drop.rs:179:9: 183:11
        drop(_3) -> [return: bb6, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:183:11: 183:12
    }

    bb12: {
        assert(const false, "generator resumed after panicking") -> bb12; // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    }

    bb13: {
        assert(const false, "generator resumed after completion") -> bb13; // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    }

    bb14: {
        unreachable;                     // scope 0 at ui/drop/dynamic-drop.rs:178:19: 184:6
    }
}

fn mixed_drop_and_nondrop(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:190:27: 190:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:190:42: 190:42
    let _2: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:195:10: 195:11
    let _3: i32;                         // in scope 0 at ui/drop/dynamic-drop.rs:195:13: 195:14
    let _4: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:195:16: 195:17
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:196:9: 196:18
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:196:9: 196:18
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:198:9: 198:18
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:198:9: 198:18
    let mut _9: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:199:1: 199:2
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/drop/dynamic-drop.rs:195:10: 195:11
        debug y => _3;                   // in scope 1 at ui/drop/dynamic-drop.rs:195:13: 195:14
        debug z => _4;                   // in scope 1 at ui/drop/dynamic-drop.rs:195:16: 195:17
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/drop/dynamic-drop.rs:195:10: 195:11
        _6 = _1;                         // scope 1 at ui/drop/dynamic-drop.rs:196:9: 196:18
        _5 = Allocator::alloc(move _6) -> [return: bb1, unwind: bb7]; // scope 1 at ui/drop/dynamic-drop.rs:196:9: 196:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:196:11: 196:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const true;                 // scope 1 at ui/drop/dynamic-drop.rs:196:5: 196:6
        _2 = move _5;                    // scope 1 at ui/drop/dynamic-drop.rs:196:5: 196:6
        _3 = const 5_i32;                // scope 1 at ui/drop/dynamic-drop.rs:197:5: 197:10
        _8 = _1;                         // scope 1 at ui/drop/dynamic-drop.rs:198:9: 198:18
        _7 = Allocator::alloc(move _8) -> [return: bb2, unwind: bb7]; // scope 1 at ui/drop/dynamic-drop.rs:198:9: 198:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:198:11: 198:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _7;                    // scope 1 at ui/drop/dynamic-drop.rs:198:5: 198:6
        drop(_4) -> [return: bb3, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:199:1: 199:2
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/drop/dynamic-drop.rs:199:1: 199:2
    }

    bb4: {
        _9 = const false;                // scope 0 at ui/drop/dynamic-drop.rs:199:1: 199:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:199:2: 199:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:190:1: 199:2
    }

    bb6 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/drop/dynamic-drop.rs:199:1: 199:2
    }

    bb7 (cleanup): {
        switchInt(_9) -> [0: bb5, otherwise: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:199:1: 199:2
    }
}

fn vec_unreachable(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:202:20: 202:21
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:202:35: 202:35
    let _2: std::vec::Vec<Ptr<'_>>;      // in scope 0 at ui/drop/dynamic-drop.rs:203:9: 203:11
    let mut _3: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[Ptr<'_>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:203:19: 203:28
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:203:19: 203:28
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:203:30: 203:39
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:203:30: 203:39
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:203:41: 203:50
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:203:41: 203:50
    let mut _13: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _14: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:203:9: 203:11
    }
    scope 2 {
    }

    bb0: {
        _3 = const 64_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [Ptr<'_>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:203:19: 203:28
        _7 = Allocator::alloc(move _8) -> [return: bb2, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:203:19: 203:28
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:203:21: 203:26
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:203:30: 203:39
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:203:30: 203:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:203:32: 203:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:203:41: 203:50
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:203:41: 203:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:203:43: 203:48
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_11) -> [return: bb5, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind: bb10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb12]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb7: {
        _13 = alloc::alloc::box_free::<[Ptr<'_>; 4], std::alloc::Global>(move (_6.0: std::ptr::Unique<[Ptr<'_>; 4]>), move (_6.1: std::alloc::Global)) -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Ptr<'_>; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[Ptr<'_>; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:204:2: 204:2
    }

    bb9 (cleanup): {
        drop(_9) -> bb10;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb10 (cleanup): {
        drop(_7) -> bb12;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:202:1: 204:2
    }

    bb12 (cleanup): {
        _14 = alloc::alloc::box_free::<[Ptr<'_>; 4], std::alloc::Global>(move (_6.0: std::ptr::Unique<[Ptr<'_>; 4]>), move (_6.1: std::alloc::Global)) -> bb11; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Ptr<'_>; 4]>, std::alloc::Global) {alloc::alloc::box_free::<[Ptr<'_>; 4], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn slice_pattern_first(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:206:24: 206:25
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:206:39: 206:39
    let _2: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:207:9: 207:11
    let mut _3: [Ptr<'_>; 3];            // in scope 0 at ui/drop/dynamic-drop.rs:207:19: 207:52
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:207:20: 207:29
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:207:20: 207:29
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:207:31: 207:40
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:207:31: 207:40
    let mut _8: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:207:42: 207:51
    let mut _9: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:207:42: 207:51
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:207:9: 207:11
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:207:20: 207:29
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:207:20: 207:29
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:207:22: 207:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:207:31: 207:40
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:207:31: 207:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:207:33: 207:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:207:42: 207:51
        _8 = Allocator::alloc(move _9) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:207:42: 207:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:207:44: 207:49
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = [move _4, move _6, move _8]; // scope 0 at ui/drop/dynamic-drop.rs:207:19: 207:52
        _2 = move _3[0 of 3];            // scope 0 at ui/drop/dynamic-drop.rs:207:9: 207:11
        drop(_3[1 of 3]) -> [return: bb11, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:207:52: 207:53
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:208:2: 208:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:208:1: 208:2
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:207:51: 207:52
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:207:51: 207:52
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:206:1: 208:2
    }

    bb9: {
        drop(_2) -> bb4;                 // scope 0 at ui/drop/dynamic-drop.rs:208:1: 208:2
    }

    bb10 (cleanup): {
        drop(_3[2 of 3]) -> bb5;         // scope 0 at ui/drop/dynamic-drop.rs:207:52: 207:53
    }

    bb11: {
        drop(_3[2 of 3]) -> [return: bb9, unwind: bb5]; // scope 0 at ui/drop/dynamic-drop.rs:207:52: 207:53
    }
}

fn slice_pattern_middle(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:210:25: 210:26
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:210:40: 210:40
    let _2: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:211:12: 211:14
    let mut _3: [Ptr<'_>; 3];            // in scope 0 at ui/drop/dynamic-drop.rs:211:21: 211:54
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:211:22: 211:31
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:211:22: 211:31
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:211:33: 211:42
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:211:33: 211:42
    let mut _8: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:211:44: 211:53
    let mut _9: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:211:44: 211:53
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:211:12: 211:14
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:211:22: 211:31
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:211:22: 211:31
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:211:24: 211:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:211:33: 211:42
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:211:33: 211:42
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:211:35: 211:40
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:211:44: 211:53
        _8 = Allocator::alloc(move _9) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:211:44: 211:53
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:211:46: 211:51
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = [move _4, move _6, move _8]; // scope 0 at ui/drop/dynamic-drop.rs:211:21: 211:54
        _2 = move _3[1 of 3];            // scope 0 at ui/drop/dynamic-drop.rs:211:12: 211:14
        drop(_3[0 of 3]) -> [return: bb11, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:211:54: 211:55
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:212:2: 212:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:212:1: 212:2
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:211:53: 211:54
    }

    bb7 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:211:53: 211:54
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:210:1: 212:2
    }

    bb9: {
        drop(_2) -> bb4;                 // scope 0 at ui/drop/dynamic-drop.rs:212:1: 212:2
    }

    bb10 (cleanup): {
        drop(_3[2 of 3]) -> bb5;         // scope 0 at ui/drop/dynamic-drop.rs:211:54: 211:55
    }

    bb11: {
        drop(_3[2 of 3]) -> [return: bb9, unwind: bb5]; // scope 0 at ui/drop/dynamic-drop.rs:211:54: 211:55
    }
}

fn slice_pattern_two(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:214:22: 214:23
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:214:37: 214:37
    let _2: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:215:9: 215:11
    let _3: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:215:16: 215:18
    let mut _4: [Ptr<'_>; 4];            // in scope 0 at ui/drop/dynamic-drop.rs:215:25: 215:69
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:215:26: 215:35
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:215:26: 215:35
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:215:37: 215:46
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:215:37: 215:46
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:215:48: 215:57
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:215:48: 215:57
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:215:59: 215:68
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:215:59: 215:68
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:215:9: 215:11
        debug _y => _3;                  // in scope 1 at ui/drop/dynamic-drop.rs:215:16: 215:18
    }

    bb0: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:215:26: 215:35
        _5 = Allocator::alloc(move _6) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:215:26: 215:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:215:28: 215:33
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:215:37: 215:46
        _7 = Allocator::alloc(move _8) -> [return: bb2, unwind: bb11]; // scope 0 at ui/drop/dynamic-drop.rs:215:37: 215:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:215:39: 215:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:215:48: 215:57
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:215:48: 215:57
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:215:50: 215:55
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:215:59: 215:68
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:215:59: 215:68
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:215:61: 215:66
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = [move _5, move _7, move _9, move _11]; // scope 0 at ui/drop/dynamic-drop.rs:215:25: 215:69
        _2 = move _4[0 of 4];            // scope 0 at ui/drop/dynamic-drop.rs:215:9: 215:11
        _3 = move _4[2 of 4];            // scope 0 at ui/drop/dynamic-drop.rs:215:16: 215:18
        drop(_4[1 of 4]) -> [return: bb15, unwind: bb14]; // scope 0 at ui/drop/dynamic-drop.rs:215:69: 215:70
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 0 at ui/drop/dynamic-drop.rs:216:1: 216:2
    }

    bb6: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:216:2: 216:2
    }

    bb7 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:216:1: 216:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/drop/dynamic-drop.rs:216:1: 216:2
    }

    bb9 (cleanup): {
        drop(_9) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:215:68: 215:69
    }

    bb10 (cleanup): {
        drop(_7) -> bb11;                // scope 0 at ui/drop/dynamic-drop.rs:215:68: 215:69
    }

    bb11 (cleanup): {
        drop(_5) -> bb12;                // scope 0 at ui/drop/dynamic-drop.rs:215:68: 215:69
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:214:1: 216:2
    }

    bb13: {
        drop(_3) -> [return: bb5, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:216:1: 216:2
    }

    bb14 (cleanup): {
        drop(_4[3 of 4]) -> bb7;         // scope 0 at ui/drop/dynamic-drop.rs:215:69: 215:70
    }

    bb15: {
        drop(_4[3 of 4]) -> [return: bb13, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:215:69: 215:70
    }
}

fn slice_pattern_last(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:218:23: 218:24
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:218:38: 218:38
    let _2: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:219:13: 219:15
    let mut _3: [Ptr<'_>; 4];            // in scope 0 at ui/drop/dynamic-drop.rs:219:19: 219:63
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:219:20: 219:29
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:219:20: 219:29
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:219:31: 219:40
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:219:31: 219:40
    let mut _8: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:219:42: 219:51
    let mut _9: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:219:42: 219:51
    let mut _10: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:219:53: 219:62
    let mut _11: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:219:53: 219:62
    scope 1 {
        debug _y => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:219:13: 219:15
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:219:20: 219:29
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:219:20: 219:29
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:219:22: 219:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:219:31: 219:40
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:219:31: 219:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:219:33: 219:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:219:42: 219:51
        _8 = Allocator::alloc(move _9) -> [return: bb3, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:219:42: 219:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:219:44: 219:49
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:219:53: 219:62
        _10 = Allocator::alloc(move _11) -> [return: bb4, unwind: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:219:53: 219:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:219:55: 219:60
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = [move _4, move _6, move _8, move _10]; // scope 0 at ui/drop/dynamic-drop.rs:219:19: 219:63
        _2 = move _3[3 of 4];            // scope 0 at ui/drop/dynamic-drop.rs:219:13: 219:15
        drop(_3[0 of 4]) -> [return: bb15, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:219:63: 219:64
    }

    bb5: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:220:2: 220:2
    }

    bb6 (cleanup): {
        drop(_8) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:219:62: 219:63
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:219:62: 219:63
    }

    bb8 (cleanup): {
        drop(_4) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:219:62: 219:63
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:218:1: 220:2
    }

    bb10 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:220:1: 220:2
    }

    bb11 (cleanup): {
        drop(_3[2 of 4]) -> bb10;        // scope 0 at ui/drop/dynamic-drop.rs:219:63: 219:64
    }

    bb12 (cleanup): {
        drop(_3[1 of 4]) -> bb11;        // scope 0 at ui/drop/dynamic-drop.rs:219:63: 219:64
    }

    bb13: {
        drop(_2) -> bb5;                 // scope 0 at ui/drop/dynamic-drop.rs:220:1: 220:2
    }

    bb14: {
        drop(_3[2 of 4]) -> [return: bb13, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:219:63: 219:64
    }

    bb15: {
        drop(_3[1 of 4]) -> [return: bb14, unwind: bb11]; // scope 0 at ui/drop/dynamic-drop.rs:219:63: 219:64
    }
}

fn slice_pattern_one_of(_1: &Allocator, _2: usize) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:222:25: 222:26
    debug i => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:222:40: 222:41
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:222:50: 222:50
    let _3: [Ptr<'_>; 4];                // in scope 0 at ui/drop/dynamic-drop.rs:223:9: 223:14
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:223:18: 223:27
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:223:18: 223:27
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:223:29: 223:38
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:223:29: 223:38
    let mut _8: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:223:40: 223:49
    let mut _9: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:223:40: 223:49
    let mut _10: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:223:51: 223:60
    let mut _11: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:223:51: 223:60
    let mut _17: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _18: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    let mut _19: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    let mut _20: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    let mut _21: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    scope 1 {
        debug array => _3;               // in scope 1 at ui/drop/dynamic-drop.rs:223:9: 223:14
        let _12: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:224:9: 224:11
        let _13: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:225:21: 225:22
        let _14: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:226:24: 226:25
        let _15: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:227:27: 227:28
        let _16: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:228:30: 228:31
        scope 2 {
            debug _x => _12;             // in scope 2 at ui/drop/dynamic-drop.rs:224:9: 224:11
        }
        scope 3 {
            debug a => _13;              // in scope 3 at ui/drop/dynamic-drop.rs:225:21: 225:22
        }
        scope 4 {
            debug a => _14;              // in scope 4 at ui/drop/dynamic-drop.rs:226:24: 226:25
        }
        scope 5 {
            debug a => _15;              // in scope 5 at ui/drop/dynamic-drop.rs:227:27: 227:28
        }
        scope 6 {
            debug a => _16;              // in scope 6 at ui/drop/dynamic-drop.rs:228:30: 228:31
        }
    }

    bb0: {
        _18 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:223:9: 223:14
        _21 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:223:9: 223:14
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:223:9: 223:14
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:223:9: 223:14
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:223:18: 223:27
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:223:18: 223:27
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:223:20: 223:25
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:223:29: 223:38
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb14]; // scope 0 at ui/drop/dynamic-drop.rs:223:29: 223:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:223:31: 223:36
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:223:40: 223:49
        _8 = Allocator::alloc(move _9) -> [return: bb3, unwind: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:223:40: 223:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:223:42: 223:47
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:223:51: 223:60
        _10 = Allocator::alloc(move _11) -> [return: bb4, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:223:51: 223:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:223:53: 223:58
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:223:17: 223:61
        _19 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:223:17: 223:61
        _20 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:223:17: 223:61
        _21 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:223:17: 223:61
        _3 = [move _4, move _6, move _8, move _10]; // scope 0 at ui/drop/dynamic-drop.rs:223:17: 223:61
        switchInt(_2) -> [0: bb6, 1: bb7, 2: bb8, 3: bb9, otherwise: bb5]; // scope 1 at ui/drop/dynamic-drop.rs:224:14: 224:21
    }

    bb5: {
        _17 = begin_panic::<&str>(const "unmatched") -> bb37; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:229:21: 229:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _21 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:225:21: 225:22
        _13 = move _3[0 of 4];           // scope 1 at ui/drop/dynamic-drop.rs:225:21: 225:22
        _12 = move _13;                  // scope 3 at ui/drop/dynamic-drop.rs:225:37: 225:38
        goto -> bb10;                    // scope 1 at ui/drop/dynamic-drop.rs:225:39: 225:40
    }

    bb7: {
        _20 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:226:24: 226:25
        _14 = move _3[1 of 4];           // scope 1 at ui/drop/dynamic-drop.rs:226:24: 226:25
        _12 = move _14;                  // scope 4 at ui/drop/dynamic-drop.rs:226:40: 226:41
        goto -> bb10;                    // scope 1 at ui/drop/dynamic-drop.rs:226:42: 226:43
    }

    bb8: {
        _19 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:227:27: 227:28
        _15 = move _3[2 of 4];           // scope 1 at ui/drop/dynamic-drop.rs:227:27: 227:28
        _12 = move _15;                  // scope 5 at ui/drop/dynamic-drop.rs:227:42: 227:43
        goto -> bb10;                    // scope 1 at ui/drop/dynamic-drop.rs:227:44: 227:45
    }

    bb9: {
        _18 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:228:30: 228:31
        _16 = move _3[3 of 4];           // scope 1 at ui/drop/dynamic-drop.rs:228:30: 228:31
        _12 = move _16;                  // scope 6 at ui/drop/dynamic-drop.rs:228:42: 228:43
        goto -> bb10;                    // scope 1 at ui/drop/dynamic-drop.rs:228:44: 228:45
    }

    bb10: {
        drop(_12) -> [return: bb11, unwind: bb37]; // scope 1 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb11: {
        switchInt(_21) -> [0: bb27, otherwise: bb29]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb12 (cleanup): {
        drop(_8) -> bb13;                // scope 0 at ui/drop/dynamic-drop.rs:223:60: 223:61
    }

    bb13 (cleanup): {
        drop(_6) -> bb14;                // scope 0 at ui/drop/dynamic-drop.rs:223:60: 223:61
    }

    bb14 (cleanup): {
        drop(_4) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:223:60: 223:61
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:222:1: 231:2
    }

    bb16: {
        _18 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
        _21 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:231:2: 231:2
    }

    bb17 (cleanup): {
        switchInt(_18) -> [0: bb15, otherwise: bb18]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb18 (cleanup): {
        drop(_3[3 of 4]) -> bb15;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb19 (cleanup): {
        switchInt(_19) -> [0: bb17, otherwise: bb20]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb20 (cleanup): {
        drop(_3[2 of 4]) -> bb17;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb21 (cleanup): {
        switchInt(_20) -> [0: bb19, otherwise: bb22]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb22 (cleanup): {
        drop(_3[1 of 4]) -> bb19;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb23: {
        switchInt(_18) -> [0: bb16, otherwise: bb24]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb24: {
        drop(_3[3 of 4]) -> bb16;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb25: {
        switchInt(_19) -> [0: bb23, otherwise: bb26]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb26: {
        drop(_3[2 of 4]) -> [return: bb23, unwind: bb17]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb27: {
        switchInt(_20) -> [0: bb25, otherwise: bb28]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb28: {
        drop(_3[1 of 4]) -> [return: bb25, unwind: bb19]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb29: {
        drop(_3[0 of 4]) -> [return: bb27, unwind: bb21]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb30 (cleanup): {
        switchInt(_18) -> [0: bb15, otherwise: bb31]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb31 (cleanup): {
        drop(_3[3 of 4]) -> bb15;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb32 (cleanup): {
        switchInt(_19) -> [0: bb30, otherwise: bb33]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb33 (cleanup): {
        drop(_3[2 of 4]) -> bb30;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb34 (cleanup): {
        switchInt(_20) -> [0: bb32, otherwise: bb35]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb35 (cleanup): {
        drop(_3[1 of 4]) -> bb32;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb36 (cleanup): {
        drop(_3[0 of 4]) -> bb34;        // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }

    bb37 (cleanup): {
        switchInt(_21) -> [0: bb34, otherwise: bb36]; // scope 0 at ui/drop/dynamic-drop.rs:231:1: 231:2
    }
}

fn subslice_pattern_from_end(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:233:30: 233:31
    debug arg => _2;                     // in scope 0 at ui/drop/dynamic-drop.rs:233:45: 233:48
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:233:56: 233:56
    let _3: [Ptr<'_>; 3];                // in scope 0 at ui/drop/dynamic-drop.rs:234:9: 234:10
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:234:14: 234:23
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:234:14: 234:23
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:234:25: 234:34
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:234:25: 234:34
    let mut _8: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:234:36: 234:45
    let mut _9: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:234:36: 234:45
    let mut _10: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:235:8: 235:11
    let mut _13: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/drop/dynamic-drop.rs:234:9: 234:10
        let _11: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:236:17: 236:19
        let _12: [Ptr<'_>; 2];           // in scope 1 at ui/drop/dynamic-drop.rs:238:16: 238:18
        scope 2 {
            debug _x => _11;             // in scope 2 at ui/drop/dynamic-drop.rs:236:17: 236:19
        }
        scope 3 {
            debug _y => _12;             // in scope 3 at ui/drop/dynamic-drop.rs:238:16: 238:18
        }
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:234:9: 234:10
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:234:14: 234:23
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:234:14: 234:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:234:16: 234:21
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:234:25: 234:34
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:234:25: 234:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:234:27: 234:32
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:234:36: 234:45
        _8 = Allocator::alloc(move _9) -> [return: bb3, unwind: bb7]; // scope 0 at ui/drop/dynamic-drop.rs:234:36: 234:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:234:38: 234:43
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:234:13: 234:46
        _3 = [move _4, move _6, move _8]; // scope 0 at ui/drop/dynamic-drop.rs:234:13: 234:46
        _10 = _2;                        // scope 1 at ui/drop/dynamic-drop.rs:235:8: 235:11
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/drop/dynamic-drop.rs:235:8: 235:11
    }

    bb4: {
        _11 = move _3[1 of 3];           // scope 1 at ui/drop/dynamic-drop.rs:236:17: 236:19
        drop(_11) -> [return: bb6, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:237:5: 237:6
    }

    bb5: {
        _13 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:238:16: 238:18
        _12 = move _3[1..3];             // scope 1 at ui/drop/dynamic-drop.rs:238:16: 238:18
        drop(_12) -> [return: bb6, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:239:5: 239:6
    }

    bb6: {
        drop(_3[0 of 3]) -> [return: bb14, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb7 (cleanup): {
        drop(_6) -> bb8;                 // scope 0 at ui/drop/dynamic-drop.rs:234:45: 234:46
    }

    bb8 (cleanup): {
        drop(_4) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:234:45: 234:46
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:233:1: 240:2
    }

    bb10: {
        _13 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:240:2: 240:2
    }

    bb11 (cleanup): {
        drop(_3[2 of 3]) -> bb9;         // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb12 (cleanup): {
        switchInt(_13) -> [0: bb9, otherwise: bb11]; // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb13: {
        drop(_3[2 of 3]) -> bb10;        // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb14: {
        switchInt(_13) -> [0: bb10, otherwise: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb15 (cleanup): {
        drop(_3[2 of 3]) -> bb9;         // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb16 (cleanup): {
        switchInt(_13) -> [0: bb9, otherwise: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }

    bb17 (cleanup): {
        drop(_3[0 of 3]) -> bb16;        // scope 0 at ui/drop/dynamic-drop.rs:240:1: 240:2
    }
}

fn subslice_pattern_from_end_with_drop(_1: &Allocator, _2: bool, _3: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:242:40: 242:41
    debug arg => _2;                     // in scope 0 at ui/drop/dynamic-drop.rs:242:55: 242:58
    debug arg2 => _3;                    // in scope 0 at ui/drop/dynamic-drop.rs:242:66: 242:70
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:242:78: 242:78
    let _4: [Ptr<'_>; 5];                // in scope 0 at ui/drop/dynamic-drop.rs:243:9: 243:10
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:243:14: 243:23
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:243:14: 243:23
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:243:25: 243:34
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:243:25: 243:34
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:243:36: 243:45
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:243:36: 243:45
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:243:47: 243:56
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:243:47: 243:56
    let mut _13: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:243:58: 243:67
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:243:58: 243:67
    let mut _15: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:244:8: 244:12
    let _16: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:245:9: 245:16
    let mut _17: [Ptr<'_>; 5];           // in scope 0 at ui/drop/dynamic-drop.rs:245:14: 245:15
    let mut _18: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:249:8: 249:11
    let mut _21: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    let mut _22: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    let mut _23: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    let mut _24: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    scope 1 {
        debug a => _4;                   // in scope 1 at ui/drop/dynamic-drop.rs:243:9: 243:10
        let _19: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:250:17: 250:19
        let _20: [Ptr<'_>; 4];           // in scope 1 at ui/drop/dynamic-drop.rs:252:16: 252:18
        scope 2 {
            debug _x => _19;             // in scope 2 at ui/drop/dynamic-drop.rs:250:17: 250:19
        }
        scope 3 {
            debug _y => _20;             // in scope 3 at ui/drop/dynamic-drop.rs:252:16: 252:18
        }
    }

    bb0: {
        _23 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:243:9: 243:10
        _21 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:243:9: 243:10
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:243:9: 243:10
        _22 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:243:9: 243:10
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:243:14: 243:23
        _5 = Allocator::alloc(move _6) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:243:14: 243:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:243:16: 243:21
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:243:25: 243:34
        _7 = Allocator::alloc(move _8) -> [return: bb2, unwind: bb16]; // scope 0 at ui/drop/dynamic-drop.rs:243:25: 243:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:243:27: 243:32
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:243:36: 243:45
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:243:36: 243:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:243:38: 243:43
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:243:47: 243:56
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb14]; // scope 0 at ui/drop/dynamic-drop.rs:243:47: 243:56
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:243:49: 243:54
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:243:58: 243:67
        _13 = Allocator::alloc(move _14) -> [return: bb5, unwind: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:243:58: 243:67
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:243:60: 243:65
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:243:13: 243:68
        _21 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:243:13: 243:68
        _22 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:243:13: 243:68
        _23 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:243:13: 243:68
        _4 = [move _5, move _7, move _9, move _11, move _13]; // scope 0 at ui/drop/dynamic-drop.rs:243:13: 243:68
        _15 = _3;                        // scope 1 at ui/drop/dynamic-drop.rs:244:8: 244:12
        switchInt(move _15) -> [0: bb8, otherwise: bb6]; // scope 1 at ui/drop/dynamic-drop.rs:244:8: 244:12
    }

    bb6: {
        _24 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:245:14: 245:15
        _21 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:245:14: 245:15
        _22 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:245:14: 245:15
        _23 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:245:14: 245:15
        _17 = move _4;                   // scope 1 at ui/drop/dynamic-drop.rs:245:14: 245:15
        _16 = std::mem::drop::<[Ptr<'_>; 5]>(move _17) -> [return: bb7, unwind: bb38]; // scope 1 at ui/drop/dynamic-drop.rs:245:9: 245:16
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:245:9: 245:13
                                         // + literal: Const { ty: fn([Ptr<'_>; 5]) {std::mem::drop::<[Ptr<'_>; 5]>}, val: Value(<ZST>) }
    }

    bb7: {
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _21 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _22 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _23 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        goto -> bb12;                    // scope 0 at ui/drop/dynamic-drop.rs:254:2: 254:2
    }

    bb8: {
        _18 = _2;                        // scope 1 at ui/drop/dynamic-drop.rs:249:8: 249:11
        switchInt(move _18) -> [0: bb10, otherwise: bb9]; // scope 1 at ui/drop/dynamic-drop.rs:249:8: 249:11
    }

    bb9: {
        _19 = move _4[3 of 5];           // scope 1 at ui/drop/dynamic-drop.rs:250:17: 250:19
        drop(_19) -> [return: bb11, unwind: bb38]; // scope 1 at ui/drop/dynamic-drop.rs:251:5: 251:6
    }

    bb10: {
        _23 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:252:16: 252:18
        _22 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:252:16: 252:18
        _21 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:252:16: 252:18
        _20 = move _4[1..5];             // scope 1 at ui/drop/dynamic-drop.rs:252:16: 252:18
        drop(_20) -> [return: bb11, unwind: bb38]; // scope 1 at ui/drop/dynamic-drop.rs:253:5: 253:6
    }

    bb11: {
        drop(_4[0 of 5]) -> [return: bb29, unwind: bb23]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb12: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:254:2: 254:2
    }

    bb13 (cleanup): {
        drop(_11) -> bb14;               // scope 0 at ui/drop/dynamic-drop.rs:243:67: 243:68
    }

    bb14 (cleanup): {
        drop(_9) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:243:67: 243:68
    }

    bb15 (cleanup): {
        drop(_7) -> bb16;                // scope 0 at ui/drop/dynamic-drop.rs:243:67: 243:68
    }

    bb16 (cleanup): {
        drop(_5) -> bb17;                // scope 0 at ui/drop/dynamic-drop.rs:243:67: 243:68
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:242:1: 254:2
    }

    bb18: {
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _21 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _22 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        _23 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
        goto -> bb12;                    // scope 0 at ui/drop/dynamic-drop.rs:254:2: 254:2
    }

    bb19 (cleanup): {
        drop(_4[4 of 5]) -> bb17;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb20 (cleanup): {
        switchInt(_21) -> [0: bb17, otherwise: bb19]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb21 (cleanup): {
        switchInt(_22) -> [0: bb20, otherwise: bb22]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb22 (cleanup): {
        drop(_4[2 of 5]) -> bb20;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb23 (cleanup): {
        switchInt(_23) -> [0: bb21, otherwise: bb24]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb24 (cleanup): {
        drop(_4[1 of 5]) -> bb21;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb25: {
        drop(_4[4 of 5]) -> bb18;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb26: {
        switchInt(_21) -> [0: bb18, otherwise: bb25]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb27: {
        switchInt(_22) -> [0: bb26, otherwise: bb28]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb28: {
        drop(_4[2 of 5]) -> [return: bb26, unwind: bb20]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb29: {
        switchInt(_23) -> [0: bb27, otherwise: bb30]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb30: {
        drop(_4[1 of 5]) -> [return: bb27, unwind: bb21]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb31 (cleanup): {
        drop(_4[4 of 5]) -> bb17;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb32 (cleanup): {
        switchInt(_21) -> [0: bb17, otherwise: bb31]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb33 (cleanup): {
        switchInt(_22) -> [0: bb32, otherwise: bb34]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb34 (cleanup): {
        drop(_4[2 of 5]) -> bb32;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb35 (cleanup): {
        switchInt(_23) -> [0: bb33, otherwise: bb36]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb36 (cleanup): {
        drop(_4[1 of 5]) -> bb33;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb37 (cleanup): {
        drop(_4[0 of 5]) -> bb35;        // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }

    bb38 (cleanup): {
        switchInt(_24) -> [0: bb35, otherwise: bb37]; // scope 0 at ui/drop/dynamic-drop.rs:254:1: 254:2
    }
}

fn slice_pattern_reassign(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:256:27: 256:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:256:42: 256:42
    let mut _2: [Ptr<'_>; 2];            // in scope 0 at ui/drop/dynamic-drop.rs:257:9: 257:15
    let mut _3: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:257:19: 257:28
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:257:19: 257:28
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:257:30: 257:39
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:257:30: 257:39
    let mut _8: [Ptr<'_>; 2];            // in scope 0 at ui/drop/dynamic-drop.rs:259:10: 259:32
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:259:11: 259:20
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:259:11: 259:20
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:259:22: 259:31
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:259:22: 259:31
    let mut _14: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:261:1: 261:2
    scope 1 {
        debug ar => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:257:9: 257:15
        let _7: Ptr<'_>;                 // in scope 1 at ui/drop/dynamic-drop.rs:258:12: 258:14
        scope 2 {
            debug _x => _7;              // in scope 2 at ui/drop/dynamic-drop.rs:258:12: 258:14
            let _13: Ptr<'_>;            // in scope 2 at ui/drop/dynamic-drop.rs:260:13: 260:15
            scope 3 {
                debug _y => _13;         // in scope 3 at ui/drop/dynamic-drop.rs:260:13: 260:15
            }
        }
    }

    bb0: {
        _14 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:257:9: 257:15
        _4 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:257:19: 257:28
        _3 = Allocator::alloc(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:257:19: 257:28
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:257:21: 257:26
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:257:30: 257:39
        _5 = Allocator::alloc(move _6) -> [return: bb2, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:257:30: 257:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:257:32: 257:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:257:18: 257:40
        _2 = [move _3, move _5];         // scope 0 at ui/drop/dynamic-drop.rs:257:18: 257:40
        _14 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:258:12: 258:14
        _7 = move _2[1 of 2];            // scope 1 at ui/drop/dynamic-drop.rs:258:12: 258:14
        _10 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:259:11: 259:20
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb8]; // scope 2 at ui/drop/dynamic-drop.rs:259:11: 259:20
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:259:13: 259:18
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:259:22: 259:31
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb7]; // scope 2 at ui/drop/dynamic-drop.rs:259:22: 259:31
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:259:24: 259:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = [move _9, move _11];        // scope 2 at ui/drop/dynamic-drop.rs:259:10: 259:32
        drop(_2[0 of 2]) -> [return: bb12, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:259:5: 259:7
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }

    bb6: {
        drop(_2[0 of 2]) -> bb13;        // scope 0 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }

    bb7 (cleanup): {
        drop(_9) -> bb8;                 // scope 2 at ui/drop/dynamic-drop.rs:259:31: 259:32
    }

    bb8 (cleanup): {
        drop(_7) -> bb16;                // scope 1 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:257:39: 257:40
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:256:1: 261:2
    }

    bb11 (cleanup): {
        _14 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:259:5: 259:7
        _2 = move _8;                    // scope 2 at ui/drop/dynamic-drop.rs:259:5: 259:7
        goto -> bb8;                     // scope 2 at ui/drop/dynamic-drop.rs:259:5: 259:7
    }

    bb12: {
        _14 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:259:5: 259:7
        _2 = move _8;                    // scope 2 at ui/drop/dynamic-drop.rs:259:5: 259:7
        _14 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:260:13: 260:15
        _13 = move _2[1 of 2];           // scope 2 at ui/drop/dynamic-drop.rs:260:13: 260:15
        drop(_13) -> [return: bb5, unwind: bb8]; // scope 2 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }

    bb13: {
        _14 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:261:1: 261:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:261:2: 261:2
    }

    bb14 (cleanup): {
        switchInt(_14) -> [0: bb10, otherwise: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }

    bb15 (cleanup): {
        drop(_2[1 of 2]) -> bb10;        // scope 0 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }

    bb16 (cleanup): {
        drop(_2[0 of 2]) -> bb14;        // scope 0 at ui/drop/dynamic-drop.rs:261:1: 261:2
    }
}

fn subslice_pattern_reassign(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:263:30: 263:31
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:263:45: 263:45
    let mut _2: [Ptr<'_>; 3];            // in scope 0 at ui/drop/dynamic-drop.rs:264:9: 264:15
    let mut _3: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:264:19: 264:28
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:264:19: 264:28
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:264:30: 264:39
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:264:30: 264:39
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:264:41: 264:50
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:264:41: 264:50
    let mut _10: [Ptr<'_>; 3];           // in scope 0 at ui/drop/dynamic-drop.rs:266:10: 266:43
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:266:11: 266:20
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:266:11: 266:20
    let mut _13: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:266:22: 266:31
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:266:22: 266:31
    let mut _15: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:266:33: 266:42
    let mut _16: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:266:33: 266:42
    let mut _18: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    let mut _19: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    scope 1 {
        debug ar => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:264:9: 264:15
        let _9: Ptr<'_>;                 // in scope 1 at ui/drop/dynamic-drop.rs:265:15: 265:17
        scope 2 {
            debug _x => _9;              // in scope 2 at ui/drop/dynamic-drop.rs:265:15: 265:17
            let _17: [Ptr<'_>; 2];       // in scope 2 at ui/drop/dynamic-drop.rs:267:12: 267:14
            scope 3 {
                debug _y => _17;         // in scope 3 at ui/drop/dynamic-drop.rs:267:12: 267:14
            }
        }
    }

    bb0: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:264:9: 264:15
        _18 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:264:9: 264:15
        _4 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:264:19: 264:28
        _3 = Allocator::alloc(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:264:19: 264:28
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:264:21: 264:26
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:264:30: 264:39
        _5 = Allocator::alloc(move _6) -> [return: bb2, unwind: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:264:30: 264:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:264:32: 264:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:264:41: 264:50
        _7 = Allocator::alloc(move _8) -> [return: bb3, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:264:41: 264:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:264:43: 264:48
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:264:18: 264:51
        _19 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:264:18: 264:51
        _2 = [move _3, move _5, move _7]; // scope 0 at ui/drop/dynamic-drop.rs:264:18: 264:51
        _19 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:265:15: 265:17
        _9 = move _2[2 of 3];            // scope 1 at ui/drop/dynamic-drop.rs:265:15: 265:17
        _12 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:266:11: 266:20
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:266:11: 266:20
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:266:13: 266:18
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:266:22: 266:31
        _13 = Allocator::alloc(move _14) -> [return: bb5, unwind: bb10]; // scope 2 at ui/drop/dynamic-drop.rs:266:22: 266:31
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:266:24: 266:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = _1;                        // scope 2 at ui/drop/dynamic-drop.rs:266:33: 266:42
        _15 = Allocator::alloc(move _16) -> [return: bb6, unwind: bb9]; // scope 2 at ui/drop/dynamic-drop.rs:266:33: 266:42
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:266:35: 266:40
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = [move _11, move _13, move _15]; // scope 2 at ui/drop/dynamic-drop.rs:266:10: 266:43
        drop(_2[0 of 3]) -> [return: bb18, unwind: bb16]; // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
    }

    bb7: {
        drop(_9) -> [return: bb8, unwind: bb24]; // scope 1 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb8: {
        drop(_2[0 of 3]) -> bb19;        // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb9 (cleanup): {
        drop(_13) -> bb10;               // scope 2 at ui/drop/dynamic-drop.rs:266:42: 266:43
    }

    bb10 (cleanup): {
        drop(_11) -> bb11;               // scope 2 at ui/drop/dynamic-drop.rs:266:42: 266:43
    }

    bb11 (cleanup): {
        drop(_9) -> bb24;                // scope 1 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb12 (cleanup): {
        drop(_5) -> bb13;                // scope 0 at ui/drop/dynamic-drop.rs:264:50: 264:51
    }

    bb13 (cleanup): {
        drop(_3) -> bb14;                // scope 0 at ui/drop/dynamic-drop.rs:264:50: 264:51
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:263:1: 268:2
    }

    bb15 (cleanup): {
        _18 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
        _19 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
        _2 = move _10;                   // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
        goto -> bb11;                    // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
    }

    bb16 (cleanup): {
        drop(_2[1 of 3]) -> bb15;        // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
    }

    bb17: {
        _18 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
        _19 = const true;                // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
        _2 = move _10;                   // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
        _18 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:267:12: 267:14
        _19 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:267:12: 267:14
        _17 = move _2[1..3];             // scope 2 at ui/drop/dynamic-drop.rs:267:12: 267:14
        drop(_17) -> [return: bb7, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb18: {
        drop(_2[1 of 3]) -> [return: bb17, unwind: bb15]; // scope 2 at ui/drop/dynamic-drop.rs:266:5: 266:7
    }

    bb19: {
        _18 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:268:2: 268:2
    }

    bb20 (cleanup): {
        switchInt(_19) -> [0: bb14, otherwise: bb21]; // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb21 (cleanup): {
        drop(_2[2 of 3]) -> bb14;        // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb22 (cleanup): {
        switchInt(_18) -> [0: bb20, otherwise: bb23]; // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb23 (cleanup): {
        drop(_2[1 of 3]) -> bb20;        // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }

    bb24 (cleanup): {
        drop(_2[0 of 3]) -> bb22;        // scope 0 at ui/drop/dynamic-drop.rs:268:1: 268:2
    }
}

fn index_field_mixed_ends(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:270:27: 270:28
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:270:42: 270:42
    let _2: [(Ptr<'_>, Ptr<'_>); 2];     // in scope 0 at ui/drop/dynamic-drop.rs:271:9: 271:11
    let mut _3: (Ptr<'_>, Ptr<'_>);      // in scope 0 at ui/drop/dynamic-drop.rs:271:15: 271:37
    let mut _4: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:271:16: 271:25
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:271:16: 271:25
    let mut _6: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:271:27: 271:36
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:271:27: 271:36
    let mut _8: (Ptr<'_>, Ptr<'_>);      // in scope 0 at ui/drop/dynamic-drop.rs:271:39: 271:61
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:271:40: 271:49
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:271:40: 271:49
    let mut _11: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:271:51: 271:60
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:271:51: 271:60
    scope 1 {
        debug ar => _2;                  // in scope 1 at ui/drop/dynamic-drop.rs:271:9: 271:11
        let _13: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:272:10: 272:12
        scope 2 {
            debug _x => _13;             // in scope 2 at ui/drop/dynamic-drop.rs:272:10: 272:12
            let _14: Ptr<'_>;            // in scope 2 at ui/drop/dynamic-drop.rs:273:13: 273:15
            scope 3 {
                debug _y => _14;         // in scope 3 at ui/drop/dynamic-drop.rs:273:13: 273:15
                let _15: Ptr<'_>;        // in scope 3 at ui/drop/dynamic-drop.rs:274:16: 274:18
                scope 4 {
                    debug _w => _15;     // in scope 4 at ui/drop/dynamic-drop.rs:274:16: 274:18
                    let _16: Ptr<'_>;    // in scope 4 at ui/drop/dynamic-drop.rs:275:14: 275:16
                    scope 5 {
                        debug _z => _16; // in scope 5 at ui/drop/dynamic-drop.rs:275:14: 275:16
                    }
                }
            }
        }
    }

    bb0: {
        _5 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:271:16: 271:25
        _4 = Allocator::alloc(move _5) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:271:16: 271:25
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:271:18: 271:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:271:27: 271:36
        _6 = Allocator::alloc(move _7) -> [return: bb2, unwind: bb14]; // scope 0 at ui/drop/dynamic-drop.rs:271:27: 271:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:271:29: 271:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = (move _4, move _6);         // scope 0 at ui/drop/dynamic-drop.rs:271:15: 271:37
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:271:40: 271:49
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:271:40: 271:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:271:42: 271:47
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:271:51: 271:60
        _11 = Allocator::alloc(move _12) -> [return: bb4, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:271:51: 271:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:271:53: 271:58
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = (move _9, move _11);        // scope 0 at ui/drop/dynamic-drop.rs:271:39: 271:61
        _2 = [move _3, move _8];         // scope 0 at ui/drop/dynamic-drop.rs:271:14: 271:62
        _13 = move (_2[0 of 2].0: Ptr<'_>); // scope 1 at ui/drop/dynamic-drop.rs:272:10: 272:12
        _14 = move (_2[0 of 2].1: Ptr<'_>); // scope 2 at ui/drop/dynamic-drop.rs:273:13: 273:15
        _15 = move (_2[1 of 2].1: Ptr<'_>); // scope 3 at ui/drop/dynamic-drop.rs:274:16: 274:18
        _16 = move (_2[1 of 2].0: Ptr<'_>); // scope 4 at ui/drop/dynamic-drop.rs:275:14: 275:16
        drop(_16) -> [return: bb5, unwind: bb9]; // scope 4 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb5: {
        drop(_15) -> [return: bb6, unwind: bb10]; // scope 3 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb6: {
        drop(_14) -> [return: bb7, unwind: bb11]; // scope 2 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb7: {
        drop(_13) -> bb8;                // scope 1 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb8: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:276:2: 276:2
    }

    bb9 (cleanup): {
        drop(_15) -> bb10;               // scope 3 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb10 (cleanup): {
        drop(_14) -> bb11;               // scope 2 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb11 (cleanup): {
        drop(_13) -> bb15;               // scope 1 at ui/drop/dynamic-drop.rs:276:1: 276:2
    }

    bb12 (cleanup): {
        drop(_9) -> bb13;                // scope 0 at ui/drop/dynamic-drop.rs:271:60: 271:61
    }

    bb13 (cleanup): {
        drop(_3) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:271:61: 271:62
    }

    bb14 (cleanup): {
        drop(_4) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:271:36: 271:37
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:270:1: 276:2
    }
}

fn subslice_mixed_min_lengths(_1: &Allocator, _2: i32) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:278:31: 278:32
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:278:46: 278:47
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:278:54: 278:54
    let _3: [(Ptr<'_>, Ptr<'_>); 2];     // in scope 0 at ui/drop/dynamic-drop.rs:279:9: 279:11
    let mut _4: (Ptr<'_>, Ptr<'_>);      // in scope 0 at ui/drop/dynamic-drop.rs:279:15: 279:37
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:279:16: 279:25
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:279:16: 279:25
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:279:27: 279:36
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:279:27: 279:36
    let mut _9: (Ptr<'_>, Ptr<'_>);      // in scope 0 at ui/drop/dynamic-drop.rs:279:39: 279:61
    let mut _10: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:279:40: 279:49
    let mut _11: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:279:40: 279:49
    let mut _12: Ptr<'_>;                // in scope 0 at ui/drop/dynamic-drop.rs:279:51: 279:60
    let mut _13: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:279:51: 279:60
    let mut _22: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    let mut _23: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    let mut _24: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    let mut _25: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    scope 1 {
        debug ar => _3;                  // in scope 1 at ui/drop/dynamic-drop.rs:279:9: 279:11
        let _14: (Ptr<'_>, Ptr<'_>);     // in scope 1 at ui/drop/dynamic-drop.rs:281:20: 281:22
        let _15: (Ptr<'_>, Ptr<'_>);     // in scope 1 at ui/drop/dynamic-drop.rs:282:20: 282:22
        let _16: (Ptr<'_>, Ptr<'_>);     // in scope 1 at ui/drop/dynamic-drop.rs:283:20: 283:22
        let _17: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:284:21: 284:23
        let _18: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:285:25: 285:27
        let _19: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:286:25: 286:27
        let _20: [(Ptr<'_>, Ptr<'_>); 2]; // in scope 1 at ui/drop/dynamic-drop.rs:287:21: 287:23
        let _21: [(Ptr<'_>, Ptr<'_>); 1]; // in scope 1 at ui/drop/dynamic-drop.rs:288:21: 288:23
        scope 2 {
            debug _x => _14;             // in scope 2 at ui/drop/dynamic-drop.rs:281:20: 281:22
        }
        scope 3 {
            debug _x => _15;             // in scope 3 at ui/drop/dynamic-drop.rs:282:20: 282:22
        }
        scope 4 {
            debug _x => _16;             // in scope 4 at ui/drop/dynamic-drop.rs:283:20: 283:22
        }
        scope 5 {
            debug _x => _17;             // in scope 5 at ui/drop/dynamic-drop.rs:284:21: 284:23
        }
        scope 6 {
            debug _x => _18;             // in scope 6 at ui/drop/dynamic-drop.rs:285:25: 285:27
        }
        scope 7 {
            debug _x => _19;             // in scope 7 at ui/drop/dynamic-drop.rs:286:25: 286:27
        }
        scope 8 {
            debug _y => _20;             // in scope 8 at ui/drop/dynamic-drop.rs:287:21: 287:23
        }
        scope 9 {
            debug _y => _21;             // in scope 9 at ui/drop/dynamic-drop.rs:288:21: 288:23
        }
    }

    bb0: {
        _22 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:279:9: 279:11
        _25 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:279:9: 279:11
        _23 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:279:9: 279:11
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:279:9: 279:11
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:279:16: 279:25
        _5 = Allocator::alloc(move _6) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:279:16: 279:25
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:279:18: 279:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:279:27: 279:36
        _7 = Allocator::alloc(move _8) -> [return: bb2, unwind: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:279:27: 279:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:279:29: 279:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = (move _5, move _7);         // scope 0 at ui/drop/dynamic-drop.rs:279:15: 279:37
        _11 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:279:40: 279:49
        _10 = Allocator::alloc(move _11) -> [return: bb3, unwind: bb14]; // scope 0 at ui/drop/dynamic-drop.rs:279:40: 279:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:279:42: 279:47
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:279:51: 279:60
        _12 = Allocator::alloc(move _13) -> [return: bb4, unwind: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:279:51: 279:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:279:53: 279:58
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = (move _10, move _12);       // scope 0 at ui/drop/dynamic-drop.rs:279:39: 279:61
        _22 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:279:14: 279:62
        _23 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:279:14: 279:62
        _24 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:279:14: 279:62
        _25 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:279:14: 279:62
        _3 = [move _4, move _9];         // scope 0 at ui/drop/dynamic-drop.rs:279:14: 279:62
        switchInt(_2) -> [0: bb6, 1: bb7, 2: bb8, 3: bb9, 4: bb10, 5: bb11, 6: bb12, otherwise: bb5]; // scope 1 at ui/drop/dynamic-drop.rs:280:5: 280:12
    }

    bb5: {
        _24 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:288:21: 288:23
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:288:21: 288:23
        _21 = move _3[0..1];             // scope 1 at ui/drop/dynamic-drop.rs:288:21: 288:23
        drop(_21) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:288:39: 288:40
    }

    bb6: {
        _24 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:281:20: 281:22
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:281:20: 281:22
        _14 = move _3[0 of 2];           // scope 1 at ui/drop/dynamic-drop.rs:281:20: 281:22
        drop(_14) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:281:34: 281:35
    }

    bb7: {
        _24 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:282:20: 282:22
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:282:20: 282:22
        _15 = move _3[0 of 2];           // scope 1 at ui/drop/dynamic-drop.rs:282:20: 282:22
        drop(_15) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:282:37: 282:38
    }

    bb8: {
        _24 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:283:20: 283:22
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:283:20: 283:22
        _16 = move _3[0 of 2];           // scope 1 at ui/drop/dynamic-drop.rs:283:20: 283:22
        drop(_16) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:283:33: 283:34
    }

    bb9: {
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:284:21: 284:23
        _17 = move (_3[0 of 2].0: Ptr<'_>); // scope 1 at ui/drop/dynamic-drop.rs:284:21: 284:23
        drop(_17) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:284:42: 284:43
    }

    bb10: {
        _23 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:285:25: 285:27
        _18 = move (_3[1 of 2].0: Ptr<'_>); // scope 1 at ui/drop/dynamic-drop.rs:285:25: 285:27
        drop(_18) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:285:39: 285:40
    }

    bb11: {
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:286:25: 286:27
        _19 = move (_3[0 of 2].0: Ptr<'_>); // scope 1 at ui/drop/dynamic-drop.rs:286:25: 286:27
        drop(_19) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:286:42: 286:43
    }

    bb12: {
        _24 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:287:21: 287:23
        _25 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:287:21: 287:23
        _22 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:287:21: 287:23
        _23 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:287:21: 287:23
        _20 = move _3[0..2];             // scope 1 at ui/drop/dynamic-drop.rs:287:21: 287:23
        drop(_20) -> [return: bb33, unwind: bb41]; // scope 1 at ui/drop/dynamic-drop.rs:287:36: 287:37
    }

    bb13 (cleanup): {
        drop(_10) -> bb14;               // scope 0 at ui/drop/dynamic-drop.rs:279:60: 279:61
    }

    bb14 (cleanup): {
        drop(_4) -> bb16;                // scope 0 at ui/drop/dynamic-drop.rs:279:61: 279:62
    }

    bb15 (cleanup): {
        drop(_5) -> bb16;                // scope 0 at ui/drop/dynamic-drop.rs:279:36: 279:37
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:278:1: 290:2
    }

    bb17 (cleanup): {
        switchInt(_23) -> [0: bb19, otherwise: bb20]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb18 (cleanup): {
        drop((_3[1 of 2].1: Ptr<'_>)) -> bb16; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb19 (cleanup): {
        switchInt(_22) -> [0: bb16, otherwise: bb18]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb20 (cleanup): {
        drop((_3[1 of 2].0: Ptr<'_>)) -> bb19; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb21: {
        _22 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
        _22 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
        _23 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
        _25 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:290:2: 290:2
    }

    bb22 (cleanup): {
        drop((_3[1 of 2].1: Ptr<'_>)) -> bb16; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb23 (cleanup): {
        switchInt(_22) -> [0: bb16, otherwise: bb22]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb24: {
        drop((_3[1 of 2].1: Ptr<'_>)) -> bb21; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb25: {
        switchInt(_22) -> [0: bb21, otherwise: bb24]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb26: {
        drop((_3[1 of 2].0: Ptr<'_>)) -> [return: bb25, unwind: bb23]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb27: {
        _24 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
        switchInt(_23) -> [0: bb25, otherwise: bb26]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb28 (cleanup): {
        drop((_3[0 of 2].1: Ptr<'_>)) -> bb17; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb29 (cleanup): {
        switchInt(_24) -> [0: bb17, otherwise: bb28]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb30: {
        drop((_3[0 of 2].1: Ptr<'_>)) -> [return: bb27, unwind: bb17]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb31: {
        switchInt(_24) -> [0: bb27, otherwise: bb30]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb32: {
        drop((_3[0 of 2].0: Ptr<'_>)) -> [return: bb31, unwind: bb29]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb33: {
        switchInt(_25) -> [0: bb31, otherwise: bb32]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb34 (cleanup): {
        switchInt(_23) -> [0: bb36, otherwise: bb37]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb35 (cleanup): {
        drop((_3[1 of 2].1: Ptr<'_>)) -> bb16; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb36 (cleanup): {
        switchInt(_22) -> [0: bb16, otherwise: bb35]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb37 (cleanup): {
        drop((_3[1 of 2].0: Ptr<'_>)) -> bb36; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb38 (cleanup): {
        drop((_3[0 of 2].1: Ptr<'_>)) -> bb34; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb39 (cleanup): {
        switchInt(_24) -> [0: bb34, otherwise: bb38]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb40 (cleanup): {
        drop((_3[0 of 2].0: Ptr<'_>)) -> bb39; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }

    bb41 (cleanup): {
        switchInt(_25) -> [0: bb39, otherwise: bb40]; // scope 0 at ui/drop/dynamic-drop.rs:290:1: 290:2
    }
}

fn bindings_after_at_dynamic_init_move(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:292:40: 292:41
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:292:55: 292:56
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:292:64: 292:64
    let _3: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:293:9: 293:12
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:293:18: 293:19
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:293:27: 293:36
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:293:27: 293:36
    let mut _8: isize;                   // in scope 0 at ui/drop/dynamic-drop.rs:296:18: 296:25
    let mut _10: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:297:14: 297:17
    let mut _11: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
    let mut _12: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
    scope 1 {
        debug foo => _3;                 // in scope 1 at ui/drop/dynamic-drop.rs:293:9: 293:12
        let _7: std::option::Option<Ptr<'_>>; // in scope 1 at ui/drop/dynamic-drop.rs:294:9: 294:11
        scope 2 {
            debug _x => _7;              // in scope 2 at ui/drop/dynamic-drop.rs:294:9: 294:11
            scope 3 {
                debug bar => _9;         // in scope 3 at ui/drop/dynamic-drop.rs:296:12: 296:15
                let _9: std::option::Option<Ptr<'_>>; // in scope 3 at ui/drop/dynamic-drop.rs:296:12: 296:15
            }
        }
    }

    bb0: {
        _12 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:293:9: 293:12
        _11 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:293:9: 293:12
        _4 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:293:18: 293:19
        switchInt(move _4) -> [0: bb3, otherwise: bb1]; // scope 0 at ui/drop/dynamic-drop.rs:293:18: 293:19
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:293:27: 293:36
        _5 = Allocator::alloc(move _6) -> bb2; // scope 0 at ui/drop/dynamic-drop.rs:293:27: 293:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:293:29: 293:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:293:22: 293:37
        _3 = Option::<Ptr<'_>>::Some(move _5); // scope 0 at ui/drop/dynamic-drop.rs:293:22: 293:37
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:293:15: 293:53
    }

    bb3: {
        _12 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:293:47: 293:51
        _3 = Option::<Ptr<'_>>::None;    // scope 0 at ui/drop/dynamic-drop.rs:293:47: 293:51
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:293:15: 293:53
    }

    bb4: {
        _8 = discriminant(_3);           // scope 3 at ui/drop/dynamic-drop.rs:296:12: 296:15
        switchInt(move _8) -> [1: bb5, otherwise: bb11]; // scope 3 at ui/drop/dynamic-drop.rs:296:12: 296:15
    }

    bb5: {
        _12 = const false;               // scope 3 at ui/drop/dynamic-drop.rs:296:12: 296:15
        _9 = move _3;                    // scope 3 at ui/drop/dynamic-drop.rs:296:12: 296:15
        _10 = move _9;                   // scope 3 at ui/drop/dynamic-drop.rs:297:14: 297:17
        _11 = const true;                // scope 3 at ui/drop/dynamic-drop.rs:297:9: 297:11
        _7 = move _10;                   // scope 3 at ui/drop/dynamic-drop.rs:297:9: 297:11
        goto -> bb11;                    // scope 2 at ui/drop/dynamic-drop.rs:296:5: 298:6
    }

    bb6: {
        _11 = const false;               // scope 1 at ui/drop/dynamic-drop.rs:299:1: 299:2
        switchInt(_12) -> [0: bb7, otherwise: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
    }

    bb7: {
        _12 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:299:2: 299:2
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb9, otherwise: bb13]; // scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:292:1: 299:2
    }

    bb10: {
        drop(_7) -> [return: bb6, unwind: bb8]; // scope 1 at ui/drop/dynamic-drop.rs:299:1: 299:2
    }

    bb11: {
        switchInt(_11) -> [0: bb6, otherwise: bb10]; // scope 1 at ui/drop/dynamic-drop.rs:299:1: 299:2
    }

    bb12: {
        drop(_3) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
    }

    bb13 (cleanup): {
        drop(_3) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:299:1: 299:2
    }
}

fn bindings_after_at_dynamic_init_ref(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:301:39: 301:40
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:301:54: 301:55
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:301:63: 301:63
    let _3: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:302:9: 302:12
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:302:18: 302:19
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:302:27: 302:36
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:302:27: 302:36
    let mut _8: &std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:305:31: 305:35
    let mut _9: isize;                   // in scope 0 at ui/drop/dynamic-drop.rs:305:18: 305:28
    let mut _12: &std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:306:14: 306:17
    scope 1 {
        debug foo => _3;                 // in scope 1 at ui/drop/dynamic-drop.rs:302:9: 302:12
        let _7: &std::option::Option<Ptr<'_>>; // in scope 1 at ui/drop/dynamic-drop.rs:303:9: 303:11
        scope 2 {
            debug _x => _7;              // in scope 2 at ui/drop/dynamic-drop.rs:303:9: 303:11
            scope 3 {
                debug bar => _10;        // in scope 3 at ui/drop/dynamic-drop.rs:305:12: 305:15
                debug _baz => _11;       // in scope 3 at ui/drop/dynamic-drop.rs:305:23: 305:27
                let _10: &std::option::Option<Ptr<'_>>; // in scope 3 at ui/drop/dynamic-drop.rs:305:12: 305:15
                let _11: &Ptr<'_>;       // in scope 3 at ui/drop/dynamic-drop.rs:305:23: 305:27
            }
        }
    }

    bb0: {
        _4 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:302:18: 302:19
        switchInt(move _4) -> [0: bb3, otherwise: bb1]; // scope 0 at ui/drop/dynamic-drop.rs:302:18: 302:19
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:302:27: 302:36
        _5 = Allocator::alloc(move _6) -> bb2; // scope 0 at ui/drop/dynamic-drop.rs:302:27: 302:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:302:29: 302:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Option::<Ptr<'_>>::Some(move _5); // scope 0 at ui/drop/dynamic-drop.rs:302:22: 302:37
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:302:15: 302:53
    }

    bb3: {
        _3 = Option::<Ptr<'_>>::None;    // scope 0 at ui/drop/dynamic-drop.rs:302:47: 302:51
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:302:15: 302:53
    }

    bb4: {
        _8 = &_3;                        // scope 3 at ui/drop/dynamic-drop.rs:305:31: 305:35
        _9 = discriminant((*_8));        // scope 3 at ui/drop/dynamic-drop.rs:305:12: 305:15
        switchInt(move _9) -> [1: bb5, otherwise: bb6]; // scope 3 at ui/drop/dynamic-drop.rs:305:12: 305:15
    }

    bb5: {
        _10 = _8;                        // scope 3 at ui/drop/dynamic-drop.rs:305:12: 305:15
        _11 = &(((*_8) as Some).0: Ptr<'_>); // scope 3 at ui/drop/dynamic-drop.rs:305:23: 305:27
        _12 = _10;                       // scope 3 at ui/drop/dynamic-drop.rs:306:14: 306:17
        _7 = move _12;                   // scope 3 at ui/drop/dynamic-drop.rs:306:9: 306:17
        goto -> bb6;                     // scope 2 at ui/drop/dynamic-drop.rs:305:5: 307:6
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:308:1: 308:2
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:308:2: 308:2
    }
}

fn bindings_after_at_dynamic_drop_move(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:310:40: 310:41
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:310:55: 310:56
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:310:64: 310:64
    let _3: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:311:9: 311:12
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:311:18: 311:19
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:311:27: 311:36
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:311:27: 311:36
    let _7: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:313:5: 317:6
    let mut _8: isize;                   // in scope 0 at ui/drop/dynamic-drop.rs:313:18: 313:25
    let mut _10: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:318:1: 318:2
    scope 1 {
        debug foo => _3;                 // in scope 1 at ui/drop/dynamic-drop.rs:311:9: 311:12
        scope 2 {
            debug bar => _9;             // in scope 2 at ui/drop/dynamic-drop.rs:313:12: 313:15
            let _9: std::option::Option<Ptr<'_>>; // in scope 2 at ui/drop/dynamic-drop.rs:313:12: 313:15
        }
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:311:9: 311:12
        _4 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:311:18: 311:19
        switchInt(move _4) -> [0: bb3, otherwise: bb1]; // scope 0 at ui/drop/dynamic-drop.rs:311:18: 311:19
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:311:27: 311:36
        _5 = Allocator::alloc(move _6) -> bb2; // scope 0 at ui/drop/dynamic-drop.rs:311:27: 311:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:311:29: 311:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:311:22: 311:37
        _3 = Option::<Ptr<'_>>::Some(move _5); // scope 0 at ui/drop/dynamic-drop.rs:311:22: 311:37
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:311:15: 311:53
    }

    bb3: {
        _10 = const true;                // scope 0 at ui/drop/dynamic-drop.rs:311:47: 311:51
        _3 = Option::<Ptr<'_>>::None;    // scope 0 at ui/drop/dynamic-drop.rs:311:47: 311:51
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:311:15: 311:53
    }

    bb4: {
        _8 = discriminant(_3);           // scope 2 at ui/drop/dynamic-drop.rs:313:12: 313:15
        switchInt(move _8) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dynamic-drop.rs:313:12: 313:15
    }

    bb5: {
        _10 = const false;               // scope 2 at ui/drop/dynamic-drop.rs:313:12: 313:15
        _9 = move _3;                    // scope 2 at ui/drop/dynamic-drop.rs:313:12: 313:15
        _7 = move _9;                    // scope 2 at ui/drop/dynamic-drop.rs:314:9: 314:12
        goto -> bb7;                     // scope 1 at ui/drop/dynamic-drop.rs:313:5: 317:6
    }

    bb6: {
        _7 = Option::<Ptr<'_>>::None;    // scope 1 at ui/drop/dynamic-drop.rs:316:9: 316:13
        goto -> bb7;                     // scope 1 at ui/drop/dynamic-drop.rs:313:5: 317:6
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb13]; // scope 1 at ui/drop/dynamic-drop.rs:317:6: 317:7
    }

    bb8: {
        switchInt(_10) -> [0: bb9, otherwise: bb11]; // scope 0 at ui/drop/dynamic-drop.rs:318:1: 318:2
    }

    bb9: {
        _10 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:318:1: 318:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:318:2: 318:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:310:1: 318:2
    }

    bb11: {
        drop(_3) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:318:1: 318:2
    }

    bb12 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:318:1: 318:2
    }

    bb13 (cleanup): {
        switchInt(_10) -> [0: bb10, otherwise: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:318:1: 318:2
    }
}

fn bindings_after_at_dynamic_drop_ref(_1: &Allocator, _2: bool) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:320:39: 320:40
    debug c => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:320:54: 320:55
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:320:63: 320:63
    let _3: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:321:9: 321:12
    let mut _4: bool;                    // in scope 0 at ui/drop/dynamic-drop.rs:321:18: 321:19
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:321:27: 321:36
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:321:27: 321:36
    let mut _7: &std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:323:31: 323:35
    let mut _8: isize;                   // in scope 0 at ui/drop/dynamic-drop.rs:323:18: 323:28
    scope 1 {
        debug foo => _3;                 // in scope 1 at ui/drop/dynamic-drop.rs:321:9: 321:12
        scope 2 {
            debug bar => _9;             // in scope 2 at ui/drop/dynamic-drop.rs:323:12: 323:15
            debug _baz => _10;           // in scope 2 at ui/drop/dynamic-drop.rs:323:23: 323:27
            let _9: &std::option::Option<Ptr<'_>>; // in scope 2 at ui/drop/dynamic-drop.rs:323:12: 323:15
            let _10: &Ptr<'_>;           // in scope 2 at ui/drop/dynamic-drop.rs:323:23: 323:27
        }
    }

    bb0: {
        _4 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:321:18: 321:19
        switchInt(move _4) -> [0: bb3, otherwise: bb1]; // scope 0 at ui/drop/dynamic-drop.rs:321:18: 321:19
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:321:27: 321:36
        _5 = Allocator::alloc(move _6) -> bb2; // scope 0 at ui/drop/dynamic-drop.rs:321:27: 321:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:321:29: 321:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Option::<Ptr<'_>>::Some(move _5); // scope 0 at ui/drop/dynamic-drop.rs:321:22: 321:37
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:321:15: 321:53
    }

    bb3: {
        _3 = Option::<Ptr<'_>>::None;    // scope 0 at ui/drop/dynamic-drop.rs:321:47: 321:51
        goto -> bb4;                     // scope 0 at ui/drop/dynamic-drop.rs:321:15: 321:53
    }

    bb4: {
        _7 = &_3;                        // scope 2 at ui/drop/dynamic-drop.rs:323:31: 323:35
        _8 = discriminant((*_7));        // scope 2 at ui/drop/dynamic-drop.rs:323:12: 323:15
        switchInt(move _8) -> [1: bb5, otherwise: bb6]; // scope 2 at ui/drop/dynamic-drop.rs:323:12: 323:15
    }

    bb5: {
        _9 = _7;                         // scope 2 at ui/drop/dynamic-drop.rs:323:12: 323:15
        _10 = &(((*_7) as Some).0: Ptr<'_>); // scope 2 at ui/drop/dynamic-drop.rs:323:23: 323:27
        goto -> bb6;                     // scope 1 at ui/drop/dynamic-drop.rs:323:5: 327:6
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:328:1: 328:2
    }

    bb7: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:328:2: 328:2
    }
}

promoted[0] in bindings_after_at_dynamic_drop_ref: &Option<Ptr<'_>> = {
    let mut _0: &std::option::Option<Ptr<'_>>; // return place in scope 0 at ui/drop/dynamic-drop.rs:326:9: 326:14
    let mut _1: std::option::Option<Ptr<'_>>; // in scope 0 at ui/drop/dynamic-drop.rs:326:10: 326:14

    bb0: {
        _1 = Option::<Ptr<'_>>::None;    // scope 0 at ui/drop/dynamic-drop.rs:326:10: 326:14
        _0 = &_1;                        // scope 0 at ui/drop/dynamic-drop.rs:326:9: 326:14
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:326:9: 326:14
    }
}

fn move_ref_pattern(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:330:21: 330:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:330:36: 330:36
    let mut _2: (Ptr<'_>, Ptr<'_>, Ptr<'_>, Ptr<'_>); // in scope 0 at ui/drop/dynamic-drop.rs:331:9: 331:16
    let mut _3: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:331:20: 331:29
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:331:20: 331:29
    let mut _5: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:331:31: 331:40
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:331:31: 331:40
    let mut _7: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:331:42: 331:51
    let mut _8: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:331:42: 331:51
    let mut _9: Ptr<'_>;                 // in scope 0 at ui/drop/dynamic-drop.rs:331:53: 331:62
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:331:53: 331:62
    scope 1 {
        debug tup => _2;                 // in scope 1 at ui/drop/dynamic-drop.rs:331:9: 331:16
        let _11: &Ptr<'_>;               // in scope 1 at ui/drop/dynamic-drop.rs:332:10: 332:16
        let _12: &mut Ptr<'_>;           // in scope 1 at ui/drop/dynamic-drop.rs:332:18: 332:28
        let _13: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:332:30: 332:32
        let mut _14: Ptr<'_>;            // in scope 1 at ui/drop/dynamic-drop.rs:332:34: 332:40
        scope 2 {
            debug _a => _11;             // in scope 2 at ui/drop/dynamic-drop.rs:332:10: 332:16
            debug _b => _12;             // in scope 2 at ui/drop/dynamic-drop.rs:332:18: 332:28
            debug _c => _13;             // in scope 2 at ui/drop/dynamic-drop.rs:332:30: 332:32
            debug _d => _14;             // in scope 2 at ui/drop/dynamic-drop.rs:332:34: 332:40
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:331:20: 331:29
        _3 = Allocator::alloc(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:331:20: 331:29
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:331:22: 331:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:331:31: 331:40
        _5 = Allocator::alloc(move _6) -> [return: bb2, unwind: bb10]; // scope 0 at ui/drop/dynamic-drop.rs:331:31: 331:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:331:33: 331:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 0 at ui/drop/dynamic-drop.rs:331:42: 331:51
        _7 = Allocator::alloc(move _8) -> [return: bb3, unwind: bb9]; // scope 0 at ui/drop/dynamic-drop.rs:331:42: 331:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:331:44: 331:49
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = _1;                        // scope 0 at ui/drop/dynamic-drop.rs:331:53: 331:62
        _9 = Allocator::alloc(move _10) -> [return: bb4, unwind: bb8]; // scope 0 at ui/drop/dynamic-drop.rs:331:53: 331:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:331:55: 331:60
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb4: {
        _2 = (move _3, move _5, move _7, move _9); // scope 0 at ui/drop/dynamic-drop.rs:331:19: 331:63
        _11 = &(_2.0: Ptr<'_>);          // scope 1 at ui/drop/dynamic-drop.rs:332:10: 332:16
        _12 = &mut (_2.1: Ptr<'_>);      // scope 1 at ui/drop/dynamic-drop.rs:332:18: 332:28
        _13 = move (_2.2: Ptr<'_>);      // scope 1 at ui/drop/dynamic-drop.rs:332:30: 332:32
        _14 = move (_2.3: Ptr<'_>);      // scope 1 at ui/drop/dynamic-drop.rs:332:34: 332:40
        drop(_14) -> [return: bb5, unwind: bb7]; // scope 1 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb5: {
        drop(_13) -> [return: bb6, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb6: {
        drop((_2.0: Ptr<'_>)) -> [return: bb14, unwind: bb12]; // scope 0 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb7 (cleanup): {
        drop(_13) -> bb16;               // scope 1 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb8 (cleanup): {
        drop(_7) -> bb9;                 // scope 0 at ui/drop/dynamic-drop.rs:331:62: 331:63
    }

    bb9 (cleanup): {
        drop(_5) -> bb10;                // scope 0 at ui/drop/dynamic-drop.rs:331:62: 331:63
    }

    bb10 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at ui/drop/dynamic-drop.rs:331:62: 331:63
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:330:1: 333:2
    }

    bb12 (cleanup): {
        drop((_2.1: Ptr<'_>)) -> bb11;   // scope 0 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb13: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:333:2: 333:2
    }

    bb14: {
        drop((_2.1: Ptr<'_>)) -> bb13;   // scope 0 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb15 (cleanup): {
        drop((_2.1: Ptr<'_>)) -> bb11;   // scope 0 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }

    bb16 (cleanup): {
        drop((_2.0: Ptr<'_>)) -> bb15;   // scope 0 at ui/drop/dynamic-drop.rs:333:1: 333:2
    }
}

fn panic_after_return(_1: &Allocator) -> Ptr<'_> {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:335:23: 335:24
    let mut _0: Ptr<'_>;                 // return place in scope 0 at ui/drop/dynamic-drop.rs:335:41: 335:48
    let _2: std::vec::Vec<usize>;        // in scope 0 at ui/drop/dynamic-drop.rs:337:9: 337:19
    let mut _3: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[usize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[usize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:338:5: 338:14
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:338:5: 338:14
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:339:13: 339:22
    let _13: Ptr<'_>;                    // in scope 0 at ui/drop/dynamic-drop.rs:341:9: 341:18
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:341:9: 341:18
    let mut _16: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:342:17: 342:26
    let mut _17: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:345:9: 345:35
    let mut _18: std::vec::Vec<usize>;   // in scope 0 at ui/drop/dynamic-drop.rs:345:24: 345:34
    let mut _19: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:347:1: 347:2
    let mut _20: *const [usize; 2];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug exceptions => _2;          // in scope 1 at ui/drop/dynamic-drop.rs:337:9: 337:19
        let _11: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:339:9: 339:10
        scope 3 {
            debug p => _11;              // in scope 3 at ui/drop/dynamic-drop.rs:339:9: 339:10
            let _15: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:342:13: 342:14
            scope 4 {
                debug p => _15;          // in scope 4 at ui/drop/dynamic-drop.rs:342:13: 342:14
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:337:9: 337:19
        _5 = const 16_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [usize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _20 = (((_8.0: std::ptr::Unique<[usize; 2]>).0: std::ptr::NonNull<[usize; 2]>).0: *const [usize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_20) = [const 8_usize, const 9_usize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _10 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:338:5: 338:14
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:338:5: 338:14
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:338:7: 338:12
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_9) -> [return: bb4, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:338:14: 338:15
    }

    bb4: {
        _12 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:339:13: 339:22
        _11 = Allocator::alloc(move _12) -> [return: bb5, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:339:13: 339:22
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:339:15: 339:20
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:341:9: 341:18
        _13 = Allocator::alloc(move _14) -> [return: bb6, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:341:9: 341:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:341:11: 341:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_13) -> [return: bb7, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:341:18: 341:19
    }

    bb7: {
        _16 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:342:17: 342:26
        _15 = Allocator::alloc(move _16) -> [return: bb8, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:342:17: 342:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:342:19: 342:24
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:345:9: 345:35
        _19 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:345:24: 345:34
        _18 = move _2;                   // scope 4 at ui/drop/dynamic-drop.rs:345:24: 345:34
        _0 = Allocator::alloc_leaked(move _17, move _18) -> [return: bb9, unwind: bb12]; // scope 4 at ui/drop/dynamic-drop.rs:345:9: 345:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:345:11: 345:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, Vec<usize>) -> Ptr<'a> {Allocator::alloc_leaked}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:346:5: 346:6
    }

    bb10: {
        drop(_11) -> [return: bb11, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:347:1: 347:2
    }

    bb11: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:347:1: 347:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:347:2: 347:2
    }

    bb12 (cleanup): {
        drop(_15) -> bb13;               // scope 3 at ui/drop/dynamic-drop.rs:346:5: 346:6
    }

    bb13 (cleanup): {
        drop(_11) -> bb16;               // scope 1 at ui/drop/dynamic-drop.rs:347:1: 347:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:335:1: 347:2
    }

    bb15 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at ui/drop/dynamic-drop.rs:347:1: 347:2
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb14, otherwise: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:347:1: 347:2
    }
}

fn panic_after_return_expr(_1: &Allocator) -> Ptr<'_> {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:349:28: 349:29
    let mut _0: Ptr<'_>;                 // return place in scope 0 at ui/drop/dynamic-drop.rs:349:46: 349:53
    let _2: std::vec::Vec<usize>;        // in scope 0 at ui/drop/dynamic-drop.rs:351:9: 351:19
    let mut _3: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[usize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[usize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:352:5: 352:14
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:352:5: 352:14
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:353:13: 353:22
    let _13: Ptr<'_>;                    // in scope 0 at ui/drop/dynamic-drop.rs:355:9: 355:18
    let mut _14: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:355:9: 355:18
    let mut _16: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:356:17: 356:26
    let mut _17: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:358:16: 358:42
    let mut _18: std::vec::Vec<usize>;   // in scope 0 at ui/drop/dynamic-drop.rs:358:31: 358:41
    let mut _19: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:360:1: 360:2
    let mut _20: *const [usize; 2];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug exceptions => _2;          // in scope 1 at ui/drop/dynamic-drop.rs:351:9: 351:19
        let _11: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:353:9: 353:10
        scope 3 {
            debug p => _11;              // in scope 3 at ui/drop/dynamic-drop.rs:353:9: 353:10
            let _15: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:356:13: 356:14
            scope 4 {
                debug q => _15;          // in scope 4 at ui/drop/dynamic-drop.rs:356:13: 356:14
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:351:9: 351:19
        _5 = const 16_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [usize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _20 = (((_8.0: std::ptr::Unique<[usize; 2]>).0: std::ptr::NonNull<[usize; 2]>).0: *const [usize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_20) = [const 8_usize, const 9_usize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _10 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:352:5: 352:14
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:352:5: 352:14
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:352:7: 352:12
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_9) -> [return: bb4, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:352:14: 352:15
    }

    bb4: {
        _12 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:353:13: 353:22
        _11 = Allocator::alloc(move _12) -> [return: bb5, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:353:13: 353:22
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:353:15: 353:20
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:355:9: 355:18
        _13 = Allocator::alloc(move _14) -> [return: bb6, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:355:9: 355:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:355:11: 355:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_13) -> [return: bb7, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:355:18: 355:19
    }

    bb7: {
        _16 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:356:17: 356:26
        _15 = Allocator::alloc(move _16) -> [return: bb8, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:356:17: 356:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:356:19: 356:24
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:358:16: 358:42
        _19 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:358:31: 358:41
        _18 = move _2;                   // scope 4 at ui/drop/dynamic-drop.rs:358:31: 358:41
        _0 = Allocator::alloc_leaked(move _17, move _18) -> [return: bb9, unwind: bb12]; // scope 4 at ui/drop/dynamic-drop.rs:358:16: 358:42
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:358:18: 358:30
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, Vec<usize>) -> Ptr<'a> {Allocator::alloc_leaked}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind: bb13]; // scope 3 at ui/drop/dynamic-drop.rs:359:5: 359:6
    }

    bb10: {
        drop(_11) -> [return: bb11, unwind: bb16]; // scope 1 at ui/drop/dynamic-drop.rs:360:1: 360:2
    }

    bb11: {
        _19 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:360:1: 360:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:360:2: 360:2
    }

    bb12 (cleanup): {
        drop(_15) -> bb13;               // scope 3 at ui/drop/dynamic-drop.rs:359:5: 359:6
    }

    bb13 (cleanup): {
        drop(_11) -> bb16;               // scope 1 at ui/drop/dynamic-drop.rs:360:1: 360:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:349:1: 360:2
    }

    bb15 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at ui/drop/dynamic-drop.rs:360:1: 360:2
    }

    bb16 (cleanup): {
        switchInt(_19) -> [0: bb14, otherwise: bb15]; // scope 0 at ui/drop/dynamic-drop.rs:360:1: 360:2
    }
}

fn panic_after_init(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:362:21: 362:22
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:362:36: 362:36
    let _2: std::vec::Vec<usize>;        // in scope 0 at ui/drop/dynamic-drop.rs:364:9: 364:19
    let mut _3: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:365:5: 365:14
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:365:5: 365:14
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:366:13: 366:22
    let _14: Ptr<'_>;                    // in scope 0 at ui/drop/dynamic-drop.rs:368:9: 368:18
    let mut _15: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:368:9: 368:18
    let mut _17: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:369:17: 369:26
    let mut _18: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:371:9: 371:35
    let mut _19: std::vec::Vec<usize>;   // in scope 0 at ui/drop/dynamic-drop.rs:371:24: 371:34
    let mut _20: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:373:1: 373:2
    let mut _21: *const [usize; 1];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug exceptions => _2;          // in scope 1 at ui/drop/dynamic-drop.rs:364:9: 364:19
        let _11: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:366:9: 366:10
        scope 3 {
            debug p => _11;              // in scope 3 at ui/drop/dynamic-drop.rs:366:9: 366:10
            let _13: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:367:9: 367:10
            let _16: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:369:13: 369:14
            scope 4 {
                debug q => _13;          // in scope 4 at ui/drop/dynamic-drop.rs:367:9: 367:10
            }
            scope 5 {
                debug r => _16;          // in scope 5 at ui/drop/dynamic-drop.rs:369:13: 369:14
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:364:9: 364:19
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = (((_8.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_21) = [const 8_usize];        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _10 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:365:5: 365:14
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:365:5: 365:14
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:365:7: 365:12
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_9) -> [return: bb4, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:365:14: 365:15
    }

    bb4: {
        _12 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:366:13: 366:22
        _11 = Allocator::alloc(move _12) -> [return: bb5, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:366:13: 366:22
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:366:15: 366:20
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:368:9: 368:18
        _14 = Allocator::alloc(move _15) -> [return: bb6, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:368:9: 368:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:368:11: 368:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_14) -> [return: bb7, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:368:18: 368:19
    }

    bb7: {
        _17 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:369:17: 369:26
        _16 = Allocator::alloc(move _17) -> [return: bb8, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:369:17: 369:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:369:19: 369:24
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = _1;                        // scope 5 at ui/drop/dynamic-drop.rs:371:9: 371:35
        _20 = const false;               // scope 5 at ui/drop/dynamic-drop.rs:371:24: 371:34
        _19 = move _2;                   // scope 5 at ui/drop/dynamic-drop.rs:371:24: 371:34
        _13 = Allocator::alloc_leaked(move _18, move _19) -> [return: bb9, unwind: bb13]; // scope 5 at ui/drop/dynamic-drop.rs:371:9: 371:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:371:11: 371:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, Vec<usize>) -> Ptr<'a> {Allocator::alloc_leaked}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_16) -> [return: bb10, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:372:5: 372:6
    }

    bb10: {
        drop(_13) -> [return: bb11, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:373:1: 373:2
    }

    bb11: {
        drop(_11) -> [return: bb12, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:373:1: 373:2
    }

    bb12: {
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:373:1: 373:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:373:2: 373:2
    }

    bb13 (cleanup): {
        drop(_16) -> bb14;               // scope 3 at ui/drop/dynamic-drop.rs:372:5: 372:6
    }

    bb14 (cleanup): {
        drop(_11) -> bb17;               // scope 1 at ui/drop/dynamic-drop.rs:373:1: 373:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:362:1: 373:2
    }

    bb16 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:373:1: 373:2
    }

    bb17 (cleanup): {
        switchInt(_20) -> [0: bb15, otherwise: bb16]; // scope 0 at ui/drop/dynamic-drop.rs:373:1: 373:2
    }
}

fn panic_after_init_temp(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:375:26: 375:27
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:375:41: 375:41
    let _2: std::vec::Vec<usize>;        // in scope 0 at ui/drop/dynamic-drop.rs:377:9: 377:19
    let mut _3: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:378:5: 378:14
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:378:5: 378:14
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:379:13: 379:22
    let _13: Ptr<'_>;                    // in scope 0 at ui/drop/dynamic-drop.rs:384:9: 384:35
    let _14: Ptr<'_>;                    // in scope 0 at ui/drop/dynamic-drop.rs:381:9: 381:18
    let mut _15: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:381:9: 381:18
    let mut _17: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:382:17: 382:26
    let mut _18: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:384:9: 384:35
    let mut _19: std::vec::Vec<usize>;   // in scope 0 at ui/drop/dynamic-drop.rs:384:24: 384:34
    let mut _20: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:386:1: 386:2
    let mut _21: *const [usize; 1];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug exceptions => _2;          // in scope 1 at ui/drop/dynamic-drop.rs:377:9: 377:19
        let _11: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:379:9: 379:10
        scope 3 {
            debug p => _11;              // in scope 3 at ui/drop/dynamic-drop.rs:379:9: 379:10
            let _16: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:382:13: 382:14
            scope 4 {
                debug r => _16;          // in scope 4 at ui/drop/dynamic-drop.rs:382:13: 382:14
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:377:9: 377:19
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = (((_8.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_21) = [const 8_usize];        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _10 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:378:5: 378:14
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:378:5: 378:14
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:378:7: 378:12
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_9) -> [return: bb4, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:378:14: 378:15
    }

    bb4: {
        _12 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:379:13: 379:22
        _11 = Allocator::alloc(move _12) -> [return: bb5, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:379:13: 379:22
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:379:15: 379:20
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:381:9: 381:18
        _14 = Allocator::alloc(move _15) -> [return: bb6, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:381:9: 381:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:381:11: 381:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_14) -> [return: bb7, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:381:18: 381:19
    }

    bb7: {
        _17 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:382:17: 382:26
        _16 = Allocator::alloc(move _17) -> [return: bb8, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:382:17: 382:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:382:19: 382:24
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = _1;                        // scope 4 at ui/drop/dynamic-drop.rs:384:9: 384:35
        _20 = const false;               // scope 4 at ui/drop/dynamic-drop.rs:384:24: 384:34
        _19 = move _2;                   // scope 4 at ui/drop/dynamic-drop.rs:384:24: 384:34
        _13 = Allocator::alloc_leaked(move _18, move _19) -> [return: bb9, unwind: bb13]; // scope 4 at ui/drop/dynamic-drop.rs:384:9: 384:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:384:11: 384:23
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, Vec<usize>) -> Ptr<'a> {Allocator::alloc_leaked}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_16) -> [return: bb10, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:385:5: 385:6
    }

    bb10: {
        drop(_13) -> [return: bb11, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:385:6: 385:7
    }

    bb11: {
        drop(_11) -> [return: bb12, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:386:1: 386:2
    }

    bb12: {
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:386:1: 386:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:386:2: 386:2
    }

    bb13 (cleanup): {
        drop(_16) -> bb14;               // scope 3 at ui/drop/dynamic-drop.rs:385:5: 385:6
    }

    bb14 (cleanup): {
        drop(_11) -> bb17;               // scope 1 at ui/drop/dynamic-drop.rs:386:1: 386:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:375:1: 386:2
    }

    bb16 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:386:1: 386:2
    }

    bb17 (cleanup): {
        switchInt(_20) -> [0: bb15, otherwise: bb16]; // scope 0 at ui/drop/dynamic-drop.rs:386:1: 386:2
    }
}

fn panic_after_init_by_loop(_1: &Allocator) -> () {
    debug a => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:388:29: 388:30
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:388:44: 388:44
    let _2: std::vec::Vec<usize>;        // in scope 0 at ui/drop/dynamic-drop.rs:390:9: 390:19
    let mut _3: std::boxed::Box<[usize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[usize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:391:5: 391:14
    let mut _10: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:391:5: 391:14
    let mut _12: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:392:13: 392:22
    let _14: Ptr<'_>;                    // in scope 0 at ui/drop/dynamic-drop.rs:394:9: 394:18
    let mut _15: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:394:9: 394:18
    let mut _17: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:395:17: 395:26
    let mut _18: &Allocator;             // in scope 0 at ui/drop/dynamic-drop.rs:397:15: 397:41
    let mut _19: std::vec::Vec<usize>;   // in scope 0 at ui/drop/dynamic-drop.rs:397:30: 397:40
    let mut _20: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:399:1: 399:2
    let mut _21: *const [usize; 1];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug exceptions => _2;          // in scope 1 at ui/drop/dynamic-drop.rs:390:9: 390:19
        let _11: Ptr<'_>;                // in scope 1 at ui/drop/dynamic-drop.rs:392:9: 392:10
        scope 3 {
            debug p => _11;              // in scope 3 at ui/drop/dynamic-drop.rs:392:9: 392:10
            let _13: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:393:9: 393:10
            let _16: Ptr<'_>;            // in scope 3 at ui/drop/dynamic-drop.rs:395:13: 395:14
            scope 4 {
                debug q => _13;          // in scope 4 at ui/drop/dynamic-drop.rs:393:9: 393:10
            }
            scope 5 {
                debug r => _16;          // in scope 5 at ui/drop/dynamic-drop.rs:395:13: 395:14
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:390:9: 390:19
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = (((_8.0: std::ptr::Unique<[usize; 1]>).0: std::ptr::NonNull<[usize; 1]>).0: *const [usize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_21) = [const 8_usize];        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[usize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [usize]>::into_vec::<std::alloc::Global>(move _3) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[usize]>) -> Vec<usize> {slice::<impl [usize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _20 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _10 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:391:5: 391:14
        _9 = Allocator::alloc(move _10) -> [return: bb3, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:391:5: 391:14
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:391:7: 391:12
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_9) -> [return: bb4, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:391:14: 391:15
    }

    bb4: {
        _12 = _1;                        // scope 1 at ui/drop/dynamic-drop.rs:392:13: 392:22
        _11 = Allocator::alloc(move _12) -> [return: bb5, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:392:13: 392:22
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:392:15: 392:20
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:394:9: 394:18
        _14 = Allocator::alloc(move _15) -> [return: bb6, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:394:9: 394:18
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:394:11: 394:16
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_14) -> [return: bb7, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:394:18: 394:19
    }

    bb7: {
        _17 = _1;                        // scope 3 at ui/drop/dynamic-drop.rs:395:17: 395:26
        _16 = Allocator::alloc(move _17) -> [return: bb8, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:395:17: 395:26
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:395:19: 395:24
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {Allocator::alloc}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = _1;                        // scope 5 at ui/drop/dynamic-drop.rs:397:15: 397:41
        _20 = const false;               // scope 5 at ui/drop/dynamic-drop.rs:397:30: 397:40
        _19 = move _2;                   // scope 5 at ui/drop/dynamic-drop.rs:397:30: 397:40
        _13 = Allocator::alloc_leaked(move _18, move _19) -> [return: bb9, unwind: bb13]; // scope 5 at ui/drop/dynamic-drop.rs:397:15: 397:41
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:397:17: 397:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, Vec<usize>) -> Ptr<'a> {Allocator::alloc_leaked}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_16) -> [return: bb10, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:398:5: 398:6
    }

    bb10: {
        drop(_13) -> [return: bb11, unwind: bb14]; // scope 3 at ui/drop/dynamic-drop.rs:399:1: 399:2
    }

    bb11: {
        drop(_11) -> [return: bb12, unwind: bb17]; // scope 1 at ui/drop/dynamic-drop.rs:399:1: 399:2
    }

    bb12: {
        _20 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:399:1: 399:2
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:399:2: 399:2
    }

    bb13 (cleanup): {
        drop(_16) -> bb14;               // scope 3 at ui/drop/dynamic-drop.rs:398:5: 398:6
    }

    bb14 (cleanup): {
        drop(_11) -> bb17;               // scope 1 at ui/drop/dynamic-drop.rs:399:1: 399:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:388:1: 399:2
    }

    bb16 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at ui/drop/dynamic-drop.rs:399:1: 399:2
    }

    bb17 (cleanup): {
        switchInt(_20) -> [0: bb15, otherwise: bb16]; // scope 0 at ui/drop/dynamic-drop.rs:399:1: 399:2
    }
}

fn run_test(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:401:16: 401:21
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:402:5: 402:5
    let _2: Allocator;                   // in scope 0 at ui/drop/dynamic-drop.rs:404:9: 404:20
    let _3: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:405:5: 405:20
    let mut _4: &mut F;                  // in scope 0 at ui/drop/dynamic-drop.rs:405:5: 405:6
    let mut _5: (&Allocator,);           // in scope 0 at ui/drop/dynamic-drop.rs:405:5: 405:20
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:405:7: 405:19
    let _7: &Allocator;                  // in scope 0 at ui/drop/dynamic-drop.rs:405:7: 405:19
    let mut _8: std::ops::Range<usize>;  // in scope 0 at ui/drop/dynamic-drop.rs:407:23: 407:53
    let mut _9: std::ops::Range<usize>;  // in scope 0 at ui/drop/dynamic-drop.rs:407:23: 407:53
    let mut _10: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:407:26: 407:53
    let mut _11: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:407:26: 407:51
    let mut _12: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:407:26: 407:51
    let mut _13: (usize, bool);          // in scope 0 at ui/drop/dynamic-drop.rs:407:26: 407:53
    let mut _15: std::option::Option<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:407:23: 407:53
    let mut _16: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:407:23: 407:53
    let mut _17: &mut std::ops::Range<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:407:23: 407:53
    let mut _18: isize;                  // in scope 0 at ui/drop/dynamic-drop.rs:407:5: 423:6
    let mut _21: usize;                  // in scope 0 at ui/drop/dynamic-drop.rs:408:36: 408:46
    let mut _24: &mut F;                 // in scope 0 at ui/drop/dynamic-drop.rs:410:41: 410:47
    let mut _26: [closure@ui/drop/dynamic-drop.rs:411:42: 411:49]; // in scope 0 at ui/drop/dynamic-drop.rs:411:42: 413:10
    let mut _27: isize;                  // in scope 0 at ui/drop/dynamic-drop.rs:415:13: 415:19
    let mut _28: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _30: &[&str];                // in scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
    let mut _31: &[&str; 2];             // in scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
    let _32: &[&str; 2];                 // in scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
    let mut _33: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _34: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _35: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _36: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _37: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dynamic-drop.rs:416:30: 416:55
    let mut _38: &usize;                 // in scope 0 at ui/drop/dynamic-drop.rs:416:30: 416:55
    let _39: &usize;                     // in scope 0 at ui/drop/dynamic-drop.rs:416:30: 416:55
    let _40: usize;                      // in scope 0 at ui/drop/dynamic-drop.rs:416:30: 416:55
    let mut _41: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:416:30: 416:55
    let mut _42: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/drop/dynamic-drop.rs:416:57: 416:76
    let mut _43: &usize;                 // in scope 0 at ui/drop/dynamic-drop.rs:416:57: 416:76
    let _44: &usize;                     // in scope 0 at ui/drop/dynamic-drop.rs:416:57: 416:76
    let _45: usize;                      // in scope 0 at ui/drop/dynamic-drop.rs:416:57: 416:76
    let mut _46: &std::cell::Cell<usize>; // in scope 0 at ui/drop/dynamic-drop.rs:416:57: 416:76
    let mut _48: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:418:20: 418:65
    let mut _49: &std::option::Option<&InjectedFailure>; // in scope 0 at ui/drop/dynamic-drop.rs:418:20: 418:65
    let _50: std::option::Option<&InjectedFailure>; // in scope 0 at ui/drop/dynamic-drop.rs:418:20: 418:55
    let mut _51: &dyn std::any::Any + std::marker::Send; // in scope 0 at ui/drop/dynamic-drop.rs:418:20: 418:55
    let _52: !;                          // in scope 0 at ui/drop/dynamic-drop.rs:419:21: 419:44
    let mut _53: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/drop/dynamic-drop.rs:419:42: 419:43
    let mut _54: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/drop/dynamic-drop.rs:419:42: 419:43
    let mut _56: bool;                   // in scope 0 at ui/drop/dynamic-drop.rs:421:13: 421:14
    let mut _57: *const dyn std::any::Any + std::marker::Send; // in scope 0 at ui/drop/dynamic-drop.rs:417:17: 417:18
    scope 1 {
        debug first_alloc => _2;         // in scope 1 at ui/drop/dynamic-drop.rs:404:9: 404:20
        let mut _14: std::ops::Range<usize>; // in scope 1 at ui/drop/dynamic-drop.rs:407:23: 407:53
        scope 2 {
            debug iter => _14;           // in scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
            let _19: usize;              // in scope 2 at ui/drop/dynamic-drop.rs:407:9: 407:19
            scope 3 {
                debug failing_op => _19; // in scope 3 at ui/drop/dynamic-drop.rs:407:9: 407:19
                let _20: Allocator;      // in scope 3 at ui/drop/dynamic-drop.rs:408:13: 408:18
                scope 4 {
                    debug alloc => _20;  // in scope 4 at ui/drop/dynamic-drop.rs:408:13: 408:18
                    let _22: &Allocator; // in scope 4 at ui/drop/dynamic-drop.rs:409:13: 409:18
                    scope 5 {
                        debug alloc => _22; // in scope 5 at ui/drop/dynamic-drop.rs:409:13: 409:18
                        let _23: std::panic::AssertUnwindSafe<&mut F>; // in scope 5 at ui/drop/dynamic-drop.rs:410:13: 410:14
                        scope 6 {
                            debug f => _23; // in scope 6 at ui/drop/dynamic-drop.rs:410:13: 410:14
                            let _25: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 6 at ui/drop/dynamic-drop.rs:411:13: 411:19
                            scope 7 {
                                debug result => _25; // in scope 7 at ui/drop/dynamic-drop.rs:411:13: 411:19
                                let _47: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 7 at ui/drop/dynamic-drop.rs:417:17: 417:18
                                let mut _55: &[&str; 2]; // in scope 7 at ui/drop/dynamic-drop.rs:415:30: 415:63
                                scope 8 {
                                    debug e => _47; // in scope 8 at ui/drop/dynamic-drop.rs:417:17: 417:18
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _56 = const false;               // scope 0 at ui/drop/dynamic-drop.rs:404:9: 404:20
        _2 = Allocator::new(const _) -> [return: bb1, unwind: bb30]; // scope 0 at ui/drop/dynamic-drop.rs:404:23: 404:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:404:23: 404:37
                                         // + literal: Const { ty: fn(usize) -> Allocator {Allocator::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/drop/dynamic-drop.rs:405:5: 405:6
        _7 = &_2;                        // scope 1 at ui/drop/dynamic-drop.rs:405:7: 405:19
        _6 = _7;                         // scope 1 at ui/drop/dynamic-drop.rs:405:7: 405:19
        _5 = (move _6,);                 // scope 1 at ui/drop/dynamic-drop.rs:405:5: 405:20
        _3 = <F as FnMut<(&Allocator,)>>::call_mut(move _4, move _5) -> [return: bb2, unwind: bb29]; // scope 1 at ui/drop/dynamic-drop.rs:405:5: 405:20
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:405:5: 405:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&Allocator,)) -> <F as FnOnce<(&Allocator,)>>::Output {<F as FnMut<(&Allocator,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &(_2.2: std::cell::Cell<usize>); // scope 1 at ui/drop/dynamic-drop.rs:407:26: 407:51
        _11 = Cell::<usize>::get(move _12) -> [return: bb3, unwind: bb29]; // scope 1 at ui/drop/dynamic-drop.rs:407:26: 407:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:407:46: 407:49
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = CheckedAdd(_11, const 1_usize); // scope 1 at ui/drop/dynamic-drop.rs:407:26: 407:53
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _11, const 1_usize) -> [success: bb4, unwind: bb29]; // scope 1 at ui/drop/dynamic-drop.rs:407:26: 407:53
    }

    bb4: {
        _10 = move (_13.0: usize);       // scope 1 at ui/drop/dynamic-drop.rs:407:26: 407:53
        _9 = std::ops::Range::<usize> { start: const 1_usize, end: move _10 }; // scope 1 at ui/drop/dynamic-drop.rs:407:23: 407:53
        _8 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _9) -> [return: bb5, unwind: bb29]; // scope 1 at ui/drop/dynamic-drop.rs:407:23: 407:53
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:407:23: 407:53
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = move _8;                   // scope 1 at ui/drop/dynamic-drop.rs:407:23: 407:53
        goto -> bb6;                     // scope 2 at ui/drop/dynamic-drop.rs:407:5: 423:6
    }

    bb6: {
        _17 = &mut _14;                  // scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
        _16 = &mut (*_17);               // scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
        _15 = <std::ops::Range<usize> as Iterator>::next(move _16) -> [return: bb7, unwind: bb29]; // scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:407:23: 407:53
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = discriminant(_15);         // scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
        switchInt(move _18) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
    }

    bb8: {
        _19 = ((_15 as Some).0: usize);  // scope 2 at ui/drop/dynamic-drop.rs:407:9: 407:19
        _21 = _19;                       // scope 3 at ui/drop/dynamic-drop.rs:408:36: 408:46
        _20 = Allocator::new(move _21) -> [return: bb11, unwind: bb29]; // scope 3 at ui/drop/dynamic-drop.rs:408:21: 408:47
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:408:21: 408:35
                                         // + literal: Const { ty: fn(usize) -> Allocator {Allocator::new}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 2 at ui/drop/dynamic-drop.rs:407:23: 407:53
    }

    bb10: {
        drop(_2) -> [return: bb26, unwind: bb30]; // scope 0 at ui/drop/dynamic-drop.rs:424:1: 424:2
    }

    bb11: {
        _22 = &_20;                      // scope 4 at ui/drop/dynamic-drop.rs:409:21: 409:27
        _24 = &mut _1;                   // scope 5 at ui/drop/dynamic-drop.rs:410:41: 410:47
        _23 = AssertUnwindSafe::<&mut F>(move _24); // scope 5 at ui/drop/dynamic-drop.rs:410:17: 410:48
        _26 = [closure@ui/drop/dynamic-drop.rs:411:42: 411:49] { f: move _23, alloc: _22 }; // scope 6 at ui/drop/dynamic-drop.rs:411:42: 413:10
                                         // closure
                                         // + def_id: DefId(0:79 ~ dynamic_drop[d7db]::run_test::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::panic::AssertUnwindSafe<&mut F>, &Allocator),
                                         // ]
        _25 = catch_unwind::<[closure@ui/drop/dynamic-drop.rs:411:42: 411:49], ()>(move _26) -> [return: bb12, unwind: bb28]; // scope 6 at ui/drop/dynamic-drop.rs:411:22: 413:11
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:411:22: 411:41
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:411:42: 411:49]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/drop/dynamic-drop.rs:411:42: 411:49], ()>}, val: Value(<ZST>) }
    }

    bb12: {
        _27 = discriminant(_25);         // scope 7 at ui/drop/dynamic-drop.rs:414:15: 414:21
        switchInt(move _27) -> [0: bb15, 1: bb13, otherwise: bb14]; // scope 7 at ui/drop/dynamic-drop.rs:414:9: 414:21
    }

    bb13: {
        _56 = const true;                // scope 7 at ui/drop/dynamic-drop.rs:417:17: 417:18
        _47 = move ((_25 as Err).0: std::boxed::Box<dyn std::any::Any + std::marker::Send>); // scope 7 at ui/drop/dynamic-drop.rs:417:17: 417:18
        _57 = (((_47.0: std::ptr::Unique<dyn std::any::Any + std::marker::Send>).0: std::ptr::NonNull<dyn std::any::Any + std::marker::Send>).0: *const dyn std::any::Any + std::marker::Send); // scope 8 at ui/drop/dynamic-drop.rs:418:20: 418:55
        _51 = &(*_57);                   // scope 8 at ui/drop/dynamic-drop.rs:418:20: 418:55
        _50 = <(dyn Any + Send + 'static)>::downcast_ref::<InjectedFailure>(move _51) -> [return: bb21, unwind: bb33]; // scope 8 at ui/drop/dynamic-drop.rs:418:20: 418:55
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:418:22: 418:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Any + Send + 'static)) -> Option<&'a InjectedFailure> {<(dyn Any + Send + 'static)>::downcast_ref::<InjectedFailure>}, val: Value(<ZST>) }
    }

    bb14: {
        unreachable;                     // scope 7 at ui/drop/dynamic-drop.rs:414:15: 414:21
    }

    bb15: {
        _55 = const _;                   // scope 7 at ui/drop/dynamic-drop.rs:415:30: 415:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:415:30: 415:63
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(run_test, [F], Some(promoted[0])) }
        _32 = _55;                       // scope 7 at ui/drop/dynamic-drop.rs:415:30: 415:63
        _31 = _32;                       // scope 7 at ui/drop/dynamic-drop.rs:415:30: 415:63
        _30 = move _31 as &[&str] (Pointer(Unsize)); // scope 7 at ui/drop/dynamic-drop.rs:415:30: 415:63
        _41 = &(_2.2: std::cell::Cell<usize>); // scope 7 at ui/drop/dynamic-drop.rs:416:30: 416:55
        _40 = Cell::<usize>::get(move _41) -> [return: bb16, unwind: bb28]; // scope 7 at ui/drop/dynamic-drop.rs:416:30: 416:55
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:416:50: 416:53
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb16: {
        _39 = &_40;                      // scope 7 at ui/drop/dynamic-drop.rs:416:30: 416:55
        _38 = _39;                       // scope 7 at ui/drop/dynamic-drop.rs:416:30: 416:55
        _37 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _38) -> [return: bb17, unwind: bb28]; // scope 7 at ui/drop/dynamic-drop.rs:416:30: 416:55
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:416:30: 416:55
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb17: {
        _46 = &((*_22).2: std::cell::Cell<usize>); // scope 7 at ui/drop/dynamic-drop.rs:416:57: 416:76
        _45 = Cell::<usize>::get(move _46) -> [return: bb18, unwind: bb28]; // scope 7 at ui/drop/dynamic-drop.rs:416:57: 416:76
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:416:71: 416:74
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<usize>) -> usize {Cell::<usize>::get}, val: Value(<ZST>) }
    }

    bb18: {
        _44 = &_45;                      // scope 7 at ui/drop/dynamic-drop.rs:416:57: 416:76
        _43 = _44;                       // scope 7 at ui/drop/dynamic-drop.rs:416:57: 416:76
        _42 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _43) -> [return: bb19, unwind: bb28]; // scope 7 at ui/drop/dynamic-drop.rs:416:57: 416:76
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:416:57: 416:76
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb19: {
        _36 = [move _37, move _42];      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _35 = &_36;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _34 = _35;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _33 = move _34 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _29 = Arguments::<'_>::new_v1(move _30, move _33) -> [return: bb20, unwind: bb28]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb20: {
        _28 = panic_fmt(move _29) -> bb28; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb21: {
        _49 = &_50;                      // scope 8 at ui/drop/dynamic-drop.rs:418:20: 418:65
        _48 = Option::<&InjectedFailure>::is_none(move _49) -> [return: bb22, unwind: bb33]; // scope 8 at ui/drop/dynamic-drop.rs:418:20: 418:65
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:418:56: 418:63
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&InjectedFailure>) -> bool {Option::<&InjectedFailure>::is_none}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _48) -> [0: bb24, otherwise: bb23]; // scope 8 at ui/drop/dynamic-drop.rs:418:20: 418:65
    }

    bb23: {
        _56 = const false;               // scope 8 at ui/drop/dynamic-drop.rs:419:42: 419:43
        _54 = move _47;                  // scope 8 at ui/drop/dynamic-drop.rs:419:42: 419:43
        _53 = move _54 as std::boxed::Box<dyn std::any::Any + std::marker::Send> (Pointer(Unsize)); // scope 8 at ui/drop/dynamic-drop.rs:419:42: 419:43
        _52 = resume_unwind(move _53) -> bb33; // scope 8 at ui/drop/dynamic-drop.rs:419:21: 419:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:419:21: 419:41
                                         // + literal: Const { ty: fn(Box<(dyn Any + Send + 'static)>) -> ! {resume_unwind}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_47) -> [return: bb25, unwind: bb28]; // scope 7 at ui/drop/dynamic-drop.rs:421:13: 421:14
    }

    bb25: {
        _56 = const false;               // scope 7 at ui/drop/dynamic-drop.rs:421:13: 421:14
        drop(_20) -> [return: bb6, unwind: bb29]; // scope 3 at ui/drop/dynamic-drop.rs:423:5: 423:6
    }

    bb26: {
        drop(_1) -> bb27;                // scope 0 at ui/drop/dynamic-drop.rs:424:1: 424:2
    }

    bb27: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:424:2: 424:2
    }

    bb28 (cleanup): {
        drop(_20) -> bb29;               // scope 3 at ui/drop/dynamic-drop.rs:423:5: 423:6
    }

    bb29 (cleanup): {
        drop(_2) -> bb30;                // scope 0 at ui/drop/dynamic-drop.rs:424:1: 424:2
    }

    bb30 (cleanup): {
        drop(_1) -> bb31;                // scope 0 at ui/drop/dynamic-drop.rs:424:1: 424:2
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:401:1: 424:2
    }

    bb32 (cleanup): {
        drop(_47) -> bb28;               // scope 7 at ui/drop/dynamic-drop.rs:421:13: 421:14
    }

    bb33 (cleanup): {
        switchInt(_56) -> [0: bb28, otherwise: bb32]; // scope 7 at ui/drop/dynamic-drop.rs:421:13: 421:14
    }
}

promoted[0] in run_test: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
    let mut _1: [&str; 2];               // in scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63

    bb0: {
        _1 = [const "test executed ", const " ops but now "]; // scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:415:30: 415:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:415:30: 415:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:415:30: 415:63
    }
}

fn run_test::{closure#0}(_1: [closure@ui/drop/dynamic-drop.rs:411:42: 411:49]) -> () {
    debug f => (_1.0: std::panic::AssertUnwindSafe<&mut F>); // in scope 0 at ui/drop/dynamic-drop.rs:410:13: 410:14
    debug alloc => (_1.1: &Allocator);   // in scope 0 at ui/drop/dynamic-drop.rs:409:13: 409:18
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:411:50: 411:50
    let _2: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:23
    let mut _3: &mut F;                  // in scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:16
    let mut _4: (&Allocator,);           // in scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:23
    let mut _5: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:412:17: 412:22
    let mut _6: &mut F;                  // in scope 0 at ui/drop/dynamic-drop.rs:411:42: 413:10
    let mut _7: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:411:42: 413:10

    bb0: {
        _6 = deref_copy ((_1.0: std::panic::AssertUnwindSafe<&mut F>).0: &mut F); // scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:16
        _3 = &mut (*_6);                 // scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:16
        _7 = deref_copy (_1.1: &Allocator); // scope 0 at ui/drop/dynamic-drop.rs:412:17: 412:22
        _5 = _7;                         // scope 0 at ui/drop/dynamic-drop.rs:412:17: 412:22
        _4 = (move _5,);                 // scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:23
        _2 = <F as FnMut<(&Allocator,)>>::call_mut(move _3, move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:412:13: 412:23
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:412:13: 412:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&Allocator,)) -> <F as FnOnce<(&Allocator,)>>::Output {<F as FnMut<(&Allocator,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:413:10: 413:10
    }
}

fn run_test_nopanic(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/drop/dynamic-drop.rs:426:24: 426:29
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:427:5: 427:5
    let _2: Allocator;                   // in scope 0 at ui/drop/dynamic-drop.rs:429:9: 429:20
    let _3: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:430:5: 430:20
    let mut _4: &mut F;                  // in scope 0 at ui/drop/dynamic-drop.rs:430:5: 430:6
    let mut _5: (&Allocator,);           // in scope 0 at ui/drop/dynamic-drop.rs:430:5: 430:20
    let mut _6: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:430:7: 430:19
    let _7: &Allocator;                  // in scope 0 at ui/drop/dynamic-drop.rs:430:7: 430:19
    scope 1 {
        debug first_alloc => _2;         // in scope 1 at ui/drop/dynamic-drop.rs:429:9: 429:20
    }

    bb0: {
        _2 = Allocator::new(const _) -> [return: bb1, unwind: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:429:23: 429:49
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:429:23: 429:37
                                         // + literal: Const { ty: fn(usize) -> Allocator {Allocator::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/drop/dynamic-drop.rs:430:5: 430:6
        _7 = &_2;                        // scope 1 at ui/drop/dynamic-drop.rs:430:7: 430:19
        _6 = _7;                         // scope 1 at ui/drop/dynamic-drop.rs:430:7: 430:19
        _5 = (move _6,);                 // scope 1 at ui/drop/dynamic-drop.rs:430:5: 430:20
        _3 = <F as FnMut<(&Allocator,)>>::call_mut(move _4, move _5) -> [return: bb2, unwind: bb5]; // scope 1 at ui/drop/dynamic-drop.rs:430:5: 430:20
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:430:5: 430:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&Allocator,)) -> <F as FnOnce<(&Allocator,)>>::Output {<F as FnMut<(&Allocator,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb6]; // scope 0 at ui/drop/dynamic-drop.rs:431:1: 431:2
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/drop/dynamic-drop.rs:431:1: 431:2
    }

    bb4: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:431:2: 431:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/drop/dynamic-drop.rs:431:1: 431:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/drop/dynamic-drop.rs:431:1: 431:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/drop/dynamic-drop.rs:426:1: 431:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:433:11: 433:11
    let _1: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:434:5: 434:41
    let mut _2: [closure@ui/drop/dynamic-drop.rs:434:14: 434:17]; // in scope 0 at ui/drop/dynamic-drop.rs:434:14: 434:40
    let _3: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:435:5: 435:40
    let mut _4: [closure@ui/drop/dynamic-drop.rs:435:14: 435:17]; // in scope 0 at ui/drop/dynamic-drop.rs:435:14: 435:39
    let _5: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:436:5: 436:41
    let mut _6: [closure@ui/drop/dynamic-drop.rs:436:14: 436:17]; // in scope 0 at ui/drop/dynamic-drop.rs:436:14: 436:40
    let _7: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:437:5: 437:40
    let mut _8: [closure@ui/drop/dynamic-drop.rs:437:14: 437:17]; // in scope 0 at ui/drop/dynamic-drop.rs:437:14: 437:39
    let _9: ();                          // in scope 0 at ui/drop/dynamic-drop.rs:439:5: 439:47
    let mut _10: [closure@ui/drop/dynamic-drop.rs:439:14: 439:17]; // in scope 0 at ui/drop/dynamic-drop.rs:439:14: 439:46
    let _11: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:440:5: 440:46
    let mut _12: [closure@ui/drop/dynamic-drop.rs:440:14: 440:17]; // in scope 0 at ui/drop/dynamic-drop.rs:440:14: 440:45
    let _13: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:441:5: 441:46
    let mut _14: [closure@ui/drop/dynamic-drop.rs:441:14: 441:17]; // in scope 0 at ui/drop/dynamic-drop.rs:441:14: 441:45
    let _15: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:442:5: 442:45
    let mut _16: [closure@ui/drop/dynamic-drop.rs:442:14: 442:17]; // in scope 0 at ui/drop/dynamic-drop.rs:442:14: 442:44
    let _17: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:444:5: 444:40
    let mut _18: [closure@ui/drop/dynamic-drop.rs:444:14: 444:17]; // in scope 0 at ui/drop/dynamic-drop.rs:444:14: 444:39
    let _19: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:445:5: 445:39
    let mut _20: [closure@ui/drop/dynamic-drop.rs:445:14: 445:17]; // in scope 0 at ui/drop/dynamic-drop.rs:445:14: 445:38
    let _21: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:447:5: 447:34
    let mut _22: [closure@ui/drop/dynamic-drop.rs:447:14: 447:17]; // in scope 0 at ui/drop/dynamic-drop.rs:447:14: 447:33
    let _23: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:448:5: 448:32
    let mut _24: [closure@ui/drop/dynamic-drop.rs:448:14: 448:17]; // in scope 0 at ui/drop/dynamic-drop.rs:448:14: 448:31
    let _25: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:449:5: 449:37
    let mut _26: [closure@ui/drop/dynamic-drop.rs:449:14: 449:17]; // in scope 0 at ui/drop/dynamic-drop.rs:449:14: 449:36
    let _27: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:451:5: 451:62
    let mut _28: [closure@ui/drop/dynamic-drop.rs:451:14: 451:17]; // in scope 0 at ui/drop/dynamic-drop.rs:451:14: 451:61
    let _29: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:452:5: 452:61
    let mut _30: [closure@ui/drop/dynamic-drop.rs:452:14: 452:17]; // in scope 0 at ui/drop/dynamic-drop.rs:452:14: 452:60
    let _31: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:453:5: 453:61
    let mut _32: [closure@ui/drop/dynamic-drop.rs:453:14: 453:17]; // in scope 0 at ui/drop/dynamic-drop.rs:453:14: 453:60
    let _33: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:454:5: 454:60
    let mut _34: [closure@ui/drop/dynamic-drop.rs:454:14: 454:17]; // in scope 0 at ui/drop/dynamic-drop.rs:454:14: 454:59
    let _35: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:455:5: 455:61
    let mut _36: [closure@ui/drop/dynamic-drop.rs:455:14: 455:17]; // in scope 0 at ui/drop/dynamic-drop.rs:455:14: 455:60
    let _37: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:456:5: 456:60
    let mut _38: [closure@ui/drop/dynamic-drop.rs:456:14: 456:17]; // in scope 0 at ui/drop/dynamic-drop.rs:456:14: 456:59
    let _39: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:457:5: 457:60
    let mut _40: [closure@ui/drop/dynamic-drop.rs:457:14: 457:17]; // in scope 0 at ui/drop/dynamic-drop.rs:457:14: 457:59
    let _41: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:458:5: 458:59
    let mut _42: [closure@ui/drop/dynamic-drop.rs:458:14: 458:17]; // in scope 0 at ui/drop/dynamic-drop.rs:458:14: 458:58
    let _43: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:460:5: 460:45
    let mut _44: [closure@ui/drop/dynamic-drop.rs:460:14: 460:17]; // in scope 0 at ui/drop/dynamic-drop.rs:460:14: 460:44
    let _45: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:461:5: 461:44
    let mut _46: [closure@ui/drop/dynamic-drop.rs:461:14: 461:17]; // in scope 0 at ui/drop/dynamic-drop.rs:461:14: 461:43
    let _47: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:463:5: 463:34
    let mut _48: [closure@ui/drop/dynamic-drop.rs:463:14: 463:17]; // in scope 0 at ui/drop/dynamic-drop.rs:463:14: 463:33
    let _49: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:464:5: 464:34
    let mut _50: [closure@ui/drop/dynamic-drop.rs:464:14: 464:17]; // in scope 0 at ui/drop/dynamic-drop.rs:464:14: 464:33
    let _51: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:465:5: 465:34
    let mut _52: [closure@ui/drop/dynamic-drop.rs:465:14: 465:17]; // in scope 0 at ui/drop/dynamic-drop.rs:465:14: 465:33
    let _53: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:466:5: 466:34
    let mut _54: [closure@ui/drop/dynamic-drop.rs:466:14: 466:17]; // in scope 0 at ui/drop/dynamic-drop.rs:466:14: 466:33
    let _55: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:468:5: 468:44
    let mut _56: [closure@ui/drop/dynamic-drop.rs:468:14: 468:17]; // in scope 0 at ui/drop/dynamic-drop.rs:468:14: 468:43
    let _57: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:470:5: 470:41
    let mut _58: [closure@ui/drop/dynamic-drop.rs:470:14: 470:17]; // in scope 0 at ui/drop/dynamic-drop.rs:470:14: 470:40
    let _59: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:471:5: 471:42
    let mut _60: [closure@ui/drop/dynamic-drop.rs:471:14: 471:17]; // in scope 0 at ui/drop/dynamic-drop.rs:471:14: 471:41
    let _61: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:472:5: 472:39
    let mut _62: [closure@ui/drop/dynamic-drop.rs:472:14: 472:17]; // in scope 0 at ui/drop/dynamic-drop.rs:472:14: 472:38
    let _63: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:473:5: 473:40
    let mut _64: [closure@ui/drop/dynamic-drop.rs:473:14: 473:17]; // in scope 0 at ui/drop/dynamic-drop.rs:473:14: 473:39
    let _65: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:474:5: 474:45
    let mut _66: [closure@ui/drop/dynamic-drop.rs:474:14: 474:17]; // in scope 0 at ui/drop/dynamic-drop.rs:474:14: 474:44
    let _67: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:475:5: 475:45
    let mut _68: [closure@ui/drop/dynamic-drop.rs:475:14: 475:17]; // in scope 0 at ui/drop/dynamic-drop.rs:475:14: 475:44
    let _69: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:476:5: 476:45
    let mut _70: [closure@ui/drop/dynamic-drop.rs:476:14: 476:17]; // in scope 0 at ui/drop/dynamic-drop.rs:476:14: 476:44
    let _71: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:477:5: 477:45
    let mut _72: [closure@ui/drop/dynamic-drop.rs:477:14: 477:17]; // in scope 0 at ui/drop/dynamic-drop.rs:477:14: 477:44
    let _73: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:479:5: 479:53
    let mut _74: [closure@ui/drop/dynamic-drop.rs:479:14: 479:17]; // in scope 0 at ui/drop/dynamic-drop.rs:479:14: 479:52
    let _75: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:480:5: 480:54
    let mut _76: [closure@ui/drop/dynamic-drop.rs:480:14: 480:17]; // in scope 0 at ui/drop/dynamic-drop.rs:480:14: 480:53
    let _77: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:481:5: 481:69
    let mut _78: [closure@ui/drop/dynamic-drop.rs:481:14: 481:17]; // in scope 0 at ui/drop/dynamic-drop.rs:481:14: 481:68
    let _79: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:482:5: 482:70
    let mut _80: [closure@ui/drop/dynamic-drop.rs:482:14: 482:17]; // in scope 0 at ui/drop/dynamic-drop.rs:482:14: 482:69
    let _81: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:483:5: 483:70
    let mut _82: [closure@ui/drop/dynamic-drop.rs:483:14: 483:17]; // in scope 0 at ui/drop/dynamic-drop.rs:483:14: 483:69
    let _83: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:484:5: 484:71
    let mut _84: [closure@ui/drop/dynamic-drop.rs:484:14: 484:17]; // in scope 0 at ui/drop/dynamic-drop.rs:484:14: 484:70
    let _85: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:485:5: 485:44
    let mut _86: [closure@ui/drop/dynamic-drop.rs:485:14: 485:17]; // in scope 0 at ui/drop/dynamic-drop.rs:485:14: 485:43
    let _87: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:486:5: 486:47
    let mut _88: [closure@ui/drop/dynamic-drop.rs:486:14: 486:17]; // in scope 0 at ui/drop/dynamic-drop.rs:486:14: 486:46
    let _89: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:488:5: 488:44
    let mut _90: [closure@ui/drop/dynamic-drop.rs:488:14: 488:17]; // in scope 0 at ui/drop/dynamic-drop.rs:488:14: 488:43
    let _91: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:489:5: 489:51
    let mut _92: [closure@ui/drop/dynamic-drop.rs:489:14: 489:17]; // in scope 0 at ui/drop/dynamic-drop.rs:489:14: 489:50
    let _93: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:490:5: 490:51
    let mut _94: [closure@ui/drop/dynamic-drop.rs:490:14: 490:17]; // in scope 0 at ui/drop/dynamic-drop.rs:490:14: 490:50
    let _95: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:491:5: 491:51
    let mut _96: [closure@ui/drop/dynamic-drop.rs:491:14: 491:17]; // in scope 0 at ui/drop/dynamic-drop.rs:491:14: 491:50
    let _97: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:492:5: 492:51
    let mut _98: [closure@ui/drop/dynamic-drop.rs:492:14: 492:17]; // in scope 0 at ui/drop/dynamic-drop.rs:492:14: 492:50
    let _99: ();                         // in scope 0 at ui/drop/dynamic-drop.rs:493:5: 493:51
    let mut _100: [closure@ui/drop/dynamic-drop.rs:493:14: 493:17]; // in scope 0 at ui/drop/dynamic-drop.rs:493:14: 493:50
    let _101: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:494:5: 494:51
    let mut _102: [closure@ui/drop/dynamic-drop.rs:494:14: 494:17]; // in scope 0 at ui/drop/dynamic-drop.rs:494:14: 494:50
    let _103: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:495:5: 495:51
    let mut _104: [closure@ui/drop/dynamic-drop.rs:495:14: 495:17]; // in scope 0 at ui/drop/dynamic-drop.rs:495:14: 495:50
    let _105: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:496:5: 496:51
    let mut _106: [closure@ui/drop/dynamic-drop.rs:496:14: 496:17]; // in scope 0 at ui/drop/dynamic-drop.rs:496:14: 496:50
    let _107: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:498:5: 498:38
    let mut _108: [closure@ui/drop/dynamic-drop.rs:498:14: 498:17]; // in scope 0 at ui/drop/dynamic-drop.rs:498:14: 498:37
    let _109: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:500:5: 502:7
    let mut _110: [closure@ui/drop/dynamic-drop.rs:500:14: 500:17]; // in scope 0 at ui/drop/dynamic-drop.rs:500:14: 502:6
    let _111: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:503:5: 505:7
    let mut _112: [closure@ui/drop/dynamic-drop.rs:503:14: 503:17]; // in scope 0 at ui/drop/dynamic-drop.rs:503:14: 505:6
    let _113: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:506:5: 506:38
    let mut _114: [closure@ui/drop/dynamic-drop.rs:506:14: 506:17]; // in scope 0 at ui/drop/dynamic-drop.rs:506:14: 506:37
    let _115: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:507:5: 507:43
    let mut _116: [closure@ui/drop/dynamic-drop.rs:507:14: 507:17]; // in scope 0 at ui/drop/dynamic-drop.rs:507:14: 507:42
    let _117: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:508:5: 508:46
    let mut _118: [closure@ui/drop/dynamic-drop.rs:508:14: 508:17]; // in scope 0 at ui/drop/dynamic-drop.rs:508:14: 508:45
    let _119: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:510:5: 510:63
    let mut _120: [closure@ui/drop/dynamic-drop.rs:510:14: 510:17]; // in scope 0 at ui/drop/dynamic-drop.rs:510:14: 510:62
    let _121: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:511:5: 511:64
    let mut _122: [closure@ui/drop/dynamic-drop.rs:511:14: 511:17]; // in scope 0 at ui/drop/dynamic-drop.rs:511:14: 511:63
    let _123: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:512:5: 512:62
    let mut _124: [closure@ui/drop/dynamic-drop.rs:512:14: 512:17]; // in scope 0 at ui/drop/dynamic-drop.rs:512:14: 512:61
    let _125: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:513:5: 513:63
    let mut _126: [closure@ui/drop/dynamic-drop.rs:513:14: 513:17]; // in scope 0 at ui/drop/dynamic-drop.rs:513:14: 513:62
    let _127: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:514:5: 514:63
    let mut _128: [closure@ui/drop/dynamic-drop.rs:514:14: 514:17]; // in scope 0 at ui/drop/dynamic-drop.rs:514:14: 514:62
    let _129: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:515:5: 515:64
    let mut _130: [closure@ui/drop/dynamic-drop.rs:515:14: 515:17]; // in scope 0 at ui/drop/dynamic-drop.rs:515:14: 515:63
    let _131: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:516:5: 516:62
    let mut _132: [closure@ui/drop/dynamic-drop.rs:516:14: 516:17]; // in scope 0 at ui/drop/dynamic-drop.rs:516:14: 516:61
    let _133: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:517:5: 517:63
    let mut _134: [closure@ui/drop/dynamic-drop.rs:517:14: 517:17]; // in scope 0 at ui/drop/dynamic-drop.rs:517:14: 517:62
    let _135: ();                        // in scope 0 at ui/drop/dynamic-drop.rs:519:5: 519:36
    let mut _136: [closure@ui/drop/dynamic-drop.rs:519:22: 519:25]; // in scope 0 at ui/drop/dynamic-drop.rs:519:22: 519:35

    bb0: {
        _1 = run_test::<[closure@ui/drop/dynamic-drop.rs:434:14: 434:17]>(move _2) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:434:5: 434:41
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:434:5: 434:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:434:14: 434:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:434:14: 434:17]>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = run_test::<[closure@ui/drop/dynamic-drop.rs:435:14: 435:17]>(move _4) -> bb2; // scope 0 at ui/drop/dynamic-drop.rs:435:5: 435:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:435:5: 435:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:435:14: 435:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:435:14: 435:17]>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = run_test::<[closure@ui/drop/dynamic-drop.rs:436:14: 436:17]>(move _6) -> bb3; // scope 0 at ui/drop/dynamic-drop.rs:436:5: 436:41
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:436:5: 436:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:436:14: 436:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:436:14: 436:17]>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = run_test::<[closure@ui/drop/dynamic-drop.rs:437:14: 437:17]>(move _8) -> bb4; // scope 0 at ui/drop/dynamic-drop.rs:437:5: 437:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:437:5: 437:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:437:14: 437:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:437:14: 437:17]>}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = run_test::<[closure@ui/drop/dynamic-drop.rs:439:14: 439:17]>(move _10) -> bb5; // scope 0 at ui/drop/dynamic-drop.rs:439:5: 439:47
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:439:5: 439:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:439:14: 439:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:439:14: 439:17]>}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = run_test::<[closure@ui/drop/dynamic-drop.rs:440:14: 440:17]>(move _12) -> bb6; // scope 0 at ui/drop/dynamic-drop.rs:440:5: 440:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:440:5: 440:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:440:14: 440:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:440:14: 440:17]>}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = run_test::<[closure@ui/drop/dynamic-drop.rs:441:14: 441:17]>(move _14) -> bb7; // scope 0 at ui/drop/dynamic-drop.rs:441:5: 441:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:441:5: 441:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:441:14: 441:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:441:14: 441:17]>}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = run_test::<[closure@ui/drop/dynamic-drop.rs:442:14: 442:17]>(move _16) -> bb8; // scope 0 at ui/drop/dynamic-drop.rs:442:5: 442:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:442:5: 442:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:442:14: 442:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:442:14: 442:17]>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = run_test::<[closure@ui/drop/dynamic-drop.rs:444:14: 444:17]>(move _18) -> bb9; // scope 0 at ui/drop/dynamic-drop.rs:444:5: 444:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:444:5: 444:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:444:14: 444:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:444:14: 444:17]>}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = run_test::<[closure@ui/drop/dynamic-drop.rs:445:14: 445:17]>(move _20) -> bb10; // scope 0 at ui/drop/dynamic-drop.rs:445:5: 445:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:445:5: 445:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:445:14: 445:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:445:14: 445:17]>}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = run_test::<[closure@ui/drop/dynamic-drop.rs:447:14: 447:17]>(move _22) -> bb11; // scope 0 at ui/drop/dynamic-drop.rs:447:5: 447:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:447:5: 447:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:447:14: 447:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:447:14: 447:17]>}, val: Value(<ZST>) }
    }

    bb11: {
        _23 = run_test::<[closure@ui/drop/dynamic-drop.rs:448:14: 448:17]>(move _24) -> bb12; // scope 0 at ui/drop/dynamic-drop.rs:448:5: 448:32
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:448:5: 448:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:448:14: 448:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:448:14: 448:17]>}, val: Value(<ZST>) }
    }

    bb12: {
        _25 = run_test::<[closure@ui/drop/dynamic-drop.rs:449:14: 449:17]>(move _26) -> bb13; // scope 0 at ui/drop/dynamic-drop.rs:449:5: 449:37
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:449:5: 449:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:449:14: 449:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:449:14: 449:17]>}, val: Value(<ZST>) }
    }

    bb13: {
        _27 = run_test::<[closure@ui/drop/dynamic-drop.rs:451:14: 451:17]>(move _28) -> bb14; // scope 0 at ui/drop/dynamic-drop.rs:451:5: 451:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:451:5: 451:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:451:14: 451:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:451:14: 451:17]>}, val: Value(<ZST>) }
    }

    bb14: {
        _29 = run_test::<[closure@ui/drop/dynamic-drop.rs:452:14: 452:17]>(move _30) -> bb15; // scope 0 at ui/drop/dynamic-drop.rs:452:5: 452:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:452:5: 452:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:452:14: 452:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:452:14: 452:17]>}, val: Value(<ZST>) }
    }

    bb15: {
        _31 = run_test::<[closure@ui/drop/dynamic-drop.rs:453:14: 453:17]>(move _32) -> bb16; // scope 0 at ui/drop/dynamic-drop.rs:453:5: 453:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:453:5: 453:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:453:14: 453:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:453:14: 453:17]>}, val: Value(<ZST>) }
    }

    bb16: {
        _33 = run_test::<[closure@ui/drop/dynamic-drop.rs:454:14: 454:17]>(move _34) -> bb17; // scope 0 at ui/drop/dynamic-drop.rs:454:5: 454:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:454:5: 454:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:454:14: 454:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:454:14: 454:17]>}, val: Value(<ZST>) }
    }

    bb17: {
        _35 = run_test::<[closure@ui/drop/dynamic-drop.rs:455:14: 455:17]>(move _36) -> bb18; // scope 0 at ui/drop/dynamic-drop.rs:455:5: 455:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:455:5: 455:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:455:14: 455:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:455:14: 455:17]>}, val: Value(<ZST>) }
    }

    bb18: {
        _37 = run_test::<[closure@ui/drop/dynamic-drop.rs:456:14: 456:17]>(move _38) -> bb19; // scope 0 at ui/drop/dynamic-drop.rs:456:5: 456:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:456:5: 456:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:456:14: 456:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:456:14: 456:17]>}, val: Value(<ZST>) }
    }

    bb19: {
        _39 = run_test::<[closure@ui/drop/dynamic-drop.rs:457:14: 457:17]>(move _40) -> bb20; // scope 0 at ui/drop/dynamic-drop.rs:457:5: 457:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:457:5: 457:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:457:14: 457:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:457:14: 457:17]>}, val: Value(<ZST>) }
    }

    bb20: {
        _41 = run_test::<[closure@ui/drop/dynamic-drop.rs:458:14: 458:17]>(move _42) -> bb21; // scope 0 at ui/drop/dynamic-drop.rs:458:5: 458:59
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:458:5: 458:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:458:14: 458:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:458:14: 458:17]>}, val: Value(<ZST>) }
    }

    bb21: {
        _43 = run_test::<[closure@ui/drop/dynamic-drop.rs:460:14: 460:17]>(move _44) -> bb22; // scope 0 at ui/drop/dynamic-drop.rs:460:5: 460:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:460:5: 460:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:460:14: 460:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:460:14: 460:17]>}, val: Value(<ZST>) }
    }

    bb22: {
        _45 = run_test::<[closure@ui/drop/dynamic-drop.rs:461:14: 461:17]>(move _46) -> bb23; // scope 0 at ui/drop/dynamic-drop.rs:461:5: 461:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:461:5: 461:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:461:14: 461:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:461:14: 461:17]>}, val: Value(<ZST>) }
    }

    bb23: {
        _47 = run_test::<[closure@ui/drop/dynamic-drop.rs:463:14: 463:17]>(move _48) -> bb24; // scope 0 at ui/drop/dynamic-drop.rs:463:5: 463:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:463:5: 463:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:463:14: 463:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:463:14: 463:17]>}, val: Value(<ZST>) }
    }

    bb24: {
        _49 = run_test::<[closure@ui/drop/dynamic-drop.rs:464:14: 464:17]>(move _50) -> bb25; // scope 0 at ui/drop/dynamic-drop.rs:464:5: 464:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:464:5: 464:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:464:14: 464:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:464:14: 464:17]>}, val: Value(<ZST>) }
    }

    bb25: {
        _51 = run_test::<[closure@ui/drop/dynamic-drop.rs:465:14: 465:17]>(move _52) -> bb26; // scope 0 at ui/drop/dynamic-drop.rs:465:5: 465:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:465:5: 465:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:465:14: 465:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:465:14: 465:17]>}, val: Value(<ZST>) }
    }

    bb26: {
        _53 = run_test::<[closure@ui/drop/dynamic-drop.rs:466:14: 466:17]>(move _54) -> bb27; // scope 0 at ui/drop/dynamic-drop.rs:466:5: 466:34
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:466:5: 466:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:466:14: 466:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:466:14: 466:17]>}, val: Value(<ZST>) }
    }

    bb27: {
        _55 = run_test::<[closure@ui/drop/dynamic-drop.rs:468:14: 468:17]>(move _56) -> bb28; // scope 0 at ui/drop/dynamic-drop.rs:468:5: 468:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:468:5: 468:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:468:14: 468:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:468:14: 468:17]>}, val: Value(<ZST>) }
    }

    bb28: {
        _57 = run_test::<[closure@ui/drop/dynamic-drop.rs:470:14: 470:17]>(move _58) -> bb29; // scope 0 at ui/drop/dynamic-drop.rs:470:5: 470:41
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:470:5: 470:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:470:14: 470:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:470:14: 470:17]>}, val: Value(<ZST>) }
    }

    bb29: {
        _59 = run_test::<[closure@ui/drop/dynamic-drop.rs:471:14: 471:17]>(move _60) -> bb30; // scope 0 at ui/drop/dynamic-drop.rs:471:5: 471:42
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:471:5: 471:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:471:14: 471:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:471:14: 471:17]>}, val: Value(<ZST>) }
    }

    bb30: {
        _61 = run_test::<[closure@ui/drop/dynamic-drop.rs:472:14: 472:17]>(move _62) -> bb31; // scope 0 at ui/drop/dynamic-drop.rs:472:5: 472:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:472:5: 472:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:472:14: 472:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:472:14: 472:17]>}, val: Value(<ZST>) }
    }

    bb31: {
        _63 = run_test::<[closure@ui/drop/dynamic-drop.rs:473:14: 473:17]>(move _64) -> bb32; // scope 0 at ui/drop/dynamic-drop.rs:473:5: 473:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:473:5: 473:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:473:14: 473:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:473:14: 473:17]>}, val: Value(<ZST>) }
    }

    bb32: {
        _65 = run_test::<[closure@ui/drop/dynamic-drop.rs:474:14: 474:17]>(move _66) -> bb33; // scope 0 at ui/drop/dynamic-drop.rs:474:5: 474:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:474:5: 474:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:474:14: 474:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:474:14: 474:17]>}, val: Value(<ZST>) }
    }

    bb33: {
        _67 = run_test::<[closure@ui/drop/dynamic-drop.rs:475:14: 475:17]>(move _68) -> bb34; // scope 0 at ui/drop/dynamic-drop.rs:475:5: 475:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:475:5: 475:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:475:14: 475:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:475:14: 475:17]>}, val: Value(<ZST>) }
    }

    bb34: {
        _69 = run_test::<[closure@ui/drop/dynamic-drop.rs:476:14: 476:17]>(move _70) -> bb35; // scope 0 at ui/drop/dynamic-drop.rs:476:5: 476:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:476:5: 476:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:476:14: 476:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:476:14: 476:17]>}, val: Value(<ZST>) }
    }

    bb35: {
        _71 = run_test::<[closure@ui/drop/dynamic-drop.rs:477:14: 477:17]>(move _72) -> bb36; // scope 0 at ui/drop/dynamic-drop.rs:477:5: 477:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:477:5: 477:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:477:14: 477:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:477:14: 477:17]>}, val: Value(<ZST>) }
    }

    bb36: {
        _73 = run_test::<[closure@ui/drop/dynamic-drop.rs:479:14: 479:17]>(move _74) -> bb37; // scope 0 at ui/drop/dynamic-drop.rs:479:5: 479:53
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:479:5: 479:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:479:14: 479:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:479:14: 479:17]>}, val: Value(<ZST>) }
    }

    bb37: {
        _75 = run_test::<[closure@ui/drop/dynamic-drop.rs:480:14: 480:17]>(move _76) -> bb38; // scope 0 at ui/drop/dynamic-drop.rs:480:5: 480:54
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:480:5: 480:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:480:14: 480:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:480:14: 480:17]>}, val: Value(<ZST>) }
    }

    bb38: {
        _77 = run_test::<[closure@ui/drop/dynamic-drop.rs:481:14: 481:17]>(move _78) -> bb39; // scope 0 at ui/drop/dynamic-drop.rs:481:5: 481:69
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:481:5: 481:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:481:14: 481:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:481:14: 481:17]>}, val: Value(<ZST>) }
    }

    bb39: {
        _79 = run_test::<[closure@ui/drop/dynamic-drop.rs:482:14: 482:17]>(move _80) -> bb40; // scope 0 at ui/drop/dynamic-drop.rs:482:5: 482:70
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:482:5: 482:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:482:14: 482:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:482:14: 482:17]>}, val: Value(<ZST>) }
    }

    bb40: {
        _81 = run_test::<[closure@ui/drop/dynamic-drop.rs:483:14: 483:17]>(move _82) -> bb41; // scope 0 at ui/drop/dynamic-drop.rs:483:5: 483:70
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:483:5: 483:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:483:14: 483:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:483:14: 483:17]>}, val: Value(<ZST>) }
    }

    bb41: {
        _83 = run_test::<[closure@ui/drop/dynamic-drop.rs:484:14: 484:17]>(move _84) -> bb42; // scope 0 at ui/drop/dynamic-drop.rs:484:5: 484:71
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:484:5: 484:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:484:14: 484:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:484:14: 484:17]>}, val: Value(<ZST>) }
    }

    bb42: {
        _85 = run_test::<[closure@ui/drop/dynamic-drop.rs:485:14: 485:17]>(move _86) -> bb43; // scope 0 at ui/drop/dynamic-drop.rs:485:5: 485:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:485:5: 485:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:485:14: 485:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:485:14: 485:17]>}, val: Value(<ZST>) }
    }

    bb43: {
        _87 = run_test::<[closure@ui/drop/dynamic-drop.rs:486:14: 486:17]>(move _88) -> bb44; // scope 0 at ui/drop/dynamic-drop.rs:486:5: 486:47
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:486:5: 486:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:486:14: 486:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:486:14: 486:17]>}, val: Value(<ZST>) }
    }

    bb44: {
        _89 = run_test::<[closure@ui/drop/dynamic-drop.rs:488:14: 488:17]>(move _90) -> bb45; // scope 0 at ui/drop/dynamic-drop.rs:488:5: 488:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:488:5: 488:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:488:14: 488:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:488:14: 488:17]>}, val: Value(<ZST>) }
    }

    bb45: {
        _91 = run_test::<[closure@ui/drop/dynamic-drop.rs:489:14: 489:17]>(move _92) -> bb46; // scope 0 at ui/drop/dynamic-drop.rs:489:5: 489:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:489:5: 489:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:489:14: 489:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:489:14: 489:17]>}, val: Value(<ZST>) }
    }

    bb46: {
        _93 = run_test::<[closure@ui/drop/dynamic-drop.rs:490:14: 490:17]>(move _94) -> bb47; // scope 0 at ui/drop/dynamic-drop.rs:490:5: 490:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:490:5: 490:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:490:14: 490:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:490:14: 490:17]>}, val: Value(<ZST>) }
    }

    bb47: {
        _95 = run_test::<[closure@ui/drop/dynamic-drop.rs:491:14: 491:17]>(move _96) -> bb48; // scope 0 at ui/drop/dynamic-drop.rs:491:5: 491:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:491:5: 491:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:491:14: 491:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:491:14: 491:17]>}, val: Value(<ZST>) }
    }

    bb48: {
        _97 = run_test::<[closure@ui/drop/dynamic-drop.rs:492:14: 492:17]>(move _98) -> bb49; // scope 0 at ui/drop/dynamic-drop.rs:492:5: 492:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:492:5: 492:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:492:14: 492:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:492:14: 492:17]>}, val: Value(<ZST>) }
    }

    bb49: {
        _99 = run_test::<[closure@ui/drop/dynamic-drop.rs:493:14: 493:17]>(move _100) -> bb50; // scope 0 at ui/drop/dynamic-drop.rs:493:5: 493:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:493:5: 493:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:493:14: 493:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:493:14: 493:17]>}, val: Value(<ZST>) }
    }

    bb50: {
        _101 = run_test::<[closure@ui/drop/dynamic-drop.rs:494:14: 494:17]>(move _102) -> bb51; // scope 0 at ui/drop/dynamic-drop.rs:494:5: 494:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:494:5: 494:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:494:14: 494:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:494:14: 494:17]>}, val: Value(<ZST>) }
    }

    bb51: {
        _103 = run_test::<[closure@ui/drop/dynamic-drop.rs:495:14: 495:17]>(move _104) -> bb52; // scope 0 at ui/drop/dynamic-drop.rs:495:5: 495:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:495:5: 495:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:495:14: 495:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:495:14: 495:17]>}, val: Value(<ZST>) }
    }

    bb52: {
        _105 = run_test::<[closure@ui/drop/dynamic-drop.rs:496:14: 496:17]>(move _106) -> bb53; // scope 0 at ui/drop/dynamic-drop.rs:496:5: 496:51
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:496:5: 496:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:496:14: 496:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:496:14: 496:17]>}, val: Value(<ZST>) }
    }

    bb53: {
        _107 = run_test::<[closure@ui/drop/dynamic-drop.rs:498:14: 498:17]>(move _108) -> bb54; // scope 0 at ui/drop/dynamic-drop.rs:498:5: 498:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:498:5: 498:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:498:14: 498:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:498:14: 498:17]>}, val: Value(<ZST>) }
    }

    bb54: {
        _109 = run_test::<[closure@ui/drop/dynamic-drop.rs:500:14: 500:17]>(move _110) -> bb55; // scope 0 at ui/drop/dynamic-drop.rs:500:5: 502:7
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:500:5: 500:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:500:14: 500:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:500:14: 500:17]>}, val: Value(<ZST>) }
    }

    bb55: {
        _111 = run_test::<[closure@ui/drop/dynamic-drop.rs:503:14: 503:17]>(move _112) -> bb56; // scope 0 at ui/drop/dynamic-drop.rs:503:5: 505:7
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:503:5: 503:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:503:14: 503:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:503:14: 503:17]>}, val: Value(<ZST>) }
    }

    bb56: {
        _113 = run_test::<[closure@ui/drop/dynamic-drop.rs:506:14: 506:17]>(move _114) -> bb57; // scope 0 at ui/drop/dynamic-drop.rs:506:5: 506:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:506:5: 506:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:506:14: 506:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:506:14: 506:17]>}, val: Value(<ZST>) }
    }

    bb57: {
        _115 = run_test::<[closure@ui/drop/dynamic-drop.rs:507:14: 507:17]>(move _116) -> bb58; // scope 0 at ui/drop/dynamic-drop.rs:507:5: 507:43
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:507:5: 507:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:507:14: 507:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:507:14: 507:17]>}, val: Value(<ZST>) }
    }

    bb58: {
        _117 = run_test::<[closure@ui/drop/dynamic-drop.rs:508:14: 508:17]>(move _118) -> bb59; // scope 0 at ui/drop/dynamic-drop.rs:508:5: 508:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:508:5: 508:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:508:14: 508:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:508:14: 508:17]>}, val: Value(<ZST>) }
    }

    bb59: {
        _119 = run_test::<[closure@ui/drop/dynamic-drop.rs:510:14: 510:17]>(move _120) -> bb60; // scope 0 at ui/drop/dynamic-drop.rs:510:5: 510:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:510:5: 510:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:510:14: 510:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:510:14: 510:17]>}, val: Value(<ZST>) }
    }

    bb60: {
        _121 = run_test::<[closure@ui/drop/dynamic-drop.rs:511:14: 511:17]>(move _122) -> bb61; // scope 0 at ui/drop/dynamic-drop.rs:511:5: 511:64
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:511:5: 511:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:511:14: 511:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:511:14: 511:17]>}, val: Value(<ZST>) }
    }

    bb61: {
        _123 = run_test::<[closure@ui/drop/dynamic-drop.rs:512:14: 512:17]>(move _124) -> bb62; // scope 0 at ui/drop/dynamic-drop.rs:512:5: 512:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:512:5: 512:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:512:14: 512:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:512:14: 512:17]>}, val: Value(<ZST>) }
    }

    bb62: {
        _125 = run_test::<[closure@ui/drop/dynamic-drop.rs:513:14: 513:17]>(move _126) -> bb63; // scope 0 at ui/drop/dynamic-drop.rs:513:5: 513:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:513:5: 513:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:513:14: 513:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:513:14: 513:17]>}, val: Value(<ZST>) }
    }

    bb63: {
        _127 = run_test::<[closure@ui/drop/dynamic-drop.rs:514:14: 514:17]>(move _128) -> bb64; // scope 0 at ui/drop/dynamic-drop.rs:514:5: 514:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:514:5: 514:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:514:14: 514:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:514:14: 514:17]>}, val: Value(<ZST>) }
    }

    bb64: {
        _129 = run_test::<[closure@ui/drop/dynamic-drop.rs:515:14: 515:17]>(move _130) -> bb65; // scope 0 at ui/drop/dynamic-drop.rs:515:5: 515:64
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:515:5: 515:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:515:14: 515:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:515:14: 515:17]>}, val: Value(<ZST>) }
    }

    bb65: {
        _131 = run_test::<[closure@ui/drop/dynamic-drop.rs:516:14: 516:17]>(move _132) -> bb66; // scope 0 at ui/drop/dynamic-drop.rs:516:5: 516:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:516:5: 516:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:516:14: 516:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:516:14: 516:17]>}, val: Value(<ZST>) }
    }

    bb66: {
        _133 = run_test::<[closure@ui/drop/dynamic-drop.rs:517:14: 517:17]>(move _134) -> bb67; // scope 0 at ui/drop/dynamic-drop.rs:517:5: 517:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:517:5: 517:13
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:517:14: 517:17]) {run_test::<[closure@ui/drop/dynamic-drop.rs:517:14: 517:17]>}, val: Value(<ZST>) }
    }

    bb67: {
        _135 = run_test_nopanic::<[closure@ui/drop/dynamic-drop.rs:519:22: 519:25]>(move _136) -> bb68; // scope 0 at ui/drop/dynamic-drop.rs:519:5: 519:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:519:5: 519:21
                                         // + literal: Const { ty: fn([closure@ui/drop/dynamic-drop.rs:519:22: 519:25]) {run_test_nopanic::<[closure@ui/drop/dynamic-drop.rs:519:22: 519:25]>}, val: Value(<ZST>) }
    }

    bb68: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:520:2: 520:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/drop/dynamic-drop.rs:434:14: 434:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:434:15: 434:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:434:18: 434:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:434:31: 434:32

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:434:31: 434:32
        _0 = dynamic_init(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:434:18: 434:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:434:18: 434:30
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {dynamic_init}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:434:40: 434:40
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/drop/dynamic-drop.rs:435:14: 435:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:435:15: 435:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:435:18: 435:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:435:31: 435:32

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:435:31: 435:32
        _0 = dynamic_init(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:435:18: 435:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:435:18: 435:30
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {dynamic_init}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:435:39: 435:39
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/drop/dynamic-drop.rs:436:14: 436:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:436:15: 436:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:436:18: 436:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:436:31: 436:32

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:436:31: 436:32
        _0 = dynamic_drop(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:436:18: 436:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:436:18: 436:30
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:436:40: 436:40
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/drop/dynamic-drop.rs:437:14: 437:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:437:15: 437:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:437:18: 437:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:437:31: 437:32

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:437:31: 437:32
        _0 = dynamic_drop(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:437:18: 437:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:437:18: 437:30
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:437:39: 437:39
    }
}

fn main::{closure#4}(_1: &mut [closure@ui/drop/dynamic-drop.rs:439:14: 439:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:439:15: 439:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:439:18: 439:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:439:30: 439:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:439:30: 439:31
        _0 = assignment2(move _3, const false, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:439:18: 439:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:439:18: 439:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {assignment2}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:439:46: 439:46
    }
}

fn main::{closure#5}(_1: &mut [closure@ui/drop/dynamic-drop.rs:440:14: 440:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:440:15: 440:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:440:18: 440:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:440:30: 440:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:440:30: 440:31
        _0 = assignment2(move _3, const false, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:440:18: 440:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:440:18: 440:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {assignment2}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:440:45: 440:45
    }
}

fn main::{closure#6}(_1: &mut [closure@ui/drop/dynamic-drop.rs:441:14: 441:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:441:15: 441:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:441:18: 441:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:441:30: 441:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:441:30: 441:31
        _0 = assignment2(move _3, const true, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:441:18: 441:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:441:18: 441:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {assignment2}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:441:45: 441:45
    }
}

fn main::{closure#7}(_1: &mut [closure@ui/drop/dynamic-drop.rs:442:14: 442:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:442:15: 442:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:442:18: 442:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:442:30: 442:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:442:30: 442:31
        _0 = assignment2(move _3, const true, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:442:18: 442:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:442:18: 442:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {assignment2}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:442:44: 442:44
    }
}

fn main::{closure#8}(_1: &mut [closure@ui/drop/dynamic-drop.rs:444:14: 444:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:444:15: 444:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:444:18: 444:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:444:30: 444:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:444:30: 444:31
        _0 = assignment1(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:444:18: 444:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:444:18: 444:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {assignment1}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:444:39: 444:39
    }
}

fn main::{closure#9}(_1: &mut [closure@ui/drop/dynamic-drop.rs:445:14: 445:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:445:15: 445:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:445:18: 445:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:445:30: 445:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:445:30: 445:31
        _0 = assignment1(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:445:18: 445:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:445:18: 445:29
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {assignment1}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:445:38: 445:38
    }
}

fn main::{closure#10}(_1: &mut [closure@ui/drop/dynamic-drop.rs:447:14: 447:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:447:15: 447:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:447:18: 447:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:447:31: 447:32

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:447:31: 447:32
        _0 = array_simple(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:447:18: 447:33
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:447:18: 447:30
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {array_simple}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:447:33: 447:33
    }
}

fn main::{closure#11}(_1: &mut [closure@ui/drop/dynamic-drop.rs:448:14: 448:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:448:15: 448:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:448:18: 448:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:448:29: 448:30

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:448:29: 448:30
        _0 = vec_simple(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:448:18: 448:31
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:448:18: 448:28
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {vec_simple}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:448:31: 448:31
    }
}

fn main::{closure#12}(_1: &mut [closure@ui/drop/dynamic-drop.rs:449:14: 449:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:449:15: 449:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:449:18: 449:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:449:34: 449:35

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:449:34: 449:35
        _0 = vec_unreachable(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:449:18: 449:36
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:449:18: 449:33
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {vec_unreachable}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:449:36: 449:36
    }
}

fn main::{closure#13}(_1: &mut [closure@ui/drop/dynamic-drop.rs:451:14: 451:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:451:15: 451:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:451:18: 451:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:451:38: 451:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:451:38: 451:39
        _0 = struct_dynamic_drop(move _3, const false, const false, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:451:18: 451:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:451:18: 451:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:451:61: 451:61
    }
}

fn main::{closure#14}(_1: &mut [closure@ui/drop/dynamic-drop.rs:452:14: 452:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:452:15: 452:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:452:18: 452:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:452:38: 452:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:452:38: 452:39
        _0 = struct_dynamic_drop(move _3, const false, const false, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:452:18: 452:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:452:18: 452:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:452:60: 452:60
    }
}

fn main::{closure#15}(_1: &mut [closure@ui/drop/dynamic-drop.rs:453:14: 453:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:453:15: 453:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:453:18: 453:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:453:38: 453:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:453:38: 453:39
        _0 = struct_dynamic_drop(move _3, const false, const true, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:453:18: 453:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:453:18: 453:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:453:60: 453:60
    }
}

fn main::{closure#16}(_1: &mut [closure@ui/drop/dynamic-drop.rs:454:14: 454:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:454:15: 454:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:454:18: 454:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:454:38: 454:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:454:38: 454:39
        _0 = struct_dynamic_drop(move _3, const false, const true, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:454:18: 454:59
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:454:18: 454:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:454:59: 454:59
    }
}

fn main::{closure#17}(_1: &mut [closure@ui/drop/dynamic-drop.rs:455:14: 455:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:455:15: 455:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:455:18: 455:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:455:38: 455:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:455:38: 455:39
        _0 = struct_dynamic_drop(move _3, const true, const false, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:455:18: 455:60
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:455:18: 455:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:455:60: 455:60
    }
}

fn main::{closure#18}(_1: &mut [closure@ui/drop/dynamic-drop.rs:456:14: 456:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:456:15: 456:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:456:18: 456:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:456:38: 456:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:456:38: 456:39
        _0 = struct_dynamic_drop(move _3, const true, const false, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:456:18: 456:59
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:456:18: 456:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:456:59: 456:59
    }
}

fn main::{closure#19}(_1: &mut [closure@ui/drop/dynamic-drop.rs:457:14: 457:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:457:15: 457:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:457:18: 457:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:457:38: 457:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:457:38: 457:39
        _0 = struct_dynamic_drop(move _3, const true, const true, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:457:18: 457:59
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:457:18: 457:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:457:59: 457:59
    }
}

fn main::{closure#20}(_1: &mut [closure@ui/drop/dynamic-drop.rs:458:14: 458:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:458:15: 458:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:458:18: 458:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:458:38: 458:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:458:38: 458:39
        _0 = struct_dynamic_drop(move _3, const true, const true, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:458:18: 458:58
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:458:18: 458:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool, bool) {struct_dynamic_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:458:58: 458:58
    }
}

fn main::{closure#21}(_1: &mut [closure@ui/drop/dynamic-drop.rs:460:14: 460:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:460:15: 460:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:460:18: 460:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:460:35: 460:36

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:460:35: 460:36
        _0 = field_assignment(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:460:18: 460:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:460:18: 460:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {field_assignment}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:460:44: 460:44
    }
}

fn main::{closure#22}(_1: &mut [closure@ui/drop/dynamic-drop.rs:461:14: 461:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:461:15: 461:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:461:18: 461:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:461:35: 461:36

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:461:35: 461:36
        _0 = field_assignment(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:461:18: 461:43
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:461:18: 461:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {field_assignment}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:461:43: 461:43
    }
}

fn main::{closure#23}(_1: &mut [closure@ui/drop/dynamic-drop.rs:463:14: 463:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:463:15: 463:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:463:18: 463:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:463:28: 463:29

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:463:28: 463:29
        _0 = generator(move _3, const 0_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:463:18: 463:33
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:463:18: 463:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {generator}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:463:33: 463:33
    }
}

fn main::{closure#24}(_1: &mut [closure@ui/drop/dynamic-drop.rs:464:14: 464:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:464:15: 464:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:464:18: 464:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:464:28: 464:29

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:464:28: 464:29
        _0 = generator(move _3, const 1_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:464:18: 464:33
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:464:18: 464:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {generator}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:464:33: 464:33
    }
}

fn main::{closure#25}(_1: &mut [closure@ui/drop/dynamic-drop.rs:465:14: 465:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:465:15: 465:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:465:18: 465:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:465:28: 465:29

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:465:28: 465:29
        _0 = generator(move _3, const 2_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:465:18: 465:33
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:465:18: 465:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {generator}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:465:33: 465:33
    }
}

fn main::{closure#26}(_1: &mut [closure@ui/drop/dynamic-drop.rs:466:14: 466:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:466:15: 466:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:466:18: 466:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:466:28: 466:29

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:466:28: 466:29
        _0 = generator(move _3, const 3_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:466:18: 466:33
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:466:18: 466:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {generator}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:466:33: 466:33
    }
}

fn main::{closure#27}(_1: &mut [closure@ui/drop/dynamic-drop.rs:468:14: 468:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:468:15: 468:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:468:18: 468:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:468:41: 468:42

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:468:41: 468:42
        _0 = mixed_drop_and_nondrop(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:468:18: 468:43
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:468:18: 468:40
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {mixed_drop_and_nondrop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:468:43: 468:43
    }
}

fn main::{closure#28}(_1: &mut [closure@ui/drop/dynamic-drop.rs:470:14: 470:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:470:15: 470:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:470:18: 470:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:470:38: 470:39

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:470:38: 470:39
        _0 = slice_pattern_first(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:470:18: 470:40
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:470:18: 470:37
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {slice_pattern_first}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:470:40: 470:40
    }
}

fn main::{closure#29}(_1: &mut [closure@ui/drop/dynamic-drop.rs:471:14: 471:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:471:15: 471:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:471:18: 471:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:471:39: 471:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:471:39: 471:40
        _0 = slice_pattern_middle(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:471:18: 471:41
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:471:18: 471:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {slice_pattern_middle}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:471:41: 471:41
    }
}

fn main::{closure#30}(_1: &mut [closure@ui/drop/dynamic-drop.rs:472:14: 472:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:472:15: 472:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:472:18: 472:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:472:36: 472:37

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:472:36: 472:37
        _0 = slice_pattern_two(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:472:18: 472:38
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:472:18: 472:35
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {slice_pattern_two}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:472:38: 472:38
    }
}

fn main::{closure#31}(_1: &mut [closure@ui/drop/dynamic-drop.rs:473:14: 473:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:473:15: 473:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:473:18: 473:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:473:37: 473:38

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:473:37: 473:38
        _0 = slice_pattern_last(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:473:18: 473:39
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:473:18: 473:36
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {slice_pattern_last}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:473:39: 473:39
    }
}

fn main::{closure#32}(_1: &mut [closure@ui/drop/dynamic-drop.rs:474:14: 474:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:474:15: 474:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:474:18: 474:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:474:39: 474:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:474:39: 474:40
        _0 = slice_pattern_one_of(move _3, const 0_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:474:18: 474:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:474:18: 474:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {slice_pattern_one_of}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:474:44: 474:44
    }
}

fn main::{closure#33}(_1: &mut [closure@ui/drop/dynamic-drop.rs:475:14: 475:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:475:15: 475:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:475:18: 475:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:475:39: 475:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:475:39: 475:40
        _0 = slice_pattern_one_of(move _3, const 1_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:475:18: 475:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:475:18: 475:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {slice_pattern_one_of}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:475:44: 475:44
    }
}

fn main::{closure#34}(_1: &mut [closure@ui/drop/dynamic-drop.rs:476:14: 476:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:476:15: 476:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:476:18: 476:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:476:39: 476:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:476:39: 476:40
        _0 = slice_pattern_one_of(move _3, const 2_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:476:18: 476:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:476:18: 476:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {slice_pattern_one_of}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:476:44: 476:44
    }
}

fn main::{closure#35}(_1: &mut [closure@ui/drop/dynamic-drop.rs:477:14: 477:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:477:15: 477:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:477:18: 477:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:477:39: 477:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:477:39: 477:40
        _0 = slice_pattern_one_of(move _3, const 3_usize) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:477:18: 477:44
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:477:18: 477:38
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, usize) {slice_pattern_one_of}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:477:44: 477:44
    }
}

fn main::{closure#36}(_1: &mut [closure@ui/drop/dynamic-drop.rs:479:14: 479:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:479:15: 479:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:479:18: 479:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:479:44: 479:45

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:479:44: 479:45
        _0 = subslice_pattern_from_end(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:479:18: 479:52
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:479:18: 479:43
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {subslice_pattern_from_end}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:479:52: 479:52
    }
}

fn main::{closure#37}(_1: &mut [closure@ui/drop/dynamic-drop.rs:480:14: 480:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:480:15: 480:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:480:18: 480:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:480:44: 480:45

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:480:44: 480:45
        _0 = subslice_pattern_from_end(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:480:18: 480:53
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:480:18: 480:43
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {subslice_pattern_from_end}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:480:53: 480:53
    }
}

fn main::{closure#38}(_1: &mut [closure@ui/drop/dynamic-drop.rs:481:14: 481:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:481:15: 481:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:481:18: 481:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:481:54: 481:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:481:54: 481:55
        _0 = subslice_pattern_from_end_with_drop(move _3, const true, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:481:18: 481:68
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:481:18: 481:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {subslice_pattern_from_end_with_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:481:68: 481:68
    }
}

fn main::{closure#39}(_1: &mut [closure@ui/drop/dynamic-drop.rs:482:14: 482:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:482:15: 482:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:482:18: 482:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:482:54: 482:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:482:54: 482:55
        _0 = subslice_pattern_from_end_with_drop(move _3, const true, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:482:18: 482:69
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:482:18: 482:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {subslice_pattern_from_end_with_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:482:69: 482:69
    }
}

fn main::{closure#40}(_1: &mut [closure@ui/drop/dynamic-drop.rs:483:14: 483:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:483:15: 483:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:483:18: 483:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:483:54: 483:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:483:54: 483:55
        _0 = subslice_pattern_from_end_with_drop(move _3, const false, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:483:18: 483:69
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:483:18: 483:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {subslice_pattern_from_end_with_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:483:69: 483:69
    }
}

fn main::{closure#41}(_1: &mut [closure@ui/drop/dynamic-drop.rs:484:14: 484:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:484:15: 484:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:484:18: 484:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:484:54: 484:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:484:54: 484:55
        _0 = subslice_pattern_from_end_with_drop(move _3, const false, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:484:18: 484:70
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:484:18: 484:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool, bool) {subslice_pattern_from_end_with_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:484:70: 484:70
    }
}

fn main::{closure#42}(_1: &mut [closure@ui/drop/dynamic-drop.rs:485:14: 485:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:485:15: 485:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:485:18: 485:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:485:41: 485:42

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:485:41: 485:42
        _0 = slice_pattern_reassign(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:485:18: 485:43
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:485:18: 485:40
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {slice_pattern_reassign}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:485:43: 485:43
    }
}

fn main::{closure#43}(_1: &mut [closure@ui/drop/dynamic-drop.rs:486:14: 486:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:486:15: 486:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:486:18: 486:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:486:44: 486:45

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:486:44: 486:45
        _0 = subslice_pattern_reassign(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:486:18: 486:46
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:486:18: 486:43
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {subslice_pattern_reassign}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:486:46: 486:46
    }
}

fn main::{closure#44}(_1: &mut [closure@ui/drop/dynamic-drop.rs:488:14: 488:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:488:15: 488:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:488:18: 488:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:488:41: 488:42

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:488:41: 488:42
        _0 = index_field_mixed_ends(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:488:18: 488:43
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:488:18: 488:40
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {index_field_mixed_ends}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:488:43: 488:43
    }
}

fn main::{closure#45}(_1: &mut [closure@ui/drop/dynamic-drop.rs:489:14: 489:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:489:15: 489:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:489:18: 489:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:489:45: 489:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:489:45: 489:46
        _0 = subslice_mixed_min_lengths(move _3, const 0_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:489:18: 489:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:489:18: 489:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:489:50: 489:50
    }
}

fn main::{closure#46}(_1: &mut [closure@ui/drop/dynamic-drop.rs:490:14: 490:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:490:15: 490:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:490:18: 490:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:490:45: 490:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:490:45: 490:46
        _0 = subslice_mixed_min_lengths(move _3, const 1_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:490:18: 490:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:490:18: 490:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:490:50: 490:50
    }
}

fn main::{closure#47}(_1: &mut [closure@ui/drop/dynamic-drop.rs:491:14: 491:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:491:15: 491:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:491:18: 491:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:491:45: 491:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:491:45: 491:46
        _0 = subslice_mixed_min_lengths(move _3, const 2_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:491:18: 491:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:491:18: 491:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:491:50: 491:50
    }
}

fn main::{closure#48}(_1: &mut [closure@ui/drop/dynamic-drop.rs:492:14: 492:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:492:15: 492:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:492:18: 492:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:492:45: 492:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:492:45: 492:46
        _0 = subslice_mixed_min_lengths(move _3, const 3_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:492:18: 492:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:492:18: 492:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:492:50: 492:50
    }
}

fn main::{closure#49}(_1: &mut [closure@ui/drop/dynamic-drop.rs:493:14: 493:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:493:15: 493:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:493:18: 493:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:493:45: 493:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:493:45: 493:46
        _0 = subslice_mixed_min_lengths(move _3, const 4_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:493:18: 493:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:493:18: 493:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:493:50: 493:50
    }
}

fn main::{closure#50}(_1: &mut [closure@ui/drop/dynamic-drop.rs:494:14: 494:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:494:15: 494:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:494:18: 494:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:494:45: 494:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:494:45: 494:46
        _0 = subslice_mixed_min_lengths(move _3, const 5_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:494:18: 494:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:494:18: 494:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:494:50: 494:50
    }
}

fn main::{closure#51}(_1: &mut [closure@ui/drop/dynamic-drop.rs:495:14: 495:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:495:15: 495:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:495:18: 495:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:495:45: 495:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:495:45: 495:46
        _0 = subslice_mixed_min_lengths(move _3, const 6_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:495:18: 495:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:495:18: 495:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:495:50: 495:50
    }
}

fn main::{closure#52}(_1: &mut [closure@ui/drop/dynamic-drop.rs:496:14: 496:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:496:15: 496:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:496:18: 496:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:496:45: 496:46

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:496:45: 496:46
        _0 = subslice_mixed_min_lengths(move _3, const 7_i32) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:496:18: 496:50
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:496:18: 496:44
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, i32) {subslice_mixed_min_lengths}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:496:50: 496:50
    }
}

fn main::{closure#53}(_1: &mut [closure@ui/drop/dynamic-drop.rs:498:14: 498:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:498:15: 498:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:498:18: 498:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:498:35: 498:36

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:498:35: 498:36
        _0 = move_ref_pattern(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:498:18: 498:37
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:498:18: 498:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {move_ref_pattern}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:498:37: 498:37
    }
}

fn main::{closure#54}(_1: &mut [closure@ui/drop/dynamic-drop.rs:500:14: 500:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:500:15: 500:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:500:18: 500:18
    let _3: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:501:9: 501:30
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:501:28: 501:29

    bb0: {
        _4 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:501:28: 501:29
        _3 = panic_after_return(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:501:9: 501:30
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:501:9: 501:27
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {panic_after_return}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/drop/dynamic-drop.rs:501:30: 501:31
    }

    bb2: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:502:6: 502:6
    }
}

fn main::{closure#55}(_1: &mut [closure@ui/drop/dynamic-drop.rs:503:14: 503:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:503:15: 503:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:503:18: 503:18
    let _3: Ptr<'_>;                     // in scope 0 at ui/drop/dynamic-drop.rs:504:9: 504:35
    let mut _4: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:504:33: 504:34

    bb0: {
        _4 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:504:33: 504:34
        _3 = panic_after_return_expr(move _4) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:504:9: 504:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:504:9: 504:32
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) -> Ptr<'a> {panic_after_return_expr}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/drop/dynamic-drop.rs:504:35: 504:36
    }

    bb2: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:505:6: 505:6
    }
}

fn main::{closure#56}(_1: &mut [closure@ui/drop/dynamic-drop.rs:506:14: 506:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:506:15: 506:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:506:18: 506:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:506:35: 506:36

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:506:35: 506:36
        _0 = panic_after_init(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:506:18: 506:37
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:506:18: 506:34
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {panic_after_init}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:506:37: 506:37
    }
}

fn main::{closure#57}(_1: &mut [closure@ui/drop/dynamic-drop.rs:507:14: 507:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:507:15: 507:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:507:18: 507:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:507:40: 507:41

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:507:40: 507:41
        _0 = panic_after_init_temp(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:507:18: 507:42
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:507:18: 507:39
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {panic_after_init_temp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:507:42: 507:42
    }
}

fn main::{closure#58}(_1: &mut [closure@ui/drop/dynamic-drop.rs:508:14: 508:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:508:15: 508:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:508:18: 508:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:508:43: 508:44

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:508:43: 508:44
        _0 = panic_after_init_by_loop(move _3) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:508:18: 508:45
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:508:18: 508:42
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {panic_after_init_by_loop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:508:45: 508:45
    }
}

fn main::{closure#59}(_1: &mut [closure@ui/drop/dynamic-drop.rs:510:14: 510:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:510:15: 510:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:510:18: 510:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:510:54: 510:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:510:54: 510:55
        _0 = bindings_after_at_dynamic_init_move(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:510:18: 510:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:510:18: 510:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_init_move}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:510:62: 510:62
    }
}

fn main::{closure#60}(_1: &mut [closure@ui/drop/dynamic-drop.rs:511:14: 511:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:511:15: 511:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:511:18: 511:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:511:54: 511:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:511:54: 511:55
        _0 = bindings_after_at_dynamic_init_move(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:511:18: 511:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:511:18: 511:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_init_move}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:511:63: 511:63
    }
}

fn main::{closure#61}(_1: &mut [closure@ui/drop/dynamic-drop.rs:512:14: 512:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:512:15: 512:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:512:18: 512:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:512:53: 512:54

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:512:53: 512:54
        _0 = bindings_after_at_dynamic_init_ref(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:512:18: 512:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:512:18: 512:52
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_init_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:512:61: 512:61
    }
}

fn main::{closure#62}(_1: &mut [closure@ui/drop/dynamic-drop.rs:513:14: 513:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:513:15: 513:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:513:18: 513:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:513:53: 513:54

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:513:53: 513:54
        _0 = bindings_after_at_dynamic_init_ref(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:513:18: 513:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:513:18: 513:52
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_init_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:513:62: 513:62
    }
}

fn main::{closure#63}(_1: &mut [closure@ui/drop/dynamic-drop.rs:514:14: 514:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:514:15: 514:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:514:18: 514:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:514:54: 514:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:514:54: 514:55
        _0 = bindings_after_at_dynamic_drop_move(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:514:18: 514:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:514:18: 514:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_drop_move}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:514:62: 514:62
    }
}

fn main::{closure#64}(_1: &mut [closure@ui/drop/dynamic-drop.rs:515:14: 515:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:515:15: 515:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:515:18: 515:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:515:54: 515:55

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:515:54: 515:55
        _0 = bindings_after_at_dynamic_drop_move(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:515:18: 515:63
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:515:18: 515:53
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_drop_move}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:515:63: 515:63
    }
}

fn main::{closure#65}(_1: &mut [closure@ui/drop/dynamic-drop.rs:516:14: 516:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:516:15: 516:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:516:18: 516:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:516:53: 516:54

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:516:53: 516:54
        _0 = bindings_after_at_dynamic_drop_ref(move _3, const true) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:516:18: 516:61
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:516:18: 516:52
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_drop_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:516:61: 516:61
    }
}

fn main::{closure#66}(_1: &mut [closure@ui/drop/dynamic-drop.rs:517:14: 517:17], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:517:15: 517:16
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:517:18: 517:18
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:517:53: 517:54

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:517:53: 517:54
        _0 = bindings_after_at_dynamic_drop_ref(move _3, const false) -> bb1; // scope 0 at ui/drop/dynamic-drop.rs:517:18: 517:62
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:517:18: 517:52
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator, bool) {bindings_after_at_dynamic_drop_ref}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:517:62: 517:62
    }
}

fn main::{closure#67}(_1: &mut [closure@ui/drop/dynamic-drop.rs:519:22: 519:25], _2: &Allocator) -> () {
    debug a => _2;                       // in scope 0 at ui/drop/dynamic-drop.rs:519:23: 519:24
    let mut _0: ();                      // return place in scope 0 at ui/drop/dynamic-drop.rs:519:26: 519:26
    let mut _3: &Allocator;              // in scope 0 at ui/drop/dynamic-drop.rs:519:33: 519:34

    bb0: {
        _3 = _2;                         // scope 0 at ui/drop/dynamic-drop.rs:519:33: 519:34
        _0 = union1(move _3) -> bb1;     // scope 0 at ui/drop/dynamic-drop.rs:519:26: 519:35
                                         // mir::Constant
                                         // + span: ui/drop/dynamic-drop.rs:519:26: 519:32
                                         // + literal: Const { ty: for<'a> fn(&'a Allocator) {union1}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:519:35: 519:35
    }
}

fn Ptr(_1: usize, _2: &Allocator) -> Ptr<'_> {
    let mut _0: Ptr<'_>;                 // return place in scope 0 at ui/drop/dynamic-drop.rs:71:1: 71:15

    bb0: {
        _0 = Ptr::<'_>(move _1, move _2); // scope 0 at ui/drop/dynamic-drop.rs:71:1: 71:15
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:71:1: 71:15
    }
}

// MIR FOR CTFE
fn Ptr(_1: usize, _2: &Allocator) -> Ptr<'_> {
    let mut _0: Ptr<'_>;                 // return place in scope 0 at ui/drop/dynamic-drop.rs:71:1: 71:15

    bb0: {
        _0 = Ptr::<'_>(move _1, move _2); // scope 0 at ui/drop/dynamic-drop.rs:71:1: 71:15
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:71:1: 71:15
    }
}

fn TwoPtrs(_1: Ptr<'_>, _2: Ptr<'_>) -> TwoPtrs<'_> {
    let mut _0: TwoPtrs<'_>;             // return place in scope 0 at ui/drop/dynamic-drop.rs:105:1: 105:19

    bb0: {
        _0 = TwoPtrs::<'_>(move _1, move _2); // scope 0 at ui/drop/dynamic-drop.rs:105:1: 105:19
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:105:1: 105:19
    }
}

// MIR FOR CTFE
fn TwoPtrs(_1: Ptr<'_>, _2: Ptr<'_>) -> TwoPtrs<'_> {
    let mut _0: TwoPtrs<'_>;             // return place in scope 0 at ui/drop/dynamic-drop.rs:105:1: 105:19

    bb0: {
        _0 = TwoPtrs::<'_>(move _1, move _2); // scope 0 at ui/drop/dynamic-drop.rs:105:1: 105:19
        return;                          // scope 0 at ui/drop/dynamic-drop.rs:105:1: 105:19
    }
}
