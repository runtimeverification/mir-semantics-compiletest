// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn start(_1: isize, _2: *const *const u8) -> isize {
    debug _argc => _1;                   // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:11:10: 11:15
    debug _argv => _2;                   // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:11:24: 11:29
    let mut _0: isize;                   // return place in scope 0 at ui/for-loop-while/for-loop-no-std.rs:11:52: 11:57
    let mut _3: core::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _4: core::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _5: &[i32];                  // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _6: &[i32; 3];               // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _7: core::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _8: core::option::Option<&i32>; // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _9: &mut core::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _10: &mut core::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _11: isize;                  // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:5: 12:32
    let mut _12: &[i32; 3];              // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    scope 1 {
        debug iter => _7;                // in scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    }

    bb0: {
        _12 = const _;                   // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(start, [], Some(promoted[0])) }
        _6 = _12;                        // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        _5 = move _6 as &[i32] (Pointer(Unsize)); // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        _4 = core::slice::<impl [i32]>::iter(move _5) -> bb1; // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-no-std.rs:12:22: 12:26
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> core::slice::Iter<'a, i32> {core::slice::<impl [i32]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <core::slice::Iter<'_, i32> as IntoIterator>::into_iter(move _4) -> bb2; // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // + literal: Const { ty: fn(core::slice::Iter<'_, i32>) -> <core::slice::Iter<'_, i32> as IntoIterator>::IntoIter {<core::slice::Iter<'_, i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = move _3;                    // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        goto -> bb3;                     // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:5: 12:32
    }

    bb3: {
        _10 = &mut _7;                   // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        _9 = &mut (*_10);                // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        _8 = <core::slice::Iter<'_, i32> as Iterator>::next(move _9) -> bb4; // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut core::slice::Iter<'_, i32>) -> Option<<core::slice::Iter<'_, i32> as Iterator>::Item> {<core::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = discriminant(_8);          // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        switchInt(move _11) -> [0: bb6, 1: bb3, otherwise: bb5]; // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    }

    bb5: {
        unreachable;                     // scope 1 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    }

    bb6: {
        _0 = const 0_isize;              // scope 0 at ui/for-loop-while/for-loop-no-std.rs:13:5: 13:6
        return;                          // scope 0 at ui/for-loop-while/for-loop-no-std.rs:14:2: 14:2
    }
}

promoted[0] in start: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    let mut _1: [i32; 3];                // in scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:21

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:21
        _0 = &_1;                        // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
        return;                          // scope 0 at ui/for-loop-while/for-loop-no-std.rs:12:14: 12:28
    }
}
