// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19>::eq(_1: &t, _2: &t) -> bool {
    debug self => _1;                    // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    debug other => _2;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _0: bool;                    // return place in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let _3: isize;                       // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _4: &t;                      // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _6: &t;                      // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _7: bool;                    // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _8: isize;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _9: isize;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _10: bool;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _11: (&t, &t);               // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _12: &t;                     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _13: &t;                     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _14: isize;                  // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _15: isize;                  // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _18: &std::string::String;   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
    let mut _19: &std::string::String;   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
    let mut _20: &t;                     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _21: &t;                     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _22: &t;                     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    let mut _23: &t;                     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        let _5: isize;                   // in scope 1 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
            let _16: &std::string::String; // in scope 2 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
            let _17: &std::string::String; // in scope 2 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
                debug __arg1_0 => _17;   // in scope 3 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _3 = discriminant((*_4));        // scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _6 = _2;                         // scope 1 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _5 = discriminant((*_6));        // scope 1 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _8 = _3;                         // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _9 = _5;                         // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        goto -> bb3;                     // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _13 = _2;                        // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _11 = (move _12, move _13);      // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _20 = deref_copy (_11.0: &t);    // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _15 = discriminant((*_20));      // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        switchInt(move _15) -> [1: bb5, otherwise: bb4]; // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    }

    bb3: {
        return;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:6:19: 6:19
    }

    bb4: {
        _10 = const true;                // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        goto -> bb7;                     // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    }

    bb5: {
        _21 = deref_copy (_11.1: &t);    // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        _14 = discriminant((*_21));      // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        switchInt(move _14) -> [1: bb6, otherwise: bb4]; // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    }

    bb6: {
        _22 = deref_copy (_11.0: &t);    // scope 2 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
        _16 = &(((*_22) as b).0: std::string::String); // scope 2 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
        _23 = deref_copy (_11.1: &t);    // scope 2 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
        _17 = &(((*_23) as b).0: std::string::String); // scope 2 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
        _18 = _16;                       // scope 3 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
        _19 = _17;                       // scope 3 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
        _10 = <String as PartialEq>::eq(move _18, move _19) -> bb7; // scope 3 at ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:7:15: 7:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
        goto -> bb3;                     // scope 2 at ui/for-loop-while/while-prelude-drop.rs:6:10: 6:19
    }
}

fn make(_1: isize) -> t {
    debug i => _1;                       // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:9:9: 9:10
    let mut _0: t;                       // return place in scope 0 at ui/for-loop-while/while-prelude-drop.rs:9:22: 9:23
    let mut _2: bool;                    // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:10:8: 10:14
    let mut _3: isize;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:10:8: 10:9
    let mut _4: std::string::String;     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:11:9: 11:14
    let _5: ();                          // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:14:5: 14:24
    let mut _6: &mut std::string::String; // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:14:5: 14:24
    let mut _7: &str;                    // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:14:16: 14:23
    let _8: &str;                        // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:14:16: 14:23
    let mut _9: std::string::String;     // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:15:17: 15:18
    scope 1 {
        debug s => _4;                   // in scope 1 at ui/for-loop-while/while-prelude-drop.rs:11:9: 11:14
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/for-loop-while/while-prelude-drop.rs:10:8: 10:9
        _2 = Gt(move _3, const 10_isize); // scope 0 at ui/for-loop-while/while-prelude-drop.rs:10:8: 10:14
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/for-loop-while/while-prelude-drop.rs:10:8: 10:14
    }

    bb1: {
        _0 = t::a;                       // scope 0 at ui/for-loop-while/while-prelude-drop.rs:10:24: 10:28
        goto -> bb5;                     // scope 0 at no-location
    }

    bb2: {
        _4 = <String as From<&str>>::from(const "hello") -> bb3; // scope 0 at ui/for-loop-while/while-prelude-drop.rs:11:17: 11:38
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:11:17: 11:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:11:30: 11:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _6 = &mut _4;                    // scope 1 at ui/for-loop-while/while-prelude-drop.rs:14:5: 14:24
        _8 = const "there";              // scope 1 at ui/for-loop-while/while-prelude-drop.rs:14:16: 14:23
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:14:16: 14:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/for-loop-while/while-prelude-drop.rs:14:16: 14:23
        _5 = String::push_str(move _6, move _7) -> [return: bb4, unwind: bb6]; // scope 1 at ui/for-loop-while/while-prelude-drop.rs:14:5: 14:24
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:14:7: 14:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = move _4;                    // scope 1 at ui/for-loop-while/while-prelude-drop.rs:15:17: 15:18
        _0 = t::b(move _9);              // scope 1 at ui/for-loop-while/while-prelude-drop.rs:15:12: 15:19
        goto -> bb5;                     // scope 0 at no-location
    }

    bb5: {
        return;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:16:2: 16:2
    }

    bb6 (cleanup): {
        drop(_4) -> bb7;                 // scope 0 at ui/for-loop-while/while-prelude-drop.rs:16:1: 16:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:9:1: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/while-prelude-drop.rs:18:15: 18:15
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:19:9: 19:14
    let mut _2: bool;                    // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:26
    let mut _3: &t;                      // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:18
    let _4: t;                           // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:18
    let mut _5: isize;                   // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:16: 23:17
    let mut _6: &t;                      // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
    let mut _7: (isize, bool);           // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:29: 23:35
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/for-loop-while/while-prelude-drop.rs:19:9: 19:14
        let mut _8: &t;                  // in scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
    }

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/for-loop-while/while-prelude-drop.rs:19:17: 19:18
        goto -> bb1;                     // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:5: 23:38
    }

    bb1: {
        _5 = _1;                         // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:16: 23:17
        _4 = make(move _5) -> bb2;       // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:23:11: 23:15
                                         // + literal: Const { ty: fn(isize) -> t {make}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:18
        _8 = const _;                    // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
                                         // + literal: Const { ty: &t, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _8;                         // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
        _2 = <t as PartialEq>::ne(move _3, move _6) -> [return: bb3, unwind: bb8]; // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-prelude-drop.rs:23:11: 23:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a t, &'b t) -> bool {<t as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:25: 23:26
    }

    bb4: {
        switchInt(move _2) -> [0: bb7, otherwise: bb5]; // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:11: 23:26
    }

    bb5: {
        _7 = CheckedAdd(_1, const 1_isize); // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:29: 23:35
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_isize) -> bb6; // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:29: 23:35
    }

    bb6: {
        _1 = move (_7.0: isize);         // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:29: 23:35
        goto -> bb1;                     // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:5: 23:38
    }

    bb7: {
        return;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:24:2: 24:2
    }

    bb8 (cleanup): {
        drop(_4) -> bb9;                 // scope 1 at ui/for-loop-while/while-prelude-drop.rs:23:25: 23:26
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:18:1: 24:2
    }
}

promoted[0] in main: &t = {
    let mut _0: &t;                      // return place in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
    let mut _1: t;                       // in scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26

    bb0: {
        _1 = t::a;                       // scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
        _0 = &_1;                        // scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
        return;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:23:22: 23:26
    }
}

fn t::b(_1: String) -> t {
    let mut _0: t;                       // return place in scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:13: 7:14

    bb0: {
        _0 = t::b(move _1);              // scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:13: 7:14
        return;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:13: 7:14
    }
}

// MIR FOR CTFE
fn t::b(_1: String) -> t {
    let mut _0: t;                       // return place in scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:13: 7:14

    bb0: {
        _0 = t::b(move _1);              // scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:13: 7:14
        return;                          // scope 0 at ui/for-loop-while/while-prelude-drop.rs:7:13: 7:14
    }
}
