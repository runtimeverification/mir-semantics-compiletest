// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn two(_1: F) -> () {
    debug it => _1;                      // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:11: 4:17
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-nested.rs:4:22: 4:22
    let _2: ();                          // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:46: 4:51
    let mut _3: &mut F;                  // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:46: 4:48
    let mut _4: (isize,);                // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:46: 4:51
    let _5: ();                          // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:53: 4:58
    let mut _6: &mut F;                  // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:53: 4:55
    let mut _7: (isize,);                // in scope 0 at ui/for-loop-while/foreach-nested.rs:4:53: 4:58

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/for-loop-while/foreach-nested.rs:4:46: 4:48
        _4 = const (0_isize,);           // scope 0 at ui/for-loop-while/foreach-nested.rs:4:46: 4:51
        _2 = <F as FnMut<(isize,)>>::call_mut(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/for-loop-while/foreach-nested.rs:4:46: 4:51
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:4:46: 4:48
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (isize,)) -> <F as FnOnce<(isize,)>>::Output {<F as FnMut<(isize,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut _1;                    // scope 0 at ui/for-loop-while/foreach-nested.rs:4:53: 4:55
        _7 = const (1_isize,);           // scope 0 at ui/for-loop-while/foreach-nested.rs:4:53: 4:58
        _5 = <F as FnMut<(isize,)>>::call_mut(move _6, move _7) -> [return: bb2, unwind: bb4]; // scope 0 at ui/for-loop-while/foreach-nested.rs:4:53: 4:58
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:4:53: 4:55
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (isize,)) -> <F as FnOnce<(isize,)>>::Output {<F as FnMut<(isize,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/for-loop-while/foreach-nested.rs:4:60: 4:61
    }

    bb3: {
        return;                          // scope 0 at ui/for-loop-while/foreach-nested.rs:4:61: 4:61
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/for-loop-while/foreach-nested.rs:4:60: 4:61
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/foreach-nested.rs:4:1: 4:61
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-nested.rs:6:15: 6:15
    let mut _1: std::vec::Vec<isize>;    // in scope 0 at ui/for-loop-while/foreach-nested.rs:7:9: 7:14
    let mut _2: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[isize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[isize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: ();                          // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:5: 11:7
    let mut _10: [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12]; // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
    let mut _11: &mut std::vec::Vec<isize>; // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
    let mut _12: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
    let mut _13: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _15: &isize;                     // in scope 0 at ui/for-loop-while/foreach-nested.rs:12:16: 12:20
    let mut _16: &std::vec::Vec<isize>;  // in scope 0 at ui/for-loop-while/foreach-nested.rs:12:16: 12:17
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: &isize;                     // in scope 0 at ui/for-loop-while/foreach-nested.rs:13:16: 13:20
    let mut _35: &std::vec::Vec<isize>;  // in scope 0 at ui/for-loop-while/foreach-nested.rs:13:16: 13:17
    let mut _36: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _53: &isize;                     // in scope 0 at ui/for-loop-while/foreach-nested.rs:14:16: 14:20
    let mut _54: &std::vec::Vec<isize>;  // in scope 0 at ui/for-loop-while/foreach-nested.rs:14:16: 14:17
    let mut _55: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _70: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _71: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _72: &isize;                     // in scope 0 at ui/for-loop-while/foreach-nested.rs:15:16: 15:20
    let mut _73: &std::vec::Vec<isize>;  // in scope 0 at ui/for-loop-while/foreach-nested.rs:15:16: 15:17
    let mut _74: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _77: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _78: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _79: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _80: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _82: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _83: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _84: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _85: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _86: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _87: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _93: *const [isize; 4];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/for-loop-while/foreach-nested.rs:7:9: 7:14
        let mut _8: isize;               // in scope 1 at ui/for-loop-while/foreach-nested.rs:8:9: 8:14
        scope 3 {
            debug p => _8;               // in scope 3 at ui/for-loop-while/foreach-nested.rs:8:9: 8:14
            let _18: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _19: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _37: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _38: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _56: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _57: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _75: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _76: &isize;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _89: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _90: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _91: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _92: &isize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 4 {
                debug left_val => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _19;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _24: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _24;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 6 {
                debug left_val => _37;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _38;  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _43: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 7 {
                    debug kind => _43;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 8 {
                debug left_val => _56;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _57;  // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _62: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 9 {
                    debug kind => _62;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 10 {
                debug left_val => _75;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _76;  // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _81: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 11 {
                    debug kind => _81;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 32_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [isize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _93 = (((_7.0: std::ptr::Unique<[isize; 4]>).0: std::ptr::NonNull<[isize; 4]>).0: *const [isize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_93) = [const -1_isize, const -1_isize, const -1_isize, const -1_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const 0_isize;              // scope 1 at ui/for-loop-while/foreach-nested.rs:8:24: 8:25
        _11 = &mut _1;                   // scope 3 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
        _12 = &mut _8;                   // scope 3 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
        _10 = [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12] { a: move _11, p: move _12 }; // scope 3 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
                                         // closure
                                         // + def_id: DefId(0:6 ~ foreach_nested[fb62]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((isize,)),
                                         //     (&mut std::vec::Vec<isize>, &mut isize),
                                         // ]
        _9 = two::<[closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12]>(move _10) -> [return: bb3, unwind: bb17]; // scope 3 at ui/for-loop-while/foreach-nested.rs:9:5: 11:7
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:9:5: 9:8
                                         // + literal: Const { ty: fn([closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12]) {two::<[closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12]>}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = &_1;                       // scope 3 at ui/for-loop-while/foreach-nested.rs:12:16: 12:17
        _15 = <Vec<isize> as Index<usize>>::index(move _16, const 0_usize) -> [return: bb4, unwind: bb17]; // scope 3 at ui/for-loop-while/foreach-nested.rs:12:16: 12:20
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:12:16: 12:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _92 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[3])) }
        _17 = _92;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _17);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_13.0: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_13.1: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = (*_18);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = const 0_isize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = Eq(move _22, move _23);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _20 = Not(move _21);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<isize, isize>(move _26, move _27, move _29, move _31) -> bb17; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb6: {
        _35 = &_1;                       // scope 3 at ui/for-loop-while/foreach-nested.rs:13:16: 13:17
        _34 = <Vec<isize> as Index<usize>>::index(move _35, const 1_usize) -> [return: bb7, unwind: bb17]; // scope 3 at ui/for-loop-while/foreach-nested.rs:13:16: 13:20
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:13:16: 13:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _33 = _34;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _36 = _91;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _36);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_32.0: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_32.1: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const 1_isize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb9, otherwise: bb8]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<isize, isize>(move _45, move _46, move _48, move _50) -> bb17; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb9: {
        _54 = &_1;                       // scope 3 at ui/for-loop-while/foreach-nested.rs:14:16: 14:17
        _53 = <Vec<isize> as Index<usize>>::index(move _54, const 2_usize) -> [return: bb10, unwind: bb17]; // scope 3 at ui/for-loop-while/foreach-nested.rs:14:16: 14:20
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:14:16: 14:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb10: {
        _52 = _53;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _90 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _55 = _90;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _55);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_51.0: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_51.1: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = (*_56);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = const 10_isize;            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = Eq(move _60, move _61);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _58 = Not(move _59);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb12, otherwise: bb11]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _62 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<isize, isize>(move _64, move _65, move _67, move _69) -> bb17; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb12: {
        _73 = &_1;                       // scope 3 at ui/for-loop-while/foreach-nested.rs:15:16: 15:17
        _72 = <Vec<isize> as Index<usize>>::index(move _73, const 3_usize) -> [return: bb13, unwind: bb17]; // scope 3 at ui/for-loop-while/foreach-nested.rs:15:16: 15:20
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:15:16: 15:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb13: {
        _71 = _72;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _89 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _74 = _89;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _70 = (move _71, move _74);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _75 = (_70.0: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _76 = (_70.1: &isize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _79 = (*_75);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _80 = const 11_isize;            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _78 = Eq(move _79, move _80);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _77 = Not(move _78);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _77) -> [0: bb15, otherwise: bb14]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _81 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _83 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _85 = _75;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _84 = _85;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _87 = _76;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _86 = _87;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _88 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _82 = core::panicking::assert_failed::<isize, isize>(move _83, move _84, move _86, move _88) -> bb17; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_1) -> bb16;                // scope 0 at ui/for-loop-while/foreach-nested.rs:16:1: 16:2
    }

    bb16: {
        return;                          // scope 0 at ui/for-loop-while/foreach-nested.rs:16:2: 16:2
    }

    bb17 (cleanup): {
        drop(_1) -> bb18;                // scope 0 at ui/for-loop-while/foreach-nested.rs:16:1: 16:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/foreach-nested.rs:6:1: 16:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:15:22: 15:24

    bb0: {
        _1 = const 11_isize;             // scope 0 at ui/for-loop-while/foreach-nested.rs:15:22: 15:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:14:22: 14:24

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/for-loop-while/foreach-nested.rs:14:22: 14:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:13:22: 13:23

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/for-loop-while/foreach-nested.rs:13:22: 13:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:12:22: 12:23

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/for-loop-while/foreach-nested.rs:12:22: 12:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12], _2: isize) -> () {
    debug i => _2;                       // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:10: 9:11
    debug a => (*((*_1).0: &mut std::vec::Vec<isize>)); // in scope 0 at ui/for-loop-while/foreach-nested.rs:7:9: 7:14
    debug p => (*((*_1).1: &mut isize)); // in scope 0 at ui/for-loop-while/foreach-nested.rs:8:9: 8:14
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-nested.rs:9:13: 9:13
    let mut _3: [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16]; // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _4: &mut std::vec::Vec<isize>; // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _5: &mut isize;              // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _6: &isize;                  // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _7: &mut std::vec::Vec<isize>; // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6
    let mut _8: &mut isize;              // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:9: 11:6

    bb0: {
        _7 = deref_copy ((*_1).0: &mut std::vec::Vec<isize>); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
        _4 = &mut (*_7);                 // scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
        _8 = deref_copy ((*_1).1: &mut isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
        _5 = &mut (*_8);                 // scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
        _6 = &_2;                        // scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
        _3 = [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16] { i: move _4, a: move _5, p: move _6 }; // scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
                                         // closure
                                         // + def_id: DefId(0:7 ~ foreach_nested[fb62]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((isize,)),
                                         //     (&mut std::vec::Vec<isize>, &mut isize, &isize),
                                         // ]
        _0 = two::<[closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16]>(move _3) -> bb1; // scope 0 at ui/for-loop-while/foreach-nested.rs:10:9: 10:57
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:10:9: 10:12
                                         // + literal: Const { ty: fn([closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16]) {two::<[closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/for-loop-while/foreach-nested.rs:11:6: 11:6
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16], _2: isize) -> () {
    debug j => _2;                       // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:14: 10:15
    debug a => (*((*_1).0: &mut std::vec::Vec<isize>)); // in scope 0 at ui/for-loop-while/foreach-nested.rs:7:9: 7:14
    debug p => (*((*_1).1: &mut isize)); // in scope 0 at ui/for-loop-while/foreach-nested.rs:8:9: 8:14
    debug i => (*((*_1).2: &isize));     // in scope 0 at ui/for-loop-while/foreach-nested.rs:9:10: 9:11
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-nested.rs:10:17: 10:17
    let mut _3: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:41
    let mut _4: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:40: 10:41
    let mut _5: (isize, bool);           // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:41
    let mut _6: isize;                   // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:44: 10:45
    let mut _7: (isize, bool);           // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:45
    let mut _8: &mut isize;              // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:19: 10:32
    let mut _9: &mut std::vec::Vec<isize>; // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:19: 10:20
    let mut _10: usize;                  // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:21: 10:31
    let mut _11: isize;                  // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:21: 10:22
    let mut _12: (isize, bool);          // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
    let mut _13: &isize;                 // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _14: &mut std::vec::Vec<isize>; // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _15: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _16: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _17: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56
    let mut _18: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-nested.rs:10:13: 10:56

    bb0: {
        _13 = deref_copy ((*_1).2: &isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:40: 10:41
        _4 = (*_13);                     // scope 0 at ui/for-loop-while/foreach-nested.rs:10:40: 10:41
        _5 = CheckedMul(const 10_isize, _4); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:41
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", const 10_isize, move _4) -> bb1; // scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:41
    }

    bb1: {
        _3 = move (_5.0: isize);         // scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:41
        _6 = _2;                         // scope 0 at ui/for-loop-while/foreach-nested.rs:10:44: 10:45
        _7 = CheckedAdd(_3, _6);         // scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:45
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _6) -> bb2; // scope 0 at ui/for-loop-while/foreach-nested.rs:10:35: 10:45
    }

    bb2: {
        _14 = deref_copy ((*_1).0: &mut std::vec::Vec<isize>); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:19: 10:20
        _9 = &mut (*_14);                // scope 0 at ui/for-loop-while/foreach-nested.rs:10:19: 10:20
        _15 = deref_copy ((*_1).1: &mut isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:21: 10:22
        _11 = (*_15);                    // scope 0 at ui/for-loop-while/foreach-nested.rs:10:21: 10:22
        _10 = move _11 as usize (IntToInt); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:21: 10:31
        _8 = <Vec<isize> as IndexMut<usize>>::index_mut(move _9, move _10) -> bb3; // scope 0 at ui/for-loop-while/foreach-nested.rs:10:19: 10:32
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-nested.rs:10:19: 10:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>, usize) -> &'a mut <Vec<isize> as Index<usize>>::Output {<Vec<isize> as IndexMut<usize>>::index_mut}, val: Value(<ZST>) }
    }

    bb3: {
        (*_8) = move (_7.0: isize);      // scope 0 at ui/for-loop-while/foreach-nested.rs:10:19: 10:45
        _16 = deref_copy ((*_1).1: &mut isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
        _12 = CheckedAdd((*_16), const 1_isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
        _17 = deref_copy ((*_1).1: &mut isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_17), const 1_isize) -> bb4; // scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
    }

    bb4: {
        _18 = deref_copy ((*_1).1: &mut isize); // scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
        (*_18) = move (_12.0: isize);    // scope 0 at ui/for-loop-while/foreach-nested.rs:10:47: 10:53
        return;                          // scope 0 at ui/for-loop-while/foreach-nested.rs:10:56: 10:56
    }
}
