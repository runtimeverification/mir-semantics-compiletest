// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn two(_1: F) -> () {
    debug it => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &mut F;
    let mut _4: (isize,);
    let _5: ();
    let mut _6: &mut F;
    let mut _7: (isize,);

    bb0: {
        _3 = &mut _1;
        _4 = (const 0_isize,);
        _2 = <F as FnMut<(isize,)>>::call_mut(move _3, move _4) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _6 = &mut _1;
        _7 = (const 1_isize,);
        _5 = <F as FnMut<(isize,)>>::call_mut(move _6, move _7) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 4]>;
    let _8: ();
    let mut _9: [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12];
    let mut _10: &mut std::vec::Vec<isize>;
    let mut _11: &mut isize;
    let mut _12: (&isize, &isize);
    let mut _13: &isize;
    let _14: &isize;
    let mut _15: &std::vec::Vec<isize>;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&isize, &isize);
    let mut _26: &isize;
    let _27: &isize;
    let mut _28: &std::vec::Vec<isize>;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: (&isize, &isize);
    let mut _39: &isize;
    let _40: &isize;
    let mut _41: &std::vec::Vec<isize>;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: (&isize, &isize);
    let mut _52: &isize;
    let _53: &isize;
    let mut _54: &std::vec::Vec<isize>;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: isize;
    let mut _60: isize;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: *const [isize; 4];
    let mut _69: *const ();
    let mut _70: usize;
    let mut _71: usize;
    let mut _72: usize;
    let mut _73: usize;
    let mut _74: bool;
    scope 1 {
        debug a => _1;
        let mut _7: isize;
        scope 3 {
            debug p => _7;
            let _16: &isize;
            let _17: &isize;
            let _29: &isize;
            let _30: &isize;
            let _42: &isize;
            let _43: &isize;
            let _55: &isize;
            let _56: &isize;
            let mut _64: &isize;
            let mut _65: &isize;
            let mut _66: &isize;
            let mut _67: &isize;
            scope 4 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _22;
                }
            }
            scope 6 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _35;
                }
            }
            scope 8 {
                debug left_val => _42;
                debug right_val => _43;
                let _48: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _48;
                }
            }
            scope 10 {
                debug left_val => _55;
                debug right_val => _56;
                let _61: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _61;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([isize; 4]);
        _4 = AlignOf([isize; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 4]);
        _68 = (((_6.0: std::ptr::Unique<[isize; 4]>).0: std::ptr::NonNull<[isize; 4]>).0: *const [isize; 4]);
        _69 = _68 as *const () (PtrToPtr);
        _70 = _69 as usize (Transmute);
        _71 = AlignOf(isize);
        _72 = Sub(_71, const 1_usize);
        _73 = BitAnd(_70, _72);
        _74 = Eq(_73, const 0_usize);
        assert(_74, "misaligned pointer dereference: address must be a multiple of {} but is {}", _71, _70) -> [success: bb19, unwind unreachable];
    }

    bb2: {
        _7 = const 0_isize;
        _10 = &mut _1;
        _11 = &mut _7;
        _9 = [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12] { a: move _10, p: move _11 };
        _8 = two::<[closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12]>(move _9) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _15 = &_1;
        _14 = <Vec<isize> as Index<usize>>::index(move _15, const 0_usize) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _13 = _14;
        _67 = const _;
        _12 = (move _13, _67);
        _16 = (_12.0: &isize);
        _17 = (_12.1: &isize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<isize, isize>(move _22, _16, _17, move _24) -> bb17;
    }

    bb6: {
        _28 = &_1;
        _27 = <Vec<isize> as Index<usize>>::index(move _28, const 1_usize) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _26 = _27;
        _66 = const _;
        _25 = (move _26, _66);
        _29 = (_25.0: &isize);
        _30 = (_25.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37) -> bb17;
    }

    bb9: {
        _41 = &_1;
        _40 = <Vec<isize> as Index<usize>>::index(move _41, const 2_usize) -> [return: bb10, unwind: bb17];
    }

    bb10: {
        _39 = _40;
        _65 = const _;
        _38 = (move _39, _65);
        _42 = (_38.0: &isize);
        _43 = (_38.1: &isize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<isize, isize>(move _48, _42, _43, move _50) -> bb17;
    }

    bb12: {
        _54 = &_1;
        _53 = <Vec<isize> as Index<usize>>::index(move _54, const 3_usize) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _52 = _53;
        _64 = const _;
        _51 = (move _52, _64);
        _55 = (_51.0: &isize);
        _56 = (_51.1: &isize);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<isize, isize>(move _61, _55, _56, move _63) -> bb17;
    }

    bb15: {
        drop(_1) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19: {
        (*_68) = [const -1_isize, const -1_isize, const -1_isize, const -1_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-nested.rs:9:9: 9:12], _2: isize) -> () {
    debug i => _2;
    debug a => (*((*_1).0: &mut std::vec::Vec<isize>));
    debug p => (*((*_1).1: &mut isize));
    let mut _0: ();
    let mut _3: [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16];
    let mut _4: &isize;
    let mut _5: &mut std::vec::Vec<isize>;
    let mut _6: &mut isize;

    bb0: {
        _5 = deref_copy ((*_1).0: &mut std::vec::Vec<isize>);
        _6 = deref_copy ((*_1).1: &mut isize);
        _4 = &_2;
        _3 = [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16] { i: _5, a: _6, p: move _4 };
        _0 = two::<[closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16]>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-nested.rs:10:13: 10:16], _2: isize) -> () {
    debug j => _2;
    debug a => (*((*_1).0: &mut std::vec::Vec<isize>));
    debug p => (*((*_1).1: &mut isize));
    debug i => (*((*_1).2: &isize));
    let mut _0: ();
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: &mut isize;
    let mut _6: usize;
    let mut _7: isize;
    let mut _8: &isize;
    let mut _9: &mut std::vec::Vec<isize>;
    let mut _10: &mut isize;
    let mut _11: &mut isize;
    let mut _12: &mut isize;

    bb0: {
        _8 = deref_copy ((*_1).2: &isize);
        _4 = (*_8);
        _3 = Mul(const 10_isize, move _4);
        _9 = deref_copy ((*_1).0: &mut std::vec::Vec<isize>);
        _10 = deref_copy ((*_1).1: &mut isize);
        _7 = (*_10);
        _6 = move _7 as usize (IntToInt);
        _5 = <Vec<isize> as IndexMut<usize>>::index_mut(_9, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        (*_5) = Add(move _3, _2);
        _11 = deref_copy ((*_1).1: &mut isize);
        _12 = deref_copy ((*_1).1: &mut isize);
        (*_11) = Add((*_12), const 1_isize);
        return;
    }
}
