// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pairs(_1: F) -> () {
    debug it => _1;                      // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:4:13: 4:19
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-put-structured.rs:4:24: 4:24
    let mut _2: isize;                   // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:5:9: 5:14
    let mut _4: bool;                    // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:11: 7:17
    let mut _5: isize;                   // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:11: 7:12
    let _6: ();                          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:20: 7:30
    let mut _7: &mut F;                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:20: 7:22
    let mut _8: ((isize, isize),);       // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:20: 7:30
    let mut _9: (isize, isize);          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:23: 7:29
    let mut _10: isize;                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:24: 7:25
    let mut _11: isize;                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:27: 7:28
    let mut _12: (isize, bool);          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:32: 7:38
    let mut _13: isize;                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:45: 7:46
    let mut _14: (isize, bool);          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:7:40: 7:46
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:5:9: 5:14
        let mut _3: isize;               // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:6:9: 6:14
        scope 2 {
            debug j => _3;               // in scope 2 at ui/for-loop-while/foreach-put-structured.rs:6:9: 6:14
        }
    }

    bb0: {
        _2 = const 0_isize;              // scope 0 at ui/for-loop-while/foreach-put-structured.rs:5:24: 5:25
        _3 = const 0_isize;              // scope 1 at ui/for-loop-while/foreach-put-structured.rs:6:24: 6:25
        goto -> bb1;                     // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:5: 7:49
    }

    bb1: {
        _5 = _2;                         // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:11: 7:12
        _4 = Lt(move _5, const 10_isize); // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:11: 7:17
        switchInt(move _4) -> [0: bb6, otherwise: bb2]; // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:11: 7:17
    }

    bb2: {
        _7 = &mut _1;                    // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:20: 7:22
        _10 = _2;                        // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:24: 7:25
        _11 = _3;                        // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:27: 7:28
        _9 = (move _10, move _11);       // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:23: 7:29
        _8 = (move _9,);                 // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:20: 7:30
        _6 = <F as FnMut<((isize, isize),)>>::call_mut(move _7, move _8) -> [return: bb3, unwind: bb8]; // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:20: 7:30
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:7:20: 7:22
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, ((isize, isize),)) -> <F as FnOnce<((isize, isize),)>>::Output {<F as FnMut<((isize, isize),)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = CheckedAdd(_2, const 1_isize); // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:32: 7:38
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, const 1_isize) -> [success: bb4, unwind: bb8]; // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:32: 7:38
    }

    bb4: {
        _2 = move (_12.0: isize);        // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:32: 7:38
        _13 = _2;                        // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:45: 7:46
        _14 = CheckedAdd(_3, _13);       // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:40: 7:46
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, move _13) -> [success: bb5, unwind: bb8]; // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:40: 7:46
    }

    bb5: {
        _3 = move (_14.0: isize);        // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:40: 7:46
        goto -> bb1;                     // scope 2 at ui/for-loop-while/foreach-put-structured.rs:7:5: 7:49
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/for-loop-while/foreach-put-structured.rs:8:1: 8:2
    }

    bb7: {
        return;                          // scope 0 at ui/for-loop-while/foreach-put-structured.rs:8:2: 8:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/for-loop-while/foreach-put-structured.rs:8:1: 8:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/foreach-put-structured.rs:4:1: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-put-structured.rs:10:15: 10:15
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:11:9: 11:14
    let _3: ();                          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:5: 20:7
    let mut _4: [closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14]; // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _5: &mut isize;              // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _6: &mut isize;              // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _7: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:11:9: 11:14
        let mut _2: isize;               // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:12:9: 12:14
        scope 2 {
            debug j => _2;               // in scope 2 at ui/for-loop-while/foreach-put-structured.rs:12:9: 12:14
            let _10: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/for-loop-while/foreach-put-structured.rs:11:24: 11:26
        _2 = const 0_isize;              // scope 1 at ui/for-loop-while/foreach-put-structured.rs:12:24: 12:25
        _5 = &mut _1;                    // scope 2 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
        _6 = &mut _2;                    // scope 2 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
        _4 = [closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14] { i: move _5, j: move _6 }; // scope 2 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
                                         // closure
                                         // + def_id: DefId(0:6 ~ foreach_put_structured[d972]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(((isize, isize),)),
                                         //     (&mut isize, &mut isize),
                                         // ]
        _3 = pairs::<[closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14]>(move _4) -> bb1; // scope 2 at ui/for-loop-while/foreach-put-structured.rs:13:5: 20:7
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:13:5: 13:10
                                         // + literal: Const { ty: fn([closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14]) {pairs::<[closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14]>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 45_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/for-loop-while/foreach-put-structured.rs:22:2: 22:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:21:19: 21:21

    bb0: {
        _1 = const 45_isize;             // scope 0 at ui/for-loop-while/foreach-put-structured.rs:21:19: 21:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14], _2: (isize, isize)) -> () {
    debug p => _2;                       // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:12: 13:13
    debug i => (*((*_1).0: &mut isize)); // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:11:9: 11:14
    debug j => (*((*_1).1: &mut isize)); // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:12:9: 12:14
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:15: 13:15
    let _3: isize;                       // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:14:14: 14:16
    let _4: isize;                       // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:14:18: 14:20
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
    let mut _8: &[&str; 2];              // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
    let _9: &[&str; 2];                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
    let mut _15: &isize;                 // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
    let _16: &isize;                     // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
    let _17: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _18: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[&str];                // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
    let mut _20: &[&str; 2];             // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
    let _21: &[&str; 2];                 // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
    let mut _22: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _24: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _25: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _26: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
    let mut _27: &isize;                 // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
    let _28: &isize;                     // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
    let mut _29: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _30: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _31: isize;                      // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:27
    let mut _32: isize;                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:22
    let mut _33: (isize, bool);          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:27
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (isize, bool);          // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
    let mut _50: isize;                  // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:19:13: 19:15
    let mut _53: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _54: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _55: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _56: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    let mut _57: &mut isize;             // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:13:11: 20:6
    scope 1 {
        debug _0 => _3;                  // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:14:14: 14:16
        debug _1 => _4;                  // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:14:18: 14:20
        let _35: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _36: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _51: &[&str; 2];         // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
        let mut _52: &[&str; 2];         // in scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
        scope 2 {
            debug left_val => _35;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _36;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _41: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _41;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = (_2.0: isize);              // scope 0 at ui/for-loop-while/foreach-put-structured.rs:14:14: 14:16
        _4 = (_2.1: isize);              // scope 0 at ui/for-loop-while/foreach-put-structured.rs:14:18: 14:20
        _52 = const _;                   // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _9 = _52;                        // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
        _8 = _9;                         // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
        _16 = &_3;                       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
        _15 = _16;                       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _15) -> bb1; // scope 1 at ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:15:24: 15:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = [move _14];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = _print(move _6) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _51 = const _;                   // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _21 = _51;                       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
        _20 = _21;                       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
        _19 = move _20 as &[&str] (Pointer(Unsize)); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
        _28 = &_4;                       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
        _27 = _28;                       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
        _26 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _27) -> bb4; // scope 1 at ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:16:24: 16:26
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = [move _26];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _24 = &_25;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = _24;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = move _23 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = Arguments::<'_>::new_v1(move _19, move _22) -> bb5; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = _print(move _18) -> bb6;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _32 = _3;                        // scope 1 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:22
        _33 = CheckedAdd(_32, const 10_isize); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:27
        assert(!move (_33.1: bool), "attempt to compute `{} + {}`, which would overflow", move _32, const 10_isize) -> bb7; // scope 1 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:27
    }

    bb7: {
        _31 = move (_33.0: isize);       // scope 1 at ui/for-loop-while/foreach-put-structured.rs:17:20: 17:27
        _30 = &_31;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _53 = deref_copy ((*_1).0: &mut isize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = &(*_53);                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _29 = (move _30, move _34);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_29.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_29.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = (*_35);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = (*_36);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = Eq(move _39, move _40);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _37 = Not(move _38);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _41 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<isize, isize>(move _43, move _44, move _46, move _48); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb9: {
        _54 = deref_copy ((*_1).0: &mut isize); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
        _49 = CheckedAdd((*_54), const 1_isize); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
        _55 = deref_copy ((*_1).0: &mut isize); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
        assert(!move (_49.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_55), const 1_isize) -> bb10; // scope 1 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
    }

    bb10: {
        _56 = deref_copy ((*_1).0: &mut isize); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
        (*_56) = move (_49.0: isize);    // scope 1 at ui/for-loop-while/foreach-put-structured.rs:18:9: 18:15
        _50 = _4;                        // scope 1 at ui/for-loop-while/foreach-put-structured.rs:19:13: 19:15
        _57 = deref_copy ((*_1).1: &mut isize); // scope 1 at ui/for-loop-while/foreach-put-structured.rs:19:9: 19:15
        (*_57) = move _50;               // scope 1 at ui/for-loop-while/foreach-put-structured.rs:19:9: 19:15
        return;                          // scope 0 at ui/for-loop-while/foreach-put-structured.rs:20:6: 20:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
    let mut _1: [&str; 2];               // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
        return;                          // scope 0 at ui/for-loop-while/foreach-put-structured.rs:16:18: 16:22
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
    let mut _1: [&str; 2];               // in scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
        return;                          // scope 0 at ui/for-loop-while/foreach-put-structured.rs:15:18: 15:22
    }
}
