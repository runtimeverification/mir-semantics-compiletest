// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn pairs(_1: F) -> () {
    debug it => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _4: bool;
    let mut _5: isize;
    let _6: ();
    let mut _7: &mut F;
    let mut _8: ((isize, isize),);
    let mut _9: (isize, isize);
    let mut _10: isize;
    let mut _11: isize;
    let mut _12: isize;
    scope 1 {
        debug i => _2;
        let mut _3: isize;
        scope 2 {
            debug j => _3;
        }
    }

    bb0: {
        _2 = const 0_isize;
        _3 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _5 = _2;
        _4 = Lt(move _5, const 10_isize);
        switchInt(move _4) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        _7 = &mut _1;
        _10 = _2;
        _11 = _3;
        _9 = (move _10, move _11);
        _8 = (move _9,);
        _6 = <F as FnMut<((isize, isize),)>>::call_mut(move _7, move _8) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _2 = Add(_2, const 1_isize);
        _12 = _2;
        _3 = Add(_3, move _12);
        goto -> bb1;
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let _3: ();
    let mut _4: [closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14];
    let mut _5: &mut isize;
    let mut _6: &mut isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug i => _1;
        let mut _2: isize;
        scope 2 {
            debug j => _2;
            let _9: &isize;
            let _10: &isize;
            let mut _18: &isize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _1 = const 10_isize;
        _2 = const 0_isize;
        _5 = &mut _1;
        _6 = &mut _2;
        _4 = [closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14] { i: move _5, j: move _6 };
        _3 = pairs::<[closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14]>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_2;
        _18 = const _;
        _7 = (move _8, _18);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 45_isize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-put-structured.rs:13:11: 13:14], _2: (isize, isize)) -> () {
    debug p => _2;
    debug i => (*((*_1).0: &mut isize));
    debug j => (*((*_1).1: &mut isize));
    let mut _0: ();
    let _3: isize;
    let _4: isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &isize;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &isize;
    let mut _21: (&isize, &isize);
    let mut _22: &isize;
    let _23: isize;
    let mut _24: isize;
    let mut _25: &isize;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: isize;
    let mut _31: isize;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: isize;
    let mut _38: &mut isize;
    let mut _39: &mut isize;
    let mut _40: &mut isize;
    let mut _41: &mut isize;
    scope 1 {
        debug _0 => _3;
        debug _1 => _4;
        let _26: &isize;
        let _27: &isize;
        let mut _36: &[&str; 2];
        let mut _37: &[&str; 2];
        scope 2 {
            debug left_val => _26;
            debug right_val => _27;
            let _32: core::panicking::AssertKind;
            scope 3 {
                debug kind => _32;
            }
        }
    }

    bb0: {
        _3 = (_2.0: isize);
        _4 = (_2.1: isize);
        _37 = const _;
        _7 = _37 as &[&str] (Pointer(Unsize));
        _12 = &_3;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _print(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _36 = const _;
        _15 = _36 as &[&str] (Pointer(Unsize));
        _20 = &_4;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_20) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = _print(move _14) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = _3;
        _23 = Add(move _24, const 10_isize);
        _22 = &_23;
        _38 = deref_copy ((*_1).0: &mut isize);
        _25 = &(*_38);
        _21 = (move _22, move _25);
        _26 = (_21.0: &isize);
        _27 = (_21.1: &isize);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<isize, isize>(move _32, _26, _27, move _34) -> unwind continue;
    }

    bb8: {
        _39 = deref_copy ((*_1).0: &mut isize);
        _40 = deref_copy ((*_1).0: &mut isize);
        (*_39) = Add((*_40), const 1_isize);
        _35 = _4;
        _41 = deref_copy ((*_1).1: &mut isize);
        (*_41) = move _35;
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
