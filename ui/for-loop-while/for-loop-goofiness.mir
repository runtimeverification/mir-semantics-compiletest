// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:11:15: 11:15
    let _1: [i32; 3];                    // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:12:9: 12:10
    let mut _2: std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    let mut _3: &[i32; 3];               // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    let mut _5: std::option::Option<&i32>; // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    let mut _6: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    let mut _7: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    let mut _8: isize;                   // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:13:5: 15:6
    let mut _10: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _12: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/for-loop-while/for-loop-goofiness.rs:12:9: 12:10
        let mut _4: std::slice::Iter<'_, i32>; // in scope 1 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
        scope 2 {
            debug iter => _4;            // in scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
            let _9: &i32;                // in scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:9: 13:10
            scope 3 {
                debug i => _9;           // in scope 3 at ui/for-loop-while/for-loop-goofiness.rs:13:9: 13:10
                let _13: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _14: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _27: &i32;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _13; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _14; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _19: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _19; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 3_i32, const 3_i32, const 3_i32]; // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:12:13: 12:24
        _3 = &_1;                        // scope 1 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
        _2 = <&[i32; 3] as IntoIterator>::into_iter(move _3) -> bb1; // scope 1 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
                                         // + literal: Const { ty: fn(&[i32; 3]) -> <&[i32; 3] as IntoIterator>::IntoIter {<&[i32; 3] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 1 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
        goto -> bb2;                     // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:5: 15:6
    }

    bb2: {
        _7 = &mut _4;                    // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
        _6 = &mut (*_7);                 // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
        _5 = <std::slice::Iter<'_, i32> as std::iter::Iterator>::next(move _6) -> bb3; // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as std::iter::Iterator>::Item> {<std::slice::Iter<'_, i32> as std::iter::Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    }

    bb4: {
        _9 = ((_5 as Some).0: &i32);     // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:9: 13:10
        _11 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _12);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_10.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_10.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 3_i32;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb2, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        unreachable;                     // scope 2 at ui/for-loop-while/for-loop-goofiness.rs:13:14: 13:16
    }

    bb6: {
        return;                          // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:16:2: 16:2
    }

    bb7: {
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<i32, i32>(move _21, move _22, move _24, move _26); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:14:24: 14:25

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:14:24: 14:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn BogusOption::Some(_1: T) -> BogusOption<T> {
    let mut _0: BogusOption<T>;          // return place in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:6:5: 6:9

    bb0: {
        _0 = BogusOption::<T>::Some(move _1); // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:6:5: 6:9
        return;                          // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:6:5: 6:9
    }
}

// MIR FOR CTFE
fn BogusOption::Some(_1: T) -> BogusOption<T> {
    let mut _0: BogusOption<T>;          // return place in scope 0 at ui/for-loop-while/for-loop-goofiness.rs:6:5: 6:9

    bb0: {
        _0 = BogusOption::<T>::Some(move _1); // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:6:5: 6:9
        return;                          // scope 0 at ui/for-loop-while/for-loop-goofiness.rs:6:5: 6:9
    }
}
