// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: usize;
    let mut _6: (&usize, &usize);
    let mut _7: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: usize;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: !;
    let _29: ();
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: !;
    scope 1 {
        debug i => _1;
        let _8: &usize;
        let _9: &usize;
        let mut _17: bool;
        let mut _41: &usize;
        let mut _42: &[&str; 1];
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug is_even => _17;
            let mut _39: &[&str; 1];
            let mut _40: &[&str; 1];
        }
    }

    bb0: {
        _1 = const 0_usize;
        goto -> bb1;
    }

    bb1: {
        _42 = const _;
        _4 = _42 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = Add(_1, const 1_usize);
        _5 = _1;
        switchInt(move _5) -> [10: bb4, otherwise: bb1];
    }

    bb4: {
        _7 = &_1;
        _41 = const _;
        _6 = (move _7, _41);
        _8 = (_6.0: &usize);
        _9 = (_6.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb6: {
        _17 = const false;
        goto -> bb7;
    }

    bb7: {
        _18 = _1;
        switchInt(move _18) -> [21: bb8, otherwise: bb9];
    }

    bb8: {
        _27 = _17;
        _26 = Not(move _27);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb15, otherwise: bb14];
    }

    bb9: {
        _40 = const _;
        _21 = _40 as &[&str] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb10, unwind continue];
    }

    bb10: {
        _19 = _print(move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        _17 = const false;
        _1 = Add(_1, const 1_usize);
        _23 = _1;
        _24 = Eq(const 2_usize, const 0_usize);
        assert(!move _24, "attempt to calculate the remainder of `{}` with a divisor of zero", _23) -> [success: bb12, unwind continue];
    }

    bb12: {
        _22 = Rem(move _23, const 2_usize);
        switchInt(move _22) -> [0: bb13, otherwise: bb7];
    }

    bb13: {
        _17 = const true;
        goto -> bb7;
    }

    bb14: {
        _28 = core::panicking::panic(const "assertion failed: !is_even") -> unwind continue;
    }

    bb15: {
        _39 = const _;
        _31 = _39 as &[&str] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_const(move _31) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = _print(move _30) -> [return: bb17, unwind continue];
    }

    bb17: {
        _32 = _1;
        switchInt(move _32) -> [22: bb18, otherwise: bb19];
    }

    bb18: {
        _37 = _17;
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb23, otherwise: bb22];
    }

    bb19: {
        _17 = const false;
        _1 = Add(_1, const 1_usize);
        _34 = _1;
        _35 = Eq(const 2_usize, const 0_usize);
        assert(!move _35, "attempt to calculate the remainder of `{}` with a divisor of zero", _34) -> [success: bb20, unwind continue];
    }

    bb20: {
        _33 = Rem(move _34, const 2_usize);
        switchInt(move _33) -> [0: bb21, otherwise: bb15];
    }

    bb21: {
        _17 = const true;
        goto -> bb15;
    }

    bb22: {
        _38 = core::panicking::panic(const "assertion failed: is_even") -> unwind continue;
    }

    bb23: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "c\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "b\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 10_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "a\n"];
        _0 = &_1;
        return;
    }
}
