// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/labeled-break.rs:4:15: 4:15
    let mut _1: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    let mut _4: std::option::Option<i32>; // in scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    let mut _5: &mut std::ops::Range<i32>; // in scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    let mut _7: isize;                   // in scope 0 at ui/for-loop-while/labeled-break.rs:11:5: 15:6
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 100_i32 }; // scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/labeled-break.rs:11:20: 11:26
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
        _6 = &mut _3;                    // scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
        _5 = &mut (*_6);                 // scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
        _4 = <std::ops::Range<i32> as Iterator>::next(move _5) -> bb2; // scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/labeled-break.rs:11:20: 11:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_4);           // scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
        switchInt(move _7) -> [0: bb4, 1: bb4, otherwise: bb3]; // scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    }

    bb3: {
        unreachable;                     // scope 1 at ui/for-loop-while/labeled-break.rs:11:20: 11:26
    }

    bb4: {
        return;                          // scope 0 at ui/for-loop-while/labeled-break.rs:22:2: 22:2
    }
}
