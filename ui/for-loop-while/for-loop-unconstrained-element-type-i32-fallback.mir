// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:6:11: 6:11
    let mut _1: i32;                     // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:7:9: 7:16
    let mut _2: std::vec::IntoIter<i32>; // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    let mut _3: std::vec::Vec<i32>;      // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    let mut _6: &mut std::vec::IntoIter<i32>; // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    let mut _7: &mut std::vec::IntoIter<i32>; // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    let mut _8: isize;                   // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:5: 10:6
    let _10: ();                         // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:9: 9:18
    let mut _11: &mut i32;               // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:9: 9:12
    let mut _12: &i32;                   // in scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:16: 9:18
    scope 1 {
        debug sum => _1;                 // in scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:7:9: 7:16
        let mut _4: std::vec::IntoIter<i32>; // in scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
        scope 2 {
            debug iter => _4;            // in scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
            let _9: i32;                 // in scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:9: 8:10
            scope 3 {
                debug i => _9;           // in scope 3 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:9: 8:10
            }
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:7:19: 7:20
        _3 = Vec::<i32>::new() -> bb1;   // scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Vec<i32> as IntoIterator>::into_iter(move _3) -> bb2; // scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
                                         // + literal: Const { ty: fn(Vec<i32>) -> <Vec<i32> as IntoIterator>::IntoIter {<Vec<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _2;                    // scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
        goto -> bb3;                     // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:5: 10:6
    }

    bb3: {
        _7 = &mut _4;                    // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
        _6 = &mut (*_7);                 // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
        _5 = <std::vec::IntoIter<i32> as Iterator>::next(move _6) -> [return: bb4, unwind: bb9]; // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<i32>) -> Option<<std::vec::IntoIter<i32> as Iterator>::Item> {<std::vec::IntoIter<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_5);           // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    }

    bb5: {
        _9 = ((_5 as Some).0: i32);      // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:9: 8:10
        _11 = &mut _1;                   // scope 3 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:9: 9:12
        _12 = &_9;                       // scope 3 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:16: 9:18
        _10 = <i32 as AddAssign<&i32>>::add_assign(move _11, move _12) -> [return: bb11, unwind: bb9]; // scope 3 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:9: 9:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:9: 9:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut i32, &i32) {<i32 as AddAssign<&i32>>::add_assign}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:8:14: 8:24
    }

    bb7: {
        drop(_4) -> bb8;                 // scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:10:5: 10:6
    }

    bb8: {
        return;                          // scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:11:2: 11:2
    }

    bb9 (cleanup): {
        drop(_4) -> bb10;                // scope 1 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:10:5: 10:6
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:6:1: 11:2
    }

    bb11: {
        goto -> bb3;                     // scope 3 at ui/for-loop-while/for-loop-unconstrained-element-type-i32-fallback.rs:9:9: 9:18
    }
}
