// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let mut _8: std::slice::Iter<'_, i32>;
    let mut _9: &std::vec::Vec<i32>;
    let mut _11: std::option::Option<&i32>;
    let mut _12: &mut std::slice::Iter<'_, i32>;
    let mut _13: isize;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let mut _22: i32;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &i32;
    let mut _31: (&i32, &i32);
    let mut _32: &i32;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: i32;
    let mut _38: i32;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let _43: &str;
    let mut _45: std::str::Bytes<'_>;
    let mut _46: std::str::Bytes<'_>;
    let mut _47: &str;
    let _48: &str;
    let mut _49: &std::string::String;
    let mut _51: std::option::Option<u8>;
    let mut _52: &mut std::str::Bytes<'_>;
    let mut _53: isize;
    let mut _55: isize;
    let mut _56: (&u8, &u8);
    let mut _57: &u8;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: u8;
    let mut _63: u8;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: isize;
    let mut _68: (&u8, &u8);
    let mut _69: &u8;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: u8;
    let mut _75: u8;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: isize;
    let mut _80: (&u8, &u8);
    let mut _81: &u8;
    let mut _84: bool;
    let mut _85: bool;
    let mut _86: u8;
    let mut _87: u8;
    let _89: !;
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _91: isize;
    let mut _92: (&u8, &u8);
    let mut _93: &u8;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: u8;
    let mut _99: u8;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _103: isize;
    let mut _104: (&u8, &u8);
    let mut _105: &u8;
    let mut _108: bool;
    let mut _109: bool;
    let mut _110: u8;
    let mut _111: u8;
    let _113: !;
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>;
    let _115: ();
    let mut _116: std::fmt::Arguments<'_>;
    let mut _117: &[&str];
    let mut _118: &[core::fmt::rt::Argument<'_>];
    let _119: &[core::fmt::rt::Argument<'_>; 1];
    let _120: [core::fmt::rt::Argument<'_>; 1];
    let mut _121: core::fmt::rt::Argument<'_>;
    let _122: &isize;
    let _123: ();
    let mut _124: std::fmt::Arguments<'_>;
    let mut _125: &[&str];
    let mut _126: &[core::fmt::rt::Argument<'_>];
    let _127: &[core::fmt::rt::Argument<'_>; 1];
    let _128: [core::fmt::rt::Argument<'_>; 1];
    let mut _129: core::fmt::rt::Argument<'_>;
    let _130: &u8;
    let mut _131: (&isize, &isize);
    let mut _132: &isize;
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: isize;
    let mut _138: isize;
    let _140: !;
    let mut _141: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _153: *const [i32; 3];
    let mut _154: *const ();
    let mut _155: usize;
    let mut _156: usize;
    let mut _157: usize;
    let mut _158: usize;
    let mut _159: bool;
    scope 1 {
        debug x => _1;
        let mut _7: i32;
        scope 3 {
            debug y => _7;
            let mut _10: std::slice::Iter<'_, i32>;
            let _33: &i32;
            let _34: &i32;
            let _42: std::string::String;
            let mut _151: &i32;
            let mut _152: &[&str; 2];
            scope 4 {
                debug iter => _10;
                let _14: &i32;
                scope 5 {
                    debug i => _14;
                    let mut _142: &[&str; 2];
                }
            }
            scope 6 {
                debug left_val => _33;
                debug right_val => _34;
                let _39: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _39;
                }
            }
            scope 8 {
                debug s => _42;
                let mut _44: isize;
                scope 9 {
                    debug i => _44;
                    let mut _50: std::str::Bytes<'_>;
                    let _133: &isize;
                    let _134: &isize;
                    let mut _150: &isize;
                    scope 10 {
                        debug iter => _50;
                        let _54: u8;
                        scope 11 {
                            debug c => _54;
                            let _58: &u8;
                            let _59: &u8;
                            let _70: &u8;
                            let _71: &u8;
                            let _82: &u8;
                            let _83: &u8;
                            let _94: &u8;
                            let _95: &u8;
                            let _106: &u8;
                            let _107: &u8;
                            let mut _143: &[&str; 2];
                            let mut _144: &[&str; 2];
                            let mut _145: &u8;
                            let mut _146: &u8;
                            let mut _147: &u8;
                            let mut _148: &u8;
                            let mut _149: &u8;
                            scope 12 {
                                debug left_val => _58;
                                debug right_val => _59;
                                let _64: core::panicking::AssertKind;
                                scope 13 {
                                    debug kind => _64;
                                }
                            }
                            scope 14 {
                                debug left_val => _70;
                                debug right_val => _71;
                                let _76: core::panicking::AssertKind;
                                scope 15 {
                                    debug kind => _76;
                                }
                            }
                            scope 16 {
                                debug left_val => _82;
                                debug right_val => _83;
                                let _88: core::panicking::AssertKind;
                                scope 17 {
                                    debug kind => _88;
                                }
                            }
                            scope 18 {
                                debug left_val => _94;
                                debug right_val => _95;
                                let _100: core::panicking::AssertKind;
                                scope 19 {
                                    debug kind => _100;
                                }
                            }
                            scope 20 {
                                debug left_val => _106;
                                debug right_val => _107;
                                let _112: core::panicking::AssertKind;
                                scope 21 {
                                    debug kind => _112;
                                }
                            }
                        }
                    }
                    scope 22 {
                        debug left_val => _133;
                        debug right_val => _134;
                        let _139: core::panicking::AssertKind;
                        scope 23 {
                            debug kind => _139;
                        }
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _153 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _154 = _153 as *const () (PtrToPtr);
        _155 = _154 as usize (Transmute);
        _156 = AlignOf(i32);
        _157 = Sub(_156, const 1_usize);
        _158 = BitAnd(_155, _157);
        _159 = Eq(_158, const 0_usize);
        assert(_159, "misaligned pointer dereference: address must be a multiple of {} but is {}", _156, _155) -> [success: bb52, unwind unreachable];
    }

    bb2: {
        _7 = const 0_i32;
        _9 = &_1;
        _8 = <&Vec<i32> as IntoIterator>::into_iter(move _9) -> [return: bb3, unwind: bb50];
    }

    bb3: {
        _10 = move _8;
        goto -> bb4;
    }

    bb4: {
        _12 = &mut _10;
        _11 = <std::slice::Iter<'_, i32> as Iterator>::next(_12) -> [return: bb5, unwind: bb50];
    }

    bb5: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _14 = ((_11 as Some).0: &i32);
        _142 = const _;
        _17 = _142 as &[&str] (Pointer(Unsize));
        _21 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_14) -> [return: bb9, unwind: bb50];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _152 = const _;
        _25 = _152 as &[&str] (Pointer(Unsize));
        _30 = &_7;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_30) -> [return: bb12, unwind: bb50];
    }

    bb9: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb10, unwind: bb50];
    }

    bb10: {
        _15 = _print(move _16) -> [return: bb11, unwind: bb50];
    }

    bb11: {
        _22 = (*_14);
        _7 = Add(_7, move _22);
        goto -> bb4;
    }

    bb12: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb13, unwind: bb50];
    }

    bb13: {
        _23 = _print(move _24) -> [return: bb14, unwind: bb50];
    }

    bb14: {
        _32 = &_7;
        _151 = const _;
        _31 = (move _32, _151);
        _33 = (_31.0: &i32);
        _34 = (_31.1: &i32);
        _37 = (*_33);
        _38 = (*_34);
        _36 = Eq(move _37, move _38);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<i32, i32>(move _39, _33, _34, move _41) -> bb50;
    }

    bb16: {
        _43 = const "hello there";
        _42 = <str as ToString>::to_string(_43) -> [return: bb17, unwind: bb50];
    }

    bb17: {
        _44 = const 0_isize;
        _49 = &_42;
        _48 = <String as Deref>::deref(move _49) -> [return: bb18, unwind: bb49];
    }

    bb18: {
        _47 = _48;
        _46 = core::str::<impl str>::bytes(move _47) -> [return: bb19, unwind: bb49];
    }

    bb19: {
        _45 = <std::str::Bytes<'_> as IntoIterator>::into_iter(move _46) -> [return: bb20, unwind: bb49];
    }

    bb20: {
        _50 = move _45;
        goto -> bb21;
    }

    bb21: {
        _52 = &mut _50;
        _51 = <std::str::Bytes<'_> as Iterator>::next(_52) -> [return: bb22, unwind: bb49];
    }

    bb22: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [0: bb24, 1: bb23, otherwise: bb7];
    }

    bb23: {
        _54 = ((_51 as Some).0: u8);
        _55 = _44;
        switchInt(move _55) -> [0: bb25, otherwise: bb27];
    }

    bb24: {
        _132 = &_44;
        _150 = const _;
        _131 = (move _132, _150);
        _133 = (_131.0: &isize);
        _134 = (_131.1: &isize);
        _137 = (*_133);
        _138 = (*_134);
        _136 = Eq(move _137, move _138);
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb46, otherwise: bb45];
    }

    bb25: {
        _57 = &_54;
        _149 = const _;
        _56 = (move _57, _149);
        _58 = (_56.0: &u8);
        _59 = (_56.1: &u8);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<u8, u8>(move _64, _58, _59, move _66) -> bb49;
    }

    bb27: {
        _67 = _44;
        switchInt(move _67) -> [1: bb28, otherwise: bb30];
    }

    bb28: {
        _69 = &_54;
        _148 = const _;
        _68 = (move _69, _148);
        _70 = (_68.0: &u8);
        _71 = (_68.1: &u8);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<u8, u8>(move _76, _70, _71, move _78) -> bb49;
    }

    bb30: {
        _79 = _44;
        switchInt(move _79) -> [2: bb31, otherwise: bb33];
    }

    bb31: {
        _81 = &_54;
        _147 = const _;
        _80 = (move _81, _147);
        _82 = (_80.0: &u8);
        _83 = (_80.1: &u8);
        _86 = (*_82);
        _87 = (*_83);
        _85 = Eq(move _86, move _87);
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _88 = core::panicking::AssertKind::Eq;
        _90 = Option::<Arguments<'_>>::None;
        _89 = core::panicking::assert_failed::<u8, u8>(move _88, _82, _83, move _90) -> bb49;
    }

    bb33: {
        _91 = _44;
        switchInt(move _91) -> [3: bb34, otherwise: bb36];
    }

    bb34: {
        _93 = &_54;
        _146 = const _;
        _92 = (move _93, _146);
        _94 = (_92.0: &u8);
        _95 = (_92.1: &u8);
        _98 = (*_94);
        _99 = (*_95);
        _97 = Eq(move _98, move _99);
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<u8, u8>(move _100, _94, _95, move _102) -> bb49;
    }

    bb36: {
        _103 = _44;
        switchInt(move _103) -> [4: bb37, otherwise: bb39];
    }

    bb37: {
        _105 = &_54;
        _145 = const _;
        _104 = (move _105, _145);
        _106 = (_104.0: &u8);
        _107 = (_104.1: &u8);
        _110 = (*_106);
        _111 = (*_107);
        _109 = Eq(move _110, move _111);
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _112 = core::panicking::AssertKind::Eq;
        _114 = Option::<Arguments<'_>>::None;
        _113 = core::panicking::assert_failed::<u8, u8>(move _112, _106, _107, move _114) -> bb49;
    }

    bb39: {
        _44 = Add(_44, const 1_isize);
        _144 = const _;
        _117 = _144 as &[&str] (Pointer(Unsize));
        _122 = &_44;
        _121 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_122) -> [return: bb40, unwind: bb49];
    }

    bb40: {
        _120 = [move _121];
        _119 = &_120;
        _118 = _119 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _116 = Arguments::<'_>::new_v1(move _117, move _118) -> [return: bb41, unwind: bb49];
    }

    bb41: {
        _115 = _print(move _116) -> [return: bb42, unwind: bb49];
    }

    bb42: {
        _143 = const _;
        _125 = _143 as &[&str] (Pointer(Unsize));
        _130 = &_54;
        _129 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_130) -> [return: bb43, unwind: bb49];
    }

    bb43: {
        _128 = [move _129];
        _127 = &_128;
        _126 = _127 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _124 = Arguments::<'_>::new_v1(move _125, move _126) -> [return: bb44, unwind: bb49];
    }

    bb44: {
        _123 = _print(move _124) -> [return: bb53, unwind: bb49];
    }

    bb45: {
        _139 = core::panicking::AssertKind::Eq;
        _141 = Option::<Arguments<'_>>::None;
        _140 = core::panicking::assert_failed::<isize, isize>(move _139, _133, _134, move _141) -> bb49;
    }

    bb46: {
        drop(_42) -> [return: bb47, unwind: bb50];
    }

    bb47: {
        drop(_1) -> [return: bb48, unwind continue];
    }

    bb48: {
        return;
    }

    bb49 (cleanup): {
        drop(_42) -> [return: bb50, unwind terminate];
    }

    bb50 (cleanup): {
        drop(_1) -> [return: bb51, unwind terminate];
    }

    bb51 (cleanup): {
        resume;
    }

    bb52: {
        (*_153) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }

    bb53: {
        goto -> bb21;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'o' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'l' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'l' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'e' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 'h' as u8 (IntToInt);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
