// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:4:11: 4:11
    let mut _1: std::iter::Once<bool>;   // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    let mut _2: std::iter::Once<bool>;   // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    let mut _3: std::iter::Once<bool>;   // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    let mut _4: std::option::Option<bool>; // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    let mut _5: &mut std::iter::Once<bool>; // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    let mut _6: &mut std::iter::Once<bool>; // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    let mut _7: isize;                   // in scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:5: 5:47
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
        let _8: &mut bool;               // in scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:9: 5:19
        scope 2 {
            debug _a => _8;              // in scope 2 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:9: 5:19
        }
    }

    bb0: {
        _2 = once::<bool>(const true) -> bb1; // scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:38
                                         // + literal: Const { ty: fn(bool) -> std::iter::Once<bool> {once::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <std::iter::Once<bool> as IntoIterator>::into_iter(move _2) -> bb2; // scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
                                         // + literal: Const { ty: fn(std::iter::Once<bool>) -> <std::iter::Once<bool> as IntoIterator>::IntoIter {<std::iter::Once<bool> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move _1;                    // scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
        goto -> bb3;                     // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:5: 5:47
    }

    bb3: {
        _6 = &mut _3;                    // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
        _5 = &mut (*_6);                 // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
        _4 = <std::iter::Once<bool> as Iterator>::next(move _5) -> bb4; // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::iter::Once<bool>) -> Option<<std::iter::Once<bool> as Iterator>::Item> {<std::iter::Once<bool> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_4);           // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    }

    bb5: {
        _8 = &mut ((_4 as Some).0: bool); // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:9: 5:19
        goto -> bb3;                     // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:5: 5:47
    }

    bb6: {
        unreachable;                     // scope 1 at ui/for-loop-while/for-loop-mut-ref-element.rs:5:23: 5:44
    }

    bb7: {
        return;                          // scope 0 at ui/for-loop-while/for-loop-mut-ref-element.rs:6:2: 6:2
    }
}
