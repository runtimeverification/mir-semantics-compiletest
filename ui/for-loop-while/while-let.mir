// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_pq() -> BinaryHeap<isize> {
    let mut _0: std::collections::BinaryHeap<isize>; // return place in scope 0 at ui/for-loop-while/while-let.rs:5:17: 5:34
    let mut _1: std::vec::Vec<isize>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _2: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[isize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[isize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: *const [isize; 3];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = const 24_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [isize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = (((_7.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_8) = [const 1_isize, const 2_isize, const 3_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <BinaryHeap<isize> as From<Vec<isize>>>::from(move _1) -> bb3; // scope 0 at ui/for-loop-while/while-let.rs:6:5: 6:34
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:6:5: 6:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<isize>) -> BinaryHeap<isize> {<BinaryHeap<isize> as From<Vec<isize>>>::from}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/for-loop-while/while-let.rs:7:2: 7:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/while-let.rs:9:15: 9:15
    let mut _1: std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:10:9: 10:15
    let mut _3: std::option::Option<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:12:25: 12:33
    let mut _4: &mut std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:12:25: 12:33
    let mut _5: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:12:15: 12:22
    let mut _7: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:13:16: 13:17
    let mut _8: (isize, bool);           // in scope 0 at ui/for-loop-while/while-let.rs:13:9: 13:17
    let mut _9: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:17:10: 17:19
    let mut _27: std::option::Option<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:19:29: 19:37
    let mut _28: &mut std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:19:29: 19:37
    let mut _29: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:19:19: 19:26
    let mut _31: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:20:16: 20:17
    let mut _32: (isize, bool);          // in scope 0 at ui/for-loop-while/while-let.rs:20:9: 20:17
    let mut _33: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:21:12: 21:13
    let mut _34: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _35: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _36: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:27:10: 27:19
    let mut _52: std::option::Option<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:29:30: 29:38
    let mut _53: &mut std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:29:30: 29:38
    let mut _54: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:29:20: 29:27
    let mut _56: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:30:12: 30:13
    let mut _57: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:33:16: 33:17
    let mut _58: (isize, bool);          // in scope 0 at ui/for-loop-while/while-let.rs:33:9: 33:17
    let mut _59: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _61: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _77: std::option::Option<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:39:25: 39:34
    let mut _78: &mut std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:39:25: 39:34
    let mut _79: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:39:15: 39:22
    let mut _82: std::option::Option<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:41:29: 41:38
    let mut _83: &mut std::collections::BinaryHeap<isize>; // in scope 0 at ui/for-loop-while/while-let.rs:41:29: 41:38
    let mut _84: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:41:19: 41:26
    let mut _86: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:42:20: 42:25
    let mut _87: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:42:20: 42:21
    let mut _88: isize;                  // in scope 0 at ui/for-loop-while/while-let.rs:42:24: 42:25
    let mut _89: (isize, bool);          // in scope 0 at ui/for-loop-while/while-let.rs:42:20: 42:25
    let mut _90: (isize, bool);          // in scope 0 at ui/for-loop-while/while-let.rs:42:13: 42:25
    let mut _91: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _92: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _93: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _96: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _97: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _98: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _99: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _101: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _102: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _103: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _104: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _105: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _106: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug pq => _1;                  // in scope 1 at ui/for-loop-while/while-let.rs:10:9: 10:15
        let mut _2: isize;               // in scope 1 at ui/for-loop-while/while-let.rs:11:9: 11:16
        scope 2 {
            debug sum => _2;             // in scope 2 at ui/for-loop-while/while-let.rs:11:9: 11:16
            let _12: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _37: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _38: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _62: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _63: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _76: std::collections::BinaryHeap<isize>; // in scope 2 at ui/for-loop-while/while-let.rs:37:9: 37:16
            let mut _109: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _110: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _111: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug x => _6;           // in scope 3 at ui/for-loop-while/while-let.rs:12:20: 12:21
                let _6: isize;           // in scope 3 at ui/for-loop-while/while-let.rs:12:20: 12:21
            }
            scope 4 {
                debug left_val => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _18;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 6 {
                debug x => _30;          // in scope 6 at ui/for-loop-while/while-let.rs:19:24: 19:25
                let _30: isize;          // in scope 6 at ui/for-loop-while/while-let.rs:19:24: 19:25
            }
            scope 7 {
                debug left_val => _37;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _38;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _43: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _43;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 9 {
                debug x => _55;          // in scope 9 at ui/for-loop-while/while-let.rs:29:25: 29:26
                let _55: isize;          // in scope 9 at ui/for-loop-while/while-let.rs:29:25: 29:26
            }
            scope 10 {
                debug left_val => _62;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _63;  // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _68: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 11 {
                    debug kind => _68;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 12 {
                debug pq1 => _76;        // in scope 12 at ui/for-loop-while/while-let.rs:37:9: 37:16
                let _94: &isize;         // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _95: &isize;         // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _108: &isize;    // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 13 {
                    debug x => _80;      // in scope 13 at ui/for-loop-while/while-let.rs:39:20: 39:21
                    let _80: isize;      // in scope 13 at ui/for-loop-while/while-let.rs:39:20: 39:21
                    let mut _81: std::collections::BinaryHeap<isize>; // in scope 13 at ui/for-loop-while/while-let.rs:40:13: 40:20
                    scope 14 {
                        debug pq2 => _81; // in scope 14 at ui/for-loop-while/while-let.rs:40:13: 40:20
                        scope 15 {
                            debug y => _85; // in scope 15 at ui/for-loop-while/while-let.rs:41:24: 41:25
                            let _85: isize; // in scope 15 at ui/for-loop-while/while-let.rs:41:24: 41:25
                        }
                    }
                }
                scope 16 {
                    debug left_val => _94; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _95; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _100: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 17 {
                        debug kind => _100; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = make_pq() -> bb1;           // scope 0 at ui/for-loop-while/while-let.rs:10:18: 10:27
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:10:18: 10:25
                                         // + literal: Const { ty: fn() -> BinaryHeap<isize> {make_pq}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const 0_isize;              // scope 1 at ui/for-loop-while/while-let.rs:11:19: 11:20
        goto -> bb2;                     // scope 2 at ui/for-loop-while/while-let.rs:12:5: 14:6
    }

    bb2: {
        _4 = &mut _1;                    // scope 3 at ui/for-loop-while/while-let.rs:12:25: 12:33
        _3 = BinaryHeap::<isize>::pop(move _4) -> [return: bb3, unwind: bb43]; // scope 3 at ui/for-loop-while/while-let.rs:12:25: 12:33
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:12:28: 12:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<isize>) -> Option<isize> {BinaryHeap::<isize>::pop}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = discriminant(_3);           // scope 3 at ui/for-loop-while/while-let.rs:12:15: 12:22
        switchInt(move _5) -> [1: bb4, otherwise: bb6]; // scope 3 at ui/for-loop-while/while-let.rs:12:15: 12:22
    }

    bb4: {
        _6 = ((_3 as Some).0: isize);    // scope 3 at ui/for-loop-while/while-let.rs:12:20: 12:21
        _7 = _6;                         // scope 3 at ui/for-loop-while/while-let.rs:13:16: 13:17
        _8 = CheckedAdd(_2, _7);         // scope 3 at ui/for-loop-while/while-let.rs:13:9: 13:17
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _7) -> [success: bb5, unwind: bb43]; // scope 3 at ui/for-loop-while/while-let.rs:13:9: 13:17
    }

    bb5: {
        _2 = move (_8.0: isize);         // scope 3 at ui/for-loop-while/while-let.rs:13:9: 13:17
        goto -> bb2;                     // scope 2 at ui/for-loop-while/while-let.rs:12:5: 14:6
    }

    bb6: {
        _10 = &_2;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _111 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[3])) }
        _11 = _111;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 6_isize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<isize, isize>(move _20, move _21, move _23, move _25) -> bb43; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = make_pq() -> [return: bb9, unwind: bb43]; // scope 2 at ui/for-loop-while/while-let.rs:17:10: 17:19
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:17:10: 17:17
                                         // + literal: Const { ty: fn() -> BinaryHeap<isize> {make_pq}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_1) -> [return: bb46, unwind: bb45]; // scope 2 at ui/for-loop-while/while-let.rs:17:5: 17:7
    }

    bb10: {
        _28 = &mut _1;                   // scope 6 at ui/for-loop-while/while-let.rs:19:29: 19:37
        _27 = BinaryHeap::<isize>::pop(move _28) -> [return: bb11, unwind: bb43]; // scope 6 at ui/for-loop-while/while-let.rs:19:29: 19:37
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:19:32: 19:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<isize>) -> Option<isize> {BinaryHeap::<isize>::pop}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = discriminant(_27);         // scope 6 at ui/for-loop-while/while-let.rs:19:19: 19:26
        switchInt(move _29) -> [1: bb12, otherwise: bb14]; // scope 6 at ui/for-loop-while/while-let.rs:19:19: 19:26
    }

    bb12: {
        _30 = ((_27 as Some).0: isize);  // scope 6 at ui/for-loop-while/while-let.rs:19:24: 19:25
        _31 = _30;                       // scope 6 at ui/for-loop-while/while-let.rs:20:16: 20:17
        _32 = CheckedAdd(_2, _31);       // scope 6 at ui/for-loop-while/while-let.rs:20:9: 20:17
        assert(!move (_32.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _31) -> [success: bb13, unwind: bb43]; // scope 6 at ui/for-loop-while/while-let.rs:20:9: 20:17
    }

    bb13: {
        _2 = move (_32.0: isize);        // scope 6 at ui/for-loop-while/while-let.rs:20:9: 20:17
        _33 = _30;                       // scope 6 at ui/for-loop-while/while-let.rs:21:12: 21:13
        switchInt(move _33) -> [2: bb14, otherwise: bb10]; // scope 6 at ui/for-loop-while/while-let.rs:21:12: 21:18
    }

    bb14: {
        _35 = &_2;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _110 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _36 = _110;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = (move _35, move _36);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_34.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_34.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const 5_isize;             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _43 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<isize, isize>(move _45, move _46, move _48, move _50) -> bb43; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb16: {
        _51 = make_pq() -> [return: bb17, unwind: bb43]; // scope 2 at ui/for-loop-while/while-let.rs:27:10: 27:19
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:27:10: 27:17
                                         // + literal: Const { ty: fn() -> BinaryHeap<isize> {make_pq}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_1) -> [return: bb48, unwind: bb47]; // scope 2 at ui/for-loop-while/while-let.rs:27:5: 27:7
    }

    bb18: {
        _53 = &mut _1;                   // scope 9 at ui/for-loop-while/while-let.rs:29:30: 29:38
        _52 = BinaryHeap::<isize>::pop(move _53) -> [return: bb19, unwind: bb43]; // scope 9 at ui/for-loop-while/while-let.rs:29:30: 29:38
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:29:33: 29:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<isize>) -> Option<isize> {BinaryHeap::<isize>::pop}, val: Value(<ZST>) }
    }

    bb19: {
        _54 = discriminant(_52);         // scope 9 at ui/for-loop-while/while-let.rs:29:20: 29:27
        switchInt(move _54) -> [1: bb20, otherwise: bb23]; // scope 9 at ui/for-loop-while/while-let.rs:29:20: 29:27
    }

    bb20: {
        _55 = ((_52 as Some).0: isize);  // scope 9 at ui/for-loop-while/while-let.rs:29:25: 29:26
        _56 = _55;                       // scope 9 at ui/for-loop-while/while-let.rs:30:12: 30:13
        switchInt(move _56) -> [3: bb18, otherwise: bb21]; // scope 9 at ui/for-loop-while/while-let.rs:30:12: 30:18
    }

    bb21: {
        _57 = _55;                       // scope 9 at ui/for-loop-while/while-let.rs:33:16: 33:17
        _58 = CheckedAdd(_2, _57);       // scope 9 at ui/for-loop-while/while-let.rs:33:9: 33:17
        assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _57) -> [success: bb22, unwind: bb43]; // scope 9 at ui/for-loop-while/while-let.rs:33:9: 33:17
    }

    bb22: {
        _2 = move (_58.0: isize);        // scope 9 at ui/for-loop-while/while-let.rs:33:9: 33:17
        goto -> bb18;                    // scope 2 at ui/for-loop-while/while-let.rs:29:5: 34:6
    }

    bb23: {
        _60 = &_2;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _61 = _109;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _61);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_59.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_59.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = (*_62);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = const 3_isize;             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = Eq(move _66, move _67);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _64 = Not(move _65);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb25, otherwise: bb24]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _68 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<isize, isize>(move _70, move _71, move _73, move _75) -> bb43; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb25: {
        _76 = make_pq() -> [return: bb26, unwind: bb43]; // scope 2 at ui/for-loop-while/while-let.rs:37:19: 37:28
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:37:19: 37:26
                                         // + literal: Const { ty: fn() -> BinaryHeap<isize> {make_pq}, val: Value(<ZST>) }
    }

    bb26: {
        _2 = const 0_isize;              // scope 12 at ui/for-loop-while/while-let.rs:38:5: 38:12
        goto -> bb27;                    // scope 12 at ui/for-loop-while/while-let.rs:39:5: 44:6
    }

    bb27: {
        _78 = &mut _76;                  // scope 13 at ui/for-loop-while/while-let.rs:39:25: 39:34
        _77 = BinaryHeap::<isize>::pop(move _78) -> [return: bb28, unwind: bb42]; // scope 13 at ui/for-loop-while/while-let.rs:39:25: 39:34
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:39:29: 39:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<isize>) -> Option<isize> {BinaryHeap::<isize>::pop}, val: Value(<ZST>) }
    }

    bb28: {
        _79 = discriminant(_77);         // scope 13 at ui/for-loop-while/while-let.rs:39:15: 39:22
        switchInt(move _79) -> [1: bb29, otherwise: bb36]; // scope 13 at ui/for-loop-while/while-let.rs:39:15: 39:22
    }

    bb29: {
        _80 = ((_77 as Some).0: isize);  // scope 13 at ui/for-loop-while/while-let.rs:39:20: 39:21
        _81 = make_pq() -> [return: bb49, unwind: bb42]; // scope 13 at ui/for-loop-while/while-let.rs:40:23: 40:32
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:40:23: 40:30
                                         // + literal: Const { ty: fn() -> BinaryHeap<isize> {make_pq}, val: Value(<ZST>) }
    }

    bb30: {
        _83 = &mut _81;                  // scope 15 at ui/for-loop-while/while-let.rs:41:29: 41:38
        _82 = BinaryHeap::<isize>::pop(move _83) -> [return: bb31, unwind: bb41]; // scope 15 at ui/for-loop-while/while-let.rs:41:29: 41:38
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-let.rs:41:33: 41:36
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<isize>) -> Option<isize> {BinaryHeap::<isize>::pop}, val: Value(<ZST>) }
    }

    bb31: {
        _84 = discriminant(_82);         // scope 15 at ui/for-loop-while/while-let.rs:41:19: 41:26
        switchInt(move _84) -> [1: bb32, otherwise: bb35]; // scope 15 at ui/for-loop-while/while-let.rs:41:19: 41:26
    }

    bb32: {
        _85 = ((_82 as Some).0: isize);  // scope 15 at ui/for-loop-while/while-let.rs:41:24: 41:25
        _87 = _80;                       // scope 15 at ui/for-loop-while/while-let.rs:42:20: 42:21
        _88 = _85;                       // scope 15 at ui/for-loop-while/while-let.rs:42:24: 42:25
        _89 = CheckedMul(_87, _88);      // scope 15 at ui/for-loop-while/while-let.rs:42:20: 42:25
        assert(!move (_89.1: bool), "attempt to compute `{} * {}`, which would overflow", move _87, move _88) -> [success: bb33, unwind: bb41]; // scope 15 at ui/for-loop-while/while-let.rs:42:20: 42:25
    }

    bb33: {
        _86 = move (_89.0: isize);       // scope 15 at ui/for-loop-while/while-let.rs:42:20: 42:25
        _90 = CheckedAdd(_2, _86);       // scope 15 at ui/for-loop-while/while-let.rs:42:13: 42:25
        assert(!move (_90.1: bool), "attempt to compute `{} + {}`, which would overflow", _2, move _86) -> [success: bb34, unwind: bb41]; // scope 15 at ui/for-loop-while/while-let.rs:42:13: 42:25
    }

    bb34: {
        _2 = move (_90.0: isize);        // scope 15 at ui/for-loop-while/while-let.rs:42:13: 42:25
        goto -> bb30;                    // scope 14 at ui/for-loop-while/while-let.rs:41:9: 43:10
    }

    bb35: {
        drop(_81) -> [return: bb27, unwind: bb42]; // scope 13 at ui/for-loop-while/while-let.rs:44:5: 44:6
    }

    bb36: {
        _92 = &_2;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _108 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _93 = _108;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _91 = (move _92, move _93);      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _94 = (_91.0: &isize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _95 = (_91.1: &isize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _98 = (*_94);                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _99 = const 36_isize;            // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _97 = Eq(move _98, move _99);    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _96 = Not(move _97);             // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _96) -> [0: bb38, otherwise: bb37]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _100 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = _94;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _103 = _104;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _95;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = _106;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _101 = core::panicking::assert_failed::<isize, isize>(move _102, move _103, move _105, move _107) -> bb42; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb38: {
        drop(_76) -> [return: bb39, unwind: bb43]; // scope 2 at ui/for-loop-while/while-let.rs:46:1: 46:2
    }

    bb39: {
        drop(_1) -> bb40;                // scope 0 at ui/for-loop-while/while-let.rs:46:1: 46:2
    }

    bb40: {
        return;                          // scope 0 at ui/for-loop-while/while-let.rs:46:2: 46:2
    }

    bb41 (cleanup): {
        drop(_81) -> bb42;               // scope 13 at ui/for-loop-while/while-let.rs:44:5: 44:6
    }

    bb42 (cleanup): {
        drop(_76) -> bb43;               // scope 2 at ui/for-loop-while/while-let.rs:46:1: 46:2
    }

    bb43 (cleanup): {
        drop(_1) -> bb44;                // scope 0 at ui/for-loop-while/while-let.rs:46:1: 46:2
    }

    bb44 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/while-let.rs:9:1: 46:2
    }

    bb45 (cleanup): {
        _1 = move _26;                   // scope 2 at ui/for-loop-while/while-let.rs:17:5: 17:7
        goto -> bb43;                    // scope 2 at ui/for-loop-while/while-let.rs:17:5: 17:7
    }

    bb46: {
        _1 = move _26;                   // scope 2 at ui/for-loop-while/while-let.rs:17:5: 17:7
        _2 = const 0_isize;              // scope 2 at ui/for-loop-while/while-let.rs:18:5: 18:12
        goto -> bb10;                    // scope 2 at ui/for-loop-while/while-let.rs:19:5: 24:6
    }

    bb47 (cleanup): {
        _1 = move _51;                   // scope 2 at ui/for-loop-while/while-let.rs:27:5: 27:7
        goto -> bb43;                    // scope 2 at ui/for-loop-while/while-let.rs:27:5: 27:7
    }

    bb48: {
        _1 = move _51;                   // scope 2 at ui/for-loop-while/while-let.rs:27:5: 27:7
        _2 = const 0_isize;              // scope 2 at ui/for-loop-while/while-let.rs:28:5: 28:12
        goto -> bb18;                    // scope 2 at ui/for-loop-while/while-let.rs:29:5: 34:6
    }

    bb49: {
        goto -> bb30;                    // scope 13 at ui/for-loop-while/while-let.rs:40:23: 40:32
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:32
    let mut _2: (isize, bool);           // in scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:32
    let mut _3: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:27
    let mut _4: (isize, bool);           // in scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:27

    bb0: {
        _4 = CheckedAdd(const 6_isize, const 12_isize); // scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:27
        _3 = move (_4.0: isize);         // scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:27
        _2 = CheckedAdd(_3, const 18_isize); // scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:32
        _1 = move (_2.0: isize);         // scope 0 at ui/for-loop-while/while-let.rs:45:21: 45:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:35:21: 35:22

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/for-loop-while/while-let.rs:35:21: 35:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:25:21: 25:22

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/for-loop-while/while-let.rs:25:21: 25:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/while-let.rs:15:21: 15:22

    bb0: {
        _1 = const 6_isize;              // scope 0 at ui/for-loop-while/while-let.rs:15:21: 15:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
