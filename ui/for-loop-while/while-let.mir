// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_pq() -> BinaryHeap<isize> {
    let mut _0: std::collections::BinaryHeap<isize>;
    let mut _1: std::vec::Vec<isize>;
    let mut _2: std::boxed::Box<[isize]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[isize; 3]>;
    let mut _7: *const [isize; 3];
    let mut _8: *const ();
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    scope 1 {
    }

    bb0: {
        _3 = SizeOf([isize; 3]);
        _4 = AlignOf([isize; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [isize; 3]);
        _7 = (((_6.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]);
        _8 = _7 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(isize);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        _0 = <BinaryHeap<isize> as From<Vec<isize>>>::from(move _1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        (*_7) = [const 1_isize, const 2_isize, const 3_isize];
        _2 = move _6 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::collections::BinaryHeap<isize>;
    let mut _3: std::option::Option<isize>;
    let mut _4: &mut std::collections::BinaryHeap<isize>;
    let mut _5: isize;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: std::collections::BinaryHeap<isize>;
    let mut _19: std::option::Option<isize>;
    let mut _20: &mut std::collections::BinaryHeap<isize>;
    let mut _21: isize;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: std::collections::BinaryHeap<isize>;
    let mut _35: std::option::Option<isize>;
    let mut _36: &mut std::collections::BinaryHeap<isize>;
    let mut _37: isize;
    let mut _39: (&isize, &isize);
    let mut _40: &isize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: isize;
    let mut _46: isize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: std::option::Option<isize>;
    let mut _52: &mut std::collections::BinaryHeap<isize>;
    let mut _53: isize;
    let mut _56: std::option::Option<isize>;
    let mut _57: &mut std::collections::BinaryHeap<isize>;
    let mut _58: isize;
    let mut _60: isize;
    let mut _61: (&isize, &isize);
    let mut _62: &isize;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: isize;
    let mut _68: isize;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug pq => _1;
        let mut _2: isize;
        scope 2 {
            debug sum => _2;
            let _9: &isize;
            let _10: &isize;
            let _25: &isize;
            let _26: &isize;
            let _41: &isize;
            let _42: &isize;
            let mut _50: std::collections::BinaryHeap<isize>;
            let mut _73: &isize;
            let mut _74: &isize;
            let mut _75: &isize;
            scope 3 {
                debug x => _6;
                let _6: isize;
            }
            scope 4 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _15;
                }
            }
            scope 6 {
                debug x => _22;
                let _22: isize;
            }
            scope 7 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _31;
                }
            }
            scope 9 {
                debug x => _38;
                let _38: isize;
            }
            scope 10 {
                debug left_val => _41;
                debug right_val => _42;
                let _47: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _47;
                }
            }
            scope 12 {
                debug pq1 => _50;
                let _63: &isize;
                let _64: &isize;
                let mut _72: &isize;
                scope 13 {
                    debug x => _54;
                    let _54: isize;
                    let mut _55: std::collections::BinaryHeap<isize>;
                    scope 14 {
                        debug pq2 => _55;
                        scope 15 {
                            debug y => _59;
                            let _59: isize;
                        }
                    }
                }
                scope 16 {
                    debug left_val => _63;
                    debug right_val => _64;
                    let _69: core::panicking::AssertKind;
                    scope 17 {
                        debug kind => _69;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = make_pq() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = const 0_isize;
        goto -> bb2;
    }

    bb2: {
        _4 = &mut _1;
        _3 = BinaryHeap::<isize>::pop(move _4) -> [return: bb3, unwind: bb42];
    }

    bb3: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _6 = ((_3 as Some).0: isize);
        _2 = Add(_2, _6);
        goto -> bb2;
    }

    bb5: {
        _8 = &_2;
        _75 = const _;
        _7 = (move _8, _75);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> bb42;
    }

    bb7: {
        _18 = make_pq() -> [return: bb8, unwind: bb42];
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind: bb10];
    }

    bb9: {
        _1 = move _18;
        _2 = const 0_isize;
        goto -> bb11;
    }

    bb10 (cleanup): {
        _1 = move _18;
        goto -> bb42;
    }

    bb11: {
        _20 = &mut _1;
        _19 = BinaryHeap::<isize>::pop(move _20) -> [return: bb12, unwind: bb42];
    }

    bb12: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [1: bb13, otherwise: bb14];
    }

    bb13: {
        _22 = ((_19 as Some).0: isize);
        _2 = Add(_2, _22);
        switchInt(move _22) -> [2: bb14, otherwise: bb11];
    }

    bb14: {
        _24 = &_2;
        _74 = const _;
        _23 = (move _24, _74);
        _25 = (_23.0: &isize);
        _26 = (_23.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> bb42;
    }

    bb16: {
        _34 = make_pq() -> [return: bb17, unwind: bb42];
    }

    bb17: {
        drop(_1) -> [return: bb18, unwind: bb19];
    }

    bb18: {
        _1 = move _34;
        _2 = const 0_isize;
        goto -> bb20;
    }

    bb19 (cleanup): {
        _1 = move _34;
        goto -> bb42;
    }

    bb20: {
        _36 = &mut _1;
        _35 = BinaryHeap::<isize>::pop(move _36) -> [return: bb21, unwind: bb42];
    }

    bb21: {
        _37 = discriminant(_35);
        switchInt(move _37) -> [1: bb22, otherwise: bb24];
    }

    bb22: {
        _38 = ((_35 as Some).0: isize);
        switchInt(move _38) -> [3: bb20, otherwise: bb23];
    }

    bb23: {
        _2 = Add(_2, _38);
        goto -> bb20;
    }

    bb24: {
        _40 = &_2;
        _73 = const _;
        _39 = (move _40, _73);
        _41 = (_39.0: &isize);
        _42 = (_39.1: &isize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<isize, isize>(move _47, _41, _42, move _49) -> bb42;
    }

    bb26: {
        _50 = make_pq() -> [return: bb27, unwind: bb42];
    }

    bb27: {
        _2 = const 0_isize;
        goto -> bb28;
    }

    bb28: {
        _52 = &mut _50;
        _51 = BinaryHeap::<isize>::pop(move _52) -> [return: bb29, unwind: bb41];
    }

    bb29: {
        _53 = discriminant(_51);
        switchInt(move _53) -> [1: bb30, otherwise: bb35];
    }

    bb30: {
        _54 = ((_51 as Some).0: isize);
        _55 = make_pq() -> [return: bb44, unwind: bb41];
    }

    bb31: {
        _57 = &mut _55;
        _56 = BinaryHeap::<isize>::pop(move _57) -> [return: bb32, unwind: bb40];
    }

    bb32: {
        _58 = discriminant(_56);
        switchInt(move _58) -> [1: bb33, otherwise: bb34];
    }

    bb33: {
        _59 = ((_56 as Some).0: isize);
        _60 = Mul(_54, _59);
        _2 = Add(_2, move _60);
        goto -> bb31;
    }

    bb34: {
        drop(_55) -> [return: bb28, unwind: bb41];
    }

    bb35: {
        _62 = &_2;
        _72 = const _;
        _61 = (move _62, _72);
        _63 = (_61.0: &isize);
        _64 = (_61.1: &isize);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<isize, isize>(move _69, _63, _64, move _71) -> bb41;
    }

    bb37: {
        drop(_50) -> [return: bb38, unwind: bb42];
    }

    bb38: {
        drop(_1) -> [return: bb39, unwind continue];
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_55) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_50) -> [return: bb42, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_1) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44: {
        goto -> bb31;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;
    let mut _2: isize;

    bb0: {
        _2 = Add(const 6_isize, const 12_isize);
        _1 = Add(move _2, const 18_isize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 6_isize;
        _0 = &_1;
        return;
    }
}
