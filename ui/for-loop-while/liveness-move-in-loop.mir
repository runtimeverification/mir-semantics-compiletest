// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn take(_1: isize) -> isize {
    debug x => _1;                       // in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:6:9: 6:10
    let mut _0: isize;                   // return place in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:6:22: 6:27

    bb0: {
        _0 = _1;                         // scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:6:29: 6:30
        return;                          // scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:6:31: 6:31
    }
}

fn the_loop() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:8:15: 8:15
    let mut _1: std::vec::Vec<isize>;    // in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:9:9: 9:17
    let _3: ();                          // in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:13:13: 13:31
    let mut _4: &mut std::vec::Vec<isize>; // in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:13:13: 13:31
    let mut _5: isize;                   // in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:13:23: 13:30
    let mut _6: isize;                   // in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:13:28: 13:29
    scope 1 {
        debug list => _1;                // in scope 1 at ui/for-loop-while/liveness-move-in-loop.rs:9:9: 9:17
        let _2: isize;                   // in scope 1 at ui/for-loop-while/liveness-move-in-loop.rs:11:13: 11:14
        scope 2 {
            debug x => _2;               // in scope 2 at ui/for-loop-while/liveness-move-in-loop.rs:11:13: 11:14
        }
    }

    bb0: {
        _1 = Vec::<isize>::new() -> bb1; // scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:9:20: 9:30
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-move-in-loop.rs:9:20: 9:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const 5_isize;              // scope 1 at ui/for-loop-while/liveness-move-in-loop.rs:11:17: 11:18
        _4 = &mut _1;                    // scope 2 at ui/for-loop-while/liveness-move-in-loop.rs:13:13: 13:31
        _6 = _2;                         // scope 2 at ui/for-loop-while/liveness-move-in-loop.rs:13:28: 13:29
        _5 = take(move _6) -> [return: bb2, unwind: bb3]; // scope 2 at ui/for-loop-while/liveness-move-in-loop.rs:13:23: 13:30
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-move-in-loop.rs:13:23: 13:27
                                         // + literal: Const { ty: fn(isize) -> isize {take}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Vec::<isize>::push(move _4, move _5) -> [return: bb5, unwind: bb3]; // scope 2 at ui/for-loop-while/liveness-move-in-loop.rs:13:13: 13:31
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-move-in-loop.rs:13:18: 13:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<isize>, isize) {Vec::<isize>::push}, val: Value(<ZST>) }
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:18:1: 18:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:8:1: 18:2
    }

    bb5: {
        goto -> bb1;                     // scope 2 at ui/for-loop-while/liveness-move-in-loop.rs:13:13: 13:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:20:15: 20:15

    bb0: {
        return;                          // scope 0 at ui/for-loop-while/liveness-move-in-loop.rs:20:17: 20:17
    }
}
