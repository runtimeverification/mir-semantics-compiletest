// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn label_break(_1: bool, _2: bool) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let mut _3: u32;
    scope 1 {
        debug v => _3;
    }

    bb0: {
        _3 = const 0_u32;
        _3 = const 1_u32;
        switchInt(_1) -> [0: bb1, otherwise: bb3];
    }

    bb1: {
        _3 = const 2_u32;
        switchInt(_2) -> [0: bb2, otherwise: bb3];
    }

    bb2: {
        _3 = const 3_u32;
        goto -> bb3;
    }

    bb3: {
        _0 = _3;
        return;
    }
}

fn break_value(_1: bool, _2: bool) -> u32 {
    debug a => _1;
    debug b => _2;
    let mut _0: u32;
    let _3: u32;
    scope 1 {
        debug result => _3;
    }

    bb0: {
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _3 = const 1_u32;
        goto -> bb5;
    }

    bb2: {
        switchInt(_2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = const 2_u32;
        goto -> bb5;
    }

    bb4: {
        _3 = const 3_u32;
        goto -> bb5;
    }

    bb5: {
        _0 = _3;
        return;
    }
}

fn label_break_nested() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: bool;
    let mut _5: bool;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[&str; 1];
    let mut _10: &[&str; 1];

    bb0: {
        _10 = const _;
        _3 = _10 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = const false;
        switchInt(move _4) -> [0: bb3, otherwise: bb6];
    }

    bb3: {
        _5 = const false;
        switchInt(move _5) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _9 = const _;
        _8 = _9 as &[&str] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_const(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = _print(move _7) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in label_break_nested: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in label_break_nested: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hi\n"];
        _0 = &_1;
        return;
    }
}

fn label_break_mixed(_1: u32) -> u32 {
    debug v => _1;
    let mut _0: u32;
    let mut _2: u32;
    let mut _3: u32;
    let mut _4: (&u32, &u32);
    let mut _5: &u32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: (&u32, &u32);
    let mut _19: &u32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: u32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: u32;
    let mut _32: !;
    scope 1 {
        debug r => _2;
        let _6: &u32;
        let _7: &u32;
        let _20: &u32;
        let _21: &u32;
        let mut _33: &u32;
        let mut _34: &u32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
    }

    bb0: {
        _2 = const 0_u32;
        switchInt(move _1) -> [0: bb14, otherwise: bb1];
    }

    bb1: {
        _3 = _2;
        switchInt(move _3) -> [1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = &_2;
        _34 = const _;
        _4 = (move _5, _34);
        _6 = (_4.0: &u32);
        _7 = (_4.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb3: {
        _2 = Add(_2, const 1_u32);
        goto -> bb1;
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb5: {
        switchInt(move _1) -> [1: bb14, otherwise: bb6];
    }

    bb6: {
        _16 = _2;
        _15 = Eq(_1, move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb14];
    }

    bb7: {
        _17 = _2;
        switchInt(move _17) -> [5: bb8, otherwise: bb9];
    }

    bb8: {
        _19 = &_2;
        _33 = const _;
        _18 = (move _19, _33);
        _20 = (_18.0: &u32);
        _21 = (_18.1: &u32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb11, otherwise: bb10];
    }

    bb9: {
        _2 = Add(_2, const 1_u32);
        goto -> bb6;
    }

    bb10: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u32, u32>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb11: {
        _31 = _2;
        _30 = Gt(_1, move _31);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _32 = core::panicking::panic(const "assertion failed: v > r") -> unwind continue;
    }

    bb13: {
        _0 = _1;
        goto -> bb15;
    }

    bb14: {
        _0 = _2;
        goto -> bb15;
    }

    bb15: {
        return;
    }
}

promoted[0] in label_break_mixed: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 5_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in label_break_mixed: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

fn label_break_match(_1: u8, _2: u8, _3: i8) -> () {
    debug c => _1;
    debug xe => _2;
    debug ye => _3;
    let mut _0: ();
    let mut _4: u8;
    let mut _8: u8;
    let mut _9: u8;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let mut _13: bool;
    let mut _16: u8;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let mut _19: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&i8, &i8);
    let mut _30: &i8;
    let mut _31: &i8;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: i8;
    let mut _37: i8;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _4;
        let _5: i8;
        let _6: u8;
        let _7: &u8;
        let _14: u8;
        let _15: &u8;
        scope 2 {
            debug y => _5;
            let _20: &u8;
            let _21: &u8;
            let _32: &i8;
            let _33: &i8;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug left_val => _32;
                debug right_val => _33;
                let _38: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _38;
                }
            }
        }
        scope 3 {
            debug v => _6;
            debug v => _7;
        }
        scope 4 {
            debug v => _14;
            debug v => _15;
        }
    }

    bb0: {
        _4 = const 0_u8;
        switchInt(_1) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _5 = const 0_i8;
        goto -> bb11;
    }

    bb2: {
        _7 = &_1;
        _9 = (*_7);
        _10 = Eq(const 2_u8, const 0_u8);
        assert(!move _10, "attempt to calculate the remainder of `{}` with a divisor of zero", _9) -> [success: bb3, unwind continue];
    }

    bb3: {
        _8 = Rem(move _9, const 2_u8);
        switchInt(move _8) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        _5 = const 1_i8;
        goto -> bb11;
    }

    bb5: {
        _12 = (*_7);
        _13 = Eq(const 3_u8, const 0_u8);
        assert(!move _13, "attempt to calculate the remainder of `{}` with a divisor of zero", _12) -> [success: bb6, unwind continue];
    }

    bb6: {
        _11 = Rem(move _12, const 3_u8);
        switchInt(move _11) -> [0: bb7, otherwise: bb8];
    }

    bb7: {
        _6 = _1;
        _4 = Add(_4, const 1_u8);
        goto -> bb10;
    }

    bb8: {
        _15 = &_1;
        _16 = (*_15);
        switchInt(move _16) -> [5: bb9, otherwise: bb10];
    }

    bb9: {
        _14 = _1;
        _4 = const 41_u8;
        goto -> bb10;
    }

    bb10: {
        _4 = Add(_4, const 1_u8);
        _5 = const -1_i8;
        goto -> bb11;
    }

    bb11: {
        _18 = &_4;
        _19 = &_2;
        _17 = (move _18, move _19);
        _20 = (_17.0: &u8);
        _21 = (_17.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb13: {
        _30 = &_5;
        _31 = &_3;
        _29 = (move _30, move _31);
        _32 = (_29.0: &i8);
        _33 = (_29.1: &i8);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<i8, i8>(move _38, _32, _33, move _40) -> unwind continue;
    }

    bb15: {
        return;
    }
}

fn label_break_macro() -> () {
    let mut _0: ();
    let _1: u8;
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: u8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: bool;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: u8;
    let mut _22: u8;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 0_u8;
        let _4: &u8;
        let _5: &u8;
        let _13: u8;
        let mut _27: &u8;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug x => _13;
            let _17: &u8;
            let _18: &u8;
            let mut _26: &u8;
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_u8;
        _3 = &_1;
        _27 = const _;
        _2 = (move _3, _27);
        _4 = (_2.0: &u8);
        _5 = (_2.1: &u8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u8, u8>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _14 = const true;
        switchInt(move _14) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = const 1_u8;
        goto -> bb5;
    }

    bb4: {
        _13 = const 0_u8;
        goto -> bb5;
    }

    bb5: {
        _16 = &_13;
        _26 = const _;
        _15 = (move _16, _26);
        _17 = (_15.0: &u8);
        _18 = (_15.1: &u8);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<u8, u8>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb7: {
        return;
    }
}

promoted[0] in label_break_macro: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in label_break_macro: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let _4: &u32;
    let _5: &u32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u32, &u32);
    let mut _14: &u32;
    let _15: u32;
    let _16: &u32;
    let _17: &u32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u32;
    let mut _21: u32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&u32, &u32);
    let mut _26: &u32;
    let _27: u32;
    let _28: &u32;
    let _29: &u32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u32;
    let mut _33: u32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&u32, &u32);
    let mut _38: &u32;
    let _39: u32;
    let _40: &u32;
    let _41: &u32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u32;
    let mut _45: u32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&u32, &u32);
    let mut _50: &u32;
    let _51: u32;
    let _52: &u32;
    let _53: &u32;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: u32;
    let mut _57: u32;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&u32, &u32);
    let mut _62: &u32;
    let _63: u32;
    let _64: &u32;
    let _65: &u32;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u32;
    let mut _69: u32;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&u32, &u32);
    let mut _74: &u32;
    let _75: u32;
    let _76: &u32;
    let _77: &u32;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: u32;
    let mut _81: u32;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&u32, &u32);
    let mut _86: &u32;
    let _87: u32;
    let _88: &u32;
    let _89: &u32;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: u32;
    let mut _93: u32;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&u32, &u32);
    let mut _98: &u32;
    let _99: u32;
    let _100: &u32;
    let _101: &u32;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: u32;
    let mut _105: u32;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&u32, &u32);
    let mut _110: &u32;
    let _111: u32;
    let _112: &u32;
    let _113: &u32;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: u32;
    let mut _117: u32;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&u32, &u32);
    let mut _122: &u32;
    let _123: u32;
    let _124: &u32;
    let _125: &u32;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: u32;
    let mut _129: u32;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&u32, &u32);
    let mut _134: &u32;
    let _135: u32;
    let _136: &u32;
    let _137: &u32;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: u32;
    let mut _141: u32;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&u32, &u32);
    let mut _146: &u32;
    let _147: u32;
    let _148: &u32;
    let _149: &u32;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: u32;
    let mut _153: u32;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let _157: ();
    let _158: ();
    let _159: ();
    let _160: ();
    let _161: ();
    let _162: ();
    let _163: ();
    let mut _164: &u32;
    let mut _165: &u32;
    let mut _166: &u32;
    let mut _167: &u32;
    let mut _168: &u32;
    let mut _169: &u32;
    let mut _170: &u32;
    let mut _171: &u32;
    let mut _172: &u32;
    let mut _173: &u32;
    let mut _174: &u32;
    let mut _175: &u32;
    let mut _176: &u32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _88;
        debug right_val => _89;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }
    scope 17 {
        debug left_val => _100;
        debug right_val => _101;
        let _106: core::panicking::AssertKind;
        scope 18 {
            debug kind => _106;
        }
    }
    scope 19 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 20 {
            debug kind => _118;
        }
    }
    scope 21 {
        debug left_val => _124;
        debug right_val => _125;
        let _130: core::panicking::AssertKind;
        scope 22 {
            debug kind => _130;
        }
    }
    scope 23 {
        debug left_val => _136;
        debug right_val => _137;
        let _142: core::panicking::AssertKind;
        scope 24 {
            debug kind => _142;
        }
    }
    scope 25 {
        debug left_val => _148;
        debug right_val => _149;
        let _154: core::panicking::AssertKind;
        scope 26 {
            debug kind => _154;
        }
    }

    bb0: {
        _3 = label_break(const true, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _176 = const _;
        _1 = (move _2, _176);
        _4 = (_1.0: &u32);
        _5 = (_1.1: &u32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u32, u32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = label_break(const false, const true) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _175 = const _;
        _13 = (move _14, _175);
        _16 = (_13.0: &u32);
        _17 = (_13.1: &u32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u32, u32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _27 = label_break(const false, const false) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _174 = const _;
        _25 = (move _26, _174);
        _28 = (_25.0: &u32);
        _29 = (_25.1: &u32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u32, u32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        _39 = break_value(const true, const false) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = &_39;
        _173 = const _;
        _37 = (move _38, _173);
        _40 = (_37.0: &u32);
        _41 = (_37.1: &u32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u32, u32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb12: {
        _51 = break_value(const false, const true) -> [return: bb13, unwind continue];
    }

    bb13: {
        _50 = &_51;
        _172 = const _;
        _49 = (move _50, _172);
        _52 = (_49.0: &u32);
        _53 = (_49.1: &u32);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<u32, u32>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb15: {
        _63 = break_value(const false, const false) -> [return: bb16, unwind continue];
    }

    bb16: {
        _62 = &_63;
        _171 = const _;
        _61 = (move _62, _171);
        _64 = (_61.0: &u32);
        _65 = (_61.1: &u32);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u32, u32>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb18: {
        _75 = label_break_mixed(const 0_u32) -> [return: bb19, unwind continue];
    }

    bb19: {
        _74 = &_75;
        _170 = const _;
        _73 = (move _74, _170);
        _76 = (_73.0: &u32);
        _77 = (_73.1: &u32);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<u32, u32>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb21: {
        _87 = label_break_mixed(const 1_u32) -> [return: bb22, unwind continue];
    }

    bb22: {
        _86 = &_87;
        _169 = const _;
        _85 = (move _86, _169);
        _88 = (_85.0: &u32);
        _89 = (_85.1: &u32);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<u32, u32>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb24: {
        _99 = label_break_mixed(const 2_u32) -> [return: bb25, unwind continue];
    }

    bb25: {
        _98 = &_99;
        _168 = const _;
        _97 = (move _98, _168);
        _100 = (_97.0: &u32);
        _101 = (_97.1: &u32);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<u32, u32>(move _106, _100, _101, move _108) -> unwind continue;
    }

    bb27: {
        _111 = label_break_mixed(const 3_u32) -> [return: bb28, unwind continue];
    }

    bb28: {
        _110 = &_111;
        _167 = const _;
        _109 = (move _110, _167);
        _112 = (_109.0: &u32);
        _113 = (_109.1: &u32);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<u32, u32>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb30: {
        _123 = label_break_mixed(const 4_u32) -> [return: bb31, unwind continue];
    }

    bb31: {
        _122 = &_123;
        _166 = const _;
        _121 = (move _122, _166);
        _124 = (_121.0: &u32);
        _125 = (_121.1: &u32);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<u32, u32>(move _130, _124, _125, move _132) -> unwind continue;
    }

    bb33: {
        _135 = label_break_mixed(const 5_u32) -> [return: bb34, unwind continue];
    }

    bb34: {
        _134 = &_135;
        _165 = const _;
        _133 = (move _134, _165);
        _136 = (_133.0: &u32);
        _137 = (_133.1: &u32);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<u32, u32>(move _142, _136, _137, move _144) -> unwind continue;
    }

    bb36: {
        _147 = label_break_mixed(const 6_u32) -> [return: bb37, unwind continue];
    }

    bb37: {
        _146 = &_147;
        _164 = const _;
        _145 = (move _146, _164);
        _148 = (_145.0: &u32);
        _149 = (_145.1: &u32);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<u32, u32>(move _154, _148, _149, move _156) -> unwind continue;
    }

    bb39: {
        _157 = label_break_match(const 0_u8, const 0_u8, const 0_i8) -> [return: bb40, unwind continue];
    }

    bb40: {
        _158 = label_break_match(const 1_u8, const 1_u8, const -1_i8) -> [return: bb41, unwind continue];
    }

    bb41: {
        _159 = label_break_match(const 2_u8, const 0_u8, const 1_i8) -> [return: bb42, unwind continue];
    }

    bb42: {
        _160 = label_break_match(const 3_u8, const 2_u8, const -1_i8) -> [return: bb43, unwind continue];
    }

    bb43: {
        _161 = label_break_match(const 5_u8, const 42_u8, const -1_i8) -> [return: bb44, unwind continue];
    }

    bb44: {
        _162 = label_break_match(const 7_u8, const 1_u8, const -1_i8) -> [return: bb45, unwind continue];
    }

    bb45: {
        _163 = label_break_macro() -> [return: bb46, unwind continue];
    }

    bb46: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 6_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 5_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}
