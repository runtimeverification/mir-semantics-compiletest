// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/while-flow-graph.rs:6:15: 6:15
    let _1: isize;                       // in scope 0 at ui/for-loop-while/while-flow-graph.rs:6:21: 6:22
    let mut _2: bool;                    // in scope 0 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
    let mut _3: isize;                   // in scope 0 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:43
    let mut _4: bool;                    // in scope 0 at ui/for-loop-while/while-flow-graph.rs:6:53: 6:60
    let mut _5: isize;                   // in scope 0 at ui/for-loop-while/while-flow-graph.rs:6:53: 6:54
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/for-loop-while/while-flow-graph.rs:6:21: 6:22
        let _6: usize;                   // in scope 1 at ui/for-loop-while/while-flow-graph.rs:6:67: 6:69
        scope 2 {
            debug _y => _6;              // in scope 2 at ui/for-loop-while/while-flow-graph.rs:6:67: 6:69
        }
    }

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/for-loop-while/while-flow-graph.rs:6:32: 6:34
        goto -> bb1;                     // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:36: 6:86
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:43
        switchInt(move _3) -> [10: bb3, otherwise: bb2]; // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
    }

    bb2: {
        _2 = const false;                // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
        goto -> bb4;                     // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
    }

    bb3: {
        _5 = _1;                         // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:53: 6:54
        _4 = Eq(move _5, const 11_isize); // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:53: 6:60
        _2 = move _4;                    // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
        goto -> bb4;                     // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
    }

    bb4: {
        switchInt(move _2) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:42: 6:60
    }

    bb5: {
        _6 = const 3840_usize;           // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:72: 6:83
        goto -> bb1;                     // scope 1 at ui/for-loop-while/while-flow-graph.rs:6:36: 6:86
    }

    bb6: {
        return;                          // scope 0 at ui/for-loop-while/while-flow-graph.rs:6:88: 6:88
    }
}
