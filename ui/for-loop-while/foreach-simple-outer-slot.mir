// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let _2: ();
    let mut _3: [closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18];
    let mut _4: &mut isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &isize;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug sum => _1;
        let _18: &isize;
        let _19: &isize;
        let mut _27: &isize;
        let mut _28: &[&str; 2];
        let mut _29: &[&str; 1];
        scope 2 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 3 {
                debug kind => _24;
            }
        }
    }

    bb0: {
        _1 = const 0_isize;
        _4 = &mut _1;
        _3 = [closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18] { sum: move _4 };
        _2 = first_ten::<[closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18]>(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _29 = const _;
        _7 = _29 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = _print(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _28 = const _;
        _10 = _28 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = _print(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = &_1;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &isize);
        _19 = (_16.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 45_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "sum\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/for-loop-while/foreach-simple-outer-slot.rs:7:15: 7:18], _2: isize) -> () {
    debug i => _2;
    debug sum => (*((*_1).0: &mut isize));
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let mut _14: isize;
    let mut _15: isize;
    let mut _16: &[&str; 2];
    let mut _17: &[&str; 1];
    let mut _18: &mut isize;
    let mut _19: &mut isize;

    bb0: {
        _17 = const _;
        _5 = _17 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = _print(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _16 = const _;
        _8 = _16 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = _print(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = deref_copy ((*_1).0: &mut isize);
        _14 = (*_18);
        _15 = _2;
        _19 = deref_copy ((*_1).0: &mut isize);
        (*_19) = Add(move _14, move _15);
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "main\n"];
        _0 = &_1;
        return;
    }
}

fn first_ten(_1: F) -> () {
    debug it => _1;
    let mut _0: ();
    let mut _2: isize;
    let mut _3: bool;
    let mut _4: isize;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let _8: ();
    let mut _9: &mut F;
    let mut _10: (isize,);
    let mut _11: isize;
    let mut _12: isize;
    scope 1 {
        debug i => _2;
        let mut _13: &[&str; 1];
    }

    bb0: {
        _2 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _4 = _2;
        _3 = Lt(move _4, const 10_isize);
        switchInt(move _3) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _13 = const _;
        _7 = _13 as &[&str] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_const(move _7) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _9 = &mut _1;
        _11 = _2;
        _10 = (move _11,);
        _8 = <F as FnMut<(isize,)>>::call_mut(move _9, move _10) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _12 = _2;
        _2 = Add(move _12, const 1_isize);
        goto -> bb1;
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in first_ten: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "first_ten\n"];
        _0 = &_1;
        return;
    }
}
