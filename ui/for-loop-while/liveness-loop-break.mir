// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/liveness-loop-break.rs:2:11: 2:11
    let _1: i32;                         // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:3:9: 3:10
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
    let mut _5: &[&str; 2];              // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
    let _6: &[&str; 2];                  // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
    let mut _12: &i32;                   // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
    let _13: &i32;                       // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/for-loop-while/liveness-loop-break.rs:3:9: 3:10
        let mut _14: &[&str; 2];         // in scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
    }

    bb0: {
        _1 = const 3_i32;                // scope 1 at ui/for-loop-while/liveness-loop-break.rs:5:9: 5:14
        _14 = const _;                   // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test, [], Some(promoted[0])) }
        _6 = _14;                        // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
        _5 = _6;                         // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
        _13 = &_1;                       // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
        _12 = _13;                       // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _12) -> bb1; // scope 1 at ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-loop-break.rs:8:20: 8:21
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/for-loop-while/liveness-loop-break.rs:9:2: 9:2
    }
}

promoted[0] in test: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
    let mut _1: [&str; 2];               // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
        return;                          // scope 0 at ui/for-loop-while/liveness-loop-break.rs:8:14: 8:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/liveness-loop-break.rs:11:15: 11:15
    let _1: ();                          // in scope 0 at ui/for-loop-while/liveness-loop-break.rs:12:5: 12:11

    bb0: {
        _1 = test() -> bb1;              // scope 0 at ui/for-loop-while/liveness-loop-break.rs:12:5: 12:11
                                         // mir::Constant
                                         // + span: ui/for-loop-while/liveness-loop-break.rs:12:5: 12:9
                                         // + literal: Const { ty: fn() {test}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/for-loop-while/liveness-loop-break.rs:13:2: 13:2
    }
}
