// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/long-while.rs:6:15: 6:15
    let mut _1: isize;                   // in scope 0 at ui/for-loop-while/long-while.rs:7:9: 7:14
    let mut _2: bool;                    // in scope 0 at ui/for-loop-while/long-while.rs:8:11: 8:22
    let mut _3: isize;                   // in scope 0 at ui/for-loop-while/long-while.rs:8:11: 8:12
    let mut _4: (isize, bool);           // in scope 0 at ui/for-loop-while/long-while.rs:9:9: 9:15
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/for-loop-while/long-while.rs:7:9: 7:14
        let _5: i32;                     // in scope 1 at ui/for-loop-while/long-while.rs:10:13: 10:14
        scope 2 {
            debug x => _5;               // in scope 2 at ui/for-loop-while/long-while.rs:10:13: 10:14
        }
    }

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/for-loop-while/long-while.rs:7:24: 7:25
        goto -> bb1;                     // scope 1 at ui/for-loop-while/long-while.rs:8:5: 11:6
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/for-loop-while/long-while.rs:8:11: 8:12
        _2 = Lt(move _3, const 1000000_isize); // scope 1 at ui/for-loop-while/long-while.rs:8:11: 8:22
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 1 at ui/for-loop-while/long-while.rs:8:11: 8:22
    }

    bb2: {
        _4 = CheckedAdd(_1, const 1_isize); // scope 1 at ui/for-loop-while/long-while.rs:9:9: 9:15
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_isize) -> bb3; // scope 1 at ui/for-loop-while/long-while.rs:9:9: 9:15
    }

    bb3: {
        _1 = move (_4.0: isize);         // scope 1 at ui/for-loop-while/long-while.rs:9:9: 9:15
        _5 = const 3_i32;                // scope 1 at ui/for-loop-while/long-while.rs:10:17: 10:18
        goto -> bb1;                     // scope 1 at ui/for-loop-while/long-while.rs:8:5: 11:6
    }

    bb4: {
        return;                          // scope 0 at ui/for-loop-while/long-while.rs:12:2: 12:2
    }
}
