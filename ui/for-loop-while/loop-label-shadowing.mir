// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let mut _2: std::slice::Iter<'_, i32>;
    let mut _4: std::option::Option<&i32>;
    let mut _5: &mut std::slice::Iter<'_, i32>;
    let mut _6: isize;
    let _8: ();
    let mut _9: &mut std::vec::Vec<i32>;
    let mut _10: i32;
    scope 1 {
        debug foo => _1;
        scope 2 {
            let mut _3: std::slice::Iter<'_, i32>;
            let mut _11: &[i32; 3];
            scope 3 {
                debug iter => _3;
                let _7: &i32;
                scope 4 {
                    debug i => _7;
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = const _;
        _2 = <&[i32; 3] as IntoIterator>::into_iter(_11) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _3 = move _2;
        goto -> bb3;
    }

    bb3: {
        _5 = &mut _3;
        _4 = <std::slice::Iter<'_, i32> as Iterator>::next(_5) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _7 = ((_4 as Some).0: &i32);
        _9 = &mut _1;
        _10 = (*_7);
        _8 = Vec::<i32>::push(move _9, move _10) -> [return: bb11, unwind: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        goto -> bb3;
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}
