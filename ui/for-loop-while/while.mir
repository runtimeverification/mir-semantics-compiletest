// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: bool;
    let mut _4: isize;
    let mut _5: isize;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: isize;
    let mut _18: bool;
    let mut _19: isize;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: isize;
    let _24: ();
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &isize;
    scope 1 {
        debug x => _1;
        let mut _2: isize;
        scope 2 {
            debug y => _2;
            let mut _32: &[&str; 1];
            let mut _33: &[&str; 2];
            let mut _34: &[&str; 2];
            let mut _35: &[&str; 1];
        }
    }

    bb0: {
        _1 = const 10_isize;
        _2 = const 0_isize;
        goto -> bb1;
    }

    bb1: {
        _4 = _2;
        _5 = _1;
        _3 = Lt(move _4, move _5);
        switchInt(move _3) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        _33 = const _;
        _8 = _33 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = _print(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _32 = const _;
        _16 = _32 as &[&str] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_const(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = _print(move _15) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = _2;
        _2 = Add(move _17, const 1_isize);
        goto -> bb1;
    }

    bb8: {
        _19 = _1;
        _18 = Gt(move _19, const 0_isize);
        switchInt(move _18) -> [0: bb14, otherwise: bb9];
    }

    bb9: {
        _35 = const _;
        _22 = _35 as &[&str] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_const(move _22) -> [return: bb10, unwind continue];
    }

    bb10: {
        _20 = _print(move _21) -> [return: bb11, unwind continue];
    }

    bb11: {
        _23 = _1;
        _1 = Sub(move _23, const 1_isize);
        _34 = const _;
        _26 = _34 as &[&str] (Pointer(Unsize));
        _31 = &_1;
        _30 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_31) -> [return: bb12, unwind continue];
    }

    bb12: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        _24 = _print(move _25) -> [return: bb8, unwind continue];
    }

    bb14: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "goodbye\n"];
        _0 = &_1;
        return;
    }
}
