// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:2:11: 2:11
    let mut _1: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let _4: ();                          // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let mut _7: &mut std::ops::Range<i32>; // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    let mut _8: isize;                   // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:5: 7:6
    let mut _9: std::ops::Range<i32>;    // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    let mut _10: std::ops::Range<i32>;   // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    let mut _11: std::ops::Range<i32>;   // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    let mut _12: std::option::Option<i32>; // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    let mut _13: &mut std::ops::Range<i32>; // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    let mut _14: &mut std::ops::Range<i32>; // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    let mut _15: isize;                  // in scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:5: 12:6
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
        scope 2 {
        }
    }
    scope 3 {
        debug iter => _11;               // in scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 }; // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
        goto -> bb2;                     // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:5: 7:6
    }

    bb2: {
        _7 = &mut _3;                    // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
        _6 = &mut (*_7);                 // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
        _5 = <std::ops::Range<i32> as Iterator>::next(move _6) -> bb3; // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    }

    bb4: {
        _4 = zeroed::<()>() -> bb2;      // scope 2 at ui/for-loop-while/for-loop-has-unit-body.rs:6:18: 6:36
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-has-unit-body.rs:6:18: 6:34
                                         // + literal: Const { ty: unsafe fn() {zeroed::<()>}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/for-loop-while/for-loop-has-unit-body.rs:4:14: 4:18
    }

    bb6: {
        _10 = std::ops::Range::<i32> { start: const 0_i32, end: const 3_i32 }; // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
        _9 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _10) -> bb7; // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = move _9;                   // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
        goto -> bb8;                     // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:5: 12:6
    }

    bb8: {
        _14 = &mut _11;                  // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
        _13 = &mut (*_14);               // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
        _12 = <std::ops::Range<i32> as Iterator>::next(move _13) -> bb9; // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_12);         // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
        switchInt(move _15) -> [0: bb11, 1: bb8, otherwise: bb10]; // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    }

    bb10: {
        unreachable;                     // scope 3 at ui/for-loop-while/for-loop-has-unit-body.rs:10:14: 10:18
    }

    bb11: {
        return;                          // scope 0 at ui/for-loop-while/for-loop-has-unit-body.rs:13:2: 13:2
    }
}
