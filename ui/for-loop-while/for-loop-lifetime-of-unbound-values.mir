// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:11:1: 11:27>::drop(_1: &mut Flag<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:12:13: 12:22
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:12:24: 12:24
    let mut _2: &std::cell::Cell<bool>;  // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:13:9: 13:26
    let mut _3: &std::cell::Cell<bool>;  // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:12:13: 12:22

    bb0: {
        _3 = deref_copy ((*_1).0: &std::cell::Cell<bool>); // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:13:9: 13:26
        _2 = _3;                         // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:13:9: 13:26
        _0 = Cell::<bool>::set(move _2, const false) -> bb1; // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:13:9: 13:26
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:13:16: 13:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>, bool) {Cell::<bool>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:17:11: 17:11
    let _1: std::cell::Cell<bool>;       // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:18:9: 18:15
    let mut _2: std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    let mut _3: std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    let mut _4: Flag<'_>;                // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:31: 19:44
    let mut _5: &std::cell::Cell<bool>;  // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:36: 19:43
    let _6: &std::cell::Cell<bool>;      // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:36: 19:43
    let mut _8: std::option::Option<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    let mut _9: &mut std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    let mut _10: &mut std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    let mut _11: isize;                  // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:5: 22:6
    let mut _13: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _15: bool;                       // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:20: 21:32
    let mut _16: &std::cell::Cell<bool>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:20: 21:32
    let mut _17: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: bool;                       // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:16: 24:28
    let mut _35: &std::cell::Cell<bool>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:16: 24:28
    let mut _36: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _52: std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    let mut _53: std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    let mut _54: Flag<'_>;               // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:30: 27:42
    let mut _55: &std::cell::Cell<bool>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:35: 27:41
    let _56: &std::cell::Cell<bool>;     // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:35: 27:41
    let mut _58: std::option::Option<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    let mut _59: &mut std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    let mut _60: &mut std::iter::Once<Flag<'_>>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    let mut _61: isize;                  // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:5: 31:6
    let mut _62: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _64: bool;                       // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:20: 30:31
    let mut _65: &std::cell::Cell<bool>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:20: 30:31
    let mut _66: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _81: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _82: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _83: bool;                       // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:16: 33:27
    let mut _84: &std::cell::Cell<bool>; // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:16: 33:27
    let mut _85: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug alive2 => _1;              // in scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:18:9: 18:15
        let mut _7: std::iter::Once<Flag<'_>>; // in scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
        let _37: &bool;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _38: &bool;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _51: std::cell::Cell<bool>;  // in scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:26:9: 26:14
        let mut _102: &bool;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug iter => _7;            // in scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
            let _12: Flag<'_>;           // in scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:9: 19:11
            scope 3 {
                debug _i => _12;         // in scope 3 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:9: 19:11
                let _18: &bool;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _19: &bool;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _103: &bool;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _18; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _19; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _24: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _24; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
        scope 6 {
            debug left_val => _37;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _38;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _43: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _43;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug alive => _51;          // in scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:26:9: 26:14
            let mut _57: std::iter::Once<Flag<'_>>; // in scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
            let _86: &bool;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _87: &bool;              // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _100: &bool;         // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 9 {
                debug iter => _57;       // in scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
                let _67: &bool;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _68: &bool;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _101: &bool;     // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 10 {
                    debug left_val => _67; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _68; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _73: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _73; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
            scope 12 {
                debug left_val => _86;   // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _87;  // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _92: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 13 {
                    debug kind => _92;   // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Cell::<bool>::new(const true) -> bb1; // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:18:18: 18:33
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:18:18: 18:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool) -> Cell<bool> {Cell::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:36: 19:43
        _5 = _6;                         // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:36: 19:43
        _4 = Flag::<'_>(move _5);        // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:31: 19:44
        _3 = once::<Flag<'_>>(move _4) -> bb2; // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:30
                                         // + literal: Const { ty: fn(Flag<'_>) -> std::iter::Once<Flag<'_>> {once::<Flag<'_>>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <std::iter::Once<Flag<'_>> as IntoIterator>::into_iter(move _3) -> bb3; // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
                                         // + literal: Const { ty: fn(std::iter::Once<Flag<'_>>) -> <std::iter::Once<Flag<'_>> as IntoIterator>::IntoIter {<std::iter::Once<Flag<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = move _2;                    // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
        goto -> bb4;                     // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:5: 22:6
    }

    bb4: {
        _10 = &mut _7;                   // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
        _9 = &mut (*_10);                // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
        _8 = <std::iter::Once<Flag<'_>> as Iterator>::next(move _9) -> [return: bb5, unwind: bb35]; // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::iter::Once<Flag<'_>>) -> Option<<std::iter::Once<Flag<'_>> as Iterator>::Item> {<std::iter::Once<Flag<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = discriminant(_8);          // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
        switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    }

    bb6: {
        _12 = move ((_8 as Some).0: Flag<'_>); // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:9: 19:11
        _16 = &_1;                       // scope 3 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:20: 21:32
        _15 = Cell::<bool>::get(move _16) -> [return: bb9, unwind: bb34]; // scope 3 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:20: 21:32
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:27: 21:30
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:19:15: 19:45
    }

    bb8: {
        drop(_7) -> bb12;                // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:22:5: 22:6
    }

    bb9: {
        _14 = &_15;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[3])) }
        _17 = _103;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _17);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_13.0: &bool);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_13.1: &bool);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = (*_18);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = const true;                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = Eq(move _22, move _23);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _20 = Not(move _21);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb11, otherwise: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<bool, bool>(move _26, move _27, move _29, move _31) -> bb34; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_12) -> [return: bb4, unwind: bb35]; // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:22:5: 22:6
    }

    bb12: {
        _35 = &_1;                       // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:16: 24:28
        _34 = Cell::<bool>::get(move _35) -> bb13; // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:16: 24:28
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:23: 24:26
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb13: {
        _33 = &_34;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[2])) }
        _36 = _102;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _36);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_32.0: &bool);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_32.1: &bool);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const false;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb15, otherwise: bb14]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<bool, bool>(move _45, move _46, move _48, move _50); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb15: {
        _51 = Cell::<bool>::new(const true) -> bb16; // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:26:17: 26:32
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:26:17: 26:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(bool) -> Cell<bool> {Cell::<bool>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _56 = &_51;                      // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:35: 27:41
        _55 = _56;                       // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:35: 27:41
        _54 = Flag::<'_>(move _55);      // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:30: 27:42
        _53 = once::<Flag<'_>>(move _54) -> bb17; // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:29
                                         // + literal: Const { ty: fn(Flag<'_>) -> std::iter::Once<Flag<'_>> {once::<Flag<'_>>}, val: Value(<ZST>) }
    }

    bb17: {
        _52 = <std::iter::Once<Flag<'_>> as IntoIterator>::into_iter(move _53) -> bb18; // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
                                         // + literal: Const { ty: fn(std::iter::Once<Flag<'_>>) -> <std::iter::Once<Flag<'_>> as IntoIterator>::IntoIter {<std::iter::Once<Flag<'_>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb18: {
        _57 = move _52;                  // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
        goto -> bb19;                    // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:5: 31:6
    }

    bb19: {
        _60 = &mut _57;                  // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
        _59 = &mut (*_60);               // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
        _58 = <std::iter::Once<Flag<'_>> as Iterator>::next(move _59) -> [return: bb20, unwind: bb33]; // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::iter::Once<Flag<'_>>) -> Option<<std::iter::Once<Flag<'_>> as Iterator>::Item> {<std::iter::Once<Flag<'_>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb20: {
        _61 = discriminant(_58);         // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
        switchInt(move _61) -> [0: bb23, 1: bb21, otherwise: bb22]; // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    }

    bb21: {
        _65 = &_51;                      // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:20: 30:31
        _64 = Cell::<bool>::get(move _65) -> [return: bb24, unwind: bb32]; // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:20: 30:31
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:26: 30:29
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:27:14: 27:43
    }

    bb23: {
        drop(_58) -> [return: bb27, unwind: bb33]; // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:31:5: 31:6
    }

    bb24: {
        _63 = &_64;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const _;                  // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[1])) }
        _66 = _101;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _66);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_62.0: &bool);            // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_62.1: &bool);            // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = (*_67);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = const true;                // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = Eq(move _71, move _72);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _69 = Not(move _70);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb26, otherwise: bb25]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _73 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<bool, bool>(move _75, move _76, move _78, move _80) -> bb32; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_58) -> [return: bb19, unwind: bb33]; // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:31:5: 31:6
    }

    bb27: {
        drop(_57) -> bb28;               // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:31:5: 31:6
    }

    bb28: {
        _84 = &_51;                      // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:16: 33:27
        _83 = Cell::<bool>::get(move _84) -> bb29; // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:16: 33:27
                                         // mir::Constant
                                         // + span: ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:22: 33:25
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb29: {
        _82 = &_83;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _100 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[0])) }
        _85 = _100;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _81 = (move _82, move _85);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_81.0: &bool);            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_81.1: &bool);            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = (*_86);                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = const false;               // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = Eq(move _90, move _91);    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _88 = Not(move _89);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb31, otherwise: bb30]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb30: {
        _92 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<bool, bool>(move _94, move _95, move _97, move _99); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb31: {
        return;                          // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:34:2: 34:2
    }

    bb32 (cleanup): {
        drop(_58) -> bb33;               // scope 9 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:31:5: 31:6
    }

    bb33 (cleanup): {
        drop(_57) -> bb36;               // scope 8 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:31:5: 31:6
    }

    bb34 (cleanup): {
        drop(_12) -> bb35;               // scope 2 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:22:5: 22:6
    }

    bb35 (cleanup): {
        drop(_7) -> bb36;                // scope 1 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:22:5: 22:6
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:17:1: 34:2
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:29: 33:34

    bb0: {
        _1 = const false;                // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:33:29: 33:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:33: 30:37

    bb0: {
        _1 = const true;                 // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:30:33: 30:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:30: 24:35

    bb0: {
        _1 = const false;                // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:24:30: 24:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: bool;                    // in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:34: 21:38

    bb0: {
        _1 = const true;                 // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:21:34: 21:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Flag(_1: &Cell<bool>) -> Flag<'_> {
    let mut _0: Flag<'_>;                // return place in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:9:1: 9:16

    bb0: {
        _0 = Flag::<'_>(move _1);        // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:9:1: 9:16
        return;                          // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:9:1: 9:16
    }
}

// MIR FOR CTFE
fn Flag(_1: &Cell<bool>) -> Flag<'_> {
    let mut _0: Flag<'_>;                // return place in scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:9:1: 9:16

    bb0: {
        _0 = Flag::<'_>(move _1);        // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:9:1: 9:16
        return;                          // scope 0 at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:9:1: 9:16
    }
}
