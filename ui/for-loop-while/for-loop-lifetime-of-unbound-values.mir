// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/for-loop-while/for-loop-lifetime-of-unbound-values.rs:11:1: 11:27>::drop(_1: &mut Flag<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: &std::cell::Cell<bool>;

    bb0: {
        _2 = deref_copy ((*_1).0: &std::cell::Cell<bool>);
        _0 = Cell::<bool>::set(_2, const false) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::cell::Cell<bool>;
    let mut _2: std::iter::Once<Flag<'_>>;
    let mut _3: std::iter::Once<Flag<'_>>;
    let mut _4: Flag<'_>;
    let _5: &std::cell::Cell<bool>;
    let mut _7: std::option::Option<Flag<'_>>;
    let mut _8: &mut std::iter::Once<Flag<'_>>;
    let mut _9: isize;
    let mut _11: (&bool, &bool);
    let mut _12: &bool;
    let _13: bool;
    let mut _14: &std::cell::Cell<bool>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: (&bool, &bool);
    let mut _25: &bool;
    let _26: bool;
    let mut _27: &std::cell::Cell<bool>;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: std::iter::Once<Flag<'_>>;
    let mut _39: std::iter::Once<Flag<'_>>;
    let mut _40: Flag<'_>;
    let _41: &std::cell::Cell<bool>;
    let mut _43: std::option::Option<Flag<'_>>;
    let mut _44: &mut std::iter::Once<Flag<'_>>;
    let mut _45: isize;
    let mut _46: (&bool, &bool);
    let mut _47: &bool;
    let _48: bool;
    let mut _49: &std::cell::Cell<bool>;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: bool;
    let _57: !;
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _59: (&bool, &bool);
    let mut _60: &bool;
    let _61: bool;
    let mut _62: &std::cell::Cell<bool>;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: bool;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug alive2 => _1;
        let mut _6: std::iter::Once<Flag<'_>>;
        let _28: &bool;
        let _29: &bool;
        let _37: std::cell::Cell<bool>;
        let mut _75: &bool;
        scope 2 {
            debug iter => _6;
            let _10: Flag<'_>;
            scope 3 {
                debug _i => _10;
                let _15: &bool;
                let _16: &bool;
                let mut _72: &bool;
                scope 4 {
                    debug left_val => _15;
                    debug right_val => _16;
                    let _21: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _21;
                    }
                }
            }
        }
        scope 6 {
            debug left_val => _28;
            debug right_val => _29;
            let _34: core::panicking::AssertKind;
            scope 7 {
                debug kind => _34;
            }
        }
        scope 8 {
            debug alive => _37;
            let mut _42: std::iter::Once<Flag<'_>>;
            let _63: &bool;
            let _64: &bool;
            let mut _74: &bool;
            scope 9 {
                debug iter => _42;
                let _50: &bool;
                let _51: &bool;
                let mut _73: &bool;
                scope 10 {
                    debug left_val => _50;
                    debug right_val => _51;
                    let _56: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _56;
                    }
                }
            }
            scope 12 {
                debug left_val => _63;
                debug right_val => _64;
                let _69: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _69;
                }
            }
        }
    }

    bb0: {
        _1 = Cell::<bool>::new(const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_1;
        _4 = Flag::<'_>(_5);
        _3 = once::<Flag<'_>>(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = <std::iter::Once<Flag<'_>> as IntoIterator>::into_iter(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = move _2;
        goto -> bb4;
    }

    bb4: {
        _8 = &mut _6;
        _7 = <std::iter::Once<Flag<'_>> as Iterator>::next(_8) -> [return: bb5, unwind: bb34];
    }

    bb5: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _10 = move ((_7 as Some).0: Flag<'_>);
        _14 = &_1;
        _13 = Cell::<bool>::get(move _14) -> [return: bb9, unwind: bb33];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_6) -> [return: bb12, unwind continue];
    }

    bb9: {
        _12 = &_13;
        _72 = const _;
        _11 = (move _12, _72);
        _15 = (_11.0: &bool);
        _16 = (_11.1: &bool);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<bool, bool>(move _21, _15, _16, move _23) -> bb33;
    }

    bb11: {
        drop(_10) -> [return: bb4, unwind: bb34];
    }

    bb12: {
        _27 = &_1;
        _26 = Cell::<bool>::get(move _27) -> [return: bb13, unwind continue];
    }

    bb13: {
        _25 = &_26;
        _75 = const _;
        _24 = (move _25, _75);
        _28 = (_24.0: &bool);
        _29 = (_24.1: &bool);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<bool, bool>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb15: {
        _37 = Cell::<bool>::new(const true) -> [return: bb16, unwind continue];
    }

    bb16: {
        _41 = &_37;
        _40 = Flag::<'_>(_41);
        _39 = once::<Flag<'_>>(move _40) -> [return: bb17, unwind continue];
    }

    bb17: {
        _38 = <std::iter::Once<Flag<'_>> as IntoIterator>::into_iter(move _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        _42 = move _38;
        goto -> bb19;
    }

    bb19: {
        _44 = &mut _42;
        _43 = <std::iter::Once<Flag<'_>> as Iterator>::next(_44) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        _45 = discriminant(_43);
        switchInt(move _45) -> [0: bb22, 1: bb21, otherwise: bb7];
    }

    bb21: {
        _49 = &_37;
        _48 = Cell::<bool>::get(move _49) -> [return: bb23, unwind: bb31];
    }

    bb22: {
        drop(_43) -> [return: bb26, unwind: bb32];
    }

    bb23: {
        _47 = &_48;
        _73 = const _;
        _46 = (move _47, _73);
        _50 = (_46.0: &bool);
        _51 = (_46.1: &bool);
        _54 = (*_50);
        _55 = (*_51);
        _53 = Eq(move _54, move _55);
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _56 = core::panicking::AssertKind::Eq;
        _58 = Option::<Arguments<'_>>::None;
        _57 = core::panicking::assert_failed::<bool, bool>(move _56, _50, _51, move _58) -> bb31;
    }

    bb25: {
        drop(_43) -> [return: bb19, unwind: bb32];
    }

    bb26: {
        drop(_42) -> [return: bb27, unwind continue];
    }

    bb27: {
        _62 = &_37;
        _61 = Cell::<bool>::get(move _62) -> [return: bb28, unwind continue];
    }

    bb28: {
        _60 = &_61;
        _74 = const _;
        _59 = (move _60, _74);
        _63 = (_59.0: &bool);
        _64 = (_59.1: &bool);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<bool, bool>(move _69, _63, _64, move _71) -> unwind continue;
    }

    bb30: {
        return;
    }

    bb31 (cleanup): {
        drop(_43) -> [return: bb32, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_42) -> [return: bb35, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_10) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        drop(_6) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        resume;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

fn Flag(_1: &Cell<bool>) -> Flag<'_> {
    let mut _0: Flag<'_>;

    bb0: {
        _0 = Flag::<'_>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Flag(_1: &Cell<bool>) -> Flag<'_> {
    let mut _0: Flag<'_>;

    bb0: {
        _0 = Flag::<'_>(move _1);
        return;
    }
}
