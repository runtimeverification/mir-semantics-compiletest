// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [i32; 100];
    let mut _3: std::slice::Iter<'_, i32>;
    let mut _4: &[i32];
    let _5: &[i32];
    let mut _6: &[i32; 100];
    let mut _8: std::option::Option<&i32>;
    let mut _9: &mut std::slice::Iter<'_, i32>;
    let mut _10: isize;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _2: i32;
        scope 2 {
            debug y => _2;
            let mut _7: std::slice::Iter<'_, i32>;
            let _17: &i32;
            let _18: &i32;
            let mut _26: &i32;
            scope 3 {
                debug iter => _7;
                let _11: &i32;
                scope 4 {
                    debug i => _11;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
        }
    }

    bb0: {
        _1 = [const 1_i32; 100];
        _2 = const 0_i32;
        _6 = &_1;
        _5 = <[i32; 100] as Index<RangeFull>>::index(move _6, const RangeFull) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _5;
        _3 = <&[i32] as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = move _3;
        goto -> bb3;
    }

    bb3: {
        _9 = &mut _7;
        _8 = <std::slice::Iter<'_, i32> as Iterator>::next(_9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = discriminant(_8);
        switchInt(move _10) -> [0: bb8, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _11 = ((_8 as Some).0: &i32);
        _13 = _2;
        _12 = Gt(move _13, const 10_i32);
        switchInt(move _12) -> [0: bb7, otherwise: bb8];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _14 = (*_11);
        _2 = Add(_2, move _14);
        goto -> bb3;
    }

    bb8: {
        _16 = &_2;
        _26 = const _;
        _15 = (move _16, _26);
        _17 = (_15.0: &i32);
        _18 = (_15.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 11_i32;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}
