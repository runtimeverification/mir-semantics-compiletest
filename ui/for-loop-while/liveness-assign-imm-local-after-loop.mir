// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: bool) -> () {
    debug _cond => _1;                   // in scope 0 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:9:9: 9:14
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:9:22: 9:22
    let _2: isize;                       // in scope 0 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:10:9: 10:10
    scope 1 {
        debug v => _2;                   // in scope 1 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:10:9: 10:10
    }

    bb0: {
        _2 = const 1_isize;              // scope 1 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:11:5: 11:10
        goto -> bb1;                     // scope 1 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:12:5: 12:13
    }

    bb1: {
        goto -> bb1;                     // scope 1 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:12:5: 12:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:16:15: 16:15

    bb0: {
        return;                          // scope 0 at ui/for-loop-while/liveness-assign-imm-local-after-loop.rs:18:2: 18:2
    }
}
