// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn never_returns() -> () {
    let mut _0: ();

    bb0: {
        goto -> bb1;
    }

    bb1: {
        goto -> bb1;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: &[u32];
    let mut _20: i32;
    let _21: &[u32; 3];
    let _22: &[u32; 1];
    let _23: &[u32; 0];
    let mut _24: (&&[u32], &&[u32; 1]);
    let mut _25: &&[u32];
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: bool;
    let mut _35: (&[i32; 2], &[i32; 2]);
    let mut _36: &[i32; 2];
    let mut _39: bool;
    let mut _40: bool;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: bool;
    let mut _46: std::string::String;
    let mut _47: (&[std::string::String; 1], &[&str; 1]);
    let mut _48: &[std::string::String; 1];
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: bool;
    let mut _58: std::string::String;
    let mut _59: std::string::String;
    let _60: &str;
    let mut _61: (&[std::string::String; 1], &[&str; 1]);
    let mut _62: &[std::string::String; 1];
    let mut _65: bool;
    let mut _66: bool;
    let _68: !;
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: bool;
    let mut _72: (&(), &());
    let mut _73: &();
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: bool;
    let mut _83: (&(), &());
    let mut _84: &();
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _93: bool;
    let mut _94: (&(), &());
    let mut _95: &();
    let mut _98: bool;
    let mut _99: bool;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: (&(), &());
    let mut _105: &();
    let mut _108: bool;
    let mut _109: bool;
    let _111: !;
    let mut _112: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _114: (&(), &());
    let mut _115: &();
    let mut _118: bool;
    let mut _119: bool;
    let _121: !;
    let mut _122: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: bool;
    let mut _125: !;
    let mut _126: (&&str, &&str);
    let mut _127: &&str;
    let mut _130: bool;
    let mut _131: bool;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _136: (&i32, &i32);
    let mut _137: &i32;
    let mut _140: bool;
    let mut _141: bool;
    let mut _142: i32;
    let mut _143: i32;
    let _145: !;
    let mut _146: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _148: (&i32, &i32);
    let mut _149: &i32;
    let mut _152: bool;
    let mut _153: bool;
    let mut _154: i32;
    let mut _155: i32;
    let _157: !;
    let mut _158: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: bool;
    let mut _161: !;
    scope 1 {
        debug value => const 13_i32;
        let _6: &i32;
        let _7: &i32;
        let _15: [u32; 3];
        let mut _174: &i32;
        scope 3 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 4 {
                debug kind => _12;
            }
        }
        scope 5 {
            debug x => _15;
            let _16: [u32; 1];
            scope 6 {
                debug y => _16;
                let _17: [u32; 0];
                scope 7 {
                    debug z => const [];
                    let _18: &[u32];
                    scope 8 {
                        debug coerced => _18;
                        let _26: &&[u32];
                        let _27: &&[u32; 1];
                        let _33: [i32; 2];
                        let mut _173: &&[u32; 1];
                        scope 9 {
                            debug left_val => _26;
                            debug right_val => _27;
                            let _30: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _30;
                            }
                        }
                        scope 11 {
                            debug trait_unified => _33;
                            let _37: &[i32; 2];
                            let _38: &[i32; 2];
                            let _44: [std::string::String; 1];
                            let mut _172: &[i32; 2];
                            scope 12 {
                                debug left_val => _37;
                                debug right_val => _38;
                                let _41: core::panicking::AssertKind;
                                scope 13 {
                                    debug kind => _41;
                                }
                            }
                            scope 14 {
                                debug trait_unified_2 => _44;
                                let _49: &[std::string::String; 1];
                                let _50: &[&str; 1];
                                let _56: [std::string::String; 1];
                                let mut _171: &[&str; 1];
                                scope 15 {
                                    debug left_val => _49;
                                    debug right_val => _50;
                                    let _53: core::panicking::AssertKind;
                                    scope 16 {
                                        debug kind => _53;
                                    }
                                }
                                scope 17 {
                                    debug trait_unified_3 => _56;
                                    let _63: &[std::string::String; 1];
                                    let _64: &[&str; 1];
                                    let _70: ();
                                    let mut _170: &[&str; 1];
                                    scope 18 {
                                        debug left_val => _63;
                                        debug right_val => _64;
                                        let _67: core::panicking::AssertKind;
                                        scope 19 {
                                            debug kind => _67;
                                        }
                                    }
                                    scope 20 {
                                        debug regular_break => const ();
                                        let _74: &();
                                        let _75: &();
                                        let _81: ();
                                        let mut _169: &();
                                        scope 21 {
                                            debug left_val => _74;
                                            debug right_val => _75;
                                            let _78: core::panicking::AssertKind;
                                            scope 22 {
                                                debug kind => _78;
                                            }
                                        }
                                        scope 23 {
                                            debug regular_break_2 => const ();
                                            let _85: &();
                                            let _86: &();
                                            let _92: ();
                                            let mut _168: &();
                                            scope 24 {
                                                debug left_val => _85;
                                                debug right_val => _86;
                                                let _89: core::panicking::AssertKind;
                                                scope 25 {
                                                    debug kind => _89;
                                                }
                                            }
                                            scope 26 {
                                                debug regular_break_3 => const ();
                                                let _96: &();
                                                let _97: &();
                                                let _103: ();
                                                let mut _167: &();
                                                scope 27 {
                                                    debug left_val => _96;
                                                    debug right_val => _97;
                                                    let _100: core::panicking::AssertKind;
                                                    scope 28 {
                                                        debug kind => _100;
                                                    }
                                                }
                                                scope 29 {
                                                    debug regular_break_4 => const ();
                                                    let _106: &();
                                                    let _107: &();
                                                    let _113: ();
                                                    let mut _166: &();
                                                    scope 30 {
                                                        debug left_val => _106;
                                                        debug right_val => _107;
                                                        let _110: core::panicking::AssertKind;
                                                        scope 31 {
                                                            debug kind => _110;
                                                        }
                                                    }
                                                    scope 32 {
                                                        debug regular_break_5 => const ();
                                                        let _116: &();
                                                        let _117: &();
                                                        let _123: &str;
                                                        let mut _165: &();
                                                        scope 33 {
                                                            debug left_val => _116;
                                                            debug right_val => _117;
                                                            let _120: core::panicking::AssertKind;
                                                            scope 34 {
                                                                debug kind => _120;
                                                            }
                                                        }
                                                        scope 35 {
                                                            debug nested_break_value => const "hello";
                                                            let _128: &&str;
                                                            let _129: &&str;
                                                            let _135: i32;
                                                            let mut _164: &&str;
                                                            scope 37 {
                                                                debug left_val => _128;
                                                                debug right_val => _129;
                                                                let _132: core::panicking::AssertKind;
                                                                scope 38 {
                                                                    debug kind => _132;
                                                                }
                                                            }
                                                            scope 39 {
                                                                debug break_from_while_cond => const 123_i32;
                                                                let _138: &i32;
                                                                let _139: &i32;
                                                                let _147: i32;
                                                                let mut _163: &i32;
                                                                scope 40 {
                                                                    debug left_val => _138;
                                                                    debug right_val => _139;
                                                                    let _144: core::panicking::AssertKind;
                                                                    scope 41 {
                                                                        debug kind => _144;
                                                                    }
                                                                }
                                                                scope 42 {
                                                                    debug break_from_while_to_outer => const 567_i32;
                                                                    let _150: &i32;
                                                                    let _151: &i32;
                                                                    let _159: bool;
                                                                    let mut _162: &i32;
                                                                    scope 43 {
                                                                        debug left_val => _150;
                                                                        debug right_val => _151;
                                                                        let _156: core::panicking::AssertKind;
                                                                        scope 44 {
                                                                            debug kind => _156;
                                                                        }
                                                                    }
                                                                    scope 45 {
                                                                        debug rust => const true;
                                                                        scope 46 {
                                                                            debug value => const true;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        scope 36 {
                                                            debug _a => const 17_u32;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    scope 2 {
        debug _never => const ZeroSized: !;
    }

    bb0: {
        _2 = Eq(const 1_i32, const 1_i32);
        switchInt(move _2) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = const 13_i32;
        _5 = &_1;
        _174 = const _;
        _4 = (move _5, _174);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb2: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        _15 = [const 1_u32, const 3_u32, const 5_u32];
        _16 = [const 17_u32];
        goto -> bb5;
    }

    bb5: {
        _20 = const 2_i32;
        switchInt(_20) -> [1: bb6, 2: bb7, 3: bb8, otherwise: bb5];
    }

    bb6: {
        _21 = &_15;
        _19 = _21 as &[u32] (Pointer(Unsize));
        goto -> bb9;
    }

    bb7: {
        _22 = &_16;
        _19 = _22 as &[u32] (Pointer(Unsize));
        goto -> bb9;
    }

    bb8: {
        _23 = &_17;
        _19 = _23 as &[u32] (Pointer(Unsize));
        goto -> bb9;
    }

    bb9: {
        _18 = _19;
        _25 = &_18;
        _173 = const _;
        _24 = (move _25, _173);
        _26 = (_24.0: &&[u32]);
        _27 = (_24.1: &&[u32; 1]);
        _29 = <&[u32] as PartialEq<&[u32; 1]>>::eq(_26, _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<&[u32], &[u32; 1]>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb12: {
        _34 = const true;
        switchInt(move _34) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _33 = <[i32; 2] as Default>::default() -> [return: bb15, unwind continue];
    }

    bb14: {
        _33 = [const 13_i32, const 14_i32];
        goto -> bb15;
    }

    bb15: {
        _36 = &_33;
        _172 = const _;
        _35 = (move _36, _172);
        _37 = (_35.0: &[i32; 2]);
        _38 = (_35.1: &[i32; 2]);
        _40 = <[i32; 2] as PartialEq>::eq(_37, _38) -> [return: bb16, unwind continue];
    }

    bb16: {
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<[i32; 2], [i32; 2]>(move _41, _37, _38, move _43) -> unwind continue;
    }

    bb18: {
        _45 = const false;
        switchInt(move _45) -> [0: bb21, otherwise: bb19];
    }

    bb19: {
        _46 = <String as From<&str>>::from(const "Hello") -> [return: bb20, unwind continue];
    }

    bb20: {
        _44 = [move _46];
        goto -> bb22;
    }

    bb21: {
        _44 = <[String; 1] as Default>::default() -> [return: bb22, unwind continue];
    }

    bb22: {
        _48 = &_44;
        _171 = const _;
        _47 = (move _48, _171);
        _49 = (_47.0: &[std::string::String; 1]);
        _50 = (_47.1: &[&str; 1]);
        _52 = <[String; 1] as PartialEq<[&str; 1]>>::eq(_49, _50) -> [return: bb23, unwind: bb69];
    }

    bb23: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<[String; 1], [&str; 1]>(move _53, _49, _50, move _55) -> bb69;
    }

    bb25: {
        _57 = const false;
        switchInt(move _57) -> [0: bb28, otherwise: bb26];
    }

    bb26: {
        _58 = <String as From<&str>>::from(const "Hello") -> [return: bb27, unwind: bb69];
    }

    bb27: {
        _56 = [move _58];
        goto -> bb30;
    }

    bb28: {
        _60 = const "Yes";
        _59 = <&str as Into<String>>::into(_60) -> [return: bb29, unwind: bb69];
    }

    bb29: {
        _56 = [move _59];
        goto -> bb30;
    }

    bb30: {
        _62 = &_56;
        _170 = const _;
        _61 = (move _62, _170);
        _63 = (_61.0: &[std::string::String; 1]);
        _64 = (_61.1: &[&str; 1]);
        _66 = <[String; 1] as PartialEq<[&str; 1]>>::eq(_63, _64) -> [return: bb31, unwind: bb68];
    }

    bb31: {
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _67 = core::panicking::AssertKind::Eq;
        _69 = Option::<Arguments<'_>>::None;
        _68 = core::panicking::assert_failed::<[String; 1], [&str; 1]>(move _67, _63, _64, move _69) -> bb68;
    }

    bb33: {
        _71 = const true;
        switchInt(move _71) -> [0: bb34, otherwise: bb35];
    }

    bb34: {
        _70 = <() as Default>::default() -> [return: bb71, unwind: bb68];
    }

    bb35: {
        _73 = &_70;
        _169 = const _;
        _72 = (move _73, _169);
        _74 = (_72.0: &());
        _75 = (_72.1: &());
        _77 = <() as PartialEq>::eq(_74, _75) -> [return: bb36, unwind: bb68];
    }

    bb36: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<(), ()>(move _78, _74, _75, move _80) -> bb68;
    }

    bb38: {
        _82 = const true;
        switchInt(move _82) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _81 = <() as Default>::default() -> [return: bb72, unwind: bb68];
    }

    bb40: {
        _84 = &_81;
        _168 = const _;
        _83 = (move _84, _168);
        _85 = (_83.0: &());
        _86 = (_83.1: &());
        _88 = <() as PartialEq>::eq(_85, _86) -> [return: bb41, unwind: bb68];
    }

    bb41: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<(), ()>(move _89, _85, _86, move _91) -> bb68;
    }

    bb43: {
        _93 = const true;
        switchInt(move _93) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _92 = <() as Default>::default() -> [return: bb73, unwind: bb68];
    }

    bb45: {
        _95 = &_92;
        _167 = const _;
        _94 = (move _95, _167);
        _96 = (_94.0: &());
        _97 = (_94.1: &());
        _99 = <() as PartialEq>::eq(_96, _97) -> [return: bb46, unwind: bb68];
    }

    bb46: {
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<(), ()>(move _100, _96, _97, move _102) -> bb68;
    }

    bb48: {
        _105 = &_103;
        _166 = const _;
        _104 = (move _105, _166);
        _106 = (_104.0: &());
        _107 = (_104.1: &());
        _109 = <() as PartialEq>::eq(_106, _107) -> [return: bb49, unwind: bb68];
    }

    bb49: {
        _108 = Not(move _109);
        switchInt(move _108) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _110 = core::panicking::AssertKind::Eq;
        _112 = Option::<Arguments<'_>>::None;
        _111 = core::panicking::assert_failed::<(), ()>(move _110, _106, _107, move _112) -> bb68;
    }

    bb51: {
        _115 = &_113;
        _165 = const _;
        _114 = (move _115, _165);
        _116 = (_114.0: &());
        _117 = (_114.1: &());
        _119 = <() as PartialEq>::eq(_116, _117) -> [return: bb52, unwind: bb68];
    }

    bb52: {
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _120 = core::panicking::AssertKind::Eq;
        _122 = Option::<Arguments<'_>>::None;
        _121 = core::panicking::assert_failed::<(), ()>(move _120, _116, _117, move _122) -> bb68;
    }

    bb54: {
        _124 = const true;
        switchInt(move _124) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _123 = const "hello";
        _127 = &_123;
        _164 = const _;
        _126 = (move _127, _164);
        _128 = (_126.0: &&str);
        _129 = (_126.1: &&str);
        _131 = <&str as PartialEq>::eq(_128, _129) -> [return: bb57, unwind: bb68];
    }

    bb56: {
        _125 = begin_panic::<&str>(const "explicit panic") -> bb68;
    }

    bb57: {
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<&str, &str>(move _132, _128, _129, move _134) -> bb68;
    }

    bb59: {
        _135 = const 123_i32;
        _137 = &_135;
        _163 = const _;
        _136 = (move _137, _163);
        _138 = (_136.0: &i32);
        _139 = (_136.1: &i32);
        _142 = (*_138);
        _143 = (*_139);
        _141 = Eq(move _142, move _143);
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _144 = core::panicking::AssertKind::Eq;
        _146 = Option::<Arguments<'_>>::None;
        _145 = core::panicking::assert_failed::<i32, i32>(move _144, _138, _139, move _146) -> bb68;
    }

    bb61: {
        _147 = const 567_i32;
        _149 = &_147;
        _162 = const _;
        _148 = (move _149, _162);
        _150 = (_148.0: &i32);
        _151 = (_148.1: &i32);
        _154 = (*_150);
        _155 = (*_151);
        _153 = Eq(move _154, move _155);
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _156 = core::panicking::AssertKind::Eq;
        _158 = Option::<Arguments<'_>>::None;
        _157 = core::panicking::assert_failed::<i32, i32>(move _156, _150, _151, move _158) -> bb68;
    }

    bb63: {
        _159 = const true;
        _160 = Not(_159);
        switchInt(move _160) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _161 = core::panicking::panic(const "assertion failed: value") -> bb68;
    }

    bb65: {
        drop(_56) -> [return: bb66, unwind: bb69];
    }

    bb66: {
        drop(_44) -> [return: bb67, unwind continue];
    }

    bb67: {
        return;
    }

    bb68 (cleanup): {
        drop(_56) -> [return: bb69, unwind terminate];
    }

    bb69 (cleanup): {
        drop(_44) -> [return: bb70, unwind terminate];
    }

    bb70 (cleanup): {
        resume;
    }

    bb71: {
        goto -> bb35;
    }

    bb72: {
        goto -> bb40;
    }

    bb73: {
        goto -> bb45;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 567_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 123_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Yes"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 0_i32, const 0_i32];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &&[u32; 1] = {
    let mut _0: &&[u32; 1];
    let mut _1: &[u32; 1];
    let mut _2: [u32; 1];

    bb0: {
        _2 = [const 17_u32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 13_i32;
        _0 = &_1;
        return;
    }
}
