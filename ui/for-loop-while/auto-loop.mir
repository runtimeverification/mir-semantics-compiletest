// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _3: std::boxed::Box<[i32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 5]>;
    let mut _8: std::slice::Iter<'_, i32>;
    let mut _9: &std::vec::Vec<i32>;
    let mut _11: std::option::Option<&i32>;
    let mut _12: &mut std::slice::Iter<'_, i32>;
    let mut _13: isize;
    let mut _15: i32;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: *const [i32; 5];
    scope 1 {
        debug sum => _1;
        let _2: std::vec::Vec<i32>;
        let mut _29: *const ();
        let mut _30: usize;
        let mut _31: usize;
        let mut _32: usize;
        let mut _33: usize;
        let mut _34: bool;
        scope 2 {
            debug xs => _2;
            let mut _10: std::slice::Iter<'_, i32>;
            let _18: &i32;
            let _19: &i32;
            let mut _27: &i32;
            scope 4 {
                debug iter => _10;
                let _14: &i32;
                scope 5 {
                    debug x => _14;
                }
            }
            scope 6 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _24;
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _1 = const 0_i32;
        _4 = SizeOf([i32; 5]);
        _5 = AlignOf([i32; 5]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 5]);
        _28 = (((_7.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]);
        _29 = _28 as *const () (PtrToPtr);
        _30 = _29 as usize (Transmute);
        _31 = AlignOf(i32);
        _32 = Sub(_31, const 1_usize);
        _33 = BitAnd(_30, _32);
        _34 = Eq(_33, const 0_usize);
        assert(_34, "misaligned pointer dereference: address must be a multiple of {} but is {}", _31, _30) -> [success: bb14, unwind unreachable];
    }

    bb2: {
        _9 = &_2;
        _8 = <&Vec<i32> as IntoIterator>::into_iter(move _9) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _10 = move _8;
        goto -> bb4;
    }

    bb4: {
        _12 = &mut _10;
        _11 = <std::slice::Iter<'_, i32> as Iterator>::next(_12) -> [return: bb5, unwind: bb12];
    }

    bb5: {
        _13 = discriminant(_11);
        switchInt(move _13) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _14 = ((_11 as Some).0: &i32);
        _15 = (*_14);
        _1 = Add(_1, move _15);
        goto -> bb4;
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _17 = &_1;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> bb12;
    }

    bb10: {
        drop(_2) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        (*_28) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _3 = move _7 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _2 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 15_i32;
        _0 = &_1;
        return;
    }
}
