// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _2: bool;
    let mut _3: isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &isize;
    let mut _12: isize;
    let mut _13: isize;
    let mut _15: std::boxed::Box<[isize]>;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: *mut u8;
    let mut _19: std::boxed::Box<[isize; 5]>;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: *const [isize; 5];
    scope 1 {
        debug i => _1;
        let _14: std::vec::Vec<isize>;
        let _25: &isize;
        let _26: &isize;
        let mut _34: &isize;
        let mut _36: &[&str; 2];
        let mut _38: *const ();
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: usize;
        let mut _43: bool;
        scope 2 {
            debug _v => _14;
            let mut _35: &[&str; 1];
        }
        scope 3 {
        }
        scope 4 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 5 {
                debug kind => _31;
            }
        }
    }

    bb0: {
        _1 = const 90_isize;
        goto -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = Lt(move _3, const 100_isize);
        switchInt(move _2) -> [0: bb11, otherwise: bb2];
    }

    bb2: {
        _36 = const _;
        _6 = _36 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_11) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = _1;
        _1 = Add(move _12, const 1_isize);
        _13 = _1;
        switchInt(move _13) -> [95: bb6, otherwise: bb1];
    }

    bb6: {
        _16 = SizeOf([isize; 5]);
        _17 = AlignOf([isize; 5]);
        _18 = alloc::alloc::exchange_malloc(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _19 = ShallowInitBox(move _18, [isize; 5]);
        _37 = (((_19.0: std::ptr::Unique<[isize; 5]>).0: std::ptr::NonNull<[isize; 5]>).0: *const [isize; 5]);
        _38 = _37 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(isize);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb16, unwind unreachable];
    }

    bb8: {
        _35 = const _;
        _22 = _35 as &[&str] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_const(move _22) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _20 = _print(move _21) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        drop(_14) -> [return: bb11, unwind continue];
    }

    bb11: {
        _24 = &_1;
        _34 = const _;
        _23 = (move _24, _34);
        _25 = (_23.0: &isize);
        _26 = (_23.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_14) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }

    bb16: {
        (*_37) = [const 1_isize, const 2_isize, const 3_isize, const 4_isize, const 5_isize];
        _15 = move _19 as std::boxed::Box<[isize]> (Pointer(Unsize));
        _14 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _15) -> [return: bb8, unwind continue];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 95_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "breaking\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
