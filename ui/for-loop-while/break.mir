// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/break.rs:3:15: 3:15
    let mut _1: i32;                     // in scope 0 at ui/for-loop-while/break.rs:4:9: 4:14
    let mut _2: bool;                    // in scope 0 at ui/for-loop-while/break.rs:5:11: 5:17
    let mut _3: i32;                     // in scope 0 at ui/for-loop-while/break.rs:5:11: 5:12
    let mut _4: (i32, bool);             // in scope 0 at ui/for-loop-while/break.rs:5:20: 5:26
    let mut _5: i32;                     // in scope 0 at ui/for-loop-while/break.rs:5:31: 5:32
    let mut _6: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (i32, bool);            // in scope 0 at ui/for-loop-while/break.rs:7:12: 7:18
    let mut _24: i32;                    // in scope 0 at ui/for-loop-while/break.rs:7:23: 7:24
    let mut _25: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/break.rs:10:14: 10:17
    let mut _44: &[i32; 6];              // in scope 0 at ui/for-loop-while/break.rs:10:14: 10:17
    let mut _46: std::option::Option<&i32>; // in scope 0 at ui/for-loop-while/break.rs:10:14: 10:17
    let mut _47: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/break.rs:10:14: 10:17
    let mut _48: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/break.rs:10:14: 10:17
    let mut _49: isize;                  // in scope 0 at ui/for-loop-while/break.rs:10:5: 12:6
    let mut _51: i32;                    // in scope 0 at ui/for-loop-while/break.rs:11:12: 11:14
    let mut _52: bool;                   // in scope 0 at ui/for-loop-while/break.rs:11:31: 11:49
    let mut _53: bool;                   // in scope 0 at ui/for-loop-while/break.rs:11:39: 11:48
    let mut _54: i32;                    // in scope 0 at ui/for-loop-while/break.rs:11:40: 11:42
    let mut _55: !;                      // in scope 0 at ui/for-loop-while/break.rs:11:31: 11:49
    let mut _56: bool;                   // in scope 0 at ui/for-loop-while/break.rs:14:11: 14:17
    let mut _57: i32;                    // in scope 0 at ui/for-loop-while/break.rs:14:11: 14:12
    let mut _58: (i32, bool);            // in scope 0 at ui/for-loop-while/break.rs:14:20: 14:26
    let mut _59: i32;                    // in scope 0 at ui/for-loop-while/break.rs:14:31: 14:36
    let mut _60: i32;                    // in scope 0 at ui/for-loop-while/break.rs:14:31: 14:32
    let mut _61: bool;                   // in scope 0 at ui/for-loop-while/break.rs:14:56: 14:77
    let mut _62: bool;                   // in scope 0 at ui/for-loop-while/break.rs:14:64: 14:76
    let mut _63: i32;                    // in scope 0 at ui/for-loop-while/break.rs:14:65: 14:70
    let mut _64: i32;                    // in scope 0 at ui/for-loop-while/break.rs:14:65: 14:66
    let mut _65: !;                      // in scope 0 at ui/for-loop-while/break.rs:14:56: 14:77
    let mut _66: (i32, bool);            // in scope 0 at ui/for-loop-while/break.rs:17:9: 17:15
    let mut _67: i32;                    // in scope 0 at ui/for-loop-while/break.rs:17:20: 17:25
    let mut _68: i32;                    // in scope 0 at ui/for-loop-while/break.rs:17:20: 17:21
    let mut _69: bool;                   // in scope 0 at ui/for-loop-while/break.rs:17:45: 17:66
    let mut _70: bool;                   // in scope 0 at ui/for-loop-while/break.rs:17:53: 17:65
    let mut _71: i32;                    // in scope 0 at ui/for-loop-while/break.rs:17:54: 17:59
    let mut _72: i32;                    // in scope 0 at ui/for-loop-while/break.rs:17:54: 17:55
    let mut _73: !;                      // in scope 0 at ui/for-loop-while/break.rs:17:45: 17:66
    let mut _74: bool;                   // in scope 0 at ui/for-loop-while/break.rs:18:12: 18:19
    let mut _75: i32;                    // in scope 0 at ui/for-loop-while/break.rs:18:12: 18:13
    let mut _77: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _78: std::boxed::Box<[i32; 6]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _79: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _80: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _81: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _82: std::boxed::Box<[i32; 6]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _83: std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/break.rs:21:14: 21:17
    let mut _84: &std::vec::Vec<i32>;    // in scope 0 at ui/for-loop-while/break.rs:21:14: 21:17
    let mut _86: std::option::Option<&i32>; // in scope 0 at ui/for-loop-while/break.rs:21:14: 21:17
    let mut _87: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/break.rs:21:14: 21:17
    let mut _88: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/for-loop-while/break.rs:21:14: 21:17
    let mut _89: isize;                  // in scope 0 at ui/for-loop-while/break.rs:21:5: 24:6
    let mut _91: i32;                    // in scope 0 at ui/for-loop-while/break.rs:22:12: 22:18
    let mut _92: i32;                    // in scope 0 at ui/for-loop-while/break.rs:22:12: 22:14
    let mut _93: bool;                   // in scope 0 at ui/for-loop-while/break.rs:23:9: 23:31
    let mut _94: bool;                   // in scope 0 at ui/for-loop-while/break.rs:23:17: 23:30
    let mut _95: i32;                    // in scope 0 at ui/for-loop-while/break.rs:23:18: 23:24
    let mut _96: i32;                    // in scope 0 at ui/for-loop-while/break.rs:23:18: 23:20
    let mut _97: !;                      // in scope 0 at ui/for-loop-while/break.rs:23:9: 23:31
    let mut _100: *const [i32; 6];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/for-loop-while/break.rs:4:9: 4:14
        let _9: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _28: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _29: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _42: [i32; 6];               // in scope 1 at ui/for-loop-while/break.rs:9:9: 9:11
        let mut _98: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _99: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _28;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _29;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _34: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _34;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug xs => _42;             // in scope 6 at ui/for-loop-while/break.rs:9:9: 9:11
            let mut _45: std::slice::Iter<'_, i32>; // in scope 6 at ui/for-loop-while/break.rs:10:14: 10:17
            let _76: std::vec::Vec<i32>; // in scope 6 at ui/for-loop-while/break.rs:20:9: 20:11
            scope 7 {
                debug iter => _45;       // in scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
                let _50: &i32;           // in scope 7 at ui/for-loop-while/break.rs:10:9: 10:10
                scope 8 {
                    debug x => _50;      // in scope 8 at ui/for-loop-while/break.rs:10:9: 10:10
                }
            }
            scope 9 {
                debug ys => _76;         // in scope 9 at ui/for-loop-while/break.rs:20:9: 20:11
                let mut _85: std::slice::Iter<'_, i32>; // in scope 9 at ui/for-loop-while/break.rs:21:14: 21:17
                scope 11 {
                    debug iter => _85;   // in scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
                    let _90: &i32;       // in scope 11 at ui/for-loop-while/break.rs:21:9: 21:10
                    scope 12 {
                        debug x => _90;  // in scope 12 at ui/for-loop-while/break.rs:21:9: 21:10
                    }
                }
            }
            scope 10 {
            }
        }
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/for-loop-while/break.rs:4:17: 4:18
        goto -> bb1;                     // scope 1 at ui/for-loop-while/break.rs:5:5: 5:51
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/for-loop-while/break.rs:5:11: 5:12
        _2 = Lt(move _3, const 20_i32);  // scope 1 at ui/for-loop-while/break.rs:5:11: 5:17
        switchInt(move _2) -> [0: bb4, otherwise: bb2]; // scope 1 at ui/for-loop-while/break.rs:5:11: 5:17
    }

    bb2: {
        _4 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/for-loop-while/break.rs:5:20: 5:26
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb3; // scope 1 at ui/for-loop-while/break.rs:5:20: 5:26
    }

    bb3: {
        _1 = move (_4.0: i32);           // scope 1 at ui/for-loop-while/break.rs:5:20: 5:26
        _5 = _1;                         // scope 1 at ui/for-loop-while/break.rs:5:31: 5:32
        switchInt(move _5) -> [10: bb4, otherwise: bb1]; // scope 1 at ui/for-loop-while/break.rs:5:31: 5:38
    }

    bb4: {
        _7 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _99 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _99;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 10_i32;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<i32, i32>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/for-loop-while/break.rs:7:12: 7:18
        assert(!move (_23.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb7; // scope 1 at ui/for-loop-while/break.rs:7:12: 7:18
    }

    bb7: {
        _1 = move (_23.0: i32);          // scope 1 at ui/for-loop-while/break.rs:7:12: 7:18
        _24 = _1;                        // scope 1 at ui/for-loop-while/break.rs:7:23: 7:24
        switchInt(move _24) -> [20: bb8, otherwise: bb6]; // scope 1 at ui/for-loop-while/break.rs:7:23: 7:30
    }

    bb8: {
        _26 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _27 = _98;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &i32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &i32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 20_i32;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<i32, i32>(move _36, move _37, move _39, move _41); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb10: {
        _42 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32]; // scope 1 at ui/for-loop-while/break.rs:9:14: 9:32
        _44 = &_42;                      // scope 6 at ui/for-loop-while/break.rs:10:14: 10:17
        _43 = <&[i32; 6] as IntoIterator>::into_iter(move _44) -> bb11; // scope 6 at ui/for-loop-while/break.rs:10:14: 10:17
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:10:14: 10:17
                                         // + literal: Const { ty: fn(&[i32; 6]) -> <&[i32; 6] as IntoIterator>::IntoIter {<&[i32; 6] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb11: {
        _45 = move _43;                  // scope 6 at ui/for-loop-while/break.rs:10:14: 10:17
        goto -> bb12;                    // scope 7 at ui/for-loop-while/break.rs:10:5: 12:6
    }

    bb12: {
        _48 = &mut _45;                  // scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
        _47 = &mut (*_48);               // scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
        _46 = <std::slice::Iter<'_, i32> as Iterator>::next(move _47) -> bb13; // scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:10:14: 10:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb13: {
        _49 = discriminant(_46);         // scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
        switchInt(move _49) -> [0: bb18, 1: bb14, otherwise: bb15]; // scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
    }

    bb14: {
        _50 = ((_46 as Some).0: &i32);   // scope 7 at ui/for-loop-while/break.rs:10:9: 10:10
        _51 = (*_50);                    // scope 8 at ui/for-loop-while/break.rs:11:12: 11:14
        switchInt(move _51) -> [3: bb18, otherwise: bb16]; // scope 8 at ui/for-loop-while/break.rs:11:12: 11:19
    }

    bb15: {
        unreachable;                     // scope 7 at ui/for-loop-while/break.rs:10:14: 10:17
    }

    bb16: {
        _54 = (*_50);                    // scope 8 at ui/for-loop-while/break.rs:11:40: 11:42
        _53 = Le(move _54, const 3_i32); // scope 8 at ui/for-loop-while/break.rs:11:39: 11:48
        _52 = Not(move _53);             // scope 8 at ui/for-loop-while/break.rs:11:31: 11:49
        switchInt(move _52) -> [0: bb12, otherwise: bb17]; // scope 8 at ui/for-loop-while/break.rs:11:31: 11:49
    }

    bb17: {
        _55 = core::panicking::panic(const "assertion failed: (*x <= 3)"); // scope 8 at ui/for-loop-while/break.rs:11:31: 11:49
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:11:31: 11:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _1 = const 0_i32;                // scope 6 at ui/for-loop-while/break.rs:13:5: 13:10
        goto -> bb19;                    // scope 6 at ui/for-loop-while/break.rs:14:5: 14:80
    }

    bb19: {
        _57 = _1;                        // scope 6 at ui/for-loop-while/break.rs:14:11: 14:12
        _56 = Lt(move _57, const 10_i32); // scope 6 at ui/for-loop-while/break.rs:14:11: 14:17
        switchInt(move _56) -> [0: bb24, otherwise: bb20]; // scope 6 at ui/for-loop-while/break.rs:14:11: 14:17
    }

    bb20: {
        _58 = CheckedAdd(_1, const 1_i32); // scope 6 at ui/for-loop-while/break.rs:14:20: 14:26
        assert(!move (_58.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb21; // scope 6 at ui/for-loop-while/break.rs:14:20: 14:26
    }

    bb21: {
        _1 = move (_58.0: i32);          // scope 6 at ui/for-loop-while/break.rs:14:20: 14:26
        _60 = _1;                        // scope 6 at ui/for-loop-while/break.rs:14:31: 14:32
        _59 = Rem(move _60, const 2_i32); // scope 6 at ui/for-loop-while/break.rs:14:31: 14:36
        switchInt(move _59) -> [0: bb19, otherwise: bb22]; // scope 6 at ui/for-loop-while/break.rs:14:31: 14:41
    }

    bb22: {
        _64 = _1;                        // scope 6 at ui/for-loop-while/break.rs:14:65: 14:66
        _63 = Rem(move _64, const 2_i32); // scope 6 at ui/for-loop-while/break.rs:14:65: 14:70
        _62 = Ne(move _63, const 0_i32); // scope 6 at ui/for-loop-while/break.rs:14:64: 14:76
        _61 = Not(move _62);             // scope 6 at ui/for-loop-while/break.rs:14:56: 14:77
        switchInt(move _61) -> [0: bb19, otherwise: bb23]; // scope 6 at ui/for-loop-while/break.rs:14:56: 14:77
    }

    bb23: {
        _65 = core::panicking::panic(const "assertion failed: (i % 2 != 0)"); // scope 6 at ui/for-loop-while/break.rs:14:56: 14:77
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:14:56: 14:77
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _1 = const 0_i32;                // scope 6 at ui/for-loop-while/break.rs:15:5: 15:10
        goto -> bb25;                    // scope 6 at ui/for-loop-while/break.rs:16:5: 19:6
    }

    bb25: {
        _66 = CheckedAdd(_1, const 1_i32); // scope 6 at ui/for-loop-while/break.rs:17:9: 17:15
        assert(!move (_66.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb26; // scope 6 at ui/for-loop-while/break.rs:17:9: 17:15
    }

    bb26: {
        _1 = move (_66.0: i32);          // scope 6 at ui/for-loop-while/break.rs:17:9: 17:15
        _68 = _1;                        // scope 6 at ui/for-loop-while/break.rs:17:20: 17:21
        _67 = Rem(move _68, const 2_i32); // scope 6 at ui/for-loop-while/break.rs:17:20: 17:25
        switchInt(move _67) -> [0: bb25, otherwise: bb27]; // scope 6 at ui/for-loop-while/break.rs:17:20: 17:30
    }

    bb27: {
        _72 = _1;                        // scope 6 at ui/for-loop-while/break.rs:17:54: 17:55
        _71 = Rem(move _72, const 2_i32); // scope 6 at ui/for-loop-while/break.rs:17:54: 17:59
        _70 = Ne(move _71, const 0_i32); // scope 6 at ui/for-loop-while/break.rs:17:53: 17:65
        _69 = Not(move _70);             // scope 6 at ui/for-loop-while/break.rs:17:45: 17:66
        switchInt(move _69) -> [0: bb29, otherwise: bb28]; // scope 6 at ui/for-loop-while/break.rs:17:45: 17:66
    }

    bb28: {
        _73 = core::panicking::panic(const "assertion failed: (i % 2 != 0)"); // scope 6 at ui/for-loop-while/break.rs:17:45: 17:66
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:17:45: 17:66
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb29: {
        _75 = _1;                        // scope 6 at ui/for-loop-while/break.rs:18:12: 18:13
        _74 = Ge(move _75, const 10_i32); // scope 6 at ui/for-loop-while/break.rs:18:12: 18:19
        switchInt(move _74) -> [0: bb25, otherwise: bb30]; // scope 6 at ui/for-loop-while/break.rs:18:12: 18:19
    }

    bb30: {
        _79 = const 24_usize;            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _80 = const 4_usize;             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _81 = alloc::alloc::exchange_malloc(move _79, move _80) -> bb31; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb31: {
        _82 = ShallowInitBox(move _81, [i32; 6]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _100 = (((_82.0: std::ptr::Unique<[i32; 6]>).0: std::ptr::NonNull<[i32; 6]>).0: *const [i32; 6]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_100) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _78 = move _82;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _77 = move _78 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _76 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _77) -> bb32; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb32: {
        _84 = &_76;                      // scope 9 at ui/for-loop-while/break.rs:21:14: 21:17
        _83 = <&Vec<i32> as IntoIterator>::into_iter(move _84) -> [return: bb33, unwind: bb42]; // scope 9 at ui/for-loop-while/break.rs:21:14: 21:17
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:21:14: 21:17
                                         // + literal: Const { ty: fn(&Vec<i32>) -> <&Vec<i32> as IntoIterator>::IntoIter {<&Vec<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb33: {
        _85 = move _83;                  // scope 9 at ui/for-loop-while/break.rs:21:14: 21:17
        goto -> bb34;                    // scope 11 at ui/for-loop-while/break.rs:21:5: 24:6
    }

    bb34: {
        _88 = &mut _85;                  // scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
        _87 = &mut (*_88);               // scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
        _86 = <std::slice::Iter<'_, i32> as Iterator>::next(move _87) -> [return: bb35, unwind: bb42]; // scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:21:14: 21:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb35: {
        _89 = discriminant(_86);         // scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
        switchInt(move _89) -> [0: bb38, 1: bb36, otherwise: bb37]; // scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
    }

    bb36: {
        _90 = ((_86 as Some).0: &i32);   // scope 11 at ui/for-loop-while/break.rs:21:9: 21:10
        _92 = (*_90);                    // scope 12 at ui/for-loop-while/break.rs:22:12: 22:14
        _91 = Rem(move _92, const 2_i32); // scope 12 at ui/for-loop-while/break.rs:22:12: 22:18
        switchInt(move _91) -> [0: bb34, otherwise: bb39]; // scope 12 at ui/for-loop-while/break.rs:22:12: 22:23
    }

    bb37: {
        unreachable;                     // scope 11 at ui/for-loop-while/break.rs:21:14: 21:17
    }

    bb38: {
        drop(_76) -> bb41;               // scope 6 at ui/for-loop-while/break.rs:25:1: 25:2
    }

    bb39: {
        _96 = (*_90);                    // scope 12 at ui/for-loop-while/break.rs:23:18: 23:20
        _95 = Rem(move _96, const 2_i32); // scope 12 at ui/for-loop-while/break.rs:23:18: 23:24
        _94 = Ne(move _95, const 0_i32); // scope 12 at ui/for-loop-while/break.rs:23:17: 23:30
        _93 = Not(move _94);             // scope 12 at ui/for-loop-while/break.rs:23:9: 23:31
        switchInt(move _93) -> [0: bb34, otherwise: bb40]; // scope 12 at ui/for-loop-while/break.rs:23:9: 23:31
    }

    bb40: {
        _97 = core::panicking::panic(const "assertion failed: (*x % 2 != 0)") -> bb42; // scope 12 at ui/for-loop-while/break.rs:23:9: 23:31
                                         // mir::Constant
                                         // + span: ui/for-loop-while/break.rs:23:9: 23:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb41: {
        return;                          // scope 0 at ui/for-loop-while/break.rs:25:2: 25:2
    }

    bb42 (cleanup): {
        drop(_76) -> bb43;               // scope 6 at ui/for-loop-while/break.rs:25:1: 25:2
    }

    bb43 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/break.rs:3:1: 25:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/for-loop-while/break.rs:8:19: 8:21

    bb0: {
        _1 = const 20_i32;               // scope 0 at ui/for-loop-while/break.rs:8:19: 8:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/for-loop-while/break.rs:6:19: 6:21

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/for-loop-while/break.rs:6:19: 6:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
