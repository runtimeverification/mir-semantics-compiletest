// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn macros() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    scope 1 {
        debug _a => const 1_i32;
        let mut _5: &[&str; 1];
    }
    scope 2 {
        debug _a => _4;
        let _4: i32;
    }

    bb0: {
        goto -> bb1;
    }

    bb1: {
        _5 = const _;
        _3 = _5 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb1, unwind continue];
    }
}

promoted[0] in macros: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in macros: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    scope 1 {
        debug _a => const 1_i32;
        let mut _4: &[&str; 1];
    }

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "irrefutable pattern\n"];
        _0 = &_1;
        return;
    }
}
