// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/while-cont.rs:3:15: 3:15
    let mut _1: i32;                     // in scope 0 at ui/for-loop-while/while-cont.rs:4:9: 4:14
    let mut _2: bool;                    // in scope 0 at ui/for-loop-while/while-cont.rs:5:11: 5:16
    let mut _3: i32;                     // in scope 0 at ui/for-loop-while/while-cont.rs:5:11: 5:12
    let mut _4: bool;                    // in scope 0 at ui/for-loop-while/while-cont.rs:6:9: 6:25
    let mut _5: bool;                    // in scope 0 at ui/for-loop-while/while-cont.rs:6:17: 6:24
    let mut _6: i32;                     // in scope 0 at ui/for-loop-while/while-cont.rs:6:18: 6:19
    let mut _7: !;                       // in scope 0 at ui/for-loop-while/while-cont.rs:6:9: 6:25
    let _8: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str];                // in scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
    let mut _11: &[&str; 2];             // in scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
    let _12: &[&str; 2];                 // in scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/for-loop-while/while-cont.rs:7:24: 7:25
    let mut _18: &i32;                   // in scope 0 at ui/for-loop-while/while-cont.rs:7:24: 7:25
    let _19: &i32;                       // in scope 0 at ui/for-loop-while/while-cont.rs:7:24: 7:25
    let mut _20: (i32, bool);            // in scope 0 at ui/for-loop-while/while-cont.rs:8:9: 8:15
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/for-loop-while/while-cont.rs:4:9: 4:14
        let mut _21: &[&str; 2];         // in scope 1 at ui/for-loop-while/while-cont.rs:7:18: 7:22
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/for-loop-while/while-cont.rs:4:17: 4:18
        goto -> bb1;                     // scope 1 at ui/for-loop-while/while-cont.rs:5:5: 10:6
    }

    bb1: {
        _3 = _1;                         // scope 1 at ui/for-loop-while/while-cont.rs:5:11: 5:12
        _2 = Gt(move _3, const 0_i32);   // scope 1 at ui/for-loop-while/while-cont.rs:5:11: 5:16
        switchInt(move _2) -> [0: bb9, otherwise: bb2]; // scope 1 at ui/for-loop-while/while-cont.rs:5:11: 5:16
    }

    bb2: {
        _6 = _1;                         // scope 1 at ui/for-loop-while/while-cont.rs:6:18: 6:19
        _5 = Gt(move _6, const 0_i32);   // scope 1 at ui/for-loop-while/while-cont.rs:6:17: 6:24
        _4 = Not(move _5);               // scope 1 at ui/for-loop-while/while-cont.rs:6:9: 6:25
        switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/for-loop-while/while-cont.rs:6:9: 6:25
    }

    bb3: {
        _7 = core::panicking::panic(const "assertion failed: (i > 0)"); // scope 1 at ui/for-loop-while/while-cont.rs:6:9: 6:25
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-cont.rs:6:9: 6:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _21 = const _;                   // scope 1 at ui/for-loop-while/while-cont.rs:7:18: 7:22
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-cont.rs:7:18: 7:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _21;                       // scope 1 at ui/for-loop-while/while-cont.rs:7:18: 7:22
        _11 = _12;                       // scope 1 at ui/for-loop-while/while-cont.rs:7:18: 7:22
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 1 at ui/for-loop-while/while-cont.rs:7:18: 7:22
        _19 = &_1;                       // scope 1 at ui/for-loop-while/while-cont.rs:7:24: 7:25
        _18 = _19;                       // scope 1 at ui/for-loop-while/while-cont.rs:7:24: 7:25
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _18) -> bb5; // scope 1 at ui/for-loop-while/while-cont.rs:7:24: 7:25
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-cont.rs:7:24: 7:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = [move _17];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = &_16;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = _15;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = _print(move _9) -> bb7;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = CheckedSub(_1, const 1_i32); // scope 1 at ui/for-loop-while/while-cont.rs:8:9: 8:15
        assert(!move (_20.1: bool), "attempt to compute `{} - {}`, which would overflow", _1, const 1_i32) -> bb8; // scope 1 at ui/for-loop-while/while-cont.rs:8:9: 8:15
    }

    bb8: {
        _1 = move (_20.0: i32);          // scope 1 at ui/for-loop-while/while-cont.rs:8:9: 8:15
        goto -> bb1;                     // scope 1 at no-location
    }

    bb9: {
        return;                          // scope 0 at ui/for-loop-while/while-cont.rs:11:2: 11:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
    let mut _1: [&str; 2];               // in scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-cont.rs:7:18: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/for-loop-while/while-cont.rs:7:18: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
        return;                          // scope 0 at ui/for-loop-while/while-cont.rs:7:18: 7:22
    }
}
