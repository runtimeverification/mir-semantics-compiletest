// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let mut _2: bool;
    let mut _3: i32;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: i32;
    let mut _7: !;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &i32;
    scope 1 {
        debug i => _1;
        let mut _16: &[&str; 2];
    }

    bb0: {
        _1 = const 1_i32;
        goto -> bb1;
    }

    bb1: {
        _3 = _1;
        _2 = Gt(move _3, const 0_i32);
        switchInt(move _2) -> [0: bb8, otherwise: bb2];
    }

    bb2: {
        _6 = _1;
        _5 = Gt(move _6, const 0_i32);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _7 = core::panicking::panic(const "assertion failed: (i > 0)") -> unwind continue;
    }

    bb4: {
        _16 = const _;
        _10 = _16 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = _print(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _1 = Sub(_1, const 1_i32);
        goto -> bb1;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
