// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:6:1: 6:16>::drop(_1: &mut S) -> () {
    debug self => _1;                    // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:6:27: 6:36
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:6:38: 6:38

    bb0: {
        return;                          // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:6:41: 6:41
    }
}

fn my_panic() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:9:18: 9:19

    bb0: {
        goto -> bb1;                     // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:9:22: 9:29
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:9:22: 9:29
    }
}

fn step(_1: bool) -> () {
    debug f => _1;                       // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:11:13: 11:14
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:11:22: 11:22
    let mut _2: S;                       // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:12:9: 12:14
    let mut _4: bool;                    // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:12: 16:18
    let mut _5: i32;                     // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:12: 16:13
    let mut _6: (i32, bool);             // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:37: 16:43
    let mut _8: bool;                    // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:20:12: 20:13
    let _9: !;                           // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:26:9: 26:19
    let mut _10: bool;                   // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:30:1: 30:2
    scope 1 {
        debug g => _2;                   // in scope 1 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:12:9: 12:14
        let mut _3: i32;                 // in scope 1 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:13:9: 13:14
        scope 2 {
            debug i => _3;               // in scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:13:9: 13:14
            let _7: S;                   // in scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:18:13: 18:15
            scope 3 {
                debug _g => _7;          // in scope 3 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:18:13: 18:15
            }
        }
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:12:9: 12:14
        _10 = const true;                // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:12:17: 12:18
        _3 = const 0_i32;                // scope 1 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:13:17: 13:18
        goto -> bb1;                     // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:14:5: 29:6
    }

    bb1: {
        _5 = _3;                         // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:12: 16:13
        _4 = Gt(move _5, const 10_i32);  // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:12: 16:18
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:12: 16:18
    }

    bb2: {
        drop(_2) -> bb7;                 // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:30:1: 30:2
    }

    bb3: {
        _6 = CheckedAdd(_3, const 1_i32); // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:37: 16:43
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _3, const 1_i32) -> [success: bb4, unwind: bb11]; // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:37: 16:43
    }

    bb4: {
        _3 = move (_6.0: i32);           // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:16:37: 16:43
        _10 = const false;               // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:18:18: 18:19
        _8 = _1;                         // scope 3 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:20:12: 20:13
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 3 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:20:12: 20:13
    }

    bb5: {
        _10 = const true;                // scope 3 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:22:13: 22:14
        drop(_7) -> [return: bb1, unwind: bb11]; // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:29:5: 29:6
    }

    bb6: {
        _9 = my_panic() -> bb8;          // scope 3 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:26:9: 26:19
                                         // mir::Constant
                                         // + span: ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:26:9: 26:17
                                         // + literal: Const { ty: fn() -> ! {my_panic}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = const false;               // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:30:1: 30:2
        return;                          // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:30:2: 30:2
    }

    bb8 (cleanup): {
        drop(_7) -> bb11;                // scope 2 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:29:5: 29:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:11:1: 30:2
    }

    bb10 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:30:1: 30:2
    }

    bb11 (cleanup): {
        switchInt(_10) -> [0: bb9, otherwise: bb10]; // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:30:1: 30:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:32:15: 32:15
    let _1: ();                          // in scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:33:5: 33:15

    bb0: {
        _1 = step(const true) -> bb1;    // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:33:5: 33:15
                                         // mir::Constant
                                         // + span: ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:33:5: 33:9
                                         // + literal: Const { ty: fn(bool) {step}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/for-loop-while/loop-no-reinit-needed-post-bot.rs:34:2: 34:2
    }
}
