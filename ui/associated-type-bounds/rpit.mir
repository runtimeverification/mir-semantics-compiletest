// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_copy(_1: T) -> () {
    debug x => _1;
    let mut _0: ();
    scope 1 {
        debug _x => _1;
        scope 2 {
            debug _x => _1;
        }
    }

    bb0: {
        return;
    }
}

fn assert_static(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn assert_forall_tr2(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-type-bounds/rpit.rs:15:16: 15:21>::clone(_1: &S2) -> S2 {
    debug self => _1;
    let mut _0: S2;

    bb0: {
        return;
    }
}

fn <impl at ui/associated-type-bounds/rpit.rs:17:1: 17:16>::mk(_1: S1) -> S2 {
    debug self => const S1;
    let mut _0: S2;

    bb0: {
        return;
    }
}

fn def_et1() -> impl Tr1<As1 = impl std::marker::Copy> {
    let mut _0: impl Tr1<As1 = impl std::marker::Copy>;

    bb0: {
        return;
    }
}

fn use_et1() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: impl std::marker::Copy;
    let mut _3: impl Tr1<As1 = impl std::marker::Copy>;

    bb0: {
        _3 = def_et1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <impl Tr1<As1 = impl std::marker::Copy> as Tr1>::mk(const ZeroSized: impl Tr1<As1 = impl std::marker::Copy>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = assert_copy::<impl std::marker::Copy>(const ZeroSized: impl std::marker::Copy) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn def_et2() -> impl Tr1<As1 = impl Sized + 'static> {
    let mut _0: impl Tr1<As1 = impl Sized + 'static>;

    bb0: {
        return;
    }
}

fn use_et2() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: impl Sized + 'static;
    let mut _3: impl Tr1<As1 = impl Sized + 'static>;

    bb0: {
        _3 = def_et2() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <impl Tr1<As1 = impl Sized + 'static> as Tr1>::mk(const ZeroSized: impl Tr1<As1 = impl Sized + 'static>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = assert_static::<impl Sized + 'static>(const ZeroSized: impl Sized + 'static) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn def_et3() -> impl Tr1<As1 = impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>>> {
    let mut _0: impl Tr1<As1 = impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>>;

    bb0: {
        return;
    }
}

fn def_et3::<impl at ui/associated-type-bounds/rpit.rs:27:5: 27:19>::mk(_1: def_et3::A) -> std::ops::Range<u8> {
    debug self => const def_et3::A;
    let mut _0: std::ops::Range<u8>;

    bb0: {
        _0 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        return;
    }
}

fn use_et3() -> () {
    let mut _0: ();
    let _1: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _2: &impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let _3: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _4: impl Tr1<As1 = impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>>;
    let mut _6: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _7: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _9: std::option::Option<impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _10: &mut impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _11: isize;
    let mut _14: u8;
    let mut _15: impl std::convert::Into<u8>;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let mut _18: &u8;
    let _19: u8;
    let mut _20: std::iter::Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/rpit.rs:41:31: 41:34]>;
    let mut _21: std::ops::Range<u8>;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: u8;
    let mut _27: u8;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug _0 => _1;
        let mut _5: u8;
        scope 2 {
            debug s => _5;
            let mut _8: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
            let _22: &u8;
            let _23: &u8;
            scope 3 {
                debug iter => _8;
                let _12: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>;
                scope 4 {
                    debug _1 => _12;
                    let _13: impl std::convert::Into<u8>;
                    scope 5 {
                        debug _2 => _13;
                    }
                }
            }
            scope 6 {
                debug left_val => _22;
                debug right_val => _23;
                let _28: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _28;
                }
            }
        }
    }

    bb0: {
        _4 = def_et3() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <impl Tr1<As1 = impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>>> as Tr1>::mk(const ZeroSized: impl Tr1<As1 = impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>>>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _1 = <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Clone>::clone(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = const 0_u8;
        _7 = move _1;
        _6 = <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as IntoIterator>::into_iter(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = move _6;
        goto -> bb5;
    }

    bb5: {
        _10 = &mut _8;
        _9 = <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Iterator>::next(_10) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb9, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _12 = move ((_9 as Some).0: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>);
        _13 = <impl Add<u8, Output = impl Into<u8>> as Add<u8>>::add(move _12, const 1_u8) -> [return: bb10, unwind continue];
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _17 = &_5;
        _21 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        _20 = <std::ops::Range<u8> as Iterator>::map::<u8, [closure@ui/associated-type-bounds/rpit.rs:41:31: 41:34]>(move _21, const ZeroSized: [closure@ui/associated-type-bounds/rpit.rs:41:31: 41:34]) -> [return: bb12, unwind continue];
    }

    bb10: {
        _15 = move _13;
        _14 = <impl Into<u8> as Into<u8>>::into(move _15) -> [return: bb11, unwind continue];
    }

    bb11: {
        _5 = Add(_5, move _14);
        goto -> bb5;
    }

    bb12: {
        _19 = <Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/rpit.rs:41:31: 41:34]> as Iterator>::sum::<u8>(move _20) -> [return: bb13, unwind continue];
    }

    bb13: {
        _18 = &_19;
        _16 = (move _17, move _18);
        _22 = (_16.0: &u8);
        _23 = (_16.1: &u8);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = assert_failed::<u8, u8>(move _28, _22, _23, move _30) -> unwind continue;
    }

    bb15: {
        return;
    }
}

fn use_et3::{closure#0}(_1: &mut [closure@ui/associated-type-bounds/rpit.rs:41:31: 41:34], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn def_et4() -> impl Tr1<As1 = impl for<'a> Tr2<'a>> {
    let mut _0: impl Tr1<As1 = impl for<'a> Tr2<'a>>;

    bb0: {
        return;
    }
}

fn def_et4::<impl at ui/associated-type-bounds/rpit.rs:45:20: 45:25>::clone(_1: &def_et4::A) -> def_et4::A {
    debug self => _1;
    let mut _0: def_et4::A;

    bb0: {
        return;
    }
}

fn def_et4::<impl at ui/associated-type-bounds/rpit.rs:47:5: 47:19>::mk(_1: def_et4::A) -> def_et4::A {
    debug self => const def_et4::A;
    let mut _0: def_et4::A;

    bb0: {
        return;
    }
}

fn def_et4::<impl at ui/associated-type-bounds/rpit.rs:51:5: 51:27>::tr2(_1: def_et4::A) -> &def_et4::A {
    debug self => const def_et4::A;
    let mut _0: &def_et4::A;

    bb0: {
        _0 = const _;
        return;
    }
}

promoted[0] in def_et4::<impl at ui/associated-type-bounds/rpit.rs:51:5: 51:27>::tr2: &def_et4::A = {
    let mut _0: &def_et4::A;
    let mut _1: def_et4::A;

    bb0: {
        _1 = def_et4::A;
        _0 = &_1;
        return;
    }
}

fn use_et4() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: impl for<'a> Tr2<'a>;
    let mut _3: impl Tr1<As1 = impl for<'a> Tr2<'a>>;

    bb0: {
        _3 = def_et4() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <impl Tr1<As1 = impl for<'a> Tr2<'a>> as Tr1>::mk(const ZeroSized: impl Tr1<As1 = impl for<'a> Tr2<'a>>) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = assert_forall_tr2::<impl for<'a> Tr2<'a>>(const ZeroSized: impl for<'a> Tr2<'a>) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = use_et1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = use_et2() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = use_et3() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = use_et4() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
