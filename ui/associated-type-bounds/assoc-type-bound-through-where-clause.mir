// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn duplicate(_1: <T as Op>::Output) -> (<T as Op>::Output, <T as Op>::Output) {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:12:21: 12:22
    let mut _0: (<T as Op>::Output, <T as Op>::Output); // return place in scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:12:38: 12:60
    let mut _2: <T as Op>::Output;       // in scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:13:6: 13:7
    let mut _3: <T as Op>::Output;       // in scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:13:9: 13:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:13:6: 13:7
        _3 = _1;                         // scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:13:9: 13:10
        _0 = (move _2, move _3);         // scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:13:5: 13:11
        return;                          // scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:14:2: 14:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/assoc-type-bound-through-where-clause.rs:16:13: 16:13
    }
}
