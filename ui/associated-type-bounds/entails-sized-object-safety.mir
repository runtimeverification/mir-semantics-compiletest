// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _assert_obj_safe_1(_1: Box<dyn ObjTr1>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:9:43: 9:43

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:9:44: 9:45
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:9:45: 9:45
    }
}

fn _assert_obj_safe_2(_1: Box<dyn ObjTr2>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:12:43: 12:43

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:12:44: 12:45
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:12:45: 12:45
    }
}

fn _assert_obj_safe_3(_1: Box<dyn ObjTr3>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:15:43: 15:43

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:15:44: 15:45
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:15:45: 15:45
    }
}

fn _assert_obj_safe_4(_1: Box<dyn ObjTr4>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:18:43: 18:43

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:18:44: 18:45
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:18:45: 18:45
    }
}

fn _assert_obj_safe_5(_1: Box<dyn ObjTr5>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:21:43: 21:43

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:21:44: 21:45
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:21:45: 21:45
    }
}

fn _assert_obj_safe_6(_1: Box<dyn ObjTr6>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:24:43: 24:43

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:24:44: 24:45
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:24:45: 24:45
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:26:11: 26:11

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/entails-sized-object-safety.rs:26:13: 26:13
    }
}
