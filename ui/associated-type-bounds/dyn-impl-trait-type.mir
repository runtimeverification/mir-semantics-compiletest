// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_copy(_1: T) -> () {
    debug x => _1;
    let mut _0: ();
    scope 1 {
        debug _x => _1;
        scope 2 {
            debug _x => _1;
        }
    }

    bb0: {
        return;
    }
}

fn assert_static(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn assert_forall_tr2(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:15:16: 15:21>::clone(_1: &S2) -> S2 {
    debug self => _1;
    let mut _0: S2;

    bb0: {
        return;
    }
}

fn <impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:17:1: 17:16>::mk(_1: &S1) -> S2 {
    debug self => _1;
    let mut _0: S2;

    bb0: {
        return;
    }
}

fn def_et1() -> Box<dyn Tr1<As1 = Et1::{opaque#0}>> {
    let mut _0: std::boxed::Box<dyn Tr1<As1 = Et1::{opaque#0}>>;
    let mut _1: std::boxed::Box<dyn Tr1<As1 = S2>>;
    let mut _2: std::boxed::Box<S1>;

    bb0: {
        _2 = Box::<S1>::new(const S1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn Tr1<As1 = S2>> (Pointer(Unsize));
        _0 = move _1;
        return;
    }
}

fn use_et1() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Et1::{opaque#0};
    let mut _3: &dyn Tr1<As1 = Et1::{opaque#0}>;
    let _4: std::boxed::Box<dyn Tr1<As1 = Et1::{opaque#0}>>;
    let mut _5: *const dyn Tr1<As1 = Et1::{opaque#0}>;

    bb0: {
        _4 = def_et1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = (((_4.0: std::ptr::Unique<dyn Tr1<As1 = Et1::{opaque#0}>>).0: std::ptr::NonNull<dyn Tr1<As1 = Et1::{opaque#0}>>).0: *const dyn Tr1<As1 = Et1::{opaque#0}>);
        _3 = &(*_5);
        _2 = <dyn Tr1<As1 = Et1::{opaque#0}> as Tr1>::mk(move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _1 = assert_copy::<Et1::{opaque#0}>(const ZeroSized: Et1::{opaque#0}) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn def_et2() -> Box<dyn Tr1<As1 = Et2::{opaque#0}>> {
    let mut _0: std::boxed::Box<dyn Tr1<As1 = Et2::{opaque#0}>>;
    let mut _1: std::boxed::Box<dyn Tr1<As1 = S2>>;
    let mut _2: std::boxed::Box<S1>;

    bb0: {
        _2 = Box::<S1>::new(const S1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn Tr1<As1 = S2>> (Pointer(Unsize));
        _0 = move _1;
        return;
    }
}

fn use_et2() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Et2::{opaque#0};
    let mut _3: &dyn Tr1<As1 = Et2::{opaque#0}>;
    let _4: std::boxed::Box<dyn Tr1<As1 = Et2::{opaque#0}>>;
    let mut _5: *const dyn Tr1<As1 = Et2::{opaque#0}>;

    bb0: {
        _4 = def_et2() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = (((_4.0: std::ptr::Unique<dyn Tr1<As1 = Et2::{opaque#0}>>).0: std::ptr::NonNull<dyn Tr1<As1 = Et2::{opaque#0}>>).0: *const dyn Tr1<As1 = Et2::{opaque#0}>);
        _3 = &(*_5);
        _2 = <dyn Tr1<As1 = Et2::{opaque#0}> as Tr1>::mk(move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _1 = assert_static::<Et2::{opaque#0}>(const ZeroSized: Et2::{opaque#0}) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn def_et3() -> Box<dyn Tr1<As1 = Et3::{opaque#0}>> {
    let mut _0: std::boxed::Box<dyn Tr1<As1 = Et3::{opaque#0}>>;
    let mut _1: std::boxed::Box<dyn Tr1<As1 = std::ops::Range<u8>>>;
    let mut _2: std::boxed::Box<def_et3::A>;

    bb0: {
        _2 = Box::<def_et3::A>::new(const def_et3::A) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn Tr1<As1 = std::ops::Range<u8>>> (Pointer(Unsize));
        _0 = move _1;
        return;
    }
}

fn def_et3::<impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:30:5: 30:19>::mk(_1: &def_et3::A) -> std::ops::Range<u8> {
    debug self => _1;
    let mut _0: std::ops::Range<u8>;

    bb0: {
        _0 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        return;
    }
}

fn use_et3() -> () {
    let mut _0: ();
    let _1: Et3::{opaque#0};
    let mut _2: &Et3::{opaque#0};
    let _3: Et3::{opaque#0};
    let mut _4: &dyn Tr1<As1 = Et3::{opaque#0}>;
    let _5: std::boxed::Box<dyn Tr1<As1 = Et3::{opaque#0}>>;
    let mut _7: Et3::{opaque#0};
    let mut _8: Et3::{opaque#0};
    let mut _10: std::option::Option<impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>;
    let mut _11: &mut Et3::{opaque#0};
    let mut _12: isize;
    let mut _15: u8;
    let mut _16: impl std::convert::Into<u8>;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let mut _19: &u8;
    let _20: u8;
    let mut _21: std::iter::Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/dyn-impl-trait-type.rs:43:31: 43:34]>;
    let mut _22: std::ops::Range<u8>;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: u8;
    let mut _28: u8;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: *const dyn Tr1<As1 = Et3::{opaque#0}>;
    scope 1 {
        debug _0 => _1;
        let mut _6: u8;
        scope 2 {
            debug s => _6;
            let mut _9: Et3::{opaque#0};
            let _23: &u8;
            let _24: &u8;
            scope 3 {
                debug iter => _9;
                let _13: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>;
                scope 4 {
                    debug _1 => _13;
                    let _14: impl std::convert::Into<u8>;
                    scope 5 {
                        debug _2 => _14;
                    }
                }
            }
            scope 6 {
                debug left_val => _23;
                debug right_val => _24;
                let _29: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _29;
                }
            }
        }
    }

    bb0: {
        _5 = def_et3() -> [return: bb1, unwind continue];
    }

    bb1: {
        _32 = (((_5.0: std::ptr::Unique<dyn Tr1<As1 = Et3::{opaque#0}>>).0: std::ptr::NonNull<dyn Tr1<As1 = Et3::{opaque#0}>>).0: *const dyn Tr1<As1 = Et3::{opaque#0}>);
        _4 = &(*_32);
        _3 = <dyn Tr1<As1 = Et3::{opaque#0}> as Tr1>::mk(move _4) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _2 = &_3;
        _1 = <Et3::{opaque#0} as Clone>::clone(move _2) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        drop(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = const 0_u8;
        _8 = move _1;
        _7 = <Et3::{opaque#0} as IntoIterator>::into_iter(move _8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = move _7;
        goto -> bb6;
    }

    bb6: {
        _11 = &mut _9;
        _10 = <Et3::{opaque#0} as Iterator>::next(_11) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = discriminant(_10);
        switchInt(move _12) -> [0: bb10, 1: bb8, otherwise: bb9];
    }

    bb8: {
        _13 = move ((_10 as Some).0: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>);
        _14 = <impl Add<u8, Output = impl Into<u8>> as Add<u8>>::add(move _13, const 1_u8) -> [return: bb11, unwind continue];
    }

    bb9: {
        unreachable;
    }

    bb10: {
        _18 = &_6;
        _22 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 };
        _21 = <std::ops::Range<u8> as Iterator>::map::<u8, [closure@ui/associated-type-bounds/dyn-impl-trait-type.rs:43:31: 43:34]>(move _22, const ZeroSized: [closure@ui/associated-type-bounds/dyn-impl-trait-type.rs:43:31: 43:34]) -> [return: bb13, unwind continue];
    }

    bb11: {
        _16 = move _14;
        _15 = <impl Into<u8> as Into<u8>>::into(move _16) -> [return: bb12, unwind continue];
    }

    bb12: {
        _6 = Add(_6, move _15);
        goto -> bb6;
    }

    bb13: {
        _20 = <Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/dyn-impl-trait-type.rs:43:31: 43:34]> as Iterator>::sum::<u8>(move _21) -> [return: bb14, unwind continue];
    }

    bb14: {
        _19 = &_20;
        _17 = (move _18, move _19);
        _23 = (_17.0: &u8);
        _24 = (_17.1: &u8);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = assert_failed::<u8, u8>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_5) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}

fn use_et3::{closure#0}(_1: &mut [closure@ui/associated-type-bounds/dyn-impl-trait-type.rs:43:31: 43:34], _2: u8) -> u8 {
    debug x => _2;
    let mut _0: u8;

    bb0: {
        _0 = Add(_2, const 1_u8);
        return;
    }
}

fn def_et4() -> Box<dyn Tr1<As1 = Et4::{opaque#0}>> {
    let mut _0: std::boxed::Box<dyn Tr1<As1 = Et4::{opaque#0}>>;
    let mut _1: std::boxed::Box<dyn Tr1<As1 = def_et4::A>>;
    let mut _2: std::boxed::Box<def_et4::A>;

    bb0: {
        _2 = Box::<def_et4::A>::new(const def_et4::A) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::boxed::Box<dyn Tr1<As1 = def_et4::A>> (Pointer(Unsize));
        _0 = move _1;
        return;
    }
}

fn def_et4::<impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:48:20: 48:25>::clone(_1: &def_et4::A) -> def_et4::A {
    debug self => _1;
    let mut _0: def_et4::A;

    bb0: {
        return;
    }
}

fn def_et4::<impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:50:5: 50:19>::mk(_1: &def_et4::A) -> def_et4::A {
    debug self => _1;
    let mut _0: def_et4::A;

    bb0: {
        return;
    }
}

fn def_et4::<impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:54:5: 54:27>::tr2(_1: def_et4::A) -> &def_et4::A {
    debug self => const def_et4::A;
    let mut _0: &def_et4::A;

    bb0: {
        _0 = const _;
        return;
    }
}

promoted[0] in def_et4::<impl at ui/associated-type-bounds/dyn-impl-trait-type.rs:54:5: 54:27>::tr2: &def_et4::A = {
    let mut _0: &def_et4::A;
    let mut _1: def_et4::A;

    bb0: {
        _1 = def_et4::A;
        _0 = &_1;
        return;
    }
}

fn use_et4() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: Et4::{opaque#0};
    let mut _3: &dyn Tr1<As1 = Et4::{opaque#0}>;
    let _4: std::boxed::Box<dyn Tr1<As1 = Et4::{opaque#0}>>;
    let mut _5: *const dyn Tr1<As1 = Et4::{opaque#0}>;

    bb0: {
        _4 = def_et4() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = (((_4.0: std::ptr::Unique<dyn Tr1<As1 = Et4::{opaque#0}>>).0: std::ptr::NonNull<dyn Tr1<As1 = Et4::{opaque#0}>>).0: *const dyn Tr1<As1 = Et4::{opaque#0}>);
        _3 = &(*_5);
        _2 = <dyn Tr1<As1 = Et4::{opaque#0}> as Tr1>::mk(move _3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _1 = assert_forall_tr2::<Et4::{opaque#0}>(const ZeroSized: Et4::{opaque#0}) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_4) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_4) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = use_et1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = use_et2() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = use_et3() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = use_et4() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
