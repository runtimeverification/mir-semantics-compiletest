// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _use_un7(_1: _Un7<'_, '_, T>) -> () {
    debug x => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/associated-type-bounds/union-bounds.rs:73:16: 73:21>::clone(_1: &UnSelf<T>) -> UnSelf<T> {
    debug self => _1;
    let mut _0: UnSelf<T>;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Un1<&str>;
    let mut _2: Un1<&str>;
    let mut _3: (&bool, &bool);
    let mut _4: &bool;
    let _5: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: Un1<&str>;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let _18: u8;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u8;
    let mut _24: u8;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&&str, &&str);
    let mut _30: &&str;
    let _31: &str;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: Un2<&str>;
    let mut _40: (&bool, &bool);
    let mut _41: &bool;
    let _42: bool;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: bool;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: Un2<&str>;
    let mut _53: (&u8, &u8);
    let mut _54: &u8;
    let _55: u8;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: u8;
    let mut _61: u8;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&&str, &&str);
    let mut _67: &&str;
    let _68: &str;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: Un3<&str>;
    let mut _77: (&bool, &bool);
    let mut _78: &bool;
    let _79: bool;
    let mut _82: bool;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let _92: &u8;
    let mut _93: (&u8, &u8);
    let mut _94: &u8;
    let _95: u8;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: u8;
    let mut _101: u8;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: Un4<'_, '_, ()>;
    let _106: &u8;
    let mut _107: (&u8, &u8);
    let mut _108: &u8;
    let _109: u8;
    let mut _112: bool;
    let mut _113: bool;
    let mut _114: u8;
    let mut _115: u8;
    let _117: !;
    let mut _118: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _120: (&&str, &&str);
    let mut _121: &&str;
    let _122: &str;
    let mut _125: bool;
    let mut _126: bool;
    let _128: !;
    let mut _129: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _130: Un6<&str>;
    let mut _131: (&u8, &u8);
    let mut _132: &u8;
    let _133: u8;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: u8;
    let mut _139: u8;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: Un6<&str>;
    let mut _144: (&&bool, &&bool);
    let mut _145: &&bool;
    let _146: &bool;
    let mut _149: bool;
    let mut _150: bool;
    let _152: !;
    let mut _153: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _154: Un6<&str>;
    let mut _155: (&u16, &u16);
    let mut _156: &u16;
    let _157: u16;
    let mut _160: bool;
    let mut _161: bool;
    let mut _162: u16;
    let mut _163: u16;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: (&&str, &&str);
    let mut _169: &&str;
    let _170: &str;
    let mut _173: bool;
    let mut _174: bool;
    let _176: !;
    let mut _177: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _178: UnSelf<&str>;
    let mut _179: (&bool, &bool);
    let mut _180: &bool;
    let _181: bool;
    let mut _184: bool;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: bool;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _191: UnSelf<&str>;
    let mut _192: (&u8, &u8);
    let mut _193: &u8;
    let _194: u8;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: u8;
    let mut _200: u8;
    let _202: !;
    let mut _203: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _222: &bool;
    let mut _223: &u8;
    let mut _224: &u8;
    scope 1 {
        debug un1 => _1;
        let _6: &bool;
        let _7: &bool;
        let _19: &u8;
        let _20: &u8;
        let mut _28: Un2<&str>;
        let mut _220: &u8;
        let mut _221: &bool;
        scope 2 {
        }
        scope 3 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 4 {
                debug kind => _12;
            }
        }
        scope 5 {
        }
        scope 6 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 7 {
                debug kind => _25;
            }
        }
        scope 8 {
            debug un2 => _28;
            let _32: &&str;
            let _33: &&str;
            let _43: &bool;
            let _44: &bool;
            let _56: &u8;
            let _57: &u8;
            let mut _65: Un3<&str>;
            let mut _217: &u8;
            let mut _218: &bool;
            let mut _219: &&str;
            scope 9 {
            }
            scope 10 {
                debug left_val => _32;
                debug right_val => _33;
                let _36: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _36;
                }
            }
            scope 12 {
            }
            scope 13 {
                debug left_val => _43;
                debug right_val => _44;
                let _49: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _49;
                }
            }
            scope 15 {
            }
            scope 16 {
                debug left_val => _56;
                debug right_val => _57;
                let _62: core::panicking::AssertKind;
                scope 17 {
                    debug kind => _62;
                }
            }
            scope 18 {
                debug un3 => _65;
                let _69: &&str;
                let _70: &&str;
                let _80: &bool;
                let _81: &bool;
                let _89: (u8,);
                let mut _214: &bool;
                let mut _215: &bool;
                let mut _216: &&str;
                scope 19 {
                }
                scope 20 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _73: core::panicking::AssertKind;
                    scope 21 {
                        debug kind => _73;
                    }
                }
                scope 22 {
                }
                scope 23 {
                    debug left_val => _80;
                    debug right_val => _81;
                    let _86: core::panicking::AssertKind;
                    scope 24 {
                        debug kind => _86;
                    }
                }
                scope 25 {
                    debug f1 => _89;
                    let _90: (u8,);
                    scope 26 {
                        debug f2 => _90;
                        let mut _91: Un4<'_, '_, ()>;
                        scope 27 {
                            debug un4 => _91;
                            let _96: &u8;
                            let _97: &u8;
                            let _110: &u8;
                            let _111: &u8;
                            let mut _119: Un6<&str>;
                            let mut _212: &u8;
                            let mut _213: &u8;
                            scope 28 {
                            }
                            scope 29 {
                                debug left_val => _96;
                                debug right_val => _97;
                                let _102: core::panicking::AssertKind;
                                scope 30 {
                                    debug kind => _102;
                                }
                            }
                            scope 31 {
                            }
                            scope 32 {
                                debug left_val => _110;
                                debug right_val => _111;
                                let _116: core::panicking::AssertKind;
                                scope 33 {
                                    debug kind => _116;
                                }
                            }
                            scope 34 {
                                debug un6 => _119;
                                let _123: &&str;
                                let _124: &&str;
                                let _134: &u8;
                                let _135: &u8;
                                let _147: &&bool;
                                let _148: &&bool;
                                let _158: &u16;
                                let _159: &u16;
                                let mut _167: UnSelf<&str>;
                                let mut _207: &u16;
                                let mut _208: &&bool;
                                let mut _209: &bool;
                                let mut _210: &u8;
                                let mut _211: &&str;
                                scope 35 {
                                }
                                scope 36 {
                                    debug left_val => _123;
                                    debug right_val => _124;
                                    let _127: core::panicking::AssertKind;
                                    scope 37 {
                                        debug kind => _127;
                                    }
                                }
                                scope 38 {
                                }
                                scope 39 {
                                    debug left_val => _134;
                                    debug right_val => _135;
                                    let _140: core::panicking::AssertKind;
                                    scope 40 {
                                        debug kind => _140;
                                    }
                                }
                                scope 41 {
                                }
                                scope 42 {
                                    debug left_val => _147;
                                    debug right_val => _148;
                                    let _151: core::panicking::AssertKind;
                                    scope 43 {
                                        debug kind => _151;
                                    }
                                }
                                scope 44 {
                                }
                                scope 45 {
                                    debug left_val => _158;
                                    debug right_val => _159;
                                    let _164: core::panicking::AssertKind;
                                    scope 46 {
                                        debug kind => _164;
                                    }
                                }
                                scope 47 {
                                    debug unself => _167;
                                    let _171: &&str;
                                    let _172: &&str;
                                    let _182: &bool;
                                    let _183: &bool;
                                    let _195: &u8;
                                    let _196: &u8;
                                    let mut _204: &u8;
                                    let mut _205: &bool;
                                    let mut _206: &&str;
                                    scope 48 {
                                    }
                                    scope 49 {
                                        debug left_val => _171;
                                        debug right_val => _172;
                                        let _175: core::panicking::AssertKind;
                                        scope 50 {
                                            debug kind => _175;
                                        }
                                    }
                                    scope 51 {
                                    }
                                    scope 52 {
                                        debug left_val => _182;
                                        debug right_val => _183;
                                        let _188: core::panicking::AssertKind;
                                        scope 53 {
                                            debug kind => _188;
                                        }
                                    }
                                    scope 54 {
                                    }
                                    scope 55 {
                                        debug left_val => _195;
                                        debug right_val => _196;
                                        let _201: core::panicking::AssertKind;
                                        scope 56 {
                                            debug kind => _201;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Un1::<&str> { outest: const "foo" };
        _2 = Un1::<&str> { outest: const true };
        _1 = move _2;
        _5 = (_1.1: bool);
        _4 = &_5;
        _221 = const _;
        _3 = (move _4, _221);
        _6 = (_3.0: &bool);
        _7 = (_3.1: &bool);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<bool, bool>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _15 = Un1::<&str> { outest: const 42_u8 };
        _1 = move _15;
        _18 = (_1.2: u8);
        _17 = &_18;
        _220 = const _;
        _16 = (move _17, _220);
        _19 = (_16.0: &u8);
        _20 = (_16.1: &u8);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<u8, u8>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb4: {
        _28 = Un2::<&str> { outest: const "bar" };
        _31 = (_28.0: &str);
        _30 = &_31;
        _219 = const _;
        _29 = (move _30, _219);
        _32 = (_29.0: &&str);
        _33 = (_29.1: &&str);
        _35 = <&str as PartialEq>::eq(_32, _33) -> [return: bb5, unwind continue];
    }

    bb5: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<&str, &str>(move _36, _32, _33, move _38) -> unwind continue;
    }

    bb7: {
        _39 = Un2::<&str> { outest: const true };
        _28 = move _39;
        _42 = (_28.1: bool);
        _41 = &_42;
        _218 = const _;
        _40 = (move _41, _218);
        _43 = (_40.0: &bool);
        _44 = (_40.1: &bool);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<bool, bool>(move _49, _43, _44, move _51) -> unwind continue;
    }

    bb9: {
        _52 = Un2::<&str> { outest: const 42_u8 };
        _28 = move _52;
        _55 = (_28.2: u8);
        _54 = &_55;
        _217 = const _;
        _53 = (move _54, _217);
        _56 = (_53.0: &u8);
        _57 = (_53.1: &u8);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<u8, u8>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb11: {
        _65 = Un3::<&str> { outest: const "baz" };
        _68 = (_65.0: &str);
        _67 = &_68;
        _216 = const _;
        _66 = (move _67, _216);
        _69 = (_66.0: &&str);
        _70 = (_66.1: &&str);
        _72 = <&str as PartialEq>::eq(_69, _70) -> [return: bb12, unwind continue];
    }

    bb12: {
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = core::panicking::assert_failed::<&str, &str>(move _73, _69, _70, move _75) -> unwind continue;
    }

    bb14: {
        _215 = const _;
        _76 = Un3::<&str> { outest: _215 };
        _65 = move _76;
        _222 = deref_copy (_65.1: &bool);
        _79 = (*_222);
        _78 = &_79;
        _214 = const _;
        _77 = (move _78, _214);
        _80 = (_77.0: &bool);
        _81 = (_77.1: &bool);
        _84 = (*_80);
        _85 = (*_81);
        _83 = Eq(move _84, move _85);
        _82 = Not(move _83);
        switchInt(move _82) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<bool, bool>(move _86, _80, _81, move _88) -> unwind continue;
    }

    bb16: {
        _89 = (const 1_u8,);
        _90 = (const 2_u8,);
        _92 = &(_89.0: u8);
        _91 = Un4::<'_, '_, ()> { f1: _92 };
        _213 = const _;
        _223 = deref_copy (_91.0: &u8);
        _95 = (*_223);
        _94 = &_95;
        _93 = (_213, move _94);
        _96 = (_93.0: &u8);
        _97 = (_93.1: &u8);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<u8, u8>(move _102, _96, _97, move _104) -> unwind continue;
    }

    bb18: {
        _106 = &(_90.0: u8);
        _105 = Un4::<'_, '_, ()> { f1: _106 };
        _91 = move _105;
        _212 = const _;
        _224 = deref_copy (_91.1: &u8);
        _109 = (*_224);
        _108 = &_109;
        _107 = (_212, move _108);
        _110 = (_107.0: &u8);
        _111 = (_107.1: &u8);
        _114 = (*_110);
        _115 = (*_111);
        _113 = Eq(move _114, move _115);
        _112 = Not(move _113);
        switchInt(move _112) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _116 = core::panicking::AssertKind::Eq;
        _118 = Option::<Arguments<'_>>::None;
        _117 = core::panicking::assert_failed::<u8, u8>(move _116, _110, _111, move _118) -> unwind continue;
    }

    bb20: {
        _119 = Un6::<&str> { f0: const "bar" };
        _122 = (_119.0: &str);
        _121 = &_122;
        _211 = const _;
        _120 = (move _121, _211);
        _123 = (_120.0: &&str);
        _124 = (_120.1: &&str);
        _126 = <&str as PartialEq>::eq(_123, _124) -> [return: bb21, unwind continue];
    }

    bb21: {
        _125 = Not(move _126);
        switchInt(move _125) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _127 = core::panicking::AssertKind::Eq;
        _129 = Option::<Arguments<'_>>::None;
        _128 = core::panicking::assert_failed::<&str, &str>(move _127, _123, _124, move _129) -> unwind continue;
    }

    bb23: {
        _130 = Un6::<&str> { f0: const 24_u8 };
        _119 = move _130;
        _133 = (_119.1: u8);
        _132 = &_133;
        _210 = const _;
        _131 = (move _132, _210);
        _134 = (_131.0: &u8);
        _135 = (_131.1: &u8);
        _138 = (*_134);
        _139 = (*_135);
        _137 = Eq(move _138, move _139);
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<u8, u8>(move _140, _134, _135, move _142) -> unwind continue;
    }

    bb25: {
        _209 = const _;
        _143 = Un6::<&str> { f0: _209 };
        _119 = move _143;
        _146 = (_119.2: &bool);
        _145 = &_146;
        _208 = const _;
        _144 = (move _145, _208);
        _147 = (_144.0: &&bool);
        _148 = (_144.1: &&bool);
        _150 = <&bool as PartialEq>::eq(_147, _148) -> [return: bb26, unwind continue];
    }

    bb26: {
        _149 = Not(move _150);
        switchInt(move _149) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _151 = core::panicking::AssertKind::Eq;
        _153 = Option::<Arguments<'_>>::None;
        _152 = core::panicking::assert_failed::<&bool, &bool>(move _151, _147, _148, move _153) -> unwind continue;
    }

    bb28: {
        _154 = Un6::<&str> { f0: const 12_u16 };
        _119 = move _154;
        _157 = (_119.3: u16);
        _156 = &_157;
        _207 = const _;
        _155 = (move _156, _207);
        _158 = (_155.0: &u16);
        _159 = (_155.1: &u16);
        _162 = (*_158);
        _163 = (*_159);
        _161 = Eq(move _162, move _163);
        _160 = Not(move _161);
        switchInt(move _160) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<u16, u16>(move _164, _158, _159, move _166) -> unwind continue;
    }

    bb30: {
        _167 = UnSelf::<&str> { f0: const "selfish" };
        _170 = (_167.0: &str);
        _169 = &_170;
        _206 = const _;
        _168 = (move _169, _206);
        _171 = (_168.0: &&str);
        _172 = (_168.1: &&str);
        _174 = <&str as PartialEq>::eq(_171, _172) -> [return: bb31, unwind continue];
    }

    bb31: {
        _173 = Not(move _174);
        switchInt(move _173) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _175 = core::panicking::AssertKind::Eq;
        _177 = Option::<Arguments<'_>>::None;
        _176 = core::panicking::assert_failed::<&str, &str>(move _175, _171, _172, move _177) -> unwind continue;
    }

    bb33: {
        _178 = UnSelf::<&str> { f0: const true };
        _167 = move _178;
        _181 = (_167.1: bool);
        _180 = &_181;
        _205 = const _;
        _179 = (move _180, _205);
        _182 = (_179.0: &bool);
        _183 = (_179.1: &bool);
        _186 = (*_182);
        _187 = (*_183);
        _185 = Eq(move _186, move _187);
        _184 = Not(move _185);
        switchInt(move _184) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<bool, bool>(move _188, _182, _183, move _190) -> unwind continue;
    }

    bb35: {
        _191 = UnSelf::<&str> { f0: const 24_u8 };
        _167 = move _191;
        _194 = (_167.2: u8);
        _193 = &_194;
        _204 = const _;
        _192 = (move _193, _204);
        _195 = (_192.0: &u8);
        _196 = (_192.1: &u8);
        _199 = (*_195);
        _200 = (*_196);
        _198 = Eq(move _199, move _200);
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _201 = core::panicking::AssertKind::Eq;
        _203 = Option::<Arguments<'_>>::None;
        _202 = core::panicking::assert_failed::<u8, u8>(move _201, _195, _196, move _203) -> unwind continue;
    }

    bb37: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 24_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "selfish";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 12_u16;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&bool = {
    let mut _0: &&bool;
    let mut _1: &bool;
    let mut _2: bool;

    bb0: {
        _2 = const true;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 24_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "bar";
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "baz";
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 42_u8;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "bar";
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 42_u8;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}
