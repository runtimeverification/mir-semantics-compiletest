// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn unwrap_1_st1(_1: St1<T>) -> (T, <T as Tr1>::As1, <<T as Tr1>::As1 as Tr2>::As2) {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:25:35: 25:36
    let mut _0: (T, <T as Tr1>::As1, <<T as Tr1>::As1 as Tr2>::As2); // return place in scope 0 at ui/associated-type-bounds/struct-bounds.rs:25:49: 25:82
    let mut _2: T;                       // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:6: 26:14
    let mut _3: <T as Tr1>::As1;         // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:16: 26:23
    let mut _4: <<T as Tr1>::As1 as Tr2>::As2; // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:25: 26:32

    bb0: {
        _2 = move (_1.0: T);             // scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:6: 26:14
        _3 = move (_1.1: <T as Tr1>::As1); // scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:16: 26:23
        _4 = move (_1.2: <<T as Tr1>::As1 as Tr2>::As2); // scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:25: 26:32
        _0 = (move _2, move _3, move _4); // scope 0 at ui/associated-type-bounds/struct-bounds.rs:26:5: 26:33
        return;                          // scope 0 at ui/associated-type-bounds/struct-bounds.rs:27:2: 27:2
    }
}

fn unwrap_2_st1(_1: St1<T>) -> (T, <T as Tr1>::As1, <<T as Tr1>::As1 as Tr2>::As2) {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:29:20: 29:21
    let mut _0: (T, <T as Tr1>::As1, <<T as Tr1>::As1 as Tr2>::As2); // return place in scope 0 at ui/associated-type-bounds/struct-bounds.rs:29:34: 29:67
    let mut _2: St1<T>;                  // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:34:18: 34:19

    bb0: {
        _2 = move _1;                    // scope 0 at ui/associated-type-bounds/struct-bounds.rs:34:18: 34:19
        _0 = unwrap_1_st1::<T>(move _2) -> bb1; // scope 0 at ui/associated-type-bounds/struct-bounds.rs:34:5: 34:20
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:34:5: 34:17
                                         // + literal: Const { ty: fn(St1<T>) -> (T, <T as Tr1>::As1, <<T as Tr1>::As1 as Tr2>::As2) {unwrap_1_st1::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/struct-bounds.rs:35:2: 35:2
    }
}

fn _use_st7(_1: St7<'_, '_, T>) -> () {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:76:24: 76:25
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/struct-bounds.rs:77:1: 77:1
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/struct-bounds.rs:82:2: 82:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/struct-bounds.rs:90:11: 90:11
    let _1: St1<&str>;                   // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:91:9: 91:12
    let mut _2: (&(&str, bool, u8), &(&str, bool, u8)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &(&str, bool, u8);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &(&str, bool, u8);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: (&str, bool, u8);            // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:92:35: 92:52
    let mut _6: St1<&str>;               // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:92:48: 92:51
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &(&str, bool, u8);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &(&str, bool, u8);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &(&str, bool, u8);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &(&str, bool, u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &(&str, bool, u8);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &(&str, bool, u8);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &u8;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:100:31: 100:36
    let _25: &u8;                        // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:100:31: 100:36
    let mut _26: &u8;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:100:42: 100:47
    let _27: &u8;                        // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:100:42: 100:47
    let mut _28: (&(&u8, &u8), &(&u8, &u8)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &(&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _30: &(&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _31: (&u8, &u8);                 // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:26: 101:42
    let mut _32: &u8;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:27: 101:33
    let mut _33: &u8;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:35: 101:41
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &(&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &(&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &(&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &(&u8, &u8);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &(&u8, &u8);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &(&u8, &u8);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: &bool;                  // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
    let _50: &bool;                      // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
    let mut _51: (&(&str, u8, &bool, u16), &(&str, u8, &bool, u16)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _52: &(&str, u8, &bool, u16); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _53: &(&str, u8, &bool, u16); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _54: (&str, u8, &bool, u16);     // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:40: 112:72
    let mut _55: &str;                   // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:41: 112:47
    let mut _56: u8;                     // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:49: 112:55
    let mut _57: &bool;                  // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:57: 112:63
    let mut _58: u16;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:65: 112:71
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &(&str, u8, &bool, u16); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &(&str, u8, &bool, u16); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &(&str, u8, &bool, u16); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &(&str, u8, &bool, u16);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &(&str, u8, &bool, u16); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &(&str, u8, &bool, u16);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _74: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _75: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _76: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _79: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _80: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _81: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _82: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _84: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _85: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _86: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _87: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _88: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _89: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _90: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug st1 => _1;                 // in scope 1 at ui/associated-type-bounds/struct-bounds.rs:91:9: 91:12
        let _7: &(&str, bool, u8);       // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &(&str, bool, u8);       // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _95: &(&str, bool, u8);  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            scope 5 {
                let _21: (u8,);          // in scope 5 at ui/associated-type-bounds/struct-bounds.rs:98:9: 98:11
                scope 6 {
                    debug f1 => _21;     // in scope 6 at ui/associated-type-bounds/struct-bounds.rs:98:9: 98:11
                    let _22: (u8,);      // in scope 6 at ui/associated-type-bounds/struct-bounds.rs:99:9: 99:11
                    scope 7 {
                        debug f2 => _22; // in scope 7 at ui/associated-type-bounds/struct-bounds.rs:99:9: 99:11
                        let _23: St4<'_, '_, ()>; // in scope 7 at ui/associated-type-bounds/struct-bounds.rs:100:9: 100:12
                        scope 8 {
                            debug st4 => _23; // in scope 8 at ui/associated-type-bounds/struct-bounds.rs:100:9: 100:12
                            let _34: &(&u8, &u8); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _35: &(&u8, &u8); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _48: St6<&str>; // in scope 8 at ui/associated-type-bounds/struct-bounds.rs:111:9: 111:12
                            let mut _93: &bool; // in scope 8 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
                            let mut _94: &(&u8, &u8); // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                            scope 9 {
                                debug left_val => _34; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _35; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _40: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 10 {
                                    debug kind => _40; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 11 {
                                debug st6 => _48; // in scope 11 at ui/associated-type-bounds/struct-bounds.rs:111:9: 111:12
                                let _59: &(&str, u8, &bool, u16); // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _60: &(&str, u8, &bool, u16); // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _73: StSelf<&str>; // in scope 11 at ui/associated-type-bounds/struct-bounds.rs:114:9: 114:15
                                let mut _92: &(&str, u8, &bool, u16); // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                scope 12 {
                                    debug left_val => _59; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _60; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _65: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 13 {
                                        debug kind => _65; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 14 {
                                    debug stself => _73; // in scope 14 at ui/associated-type-bounds/struct-bounds.rs:114:9: 114:15
                                    let _77: &u8; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _78: &u8; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let mut _91: &u8; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 15 {
                                        debug left_val => _77; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _78; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _83: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 16 {
                                            debug kind => _83; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = St1::<&str> { outest: const "foo", outer: const true, inner: const 42_u8 }; // scope 0 at ui/associated-type-bounds/struct-bounds.rs:91:15: 91:62
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:91:29: 91:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _95 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(&str, bool, u8), val: Unevaluated(main, [], Some(promoted[5])) }
        _3 = _95;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _6 = move _1;                    // scope 1 at ui/associated-type-bounds/struct-bounds.rs:92:48: 92:51
        _5 = unwrap_1_st1::<&str>(move _6) -> bb1; // scope 1 at ui/associated-type-bounds/struct-bounds.rs:92:35: 92:52
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:92:35: 92:47
                                         // + literal: Const { ty: fn(St1<&str>) -> (&str, <&str as Tr1>::As1, <<&str as Tr1>::As1 as Tr2>::As2) {unwrap_1_st1::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &(&str, bool, u8));  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &(&str, bool, u8));  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <(&str, bool, u8) as PartialEq>::eq(move _11, move _12) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (&str, bool, u8), &'b (&str, bool, u8)) -> bool {<(&str, bool, u8) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<(&str, bool, u8), (&str, bool, u8)>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (&str, bool, u8), &'b (&str, bool, u8), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(&str, bool, u8), (&str, bool, u8)>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = const (1_u8,);             // scope 5 at ui/associated-type-bounds/struct-bounds.rs:98:14: 98:18
        _22 = const (2_u8,);             // scope 6 at ui/associated-type-bounds/struct-bounds.rs:99:14: 99:18
        _25 = &(_21.0: u8);              // scope 7 at ui/associated-type-bounds/struct-bounds.rs:100:31: 100:36
        _24 = _25;                       // scope 7 at ui/associated-type-bounds/struct-bounds.rs:100:31: 100:36
        _27 = &(_22.0: u8);              // scope 7 at ui/associated-type-bounds/struct-bounds.rs:100:42: 100:47
        _26 = _27;                       // scope 7 at ui/associated-type-bounds/struct-bounds.rs:100:42: 100:47
        _23 = St4::<'_, '_, ()> { f1: move _24, f2: move _26 }; // scope 7 at ui/associated-type-bounds/struct-bounds.rs:100:15: 100:50
                                         // adt
                                         // + user_ty: UserType(0)
        _94 = const _;                   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(&u8, &u8), val: Unevaluated(main, [], Some(promoted[3])) }
        _29 = _94;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = (_23.0: &u8);              // scope 8 at ui/associated-type-bounds/struct-bounds.rs:101:27: 101:33
        _33 = (_23.1: &u8);              // scope 8 at ui/associated-type-bounds/struct-bounds.rs:101:35: 101:41
        _31 = (move _32, move _33);      // scope 8 at ui/associated-type-bounds/struct-bounds.rs:101:26: 101:42
        _30 = &_31;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _30);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_28.0: &(&u8, &u8));      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_28.1: &(&u8, &u8));      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <(&u8, &u8) as PartialEq>::eq(move _38, move _39) -> bb5; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (&u8, &u8), &'b (&u8, &u8)) -> bool {<(&u8, &u8) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _36 = Not(move _37);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb7, otherwise: bb6]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _40 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<(&u8, &u8), (&u8, &u8)>(move _42, move _43, move _45, move _47); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (&u8, &u8), &'b (&u8, &u8), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(&u8, &u8), (&u8, &u8)>}, val: Value(<ZST>) }
    }

    bb7: {
        _93 = const _;                   // scope 8 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
                                         // + literal: Const { ty: &bool, val: Unevaluated(main, [], Some(promoted[2])) }
        _50 = _93;                       // scope 8 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
        _49 = _50;                       // scope 8 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
        _48 = St6::<&str> { f0: const "bar", f1: const 24_u8, f2: move _49, f3: const 12_u16 }; // scope 8 at ui/associated-type-bounds/struct-bounds.rs:111:15: 111:65
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:111:25: 111:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _92 = const _;                   // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &(&str, u8, &bool, u16), val: Unevaluated(main, [], Some(promoted[1])) }
        _52 = _92;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _55 = (_48.0: &str);             // scope 11 at ui/associated-type-bounds/struct-bounds.rs:112:41: 112:47
        _56 = const 24_u8;               // scope 11 at ui/associated-type-bounds/struct-bounds.rs:112:49: 112:55
        _57 = (_48.2: &bool);            // scope 11 at ui/associated-type-bounds/struct-bounds.rs:112:57: 112:63
        _58 = const 12_u16;              // scope 11 at ui/associated-type-bounds/struct-bounds.rs:112:65: 112:71
        _54 = (move _55, move _56, move _57, move _58); // scope 11 at ui/associated-type-bounds/struct-bounds.rs:112:40: 112:72
        _53 = &_54;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _51 = (move _52, move _53);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_51.0: &(&str, u8, &bool, u16)); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_51.1: &(&str, u8, &bool, u16)); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <(&str, u8, &bool, u16) as PartialEq>::eq(move _63, move _64) -> bb8; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (&str, u8, &bool, u16), &'b (&str, u8, &bool, u16)) -> bool {<(&str, u8, &bool, u16) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _61 = Not(move _62);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb10, otherwise: bb9]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _65 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<(&str, u8, &bool, u16), (&str, u8, &bool, u16)>(move _67, move _68, move _70, move _72); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (&str, u8, &bool, u16), &'b (&str, u8, &bool, u16), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(&str, u8, &bool, u16), (&str, u8, &bool, u16)>}, val: Value(<ZST>) }
    }

    bb10: {
        _73 = const StSelf::<&str> {{ f2: 42_u8 }}; // scope 11 at ui/associated-type-bounds/struct-bounds.rs:114:18: 114:53
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:114:18: 114:53
                                         // + literal: Const { ty: StSelf<&str>, val: Value(Scalar(0x2a)) }
        _75 = &(_73.0: u8);              // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _91 = const _;                   // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _76 = _91;                       // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _74 = (move _75, move _76);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _77 = (_74.0: &u8);              // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _78 = (_74.1: &u8);              // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _81 = (*_77);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _82 = const 42_u8;               // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _80 = Eq(move _81, move _82);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _79 = Not(move _80);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _79) -> [0: bb12, otherwise: bb11]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _83 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _85 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _87 = _77;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _86 = _87;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _89 = _78;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _88 = _89;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _90 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _84 = core::panicking::assert_failed::<u8, u8>(move _85, move _86, move _88, move _90); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/associated-type-bounds/struct-bounds.rs:116:2: 116:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:115:27: 115:31

    bb0: {
        _1 = const 42_u8;                // scope 0 at ui/associated-type-bounds/struct-bounds.rs:115:27: 115:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &(&str, u8, &bool, u16) = {
    let mut _0: &(&str, u8, &bool, u16); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (&str, u8, &bool, u16);  // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:16: 112:38
    let mut _2: &bool;                   // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:28: 112:33
    let mut _3: bool;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:29: 112:33

    bb0: {
        _3 = const true;                 // scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:29: 112:33
        _2 = &_3;                        // scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:28: 112:33
        _1 = (const "bar", const 24_u8, move _2, const 12_u16); // scope 0 at ui/associated-type-bounds/struct-bounds.rs:112:16: 112:38
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:112:17: 112:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
    let mut _1: bool;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:47: 111:51

    bb0: {
        _1 = const true;                 // scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:47: 111:51
        _0 = &_1;                        // scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
        return;                          // scope 0 at ui/associated-type-bounds/struct-bounds.rs:111:46: 111:51
    }
}

promoted[3] in main: &(&u8, &u8) = {
    let mut _0: &(&u8, &u8);             // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (&u8, &u8);              // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:16: 101:24
    let mut _2: &u8;                     // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:17: 101:19
    let mut _3: u8;                      // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:18: 101:19
    let mut _4: &u8;                     // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:21: 101:23
    let mut _5: u8;                      // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:22: 101:23

    bb0: {
        _3 = const 1_u8;                 // scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:18: 101:19
        _2 = &_3;                        // scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:17: 101:19
        _5 = const 2_u8;                 // scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:22: 101:23
        _4 = &_5;                        // scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:21: 101:23
        _1 = (move _2, move _4);         // scope 0 at ui/associated-type-bounds/struct-bounds.rs:101:16: 101:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[4] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/associated-type-bounds/struct-bounds.rs:96:41: 96:46
    let mut _1: bool;                    // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:96:42: 96:46

    bb0: {
        _1 = const true;                 // scope 0 at ui/associated-type-bounds/struct-bounds.rs:96:42: 96:46
        _0 = &_1;                        // scope 0 at ui/associated-type-bounds/struct-bounds.rs:96:41: 96:46
        return;                          // scope 0 at ui/associated-type-bounds/struct-bounds.rs:96:41: 96:46
    }
}

promoted[5] in main: &(&str, bool, u8) = {
    let mut _0: &(&str, bool, u8);       // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: (&str, bool, u8);        // in scope 0 at ui/associated-type-bounds/struct-bounds.rs:92:16: 92:33

    bb0: {
        _1 = (const "foo", const true, const 42_u8); // scope 0 at ui/associated-type-bounds/struct-bounds.rs:92:16: 92:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/struct-bounds.rs:92:17: 92:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
