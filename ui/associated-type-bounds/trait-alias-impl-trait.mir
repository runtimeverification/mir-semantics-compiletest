// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_copy(_1: T) -> () {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:16:25: 16:26
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:16:31: 16:31
    let _2: T;                           // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:17:9: 17:11
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:17:9: 17:11
        let _3: T;                       // in scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:18:9: 18:11
        scope 2 {
            debug _x => _3;              // in scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:18:9: 18:11
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:17:14: 17:15
        _3 = _1;                         // scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:18:14: 18:15
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:19:2: 19:2
    }
}

fn assert_static(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:20:36: 20:36

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:20:37: 20:38
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:20:38: 20:38
    }
}

fn assert_forall_tr2(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:21:48: 21:48

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:21:49: 21:50
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:21:50: 21:50
    }
}

fn <impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:24:16: 24:21>::clone(_1: &S2) -> S2 {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:24:16: 24:21
    let mut _0: S2;                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:24:16: 24:21

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:24:21: 24:21
    }
}

fn <impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:26:1: 26:16>::mk(_1: S1) -> S2 {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:28:11: 28:15
    let mut _0: S2;                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:28:20: 28:29

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:30:6: 30:6
    }
}

fn def_et1() -> Et1 {
    let mut _0: Et1;                     // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:34:17: 34:20

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:36:2: 36:2
    }
}

fn use_et1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:37:18: 37:18
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:38:5: 38:32
    let mut _2: impl std::marker::Copy;  // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:38:17: 38:31
    let mut _3: Et1;                     // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:38:17: 38:26

    bb0: {
        _3 = def_et1() -> bb1;           // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:38:17: 38:26
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:38:17: 38:24
                                         // + literal: Const { ty: fn() -> Et1 {def_et1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Et1 as Tr1>::mk(move _3) -> bb2; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:38:17: 38:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:38:27: 38:29
                                         // + literal: Const { ty: fn(Et1) -> <Et1 as Tr1>::As1 {<Et1 as Tr1>::mk}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = assert_copy::<impl std::marker::Copy>(move _2) -> bb3; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:38:5: 38:32
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:38:5: 38:16
                                         // + literal: Const { ty: fn(impl std::marker::Copy) {assert_copy::<impl std::marker::Copy>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:39:2: 39:2
    }
}

fn def_et2() -> Et2 {
    let mut _0: Et2;                     // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:42:17: 42:20

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:44:2: 44:2
    }
}

fn use_et2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:45:18: 45:18
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:46:5: 46:34
    let mut _2: impl Sized + 'static;    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:46:19: 46:33
    let mut _3: Et2;                     // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:46:19: 46:28

    bb0: {
        _3 = def_et2() -> bb1;           // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:46:19: 46:28
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:46:19: 46:26
                                         // + literal: Const { ty: fn() -> Et2 {def_et2}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Et2 as Tr1>::mk(move _3) -> bb2; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:46:19: 46:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:46:29: 46:31
                                         // + literal: Const { ty: fn(Et2) -> <Et2 as Tr1>::As1 {<Et2 as Tr1>::mk}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = assert_static::<impl Sized + 'static>(move _2) -> bb3; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:46:5: 46:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:46:5: 46:18
                                         // + literal: Const { ty: fn(impl Sized + 'static) {assert_static::<impl Sized + 'static>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:47:2: 47:2
    }
}

fn def_et3() -> Et3 {
    let mut _0: Et3;                     // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:50:17: 50:20

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:59:2: 59:2
    }
}

fn def_et3::<impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:52:5: 52:19>::mk(_1: def_et3::A) -> std::ops::Range<u8> {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:54:15: 54:19
    let mut _0: std::ops::Range<u8>;     // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:54:24: 54:33

    bb0: {
        _0 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 }; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:55:13: 55:18
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:56:10: 56:10
    }
}

fn use_et3() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:60:18: 60:18
    let _1: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:9: 61:11
    let mut _2: &impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:36
    let _3: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:28
    let mut _4: Et3;                     // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:23
    let mut _6: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    let mut _7: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    let mut _9: std::option::Option<impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    let mut _10: &mut impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    let mut _11: &mut impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    let mut _12: isize;                  // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:5: 66:6
    let mut _15: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:64:18: 64:20
    let mut _16: u8;                     // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:14: 65:23
    let mut _17: impl std::convert::Into<u8>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:14: 65:16
    let mut _18: (u8, bool);             // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:9: 65:23
    let mut _19: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: u8;                         // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:19: 67:47
    let mut _23: std::iter::Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]>; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:19: 67:41
    let mut _24: std::ops::Range<u8>;    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:19: 67:26
    let mut _25: [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]; // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:40
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug _0 => _1;                  // in scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:9: 61:11
        let mut _5: u8;                  // in scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:62:9: 62:14
        scope 2 {
            debug s => _5;               // in scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:62:9: 62:14
            let mut _8: impl std::clone::Clone + std::iter::Iterator<Item = impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>>; // in scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
            let _26: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _27: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug iter => _8;        // in scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
                let _13: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>; // in scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:9: 63:11
                scope 4 {
                    debug _1 => _13;     // in scope 4 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:9: 63:11
                    let _14: impl std::convert::Into<u8>; // in scope 4 at ui/associated-type-bounds/trait-alias-impl-trait.rs:64:13: 64:15
                    scope 5 {
                        debug _2 => _14; // in scope 5 at ui/associated-type-bounds/trait-alias-impl-trait.rs:64:13: 64:15
                    }
                }
            }
            scope 6 {
                debug left_val => _26;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _27;  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _32: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 7 {
                    debug kind => _32;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = def_et3() -> bb1;           // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:23
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:21
                                         // + literal: Const { ty: fn() -> Et3 {def_et3}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = <Et3 as Tr1>::mk(move _4) -> bb2; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:28
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:61:24: 61:26
                                         // + literal: Const { ty: fn(Et3) -> <Et3 as Tr1>::As1 {<Et3 as Tr1>::mk}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:36
        _1 = <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Clone>::clone(move _2) -> bb3; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:61:14: 61:36
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:61:29: 61:34
                                         // + literal: Const { ty: for<'a> fn(&'a impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>>) -> impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> {<impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = const 0_u8;                 // scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:62:17: 62:20
        _7 = move _1;                    // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
        _6 = <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as IntoIterator>::into_iter(move _7) -> bb4; // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
                                         // + literal: Const { ty: fn(impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>>) -> <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as IntoIterator>::IntoIter {<impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = move _6;                    // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
        goto -> bb5;                     // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:5: 66:6
    }

    bb5: {
        _11 = &mut _8;                   // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
        _10 = &mut (*_11);               // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
        _9 = <impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Iterator>::next(move _10) -> bb6; // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>>) -> Option<<impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Iterator>::Item> {<impl Clone + Iterator<Item = impl Add<u8, Output = impl Into<u8>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = discriminant(_9);          // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
        switchInt(move _12) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    }

    bb7: {
        _13 = move ((_9 as Some).0: impl std::ops::Add<u8, Output = impl std::convert::Into<u8>>); // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:9: 63:11
        _15 = move _13;                  // scope 4 at ui/associated-type-bounds/trait-alias-impl-trait.rs:64:18: 64:20
        _14 = <impl Add<u8, Output = impl Into<u8>> as Add<u8>>::add(move _15, const 1_u8) -> bb10; // scope 4 at ui/associated-type-bounds/trait-alias-impl-trait.rs:64:18: 64:26
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:64:18: 64:26
                                         // + literal: Const { ty: fn(impl Add<u8, Output = impl Into<u8>>, u8) -> <impl Add<u8, Output = impl Into<u8>> as Add<u8>>::Output {<impl Add<u8, Output = impl Into<u8>> as Add<u8>>::add}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:15: 63:17
    }

    bb9: {
        _20 = &_5;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = std::ops::Range::<u8> { start: const 0_u8, end: const 10_u8 }; // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:19: 67:26
        _23 = <std::ops::Range<u8> as Iterator>::map::<u8, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]>(move _24, move _25) -> bb13; // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:19: 67:41
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:67:27: 67:30
                                         // + literal: Const { ty: fn(std::ops::Range<u8>, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]) -> Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]> {<std::ops::Range<u8> as Iterator>::map::<u8, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]>}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = move _14;                  // scope 5 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:14: 65:16
        _16 = <impl Into<u8> as Into<u8>>::into(move _17) -> bb11; // scope 5 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:14: 65:23
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:65:17: 65:21
                                         // + literal: Const { ty: fn(impl Into<u8>) -> u8 {<impl Into<u8> as Into<u8>>::into}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = CheckedAdd(_5, _16);       // scope 5 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:9: 65:23
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", _5, move _16) -> bb12; // scope 5 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:9: 65:23
    }

    bb12: {
        _5 = move (_18.0: u8);           // scope 5 at ui/associated-type-bounds/trait-alias-impl-trait.rs:65:9: 65:23
        goto -> bb5;                     // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:63:5: 66:6
    }

    bb13: {
        _22 = <Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]> as Iterator>::sum::<u8>(move _23) -> bb14; // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:19: 67:47
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:67:42: 67:45
                                         // + literal: Const { ty: fn(Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]>) -> u8 {<Map<std::ops::Range<u8>, [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34]> as Iterator>::sum::<u8>}, val: Value(<ZST>) }
    }

    bb14: {
        _21 = &_22;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_19.0: &u8);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_19.1: &u8);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = (*_26);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = (*_27);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = Eq(move _30, move _31);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _28 = Not(move _29);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb16, otherwise: bb15]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _32 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = assert_failed::<u8, u8>(move _34, move _35, move _37, move _39); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb16: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:68:2: 68:2
    }
}

fn use_et3::{closure#0}(_1: &mut [closure@ui/associated-type-bounds/trait-alias-impl-trait.rs:67:31: 67:34], _2: u8) -> u8 {
    debug x => _2;                       // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:32: 67:33
    let mut _0: u8;                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:35
    let mut _3: u8;                      // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:36
    let mut _4: (u8, bool);              // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:40

    bb0: {
        _3 = _2;                         // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:36
        _4 = CheckedAdd(_3, const 1_u8); // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:40
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u8) -> bb1; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:40
    }

    bb1: {
        _0 = move (_4.0: u8);            // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:35: 67:40
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:67:40: 67:40
    }
}

fn def_et4() -> Et4 {
    let mut _0: Et4;                     // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:71:17: 71:20

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:86:2: 86:2
    }
}

fn def_et4::<impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:72:20: 72:25>::clone(_1: &def_et4::A) -> def_et4::A {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:72:20: 72:25
    let mut _0: def_et4::A;              // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:72:20: 72:25

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:72:25: 72:25
    }
}

fn def_et4::<impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:74:5: 74:19>::mk(_1: def_et4::A) -> def_et4::A {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:76:15: 76:19
    let mut _0: def_et4::A;              // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:76:24: 76:25

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:78:10: 78:10
    }
}

fn def_et4::<impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:80:5: 80:27>::tr2(_1: def_et4::A) -> &def_et4::A {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:81:16: 81:20
    let mut _0: &def_et4::A;             // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
    let mut _2: &def_et4::A;             // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15

    bb0: {
        _2 = const _;                    // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
                                         // + literal: Const { ty: &def_et4::A, val: Unevaluated(<def_et4::A as Tr2<'a>>::tr2, [ReErased], Some(promoted[0])) }
        _0 = _2;                         // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:83:10: 83:10
    }
}

promoted[0] in def_et4::<impl at ui/associated-type-bounds/trait-alias-impl-trait.rs:80:5: 80:27>::tr2: &def_et4::A = {
    let mut _0: &def_et4::A;             // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
    let mut _1: def_et4::A;              // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:14: 82:15

    bb0: {
        _1 = def_et4::A;                 // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:14: 82:15
        _0 = &_1;                        // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:82:13: 82:15
    }
}

fn use_et4() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:87:18: 87:18
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:88:5: 88:38
    let mut _2: impl for<'a> Tr2<'a>;    // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:88:23: 88:37
    let mut _3: Et4;                     // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:88:23: 88:32

    bb0: {
        _3 = def_et4() -> bb1;           // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:88:23: 88:32
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:88:23: 88:30
                                         // + literal: Const { ty: fn() -> Et4 {def_et4}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Et4 as Tr1>::mk(move _3) -> bb2; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:88:23: 88:37
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:88:33: 88:35
                                         // + literal: Const { ty: fn(Et4) -> <Et4 as Tr1>::As1 {<Et4 as Tr1>::mk}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = assert_forall_tr2::<impl for<'a> Tr2<'a>>(move _2) -> bb3; // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:88:5: 88:38
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:88:5: 88:22
                                         // + literal: Const { ty: fn(impl for<'a> Tr2<'a>) {assert_forall_tr2::<impl for<'a> Tr2<'a>>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:89:2: 89:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:91:11: 91:11
    let mut _1: ();                      // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:92:13: 92:22
    let mut _2: ();                      // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:93:13: 93:22
    let mut _3: ();                      // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:94:13: 94:22
    let mut _4: ();                      // in scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:95:13: 95:22
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _1 = use_et1() -> bb1;           // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:92:13: 92:22
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:92:13: 92:20
                                         // + literal: Const { ty: fn() {use_et1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = use_et2() -> bb2;           // scope 1 at ui/associated-type-bounds/trait-alias-impl-trait.rs:93:13: 93:22
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:93:13: 93:20
                                         // + literal: Const { ty: fn() {use_et2}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = use_et3() -> bb3;           // scope 2 at ui/associated-type-bounds/trait-alias-impl-trait.rs:94:13: 94:22
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:94:13: 94:20
                                         // + literal: Const { ty: fn() {use_et3}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = use_et4() -> bb4;           // scope 3 at ui/associated-type-bounds/trait-alias-impl-trait.rs:95:13: 95:22
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-alias-impl-trait.rs:95:13: 95:20
                                         // + literal: Const { ty: fn() {use_et4}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-alias-impl-trait.rs:96:2: 96:2
    }
}
