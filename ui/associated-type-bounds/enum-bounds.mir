// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wrap_en1_1(_1: T) -> En1<T> {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:25:18: 25:19
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:25:27: 25:33
    let mut _2: T;                       // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:26:17: 26:18

    bb0: {
        _2 = move _1;                    // scope 0 at ui/associated-type-bounds/enum-bounds.rs:26:17: 26:18
        _0 = En1::<T>::Outest(move _2);  // scope 0 at ui/associated-type-bounds/enum-bounds.rs:26:5: 26:19
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:27:2: 27:2
    }
}

fn wrap_en1_2(_1: <T as Tr1>::As1) -> En1<T> {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:29:18: 29:19
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:29:32: 29:38
    let mut _2: <T as Tr1>::As1;         // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:30:16: 30:17

    bb0: {
        _2 = move _1;                    // scope 0 at ui/associated-type-bounds/enum-bounds.rs:30:16: 30:17
        _0 = En1::<T>::Outer(move _2);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:30:5: 30:18
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:31:2: 31:2
    }
}

fn wrap_en1_3(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En1<T> {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:33:18: 33:19
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:33:46: 33:52
    let mut _2: <<T as Tr1>::As1 as Tr2>::As2; // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:34:16: 34:17

    bb0: {
        _2 = move _1;                    // scope 0 at ui/associated-type-bounds/enum-bounds.rs:34:16: 34:17
        _0 = En1::<T>::Inner(move _2);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:34:5: 34:18
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:35:2: 35:2
    }
}

fn _make_en7(_1: _En7<'_, '_, T>) -> () {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:77:25: 77:26
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:78:1: 78:1
    let mut _2: isize;                   // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:82:9: 82:20
    let _3: &T;                          // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:82:18: 82:19
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/associated-type-bounds/enum-bounds.rs:82:18: 82:19
        scope 2 {
        }
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/associated-type-bounds/enum-bounds.rs:81:11: 81:12
        switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb1]; // scope 0 at ui/associated-type-bounds/enum-bounds.rs:81:5: 81:12
    }

    bb1: {
        unreachable;                     // scope 0 at ui/associated-type-bounds/enum-bounds.rs:81:11: 81:12
    }

    bb2: {
        _3 = ((_1 as V0).0: &T);         // scope 0 at ui/associated-type-bounds/enum-bounds.rs:82:18: 82:19
        goto -> bb3;                     // scope 0 at ui/associated-type-bounds/enum-bounds.rs:84:9: 84:10
    }

    bb3: {
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:87:2: 87:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:97:11: 97:11
    let mut _1: En1<&str>;               // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:98:33: 98:55
    let mut _2: bool;                    // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:98:24: 98:29
    let mut _3: isize;                   // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:98:12: 98:30
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _5: En1<&str>;               // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:99:31: 99:55
    let mut _6: isize;                   // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:99:12: 99:28
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _8: En1<&str>;               // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:100:31: 100:55
    let mut _9: isize;                   // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:100:12: 100:28
    let mut _10: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
        scope 5 {
            scope 6 {
                scope 7 {
                    scope 8 {
                        scope 9 {
                            let _11: (u8,); // in scope 9 at ui/associated-type-bounds/enum-bounds.rs:110:9: 110:11
                            scope 10 {
                                debug f1 => _11; // in scope 10 at ui/associated-type-bounds/enum-bounds.rs:110:9: 110:11
                                let _12: (u8,); // in scope 10 at ui/associated-type-bounds/enum-bounds.rs:111:9: 111:11
                                scope 11 {
                                    debug f2 => _12; // in scope 11 at ui/associated-type-bounds/enum-bounds.rs:111:9: 111:11
                                    scope 12 {
                                        scope 13 {
                                            scope 14 {
                                                scope 15 {
                                                    scope 16 {
                                                        scope 17 {
                                                            scope 18 {
                                                                scope 19 {
                                                                    scope 20 {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = wrap_en1_1::<&str>(const "foo") -> bb1; // scope 1 at ui/associated-type-bounds/enum-bounds.rs:98:33: 98:55
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/enum-bounds.rs:98:33: 98:48
                                         // + literal: Const { ty: fn(&str) -> En1<&str> {wrap_en1_1::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/enum-bounds.rs:98:49: 98:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 1 at ui/associated-type-bounds/enum-bounds.rs:98:12: 98:30
        switchInt(move _3) -> [0: bb2, otherwise: bb5]; // scope 1 at ui/associated-type-bounds/enum-bounds.rs:98:12: 98:30
    }

    bb2: {
        _2 = <str as PartialEq>::eq(((_1 as Outest).0: &str), const "foo") -> bb3; // scope 1 at ui/associated-type-bounds/enum-bounds.rs:98:24: 98:29
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/enum-bounds.rs:98:24: 98:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/enum-bounds.rs:98:24: 98:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _2) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/associated-type-bounds/enum-bounds.rs:98:24: 98:29
    }

    bb4: {
        _5 = wrap_en1_2::<&str>(const true) -> bb6; // scope 2 at ui/associated-type-bounds/enum-bounds.rs:99:31: 99:55
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/enum-bounds.rs:99:31: 99:49
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(<&str as Tr1>::As1) -> En1<&str> {wrap_en1_2::<&str>}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _6 = discriminant(_5);           // scope 2 at ui/associated-type-bounds/enum-bounds.rs:99:12: 99:28
        switchInt(move _6) -> [1: bb7, otherwise: bb9]; // scope 2 at ui/associated-type-bounds/enum-bounds.rs:99:12: 99:28
    }

    bb7: {
        switchInt(((_5 as Outer).0: bool)) -> [0: bb9, otherwise: bb8]; // scope 2 at ui/associated-type-bounds/enum-bounds.rs:99:12: 99:28
    }

    bb8: {
        _8 = wrap_en1_3::<&str>(const 24_u8) -> bb10; // scope 3 at ui/associated-type-bounds/enum-bounds.rs:100:31: 100:55
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/enum-bounds.rs:100:31: 100:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(<<&str as Tr1>::As1 as Tr2>::As2) -> En1<&str> {wrap_en1_3::<&str>}, val: Value(<ZST>) }
    }

    bb9: {
        _7 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _9 = discriminant(_8);           // scope 3 at ui/associated-type-bounds/enum-bounds.rs:100:12: 100:28
        switchInt(move _9) -> [2: bb11, otherwise: bb13]; // scope 3 at ui/associated-type-bounds/enum-bounds.rs:100:12: 100:28
    }

    bb11: {
        switchInt(((_8 as Inner).0: u8)) -> [24: bb12, otherwise: bb13]; // scope 3 at ui/associated-type-bounds/enum-bounds.rs:100:12: 100:28
    }

    bb12: {
        _11 = const (1_u8,);             // scope 9 at ui/associated-type-bounds/enum-bounds.rs:110:14: 110:18
        _12 = const (2_u8,);             // scope 10 at ui/associated-type-bounds/enum-bounds.rs:111:14: 111:18
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:123:2: 123:2
    }

    bb13: {
        _10 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:117:29: 117:35
    let mut _1: bool;                    // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:117:30: 117:35

    bb0: {
        _1 = const false;                // scope 0 at ui/associated-type-bounds/enum-bounds.rs:117:30: 117:35
        _0 = &_1;                        // scope 0 at ui/associated-type-bounds/enum-bounds.rs:117:29: 117:35
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:117:29: 117:35
    }
}

promoted[1] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:108:29: 108:34
    let mut _1: bool;                    // in scope 0 at ui/associated-type-bounds/enum-bounds.rs:108:30: 108:34

    bb0: {
        _1 = const true;                 // scope 0 at ui/associated-type-bounds/enum-bounds.rs:108:30: 108:34
        _0 = &_1;                        // scope 0 at ui/associated-type-bounds/enum-bounds.rs:108:29: 108:34
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:108:29: 108:34
    }
}

fn main::{closure#0}(_1: &[closure@ui/associated-type-bounds/enum-bounds.rs:105:29: 105:31]) -> u8 {
    let mut _0: u8;                      // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:105:32: 105:32

    bb0: {
        _0 = const 12_u8;                // scope 0 at ui/associated-type-bounds/enum-bounds.rs:105:32: 105:36
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:105:36: 105:36
    }
}

fn En1::Outest(_1: T) -> En1<T> {
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:20:5: 20:11

    bb0: {
        _0 = En1::<T>::Outest(move _1);  // scope 0 at ui/associated-type-bounds/enum-bounds.rs:20:5: 20:11
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:20:5: 20:11
    }
}

// MIR FOR CTFE
fn En1::Outest(_1: T) -> En1<T> {
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:20:5: 20:11

    bb0: {
        _0 = En1::<T>::Outest(move _1);  // scope 0 at ui/associated-type-bounds/enum-bounds.rs:20:5: 20:11
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:20:5: 20:11
    }
}

fn En1::Outer(_1: <T as Tr1>::As1) -> En1<T> {
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:21:5: 21:10

    bb0: {
        _0 = En1::<T>::Outer(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:21:5: 21:10
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:21:5: 21:10
    }
}

// MIR FOR CTFE
fn En1::Outer(_1: <T as Tr1>::As1) -> En1<T> {
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:21:5: 21:10

    bb0: {
        _0 = En1::<T>::Outer(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:21:5: 21:10
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:21:5: 21:10
    }
}

fn En1::Inner(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En1<T> {
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:22:5: 22:10

    bb0: {
        _0 = En1::<T>::Inner(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:22:5: 22:10
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:22:5: 22:10
    }
}

// MIR FOR CTFE
fn En1::Inner(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En1<T> {
    let mut _0: En1<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:22:5: 22:10

    bb0: {
        _0 = En1::<T>::Inner(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:22:5: 22:10
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:22:5: 22:10
    }
}

fn En2::V0(_1: T) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:38:5: 38:7

    bb0: {
        _0 = En2::<T>::V0(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:38:5: 38:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:38:5: 38:7
    }
}

// MIR FOR CTFE
fn En2::V0(_1: T) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:38:5: 38:7

    bb0: {
        _0 = En2::<T>::V0(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:38:5: 38:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:38:5: 38:7
    }
}

fn En2::V1(_1: <T as Tr1>::As1) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:39:5: 39:7

    bb0: {
        _0 = En2::<T>::V1(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:39:5: 39:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:39:5: 39:7
    }
}

// MIR FOR CTFE
fn En2::V1(_1: <T as Tr1>::As1) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:39:5: 39:7

    bb0: {
        _0 = En2::<T>::V1(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:39:5: 39:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:39:5: 39:7
    }
}

fn En2::V2(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:40:5: 40:7

    bb0: {
        _0 = En2::<T>::V2(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:40:5: 40:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:40:5: 40:7
    }
}

// MIR FOR CTFE
fn En2::V2(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:40:5: 40:7

    bb0: {
        _0 = En2::<T>::V2(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:40:5: 40:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:40:5: 40:7
    }
}

fn En2::V3(_1: <<<T as Tr1>::As1 as Tr2>::As2 as Tr3>::As3) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:41:5: 41:7

    bb0: {
        _0 = En2::<T>::V3(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:41:5: 41:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:41:5: 41:7
    }
}

// MIR FOR CTFE
fn En2::V3(_1: <<<T as Tr1>::As1 as Tr2>::As2 as Tr3>::As3) -> En2<T> {
    let mut _0: En2<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:41:5: 41:7

    bb0: {
        _0 = En2::<T>::V3(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:41:5: 41:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:41:5: 41:7
    }
}

fn En3::V0(_1: T) -> En3<T> {
    let mut _0: En3<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:45:5: 45:7

    bb0: {
        _0 = En3::<T>::V0(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:45:5: 45:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:45:5: 45:7
    }
}

// MIR FOR CTFE
fn En3::V0(_1: T) -> En3<T> {
    let mut _0: En3<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:45:5: 45:7

    bb0: {
        _0 = En3::<T>::V0(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:45:5: 45:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:45:5: 45:7
    }
}

fn En3::V1(_1: &<T as Tr1>::As1) -> En3<T> {
    let mut _0: En3<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:46:5: 46:7

    bb0: {
        _0 = En3::<T>::V1(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:46:5: 46:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:46:5: 46:7
    }
}

// MIR FOR CTFE
fn En3::V1(_1: &<T as Tr1>::As1) -> En3<T> {
    let mut _0: En3<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:46:5: 46:7

    bb0: {
        _0 = En3::<T>::V1(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:46:5: 46:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:46:5: 46:7
    }
}

fn En4::V0(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> En4<'_, '_, T> {
    let mut _0: En4<'_, '_, T>;          // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:50:5: 50:7

    bb0: {
        _0 = En4::<'_, '_, T>::V0(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:50:5: 50:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:50:5: 50:7
    }
}

// MIR FOR CTFE
fn En4::V0(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> En4<'_, '_, T> {
    let mut _0: En4<'_, '_, T>;          // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:50:5: 50:7

    bb0: {
        _0 = En4::<'_, '_, T>::V0(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:50:5: 50:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:50:5: 50:7
    }
}

fn En4::V1(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> En4<'_, '_, T> {
    let mut _0: En4<'_, '_, T>;          // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:51:5: 51:7

    bb0: {
        _0 = En4::<'_, '_, T>::V1(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:51:5: 51:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:51:5: 51:7
    }
}

// MIR FOR CTFE
fn En4::V1(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> En4<'_, '_, T> {
    let mut _0: En4<'_, '_, T>;          // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:51:5: 51:7

    bb0: {
        _0 = En4::<'_, '_, T>::V1(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:51:5: 51:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:51:5: 51:7
    }
}

fn _En5::_V0(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> _En5<'_, '_, T> {
    let mut _0: _En5<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:55:5: 55:8

    bb0: {
        _0 = _En5::<'_, '_, T>::_V0(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:55:5: 55:8
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:55:5: 55:8
    }
}

// MIR FOR CTFE
fn _En5::_V0(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> _En5<'_, '_, T> {
    let mut _0: _En5<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:55:5: 55:8

    bb0: {
        _0 = _En5::<'_, '_, T>::_V0(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:55:5: 55:8
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:55:5: 55:8
    }
}

fn _En5::_V1(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> _En5<'_, '_, T> {
    let mut _0: _En5<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:56:5: 56:8

    bb0: {
        _0 = _En5::<'_, '_, T>::_V1(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:56:5: 56:8
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:56:5: 56:8
    }
}

// MIR FOR CTFE
fn _En5::_V1(_1: &<<T as Tr1>::As1 as Tr4<'_>>::As4) -> _En5<'_, '_, T> {
    let mut _0: _En5<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:56:5: 56:8

    bb0: {
        _0 = _En5::<'_, '_, T>::_V1(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:56:5: 56:8
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:56:5: 56:8
    }
}

fn En6::V0(_1: T) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:63:5: 63:7

    bb0: {
        _0 = En6::<T>::V0(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:63:5: 63:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:63:5: 63:7
    }
}

// MIR FOR CTFE
fn En6::V0(_1: T) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:63:5: 63:7

    bb0: {
        _0 = En6::<T>::V0(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:63:5: 63:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:63:5: 63:7
    }
}

fn En6::V1(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:64:5: 64:7

    bb0: {
        _0 = En6::<T>::V1(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:64:5: 64:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:64:5: 64:7
    }
}

// MIR FOR CTFE
fn En6::V1(_1: <<T as Tr1>::As1 as Tr2>::As2) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:64:5: 64:7

    bb0: {
        _0 = En6::<T>::V1(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:64:5: 64:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:64:5: 64:7
    }
}

fn En6::V2(_1: &<T as Tr1>::As1) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:65:5: 65:7

    bb0: {
        _0 = En6::<T>::V2(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:65:5: 65:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:65:5: 65:7
    }
}

// MIR FOR CTFE
fn En6::V2(_1: &<T as Tr1>::As1) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:65:5: 65:7

    bb0: {
        _0 = En6::<T>::V2(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:65:5: 65:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:65:5: 65:7
    }
}

fn En6::V3(_1: <<T as Tr1>::As1 as Tr5>::As5) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:66:5: 66:7

    bb0: {
        _0 = En6::<T>::V3(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:66:5: 66:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:66:5: 66:7
    }
}

// MIR FOR CTFE
fn En6::V3(_1: <<T as Tr1>::As1 as Tr5>::As5) -> En6<T> {
    let mut _0: En6<T>;                  // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:66:5: 66:7

    bb0: {
        _0 = En6::<T>::V3(move _1);      // scope 0 at ui/associated-type-bounds/enum-bounds.rs:66:5: 66:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:66:5: 66:7
    }
}

fn _En7::V0(_1: &T) -> _En7<'_, '_, T> {
    let mut _0: _En7<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:73:5: 73:7

    bb0: {
        _0 = _En7::<'_, '_, T>::V0(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:73:5: 73:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:73:5: 73:7
    }
}

// MIR FOR CTFE
fn _En7::V0(_1: &T) -> _En7<'_, '_, T> {
    let mut _0: _En7<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:73:5: 73:7

    bb0: {
        _0 = _En7::<'_, '_, T>::V0(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:73:5: 73:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:73:5: 73:7
    }
}

fn _En7::V1(_1: &<<T as Tr1>::As1 as Tr2>::As2) -> _En7<'_, '_, T> {
    let mut _0: _En7<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:74:5: 74:7

    bb0: {
        _0 = _En7::<'_, '_, T>::V1(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:74:5: 74:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:74:5: 74:7
    }
}

// MIR FOR CTFE
fn _En7::V1(_1: &<<T as Tr1>::As1 as Tr2>::As2) -> _En7<'_, '_, T> {
    let mut _0: _En7<'_, '_, T>;         // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:74:5: 74:7

    bb0: {
        _0 = _En7::<'_, '_, T>::V1(move _1); // scope 0 at ui/associated-type-bounds/enum-bounds.rs:74:5: 74:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:74:5: 74:7
    }
}

fn EnSelf::V0(_1: T) -> EnSelf<T> {
    let mut _0: EnSelf<T>;               // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:90:5: 90:7

    bb0: {
        _0 = EnSelf::<T>::V0(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:90:5: 90:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:90:5: 90:7
    }
}

// MIR FOR CTFE
fn EnSelf::V0(_1: T) -> EnSelf<T> {
    let mut _0: EnSelf<T>;               // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:90:5: 90:7

    bb0: {
        _0 = EnSelf::<T>::V0(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:90:5: 90:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:90:5: 90:7
    }
}

fn EnSelf::V1(_1: <EnSelf<T> as Tr1>::As1) -> EnSelf<T> {
    let mut _0: EnSelf<T>;               // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:91:5: 91:7

    bb0: {
        _0 = EnSelf::<T>::V1(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:91:5: 91:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:91:5: 91:7
    }
}

// MIR FOR CTFE
fn EnSelf::V1(_1: <EnSelf<T> as Tr1>::As1) -> EnSelf<T> {
    let mut _0: EnSelf<T>;               // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:91:5: 91:7

    bb0: {
        _0 = EnSelf::<T>::V1(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:91:5: 91:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:91:5: 91:7
    }
}

fn EnSelf::V2(_1: <<EnSelf<T> as Tr1>::As1 as Tr2>::As2) -> EnSelf<T> {
    let mut _0: EnSelf<T>;               // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:92:5: 92:7

    bb0: {
        _0 = EnSelf::<T>::V2(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:92:5: 92:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:92:5: 92:7
    }
}

// MIR FOR CTFE
fn EnSelf::V2(_1: <<EnSelf<T> as Tr1>::As1 as Tr2>::As2) -> EnSelf<T> {
    let mut _0: EnSelf<T>;               // return place in scope 0 at ui/associated-type-bounds/enum-bounds.rs:92:5: 92:7

    bb0: {
        _0 = EnSelf::<T>::V2(move _1);   // scope 0 at ui/associated-type-bounds/enum-bounds.rs:92:5: 92:7
        return;                          // scope 0 at ui/associated-type-bounds/enum-bounds.rs:92:5: 92:7
    }
}
