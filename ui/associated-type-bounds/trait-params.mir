// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_three() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:9:42: 9:42

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:9:44: 9:44
    }
}

fn assert_iterator() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:10:39: 10:39

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:10:41: 10:41
    }
}

fn assert_copy() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:11:31: 11:31

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:11:33: 11:33
    }
}

fn assert_static() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:12:36: 12:36

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:12:38: 12:38
    }
}

fn assert_send() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:13:31: 13:31

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:13:33: 13:33
    }
}

fn assert_forall_into() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:14:54: 14:54

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:14:56: 14:56
    }
}

fn <impl at ui/associated-type-bounds/trait-params.rs:17:1: 17:28>::into(_1: A) -> &u8 {
    debug self => _1;                    // in scope 0 at ui/associated-type-bounds/trait-params.rs:17:39: 17:43
    let mut _0: &u8;                     // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59
    let mut _2: &u8;                     // in scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59

    bb0: {
        _2 = const _;                    // scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:17:57: 17:59
                                         // + literal: Const { ty: &u8, val: Unevaluated(<A as Into<&'a u8>>::into, [ReErased], Some(promoted[0])) }
        _0 = _2;                         // scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:17:61: 17:61
    }
}

promoted[0] in <impl at ui/associated-type-bounds/trait-params.rs:17:1: 17:28>::into: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59
    let mut _1: u8;                      // in scope 0 at ui/associated-type-bounds/trait-params.rs:17:58: 17:59

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/associated-type-bounds/trait-params.rs:17:58: 17:59
        _0 = &_1;                        // scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:17:57: 17:59
    }
}

fn Case1::_a() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:29:13: 29:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:30:9: 30:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:31:9: 31:33

    bb0: {
        _1 = assert_iterator::<A>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:30:9: 30:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:30:9: 30:29
                                         // + literal: Const { ty: fn() {assert_iterator::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_copy::<<A as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:31:9: 31:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:31:9: 31:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_copy::<<A as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:32:6: 32:6
    }
}

fn Case1::_b() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:33:13: 33:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:34:9: 34:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:35:9: 35:35

    bb0: {
        _1 = assert_iterator::<B>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:34:9: 34:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:34:9: 34:29
                                         // + literal: Const { ty: fn() {assert_iterator::<B>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_static::<<B as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:35:9: 35:35
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:35:9: 35:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_static::<<B as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:36:6: 36:6
    }
}

fn Case1::_c() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:37:13: 37:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:38:9: 38:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:39:9: 39:33
    let _3: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:40:9: 40:35
    let _4: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:41:9: 41:33

    bb0: {
        _1 = assert_iterator::<C>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:38:9: 38:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:38:9: 38:29
                                         // + literal: Const { ty: fn() {assert_iterator::<C>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_copy::<<C as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:39:9: 39:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:39:9: 39:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_copy::<<C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_static::<<C as Iterator>::Item>() -> bb3; // scope 0 at ui/associated-type-bounds/trait-params.rs:40:9: 40:35
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:40:9: 40:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {assert_static::<<C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_send::<<C as Iterator>::Item>() -> bb4; // scope 0 at ui/associated-type-bounds/trait-params.rs:41:9: 41:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:41:9: 41:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {assert_send::<<C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:42:6: 42:6
    }
}

fn Case1::_d() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:43:13: 43:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:44:9: 44:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:45:9: 45:40

    bb0: {
        _1 = assert_iterator::<D>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:44:9: 44:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:44:9: 44:29
                                         // + literal: Const { ty: fn() {assert_iterator::<D>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_forall_into::<<D as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:45:9: 45:40
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:45:9: 45:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_forall_into::<<D as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:46:6: 46:6
    }
}

fn Case1::_e() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:47:13: 47:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:48:9: 48:28
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:49:9: 49:34
    let _3: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:50:9: 50:34
    let _4: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:51:9: 51:34
    let _5: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:52:9: 52:50
    let _6: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:53:9: 53:50
    let _7: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:54:9: 54:50

    bb0: {
        _1 = assert_three::<E>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:48:9: 48:28
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:48:9: 48:26
                                         // + literal: Const { ty: fn() {assert_three::<E>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_iterator::<<E as Three>::A>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:49:9: 49:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:49:9: 49:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_iterator::<<E as Three>::A>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_iterator::<<E as Three>::B>() -> bb3; // scope 0 at ui/associated-type-bounds/trait-params.rs:50:9: 50:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:50:9: 50:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {assert_iterator::<<E as Three>::B>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_iterator::<<E as Three>::C>() -> bb4; // scope 0 at ui/associated-type-bounds/trait-params.rs:51:9: 51:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:51:9: 51:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {assert_iterator::<<E as Three>::C>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = assert_copy::<<<E as Three>::A as Iterator>::Item>() -> bb5; // scope 0 at ui/associated-type-bounds/trait-params.rs:52:9: 52:50
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:52:9: 52:48
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() {assert_copy::<<<E as Three>::A as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = assert_copy::<<<E as Three>::B as Iterator>::Item>() -> bb6; // scope 0 at ui/associated-type-bounds/trait-params.rs:53:9: 53:50
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:53:9: 53:48
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() {assert_copy::<<<E as Three>::B as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = assert_copy::<<<E as Three>::C as Iterator>::Item>() -> bb7; // scope 0 at ui/associated-type-bounds/trait-params.rs:54:9: 54:50
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:54:9: 54:48
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() {assert_copy::<<<E as Three>::C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:55:6: 55:6
    }
}

fn Case1::_self() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:56:16: 56:16
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:57:9: 57:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:58:9: 58:33
    let _3: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:59:9: 59:35
    let _4: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:60:9: 60:33

    bb0: {
        _1 = assert_three::<Self>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:57:9: 57:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:57:9: 57:29
                                         // + literal: Const { ty: fn() {assert_three::<Self>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_copy::<<Self as Three>::B>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:58:9: 58:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:58:9: 58:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_copy::<<Self as Three>::B>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_static::<<Self as Three>::A>() -> bb3; // scope 0 at ui/associated-type-bounds/trait-params.rs:59:9: 59:35
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:59:9: 59:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {assert_static::<<Self as Three>::A>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_send::<<Self as Three>::C>() -> bb4; // scope 0 at ui/associated-type-bounds/trait-params.rs:60:9: 60:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:60:9: 60:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {assert_send::<<Self as Three>::C>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:61:6: 61:6
    }
}

fn Case2::_a() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:77:13: 77:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:78:9: 78:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:79:9: 79:33

    bb0: {
        _1 = assert_iterator::<A>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:78:9: 78:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:78:9: 78:29
                                         // + literal: Const { ty: fn() {assert_iterator::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_copy::<<A as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:79:9: 79:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:79:9: 79:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_copy::<<A as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:80:6: 80:6
    }
}

fn Case2::_b() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:81:13: 81:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:82:9: 82:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:83:9: 83:35

    bb0: {
        _1 = assert_iterator::<B>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:82:9: 82:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:82:9: 82:29
                                         // + literal: Const { ty: fn() {assert_iterator::<B>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_static::<<B as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:83:9: 83:35
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:83:9: 83:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_static::<<B as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:84:6: 84:6
    }
}

fn Case2::_c() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:85:13: 85:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:86:9: 86:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:87:9: 87:33
    let _3: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:88:9: 88:35
    let _4: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:89:9: 89:33

    bb0: {
        _1 = assert_iterator::<C>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:86:9: 86:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:86:9: 86:29
                                         // + literal: Const { ty: fn() {assert_iterator::<C>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_copy::<<C as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:87:9: 87:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:87:9: 87:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_copy::<<C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_static::<<C as Iterator>::Item>() -> bb3; // scope 0 at ui/associated-type-bounds/trait-params.rs:88:9: 88:35
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:88:9: 88:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {assert_static::<<C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_send::<<C as Iterator>::Item>() -> bb4; // scope 0 at ui/associated-type-bounds/trait-params.rs:89:9: 89:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:89:9: 89:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {assert_send::<<C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:90:6: 90:6
    }
}

fn Case2::_d() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:91:13: 91:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:92:9: 92:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:93:9: 93:40

    bb0: {
        _1 = assert_iterator::<D>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:92:9: 92:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:92:9: 92:29
                                         // + literal: Const { ty: fn() {assert_iterator::<D>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_forall_into::<<D as Iterator>::Item>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:93:9: 93:40
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:93:9: 93:38
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_forall_into::<<D as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:94:6: 94:6
    }
}

fn Case2::_e() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:95:13: 95:13
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:96:9: 96:28
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:97:9: 97:34
    let _3: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:98:9: 98:34
    let _4: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:99:9: 99:34
    let _5: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:100:9: 100:50
    let _6: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:101:9: 101:50
    let _7: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:102:9: 102:50

    bb0: {
        _1 = assert_three::<E>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:96:9: 96:28
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:96:9: 96:26
                                         // + literal: Const { ty: fn() {assert_three::<E>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_iterator::<<E as Three>::A>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:97:9: 97:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:97:9: 97:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_iterator::<<E as Three>::A>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_iterator::<<E as Three>::B>() -> bb3; // scope 0 at ui/associated-type-bounds/trait-params.rs:98:9: 98:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:98:9: 98:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {assert_iterator::<<E as Three>::B>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_iterator::<<E as Three>::C>() -> bb4; // scope 0 at ui/associated-type-bounds/trait-params.rs:99:9: 99:34
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:99:9: 99:32
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {assert_iterator::<<E as Three>::C>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = assert_copy::<<<E as Three>::A as Iterator>::Item>() -> bb5; // scope 0 at ui/associated-type-bounds/trait-params.rs:100:9: 100:50
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:100:9: 100:48
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() {assert_copy::<<<E as Three>::A as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = assert_copy::<<<E as Three>::B as Iterator>::Item>() -> bb6; // scope 0 at ui/associated-type-bounds/trait-params.rs:101:9: 101:50
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:101:9: 101:48
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() {assert_copy::<<<E as Three>::B as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = assert_copy::<<<E as Three>::C as Iterator>::Item>() -> bb7; // scope 0 at ui/associated-type-bounds/trait-params.rs:102:9: 102:50
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:102:9: 102:48
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() {assert_copy::<<<E as Three>::C as Iterator>::Item>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:103:6: 103:6
    }
}

fn Case2::_self() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:104:16: 104:16
    let _1: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:105:9: 105:31
    let _2: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:106:9: 106:33
    let _3: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:107:9: 107:35
    let _4: ();                          // in scope 0 at ui/associated-type-bounds/trait-params.rs:108:9: 108:33

    bb0: {
        _1 = assert_three::<Self>() -> bb1; // scope 0 at ui/associated-type-bounds/trait-params.rs:105:9: 105:31
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:105:9: 105:29
                                         // + literal: Const { ty: fn() {assert_three::<Self>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = assert_copy::<<Self as Three>::B>() -> bb2; // scope 0 at ui/associated-type-bounds/trait-params.rs:106:9: 106:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:106:9: 106:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {assert_copy::<<Self as Three>::B>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_static::<<Self as Three>::A>() -> bb3; // scope 0 at ui/associated-type-bounds/trait-params.rs:107:9: 107:35
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:107:9: 107:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() {assert_static::<<Self as Three>::A>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = assert_send::<<Self as Three>::C>() -> bb4; // scope 0 at ui/associated-type-bounds/trait-params.rs:108:9: 108:33
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/trait-params.rs:108:9: 108:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() {assert_send::<<Self as Three>::C>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:109:6: 109:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/trait-params.rs:116:11: 116:11

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/trait-params.rs:116:13: 116:13
    }
}
