// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_three() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn assert_iterator() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn assert_copy() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn assert_static() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn assert_send() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn assert_forall_into() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/associated-type-bounds/trait-params.rs:17:1: 17:28>::into(_1: A) -> &u8 {
    debug self => const A;
    let mut _0: &u8;

    bb0: {
        _0 = const _;
        return;
    }
}

promoted[0] in <impl at ui/associated-type-bounds/trait-params.rs:17:1: 17:28>::into: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

fn Case1::_a() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = assert_iterator::<A>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_copy::<<A as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn Case1::_b() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = assert_iterator::<B>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_static::<<B as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn Case1::_c() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = assert_iterator::<C>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_copy::<<C as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_static::<<C as Iterator>::Item>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_send::<<C as Iterator>::Item>() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn Case1::_d() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = assert_iterator::<D>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_forall_into::<<D as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn Case1::_e() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();
    let _7: ();

    bb0: {
        _1 = assert_three::<E>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_iterator::<<E as Three>::A>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_iterator::<<E as Three>::B>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_iterator::<<E as Three>::C>() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = assert_copy::<<<E as Three>::A as Iterator>::Item>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = assert_copy::<<<E as Three>::B as Iterator>::Item>() -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = assert_copy::<<<E as Three>::C as Iterator>::Item>() -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn Case1::_self() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = assert_three::<Self>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_copy::<<Self as Three>::B>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_static::<<Self as Three>::A>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_send::<<Self as Three>::C>() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn Case2::_a() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = assert_iterator::<A>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_copy::<<A as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn Case2::_b() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = assert_iterator::<B>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_static::<<B as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn Case2::_c() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = assert_iterator::<C>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_copy::<<C as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_static::<<C as Iterator>::Item>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_send::<<C as Iterator>::Item>() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn Case2::_d() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = assert_iterator::<D>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_forall_into::<<D as Iterator>::Item>() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn Case2::_e() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let _5: ();
    let _6: ();
    let _7: ();

    bb0: {
        _1 = assert_three::<E>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_iterator::<<E as Three>::A>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_iterator::<<E as Three>::B>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_iterator::<<E as Three>::C>() -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = assert_copy::<<<E as Three>::A as Iterator>::Item>() -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = assert_copy::<<<E as Three>::B as Iterator>::Item>() -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = assert_copy::<<<E as Three>::C as Iterator>::Item>() -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn Case2::_self() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();

    bb0: {
        _1 = assert_three::<Self>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_copy::<<Self as Three>::B>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_static::<<Self as Three>::A>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = assert_send::<<Self as Three>::C>() -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
