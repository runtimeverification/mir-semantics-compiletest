// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:24:14: 24:14

    bb0: {
        _0 = <<S as P>::T as Tr<u8, u8>>::exec(const 0_u8, const 0_u8) -> bb1; // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:25:5: 25:32
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:25:5: 25:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u8, u8) {<<S as P>::T as Tr<u8, u8>>::exec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:26:2: 26:2
    }
}

fn g() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:29:14: 29:14

    bb0: {
        _0 = <<S as Q>::T as Tr<u8, u8>>::exec(const 0_u8, const 0_u8) -> bb1; // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:31:5: 31:32
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:31:5: 31:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u8, u8) {<<S as Q>::T as Tr<u8, u8>>::exec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:32:2: 32:2
    }
}

fn foo(_1: <T as Trait>::Type) -> () {
    debug x => _1;                       // in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:42:18: 42:19
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:42:30: 42:30
    let _2: <T as Trait>::Type1;         // in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:43:9: 43:11
    let mut _3: <T as Trait>::Type;      // in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:43:24: 43:25
    let mut _5: <T as Trait>::Type;      // in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:44:24: 44:25
    scope 1 {
        debug _1 => _2;                  // in scope 1 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:43:9: 43:11
        let _4: <T as Trait>::Type2;     // in scope 1 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:44:9: 44:11
        scope 2 {
            debug _2 => _4;              // in scope 2 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:44:9: 44:11
        }
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:43:24: 43:25
        _2 = <<T as Trait>::Type as Into<<T as Trait>::Type1>>::into(move _3) -> bb1; // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:43:24: 43:32
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:43:26: 43:30
                                         // + literal: Const { ty: fn(<T as Trait>::Type) -> <T as Trait>::Type1 {<<T as Trait>::Type as Into<<T as Trait>::Type1>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _1;                         // scope 1 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:44:24: 44:25
        _4 = <<T as Trait>::Type as Into<<T as Trait>::Type2>>::into(move _5) -> [return: bb2, unwind: bb5]; // scope 1 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:44:24: 44:32
                                         // mir::Constant
                                         // + span: ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:44:26: 44:30
                                         // + literal: Const { ty: fn(<T as Trait>::Type) -> <T as Trait>::Type2 {<<T as Trait>::Type as Into<<T as Trait>::Type2>>::into}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind: bb5]; // scope 1 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:45:1: 45:2
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:45:1: 45:2
    }

    bb4: {
        return;                          // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:45:2: 45:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:45:1: 45:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:42:1: 45:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:47:11: 47:11

    bb0: {
        return;                          // scope 0 at ui/associated-type-bounds/order-dependent-bounds-issue-54121.rs:47:14: 47:14
    }
}
