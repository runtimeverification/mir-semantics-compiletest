// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/sse2.rs:8:11: 8:11
    let mut _1: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at ui/sse2.rs:9:11: 9:29
    let mut _2: isize;                   // in scope 0 at ui/sse2.rs:10:9: 10:14
    let _3: std::string::String;         // in scope 0 at ui/sse2.rs:10:12: 10:13
    let mut _4: bool;                    // in scope 0 at ui/sse2.rs:12:16: 12:34
    let mut _5: &str;                    // in scope 0 at ui/sse2.rs:12:16: 12:34
    let _6: &str;                        // in scope 0 at ui/sse2.rs:12:16: 12:34
    let mut _7: &std::string::String;    // in scope 0 at ui/sse2.rs:12:16: 12:34
    let mut _8: isize;                   // in scope 0 at ui/sse2.rs:17:5: 17:6
    let mut _9: isize;                   // in scope 0 at ui/sse2.rs:17:5: 17:6
    let mut _10: isize;                  // in scope 0 at ui/sse2.rs:17:5: 17:6
    scope 1 {
        debug s => _3;                   // in scope 1 at ui/sse2.rs:10:12: 10:13
    }

    bb0: {
        _1 = var::<&str>(const "TARGET") -> bb1; // scope 0 at ui/sse2.rs:9:11: 9:29
                                         // mir::Constant
                                         // + span: ui/sse2.rs:9:11: 9:19
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/sse2.rs:9:20: 9:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = discriminant(_1);           // scope 0 at ui/sse2.rs:9:11: 9:29
        switchInt(move _2) -> [0: bb3, 1: bb15, otherwise: bb2]; // scope 0 at ui/sse2.rs:9:5: 9:29
    }

    bb2: {
        unreachable;                     // scope 0 at ui/sse2.rs:9:11: 9:29
    }

    bb3: {
        _3 = move ((_1 as Ok).0: std::string::String); // scope 0 at ui/sse2.rs:10:12: 10:13
        _7 = &_3;                        // scope 1 at ui/sse2.rs:12:16: 12:34
        _6 = <String as Deref>::deref(move _7) -> [return: bb4, unwind: bb10]; // scope 1 at ui/sse2.rs:12:16: 12:34
                                         // mir::Constant
                                         // + span: ui/sse2.rs:12:16: 12:34
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = _6;                         // scope 1 at ui/sse2.rs:12:16: 12:34
        _4 = core::str::<impl str>::contains::<'_, &str>(move _5, const "i586") -> [return: bb5, unwind: bb10]; // scope 1 at ui/sse2.rs:12:16: 12:34
                                         // mir::Constant
                                         // + span: ui/sse2.rs:12:18: 12:26
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/sse2.rs:12:27: 12:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _4) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/sse2.rs:12:16: 12:34
    }

    bb6: {
        drop(_3) -> [return: bb15, unwind: bb17]; // scope 0 at ui/sse2.rs:15:9: 15:10
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind: bb17]; // scope 0 at ui/sse2.rs:15:9: 15:10
    }

    bb8: {
        _8 = discriminant(_1);           // scope 0 at ui/sse2.rs:17:5: 17:6
        switchInt(move _8) -> [0: bb12, otherwise: bb13]; // scope 0 at ui/sse2.rs:17:5: 17:6
    }

    bb9: {
        return;                          // scope 0 at ui/sse2.rs:25:2: 25:2
    }

    bb10 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at ui/sse2.rs:15:9: 15:10
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/sse2.rs:8:1: 25:2
    }

    bb12: {
        goto -> bb9;                     // scope 0 at ui/sse2.rs:25:2: 25:2
    }

    bb13: {
        drop(_1) -> bb12;                // scope 0 at ui/sse2.rs:17:5: 17:6
    }

    bb14: {
        drop(_1) -> bb9;                 // scope 0 at ui/sse2.rs:17:5: 17:6
    }

    bb15: {
        _9 = discriminant(_1);           // scope 0 at ui/sse2.rs:17:5: 17:6
        switchInt(move _9) -> [0: bb9, otherwise: bb14]; // scope 0 at ui/sse2.rs:17:5: 17:6
    }

    bb16 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/sse2.rs:17:5: 17:6
    }

    bb17 (cleanup): {
        _10 = discriminant(_1);          // scope 0 at ui/sse2.rs:17:5: 17:6
        switchInt(move _10) -> [0: bb11, otherwise: bb16]; // scope 0 at ui/sse2.rs:17:5: 17:6
    }
}
