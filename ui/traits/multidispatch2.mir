// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/multidispatch2.rs:10:1: 10:25>::get(_1: &T) -> T {
    debug self => _1;                    // in scope 0 at ui/traits/multidispatch2.rs:13:12: 13:17
    let mut _0: T;                       // return place in scope 0 at ui/traits/multidispatch2.rs:13:22: 13:23

    bb0: {
        _0 = <T as Default>::default() -> bb1; // scope 0 at ui/traits/multidispatch2.rs:14:9: 14:27
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch2.rs:14:9: 14:25
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/multidispatch2.rs:15:6: 15:6
    }
}

fn <impl at ui/traits/multidispatch2.rs:18:16: 18:21>::clone(_1: &MyType) -> MyType {
    debug self => _1;                    // in scope 0 at ui/traits/multidispatch2.rs:18:16: 18:21
    let mut _0: MyType;                  // return place in scope 0 at ui/traits/multidispatch2.rs:18:16: 18:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/traits/multidispatch2.rs:18:16: 18:21
        return;                          // scope 0 at ui/traits/multidispatch2.rs:18:21: 18:21
    }
}

fn <impl at ui/traits/multidispatch2.rs:23:1: 23:31>::get(_1: &MyType) -> usize {
    debug self => _1;                    // in scope 0 at ui/traits/multidispatch2.rs:24:12: 24:17
    let mut _0: usize;                   // return place in scope 0 at ui/traits/multidispatch2.rs:24:22: 24:27

    bb0: {
        _0 = ((*_1).0: usize);           // scope 0 at ui/traits/multidispatch2.rs:24:30: 24:40
        return;                          // scope 0 at ui/traits/multidispatch2.rs:24:42: 24:42
    }
}

fn test_eq(_1: M, _2: T) -> () {
    debug m => _1;                       // in scope 0 at ui/traits/multidispatch2.rs:27:17: 27:18
    debug v => _2;                       // in scope 0 at ui/traits/multidispatch2.rs:27:23: 27:24
    let mut _0: ();                      // return place in scope 0 at ui/traits/multidispatch2.rs:28:1: 28:1
    let mut _3: (&T, &T);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: T;                           // in scope 0 at ui/traits/multidispatch2.rs:31:16: 31:23
    let mut _6: &M;                      // in scope 0 at ui/traits/multidispatch2.rs:31:16: 31:23
    let mut _7: &T;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &T;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &T;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &T;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = &_1;                        // scope 0 at ui/traits/multidispatch2.rs:31:16: 31:23
        _5 = <M as MyTrait<T>>::get(move _6) -> [return: bb1, unwind: bb9]; // scope 0 at ui/traits/multidispatch2.rs:31:16: 31:23
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch2.rs:31:18: 31:21
                                         // + literal: Const { ty: for<'a> fn(&'a M) -> T {<M as MyTrait<T>>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &T);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <T as PartialEq>::eq(move _12, move _13) -> [return: bb2, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<T, T>(move _16, move _17, move _19, move _21) -> bb8; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a T, &'b T, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<T, T>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb10]; // scope 0 at ui/traits/multidispatch2.rs:32:1: 32:2
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/traits/multidispatch2.rs:32:1: 32:2
    }

    bb7: {
        return;                          // scope 0 at ui/traits/multidispatch2.rs:32:2: 32:2
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/traits/multidispatch2.rs:32:1: 32:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/traits/multidispatch2.rs:32:1: 32:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/traits/multidispatch2.rs:27:1: 32:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/multidispatch2.rs:34:15: 34:15
    let _1: ();                          // in scope 0 at ui/traits/multidispatch2.rs:35:5: 35:31
    let _2: MyType;                      // in scope 0 at ui/traits/multidispatch2.rs:37:9: 37:14
    let _3: ();                          // in scope 0 at ui/traits/multidispatch2.rs:38:5: 38:32
    let mut _4: MyType;                  // in scope 0 at ui/traits/multidispatch2.rs:38:13: 38:18
    let mut _5: usize;                   // in scope 0 at ui/traits/multidispatch2.rs:38:20: 38:31
    scope 1 {
        debug value => _2;               // in scope 1 at ui/traits/multidispatch2.rs:37:9: 37:14
    }

    bb0: {
        _1 = test_eq::<usize, usize>(const 22_usize, const 0_usize) -> bb1; // scope 0 at ui/traits/multidispatch2.rs:35:5: 35:31
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch2.rs:35:5: 35:12
                                         // + literal: Const { ty: fn(usize, usize) {test_eq::<usize, usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const MyType {{ dummy: 278_usize }}; // scope 0 at ui/traits/multidispatch2.rs:37:17: 37:43
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch2.rs:37:17: 37:43
                                         // + literal: Const { ty: MyType, val: Value(Scalar(0x0000000000000116)) }
        _4 = const MyType {{ dummy: 278_usize }}; // scope 1 at ui/traits/multidispatch2.rs:38:13: 38:18
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch2.rs:38:13: 38:18
                                         // + literal: Const { ty: MyType, val: Value(Scalar(0x0000000000000116)) }
        _5 = const 278_usize;            // scope 1 at ui/traits/multidispatch2.rs:38:20: 38:31
        _3 = test_eq::<usize, MyType>(move _4, move _5) -> bb2; // scope 1 at ui/traits/multidispatch2.rs:38:5: 38:32
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch2.rs:38:5: 38:12
                                         // + literal: Const { ty: fn(MyType, usize) {test_eq::<usize, MyType>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/multidispatch2.rs:39:2: 39:2
    }
}
