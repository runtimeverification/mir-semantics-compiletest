// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/typeclasses-eq-example.rs:15:10: 15:15>::clone(_1: &Color) -> Color {
    debug self => _1;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:15:10: 15:15
    let mut _0: Color;                   // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:15:10: 15:15

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/typeclasses-eq-example.rs:15:10: 15:15
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:15:15: 15:15
    }
}

fn <impl at ui/traits/typeclasses-eq-example.rs:18:1: 18:21>::isEq(_1: &Color, _2: &Color) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:19:13: 19:18
    debug a => _2;                       // in scope 0 at ui/traits/typeclasses-eq-example.rs:19:20: 19:21
    let mut _0: bool;                    // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:19:34: 19:38
    let mut _3: (Color, Color);          // in scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
    let mut _4: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:20:16: 20:21
    let mut _5: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:20:23: 20:25
    let mut _6: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:21:18: 21:22
    let mut _7: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:22:21: 22:28
    let mut _8: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:23:20: 23:26
    let mut _9: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:24:19: 24:24
    let mut _10: isize;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:21:12: 21:16

    bb0: {
        _4 = (*_1);                      // scope 0 at ui/traits/typeclasses-eq-example.rs:20:16: 20:21
        _5 = (*_2);                      // scope 0 at ui/traits/typeclasses-eq-example.rs:20:23: 20:25
        _3 = (move _4, move _5);         // scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
        _10 = discriminant((_3.0: Color)); // scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
        switchInt(move _10) -> [0: bb1, 1: bb3, 2: bb4, 3: bb5, otherwise: bb11]; // scope 0 at ui/traits/typeclasses-eq-example.rs:20:9: 20:26
    }

    bb1: {
        _6 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
        switchInt(move _6) -> [0: bb6, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:20:9: 20:26
    }

    bb2: {
        _0 = const false;                // scope 0 at ui/traits/typeclasses-eq-example.rs:25:35: 25:40
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example.rs:25:35: 25:40
    }

    bb3: {
        _7 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
        switchInt(move _7) -> [1: bb7, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:20:9: 20:26
    }

    bb4: {
        _8 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
        switchInt(move _8) -> [2: bb8, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:20:9: 20:26
    }

    bb5: {
        _9 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example.rs:20:15: 20:26
        switchInt(move _9) -> [3: bb9, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:20:9: 20:26
    }

    bb6: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example.rs:21:35: 21:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example.rs:21:35: 21:39
    }

    bb7: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example.rs:22:35: 22:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example.rs:22:35: 22:39
    }

    bb8: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example.rs:23:35: 23:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example.rs:23:35: 23:39
    }

    bb9: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example.rs:24:35: 24:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example.rs:24:35: 24:39
    }

    bb10: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:27:6: 27:6
    }

    bb11: {
        unreachable;                     // scope 0 at ui/traits/typeclasses-eq-example.rs:25:35: 25:40
    }
}

fn <impl at ui/traits/typeclasses-eq-example.rs:30:10: 30:15>::clone(_1: &ColorTree) -> ColorTree {
    debug self => _1;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
    let mut _2: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
    let _3: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
    let mut _4: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
    let mut _5: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
    let _6: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
    let _7: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
    let mut _8: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
    let mut _9: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
    let mut _10: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
    let mut _11: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
        debug __self_1 => _7;            // in scope 2 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
    }

    bb1: {
        _6 = &(((*_1) as branch).0: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
        _7 = &(((*_1) as branch).1: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
        _9 = _6;                         // scope 2 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
        _8 = <Box<ColorTree> as Clone>::clone(move _9) -> bb5; // scope 2 at ui/traits/typeclasses-eq-example.rs:33:12: 33:26
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:33:12: 33:26
                                         // + literal: Const { ty: for<'a> fn(&'a Box<ColorTree>) -> Box<ColorTree> {<Box<ColorTree> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
    }

    bb3: {
        _3 = &(((*_1) as leaf).0: Color); // scope 0 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
        _5 = _3;                         // scope 1 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
        _4 = <Color as Clone>::clone(move _5) -> bb4; // scope 1 at ui/traits/typeclasses-eq-example.rs:32:10: 32:15
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:32:10: 32:15
                                         // + literal: Const { ty: for<'a> fn(&'a Color) -> Color {<Color as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = ColorTree::leaf(move _4);   // scope 1 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
        goto -> bb7;                     // scope 0 at ui/traits/typeclasses-eq-example.rs:30:14: 30:15
    }

    bb5: {
        _11 = _7;                        // scope 2 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
        _10 = <Box<ColorTree> as Clone>::clone(move _11) -> [return: bb6, unwind: bb8]; // scope 2 at ui/traits/typeclasses-eq-example.rs:33:28: 33:42
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:33:28: 33:42
                                         // + literal: Const { ty: for<'a> fn(&'a Box<ColorTree>) -> Box<ColorTree> {<Box<ColorTree> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = ColorTree::branch(move _8, move _10); // scope 2 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
        goto -> bb7;                     // scope 0 at ui/traits/typeclasses-eq-example.rs:30:14: 30:15
    }

    bb7: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:30:15: 30:15
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 2 at ui/traits/typeclasses-eq-example.rs:30:14: 30:15
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:30:10: 30:15
    }
}

fn <impl at ui/traits/typeclasses-eq-example.rs:36:1: 36:25>::isEq(_1: &ColorTree, _2: &ColorTree) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:37:13: 37:18
    debug a => _2;                       // in scope 0 at ui/traits/typeclasses-eq-example.rs:37:20: 37:21
    let mut _0: bool;                    // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:37:38: 37:42
    let mut _3: (&ColorTree, &ColorTree); // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _4: &ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:16: 38:20
    let mut _5: &ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:22: 38:23
    let mut _6: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:27: 39:38
    let mut _7: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:38: 40:60
    let mut _8: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:13: 39:24
    let _9: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:18: 39:23
    let _10: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:32: 39:37
    let mut _11: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:45: 39:66
    let mut _12: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:52: 39:65
    let _13: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:52: 39:65
    let _14: Color;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:53: 39:65
    let mut _15: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:39:53: 39:65
    let _16: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:20: 40:26
    let _17: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:28: 40:34
    let _18: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:45: 40:51
    let _19: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:53: 40:59
    let mut _20: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:13: 41:40
    let mut _21: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:13: 41:40
    let mut _22: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:24: 41:39
    let _23: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:24: 41:39
    let _24: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:25: 41:39
    let mut _25: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:25: 41:39
    let mut _26: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:44: 41:71
    let mut _27: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:44: 41:71
    let mut _28: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:55: 41:70
    let _29: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:55: 41:70
    let _30: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:56: 41:70
    let mut _31: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:41:56: 41:70
    let mut _32: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _33: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _34: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _35: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _36: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _37: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _38: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _39: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _40: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
    let mut _41: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:20: 40:26
    let mut _42: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:45: 40:51
    let mut _43: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:28: 40:34
    let mut _44: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:53: 40:59
    let mut _45: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:20: 40:26
    let mut _46: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:45: 40:51
    let mut _47: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:28: 40:34
    let mut _48: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example.rs:40:53: 40:59
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/traits/typeclasses-eq-example.rs:39:18: 39:23
        debug y => _10;                  // in scope 1 at ui/traits/typeclasses-eq-example.rs:39:32: 39:37
    }
    scope 2 {
        debug l1 => _16;                 // in scope 2 at ui/traits/typeclasses-eq-example.rs:40:20: 40:26
        debug r1 => _17;                 // in scope 2 at ui/traits/typeclasses-eq-example.rs:40:28: 40:34
        debug l2 => _18;                 // in scope 2 at ui/traits/typeclasses-eq-example.rs:40:45: 40:51
        debug r2 => _19;                 // in scope 2 at ui/traits/typeclasses-eq-example.rs:40:53: 40:59
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/traits/typeclasses-eq-example.rs:38:16: 38:20
        _5 = _2;                         // scope 0 at ui/traits/typeclasses-eq-example.rs:38:22: 38:23
        _3 = (move _4, move _5);         // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        _32 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        _8 = discriminant((*_32));       // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        switchInt(move _8) -> [0: bb1, 1: bb3, otherwise: bb19]; // scope 0 at ui/traits/typeclasses-eq-example.rs:38:9: 38:24
    }

    bb1: {
        _33 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        _6 = discriminant((*_33));       // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        switchInt(move _6) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:38:9: 38:24
    }

    bb2: {
        _0 = const false;                // scope 0 at ui/traits/typeclasses-eq-example.rs:43:18: 43:23
        goto -> bb15;                    // scope 0 at ui/traits/typeclasses-eq-example.rs:43:18: 43:23
    }

    bb3: {
        _34 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        _7 = discriminant((*_34));       // scope 0 at ui/traits/typeclasses-eq-example.rs:38:15: 38:24
        switchInt(move _7) -> [1: bb6, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:38:9: 38:24
    }

    bb4: {
        _35 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:39:18: 39:23
        _9 = &(((*_35) as leaf).0: Color); // scope 0 at ui/traits/typeclasses-eq-example.rs:39:18: 39:23
        _36 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:39:32: 39:37
        _10 = &(((*_36) as leaf).0: Color); // scope 0 at ui/traits/typeclasses-eq-example.rs:39:32: 39:37
        _11 = _9;                        // scope 1 at ui/traits/typeclasses-eq-example.rs:39:45: 39:66
        _15 = _10;                       // scope 1 at ui/traits/typeclasses-eq-example.rs:39:53: 39:65
        _14 = <Color as Clone>::clone(move _15) -> bb5; // scope 1 at ui/traits/typeclasses-eq-example.rs:39:53: 39:65
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:39:58: 39:63
                                         // + literal: Const { ty: for<'a> fn(&'a Color) -> Color {<Color as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &_14;                      // scope 1 at ui/traits/typeclasses-eq-example.rs:39:52: 39:65
        _12 = _13;                       // scope 1 at ui/traits/typeclasses-eq-example.rs:39:52: 39:65
        _0 = <Color as Equal>::isEq(move _11, move _12) -> bb15; // scope 1 at ui/traits/typeclasses-eq-example.rs:39:45: 39:66
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:39:47: 39:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:20: 40:26
        _16 = &(((*_37) as branch).0: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:20: 40:26
        _38 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:28: 40:34
        _17 = &(((*_38) as branch).1: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:28: 40:34
        _39 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:45: 40:51
        _18 = &(((*_39) as branch).0: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:45: 40:51
        _40 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:53: 40:59
        _19 = &(((*_40) as branch).1: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example.rs:40:53: 40:59
        _41 = deref_copy (*_16);         // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:40
        _45 = (((_41.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:40
        _21 = &(*_45);                   // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:40
        _42 = deref_copy (*_18);         // scope 2 at ui/traits/typeclasses-eq-example.rs:41:25: 41:39
        _46 = (((_42.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example.rs:41:25: 41:39
        _25 = &(*_46);                   // scope 2 at ui/traits/typeclasses-eq-example.rs:41:25: 41:39
        _24 = <ColorTree as Clone>::clone(move _25) -> bb9; // scope 2 at ui/traits/typeclasses-eq-example.rs:41:25: 41:39
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:41:32: 41:37
                                         // + literal: Const { ty: for<'a> fn(&'a ColorTree) -> ColorTree {<ColorTree as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = const false;                // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:71
        goto -> bb15;                    // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:71
    }

    bb8: {
        _43 = deref_copy (*_17);         // scope 2 at ui/traits/typeclasses-eq-example.rs:41:44: 41:71
        _47 = (((_43.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example.rs:41:44: 41:71
        _27 = &(*_47);                   // scope 2 at ui/traits/typeclasses-eq-example.rs:41:44: 41:71
        _44 = deref_copy (*_19);         // scope 2 at ui/traits/typeclasses-eq-example.rs:41:56: 41:70
        _48 = (((_44.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example.rs:41:56: 41:70
        _31 = &(*_48);                   // scope 2 at ui/traits/typeclasses-eq-example.rs:41:56: 41:70
        _30 = <ColorTree as Clone>::clone(move _31) -> bb12; // scope 2 at ui/traits/typeclasses-eq-example.rs:41:56: 41:70
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:41:63: 41:68
                                         // + literal: Const { ty: for<'a> fn(&'a ColorTree) -> ColorTree {<ColorTree as Clone>::clone}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = &_24;                      // scope 2 at ui/traits/typeclasses-eq-example.rs:41:24: 41:39
        _22 = _23;                       // scope 2 at ui/traits/typeclasses-eq-example.rs:41:24: 41:39
        _20 = <ColorTree as Equal>::isEq(move _21, move _22) -> [return: bb10, unwind: bb17]; // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:40
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:41:19: 41:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_24) -> bb11;               // scope 2 at ui/traits/typeclasses-eq-example.rs:41:39: 41:40
    }

    bb11: {
        switchInt(move _20) -> [0: bb7, otherwise: bb8]; // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:71
    }

    bb12: {
        _29 = &_30;                      // scope 2 at ui/traits/typeclasses-eq-example.rs:41:55: 41:70
        _28 = _29;                       // scope 2 at ui/traits/typeclasses-eq-example.rs:41:55: 41:70
        _26 = <ColorTree as Equal>::isEq(move _27, move _28) -> [return: bb13, unwind: bb16]; // scope 2 at ui/traits/typeclasses-eq-example.rs:41:44: 41:71
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:41:50: 41:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_30) -> bb14;               // scope 2 at ui/traits/typeclasses-eq-example.rs:41:70: 41:71
    }

    bb14: {
        _0 = move _26;                   // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:71
        goto -> bb15;                    // scope 2 at ui/traits/typeclasses-eq-example.rs:41:13: 41:71
    }

    bb15: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:45:6: 45:6
    }

    bb16 (cleanup): {
        drop(_30) -> bb18;               // scope 2 at ui/traits/typeclasses-eq-example.rs:41:70: 41:71
    }

    bb17 (cleanup): {
        drop(_24) -> bb18;               // scope 2 at ui/traits/typeclasses-eq-example.rs:41:39: 41:40
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:37:5: 45:6
    }

    bb19: {
        unreachable;                     // scope 0 at ui/traits/typeclasses-eq-example.rs:43:18: 43:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:48:15: 48:15
    let mut _1: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:5: 49:30
    let mut _2: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
    let mut _3: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
    let mut _4: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
    let _5: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
    let mut _6: !;                       // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:5: 49:30
    let mut _7: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:5: 50:36
    let mut _8: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
    let mut _9: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
    let mut _10: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
    let _11: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
    let mut _12: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:5: 50:36
    let mut _13: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:5: 51:33
    let mut _14: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:13: 51:32
    let mut _15: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
    let mut _16: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
    let mut _17: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
    let _18: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
    let mut _19: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:5: 51:33
    let mut _20: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:5: 52:34
    let mut _21: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:13: 52:33
    let mut _22: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
    let mut _23: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
    let mut _24: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
    let _25: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
    let mut _26: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:5: 52:34
    let mut _27: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:5: 54:42
    let mut _28: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
    let mut _29: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
    let mut _30: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
    let _31: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
    let mut _32: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:5: 54:42
    let mut _33: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:5: 55:45
    let mut _34: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:13: 55:44
    let mut _35: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
    let mut _36: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
    let mut _37: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
    let _38: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
    let mut _39: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:5: 55:45
    let mut _40: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:5: 58:71
    let mut _41: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:13: 58:70
    let mut _42: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:13: 58:70
    let _43: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:13: 57:66
    let mut _44: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:20: 57:43
    let mut _45: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:29: 57:42
    let mut _46: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:34: 57:41
    let mut _47: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:45: 57:65
    let mut _48: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:54: 57:64
    let mut _49: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:59: 57:63
    let mut _50: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:15: 58:69
    let _51: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:15: 58:69
    let _52: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:16: 58:69
    let mut _53: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:23: 58:46
    let mut _54: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:32: 58:45
    let mut _55: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:37: 58:44
    let mut _56: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:48: 58:68
    let mut _57: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:57: 58:67
    let mut _58: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:58:62: 58:66
    let mut _59: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:57:5: 58:71
    let mut _60: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:5: 61:74
    let mut _61: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:13: 61:73
    let mut _62: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:14: 61:73
    let mut _63: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:14: 61:73
    let _64: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:14: 60:67
    let mut _65: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:21: 60:44
    let mut _66: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:30: 60:43
    let mut _67: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:35: 60:42
    let mut _68: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:46: 60:66
    let mut _69: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:55: 60:65
    let mut _70: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:60: 60:64
    let mut _71: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:15: 61:72
    let _72: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:15: 61:72
    let _73: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:16: 61:72
    let mut _74: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:23: 61:46
    let mut _75: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:32: 61:45
    let mut _76: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:37: 61:44
    let mut _77: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:48: 61:71
    let mut _78: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:57: 61:70
    let mut _79: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example.rs:61:62: 61:69
    let mut _80: !;                      // in scope 0 at ui/traits/typeclasses-eq-example.rs:60:5: 61:74
    let _81: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _82: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _83: &[&str];                // in scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
    let mut _84: &[&str; 1];             // in scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
    let _85: &[&str; 1];                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
    let mut _86: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _87: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _88: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _89: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _90: &[&str; 1];             // in scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
    let mut _91: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
    let mut _92: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
    let mut _93: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
    let mut _94: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
    let mut _95: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
    let mut _96: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
    let mut _97: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
    let mut _98: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
    let mut _99: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
    let mut _100: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
    let mut _101: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
    let mut _102: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29

    bb0: {
        _102 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:49:13: 49:29
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[13])) }
        _3 = _102;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
        _101 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:49:23: 49:28
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[12])) }
        _5 = _101;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
        _4 = _5;                         // scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
        _2 = <Color as Equal>::isEq(move _3, move _4) -> bb1; // scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:49:18: 49:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/traits/typeclasses-eq-example.rs:49:5: 49:30
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example.rs:49:5: 49:30
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: cyan.isEq(&cyan)"); // scope 0 at ui/traits/typeclasses-eq-example.rs:49:5: 49:30
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:49:5: 49:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _100 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:50:13: 50:35
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[11])) }
        _9 = _100;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
        _99 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:50:26: 50:34
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[10])) }
        _11 = _99;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
        _10 = _11;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
        _8 = <Color as Equal>::isEq(move _9, move _10) -> bb4; // scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:50:21: 50:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = Not(move _8);               // scope 0 at ui/traits/typeclasses-eq-example.rs:50:5: 50:36
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/traits/typeclasses-eq-example.rs:50:5: 50:36
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: magenta.isEq(&magenta)"); // scope 0 at ui/traits/typeclasses-eq-example.rs:50:5: 50:36
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:50:5: 50:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _98 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:51:14: 51:32
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[9])) }
        _16 = _98;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
        _97 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:51:24: 51:31
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[8])) }
        _18 = _97;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
        _17 = _18;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
        _15 = <Color as Equal>::isEq(move _16, move _17) -> bb7; // scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:51:19: 51:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = Not(move _15);             // scope 0 at ui/traits/typeclasses-eq-example.rs:51:13: 51:32
        _13 = Not(move _14);             // scope 0 at ui/traits/typeclasses-eq-example.rs:51:5: 51:33
        switchInt(move _13) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/traits/typeclasses-eq-example.rs:51:5: 51:33
    }

    bb8: {
        _19 = core::panicking::panic(const "assertion failed: !cyan.isEq(&yellow)"); // scope 0 at ui/traits/typeclasses-eq-example.rs:51:5: 51:33
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:51:5: 51:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _96 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:52:14: 52:33
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[7])) }
        _23 = _96;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
        _95 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:52:27: 52:32
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[6])) }
        _25 = _95;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
        _24 = _25;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
        _22 = <Color as Equal>::isEq(move _23, move _24) -> bb10; // scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:52:22: 52:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = Not(move _22);             // scope 0 at ui/traits/typeclasses-eq-example.rs:52:13: 52:33
        _20 = Not(move _21);             // scope 0 at ui/traits/typeclasses-eq-example.rs:52:5: 52:34
        switchInt(move _20) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/traits/typeclasses-eq-example.rs:52:5: 52:34
    }

    bb11: {
        _26 = core::panicking::panic(const "assertion failed: !magenta.isEq(&cyan)"); // scope 0 at ui/traits/typeclasses-eq-example.rs:52:5: 52:34
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:52:5: 52:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _94 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:54:13: 54:41
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[5])) }
        _29 = _94;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
        _93 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:54:29: 54:40
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[4])) }
        _31 = _93;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
        _30 = _31;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
        _28 = <ColorTree as Equal>::isEq(move _29, move _30) -> bb13; // scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:54:24: 54:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb13: {
        _27 = Not(move _28);             // scope 0 at ui/traits/typeclasses-eq-example.rs:54:5: 54:42
        switchInt(move _27) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/traits/typeclasses-eq-example.rs:54:5: 54:42
    }

    bb14: {
        _32 = core::panicking::panic(const "assertion failed: leaf(cyan).isEq(&leaf(cyan))"); // scope 0 at ui/traits/typeclasses-eq-example.rs:54:5: 54:42
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:54:5: 54:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _92 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:55:14: 55:44
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[3])) }
        _36 = _92;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
        _91 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:55:30: 55:43
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[2])) }
        _38 = _91;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
        _37 = _38;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
        _35 = <ColorTree as Equal>::isEq(move _36, move _37) -> bb16; // scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:55:25: 55:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = Not(move _35);             // scope 0 at ui/traits/typeclasses-eq-example.rs:55:13: 55:44
        _33 = Not(move _34);             // scope 0 at ui/traits/typeclasses-eq-example.rs:55:5: 55:45
        switchInt(move _33) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/traits/typeclasses-eq-example.rs:55:5: 55:45
    }

    bb17: {
        _39 = core::panicking::panic(const "assertion failed: !leaf(cyan).isEq(&leaf(yellow))"); // scope 0 at ui/traits/typeclasses-eq-example.rs:55:5: 55:45
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:55:5: 55:45
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _46 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example.rs:57:34: 57:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:57:34: 57:41
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _45 = ColorTree::leaf(move _46); // scope 0 at ui/traits/typeclasses-eq-example.rs:57:29: 57:42
        _44 = Box::<ColorTree>::new(move _45) -> bb19; // scope 0 at ui/traits/typeclasses-eq-example.rs:57:20: 57:43
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:57:20: 57:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb19: {
        _49 = const Color::cyan;         // scope 0 at ui/traits/typeclasses-eq-example.rs:57:59: 57:63
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:57:59: 57:63
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x00)) }
        _48 = ColorTree::leaf(move _49); // scope 0 at ui/traits/typeclasses-eq-example.rs:57:54: 57:64
        _47 = Box::<ColorTree>::new(move _48) -> [return: bb20, unwind: bb46]; // scope 0 at ui/traits/typeclasses-eq-example.rs:57:45: 57:65
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:57:45: 57:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _43 = ColorTree::branch(move _44, move _47); // scope 0 at ui/traits/typeclasses-eq-example.rs:57:13: 57:66
        _42 = &_43;                      // scope 0 at ui/traits/typeclasses-eq-example.rs:57:13: 58:70
        _55 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example.rs:58:37: 58:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:58:37: 58:44
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _54 = ColorTree::leaf(move _55); // scope 0 at ui/traits/typeclasses-eq-example.rs:58:32: 58:45
        _53 = Box::<ColorTree>::new(move _54) -> [return: bb21, unwind: bb45]; // scope 0 at ui/traits/typeclasses-eq-example.rs:58:23: 58:46
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:58:23: 58:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb21: {
        _58 = const Color::cyan;         // scope 0 at ui/traits/typeclasses-eq-example.rs:58:62: 58:66
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:58:62: 58:66
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x00)) }
        _57 = ColorTree::leaf(move _58); // scope 0 at ui/traits/typeclasses-eq-example.rs:58:57: 58:67
        _56 = Box::<ColorTree>::new(move _57) -> [return: bb22, unwind: bb44]; // scope 0 at ui/traits/typeclasses-eq-example.rs:58:48: 58:68
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:58:48: 58:56
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb22: {
        _52 = ColorTree::branch(move _53, move _56); // scope 0 at ui/traits/typeclasses-eq-example.rs:58:16: 58:69
        _51 = &_52;                      // scope 0 at ui/traits/typeclasses-eq-example.rs:58:15: 58:69
        _50 = _51;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:58:15: 58:69
        _41 = <ColorTree as Equal>::isEq(move _42, move _50) -> [return: bb23, unwind: bb43]; // scope 0 at ui/traits/typeclasses-eq-example.rs:57:13: 58:70
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:58:10: 58:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb23: {
        _40 = Not(move _41);             // scope 0 at ui/traits/typeclasses-eq-example.rs:57:5: 58:71
        drop(_52) -> [return: bb24, unwind: bb45]; // scope 0 at ui/traits/typeclasses-eq-example.rs:58:70: 58:71
    }

    bb24: {
        drop(_43) -> bb25;               // scope 0 at ui/traits/typeclasses-eq-example.rs:58:70: 58:71
    }

    bb25: {
        switchInt(move _40) -> [0: bb27, otherwise: bb26]; // scope 0 at ui/traits/typeclasses-eq-example.rs:57:5: 58:71
    }

    bb26: {
        _59 = core::panicking::panic(const "assertion failed: branch(Box::new(leaf(magenta)),\\n        Box::new(leaf(cyan))).isEq(&branch(Box::new(leaf(magenta)),\\n            Box::new(leaf(cyan))))"); // scope 0 at ui/traits/typeclasses-eq-example.rs:57:5: 58:71
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:57:5: 58:71
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _67 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example.rs:60:35: 60:42
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:60:35: 60:42
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _66 = ColorTree::leaf(move _67); // scope 0 at ui/traits/typeclasses-eq-example.rs:60:30: 60:43
        _65 = Box::<ColorTree>::new(move _66) -> bb28; // scope 0 at ui/traits/typeclasses-eq-example.rs:60:21: 60:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:60:21: 60:29
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb28: {
        _70 = const Color::cyan;         // scope 0 at ui/traits/typeclasses-eq-example.rs:60:60: 60:64
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:60:60: 60:64
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x00)) }
        _69 = ColorTree::leaf(move _70); // scope 0 at ui/traits/typeclasses-eq-example.rs:60:55: 60:65
        _68 = Box::<ColorTree>::new(move _69) -> [return: bb29, unwind: bb42]; // scope 0 at ui/traits/typeclasses-eq-example.rs:60:46: 60:66
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:60:46: 60:54
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb29: {
        _64 = ColorTree::branch(move _65, move _68); // scope 0 at ui/traits/typeclasses-eq-example.rs:60:14: 60:67
        _63 = &_64;                      // scope 0 at ui/traits/typeclasses-eq-example.rs:60:14: 61:73
        _76 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example.rs:61:37: 61:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:61:37: 61:44
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _75 = ColorTree::leaf(move _76); // scope 0 at ui/traits/typeclasses-eq-example.rs:61:32: 61:45
        _74 = Box::<ColorTree>::new(move _75) -> [return: bb30, unwind: bb41]; // scope 0 at ui/traits/typeclasses-eq-example.rs:61:23: 61:46
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:61:23: 61:31
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb30: {
        _79 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example.rs:61:62: 61:69
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:61:62: 61:69
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _78 = ColorTree::leaf(move _79); // scope 0 at ui/traits/typeclasses-eq-example.rs:61:57: 61:70
        _77 = Box::<ColorTree>::new(move _78) -> [return: bb31, unwind: bb40]; // scope 0 at ui/traits/typeclasses-eq-example.rs:61:48: 61:71
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:61:48: 61:56
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb31: {
        _73 = ColorTree::branch(move _74, move _77); // scope 0 at ui/traits/typeclasses-eq-example.rs:61:16: 61:72
        _72 = &_73;                      // scope 0 at ui/traits/typeclasses-eq-example.rs:61:15: 61:72
        _71 = _72;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:61:15: 61:72
        _62 = <ColorTree as Equal>::isEq(move _63, move _71) -> [return: bb32, unwind: bb39]; // scope 0 at ui/traits/typeclasses-eq-example.rs:60:14: 61:73
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:61:10: 61:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb32: {
        _61 = Not(move _62);             // scope 0 at ui/traits/typeclasses-eq-example.rs:60:13: 61:73
        _60 = Not(move _61);             // scope 0 at ui/traits/typeclasses-eq-example.rs:60:5: 61:74
        drop(_73) -> [return: bb33, unwind: bb41]; // scope 0 at ui/traits/typeclasses-eq-example.rs:61:73: 61:74
    }

    bb33: {
        drop(_64) -> bb34;               // scope 0 at ui/traits/typeclasses-eq-example.rs:61:73: 61:74
    }

    bb34: {
        switchInt(move _60) -> [0: bb36, otherwise: bb35]; // scope 0 at ui/traits/typeclasses-eq-example.rs:60:5: 61:74
    }

    bb35: {
        _80 = core::panicking::panic(const "assertion failed: !branch(Box::new(leaf(magenta)),\\n            Box::new(leaf(cyan))).isEq(&branch(Box::new(leaf(magenta)),\\n                Box::new(leaf(magenta))))"); // scope 0 at ui/traits/typeclasses-eq-example.rs:60:5: 61:74
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:60:5: 61:74
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _90 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:63:14: 63:41
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _85 = _90;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
        _84 = _85;                       // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
        _83 = move _84 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
        _89 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _88 = _89;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _87 = _88;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _86 = move _87 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _82 = Arguments::<'_>::new_v1(move _83, move _86) -> bb37; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb37: {
        _81 = _print(move _82) -> bb38;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb38: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:64:2: 64:2
    }

    bb39 (cleanup): {
        drop(_73) -> bb41;               // scope 0 at ui/traits/typeclasses-eq-example.rs:61:73: 61:74
    }

    bb40 (cleanup): {
        drop(_74) -> bb41;               // scope 0 at ui/traits/typeclasses-eq-example.rs:61:71: 61:72
    }

    bb41 (cleanup): {
        drop(_64) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example.rs:61:73: 61:74
    }

    bb42 (cleanup): {
        drop(_65) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example.rs:60:66: 60:67
    }

    bb43 (cleanup): {
        drop(_52) -> bb45;               // scope 0 at ui/traits/typeclasses-eq-example.rs:58:70: 58:71
    }

    bb44 (cleanup): {
        drop(_53) -> bb45;               // scope 0 at ui/traits/typeclasses-eq-example.rs:58:68: 58:69
    }

    bb45 (cleanup): {
        drop(_43) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example.rs:58:70: 58:71
    }

    bb46 (cleanup): {
        drop(_44) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example.rs:57:65: 57:66
    }

    bb47 (cleanup): {
        resume;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:48:1: 64:2
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
    let mut _1: [&str; 1];               // in scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41

    bb0: {
        _1 = [const "Assertions all succeeded!\n"]; // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example.rs:63:14: 63:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:63:14: 63:41
    }
}

promoted[2] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:31: 55:43
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:36: 55:42

    bb0: {
        _2 = Color::yellow;              // scope 0 at ui/traits/typeclasses-eq-example.rs:55:36: 55:42
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example.rs:55:31: 55:43
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:55:30: 55:43
    }
}

promoted[3] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:24
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:55:19: 55:23

    bb0: {
        _2 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:55:19: 55:23
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:24
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:55:14: 55:44
    }
}

promoted[4] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:30: 54:40
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:35: 54:39

    bb0: {
        _2 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:54:35: 54:39
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example.rs:54:30: 54:40
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:54:29: 54:40
    }
}

promoted[5] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:23
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:54:18: 54:22

    bb0: {
        _2 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:54:18: 54:22
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:23
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:54:13: 54:41
    }
}

promoted[6] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:28: 52:32

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:52:28: 52:32
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:52:27: 52:32
    }
}

promoted[7] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:21

    bb0: {
        _1 = Color::magenta;             // scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:21
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:52:14: 52:33
    }
}

promoted[8] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:25: 51:31

    bb0: {
        _1 = Color::yellow;              // scope 0 at ui/traits/typeclasses-eq-example.rs:51:25: 51:31
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:51:24: 51:31
    }
}

promoted[9] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:18

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:18
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:51:14: 51:32
    }
}

promoted[10] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:27: 50:34

    bb0: {
        _1 = Color::magenta;             // scope 0 at ui/traits/typeclasses-eq-example.rs:50:27: 50:34
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:50:26: 50:34
    }
}

promoted[11] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:20

    bb0: {
        _1 = Color::magenta;             // scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:20
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:50:13: 50:35
    }
}

promoted[12] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:24: 49:28

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:49:24: 49:28
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:49:23: 49:28
    }
}

promoted[13] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:17

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:17
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:49:13: 49:29
    }
}

fn ColorTree::leaf(_1: Color) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:32:5: 32:9

    bb0: {
        _0 = ColorTree::leaf(move _1);   // scope 0 at ui/traits/typeclasses-eq-example.rs:32:5: 32:9
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:32:5: 32:9
    }
}

// MIR FOR CTFE
fn ColorTree::leaf(_1: Color) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:32:5: 32:9

    bb0: {
        _0 = ColorTree::leaf(move _1);   // scope 0 at ui/traits/typeclasses-eq-example.rs:32:5: 32:9
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:32:5: 32:9
    }
}

fn ColorTree::branch(_1: Box<ColorTree>, _2: Box<ColorTree>) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:33:5: 33:11

    bb0: {
        _0 = ColorTree::branch(move _1, move _2); // scope 0 at ui/traits/typeclasses-eq-example.rs:33:5: 33:11
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:33:5: 33:11
    }
}

// MIR FOR CTFE
fn ColorTree::branch(_1: Box<ColorTree>, _2: Box<ColorTree>) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example.rs:33:5: 33:11

    bb0: {
        _0 = ColorTree::branch(move _1, move _2); // scope 0 at ui/traits/typeclasses-eq-example.rs:33:5: 33:11
        return;                          // scope 0 at ui/traits/typeclasses-eq-example.rs:33:5: 33:11
    }
}
