// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/impl-evaluation-order.rs:18:1: 18:29>::clone(_1: &G<T, U>) -> G<T, U> {
    debug self => _1;
    let mut _0: G<T, U>;

    bb0: {
        _0 = G::<T, U>(((*_1).0: *const T), ((*_1).1: *const U));
        return;
    }
}

fn is_m(_1: T) -> () {
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: G<(), ()>;
    let mut _2: *const ();
    let mut _3: *const ();
    let _4: ();
    let _5: ();
    let mut _6: &();
    let mut _7: &();
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _7 = const _;
        _2 = &raw const (*_7);
        _6 = const _;
        _3 = &raw const (*_6);
        _1 = G::<(), ()>(move _2, move _3);
        _4 = std::mem::drop::<G<(), ()>>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = std::mem::drop::<G<(), ()>>(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn G(_1: *const T, _2: *const U) -> G<T, U> {
    let mut _0: G<T, U>;

    bb0: {
        _0 = G::<T, U>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn G(_1: *const T, _2: *const U) -> G<T, U> {
    let mut _0: G<T, U>;

    bb0: {
        _0 = G::<T, U>(move _1, move _2);
        return;
    }
}
