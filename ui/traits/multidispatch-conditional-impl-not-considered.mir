// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:10:12: 10:17
    let mut _0: ();                      // return place in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:10:19: 10:19

    bb0: {
        return;                          // scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:10:21: 10:21
    }
}

fn <impl at ui/traits/multidispatch-conditional-impl-not-considered.rs:17:1: 17:9>::foo(_1: &Bar) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:18:12: 18:17
    let mut _0: ();                      // return place in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:18:19: 18:19

    bb0: {
        return;                          // scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:18:21: 18:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:21:11: 21:11
    let _1: std::cell::RefCell<Bar>;     // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:22:9: 22:10
    let mut _2: Bar;                     // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:22:26: 22:29
    let _3: ();                          // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
    let mut _4: &Bar;                    // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
    let _5: &Bar;                        // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
    let mut _6: &std::cell::Ref<'_, Bar>; // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
    let _7: std::cell::Ref<'_, Bar>;     // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:15
    let mut _8: &std::cell::RefCell<Bar>; // in scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:15
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:22:9: 22:10
    }

    bb0: {
        _1 = RefCell::<Bar>::new(move _2) -> bb1; // scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:22:13: 22:30
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch-conditional-impl-not-considered.rs:22:13: 22:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Bar) -> RefCell<Bar> {RefCell::<Bar>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_1;                        // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:15
        _7 = RefCell::<Bar>::borrow(move _8) -> bb2; // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:15
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch-conditional-impl-not-considered.rs:23:7: 23:13
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Bar>) -> Ref<'a, Bar> {RefCell::<Bar>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
        _5 = <Ref<'_, Bar> as Deref>::deref(move _6) -> [return: bb3, unwind: bb6]; // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Bar>) -> &'a <Ref<'_, Bar> as Deref>::Target {<Ref<'_, Bar> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _5;                         // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
        _3 = Bar::foo(move _4) -> [return: bb4, unwind: bb6]; // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:5: 23:21
                                         // mir::Constant
                                         // + span: ui/traits/multidispatch-conditional-impl-not-considered.rs:23:16: 23:19
                                         // + literal: Const { ty: for<'a> fn(&'a Bar) {Bar::foo}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:21: 23:22
    }

    bb5: {
        return;                          // scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:24:2: 24:2
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 1 at ui/traits/multidispatch-conditional-impl-not-considered.rs:23:21: 23:22
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/traits/multidispatch-conditional-impl-not-considered.rs:21:1: 24:2
    }
}
