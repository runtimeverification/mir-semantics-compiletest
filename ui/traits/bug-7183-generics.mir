// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Speak::hi(_1: &Self) -> String {
    debug self => _1;
    let mut _0: std::string::String;

    bb0: {
        _0 = hello::<Self>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn hello(_1: &S) -> String {
    debug s => _1;
    let mut _0: std::string::String;
    let _2: &str;

    bb0: {
        _2 = const "hello";
        _0 = <S as Speak>::say(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/bug-7183-generics.rs:12:1: 12:21>::say(_1: &isize, _2: &str) -> String {
    debug self => _1;
    debug s => _2;
    let mut _0: std::string::String;
    let _3: std::string::String;
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 2];
    let _8: [core::fmt::rt::Argument<'_>; 2];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&str;
    let mut _11: core::fmt::rt::Argument<'_>;
    let mut _12: &[&str; 2];
    scope 1 {
        debug res => _3;
    }

    bb0: {
        _12 = const _;
        _5 = _12 as &[&str] (Pointer(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9, move _11];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = format(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = move _3;
        return;
    }
}

promoted[0] in <impl at ui/traits/bug-7183-generics.rs:12:1: 12:21>::say: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ": "];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/traits/bug-7183-generics.rs:18:1: 18:35>::say(_1: &Option<T>, _2: &str) -> String {
    debug self => _1;
    debug s => _2;
    let mut _0: std::string::String;
    let mut _3: isize;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &&str;
    let _12: &T;
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &std::string::String;
    let _21: std::string::String;
    let mut _22: &str;
    let mut _24: &[&str; 2];
    scope 1 {
        debug res => _4;
    }
    scope 2 {
        debug x => _12;
        let _13: std::string::String;
        let mut _23: &[&str; 1];
        scope 3 {
            debug res => _13;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = &(((*_1) as Some).0: T);
        _23 = const _;
        _15 = _23 as &[&str] (Pointer(Unsize));
        _22 = _2;
        _21 = <T as Speak>::say(_12, move _22) -> [return: bb7, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _24 = const _;
        _6 = _24 as &[&str] (Pointer(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = format(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _0 = move _4;
        goto -> bb12;
    }

    bb7: {
        _20 = &_21;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<String>(_20) -> [return: bb8, unwind: bb14];
    }

    bb8: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _13 = format(move _14) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        drop(_21) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        _0 = move _13;
        goto -> bb12;
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_13) -> [return: bb15, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_21) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

promoted[0] in <impl at ui/traits/bug-7183-generics.rs:18:1: 18:35>::say: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "something!"];
        _0 = &_1;
        return;
    }
}

promoted[1] in <impl at ui/traits/bug-7183-generics.rs:18:1: 18:35>::say: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const " - none"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let _6: &str;
    let _7: &std::string::String;
    let _8: &std::string::String;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::string::String, &std::string::String);
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let mut _17: &std::string::String;
    let _18: std::string::String;
    let _19: &str;
    let _20: &std::string::String;
    let _21: &std::string::String;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::string::String, &std::string::String);
    let mut _28: &std::string::String;
    let _29: std::string::String;
    let mut _30: &std::string::String;
    let _31: std::string::String;
    let _32: &str;
    let _33: &std::string::String;
    let _34: &std::string::String;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::string::String, &std::string::String);
    let mut _41: &std::string::String;
    let _42: std::string::String;
    let mut _43: &std::string::String;
    let _44: std::string::String;
    let _45: &str;
    let _46: &std::string::String;
    let _47: &std::string::String;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&std::string::String, &std::string::String);
    let mut _54: &std::string::String;
    let _55: std::string::String;
    let mut _56: &std::string::String;
    let _57: std::string::String;
    let _58: &str;
    let _59: &std::string::String;
    let _60: &std::string::String;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: &std::option::Option<isize>;
    let mut _67: &std::option::Option<std::option::Option<isize>>;
    let mut _68: &std::option::Option<isize>;
    let mut _69: &std::option::Option<std::option::Option<isize>>;
    let mut _70: &isize;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }

    bb0: {
        _70 = const _;
        _3 = <isize as Speak>::hi(_70) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _6 = const "hello: 3";
        _5 = <str as ToString>::to_string(_6) -> [return: bb2, unwind: bb45];
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &std::string::String);
        _8 = (_1.1: &std::string::String);
        _10 = <String as PartialEq>::eq(_7, _8) -> [return: bb3, unwind: bb44];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<String, String>(move _11, _7, _8, move _13) -> bb44;
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb45];
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        _69 = const _;
        _16 = <Option<Option<isize>> as Speak>::hi(_69) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = &_16;
        _19 = const "something!something!hello: 3";
        _18 = <str as ToString>::to_string(_19) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _17 = &_18;
        _14 = (move _15, move _17);
        _20 = (_14.0: &std::string::String);
        _21 = (_14.1: &std::string::String);
        _23 = <String as PartialEq>::eq(_20, _21) -> [return: bb10, unwind: bb42];
    }

    bb10: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<String, String>(move _24, _20, _21, move _26) -> bb42;
    }

    bb12: {
        drop(_18) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        drop(_16) -> [return: bb14, unwind continue];
    }

    bb14: {
        _68 = const _;
        _29 = <Option<isize> as Speak>::hi(_68) -> [return: bb15, unwind continue];
    }

    bb15: {
        _28 = &_29;
        _32 = const "hello - none";
        _31 = <str as ToString>::to_string(_32) -> [return: bb16, unwind: bb41];
    }

    bb16: {
        _30 = &_31;
        _27 = (move _28, move _30);
        _33 = (_27.0: &std::string::String);
        _34 = (_27.1: &std::string::String);
        _36 = <String as PartialEq>::eq(_33, _34) -> [return: bb17, unwind: bb40];
    }

    bb17: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<String, String>(move _37, _33, _34, move _39) -> bb40;
    }

    bb19: {
        drop(_31) -> [return: bb20, unwind: bb41];
    }

    bb20: {
        drop(_29) -> [return: bb21, unwind continue];
    }

    bb21: {
        _67 = const _;
        _42 = <Option<Option<isize>> as Speak>::hi(_67) -> [return: bb22, unwind continue];
    }

    bb22: {
        _41 = &_42;
        _45 = const "something!hello - none";
        _44 = <str as ToString>::to_string(_45) -> [return: bb23, unwind: bb39];
    }

    bb23: {
        _43 = &_44;
        _40 = (move _41, move _43);
        _46 = (_40.0: &std::string::String);
        _47 = (_40.1: &std::string::String);
        _49 = <String as PartialEq>::eq(_46, _47) -> [return: bb24, unwind: bb38];
    }

    bb24: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<String, String>(move _50, _46, _47, move _52) -> bb38;
    }

    bb26: {
        drop(_44) -> [return: bb27, unwind: bb39];
    }

    bb27: {
        drop(_42) -> [return: bb28, unwind continue];
    }

    bb28: {
        _66 = const _;
        _55 = <Option<isize> as Speak>::hi(_66) -> [return: bb29, unwind continue];
    }

    bb29: {
        _54 = &_55;
        _58 = const "something!hello: 3";
        _57 = <str as ToString>::to_string(_58) -> [return: bb30, unwind: bb37];
    }

    bb30: {
        _56 = &_57;
        _53 = (move _54, move _56);
        _59 = (_53.0: &std::string::String);
        _60 = (_53.1: &std::string::String);
        _62 = <String as PartialEq>::eq(_59, _60) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<String, String>(move _63, _59, _60, move _65) -> bb36;
    }

    bb33: {
        drop(_57) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        drop(_55) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_57) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        drop(_55) -> [return: bb46, unwind terminate];
    }

    bb38 (cleanup): {
        drop(_44) -> [return: bb39, unwind terminate];
    }

    bb39 (cleanup): {
        drop(_42) -> [return: bb46, unwind terminate];
    }

    bb40 (cleanup): {
        drop(_31) -> [return: bb41, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_29) -> [return: bb46, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_18) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_16) -> [return: bb46, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_5) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_3) -> [return: bb46, unwind terminate];
    }

    bb46 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Option<isize> = {
    let mut _0: &std::option::Option<isize>;
    let mut _1: std::option::Option<isize>;

    bb0: {
        _1 = Option::<isize>::Some(const 3_isize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<Option<isize>> = {
    let mut _0: &std::option::Option<std::option::Option<isize>>;
    let mut _1: std::option::Option<std::option::Option<isize>>;
    let mut _2: std::option::Option<isize>;

    bb0: {
        _2 = Option::<isize>::None;
        _1 = Option::<Option<isize>>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Option<isize> = {
    let mut _0: &std::option::Option<isize>;
    let mut _1: std::option::Option<isize>;

    bb0: {
        _1 = Option::<isize>::None;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Option<Option<isize>> = {
    let mut _0: &std::option::Option<std::option::Option<isize>>;
    let mut _1: std::option::Option<std::option::Option<isize>>;
    let mut _2: std::option::Option<isize>;

    bb0: {
        _2 = Option::<isize>::Some(const 3_isize);
        _1 = Option::<Option<isize>>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}
