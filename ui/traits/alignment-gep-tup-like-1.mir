// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/alignment-gep-tup-like-1.rs:19:1: 19:42>::f(_1: &Invoker<A>) -> (A, u16) {
    debug self => _1;
    let mut _0: (A, u16);
    let mut _2: A;
    let mut _3: &A;
    let mut _4: u16;

    bb0: {
        _3 = &((*_1).0: A);
        _2 = <A as Clone>::clone(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = ((*_1).1: u16);
        _0 = (move _2, move _4);
        return;
    }
}

fn f(_1: A, _2: u16) -> Box<dyn Invokable<A>> {
    debug a => _1;
    debug b => _2;
    let mut _0: std::boxed::Box<dyn Invokable<A>>;
    let mut _3: std::boxed::Box<Invoker<A>>;
    let mut _4: Invoker<A>;

    bb0: {
        _4 = Invoker::<A> { a: move _1, b: _2 };
        _3 = Box::<Invoker<A>>::new(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _3 as std::boxed::Box<dyn Invokable<A>> (Pointer(Unsize));
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u64;
    let _2: u16;
    let mut _3: (u64, u16);
    let mut _4: &dyn Invokable<u64>;
    let _5: std::boxed::Box<dyn Invokable<u64>>;
    let _6: ();
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 2];
    let _11: [core::fmt::rt::Argument<'_>; 2];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &u64;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &u16;
    let mut _16: (&u64, &u64);
    let mut _17: &u64;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u64;
    let mut _23: u64;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u16, &u16);
    let mut _28: &u16;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: u16;
    let mut _34: u16;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: *const dyn Invokable<u64>;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _18: &u64;
        let _19: &u64;
        let _29: &u16;
        let _30: &u16;
        let mut _38: &u16;
        let mut _39: &u64;
        let mut _40: &[&str; 3];
        scope 2 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 3 {
                debug kind => _24;
            }
        }
        scope 4 {
            debug left_val => _29;
            debug right_val => _30;
            let _35: core::panicking::AssertKind;
            scope 5 {
                debug kind => _35;
            }
        }
    }

    bb0: {
        _5 = f::<u64>(const 22_u64, const 44_u16) -> [return: bb1, unwind continue];
    }

    bb1: {
        _41 = (((_5.0: std::ptr::Unique<dyn Invokable<u64>>).0: std::ptr::NonNull<dyn Invokable<u64>>).0: *const dyn Invokable<u64>);
        _4 = &(*_41);
        _3 = <dyn Invokable<u64> as Invokable<u64>>::f(move _4) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _1 = (_3.0: u64);
        _2 = (_3.1: u16);
        drop(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _40 = const _;
        _8 = _40 as &[&str] (Pointer(Unsize));
        _13 = &_1;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_13) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<u16>(_15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _11 = [move _12, move _14];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = _print(move _7) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = &_1;
        _39 = const _;
        _16 = (move _17, _39);
        _18 = (_16.0: &u64);
        _19 = (_16.1: &u64);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u64, u64>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb9: {
        _28 = &_2;
        _38 = const _;
        _27 = (move _28, _38);
        _29 = (_27.0: &u16);
        _30 = (_27.1: &u16);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<u16, u16>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_5) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

promoted[0] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 44_u16;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;

    bb0: {
        _1 = const 22_u64;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "a=", const " b=", const "\n"];
        _0 = &_1;
        return;
    }
}
