// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/alignment-gep-tup-like-1.rs:19:1: 19:42>::f(_1: &Invoker<A>) -> (A, u16) {
    debug self => _1;                    // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:20:10: 20:15
    let mut _0: (A, u16);                // return place in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:20:20: 20:28
    let mut _2: A;                       // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:10: 21:24
    let mut _3: &A;                      // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:10: 21:24
    let mut _4: u16;                     // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:26: 21:32

    bb0: {
        _3 = &((*_1).0: A);              // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:10: 21:24
        _2 = <A as Clone>::clone(move _3) -> bb1; // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:10: 21:24
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:21:17: 21:22
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = ((*_1).1: u16);             // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:26: 21:32
        _0 = (move _2, move _4);         // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:21:9: 21:33
        return;                          // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:22:6: 22:6
    }
}

fn f(_1: A, _2: u16) -> Box<dyn Invokable<A>> {
    debug a => _1;                       // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:25:25: 25:26
    debug b => _2;                       // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:25:31: 25:32
    let mut _0: std::boxed::Box<dyn Invokable<A>>; // return place in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:25:42: 25:71
    let mut _3: std::boxed::Box<dyn Invokable<A>>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:40
    let mut _4: std::boxed::Box<dyn Invokable<A>>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:40
    let mut _5: std::boxed::Box<dyn Invokable<A>>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:40
    let mut _6: std::boxed::Box<Invoker<A>>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:7
    let mut _7: Invoker<A>;              // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:14: 29:6
    let mut _8: A;                       // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:27:12: 27:13
    let mut _9: u16;                     // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:28:12: 28:13

    bb0: {
        _8 = move _1;                    // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:27:12: 27:13
        _9 = _2;                         // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:28:12: 28:13
        _7 = Invoker::<A> { a: move _8, b: move _9 }; // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:14: 29:6
        _6 = Box::<Invoker<A>>::new(move _7) -> bb1; // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:7
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:26:5: 26:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Invoker<A>) -> Box<Invoker<A>> {Box::<Invoker<A>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _6 as std::boxed::Box<dyn Invokable<A>> (Pointer(Unsize)); // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:7
        _4 = move _5;                    // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:40
        _3 = move _4 as std::boxed::Box<dyn Invokable<A>> (Pointer(Unsize)); // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:40
        _0 = move _3 as std::boxed::Box<dyn Invokable<A>> (Pointer(Unsize)); // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:26:5: 29:40
        return;                          // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:30:2: 30:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:32:15: 32:15
    let _1: u64;                         // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:10: 33:11
    let _2: u16;                         // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:13: 33:14
    let mut _3: (u64, u16);              // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:38
    let mut _4: &dyn Invokable<u64>;     // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:38
    let _5: std::boxed::Box<dyn Invokable<u64>>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:34
    let _6: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[&str];                 // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
    let mut _9: &[&str; 3];              // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
    let _10: &[&str; 3];                 // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
    let mut _16: &u64;                   // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
    let _17: &u64;                       // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
    let mut _19: &u16;                   // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
    let _20: &u16;                       // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
    let mut _21: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _23: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _38: (&u16, &u16);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _39: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _40: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _58: *const dyn Invokable<u64>; // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:34
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/traits/alignment-gep-tup-like-1.rs:33:10: 33:11
        debug b => _2;                   // in scope 1 at ui/traits/alignment-gep-tup-like-1.rs:33:13: 33:14
        let _24: &u64;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _25: &u64;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _41: &u16;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _42: &u16;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _55: &u16;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _56: &u64;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _57: &[&str; 3];         // in scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
        scope 2 {
            debug left_val => _24;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _25;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _30: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _30;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _41;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _42;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _47: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _47;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = f::<u64>(const 22_u64, const 44_u16) -> bb1; // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:34
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:19
                                         // + literal: Const { ty: fn(u64, u16) -> Box<(dyn Invokable<u64> + 'static)> {f::<u64>}, val: Value(<ZST>) }
    }

    bb1: {
        _58 = (((_5.0: std::ptr::Unique<dyn Invokable<u64>>).0: std::ptr::NonNull<dyn Invokable<u64>>).0: *const dyn Invokable<u64>); // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:38
        _4 = &(*_58);                    // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:38
        _3 = <dyn Invokable<u64> as Invokable<u64>>::f(move _4) -> [return: bb2, unwind: bb12]; // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:18: 33:38
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:33:35: 33:36
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Invokable<u64>) -> (u64, u16) {<dyn Invokable<u64> as Invokable<u64>>::f}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = (_3.0: u64);                // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:10: 33:11
        _2 = (_3.1: u16);                // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:13: 33:14
        drop(_5) -> bb3;                 // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:38: 33:39
    }

    bb3: {
        _57 = const _;                   // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[2])) }
        _10 = _57;                       // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
        _9 = _10;                        // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
        _17 = &_1;                       // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
        _16 = _17;                       // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<u64>(move _16) -> bb4; // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:34:27: 34:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u64) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u64>}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_2;                       // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
        _19 = _20;                       // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<u16>(move _19) -> bb5; // scope 1 at ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:34:30: 34:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u16) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u16>}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = [move _15, move _18];      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = _print(move _7) -> bb7;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _56 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u64, val: Unevaluated(main, [], Some(promoted[1])) }
        _23 = _56;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _23);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_21.0: &u64);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_21.1: &u64);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = (*_24);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = const 22_u64;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = Eq(move _28, move _29);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _26 = Not(move _27);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _30 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<u64, u64>(move _32, move _33, move _35, move _37); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb9: {
        _39 = &_2;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _55 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u16, val: Unevaluated(main, [], Some(promoted[0])) }
        _40 = _55;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _38 = (move _39, move _40);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_38.0: &u16);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_38.1: &u16);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = (*_41);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = const 44_u16;              // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = Eq(move _45, move _46);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _43 = Not(move _44);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb11, otherwise: bb10]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _47 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<u16, u16>(move _49, move _50, move _52, move _54); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u16, &'b u16, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u16, u16>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:37:2: 37:2
    }

    bb12 (cleanup): {
        drop(_5) -> bb13;                // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:33:38: 33:39
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:32:1: 37:2
    }
}

promoted[0] in main: &u16 = {
    let mut _0: &u16;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u16;                     // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:36:19: 36:24

    bb0: {
        _1 = const 44_u16;               // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:36:19: 36:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u64 = {
    let mut _0: &u64;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u64;                     // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:35:19: 35:24

    bb0: {
        _1 = const 22_u64;               // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:35:19: 35:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
    let mut _1: [&str; 3];               // in scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25

    bb0: {
        _1 = [const "a=", const " b=", const "\n"]; // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
        return;                          // scope 0 at ui/traits/alignment-gep-tup-like-1.rs:34:14: 34:25
    }
}
