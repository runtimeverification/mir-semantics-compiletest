// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> impl Borrow<<u8 as A>::Foo> {
    let mut _0: impl std::borrow::Borrow<<u8 as A>::Foo>; // return place in scope 0 at ui/traits/impl_trait_as_trait_return_position.rs:11:13: 11:53

    bb0: {
        return;                          // scope 0 at ui/traits/impl_trait_as_trait_return_position.rs:13:2: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl_trait_as_trait_return_position.rs:15:11: 15:11
    let _1: impl std::borrow::Borrow<<u8 as A>::Foo>; // in scope 0 at ui/traits/impl_trait_as_trait_return_position.rs:16:5: 16:10

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/traits/impl_trait_as_trait_return_position.rs:16:5: 16:10
                                         // mir::Constant
                                         // + span: ui/traits/impl_trait_as_trait_return_position.rs:16:5: 16:8
                                         // + literal: Const { ty: fn() -> impl Borrow<<u8 as A>::Foo> {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/impl_trait_as_trait_return_position.rs:17:2: 17:2
    }
}
