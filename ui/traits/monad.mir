// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/monad.rs:11:1: 11:32>::bind(_1: &Vec<A>, _2: F) -> Vec<B> {
    debug self => _1;                    // in scope 0 at ui/traits/monad.rs:12:19: 12:24
    debug f => _2;                       // in scope 0 at ui/traits/monad.rs:12:26: 12:31
    let mut _0: std::vec::Vec<B>;        // return place in scope 0 at ui/traits/monad.rs:13:13: 13:18
    let mut _3: std::slice::Iter<'_, A>; // in scope 0 at ui/traits/monad.rs:14:20: 14:24
    let mut _4: &std::vec::Vec<A>;       // in scope 0 at ui/traits/monad.rs:14:20: 14:24
    let mut _6: std::option::Option<&A>; // in scope 0 at ui/traits/monad.rs:14:20: 14:24
    let mut _7: &mut std::slice::Iter<'_, A>; // in scope 0 at ui/traits/monad.rs:14:20: 14:24
    let mut _8: &mut std::slice::Iter<'_, A>; // in scope 0 at ui/traits/monad.rs:14:20: 14:24
    let mut _9: isize;                   // in scope 0 at ui/traits/monad.rs:14:9: 16:10
    let _11: ();                         // in scope 0 at ui/traits/monad.rs:15:13: 15:29
    let mut _12: &mut std::vec::Vec<B>;  // in scope 0 at ui/traits/monad.rs:15:13: 15:29
    let mut _13: std::vec::Vec<B>;       // in scope 0 at ui/traits/monad.rs:15:22: 15:28
    let mut _14: &mut F;                 // in scope 0 at ui/traits/monad.rs:15:22: 15:23
    let mut _15: (&A,);                  // in scope 0 at ui/traits/monad.rs:15:22: 15:28
    let mut _16: &A;                     // in scope 0 at ui/traits/monad.rs:15:24: 15:27
    scope 1 {
        debug r => _0;                   // in scope 1 at ui/traits/monad.rs:13:13: 13:18
        let mut _5: std::slice::Iter<'_, A>; // in scope 1 at ui/traits/monad.rs:14:20: 14:24
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/traits/monad.rs:14:20: 14:24
            let _10: &A;                 // in scope 2 at ui/traits/monad.rs:14:13: 14:16
            scope 3 {
                debug elt => _10;        // in scope 3 at ui/traits/monad.rs:14:13: 14:16
            }
        }
    }

    bb0: {
        _0 = Vec::<B>::new() -> [return: bb1, unwind: bb11]; // scope 0 at ui/traits/monad.rs:13:21: 13:31
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:13:21: 13:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<B> {Vec::<B>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/traits/monad.rs:14:20: 14:24
        _3 = <&Vec<A> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb10]; // scope 1 at ui/traits/monad.rs:14:20: 14:24
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:14:20: 14:24
                                         // + literal: Const { ty: fn(&Vec<A>) -> <&Vec<A> as IntoIterator>::IntoIter {<&Vec<A> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 1 at ui/traits/monad.rs:14:20: 14:24
        goto -> bb3;                     // scope 2 at ui/traits/monad.rs:14:9: 16:10
    }

    bb3: {
        _8 = &mut _5;                    // scope 2 at ui/traits/monad.rs:14:20: 14:24
        _7 = &mut (*_8);                 // scope 2 at ui/traits/monad.rs:14:20: 14:24
        _6 = <std::slice::Iter<'_, A> as Iterator>::next(move _7) -> [return: bb4, unwind: bb10]; // scope 2 at ui/traits/monad.rs:14:20: 14:24
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:14:20: 14:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, A>) -> Option<<std::slice::Iter<'_, A> as Iterator>::Item> {<std::slice::Iter<'_, A> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 2 at ui/traits/monad.rs:14:20: 14:24
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/traits/monad.rs:14:20: 14:24
    }

    bb5: {
        _10 = ((_6 as Some).0: &A);      // scope 2 at ui/traits/monad.rs:14:13: 14:16
        _12 = &mut _0;                   // scope 3 at ui/traits/monad.rs:15:13: 15:29
        _14 = &mut _2;                   // scope 3 at ui/traits/monad.rs:15:22: 15:23
        _16 = _10;                       // scope 3 at ui/traits/monad.rs:15:24: 15:27
        _15 = (move _16,);               // scope 3 at ui/traits/monad.rs:15:22: 15:28
        _13 = <F as FnMut<(&A,)>>::call_mut(move _14, move _15) -> [return: bb8, unwind: bb10]; // scope 3 at ui/traits/monad.rs:15:22: 15:28
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:15:22: 15:23
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&A,)) -> <F as FnOnce<(&A,)>>::Output {<F as FnMut<(&A,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/traits/monad.rs:14:20: 14:24
    }

    bb7: {
        drop(_2) -> bb9;                 // scope 0 at ui/traits/monad.rs:18:5: 18:6
    }

    bb8: {
        _11 = <Vec<B> as Extend<B>>::extend::<Vec<B>>(move _12, move _13) -> [return: bb13, unwind: bb10]; // scope 3 at ui/traits/monad.rs:15:13: 15:29
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:15:15: 15:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<B>, Vec<B>) {<Vec<B> as Extend<B>>::extend::<Vec<B>>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/traits/monad.rs:18:6: 18:6
    }

    bb10 (cleanup): {
        drop(_0) -> bb11;                // scope 0 at ui/traits/monad.rs:18:5: 18:6
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/traits/monad.rs:18:5: 18:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/traits/monad.rs:12:5: 18:6
    }

    bb13: {
        goto -> bb3;                     // scope 3 at ui/traits/monad.rs:15:13: 15:29
    }
}

fn <impl at ui/traits/monad.rs:25:1: 25:38>::bind(_1: &Option<A>, _2: F) -> Option<B> {
    debug self => _1;                    // in scope 0 at ui/traits/monad.rs:26:19: 26:24
    debug f => _2;                       // in scope 0 at ui/traits/monad.rs:26:26: 26:27
    let mut _0: std::option::Option<B>;  // return place in scope 0 at ui/traits/monad.rs:26:35: 26:44
    let mut _3: isize;                   // in scope 0 at ui/traits/monad.rs:28:13: 28:24
    let _4: &A;                          // in scope 0 at ui/traits/monad.rs:28:18: 28:23
    let mut _5: F;                       // in scope 0 at ui/traits/monad.rs:28:30: 28:31
    let mut _6: (&A,);                   // in scope 0 at ui/traits/monad.rs:28:30: 28:34
    let mut _7: &A;                      // in scope 0 at ui/traits/monad.rs:28:32: 28:33
    let mut _8: bool;                    // in scope 0 at ui/traits/monad.rs:31:5: 31:6
    scope 1 {
        debug a => _4;                   // in scope 1 at ui/traits/monad.rs:28:18: 28:23
    }

    bb0: {
        _8 = const false;                // scope 0 at ui/traits/monad.rs:27:15: 27:20
        _8 = const true;                 // scope 0 at ui/traits/monad.rs:27:15: 27:20
        _3 = discriminant((*_1));        // scope 0 at ui/traits/monad.rs:27:15: 27:20
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 0 at ui/traits/monad.rs:27:9: 27:20
    }

    bb1: {
        _0 = Option::<B>::None;          // scope 0 at ui/traits/monad.rs:29:23: 29:27
        goto -> bb6;                     // scope 0 at ui/traits/monad.rs:29:23: 29:27
    }

    bb2: {
        unreachable;                     // scope 0 at ui/traits/monad.rs:27:15: 27:20
    }

    bb3: {
        _4 = &(((*_1) as Some).0: A);    // scope 0 at ui/traits/monad.rs:28:18: 28:23
        _8 = const false;                // scope 1 at ui/traits/monad.rs:28:30: 28:31
        _5 = move _2;                    // scope 1 at ui/traits/monad.rs:28:30: 28:31
        _7 = _4;                         // scope 1 at ui/traits/monad.rs:28:32: 28:33
        _6 = (move _7,);                 // scope 1 at ui/traits/monad.rs:28:30: 28:34
        _0 = <F as FnOnce<(&A,)>>::call_once(move _5, move _6) -> bb6; // scope 1 at ui/traits/monad.rs:28:30: 28:34
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:28:30: 28:31
                                         // + literal: Const { ty: extern "rust-call" fn(F, (&A,)) -> <F as FnOnce<(&A,)>>::Output {<F as FnOnce<(&A,)>>::call_once}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/traits/monad.rs:31:6: 31:6
    }

    bb5: {
        drop(_2) -> bb4;                 // scope 0 at ui/traits/monad.rs:31:5: 31:6
    }

    bb6: {
        switchInt(_8) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/traits/monad.rs:31:5: 31:6
    }
}

fn transform(_1: Option<isize>) -> Option<String> {
    debug x => _1;                       // in scope 0 at ui/traits/monad.rs:34:14: 34:15
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at ui/traits/monad.rs:34:35: 34:49
    let mut _2: &std::option::Option<isize>; // in scope 0 at ui/traits/monad.rs:35:5: 35:61
    let _3: std::option::Option<isize>;  // in scope 0 at ui/traits/monad.rs:35:5: 35:30
    let mut _4: &std::option::Option<isize>; // in scope 0 at ui/traits/monad.rs:35:5: 35:30
    let mut _5: [closure@ui/traits/monad.rs:35:12: 35:15]; // in scope 0 at ui/traits/monad.rs:35:12: 35:28
    let mut _6: [closure@ui/traits/monad.rs:35:36: 35:39]; // in scope 0 at ui/traits/monad.rs:35:36: 35:59

    bb0: {
        _4 = &_1;                        // scope 0 at ui/traits/monad.rs:35:5: 35:30
        _3 = <Option<isize> as option_monad<isize>>::bind::<isize, [closure@ui/traits/monad.rs:35:12: 35:15]>(move _4, move _5) -> bb1; // scope 0 at ui/traits/monad.rs:35:5: 35:30
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:35:7: 35:11
                                         // + literal: Const { ty: for<'a> fn(&'a Option<isize>, [closure@ui/traits/monad.rs:35:12: 35:15]) -> Option<isize> {<Option<isize> as option_monad<isize>>::bind::<isize, [closure@ui/traits/monad.rs:35:12: 35:15]>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at ui/traits/monad.rs:35:5: 35:61
        _0 = <Option<isize> as option_monad<isize>>::bind::<String, [closure@ui/traits/monad.rs:35:36: 35:39]>(move _2, move _6) -> bb2; // scope 0 at ui/traits/monad.rs:35:5: 35:61
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:35:31: 35:35
                                         // + literal: Const { ty: for<'a> fn(&'a Option<isize>, [closure@ui/traits/monad.rs:35:36: 35:39]) -> Option<String> {<Option<isize> as option_monad<isize>>::bind::<String, [closure@ui/traits/monad.rs:35:36: 35:39]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/monad.rs:36:2: 36:2
    }
}

fn transform::{closure#0}(_1: [closure@ui/traits/monad.rs:35:12: 35:15], _2: &isize) -> Option<isize> {
    debug n => _2;                       // in scope 0 at ui/traits/monad.rs:35:13: 35:14
    let mut _0: std::option::Option<isize>; // return place in scope 0 at ui/traits/monad.rs:35:16: 35:16
    let mut _3: isize;                   // in scope 0 at ui/traits/monad.rs:35:21: 35:27
    let mut _4: isize;                   // in scope 0 at ui/traits/monad.rs:35:21: 35:23
    let mut _5: (isize, bool);           // in scope 0 at ui/traits/monad.rs:35:21: 35:27

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/traits/monad.rs:35:21: 35:23
        _5 = CheckedAdd(_4, const 1_isize); // scope 0 at ui/traits/monad.rs:35:21: 35:27
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, const 1_isize) -> bb1; // scope 0 at ui/traits/monad.rs:35:21: 35:27
    }

    bb1: {
        _3 = move (_5.0: isize);         // scope 0 at ui/traits/monad.rs:35:21: 35:27
        _0 = Option::<isize>::Some(move _3); // scope 0 at ui/traits/monad.rs:35:16: 35:28
        return;                          // scope 0 at ui/traits/monad.rs:35:28: 35:28
    }
}

fn transform::{closure#1}(_1: [closure@ui/traits/monad.rs:35:36: 35:39], _2: &isize) -> Option<String> {
    debug n => _2;                       // in scope 0 at ui/traits/monad.rs:35:37: 35:38
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at ui/traits/monad.rs:35:40: 35:40
    let mut _3: std::string::String;     // in scope 0 at ui/traits/monad.rs:35:45: 35:58
    let mut _4: &isize;                  // in scope 0 at ui/traits/monad.rs:35:45: 35:58

    bb0: {
        _4 = _2;                         // scope 0 at ui/traits/monad.rs:35:45: 35:58
        _3 = <isize as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/traits/monad.rs:35:45: 35:58
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:35:47: 35:56
                                         // + literal: Const { ty: for<'a> fn(&'a isize) -> String {<isize as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<String>::Some(move _3); // scope 0 at ui/traits/monad.rs:35:40: 35:59
        return;                          // scope 0 at ui/traits/monad.rs:35:59: 35:59
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/monad.rs:38:15: 38:15
    let mut _1: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::option::Option<std::string::String>; // in scope 0 at ui/traits/monad.rs:39:16: 39:35
    let mut _4: std::option::Option<isize>; // in scope 0 at ui/traits/monad.rs:39:26: 39:34
    let mut _5: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: std::option::Option<std::string::String>; // in scope 0 at ui/traits/monad.rs:39:37: 39:59
    let mut _7: std::string::String;     // in scope 0 at ui/traits/monad.rs:39:42: 39:58
    let mut _8: &str;                    // in scope 0 at ui/traits/monad.rs:39:42: 39:58
    let _9: &str;                        // in scope 0 at ui/traits/monad.rs:39:42: 39:46
    let _10: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: std::option::Option<std::string::String>; // in scope 0 at ui/traits/monad.rs:40:16: 40:31
    let mut _27: std::option::Option<isize>; // in scope 0 at ui/traits/monad.rs:40:26: 40:30
    let mut _28: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&std::vec::Vec<std::string::String>, &[std::string::String; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/monad.rs:41:16: 43:55
    let mut _46: &std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/monad.rs:41:16: 43:55
    let _47: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/monad.rs:41:16: 42:55
    let mut _48: &std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/monad.rs:41:16: 42:55
    let _49: std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _50: std::boxed::Box<[std::string::String]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _51: std::boxed::Box<[std::string::String; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _52: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _53: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _54: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _55: std::boxed::Box<[std::string::String; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _56: std::string::String;    // in scope 0 at ui/traits/monad.rs:41:22: 41:38
    let mut _57: &str;                   // in scope 0 at ui/traits/monad.rs:41:22: 41:38
    let _58: &str;                       // in scope 0 at ui/traits/monad.rs:41:22: 41:26
    let mut _59: [closure@ui/traits/monad.rs:42:15: 42:18]; // in scope 0 at ui/traits/monad.rs:42:15: 42:53
    let mut _60: [closure@ui/traits/monad.rs:43:15: 43:18]; // in scope 0 at ui/traits/monad.rs:43:15: 43:53
    let mut _61: &[std::string::String; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _62: [std::string::String; 4];   // in scope 0 at ui/traits/monad.rs:44:9: 47:29
    let mut _63: std::string::String;    // in scope 0 at ui/traits/monad.rs:44:10: 44:26
    let mut _64: &str;                   // in scope 0 at ui/traits/monad.rs:44:10: 44:26
    let _65: &str;                       // in scope 0 at ui/traits/monad.rs:44:10: 44:14
    let mut _66: std::string::String;    // in scope 0 at ui/traits/monad.rs:45:10: 45:27
    let mut _67: &str;                   // in scope 0 at ui/traits/monad.rs:45:10: 45:27
    let _68: &str;                       // in scope 0 at ui/traits/monad.rs:45:10: 45:15
    let mut _69: std::string::String;    // in scope 0 at ui/traits/monad.rs:46:10: 46:27
    let mut _70: &str;                   // in scope 0 at ui/traits/monad.rs:46:10: 46:27
    let _71: &str;                       // in scope 0 at ui/traits/monad.rs:46:10: 46:15
    let mut _72: std::string::String;    // in scope 0 at ui/traits/monad.rs:47:10: 47:28
    let mut _73: &str;                   // in scope 0 at ui/traits/monad.rs:47:10: 47:28
    let _74: &str;                       // in scope 0 at ui/traits/monad.rs:47:10: 47:16
    let _75: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _76: &[std::string::String; 4];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _77: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _78: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _79: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _80: &[std::string::String; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _82: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _83: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _84: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _85: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _86: &[std::string::String; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _87: &[std::string::String; 4];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _89: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _91: *const [std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
    }
    scope 6 {
        debug left_val => _75;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _76;          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _81: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 7 {
            debug kind => _81;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = Option::<isize>::Some(const 10_isize); // scope 0 at ui/traits/monad.rs:39:26: 39:34
        _3 = transform(move _4) -> bb1;  // scope 0 at ui/traits/monad.rs:39:16: 39:35
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:39:16: 39:25
                                         // + literal: Const { ty: fn(Option<isize>) -> Option<String> {transform}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = const "11";                 // scope 0 at ui/traits/monad.rs:39:42: 39:46
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:39:42: 39:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/traits/monad.rs:39:42: 39:58
        _7 = <str as ToString>::to_string(move _8) -> [return: bb2, unwind: bb38]; // scope 0 at ui/traits/monad.rs:39:42: 39:58
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:39:47: 39:56
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Option::<String>::Some(move _7); // scope 0 at ui/traits/monad.rs:39:37: 39:59
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_1.0: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_1.1: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = <Option<String> as PartialEq>::eq(move _14, move _15) -> [return: bb3, unwind: bb37]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<String>, &'b Option<String>) -> bool {<Option<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _18, move _19, move _21, move _23) -> bb37; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<String>, &'b Option<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<String>, Option<String>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_6) -> [return: bb6, unwind: bb38]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _27 = Option::<isize>::None;     // scope 0 at ui/traits/monad.rs:40:26: 40:30
        _26 = transform(move _27) -> bb8; // scope 0 at ui/traits/monad.rs:40:16: 40:31
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:40:16: 40:25
                                         // + literal: Const { ty: fn(Option<isize>) -> Option<String> {transform}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = &_26;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _89 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<String>, val: Unevaluated(main, [], Some(promoted[0])) }
        _28 = _89;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_24.0: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_24.1: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = <Option<String> as PartialEq>::eq(move _33, move _34) -> [return: bb9, unwind: bb36]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<String>, &'b Option<String>) -> bool {<Option<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _37, move _38, move _40, move _42) -> bb36; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<String>, &'b Option<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<String>, Option<String>>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_26) -> bb12;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12: {
        _52 = const 24_usize;            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _53 = const 8_usize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _54 = alloc::alloc::exchange_malloc(move _52, move _53) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb13: {
        _55 = ShallowInitBox(move _54, [std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _58 = const "hi";                // scope 0 at ui/traits/monad.rs:41:22: 41:26
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:41:22: 41:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _57 = _58;                       // scope 0 at ui/traits/monad.rs:41:22: 41:38
        _56 = <str as ToString>::to_string(move _57) -> [return: bb14, unwind: bb40]; // scope 0 at ui/traits/monad.rs:41:22: 41:38
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:41:27: 41:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb14: {
        _91 = (((_55.0: std::ptr::Unique<[std::string::String; 1]>).0: std::ptr::NonNull<[std::string::String; 1]>).0: *const [std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_91) = [move _56];             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _51 = move _55;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _50 = move _51 as std::boxed::Box<[std::string::String]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _49 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _50) -> bb15; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[String]>) -> Vec<String> {slice::<impl [String]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb15: {
        _48 = &_49;                      // scope 0 at ui/traits/monad.rs:41:16: 42:55
        _47 = <Vec<String> as vec_monad<String>>::bind::<String, [closure@ui/traits/monad.rs:42:15: 42:18]>(move _48, move _59) -> [return: bb16, unwind: bb35]; // scope 0 at ui/traits/monad.rs:41:16: 42:55
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:42:10: 42:14
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, [closure@ui/traits/monad.rs:42:15: 42:18]) -> Vec<String> {<Vec<String> as vec_monad<String>>::bind::<String, [closure@ui/traits/monad.rs:42:15: 42:18]>}, val: Value(<ZST>) }
    }

    bb16: {
        _46 = &_47;                      // scope 0 at ui/traits/monad.rs:41:16: 43:55
        _45 = <Vec<String> as vec_monad<String>>::bind::<String, [closure@ui/traits/monad.rs:43:15: 43:18]>(move _46, move _60) -> [return: bb17, unwind: bb34]; // scope 0 at ui/traits/monad.rs:41:16: 43:55
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:43:10: 43:14
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, [closure@ui/traits/monad.rs:43:15: 43:18]) -> Vec<String> {<Vec<String> as vec_monad<String>>::bind::<String, [closure@ui/traits/monad.rs:43:15: 43:18]>}, val: Value(<ZST>) }
    }

    bb17: {
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = const "hi";                // scope 0 at ui/traits/monad.rs:44:10: 44:14
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:44:10: 44:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _64 = _65;                       // scope 0 at ui/traits/monad.rs:44:10: 44:26
        _63 = <str as ToString>::to_string(move _64) -> [return: bb18, unwind: bb33]; // scope 0 at ui/traits/monad.rs:44:10: 44:26
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:44:15: 44:24
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb18: {
        _68 = const "hi?";               // scope 0 at ui/traits/monad.rs:45:10: 45:15
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:45:10: 45:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _67 = _68;                       // scope 0 at ui/traits/monad.rs:45:10: 45:27
        _66 = <str as ToString>::to_string(move _67) -> [return: bb19, unwind: bb32]; // scope 0 at ui/traits/monad.rs:45:10: 45:27
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:45:16: 45:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb19: {
        _71 = const "hi!";               // scope 0 at ui/traits/monad.rs:46:10: 46:15
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:46:10: 46:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _70 = _71;                       // scope 0 at ui/traits/monad.rs:46:10: 46:27
        _69 = <str as ToString>::to_string(move _70) -> [return: bb20, unwind: bb31]; // scope 0 at ui/traits/monad.rs:46:10: 46:27
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:46:16: 46:25
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb20: {
        _74 = const "hi!?";              // scope 0 at ui/traits/monad.rs:47:10: 47:16
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:47:10: 47:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _73 = _74;                       // scope 0 at ui/traits/monad.rs:47:10: 47:28
        _72 = <str as ToString>::to_string(move _73) -> [return: bb21, unwind: bb30]; // scope 0 at ui/traits/monad.rs:47:10: 47:28
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:47:17: 47:26
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb21: {
        _62 = [move _63, move _66, move _69, move _72]; // scope 0 at ui/traits/monad.rs:44:9: 47:29
        _61 = &_62;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _61);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _75 = (_43.0: &std::vec::Vec<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _76 = (_43.1: &[std::string::String; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _79 = _75;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _80 = _76;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _78 = <Vec<String> as PartialEq<[String; 4]>>::eq(move _79, move _80) -> [return: bb22, unwind: bb29]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<String>, &'b [String; 4]) -> bool {<Vec<String> as PartialEq<[String; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _77 = Not(move _78);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _77) -> [0: bb24, otherwise: bb23]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _81 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _83 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _85 = _75;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _84 = _85;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _87 = _76;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _86 = _87;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _88 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _82 = core::panicking::assert_failed::<Vec<String>, [String; 4]>(move _83, move _84, move _86, move _88) -> bb29; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<String>, &'b [String; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<String>, [String; 4]>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_62) -> [return: bb25, unwind: bb33]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        drop(_45) -> [return: bb26, unwind: bb34]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        drop(_47) -> [return: bb27, unwind: bb35]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        drop(_49) -> bb28;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28: {
        return;                          // scope 0 at ui/traits/monad.rs:48:2: 48:2
    }

    bb29 (cleanup): {
        drop(_62) -> bb33;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_69) -> bb31;               // scope 0 at ui/traits/monad.rs:47:28: 47:29
    }

    bb31 (cleanup): {
        drop(_66) -> bb32;               // scope 0 at ui/traits/monad.rs:47:28: 47:29
    }

    bb32 (cleanup): {
        drop(_63) -> bb33;               // scope 0 at ui/traits/monad.rs:47:28: 47:29
    }

    bb33 (cleanup): {
        drop(_45) -> bb34;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34 (cleanup): {
        drop(_47) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35 (cleanup): {
        drop(_49) -> bb39;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb36 (cleanup): {
        drop(_26) -> bb39;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb37 (cleanup): {
        drop(_6) -> bb38;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb38 (cleanup): {
        drop(_3) -> bb39;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb39 (cleanup): {
        resume;                          // scope 0 at ui/traits/monad.rs:38:1: 48:2
    }

    bb40 (cleanup): {
        _90 = alloc::alloc::box_free::<[String; 1], std::alloc::Global>(move (_55.0: std::ptr::Unique<[std::string::String; 1]>), move (_55.1: std::alloc::Global)) -> bb39; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 1], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &Option<String> = {
    let mut _0: &std::option::Option<std::string::String>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<std::string::String>; // in scope 0 at ui/traits/monad.rs:40:33: 40:37

    bb0: {
        _1 = Option::<String>::None;     // scope 0 at ui/traits/monad.rs:40:33: 40:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/traits/monad.rs:42:15: 42:18], _2: &String) -> Vec<String> {
    debug x => _2;                       // in scope 0 at ui/traits/monad.rs:42:16: 42:17
    let mut _0: std::vec::Vec<std::string::String>; // return place in scope 0 at ui/traits/monad.rs:42:19: 42:19
    let mut _3: std::boxed::Box<[std::string::String]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[std::string::String; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[std::string::String; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::string::String;     // in scope 0 at ui/traits/monad.rs:42:24: 42:33
    let mut _10: &std::string::String;   // in scope 0 at ui/traits/monad.rs:42:24: 42:33
    let mut _11: std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _12: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _14: &[&str];                // in scope 0 at ui/traits/monad.rs:42:43: 42:48
    let mut _15: &[&str; 2];             // in scope 0 at ui/traits/monad.rs:42:43: 42:48
    let _16: &[&str; 2];                 // in scope 0 at ui/traits/monad.rs:42:43: 42:48
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _18: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _20: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/monad.rs:42:50: 42:51
    let mut _22: &&std::string::String;  // in scope 0 at ui/traits/monad.rs:42:50: 42:51
    let _23: &&std::string::String;      // in scope 0 at ui/traits/monad.rs:42:50: 42:51
    let mut _24: &[&str; 2];             // in scope 0 at ui/traits/monad.rs:42:43: 42:48
    let mut _25: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _26: *const [std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
        debug res => _12;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _5 = const 48_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = _2;                        // scope 0 at ui/traits/monad.rs:42:24: 42:33
        _9 = <String as Clone>::clone(move _10) -> [return: bb2, unwind: bb9]; // scope 0 at ui/traits/monad.rs:42:24: 42:33
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:42:26: 42:31
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _24 = const _;                   // scope 0 at ui/traits/monad.rs:42:43: 42:48
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:42:43: 42:48
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _16 = _24;                       // scope 0 at ui/traits/monad.rs:42:43: 42:48
        _15 = _16;                       // scope 0 at ui/traits/monad.rs:42:43: 42:48
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/monad.rs:42:43: 42:48
        _23 = &_2;                       // scope 0 at ui/traits/monad.rs:42:50: 42:51
        _22 = _23;                       // scope 0 at ui/traits/monad.rs:42:50: 42:51
        _21 = core::fmt::ArgumentV1::<'_>::new_display::<&String>(move _22) -> [return: bb3, unwind: bb7]; // scope 0 at ui/traits/monad.rs:42:50: 42:51
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:42:50: 42:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&String>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = [move _21];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _19 = &_20;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _18 = _19;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _17 = move _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb4, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = format(move _13) -> [return: bb5, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = move _12;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _26 = (((_8.0: std::ptr::Unique<[std::string::String; 2]>).0: std::ptr::NonNull<[std::string::String; 2]>).0: *const [std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_26) = [move _9, move _11];    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[std::string::String]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _0 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _3) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[String]>) -> Vec<String> {slice::<impl [String]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/traits/monad.rs:42:53: 42:53
    }

    bb7 (cleanup): {
        drop(_9) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/traits/monad.rs:42:15: 42:53
    }

    bb9 (cleanup): {
        _25 = alloc::alloc::box_free::<[String; 2], std::alloc::Global>(move (_8.0: std::ptr::Unique<[std::string::String; 2]>), move (_8.1: std::alloc::Global)) -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/monad.rs:42:43: 42:48
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/monad.rs:42:43: 42:48

    bb0: {
        _1 = [const "", const "!"];      // scope 0 at ui/traits/monad.rs:42:43: 42:48
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:42:43: 42:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:42:43: 42:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/monad.rs:42:43: 42:48
        return;                          // scope 0 at ui/traits/monad.rs:42:43: 42:48
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/traits/monad.rs:43:15: 43:18], _2: &String) -> Vec<String> {
    debug x => _2;                       // in scope 0 at ui/traits/monad.rs:43:16: 43:17
    let mut _0: std::vec::Vec<std::string::String>; // return place in scope 0 at ui/traits/monad.rs:43:19: 43:19
    let mut _3: std::boxed::Box<[std::string::String]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[std::string::String; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[std::string::String; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: std::string::String;     // in scope 0 at ui/traits/monad.rs:43:24: 43:33
    let mut _10: &std::string::String;   // in scope 0 at ui/traits/monad.rs:43:24: 43:33
    let mut _11: std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _12: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _14: &[&str];                // in scope 0 at ui/traits/monad.rs:43:43: 43:48
    let mut _15: &[&str; 2];             // in scope 0 at ui/traits/monad.rs:43:43: 43:48
    let _16: &[&str; 2];                 // in scope 0 at ui/traits/monad.rs:43:43: 43:48
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _18: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _20: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/monad.rs:43:50: 43:51
    let mut _22: &&std::string::String;  // in scope 0 at ui/traits/monad.rs:43:50: 43:51
    let _23: &&std::string::String;      // in scope 0 at ui/traits/monad.rs:43:50: 43:51
    let mut _24: &[&str; 2];             // in scope 0 at ui/traits/monad.rs:43:43: 43:48
    let mut _25: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _26: *const [std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
        debug res => _12;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _5 = const 48_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = _2;                        // scope 0 at ui/traits/monad.rs:43:24: 43:33
        _9 = <String as Clone>::clone(move _10) -> [return: bb2, unwind: bb9]; // scope 0 at ui/traits/monad.rs:43:24: 43:33
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:43:26: 43:31
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _24 = const _;                   // scope 0 at ui/traits/monad.rs:43:43: 43:48
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:43:43: 43:48
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _16 = _24;                       // scope 0 at ui/traits/monad.rs:43:43: 43:48
        _15 = _16;                       // scope 0 at ui/traits/monad.rs:43:43: 43:48
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/monad.rs:43:43: 43:48
        _23 = &_2;                       // scope 0 at ui/traits/monad.rs:43:50: 43:51
        _22 = _23;                       // scope 0 at ui/traits/monad.rs:43:50: 43:51
        _21 = core::fmt::ArgumentV1::<'_>::new_display::<&String>(move _22) -> [return: bb3, unwind: bb7]; // scope 0 at ui/traits/monad.rs:43:50: 43:51
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:43:50: 43:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&String>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = [move _21];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _19 = &_20;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _18 = _19;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _17 = move _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb4, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = format(move _13) -> [return: bb5, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = move _12;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _26 = (((_8.0: std::ptr::Unique<[std::string::String; 2]>).0: std::ptr::NonNull<[std::string::String; 2]>).0: *const [std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_26) = [move _9, move _11];    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[std::string::String]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _0 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _3) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[String]>) -> Vec<String> {slice::<impl [String]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/traits/monad.rs:43:53: 43:53
    }

    bb7 (cleanup): {
        drop(_9) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/traits/monad.rs:43:15: 43:53
    }

    bb9 (cleanup): {
        _25 = alloc::alloc::box_free::<[String; 2], std::alloc::Global>(move (_8.0: std::ptr::Unique<[std::string::String; 2]>), move (_8.1: std::alloc::Global)) -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/monad.rs:43:43: 43:48
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/monad.rs:43:43: 43:48

    bb0: {
        _1 = [const "", const "?"];      // scope 0 at ui/traits/monad.rs:43:43: 43:48
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:43:43: 43:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/monad.rs:43:43: 43:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/monad.rs:43:43: 43:48
        return;                          // scope 0 at ui/traits/monad.rs:43:43: 43:48
    }
}
