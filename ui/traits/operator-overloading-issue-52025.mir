// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21>::fmt(_1: &F32x4, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
    debug f => _2;                       // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
    let mut _4: &str;                    // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
    let _5: &str;                        // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
    let mut _7: &&std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
    let _8: &&std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
    let _9: &std::arch::x86_64::__m128;  // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
        _5 = const "F32x4";              // scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
        _9 = &((*_1).0: std::arch::x86_64::__m128); // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
        _8 = &_9;                        // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
        _7 = _8;                         // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:18: 16:28
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:15:16: 15:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:21: 15:21
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:15:23: 15:28>::clone(_1: &F32x4) -> F32x4 {
    debug self => _1;                    // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:23: 15:28
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:23: 15:28
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/traits/operator-overloading-issue-52025.rs:15:23: 15:28
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:15:28: 15:28
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:18:1: 18:26>::add(_1: F32x4, _2: F32x4) -> F32x4 {
    debug self => _1;                    // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:21:12: 21:16
    debug rhs => _2;                     // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:21:18: 21:21
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:21:33: 21:38
    let mut _3: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:22:15: 22:51
    let mut _4: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:22:35: 22:41
    let mut _5: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:22:43: 22:48
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: std::arch::x86_64::__m128); // scope 1 at ui/traits/operator-overloading-issue-52025.rs:22:35: 22:41
        _5 = (_2.0: std::arch::x86_64::__m128); // scope 1 at ui/traits/operator-overloading-issue-52025.rs:22:43: 22:48
        _3 = std::arch::x86_64::_mm_add_ps(move _4, move _5) -> bb1; // scope 1 at ui/traits/operator-overloading-issue-52025.rs:22:24: 22:49
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:22:24: 22:34
                                         // + literal: Const { ty: unsafe fn(std::arch::x86_64::__m128, std::arch::x86_64::__m128) -> std::arch::x86_64::__m128 {std::arch::x86_64::_mm_add_ps}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = F32x4(move _3);             // scope 0 at ui/traits/operator-overloading-issue-52025.rs:22:9: 22:52
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:23:6: 23:6
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:26:1: 26:24>::add(_1: F32x4, _2: f32) -> F32x4 {
    debug self => _1;                    // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:28:12: 28:16
    debug rhs => _2;                     // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:28:18: 28:21
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:28:31: 28:36
    let mut _3: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:29:15: 29:62
    let mut _4: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:29:35: 29:41
    let mut _5: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:29:43: 29:59
    let mut _6: f32;                     // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:29:55: 29:58
    scope 1 {
    }

    bb0: {
        _4 = (_1.0: std::arch::x86_64::__m128); // scope 1 at ui/traits/operator-overloading-issue-52025.rs:29:35: 29:41
        _6 = _2;                         // scope 1 at ui/traits/operator-overloading-issue-52025.rs:29:55: 29:58
        _5 = std::arch::x86_64::_mm_set1_ps(move _6) -> bb1; // scope 1 at ui/traits/operator-overloading-issue-52025.rs:29:43: 29:59
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:29:43: 29:54
                                         // + literal: Const { ty: unsafe fn(f32) -> std::arch::x86_64::__m128 {std::arch::x86_64::_mm_set1_ps}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = std::arch::x86_64::_mm_add_ps(move _4, move _5) -> bb2; // scope 1 at ui/traits/operator-overloading-issue-52025.rs:29:24: 29:60
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:29:24: 29:34
                                         // + literal: Const { ty: unsafe fn(std::arch::x86_64::__m128, std::arch::x86_64::__m128) -> std::arch::x86_64::__m128 {std::arch::x86_64::_mm_add_ps}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = F32x4(move _3);             // scope 0 at ui/traits/operator-overloading-issue-52025.rs:29:9: 29:63
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:30:6: 30:6
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:34:1: 34:19>::set1_ps(_1: f32) -> F32x4 {
    debug a => _1;                       // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:38:23: 38:24
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:38:34: 38:44
    let mut _2: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:39:15: 39:29
    let mut _3: f32;                     // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:39:27: 39:28

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/operator-overloading-issue-52025.rs:39:27: 39:28
        _2 = std::arch::x86_64::_mm_set1_ps(move _3) -> bb1; // scope 0 at ui/traits/operator-overloading-issue-52025.rs:39:15: 39:29
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:39:15: 39:26
                                         // + literal: Const { ty: unsafe fn(f32) -> std::arch::x86_64::__m128 {std::arch::x86_64::_mm_set1_ps}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = F32x4(move _2);             // scope 0 at ui/traits/operator-overloading-issue-52025.rs:39:9: 39:30
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:40:6: 40:6
    }
}

fn <impl at ui/traits/operator-overloading-issue-52025.rs:34:1: 34:19>::add_ps(_1: F32x4, _2: F32x4) -> F32x4 {
    debug a => _1;                       // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:43:22: 43:23
    debug b => _2;                       // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:43:37: 43:38
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:43:55: 43:65
    let mut _3: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:15: 44:35
    let mut _4: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:26: 44:29
    let mut _5: std::arch::x86_64::__m128; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:31: 44:34

    bb0: {
        _4 = (_1.0: std::arch::x86_64::__m128); // scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:26: 44:29
        _5 = (_2.0: std::arch::x86_64::__m128); // scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:31: 44:34
        _3 = std::arch::x86_64::_mm_add_ps(move _4, move _5) -> bb1; // scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:15: 44:35
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:44:15: 44:25
                                         // + literal: Const { ty: unsafe fn(std::arch::x86_64::__m128, std::arch::x86_64::__m128) -> std::arch::x86_64::__m128 {std::arch::x86_64::_mm_add_ps}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = F32x4(move _3);             // scope 0 at ui/traits/operator-overloading-issue-52025.rs:44:9: 44:36
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:45:6: 45:6
    }
}

fn test() -> <S as Simd>::Vf32 {
    let _1: <S as Simd>::Vf32;           // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:49:9: 49:10
    let mut _3: <S as Simd>::Vf32;       // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:51:18: 51:19
    let mut _4: <S as Simd>::Vf32;       // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:51:22: 51:23
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/traits/operator-overloading-issue-52025.rs:49:9: 49:10
        let _2: <S as Simd>::Vf32;       // in scope 1 at ui/traits/operator-overloading-issue-52025.rs:50:9: 50:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/traits/operator-overloading-issue-52025.rs:50:9: 50:10
            let mut _0: <S as Simd>::Vf32; // return place in scope 2 at ui/traits/operator-overloading-issue-52025.rs:51:9: 51:15
            scope 3 {
                debug result => _0;      // in scope 3 at ui/traits/operator-overloading-issue-52025.rs:51:9: 51:15
            }
        }
    }

    bb0: {
        _1 = <S as Simd>::set1_ps(const 3f32) -> bb1; // scope 0 at ui/traits/operator-overloading-issue-52025.rs:49:13: 49:28
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:49:13: 49:23
                                         // + literal: Const { ty: unsafe fn(f32) -> <S as Simd>::Vf32 {<S as Simd>::set1_ps}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <S as Simd>::set1_ps(const 2f32) -> bb2; // scope 1 at ui/traits/operator-overloading-issue-52025.rs:50:13: 50:28
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:50:13: 50:23
                                         // + literal: Const { ty: unsafe fn(f32) -> <S as Simd>::Vf32 {<S as Simd>::set1_ps}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _1;                         // scope 2 at ui/traits/operator-overloading-issue-52025.rs:51:18: 51:19
        _4 = _2;                         // scope 2 at ui/traits/operator-overloading-issue-52025.rs:51:22: 51:23
        _0 = <<S as Simd>::Vf32 as std::ops::Add>::add(move _3, move _4) -> bb3; // scope 2 at ui/traits/operator-overloading-issue-52025.rs:51:18: 51:23
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:51:18: 51:23
                                         // + literal: Const { ty: fn(<S as Simd>::Vf32, <S as Simd>::Vf32) -> <<S as Simd>::Vf32 as std::ops::Add>::Output {<<S as Simd>::Vf32 as std::ops::Add>::add}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:53:2: 53:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:55:11: 55:11
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
    let mut _4: &[&str; 2];              // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
    let _5: &[&str; 2];                  // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
    let mut _11: &F32x4;                 // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
    let _12: &F32x4;                     // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
    let _13: F32x4;                      // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
    let mut _14: &[&str; 2];             // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
    scope 1 {
    }

    bb0: {
        _14 = const _;                   // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _14;                        // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
        _4 = _5;                         // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
        _13 = test::<Sse2>() -> bb1;     // scope 1 at ui/traits/operator-overloading-issue-52025.rs:56:31: 56:45
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:56:31: 56:43
                                         // + literal: Const { ty: unsafe fn() -> <Sse2 as Simd>::Vf32 {test::<Sse2>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = &_13;                      // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
        _11 = _12;                       // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<F32x4>(move _11) -> bb2; // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:56:22: 56:47
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b F32x4) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<F32x4>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = _print(move _2) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:57:2: 57:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:56:14: 56:20
    }
}

fn F32x4(_1: std::arch::x86_64::__m128) -> F32x4 {
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:1: 16:17

    bb0: {
        _0 = F32x4(move _1);             // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:1: 16:17
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:1: 16:17
    }
}

// MIR FOR CTFE
fn F32x4(_1: std::arch::x86_64::__m128) -> F32x4 {
    let mut _0: F32x4;                   // return place in scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:1: 16:17

    bb0: {
        _0 = F32x4(move _1);             // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:1: 16:17
        return;                          // scope 0 at ui/traits/operator-overloading-issue-52025.rs:16:1: 16:17
    }
}
