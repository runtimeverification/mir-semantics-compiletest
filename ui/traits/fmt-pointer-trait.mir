// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: *const u8;
    let mut _5: std::string::String;
    let mut _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 3];
    let _11: [core::fmt::rt::Argument<'_>; 3];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &std::rc::Rc<usize>;
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::sync::Arc<usize>;
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &std::boxed::Box<&str>;
    let mut _18: bool;
    let mut _19: (&std::string::String, &&str);
    let mut _20: &std::string::String;
    let _21: std::string::String;
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &*const u8;
    let mut _30: &[core::fmt::rt::Placeholder];
    let _31: &[core::fmt::rt::Placeholder; 1];
    let _32: [core::fmt::rt::Placeholder; 1];
    let mut _33: core::fmt::rt::Placeholder;
    let mut _34: core::fmt::rt::Alignment;
    let mut _35: core::fmt::rt::Count;
    let mut _36: core::fmt::rt::Count;
    let mut _37: core::fmt::rt::UnsafeArg;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&std::string::String, &&str);
    let mut _46: &std::string::String;
    let _47: std::string::String;
    let mut _49: std::fmt::Arguments<'_>;
    let mut _50: &[&str];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let _55: &*const u8;
    let mut _56: &[core::fmt::rt::Placeholder];
    let _57: &[core::fmt::rt::Placeholder; 1];
    let _58: [core::fmt::rt::Placeholder; 1];
    let mut _59: core::fmt::rt::Placeholder;
    let mut _60: core::fmt::rt::Alignment;
    let mut _61: core::fmt::rt::Count;
    let mut _62: core::fmt::rt::Count;
    let mut _63: core::fmt::rt::UnsafeArg;
    let mut _66: bool;
    let mut _67: bool;
    let _69: !;
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _71: (&std::string::String, &&str);
    let mut _72: &std::string::String;
    let _73: std::string::String;
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let _81: &*const u8;
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug p => _1;
        let _2: std::rc::Rc<usize>;
        scope 2 {
            debug rc => _2;
            let _3: std::sync::Arc<usize>;
            scope 3 {
                debug arc => _3;
                let _4: std::boxed::Box<&str>;
                scope 4 {
                    debug b => _4;
                    let _6: std::string::String;
                    let mut _95: &[&str; 3];
                    scope 5 {
                        let _22: std::string::String;
                        let _38: &std::string::String;
                        let _39: &&str;
                        let _48: std::string::String;
                        let _64: &std::string::String;
                        let _65: &&str;
                        let _74: std::string::String;
                        let _82: &std::string::String;
                        let _83: &&str;
                        let mut _89: &&str;
                        let mut _90: &[&str; 1];
                        let mut _91: &&str;
                        let mut _92: &[&str; 1];
                        let mut _93: &&str;
                        let mut _94: &[&str; 1];
                        scope 7 {
                            debug res => _22;
                        }
                        scope 8 {
                        }
                        scope 9 {
                            debug left_val => _38;
                            debug right_val => _39;
                            let _42: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _42;
                            }
                        }
                        scope 11 {
                            debug res => _48;
                        }
                        scope 12 {
                        }
                        scope 13 {
                            debug left_val => _64;
                            debug right_val => _65;
                            let _68: core::panicking::AssertKind;
                            scope 14 {
                                debug kind => _68;
                            }
                        }
                        scope 15 {
                            debug res => _74;
                        }
                        scope 16 {
                            debug left_val => _82;
                            debug right_val => _83;
                            let _86: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _86;
                            }
                        }
                    }
                    scope 6 {
                        debug res => _6;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = null::<u8>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Rc::<usize>::new(const 1_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Arc::<usize>::new(const 1_usize) -> [return: bb3, unwind: bb45];
    }

    bb3: {
        _4 = Box::<&str>::new(const "hi") -> [return: bb4, unwind: bb44];
    }

    bb4: {
        _95 = const _;
        _8 = _95 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_pointer::<Rc<usize>>(_13) -> [return: bb5, unwind: bb43];
    }

    bb5: {
        _15 = &_3;
        _14 = core::fmt::rt::Argument::<'_>::new_pointer::<Arc<usize>>(_15) -> [return: bb6, unwind: bb43];
    }

    bb6: {
        _17 = &_4;
        _16 = core::fmt::rt::Argument::<'_>::new_pointer::<Box<&str>>(_17) -> [return: bb7, unwind: bb43];
    }

    bb7: {
        _11 = [move _12, move _14, move _16];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb8, unwind: bb43];
    }

    bb8: {
        _6 = format(move _7) -> [return: bb9, unwind: bb43];
    }

    bb9: {
        _5 = move _6;
        drop(_5) -> [return: bb10, unwind: bb43];
    }

    bb10: {
        _18 = const false;
        switchInt(move _18) -> [0: bb20, otherwise: bb11];
    }

    bb11: {
        _92 = const _;
        _24 = _92 as &[&str] (Pointer(Unsize));
        _29 = &_1;
        _28 = core::fmt::rt::Argument::<'_>::new_pointer::<*const u8>(_29) -> [return: bb12, unwind: bb43];
    }

    bb12: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _34 = core::fmt::rt::Alignment::Unknown;
        _35 = core::fmt::rt::Count::Implied;
        _36 = core::fmt::rt::Count::Implied;
        _33 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _34, const 4_u32, move _35, move _36) -> [return: bb13, unwind: bb43];
    }

    bb13: {
        _32 = [move _33];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _37 = core::fmt::rt::UnsafeArg::new() -> [return: bb14, unwind: bb43];
    }

    bb14: {
        _23 = Arguments::<'_>::new_v1_formatted(move _24, move _25, move _30, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb15, unwind: bb43];
    }

    bb15: {
        _22 = format(move _23) -> [return: bb16, unwind: bb43];
    }

    bb16: {
        _21 = move _22;
        _20 = &_21;
        _91 = const _;
        _19 = (move _20, _91);
        _38 = (_19.0: &std::string::String);
        _39 = (_19.1: &&str);
        _41 = <String as PartialEq<&str>>::eq(_38, _39) -> [return: bb17, unwind: bb42];
    }

    bb17: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<String, &str>(move _42, _38, _39, move _44) -> bb42;
    }

    bb19: {
        drop(_21) -> [return: bb29, unwind: bb43];
    }

    bb20: {
        _94 = const _;
        _50 = _94 as &[&str] (Pointer(Unsize));
        _55 = &_1;
        _54 = core::fmt::rt::Argument::<'_>::new_pointer::<*const u8>(_55) -> [return: bb21, unwind: bb43];
    }

    bb21: {
        _53 = [move _54];
        _52 = &_53;
        _51 = _52 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _60 = core::fmt::rt::Alignment::Unknown;
        _61 = core::fmt::rt::Count::Implied;
        _62 = core::fmt::rt::Count::Implied;
        _59 = core::fmt::rt::Placeholder::new(const 0_usize, const ' ', move _60, const 4_u32, move _61, move _62) -> [return: bb22, unwind: bb43];
    }

    bb22: {
        _58 = [move _59];
        _57 = &_58;
        _56 = _57 as &[core::fmt::rt::Placeholder] (Pointer(Unsize));
        _63 = core::fmt::rt::UnsafeArg::new() -> [return: bb23, unwind: bb43];
    }

    bb23: {
        _49 = Arguments::<'_>::new_v1_formatted(move _50, move _51, move _56, const core::fmt::rt::UnsafeArg {{ _private: () }}) -> [return: bb24, unwind: bb43];
    }

    bb24: {
        _48 = format(move _49) -> [return: bb25, unwind: bb43];
    }

    bb25: {
        _47 = move _48;
        _46 = &_47;
        _93 = const _;
        _45 = (move _46, _93);
        _64 = (_45.0: &std::string::String);
        _65 = (_45.1: &&str);
        _67 = <String as PartialEq<&str>>::eq(_64, _65) -> [return: bb26, unwind: bb41];
    }

    bb26: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _68 = core::panicking::AssertKind::Eq;
        _70 = Option::<Arguments<'_>>::None;
        _69 = core::panicking::assert_failed::<String, &str>(move _68, _64, _65, move _70) -> bb41;
    }

    bb28: {
        drop(_47) -> [return: bb29, unwind: bb43];
    }

    bb29: {
        _90 = const _;
        _76 = _90 as &[&str] (Pointer(Unsize));
        _81 = &_1;
        _80 = core::fmt::rt::Argument::<'_>::new_pointer::<*const u8>(_81) -> [return: bb30, unwind: bb43];
    }

    bb30: {
        _79 = [move _80];
        _78 = &_79;
        _77 = _78 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _75 = Arguments::<'_>::new_v1(move _76, move _77) -> [return: bb31, unwind: bb43];
    }

    bb31: {
        _74 = format(move _75) -> [return: bb32, unwind: bb43];
    }

    bb32: {
        _73 = move _74;
        _72 = &_73;
        _89 = const _;
        _71 = (move _72, _89);
        _82 = (_71.0: &std::string::String);
        _83 = (_71.1: &&str);
        _85 = <String as PartialEq<&str>>::eq(_82, _83) -> [return: bb33, unwind: bb40];
    }

    bb33: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb35, otherwise: bb34];
    }

    bb34: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<String, &str>(move _86, _82, _83, move _88) -> bb40;
    }

    bb35: {
        drop(_73) -> [return: bb36, unwind: bb43];
    }

    bb36: {
        drop(_4) -> [return: bb37, unwind: bb44];
    }

    bb37: {
        drop(_3) -> [return: bb38, unwind: bb45];
    }

    bb38: {
        drop(_2) -> [return: bb39, unwind continue];
    }

    bb39: {
        return;
    }

    bb40 (cleanup): {
        drop(_73) -> [return: bb43, unwind terminate];
    }

    bb41 (cleanup): {
        drop(_47) -> [return: bb43, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_21) -> [return: bb43, unwind terminate];
    }

    bb43 (cleanup): {
        drop(_4) -> [return: bb44, unwind terminate];
    }

    bb44 (cleanup): {
        drop(_3) -> [return: bb45, unwind terminate];
    }

    bb45 (cleanup): {
        drop(_2) -> [return: bb46, unwind terminate];
    }

    bb46 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "0x0";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "0x00000000";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "0x0000000000000000";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const "", const ""];
        _0 = &_1;
        return;
    }
}
