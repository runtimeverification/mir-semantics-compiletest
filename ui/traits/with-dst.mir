// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/traits/with-dst.rs:12:1: 12:55>::VTABLE: &VTable<DST> = {
    let mut _0: &VTable<DST>;            // return place in scope 0 at ui/traits/with-dst.rs:13:19: 13:39
    let _1: &VTable<DST>;                // in scope 0 at ui/traits/with-dst.rs:13:42: 15:6
    let _2: VTable<DST>;                 // in scope 0 at ui/traits/with-dst.rs:13:43: 15:6
    let mut _3: fn(*mut ()) -> *mut DST; // in scope 0 at ui/traits/with-dst.rs:14:22: 14:64
    let mut _4: [closure@ui/traits/with-dst.rs:14:22: 14:34]; // in scope 0 at ui/traits/with-dst.rs:14:22: 14:64
    let mut _5: &VTable<DST>;            // in scope 0 at ui/traits/with-dst.rs:13:42: 15:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/traits/with-dst.rs:13:42: 15:6
        _5 = const _;                    // scope 0 at ui/traits/with-dst.rs:13:42: 15:6
                                         // mir::Constant
                                         // + span: ui/traits/with-dst.rs:13:42: 15:6
                                         // + literal: Const { ty: &VTable<DST>, val: Unevaluated(<T as HasVTableFor<DST>>::VTABLE, [T, DST], Some(promoted[0])) }
        _1 = &(*_5);                     // scope 0 at ui/traits/with-dst.rs:13:42: 15:6
        _0 = &(*_1);                     // scope 0 at ui/traits/with-dst.rs:13:42: 15:6
        StorageDead(_1);                 // scope 0 at ui/traits/with-dst.rs:15:5: 15:6
        return;                          // scope 0 at ui/traits/with-dst.rs:13:5: 15:7
    }
}

promoted[0] in <impl at ui/traits/with-dst.rs:12:1: 12:55>::VTABLE: &VTable<DST> = {
    let mut _0: &VTable<DST>;            // return place in scope 0 at ui/traits/with-dst.rs:13:42: 15:6
    let mut _1: VTable<DST>;             // in scope 0 at ui/traits/with-dst.rs:13:43: 15:6
    let mut _2: fn(*mut ()) -> *mut DST; // in scope 0 at ui/traits/with-dst.rs:14:22: 14:64
    let mut _3: [closure@ui/traits/with-dst.rs:14:22: 14:34]; // in scope 0 at ui/traits/with-dst.rs:14:22: 14:64

    bb0: {
        _3 = [closure@ui/traits/with-dst.rs:14:22: 14:34]; // scope 0 at ui/traits/with-dst.rs:14:22: 14:64
                                         // closure
                                         // + def_id: DefId(0:13 ~ with_dst[11a8]::{impl#0}::VTABLE::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     DST,
                                         //     i8,
                                         //     extern "rust-call" fn((*mut (),)) -> *mut DST,
                                         //     (),
                                         // ]
        _2 = move _3 as fn(*mut ()) -> *mut DST (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/traits/with-dst.rs:14:22: 14:64
        _1 = VTable::<DST> { _to_dst_ptr: move _2 }; // scope 0 at ui/traits/with-dst.rs:13:43: 15:6
        _0 = &_1;                        // scope 0 at ui/traits/with-dst.rs:13:42: 15:6
        return;                          // scope 0 at ui/traits/with-dst.rs:13:42: 15:6
    }
}

fn <impl at ui/traits/with-dst.rs:12:1: 12:55>::VTABLE::{closure#0}(_1: &[closure@ui/traits/with-dst.rs:14:22: 14:34], _2: *mut ()) -> *mut DST {
    let mut _0: *mut DST;                // return place in scope 0 at ui/traits/with-dst.rs:14:35: 14:35
    scope 1 {
    }

    bb0: {
        _0 = zeroed::<*mut DST>() -> bb1; // scope 1 at ui/traits/with-dst.rs:14:44: 14:62
                                         // mir::Constant
                                         // + span: ui/traits/with-dst.rs:14:44: 14:60
                                         // + literal: Const { ty: unsafe fn() -> *mut DST {zeroed::<*mut DST>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/with-dst.rs:14:64: 14:64
    }
}

fn push() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/with-dst.rs:18:41: 18:41

    bb0: {
        return;                          // scope 0 at ui/traits/with-dst.rs:20:2: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/with-dst.rs:22:11: 22:11

    bb0: {
        return;                          // scope 0 at ui/traits/with-dst.rs:22:13: 22:13
    }
}
