// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &dyn std::cmp::PartialEq<i32> + std::marker::Send + std::marker::Sync;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _6: std::boxed::Box<dyn std::cmp::PartialEq<i32> + std::marker::Send>;
    let mut _7: std::boxed::Box<i32>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &dyn std::cmp::PartialEq<i32> + std::marker::Send;
    let mut _11: !;
    let mut _13: &mut std::vec::IntoIter<i32>;
    let mut _14: std::vec::IntoIter<i32>;
    let mut _15: std::vec::Vec<i32>;
    let mut _16: std::boxed::Box<[i32]>;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: *mut u8;
    let mut _20: std::boxed::Box<[i32; 1]>;
    let mut _21: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _22: &std::option::Option<i32>;
    let _23: std::option::Option<i32>;
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: &i32;
    let mut _35: *const dyn std::cmp::PartialEq<i32> + std::marker::Send;
    let mut _36: *const [i32; 1];
    scope 1 {
        debug a => _1;
        let _5: std::boxed::Box<dyn std::cmp::PartialEq<i32> + std::marker::Send>;
        let mut _33: &i32;
        scope 2 {
            debug b => _5;
            let _12: &mut dyn std::iter::Iterator<Item = i32>;
            let mut _32: &i32;
            let mut _37: *const ();
            let mut _38: usize;
            let mut _39: usize;
            let mut _40: usize;
            let mut _41: usize;
            let mut _42: bool;
            scope 3 {
                debug c => _12;
                let _24: &std::option::Option<i32>;
                let _25: &std::option::Option<i32>;
                let mut _31: &std::option::Option<i32>;
                scope 5 {
                    debug left_val => _24;
                    debug right_val => _25;
                    let _28: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _28;
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _34 = const _;
        _1 = _34 as &dyn std::cmp::PartialEq<i32> + std::marker::Send + std::marker::Sync (Pointer(Unsize));
        _33 = const _;
        _3 = <dyn PartialEq<i32> + Send + Sync as PartialEq<i32>>::eq(_1, _33) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: *a == 123") -> unwind continue;
    }

    bb3: {
        _7 = Box::<i32>::new(const 456_i32) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = move _7 as std::boxed::Box<dyn std::cmp::PartialEq<i32> + std::marker::Send> (Pointer(Unsize));
        _5 = move _6;
        _35 = (((_5.0: std::ptr::Unique<dyn std::cmp::PartialEq<i32> + std::marker::Send>).0: std::ptr::NonNull<dyn std::cmp::PartialEq<i32> + std::marker::Send>).0: *const dyn std::cmp::PartialEq<i32> + std::marker::Send);
        _10 = &(*_35);
        _32 = const _;
        _9 = <dyn PartialEq<i32> + Send as PartialEq<i32>>::eq(move _10, _32) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _11 = core::panicking::panic(const "assertion failed: *b == 456") -> bb18;
    }

    bb7: {
        _17 = SizeOf([i32; 1]);
        _18 = AlignOf([i32; 1]);
        _19 = alloc::alloc::exchange_malloc(move _17, move _18) -> [return: bb8, unwind: bb18];
    }

    bb8: {
        _20 = ShallowInitBox(move _19, [i32; 1]);
        _36 = (((_20.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _37 = _36 as *const () (PtrToPtr);
        _38 = _37 as usize (Transmute);
        _39 = AlignOf(i32);
        _40 = Sub(_39, const 1_usize);
        _41 = BitAnd(_38, _40);
        _42 = Eq(_41, const 0_usize);
        assert(_42, "misaligned pointer dereference: address must be a multiple of {} but is {}", _39, _38) -> [success: bb20, unwind unreachable];
    }

    bb9: {
        _14 = <Vec<i32> as IntoIterator>::into_iter(move _15) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _13 = &mut _14;
        _12 = _13 as &mut dyn std::iter::Iterator<Item = i32> (Pointer(Unsize));
        _23 = <dyn Iterator<Item = i32> as Iterator>::next(_12) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _22 = &_23;
        _31 = const _;
        _21 = (move _22, _31);
        _24 = (_21.0: &std::option::Option<i32>);
        _25 = (_21.1: &std::option::Option<i32>);
        _27 = <Option<i32> as PartialEq>::eq(_24, _25) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _28, _24, _25, move _30) -> bb17;
    }

    bb14: {
        drop(_14) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_5) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_14) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_5) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        (*_36) = [const 123_i32];
        _16 = move _20 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _15 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _16) -> [return: bb9, unwind: bb18];
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const 123_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 456_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 123_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 123_i32;
        _0 = &_1;
        return;
    }
}
