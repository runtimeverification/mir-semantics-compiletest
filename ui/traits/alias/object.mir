// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/object.rs:10:15: 10:15
    let _1: &dyn std::cmp::PartialEq<i32> + std::marker::Send + std::marker::Sync; // in scope 0 at ui/traits/alias/object.rs:11:9: 11:10
    let mut _2: &i32;                    // in scope 0 at ui/traits/alias/object.rs:11:23: 11:27
    let _3: &i32;                        // in scope 0 at ui/traits/alias/object.rs:11:23: 11:27
    let mut _4: bool;                    // in scope 0 at ui/traits/alias/object.rs:12:5: 12:23
    let mut _5: bool;                    // in scope 0 at ui/traits/alias/object.rs:12:13: 12:22
    let mut _6: &dyn std::cmp::PartialEq<i32> + std::marker::Send + std::marker::Sync; // in scope 0 at ui/traits/alias/object.rs:12:13: 12:15
    let mut _7: &i32;                    // in scope 0 at ui/traits/alias/object.rs:12:19: 12:22
    let mut _8: !;                       // in scope 0 at ui/traits/alias/object.rs:12:5: 12:23
    let mut _10: std::boxed::Box<dyn std::cmp::PartialEq<i32> + std::marker::Send>; // in scope 0 at ui/traits/alias/object.rs:13:13: 13:42
    let mut _11: std::boxed::Box<i32>;   // in scope 0 at ui/traits/alias/object.rs:13:13: 13:26
    let mut _12: bool;                   // in scope 0 at ui/traits/alias/object.rs:14:5: 14:23
    let mut _13: bool;                   // in scope 0 at ui/traits/alias/object.rs:14:13: 14:22
    let mut _14: &dyn std::cmp::PartialEq<i32> + std::marker::Send; // in scope 0 at ui/traits/alias/object.rs:14:13: 14:15
    let mut _15: &i32;                   // in scope 0 at ui/traits/alias/object.rs:14:19: 14:22
    let mut _16: !;                      // in scope 0 at ui/traits/alias/object.rs:14:5: 14:23
    let mut _18: &mut std::vec::IntoIter<i32>; // in scope 0 at ui/traits/alias/object.rs:16:35: 16:61
    let mut _19: &mut std::vec::IntoIter<i32>; // in scope 0 at ui/traits/alias/object.rs:16:35: 16:61
    let mut _20: std::vec::IntoIter<i32>; // in scope 0 at ui/traits/alias/object.rs:16:40: 16:61
    let mut _21: std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _22: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _23: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _25: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _26: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _27: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _28: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _30: std::option::Option<i32>;   // in scope 0 at ui/traits/alias/object.rs:17:16: 17:24
    let mut _31: &mut dyn std::iter::Iterator<Item = i32>; // in scope 0 at ui/traits/alias/object.rs:17:16: 17:24
    let mut _32: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &std::option::Option<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &std::option::Option<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: &i32;                   // in scope 0 at ui/traits/alias/object.rs:11:23: 11:27
    let mut _51: *const dyn std::cmp::PartialEq<i32> + std::marker::Send; // in scope 0 at ui/traits/alias/object.rs:13:9: 13:10
    let mut _52: *const [i32; 1];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/traits/alias/object.rs:11:9: 11:10
        let _9: std::boxed::Box<dyn std::cmp::PartialEq<i32> + std::marker::Send>; // in scope 1 at ui/traits/alias/object.rs:13:9: 13:10
        let mut _49: &i32;               // in scope 1 at ui/traits/alias/object.rs:12:19: 12:22
        scope 2 {
            debug b => _9;               // in scope 2 at ui/traits/alias/object.rs:13:9: 13:10
            let _17: &mut dyn std::iter::Iterator<Item = i32>; // in scope 2 at ui/traits/alias/object.rs:16:9: 16:10
            let mut _48: &i32;           // in scope 2 at ui/traits/alias/object.rs:14:19: 14:22
            scope 3 {
                debug c => _17;          // in scope 3 at ui/traits/alias/object.rs:16:9: 16:10
                let _33: &std::option::Option<i32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _34: &std::option::Option<i32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _47: &std::option::Option<i32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 5 {
                    debug left_val => _33; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _34; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _39: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _39; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _50 = const _;                   // scope 0 at ui/traits/alias/object.rs:11:23: 11:27
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:11:23: 11:27
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _3 = _50;                        // scope 0 at ui/traits/alias/object.rs:11:23: 11:27
        _2 = _3;                         // scope 0 at ui/traits/alias/object.rs:11:23: 11:27
        _1 = move _2 as &dyn std::cmp::PartialEq<i32> + std::marker::Send + std::marker::Sync (Pointer(Unsize)); // scope 0 at ui/traits/alias/object.rs:11:23: 11:27
        _6 = _1;                         // scope 1 at ui/traits/alias/object.rs:12:13: 12:15
        _49 = const _;                   // scope 1 at ui/traits/alias/object.rs:12:19: 12:22
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:12:19: 12:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _7 = _49;                        // scope 1 at ui/traits/alias/object.rs:12:19: 12:22
        _5 = <dyn PartialEq<i32> + Send + Sync as PartialEq<i32>>::eq(move _6, move _7) -> bb1; // scope 1 at ui/traits/alias/object.rs:12:13: 12:22
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:12:13: 12:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a dyn PartialEq<i32> + Send + Sync, &'b i32) -> bool {<dyn PartialEq<i32> + Send + Sync as PartialEq<i32>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Not(move _5);               // scope 1 at ui/traits/alias/object.rs:12:5: 12:23
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/traits/alias/object.rs:12:5: 12:23
    }

    bb2: {
        _8 = core::panicking::panic(const "assertion failed: *a == 123"); // scope 1 at ui/traits/alias/object.rs:12:5: 12:23
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:12:5: 12:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _11 = Box::<i32>::new(const 456_i32) -> bb4; // scope 1 at ui/traits/alias/object.rs:13:13: 13:26
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:13:13: 13:21
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = move _11 as std::boxed::Box<dyn std::cmp::PartialEq<i32> + std::marker::Send> (Pointer(Unsize)); // scope 1 at ui/traits/alias/object.rs:13:13: 13:26
        _9 = move _10;                   // scope 1 at ui/traits/alias/object.rs:13:13: 13:42
        _51 = (((_9.0: std::ptr::Unique<dyn std::cmp::PartialEq<i32> + std::marker::Send>).0: std::ptr::NonNull<dyn std::cmp::PartialEq<i32> + std::marker::Send>).0: *const dyn std::cmp::PartialEq<i32> + std::marker::Send); // scope 2 at ui/traits/alias/object.rs:14:13: 14:15
        _14 = &(*_51);                   // scope 2 at ui/traits/alias/object.rs:14:13: 14:15
        _48 = const _;                   // scope 2 at ui/traits/alias/object.rs:14:19: 14:22
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:14:19: 14:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _15 = _48;                       // scope 2 at ui/traits/alias/object.rs:14:19: 14:22
        _13 = <dyn PartialEq<i32> + Send as PartialEq<i32>>::eq(move _14, move _15) -> [return: bb5, unwind: bb18]; // scope 2 at ui/traits/alias/object.rs:14:13: 14:22
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:14:13: 14:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a dyn PartialEq<i32> + Send, &'b i32) -> bool {<dyn PartialEq<i32> + Send as PartialEq<i32>>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = Not(move _13);             // scope 2 at ui/traits/alias/object.rs:14:5: 14:23
        switchInt(move _12) -> [0: bb7, otherwise: bb6]; // scope 2 at ui/traits/alias/object.rs:14:5: 14:23
    }

    bb6: {
        _16 = core::panicking::panic(const "assertion failed: *b == 456") -> bb18; // scope 2 at ui/traits/alias/object.rs:14:5: 14:23
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:14:5: 14:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _24 = const 4_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _25 = const 4_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _26 = alloc::alloc::exchange_malloc(move _24, move _25) -> [return: bb8, unwind: bb18]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = ShallowInitBox(move _26, [i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _52 = (((_27.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_52) = [const 123_i32];        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _23 = move _27;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _22 = move _23 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _21 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _22) -> [return: bb9, unwind: bb18]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = <Vec<i32> as IntoIterator>::into_iter(move _21) -> [return: bb10, unwind: bb18]; // scope 2 at ui/traits/alias/object.rs:16:40: 16:61
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:16:50: 16:59
                                         // + literal: Const { ty: fn(Vec<i32>) -> <Vec<i32> as IntoIterator>::IntoIter {<Vec<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb10: {
        _19 = &mut _20;                  // scope 2 at ui/traits/alias/object.rs:16:35: 16:61
        _18 = &mut (*_19);               // scope 2 at ui/traits/alias/object.rs:16:35: 16:61
        _17 = move _18 as &mut dyn std::iter::Iterator<Item = i32> (Pointer(Unsize)); // scope 2 at ui/traits/alias/object.rs:16:35: 16:61
        _31 = &mut (*_17);               // scope 3 at ui/traits/alias/object.rs:17:16: 17:24
        _30 = <dyn Iterator<Item = i32> as Iterator>::next(move _31) -> [return: bb11, unwind: bb17]; // scope 3 at ui/traits/alias/object.rs:17:16: 17:24
                                         // mir::Constant
                                         // + span: ui/traits/alias/object.rs:17:18: 17:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut dyn Iterator<Item = i32>) -> Option<<dyn Iterator<Item = i32> as Iterator>::Item> {<dyn Iterator<Item = i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = &_30;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _32 = _47;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _32);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_28.0: &std::option::Option<i32>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_28.1: &std::option::Option<i32>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = _33;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = <Option<i32> as PartialEq>::eq(move _37, move _38) -> [return: bb12, unwind: bb17]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _35 = Not(move _36);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb14, otherwise: bb13]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _39 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _41, move _42, move _44, move _46) -> bb17; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_20) -> [return: bb15, unwind: bb18]; // scope 2 at ui/traits/alias/object.rs:18:1: 18:2
    }

    bb15: {
        drop(_9) -> bb16;                // scope 1 at ui/traits/alias/object.rs:18:1: 18:2
    }

    bb16: {
        return;                          // scope 0 at ui/traits/alias/object.rs:18:2: 18:2
    }

    bb17 (cleanup): {
        drop(_20) -> bb18;               // scope 2 at ui/traits/alias/object.rs:18:1: 18:2
    }

    bb18 (cleanup): {
        drop(_9) -> bb19;                // scope 1 at ui/traits/alias/object.rs:18:1: 18:2
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/traits/alias/object.rs:10:1: 18:2
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/traits/alias/object.rs:17:26: 17:35

    bb0: {
        _1 = Option::<i32>::Some(const 123_i32); // scope 0 at ui/traits/alias/object.rs:17:26: 17:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/alias/object.rs:14:19: 14:22
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/object.rs:14:19: 14:22

    bb0: {
        _1 = const 456_i32;              // scope 0 at ui/traits/alias/object.rs:14:19: 14:22
        _0 = &_1;                        // scope 0 at ui/traits/alias/object.rs:14:19: 14:22
        return;                          // scope 0 at ui/traits/alias/object.rs:14:19: 14:22
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/alias/object.rs:12:19: 12:22
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/object.rs:12:19: 12:22

    bb0: {
        _1 = const 123_i32;              // scope 0 at ui/traits/alias/object.rs:12:19: 12:22
        _0 = &_1;                        // scope 0 at ui/traits/alias/object.rs:12:19: 12:22
        return;                          // scope 0 at ui/traits/alias/object.rs:12:19: 12:22
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/alias/object.rs:11:23: 11:27
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/object.rs:11:24: 11:27

    bb0: {
        _1 = const 123_i32;              // scope 0 at ui/traits/alias/object.rs:11:24: 11:27
        _0 = &_1;                        // scope 0 at ui/traits/alias/object.rs:11:23: 11:27
        return;                          // scope 0 at ui/traits/alias/object.rs:11:23: 11:27
    }
}
