// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> (T, T) {
    let mut _0: (T, T);                  // return place in scope 0 at ui/traits/alias/bounds.rs:24:28: 24:34
    let _1: T;                           // in scope 0 at ui/traits/alias/bounds.rs:25:9: 25:12
    let mut _3: &T;                      // in scope 0 at ui/traits/alias/bounds.rs:26:15: 26:26
    let mut _4: T;                       // in scope 0 at ui/traits/alias/bounds.rs:27:6: 27:9
    let mut _5: T;                       // in scope 0 at ui/traits/alias/bounds.rs:27:11: 27:14
    scope 1 {
        debug one => _1;                 // in scope 1 at ui/traits/alias/bounds.rs:25:9: 25:12
        let _2: T;                       // in scope 1 at ui/traits/alias/bounds.rs:26:9: 26:12
        scope 2 {
            debug two => _2;             // in scope 2 at ui/traits/alias/bounds.rs:26:9: 26:12
        }
    }

    bb0: {
        _1 = <T as Default>::default() -> bb1; // scope 0 at ui/traits/alias/bounds.rs:25:15: 25:27
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:25:15: 25:25
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at ui/traits/alias/bounds.rs:26:15: 26:26
        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb3]; // scope 1 at ui/traits/alias/bounds.rs:26:15: 26:26
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:26:19: 26:24
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _1;                    // scope 2 at ui/traits/alias/bounds.rs:27:6: 27:9
        _5 = move _2;                    // scope 2 at ui/traits/alias/bounds.rs:27:11: 27:14
        _0 = (move _4, move _5);         // scope 2 at ui/traits/alias/bounds.rs:27:5: 27:15
        return;                          // scope 0 at ui/traits/alias/bounds.rs:28:2: 28:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/alias/bounds.rs:28:1: 28:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/alias/bounds.rs:24:1: 28:2
    }
}

fn b(_1: &impl SendEqAlias<i32>) -> bool {
    debug x => _1;                       // in scope 0 at ui/traits/alias/bounds.rs:30:6: 30:7
    let mut _0: bool;                    // return place in scope 0 at ui/traits/alias/bounds.rs:30:36: 30:40
    let mut _2: &i32;                    // in scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
    let mut _3: &impl SendEqAlias<i32>;  // in scope 0 at ui/traits/alias/bounds.rs:31:15: 31:17
    let mut _4: &i32;                    // in scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11

    bb0: {
        _4 = const _;                    // scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:31:5: 31:11
                                         // + literal: Const { ty: &i32, val: Unevaluated(b, [impl SendEqAlias<i32>], Some(promoted[0])) }
        _2 = _4;                         // scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
        _3 = _1;                         // scope 0 at ui/traits/alias/bounds.rs:31:15: 31:17
        _0 = <i32 as PartialEq<impl SendEqAlias<i32>>>::eq(move _2, move _3) -> bb1; // scope 0 at ui/traits/alias/bounds.rs:31:5: 31:17
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:31:5: 31:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a i32, &'b impl SendEqAlias<i32>) -> bool {<i32 as PartialEq<impl SendEqAlias<i32>>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/alias/bounds.rs:32:2: 32:2
    }
}

promoted[0] in b: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
        _0 = &_1;                        // scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
        return;                          // scope 0 at ui/traits/alias/bounds.rs:31:5: 31:11
    }
}

fn c(_1: &mut T) -> Option<i32> {
    debug x => _1;                       // in scope 0 at ui/traits/alias/bounds.rs:34:22: 34:23
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/traits/alias/bounds.rs:34:36: 34:47
    let mut _2: &mut T;                  // in scope 0 at ui/traits/alias/bounds.rs:35:5: 35:13

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/traits/alias/bounds.rs:35:5: 35:13
        _0 = <T as Iterator>::next(move _2) -> bb1; // scope 0 at ui/traits/alias/bounds.rs:35:5: 35:13
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:35:7: 35:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut T) -> Option<<T as Iterator>::Item> {<T as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/alias/bounds.rs:36:2: 36:2
    }
}

fn d() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/bounds.rs:38:26: 38:26
    let _1: ();                          // in scope 0 at ui/traits/alias/bounds.rs:39:5: 39:28

    bb0: {
        _1 = is_send_and_sync::<T>() -> bb1; // scope 0 at ui/traits/alias/bounds.rs:39:5: 39:28
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:39:5: 39:26
                                         // + literal: Const { ty: fn() {is_send_and_sync::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/alias/bounds.rs:40:2: 40:2
    }
}

fn is_send_and_sync() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/bounds.rs:42:39: 42:39

    bb0: {
        return;                          // scope 0 at ui/traits/alias/bounds.rs:42:41: 42:41
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/bounds.rs:44:11: 44:11
    let _1: (i32, i32);                  // in scope 0 at ui/traits/alias/bounds.rs:45:9: 45:13
    let mut _2: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _56: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _61: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _62: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _64: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _65: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _66: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _67: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _68: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _69: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _71: bool;                   // in scope 0 at ui/traits/alias/bounds.rs:52:5: 52:20
    let mut _72: bool;                   // in scope 0 at ui/traits/alias/bounds.rs:52:13: 52:19
    let mut _73: &i32;                   // in scope 0 at ui/traits/alias/bounds.rs:52:15: 52:18
    let _74: &i32;                       // in scope 0 at ui/traits/alias/bounds.rs:52:15: 52:18
    let mut _75: !;                      // in scope 0 at ui/traits/alias/bounds.rs:52:5: 52:20
    let mut _76: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _77: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _78: std::option::Option<i32>;   // in scope 0 at ui/traits/alias/bounds.rs:54:16: 54:44
    let mut _79: &mut std::vec::IntoIter<i32>; // in scope 0 at ui/traits/alias/bounds.rs:54:18: 54:43
    let mut _80: &mut std::vec::IntoIter<i32>; // in scope 0 at ui/traits/alias/bounds.rs:54:18: 54:43
    let mut _81: std::vec::IntoIter<i32>; // in scope 0 at ui/traits/alias/bounds.rs:54:23: 54:43
    let mut _82: std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _83: std::boxed::Box<[i32]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _84: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _85: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _86: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _87: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _88: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _89: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _94: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _95: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _97: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _98: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _99: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _100: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _101: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _102: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _104: ();                        // in scope 0 at ui/traits/alias/bounds.rs:56:5: 56:15
    let mut _111: *const [i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug both => _1;                // in scope 1 at ui/traits/alias/bounds.rs:45:9: 45:13
        let _5: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _22: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _23: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _36: (i32, i32);             // in scope 1 at ui/traits/alias/bounds.rs:48:9: 48:13
        let mut _109: &i32;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _110: &i32;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _22;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _23;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _28;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug both => _36;           // in scope 6 at ui/traits/alias/bounds.rs:48:9: 48:13
            let _40: &i32;               // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _41: &i32;               // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _57: &i32;               // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _58: &i32;               // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _90: &std::option::Option<i32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _91: &std::option::Option<i32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _105: &std::option::Option<i32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _106: &i32;          // in scope 6 at ui/traits/alias/bounds.rs:52:15: 52:18
            let mut _107: &i32;          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _108: &i32;          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 7 {
                debug left_val => _40;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _41;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _46: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _46;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 9 {
                debug left_val => _57;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _58;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _63: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _63;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 11 {
            }
            scope 12 {
                debug left_val => _90;   // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _91;  // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _96: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 13 {
                    debug kind => _96;   // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = a::<i32>() -> bb1;          // scope 0 at ui/traits/alias/bounds.rs:45:16: 45:26
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:45:16: 45:24
                                         // + literal: Const { ty: fn() -> (i32, i32) {a::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &(_1.0: i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _110 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[5])) }
        _4 = _110;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 0_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = &(_1.1: i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[4])) }
        _21 = _109;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_19.0: &i32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_19.1: &i32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = (*_22);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = const 0_i32;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = Eq(move _26, move _27);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _24 = Not(move _25);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb5, otherwise: bb4]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<i32, i32>(move _30, move _31, move _33, move _35); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _36 = a::<i32>() -> bb6;         // scope 1 at ui/traits/alias/bounds.rs:48:28: 48:31
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:48:28: 48:29
                                         // + literal: Const { ty: fn() -> (i32, i32) {a::<i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _38 = &(_36.0: i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _108 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _39 = _108;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _39);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_37.0: &i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_37.1: &i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = (*_40);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = const 0_i32;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = Eq(move _44, move _45);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _42 = Not(move _43);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb8, otherwise: bb7]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _46 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<i32, i32>(move _48, move _49, move _51, move _53); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _55 = &(_36.1: i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _107 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _56 = _107;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _56);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _57 = (_54.0: &i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _58 = (_54.1: &i32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _61 = (*_57);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _62 = const 0_i32;               // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _60 = Eq(move _61, move _62);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _59 = Not(move _60);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _59) -> [0: bb10, otherwise: bb9]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _63 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _65 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = _57;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _66 = _67;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _69 = _58;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _68 = _69;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _64 = core::panicking::assert_failed::<i32, i32>(move _65, move _66, move _68, move _70); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb10: {
        _106 = const _;                  // scope 6 at ui/traits/alias/bounds.rs:52:15: 52:18
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:52:15: 52:18
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _74 = _106;                      // scope 6 at ui/traits/alias/bounds.rs:52:15: 52:18
        _73 = _74;                       // scope 6 at ui/traits/alias/bounds.rs:52:15: 52:18
        _72 = b::<i32>(move _73) -> bb11; // scope 6 at ui/traits/alias/bounds.rs:52:13: 52:19
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:52:13: 52:14
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> bool {b::<i32>}, val: Value(<ZST>) }
    }

    bb11: {
        _71 = Not(move _72);             // scope 6 at ui/traits/alias/bounds.rs:52:5: 52:20
        switchInt(move _71) -> [0: bb13, otherwise: bb12]; // scope 6 at ui/traits/alias/bounds.rs:52:5: 52:20
    }

    bb12: {
        _75 = core::panicking::panic(const "assertion failed: b(&22)"); // scope 6 at ui/traits/alias/bounds.rs:52:5: 52:20
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:52:5: 52:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _85 = const 4_usize;             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _86 = const 4_usize;             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _87 = alloc::alloc::exchange_malloc(move _85, move _86) -> bb14; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb14: {
        _88 = ShallowInitBox(move _87, [i32; 1]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _111 = (((_88.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_111) = [const 22_i32];        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _84 = move _88;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _83 = move _84 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _82 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _83) -> bb15; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb15: {
        _81 = <Vec<i32> as IntoIterator>::into_iter(move _82) -> bb16; // scope 6 at ui/traits/alias/bounds.rs:54:23: 54:43
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:54:32: 54:41
                                         // + literal: Const { ty: fn(Vec<i32>) -> <Vec<i32> as IntoIterator>::IntoIter {<Vec<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb16: {
        _80 = &mut _81;                  // scope 6 at ui/traits/alias/bounds.rs:54:18: 54:43
        _79 = &mut (*_80);               // scope 6 at ui/traits/alias/bounds.rs:54:18: 54:43
        _78 = c::<std::vec::IntoIter<i32>>(move _79) -> [return: bb17, unwind: bb23]; // scope 6 at ui/traits/alias/bounds.rs:54:16: 54:44
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:54:16: 54:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<i32>) -> Option<i32> {c::<std::vec::IntoIter<i32>>}, val: Value(<ZST>) }
    }

    bb17: {
        _77 = &_78;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _105 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _89 = _105;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _76 = (move _77, move _89);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _90 = (_76.0: &std::option::Option<i32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _91 = (_76.1: &std::option::Option<i32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _94 = _90;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _95 = _91;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _93 = <Option<i32> as PartialEq>::eq(move _94, move _95) -> [return: bb18, unwind: bb23]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _92 = Not(move _93);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _92) -> [0: bb20, otherwise: bb19]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _96 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = _90;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _100;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _91;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = _102;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _97 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _98, move _99, move _101, move _103) -> bb23; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_81) -> bb21;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb21: {
        _104 = d::<i32>() -> bb22;       // scope 6 at ui/traits/alias/bounds.rs:56:5: 56:15
                                         // mir::Constant
                                         // + span: ui/traits/alias/bounds.rs:56:5: 56:13
                                         // + literal: Const { ty: fn() {d::<i32>}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at ui/traits/alias/bounds.rs:57:2: 57:2
    }

    bb23 (cleanup): {
        drop(_81) -> bb24;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at ui/traits/alias/bounds.rs:44:1: 57:2
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/traits/alias/bounds.rs:54:46: 54:54

    bb0: {
        _1 = Option::<i32>::Some(const 22_i32); // scope 0 at ui/traits/alias/bounds.rs:54:46: 54:54
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/alias/bounds.rs:52:15: 52:18
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/bounds.rs:52:16: 52:18

    bb0: {
        _1 = const 22_i32;               // scope 0 at ui/traits/alias/bounds.rs:52:16: 52:18
        _0 = &_1;                        // scope 0 at ui/traits/alias/bounds.rs:52:15: 52:18
        return;                          // scope 0 at ui/traits/alias/bounds.rs:52:15: 52:18
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/bounds.rs:50:24: 50:25

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/traits/alias/bounds.rs:50:24: 50:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/bounds.rs:49:24: 49:25

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/traits/alias/bounds.rs:49:24: 49:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/bounds.rs:47:24: 47:25

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/traits/alias/bounds.rs:47:24: 47:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/traits/alias/bounds.rs:46:24: 46:25

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/traits/alias/bounds.rs:46:24: 46:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Foo(_1: PhantomData<T>) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/traits/alias/bounds.rs:16:1: 16:29

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/traits/alias/bounds.rs:16:1: 16:29
        return;                          // scope 0 at ui/traits/alias/bounds.rs:16:1: 16:29
    }
}

// MIR FOR CTFE
fn Foo(_1: PhantomData<T>) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/traits/alias/bounds.rs:16:1: 16:29

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/traits/alias/bounds.rs:16:1: 16:29
        return;                          // scope 0 at ui/traits/alias/bounds.rs:16:1: 16:29
    }
}

fn Bar(_1: PhantomData<T>) -> Bar<T> {
    let mut _0: Bar<T>;                  // return place in scope 0 at ui/traits/alias/bounds.rs:18:1: 18:14

    bb0: {
        _0 = Bar::<T>(move _1);          // scope 0 at ui/traits/alias/bounds.rs:18:1: 18:14
        return;                          // scope 0 at ui/traits/alias/bounds.rs:18:1: 18:14
    }
}

// MIR FOR CTFE
fn Bar(_1: PhantomData<T>) -> Bar<T> {
    let mut _0: Bar<T>;                  // return place in scope 0 at ui/traits/alias/bounds.rs:18:1: 18:14

    bb0: {
        _0 = Bar::<T>(move _1);          // scope 0 at ui/traits/alias/bounds.rs:18:1: 18:14
        return;                          // scope 0 at ui/traits/alias/bounds.rs:18:1: 18:14
    }
}
