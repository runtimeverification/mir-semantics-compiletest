// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a() -> (T, T) {
    let mut _0: (T, T);
    let _1: T;
    let mut _3: &T;
    let mut _4: T;
    let mut _5: T;
    scope 1 {
        debug one => _1;
        let _2: T;
        scope 2 {
            debug two => _2;
        }
    }

    bb0: {
        _1 = <T as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1;
        _2 = <T as Clone>::clone(move _3) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _4 = move _1;
        _5 = move _2;
        _0 = (move _4, move _5);
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn b(_1: &impl SendEqAlias<i32>) -> bool {
    debug x => _1;
    let mut _0: bool;
    let mut _2: &i32;

    bb0: {
        _2 = const _;
        _0 = <i32 as PartialEq<impl SendEqAlias<i32>>>::eq(_2, _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in b: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}

fn c(_1: &mut T) -> Option<i32> {
    debug x => _1;
    let mut _0: std::option::Option<i32>;

    bb0: {
        _0 = <T as Iterator>::next(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn d() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = is_send_and_sync::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn is_send_and_sync() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: (i32, i32);
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&i32, &i32);
    let mut _14: &i32;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: i32;
    let mut _20: i32;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _26: &i32;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: i32;
    let mut _32: i32;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&i32, &i32);
    let mut _37: &i32;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: !;
    let mut _50: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _51: &std::option::Option<i32>;
    let _52: std::option::Option<i32>;
    let mut _53: &mut std::vec::IntoIter<i32>;
    let mut _54: std::vec::IntoIter<i32>;
    let mut _55: std::vec::Vec<i32>;
    let mut _56: std::boxed::Box<[i32]>;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: *mut u8;
    let mut _60: std::boxed::Box<[i32; 1]>;
    let mut _63: bool;
    let mut _64: bool;
    let _66: !;
    let mut _67: std::option::Option<std::fmt::Arguments<'_>>;
    let _68: ();
    let mut _75: *const [i32; 1];
    scope 1 {
        debug both => _1;
        let _4: &i32;
        let _5: &i32;
        let _15: &i32;
        let _16: &i32;
        let _24: (i32, i32);
        let mut _73: &i32;
        let mut _74: &i32;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug left_val => _15;
            debug right_val => _16;
            let _21: core::panicking::AssertKind;
            scope 5 {
                debug kind => _21;
            }
        }
        scope 6 {
            debug both => _24;
            let _27: &i32;
            let _28: &i32;
            let _38: &i32;
            let _39: &i32;
            let _61: &std::option::Option<i32>;
            let _62: &std::option::Option<i32>;
            let mut _69: &std::option::Option<i32>;
            let mut _70: &i32;
            let mut _71: &i32;
            let mut _72: &i32;
            let mut _76: *const ();
            let mut _77: usize;
            let mut _78: usize;
            let mut _79: usize;
            let mut _80: usize;
            let mut _81: bool;
            scope 7 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _33;
                }
            }
            scope 9 {
                debug left_val => _38;
                debug right_val => _39;
                let _44: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _44;
                }
            }
            scope 11 {
            }
            scope 12 {
                debug left_val => _61;
                debug right_val => _62;
                let _65: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _65;
                }
            }
        }
    }

    bb0: {
        _1 = a::<i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &(_1.0: i32);
        _74 = const _;
        _2 = (move _3, _74);
        _4 = (_2.0: &i32);
        _5 = (_2.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _14 = &(_1.1: i32);
        _73 = const _;
        _13 = (move _14, _73);
        _15 = (_13.0: &i32);
        _16 = (_13.1: &i32);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<i32, i32>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb5: {
        _24 = a::<i32>() -> [return: bb6, unwind continue];
    }

    bb6: {
        _26 = &(_24.0: i32);
        _72 = const _;
        _25 = (move _26, _72);
        _27 = (_25.0: &i32);
        _28 = (_25.1: &i32);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<i32, i32>(move _33, _27, _28, move _35) -> unwind continue;
    }

    bb8: {
        _37 = &(_24.1: i32);
        _71 = const _;
        _36 = (move _37, _71);
        _38 = (_36.0: &i32);
        _39 = (_36.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46) -> unwind continue;
    }

    bb10: {
        _70 = const _;
        _48 = b::<i32>(_70) -> [return: bb11, unwind continue];
    }

    bb11: {
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _49 = core::panicking::panic(const "assertion failed: b(&22)") -> unwind continue;
    }

    bb13: {
        _57 = SizeOf([i32; 1]);
        _58 = AlignOf([i32; 1]);
        _59 = alloc::alloc::exchange_malloc(move _57, move _58) -> [return: bb14, unwind continue];
    }

    bb14: {
        _60 = ShallowInitBox(move _59, [i32; 1]);
        _75 = (((_60.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _76 = _75 as *const () (PtrToPtr);
        _77 = _76 as usize (Transmute);
        _78 = AlignOf(i32);
        _79 = Sub(_78, const 1_usize);
        _80 = BitAnd(_77, _79);
        _81 = Eq(_80, const 0_usize);
        assert(_81, "misaligned pointer dereference: address must be a multiple of {} but is {}", _78, _77) -> [success: bb25, unwind unreachable];
    }

    bb15: {
        _54 = <Vec<i32> as IntoIterator>::into_iter(move _55) -> [return: bb16, unwind continue];
    }

    bb16: {
        _53 = &mut _54;
        _52 = c::<std::vec::IntoIter<i32>>(_53) -> [return: bb17, unwind: bb23];
    }

    bb17: {
        _51 = &_52;
        _69 = const _;
        _50 = (move _51, _69);
        _61 = (_50.0: &std::option::Option<i32>);
        _62 = (_50.1: &std::option::Option<i32>);
        _64 = <Option<i32> as PartialEq>::eq(_61, _62) -> [return: bb18, unwind: bb23];
    }

    bb18: {
        _63 = Not(move _64);
        switchInt(move _63) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _65 = core::panicking::AssertKind::Eq;
        _67 = Option::<Arguments<'_>>::None;
        _66 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _65, _61, _62, move _67) -> bb23;
    }

    bb20: {
        drop(_54) -> [return: bb21, unwind continue];
    }

    bb21: {
        _68 = d::<i32>() -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(_54) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }

    bb25: {
        (*_75) = [const 22_i32];
        _56 = move _60 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _55 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _56) -> [return: bb15, unwind continue];
    }
}

promoted[0] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const 22_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: PhantomData<T>) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: PhantomData<T>) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

fn Bar(_1: PhantomData<T>) -> Bar<T> {
    let mut _0: Bar<T>;

    bb0: {
        _0 = Bar::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar(_1: PhantomData<T>) -> Bar<T> {
    let mut _0: Bar<T>;

    bb0: {
        _0 = Bar::<T>(move _1);
        return;
    }
}
