// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: impl MyFn) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/issue-60755.rs:8:22: 8:22

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/traits/alias/issue-60755.rs:8:23: 8:24
    }

    bb1: {
        return;                          // scope 0 at ui/traits/alias/issue-60755.rs:8:24: 8:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/issue-60755.rs:10:11: 10:11
    let _1: ();                          // in scope 0 at ui/traits/alias/issue-60755.rs:11:5: 11:16
    let mut _2: [closure@ui/traits/alias/issue-60755.rs:11:9: 11:12]; // in scope 0 at ui/traits/alias/issue-60755.rs:11:9: 11:15

    bb0: {
        _1 = foo::<[closure@ui/traits/alias/issue-60755.rs:11:9: 11:12]>(move _2) -> bb1; // scope 0 at ui/traits/alias/issue-60755.rs:11:5: 11:16
                                         // mir::Constant
                                         // + span: ui/traits/alias/issue-60755.rs:11:5: 11:8
                                         // + literal: Const { ty: fn([closure@ui/traits/alias/issue-60755.rs:11:9: 11:12]) {foo::<[closure@ui/traits/alias/issue-60755.rs:11:9: 11:12]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/alias/issue-60755.rs:12:2: 12:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/traits/alias/issue-60755.rs:11:9: 11:12], _2: &MyStruct) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/alias/issue-60755.rs:11:13: 11:13

    bb0: {
        return;                          // scope 0 at ui/traits/alias/issue-60755.rs:11:15: 11:15
    }
}
