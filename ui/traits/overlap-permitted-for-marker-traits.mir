// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&f64, &f64);
    let mut _14: &f64;
    let _15: f64;
    let _16: &f64;
    let _17: &f64;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: f64;
    let mut _21: f64;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _26: &std::vec::Vec<i32>;
    let _27: std::vec::Vec<i32>;
    let mut _28: std::boxed::Box<[i32]>;
    let mut _29: usize;
    let mut _30: usize;
    let mut _31: *mut u8;
    let mut _32: std::boxed::Box<[i32; 1]>;
    let mut _33: &std::vec::Vec<i32>;
    let _34: std::vec::Vec<i32>;
    let mut _35: std::vec::Vec<i32>;
    let mut _36: std::boxed::Box<[i32]>;
    let mut _37: usize;
    let mut _38: usize;
    let mut _39: *mut u8;
    let mut _40: std::boxed::Box<[i32; 1]>;
    let _41: &std::vec::Vec<i32>;
    let _42: &std::vec::Vec<i32>;
    let mut _43: bool;
    let mut _44: bool;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: &f64;
    let mut _49: &i32;
    let mut _50: *const [i32; 1];
    let mut _51: *const [i32; 1];
    let mut _52: *const ();
    let mut _53: usize;
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: bool;
    let mut _58: *const ();
    let mut _59: usize;
    let mut _60: usize;
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: bool;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
    }
    scope 6 {
    }
    scope 7 {
        debug left_val => _41;
        debug right_val => _42;
        let _45: core::panicking::AssertKind;
        scope 8 {
            debug kind => _45;
        }
    }

    bb0: {
        _49 = const _;
        _3 = foo::<i32>(const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_49, move _2);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _48 = const _;
        _15 = foo::<f64>(const 2f64) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _13 = (_48, move _14);
        _16 = (_13.0: &f64);
        _17 = (_13.1: &f64);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<f64, f64>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _29 = SizeOf([i32; 1]);
        _30 = AlignOf([i32; 1]);
        _31 = alloc::alloc::exchange_malloc(move _29, move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _32 = ShallowInitBox(move _31, [i32; 1]);
        _50 = (((_32.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _58 = _50 as *const () (PtrToPtr);
        _59 = _58 as usize (Transmute);
        _60 = AlignOf(i32);
        _61 = Sub(_60, const 1_usize);
        _62 = BitAnd(_59, _61);
        _63 = Eq(_62, const 0_usize);
        assert(_63, "misaligned pointer dereference: address must be a multiple of {} but is {}", _60, _59) -> [success: bb21, unwind unreachable];
    }

    bb8: {
        _26 = &_27;
        _37 = SizeOf([i32; 1]);
        _38 = AlignOf([i32; 1]);
        _39 = alloc::alloc::exchange_malloc(move _37, move _38) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _40 = ShallowInitBox(move _39, [i32; 1]);
        _51 = (((_40.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _52 = _51 as *const () (PtrToPtr);
        _53 = _52 as usize (Transmute);
        _54 = AlignOf(i32);
        _55 = Sub(_54, const 1_usize);
        _56 = BitAnd(_53, _55);
        _57 = Eq(_56, const 0_usize);
        assert(_57, "misaligned pointer dereference: address must be a multiple of {} but is {}", _54, _53) -> [success: bb20, unwind unreachable];
    }

    bb10: {
        _34 = foo::<Vec<i32>>(move _35) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _33 = &_34;
        _25 = (move _26, move _33);
        _41 = (_25.0: &std::vec::Vec<i32>);
        _42 = (_25.1: &std::vec::Vec<i32>);
        _44 = <Vec<i32> as PartialEq>::eq(_41, _42) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _45, _41, _42, move _47) -> bb17;
    }

    bb14: {
        drop(_34) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_27) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_34) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_27) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }

    bb20: {
        (*_51) = [const 1_i32];
        _36 = move _40 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _35 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _36) -> [return: bb10, unwind: bb18];
    }

    bb21: {
        (*_50) = [const 1_i32];
        _28 = move _32 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _27 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _28) -> [return: bb8, unwind continue];
    }
}

promoted[0] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 2f64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}
