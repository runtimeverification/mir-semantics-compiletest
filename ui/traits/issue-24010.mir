// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wants_foo(_1: Box<dyn Foo<Output = i32>>) -> i32 {
    debug f => _1;
    let mut _0: i32;
    let mut _2: &std::boxed::Box<dyn Foo<Output = i32>>;
    let mut _3: (i32,);

    bb0: {
        _2 = &_1;
        _3 = (const 42_i32,);
        _0 = <Box<dyn Foo<Output = i32>> as Fn<(i32,)>>::call(move _2, move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: std::boxed::Box<dyn Foo<Output = i32>>;
    let mut _6: std::boxed::Box<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _7: &i32;
        let _8: &i32;
        let mut _16: &i32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }

    bb0: {
        _1 = Box::<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>::new(const ZeroSized: [closure@ui/traits/issue-24010.rs:12:22: 12:25]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = move _1;
        _5 = move _6 as std::boxed::Box<dyn Foo<Output = i32>> (Pointer(Unsize));
        _4 = wants_foo(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _16 = const _;
        _2 = (move _3, _16);
        _7 = (_2.0: &i32);
        _8 = (_2.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/traits/issue-24010.rs:12:22: 12:25], _2: i32) -> i32 {
    debug x => _2;
    let mut _0: i32;

    bb0: {
        _0 = _2;
        return;
    }
}
