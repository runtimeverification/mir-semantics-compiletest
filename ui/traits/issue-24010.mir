// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wants_foo(_1: Box<dyn Foo<Output = i32>>) -> i32 {
    debug f => _1;                       // in scope 0 at ui/traits/issue-24010.rs:7:14: 7:15
    let mut _0: i32;                     // return place in scope 0 at ui/traits/issue-24010.rs:7:34: 7:37
    let mut _2: &std::boxed::Box<dyn Foo<Output = i32>>; // in scope 0 at ui/traits/issue-24010.rs:8:5: 8:6
    let mut _3: (i32,);                  // in scope 0 at ui/traits/issue-24010.rs:8:5: 8:10

    bb0: {
        _2 = &_1;                        // scope 0 at ui/traits/issue-24010.rs:8:5: 8:6
        _3 = const (42_i32,);            // scope 0 at ui/traits/issue-24010.rs:8:5: 8:10
        _0 = <Box<dyn Foo<Output = i32>> as Fn<(i32,)>>::call(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/traits/issue-24010.rs:8:5: 8:10
                                         // mir::Constant
                                         // + span: ui/traits/issue-24010.rs:8:5: 8:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a Box<dyn Foo<Output = i32>>, (i32,)) -> <Box<dyn Foo<Output = i32>> as FnOnce<(i32,)>>::Output {<Box<dyn Foo<Output = i32>> as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/traits/issue-24010.rs:9:1: 9:2
    }

    bb2: {
        return;                          // scope 0 at ui/traits/issue-24010.rs:9:2: 9:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/issue-24010.rs:9:1: 9:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/issue-24010.rs:7:1: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-24010.rs:11:11: 11:11
    let _1: std::boxed::Box<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>; // in scope 0 at ui/traits/issue-24010.rs:12:9: 12:10
    let mut _2: [closure@ui/traits/issue-24010.rs:12:22: 12:25]; // in scope 0 at ui/traits/issue-24010.rs:12:22: 12:27
    let mut _3: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: i32;                         // in scope 0 at ui/traits/issue-24010.rs:13:16: 13:28
    let mut _6: std::boxed::Box<dyn Foo<Output = i32>>; // in scope 0 at ui/traits/issue-24010.rs:13:26: 13:27
    let mut _7: std::boxed::Box<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>; // in scope 0 at ui/traits/issue-24010.rs:13:26: 13:27
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/traits/issue-24010.rs:12:9: 12:10
        let _9: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _23: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = Box::<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>::new(move _2) -> bb1; // scope 0 at ui/traits/issue-24010.rs:12:13: 12:28
                                         // mir::Constant
                                         // + span: ui/traits/issue-24010.rs:12:13: 12:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/traits/issue-24010.rs:12:22: 12:25]) -> Box<[closure@ui/traits/issue-24010.rs:12:22: 12:25]> {Box::<[closure@ui/traits/issue-24010.rs:12:22: 12:25]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _1;                    // scope 1 at ui/traits/issue-24010.rs:13:26: 13:27
        _6 = move _7 as std::boxed::Box<dyn Foo<Output = i32>> (Pointer(Unsize)); // scope 1 at ui/traits/issue-24010.rs:13:26: 13:27
        _5 = wants_foo(move _6) -> bb2;  // scope 1 at ui/traits/issue-24010.rs:13:16: 13:28
                                         // mir::Constant
                                         // + span: ui/traits/issue-24010.rs:13:16: 13:25
                                         // + literal: Const { ty: fn(Box<(dyn Foo<Output = i32> + 'static)>) -> i32 {wants_foo}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _23;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_3.0: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_3.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 42_i32;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<i32, i32>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/traits/issue-24010.rs:14:2: 14:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/traits/issue-24010.rs:13:30: 13:32

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/traits/issue-24010.rs:13:30: 13:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/traits/issue-24010.rs:12:22: 12:25], _2: i32) -> i32 {
    debug x => _2;                       // in scope 0 at ui/traits/issue-24010.rs:12:23: 12:24
    let mut _0: i32;                     // return place in scope 0 at ui/traits/issue-24010.rs:12:26: 12:26

    bb0: {
        _0 = _2;                         // scope 0 at ui/traits/issue-24010.rs:12:26: 12:27
        return;                          // scope 0 at ui/traits/issue-24010.rs:12:27: 12:27
    }
}
