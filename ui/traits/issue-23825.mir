// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-23825.rs:6:1: 6:23>::to_string(_1: &u32) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::new_display::<u32>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

promoted[0] in <impl at ui/traits/issue-23825.rs:6:1: 6:23>::to_string: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "u32: "];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/traits/issue-23825.rs:10:1: 10:23>::to_string(_1: &f32) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::new_display::<f32>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

promoted[0] in <impl at ui/traits/issue-23825.rs:10:1: 10:23>::to_string: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "f32: "];
        _0 = &_1;
        return;
    }
}

fn print(_1: T) -> String {
    debug x => _1;
    let mut _0: std::string::String;
    let mut _2: &T;

    bb0: {
        _2 = &_1;
        _0 = <T as Stringify>::to_string(move _2) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&std::string::String, &&str);
    let mut _2: &&std::string::String;
    let _3: &std::string::String;
    let _4: std::string::String;
    let _5: &&std::string::String;
    let _6: &&str;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&&std::string::String, &&str);
    let mut _13: &&std::string::String;
    let _14: &std::string::String;
    let _15: std::string::String;
    let _16: &&std::string::String;
    let _17: &&str;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: &&str;
    let mut _24: &&str;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }

    bb0: {
        _4 = print::<u32>(const 5_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _2 = &_3;
        _24 = const _;
        _1 = (move _2, _24);
        _5 = (_1.0: &&std::string::String);
        _6 = (_1.1: &&str);
        _8 = <&String as PartialEq<&str>>::eq(_5, _6) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<&String, &str>(move _9, _5, _6, move _11) -> bb12;
    }

    bb4: {
        drop(_4) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = print::<f32>(const 5f32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _14 = &_15;
        _13 = &_14;
        _23 = const _;
        _12 = (move _13, _23);
        _16 = (_12.0: &&std::string::String);
        _17 = (_12.1: &&str);
        _19 = <&String as PartialEq<&str>>::eq(_16, _17) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&String, &str>(move _20, _16, _17, move _22) -> bb11;
    }

    bb9: {
        drop(_15) -> [return: bb10, unwind continue];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_15) -> [return: bb13, unwind terminate];
    }

    bb12 (cleanup): {
        drop(_4) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "f32: 5";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "u32: 5";
        _0 = &_1;
        return;
    }
}
