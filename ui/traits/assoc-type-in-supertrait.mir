// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn sum_foo(_1: F) -> i32 {
    debug f => _1;
    let mut _0: i32;

    bb0: {
        _0 = <F as Iterator>::fold::<i32, [closure@ui/traits/assoc-type-in-supertrait.rs:17:15: 17:20]>(move _1, const 0_i32, const ZeroSized: [closure@ui/traits/assoc-type-in-supertrait.rs:17:15: 17:20]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn sum_foo::{closure#0}(_1: &mut [closure@ui/traits/assoc-type-in-supertrait.rs:17:15: 17:20], _2: i32, _3: i32) -> i32 {
    debug a => _2;
    debug b => _3;
    let mut _0: i32;

    bb0: {
        _0 = Add(_2, _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: std::vec::IntoIter<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: std::boxed::Box<[i32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[i32; 3]>;
    let mut _9: (&i32, &i32);
    let mut _10: &i32;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: i32;
    let mut _16: i32;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: *const [i32; 3];
    let mut _22: *const ();
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    scope 1 {
        debug x => _1;
        let _11: &i32;
        let _12: &i32;
        let mut _20: &i32;
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _5 = SizeOf([i32; 3]);
        _6 = AlignOf([i32; 3]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 3]);
        _21 = (((_8.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _22 = _21 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(i32);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _2 = <Vec<i32> as IntoIterator>::into_iter(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = sum_foo::<std::vec::IntoIter<i32>>(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = &_1;
        _20 = const _;
        _9 = (move _10, _20);
        _11 = (_9.0: &i32);
        _12 = (_9.1: &i32);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<i32, i32>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb6: {
        return;
    }

    bb7: {
        (*_21) = [const 11_i32, const 10_i32, const 1_i32];
        _4 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _3 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _4) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 22_i32;
        _0 = &_1;
        return;
    }
}
