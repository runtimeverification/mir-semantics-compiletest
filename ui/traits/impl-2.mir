// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Bar::<impl at ui/traits/impl-2.rs:14:5: 14:37>::bar(_1: &dyn Trait) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/impl-2.rs:15:16: 15:21
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl-2.rs:15:23: 15:23
    let mut _2: &dyn Foo::Trait;         // in scope 0 at ui/traits/impl-2.rs:15:25: 15:35

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/impl-2.rs:15:25: 15:35
        _0 = <dyn Trait as Trait>::foo(move _2) -> bb1; // scope 0 at ui/traits/impl-2.rs:15:25: 15:35
                                         // mir::Constant
                                         // + span: ui/traits/impl-2.rs:15:30: 15:33
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Trait) {<dyn Trait as Trait>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/impl-2.rs:15:37: 15:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl-2.rs:19:11: 19:11

    bb0: {
        return;                          // scope 0 at ui/traits/impl-2.rs:19:13: 19:13
    }
}
