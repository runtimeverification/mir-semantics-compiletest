// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn batches(_1: &u32) -> impl Iterator<Item = &u32> {
    debug n => _1;                       // in scope 0 at ui/traits/conservative_impl_trait.rs:4:12: 4:13
    let mut _0: impl std::iter::Iterator<Item = &u32>; // return place in scope 0 at ui/traits/conservative_impl_trait.rs:4:24: 4:48
    let mut _2: &u32;                    // in scope 0 at ui/traits/conservative_impl_trait.rs:5:21: 5:22

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/conservative_impl_trait.rs:5:21: 5:22
        _0 = once::<&u32>(move _2) -> bb1; // scope 0 at ui/traits/conservative_impl_trait.rs:5:5: 5:23
                                         // mir::Constant
                                         // + span: ui/traits/conservative_impl_trait.rs:5:5: 5:20
                                         // + literal: Const { ty: fn(&u32) -> std::iter::Once<&u32> {once::<&u32>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/conservative_impl_trait.rs:6:2: 6:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/conservative_impl_trait.rs:8:11: 8:11

    bb0: {
        return;                          // scope 0 at ui/traits/conservative_impl_trait.rs:8:13: 8:13
    }
}
