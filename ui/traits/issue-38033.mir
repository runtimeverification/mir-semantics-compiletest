// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-38033.rs:5:11: 5:11
    let _1: std::iter::Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>; // in scope 0 at ui/traits/issue-38033.rs:6:9: 6:16
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/traits/issue-38033.rs:6:19: 6:25
    let mut _3: [closure@ui/traits/issue-38033.rs:6:30: 6:33]; // in scope 0 at ui/traits/issue-38033.rs:6:30: 6:53
    let _4: ();                          // in scope 0 at ui/traits/issue-38033.rs:7:5: 7:35
    let mut _5: std::result::Result<std::vec::Vec<u32>, ()>; // in scope 0 at ui/traits/issue-38033.rs:7:10: 7:34
    let mut _6: &mut JoinAll<std::iter::Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>>; // in scope 0 at ui/traits/issue-38033.rs:7:10: 7:34
    let mut _7: JoinAll<std::iter::Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>>; // in scope 0 at ui/traits/issue-38033.rs:7:10: 7:27
    let mut _8: std::iter::Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>; // in scope 0 at ui/traits/issue-38033.rs:7:19: 7:26
    scope 1 {
        debug workers => _1;             // in scope 1 at ui/traits/issue-38033.rs:6:9: 6:16
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 0_i32 }; // scope 0 at ui/traits/issue-38033.rs:6:19: 6:25
        _1 = <std::ops::Range<i32> as Iterator>::map::<FutureResult<u32, ()>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>(move _2, move _3) -> bb1; // scope 0 at ui/traits/issue-38033.rs:6:19: 6:54
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:6:26: 6:29
                                         // + literal: Const { ty: fn(std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]) -> Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]> {<std::ops::Range<i32> as Iterator>::map::<FutureResult<u32, ()>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = move _1;                    // scope 1 at ui/traits/issue-38033.rs:7:19: 7:26
        _7 = join_all::<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>>(move _8) -> bb2; // scope 1 at ui/traits/issue-38033.rs:7:10: 7:27
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:7:10: 7:18
                                         // + literal: Const { ty: fn(Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>) -> JoinAll<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>> {join_all::<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _7;                    // scope 1 at ui/traits/issue-38033.rs:7:10: 7:34
        _5 = <JoinAll<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>> as Future>::poll(move _6) -> [return: bb3, unwind: bb6]; // scope 1 at ui/traits/issue-38033.rs:7:10: 7:34
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:7:28: 7:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut JoinAll<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>>) -> Result<<JoinAll<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>> as Future>::Item, <JoinAll<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>> as Future>::Error> {<JoinAll<Map<std::ops::Range<i32>, [closure@ui/traits/issue-38033.rs:6:30: 6:33]>> as Future>::poll}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = std::mem::drop::<Result<Vec<u32>, ()>>(move _5) -> [return: bb4, unwind: bb6]; // scope 1 at ui/traits/issue-38033.rs:7:5: 7:35
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:7:5: 7:9
                                         // + literal: Const { ty: fn(Result<Vec<u32>, ()>) {std::mem::drop::<Result<Vec<u32>, ()>>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_7) -> bb5;                 // scope 1 at ui/traits/issue-38033.rs:7:35: 7:36
    }

    bb5: {
        return;                          // scope 0 at ui/traits/issue-38033.rs:8:2: 8:2
    }

    bb6 (cleanup): {
        drop(_7) -> bb7;                 // scope 1 at ui/traits/issue-38033.rs:7:35: 7:36
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/traits/issue-38033.rs:5:1: 8:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/traits/issue-38033.rs:6:30: 6:33], _2: i32) -> FutureResult<u32, ()> {
    let mut _0: FutureResult<u32, ()>;   // return place in scope 0 at ui/traits/issue-38033.rs:6:34: 6:34

    bb0: {
        _0 = result::<u32, ()>() -> bb1; // scope 0 at ui/traits/issue-38033.rs:6:34: 6:53
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:6:34: 6:51
                                         // + literal: Const { ty: fn() -> FutureResult<u32, ()> {result::<u32, ()>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/issue-38033.rs:6:53: 6:53
    }
}

fn <impl at ui/traits/issue-38033.rs:25:1: 25:33>::into_future(_1: F) -> F {
    debug self => _1;                    // in scope 0 at ui/traits/issue-38033.rs:30:20: 30:24
    let mut _0: F;                       // return place in scope 0 at ui/traits/issue-38033.rs:30:29: 30:30

    bb0: {
        _0 = move _1;                    // scope 0 at ui/traits/issue-38033.rs:31:9: 31:13
        return;                          // scope 0 at ui/traits/issue-38033.rs:32:6: 32:6
    }
}

fn result() -> FutureResult<T, E> {
    let mut _0: FutureResult<T, E>;      // return place in scope 0 at ui/traits/issue-38033.rs:39:22: 39:40

    bb0: {
        goto -> bb1;                     // scope 0 at ui/traits/issue-38033.rs:40:5: 40:12
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/traits/issue-38033.rs:40:5: 40:12
    }
}

fn <impl at ui/traits/issue-38033.rs:43:1: 43:41>::poll(_1: &mut FutureResult<T, E>) -> Result<T, E> {
    debug self => _1;                    // in scope 0 at ui/traits/issue-38033.rs:47:13: 47:22
    let mut _0: std::result::Result<T, E>; // return place in scope 0 at ui/traits/issue-38033.rs:47:27: 47:39

    bb0: {
        goto -> bb1;                     // scope 0 at ui/traits/issue-38033.rs:48:9: 48:16
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/traits/issue-38033.rs:48:9: 48:16
    }
}

fn join_all(_1: I) -> JoinAll<I> {
    let mut _0: JoinAll<I>;              // return place in scope 0 at ui/traits/issue-38033.rs:59:25: 59:35
    let mut _2: std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59

    bb0: {
        _2 = Vec::<<<I as IntoIterator>::Item as IntoFuture>::Item>::new() -> [return: bb1, unwind: bb3]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> {Vec::<<<I as IntoIterator>::Item as IntoFuture>::Item>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = JoinAll::<I> { elems: move _2 }; // scope 0 at ui/traits/issue-38033.rs:63:5: 63:30
        drop(_1) -> bb2;                 // scope 0 at ui/traits/issue-38033.rs:64:1: 64:2
    }

    bb2: {
        return;                          // scope 0 at ui/traits/issue-38033.rs:64:2: 64:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/issue-38033.rs:64:1: 64:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/issue-38033.rs:59:1: 64:2
    }
}

fn <impl at ui/traits/issue-38033.rs:66:1: 66:30>::poll(_1: &mut JoinAll<I>) -> Result<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>, <<I as IntoIterator>::Item as IntoFuture>::Error> {
    debug self => _1;                    // in scope 0 at ui/traits/issue-38033.rs:73:13: 73:22
    let mut _0: std::result::Result<std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>, <<I as std::iter::IntoIterator>::Item as IntoFuture>::Error>; // return place in scope 0 at ui/traits/issue-38033.rs:73:27: 73:58
    let _2: std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:74:13: 74:18
    let mut _3: &mut std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:74:34: 74:49
    let mut _4: &mut std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:74:34: 74:49
    let mut _5: std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:74:51: 74:61
    let mut _6: std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:75:12: 77:31
    let mut _7: std::iter::Map<std::vec::IntoIter<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>, [closure@ui/traits/issue-38033.rs:75:34: 75:37]>; // in scope 0 at ui/traits/issue-38033.rs:75:12: 77:11
    let mut _8: std::vec::IntoIter<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:75:12: 75:29
    let mut _9: std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>; // in scope 0 at ui/traits/issue-38033.rs:75:12: 75:17
    let mut _10: [closure@ui/traits/issue-38033.rs:75:34: 75:37]; // in scope 0 at ui/traits/issue-38033.rs:75:34: 77:10
    scope 1 {
        debug elems => _2;               // in scope 1 at ui/traits/issue-38033.rs:74:13: 74:18
    }

    bb0: {
        _4 = &mut ((*_1).0: std::vec::Vec<<<I as std::iter::IntoIterator>::Item as IntoFuture>::Item>); // scope 0 at ui/traits/issue-38033.rs:74:34: 74:49
        _3 = &mut (*_4);                 // scope 0 at ui/traits/issue-38033.rs:74:34: 74:49
        _5 = Vec::<<<I as IntoIterator>::Item as IntoFuture>::Item>::new() -> bb1; // scope 0 at ui/traits/issue-38033.rs:74:51: 74:61
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:74:51: 74:59
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> {Vec::<<<I as IntoIterator>::Item as IntoFuture>::Item>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = std::mem::replace::<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>>(move _3, move _5) -> bb2; // scope 0 at ui/traits/issue-38033.rs:74:21: 74:62
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:74:21: 74:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>, Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>) -> Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> {std::mem::replace::<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = move _2;                    // scope 1 at ui/traits/issue-38033.rs:75:12: 75:17
        _8 = <Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> as IntoIterator>::into_iter(move _9) -> bb3; // scope 1 at ui/traits/issue-38033.rs:75:12: 75:29
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:75:18: 75:27
                                         // + literal: Const { ty: fn(Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>) -> <Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> as IntoIterator>::IntoIter {<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = <std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item> as Iterator>::map::<<<I as IntoIterator>::Item as IntoFuture>::Item, [closure@ui/traits/issue-38033.rs:75:34: 75:37]>(move _8, move _10) -> bb4; // scope 1 at ui/traits/issue-38033.rs:75:12: 77:11
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:75:30: 75:33
                                         // + literal: Const { ty: fn(std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item>, [closure@ui/traits/issue-38033.rs:75:34: 75:37]) -> Map<std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item>, [closure@ui/traits/issue-38033.rs:75:34: 75:37]> {<std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item> as Iterator>::map::<<<I as IntoIterator>::Item as IntoFuture>::Item, [closure@ui/traits/issue-38033.rs:75:34: 75:37]>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = <Map<std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item>, [closure@ui/traits/issue-38033.rs:75:34: 75:37]> as Iterator>::collect::<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>>(move _7) -> bb5; // scope 1 at ui/traits/issue-38033.rs:75:12: 77:31
                                         // mir::Constant
                                         // + span: ui/traits/issue-38033.rs:77:12: 77:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Map<std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item>, [closure@ui/traits/issue-38033.rs:75:34: 75:37]>) -> Vec<<<I as IntoIterator>::Item as IntoFuture>::Item> {<Map<std::vec::IntoIter<<<I as IntoIterator>::Item as IntoFuture>::Item>, [closure@ui/traits/issue-38033.rs:75:34: 75:37]> as Iterator>::collect::<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>>}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = Result::<Vec<<<I as IntoIterator>::Item as IntoFuture>::Item>, <<I as IntoIterator>::Item as IntoFuture>::Error>::Ok(move _6); // scope 1 at ui/traits/issue-38033.rs:75:9: 77:32
        return;                          // scope 0 at ui/traits/issue-38033.rs:78:6: 78:6
    }
}

fn <impl at ui/traits/issue-38033.rs:66:1: 66:30>::poll::{closure#0}(_1: &mut [closure@ui/traits/issue-38033.rs:75:34: 75:37], _2: <<I as IntoIterator>::Item as IntoFuture>::Item) -> <<I as IntoIterator>::Item as IntoFuture>::Item {
    debug e => _2;                       // in scope 0 at ui/traits/issue-38033.rs:75:35: 75:36
    let mut _0: <<I as std::iter::IntoIterator>::Item as IntoFuture>::Item; // return place in scope 0 at ui/traits/issue-38033.rs:75:38: 75:38

    bb0: {
        _0 = move _2;                    // scope 0 at ui/traits/issue-38033.rs:76:13: 76:14
        return;                          // scope 0 at ui/traits/issue-38033.rs:77:10: 77:10
    }
}
