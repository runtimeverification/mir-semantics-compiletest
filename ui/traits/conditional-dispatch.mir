// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/conditional-dispatch.rs:12:1: 12:20>::copy(_1: &u16) -> u16 {
    debug self => _1;
    let mut _0: u16;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:13:1: 13:20>::copy(_1: &u32) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:14:1: 14:20>::copy(_1: &i32) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:15:1: 15:34>::copy(_1: &Option<T>) -> Option<T> {
    debug self => _1;
    let mut _0: std::option::Option<T>;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:17:1: 17:25>::get(_1: &T) -> T {
    debug self => _1;
    let mut _0: T;

    bb0: {
        _0 = <T as MyCopy>::copy(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:21:1: 21:22>::get(_1: &Box<i32>) -> Box<i32> {
    debug self => _1;
    let mut _0: std::boxed::Box<i32>;
    let mut _2: i32;
    let _3: &i32;
    let mut _4: std::boxed::Box<i32>;
    let mut _5: *const i32;
    let mut _6: *const ();
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;

    bb0: {
        _4 = deref_copy (*_1);
        _5 = (((_4.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(i32);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _0 = Box::<i32>::new(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3: {
        _3 = &(*_5);
        _2 = get_it::<i32>(_3) -> [return: bb1, unwind continue];
    }
}

fn get_it(_1: &T) -> T {
    debug t => _1;
    let mut _0: T;

    bb0: {
        _0 = <T as Get>::get(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let _4: &u32;
    let _5: &u32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u16, &u16);
    let mut _14: &u16;
    let _15: u16;
    let _16: &u16;
    let _17: &u16;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u16;
    let mut _21: u16;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&std::option::Option<u16>, &std::option::Option<u16>);
    let mut _26: &std::option::Option<u16>;
    let _27: std::option::Option<u16>;
    let _28: &std::option::Option<u16>;
    let _29: &std::option::Option<u16>;
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: (&std::boxed::Box<i32>, &std::boxed::Box<i32>);
    let mut _36: &std::boxed::Box<i32>;
    let _37: std::boxed::Box<i32>;
    let _38: &std::boxed::Box<i32>;
    let _39: std::boxed::Box<i32>;
    let mut _40: &std::boxed::Box<i32>;
    let _41: std::boxed::Box<i32>;
    let _42: &std::boxed::Box<i32>;
    let _43: &std::boxed::Box<i32>;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: &std::option::Option<u16>;
    let mut _50: &std::option::Option<u16>;
    let mut _51: &u16;
    let mut _52: &u16;
    let mut _53: &u32;
    let mut _54: &u32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _32: core::panicking::AssertKind;
        scope 6 {
            debug kind => _32;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }

    bb0: {
        _54 = const _;
        _3 = get_it::<u32>(_54) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _53 = const _;
        _1 = (move _2, _53);
        _4 = (_1.0: &u32);
        _5 = (_1.1: &u32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u32, u32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _52 = const _;
        _15 = get_it::<u16>(_52) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _51 = const _;
        _13 = (move _14, _51);
        _16 = (_13.0: &u16);
        _17 = (_13.1: &u16);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u16, u16>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _50 = const _;
        _27 = get_it::<Option<u16>>(_50) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _49 = const _;
        _25 = (move _26, _49);
        _28 = (_25.0: &std::option::Option<u16>);
        _29 = (_25.1: &std::option::Option<u16>);
        _31 = <Option<u16> as PartialEq>::eq(_28, _29) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<Option<u16>, Option<u16>>(move _32, _28, _29, move _34) -> unwind continue;
    }

    bb10: {
        _39 = Box::<i32>::new(const 1_i32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _38 = &_39;
        _37 = get_it::<Box<i32>>(_38) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _36 = &_37;
        _41 = Box::<i32>::new(const 1_i32) -> [return: bb13, unwind: bb21];
    }

    bb13: {
        _40 = &_41;
        _35 = (move _36, move _40);
        _42 = (_35.0: &std::boxed::Box<i32>);
        _43 = (_35.1: &std::boxed::Box<i32>);
        _45 = <Box<i32> as PartialEq>::eq(_42, _43) -> [return: bb14, unwind: bb20];
    }

    bb14: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<Box<i32>, Box<i32>>(move _46, _42, _43, move _48) -> bb20;
    }

    bb16: {
        drop(_41) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        drop(_37) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        drop(_39) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_41) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_37) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_39) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Option<u16> = {
    let mut _0: &std::option::Option<u16>;
    let mut _1: std::option::Option<u16>;

    bb0: {
        _1 = Option::<u16>::Some(const 1_u16);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<u16> = {
    let mut _0: &std::option::Option<u16>;
    let mut _1: std::option::Option<u16>;

    bb0: {
        _1 = Option::<u16>::Some(const 1_u16);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u16 = {
    let mut _0: &u16;
    let mut _1: u16;

    bb0: {
        _1 = const 1_u16;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}
