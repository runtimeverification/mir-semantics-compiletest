// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/conditional-dispatch.rs:12:1: 12:20>::copy(_1: &u16) -> u16 {
    debug self => _1;                    // in scope 0 at ui/traits/conditional-dispatch.rs:12:31: 12:36
    let mut _0: u16;                     // return place in scope 0 at ui/traits/conditional-dispatch.rs:12:41: 12:45

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/conditional-dispatch.rs:12:48: 12:53
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:12:55: 12:55
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:13:1: 13:20>::copy(_1: &u32) -> u32 {
    debug self => _1;                    // in scope 0 at ui/traits/conditional-dispatch.rs:13:31: 13:36
    let mut _0: u32;                     // return place in scope 0 at ui/traits/conditional-dispatch.rs:13:41: 13:45

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/conditional-dispatch.rs:13:48: 13:53
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:13:55: 13:55
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:14:1: 14:20>::copy(_1: &i32) -> i32 {
    debug self => _1;                    // in scope 0 at ui/traits/conditional-dispatch.rs:14:31: 14:36
    let mut _0: i32;                     // return place in scope 0 at ui/traits/conditional-dispatch.rs:14:41: 14:45

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/conditional-dispatch.rs:14:48: 14:53
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:14:55: 14:55
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:15:1: 15:34>::copy(_1: &Option<T>) -> Option<T> {
    debug self => _1;                    // in scope 0 at ui/traits/conditional-dispatch.rs:15:45: 15:50
    let mut _0: std::option::Option<T>;  // return place in scope 0 at ui/traits/conditional-dispatch.rs:15:55: 15:59

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/conditional-dispatch.rs:15:62: 15:67
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:15:69: 15:69
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:17:1: 17:25>::get(_1: &T) -> T {
    debug self => _1;                    // in scope 0 at ui/traits/conditional-dispatch.rs:18:12: 18:17
    let mut _0: T;                       // return place in scope 0 at ui/traits/conditional-dispatch.rs:18:22: 18:23
    let mut _2: &T;                      // in scope 0 at ui/traits/conditional-dispatch.rs:18:26: 18:37

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/conditional-dispatch.rs:18:26: 18:37
        _0 = <T as MyCopy>::copy(move _2) -> bb1; // scope 0 at ui/traits/conditional-dispatch.rs:18:26: 18:37
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:18:31: 18:35
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as MyCopy>::copy}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:18:39: 18:39
    }
}

fn <impl at ui/traits/conditional-dispatch.rs:21:1: 21:22>::get(_1: &Box<i32>) -> Box<i32> {
    debug self => _1;                    // in scope 0 at ui/traits/conditional-dispatch.rs:22:12: 22:17
    let mut _0: std::boxed::Box<i32>;    // return place in scope 0 at ui/traits/conditional-dispatch.rs:22:22: 22:30
    let mut _2: i32;                     // in scope 0 at ui/traits/conditional-dispatch.rs:22:42: 22:57
    let mut _3: &i32;                    // in scope 0 at ui/traits/conditional-dispatch.rs:22:49: 22:56
    let _4: &i32;                        // in scope 0 at ui/traits/conditional-dispatch.rs:22:49: 22:56
    let mut _5: std::boxed::Box<i32>;    // in scope 0 at ui/traits/conditional-dispatch.rs:22:12: 22:17
    let mut _6: *const i32;              // in scope 0 at ui/traits/conditional-dispatch.rs:22:12: 22:17

    bb0: {
        _5 = deref_copy (*_1);           // scope 0 at ui/traits/conditional-dispatch.rs:22:49: 22:56
        _6 = (((_5.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/traits/conditional-dispatch.rs:22:49: 22:56
        _4 = &(*_6);                     // scope 0 at ui/traits/conditional-dispatch.rs:22:49: 22:56
        _3 = _4;                         // scope 0 at ui/traits/conditional-dispatch.rs:22:49: 22:56
        _2 = get_it::<i32>(move _3) -> bb1; // scope 0 at ui/traits/conditional-dispatch.rs:22:42: 22:57
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:22:42: 22:48
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> i32 {get_it::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Box::<i32>::new(move _2) -> bb2; // scope 0 at ui/traits/conditional-dispatch.rs:22:33: 22:58
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:22:33: 22:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:22:60: 22:60
    }
}

fn get_it(_1: &T) -> T {
    debug t => _1;                       // in scope 0 at ui/traits/conditional-dispatch.rs:25:18: 25:19
    let mut _0: T;                       // return place in scope 0 at ui/traits/conditional-dispatch.rs:25:28: 25:29
    let mut _2: &T;                      // in scope 0 at ui/traits/conditional-dispatch.rs:26:5: 26:15

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/conditional-dispatch.rs:26:5: 26:15
        _0 = <T as Get>::get(move _2) -> bb1; // scope 0 at ui/traits/conditional-dispatch.rs:26:5: 26:15
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:26:10: 26:13
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Get>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:27:2: 27:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/conditional-dispatch.rs:29:11: 29:11
    let mut _1: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: u32;                         // in scope 0 at ui/traits/conditional-dispatch.rs:30:16: 30:30
    let mut _4: &u32;                    // in scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
    let _5: &u32;                        // in scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
    let mut _6: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &u32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&u16, &u16);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: u16;                        // in scope 0 at ui/traits/conditional-dispatch.rs:31:16: 31:30
    let mut _24: &u16;                   // in scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
    let _25: &u16;                       // in scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
    let mut _26: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _28: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: u16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &u16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&std::option::Option<u16>, &std::option::Option<u16>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _43: std::option::Option<u16>;   // in scope 0 at ui/traits/conditional-dispatch.rs:32:16: 32:36
    let mut _44: &std::option::Option<u16>; // in scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
    let _45: &std::option::Option<u16>;  // in scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
    let mut _46: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _47: &std::option::Option<u16>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _48: &std::option::Option<u16>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _51: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _52: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _54: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _55: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _56: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _57: &std::option::Option<u16>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _58: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _59: &std::option::Option<u16>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _61: (&std::boxed::Box<i32>, &std::boxed::Box<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _62: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _63: std::boxed::Box<i32>;       // in scope 0 at ui/traits/conditional-dispatch.rs:33:16: 33:36
    let mut _64: &std::boxed::Box<i32>;  // in scope 0 at ui/traits/conditional-dispatch.rs:33:23: 33:35
    let _65: &std::boxed::Box<i32>;      // in scope 0 at ui/traits/conditional-dispatch.rs:33:23: 33:35
    let _66: std::boxed::Box<i32>;       // in scope 0 at ui/traits/conditional-dispatch.rs:33:24: 33:35
    let mut _67: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _68: std::boxed::Box<i32>;       // in scope 0 at ui/traits/conditional-dispatch.rs:33:38: 33:49
    let _69: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _70: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &std::boxed::Box<i32>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &std::boxed::Box<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _83: &std::option::Option<u16>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _84: &std::option::Option<u16>; // in scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
    let mut _85: &u16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _86: &u16;                   // in scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
    let mut _87: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _88: &u32;                   // in scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _27;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _28;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _33;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _47;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _48;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _53: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _53;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _69;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _70;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _75: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _75;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _88 = const _;                   // scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:30:23: 30:29
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[5])) }
        _5 = _88;                        // scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
        _4 = _5;                         // scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
        _3 = get_it::<u32>(move _4) -> bb1; // scope 0 at ui/traits/conditional-dispatch.rs:30:16: 30:30
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:30:16: 30:22
                                         // + literal: Const { ty: for<'a> fn(&'a u32) -> u32 {get_it::<u32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _87 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[4])) }
        _6 = _87;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &u32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 1_u32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<u32, u32>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        _86 = const _;                   // scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:31:23: 31:29
                                         // + literal: Const { ty: &u16, val: Unevaluated(main, [], Some(promoted[3])) }
        _25 = _86;                       // scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
        _24 = _25;                       // scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
        _23 = get_it::<u16>(move _24) -> bb4; // scope 0 at ui/traits/conditional-dispatch.rs:31:16: 31:30
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:31:16: 31:22
                                         // + literal: Const { ty: for<'a> fn(&'a u16) -> u16 {get_it::<u16>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _85 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u16, val: Unevaluated(main, [], Some(promoted[2])) }
        _26 = _85;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_21.0: &u16);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_21.1: &u16);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = const 1_u16;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _33 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<u16, u16>(move _35, move _36, move _38, move _40); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u16, &'b u16, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u16, u16>}, val: Value(<ZST>) }
    }

    bb6: {
        _84 = const _;                   // scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:32:23: 32:35
                                         // + literal: Const { ty: &Option<u16>, val: Unevaluated(main, [], Some(promoted[1])) }
        _45 = _84;                       // scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
        _44 = _45;                       // scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
        _43 = get_it::<Option<u16>>(move _44) -> bb7; // scope 0 at ui/traits/conditional-dispatch.rs:32:16: 32:36
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:32:16: 32:22
                                         // + literal: Const { ty: for<'a> fn(&'a Option<u16>) -> Option<u16> {get_it::<Option<u16>>}, val: Value(<ZST>) }
    }

    bb7: {
        _42 = &_43;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _83 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u16>, val: Unevaluated(main, [], Some(promoted[0])) }
        _46 = _83;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _46);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _47 = (_41.0: &std::option::Option<u16>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _48 = (_41.1: &std::option::Option<u16>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _51 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _50 = <Option<u16> as PartialEq>::eq(move _51, move _52) -> bb8; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u16>, &'b Option<u16>) -> bool {<Option<u16> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _49 = Not(move _50);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _49) -> [0: bb10, otherwise: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _53 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _57 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = _59;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _60 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _54 = core::panicking::assert_failed::<Option<u16>, Option<u16>>(move _55, move _56, move _58, move _60); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u16>, &'b Option<u16>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u16>, Option<u16>>}, val: Value(<ZST>) }
    }

    bb10: {
        _66 = Box::<i32>::new(const 1_i32) -> bb11; // scope 0 at ui/traits/conditional-dispatch.rs:33:24: 33:35
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:33:24: 33:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _65 = &_66;                      // scope 0 at ui/traits/conditional-dispatch.rs:33:23: 33:35
        _64 = _65;                       // scope 0 at ui/traits/conditional-dispatch.rs:33:23: 33:35
        _63 = get_it::<Box<i32>>(move _64) -> [return: bb12, unwind: bb22]; // scope 0 at ui/traits/conditional-dispatch.rs:33:16: 33:36
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:33:16: 33:22
                                         // + literal: Const { ty: for<'a> fn(&'a Box<i32>) -> Box<i32> {get_it::<Box<i32>>}, val: Value(<ZST>) }
    }

    bb12: {
        _62 = &_63;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _68 = Box::<i32>::new(const 1_i32) -> [return: bb13, unwind: bb21]; // scope 0 at ui/traits/conditional-dispatch.rs:33:38: 33:49
                                         // mir::Constant
                                         // + span: ui/traits/conditional-dispatch.rs:33:38: 33:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb13: {
        _67 = &_68;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _61 = (move _62, move _67);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_61.0: &std::boxed::Box<i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_61.1: &std::boxed::Box<i32>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = _69;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = _70;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = <Box<i32> as PartialEq>::eq(move _73, move _74) -> [return: bb14, unwind: bb20]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<i32>, &'b Box<i32>) -> bool {<Box<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _71 = Not(move _72);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _75 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<Box<i32>, Box<i32>>(move _77, move _78, move _80, move _82) -> bb20; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<i32>, &'b Box<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<i32>, Box<i32>>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_68) -> [return: bb17, unwind: bb21]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        drop(_63) -> [return: bb18, unwind: bb22]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        drop(_66) -> bb19;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19: {
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:34:2: 34:2
    }

    bb20 (cleanup): {
        drop(_68) -> bb21;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb21 (cleanup): {
        drop(_63) -> bb22;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb22 (cleanup): {
        drop(_66) -> bb23;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb23 (cleanup): {
        resume;                          // scope 0 at ui/traits/conditional-dispatch.rs:29:1: 34:2
    }
}

promoted[0] in main: &Option<u16> = {
    let mut _0: &std::option::Option<u16>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u16>; // in scope 0 at ui/traits/conditional-dispatch.rs:32:38: 32:49

    bb0: {
        _1 = Option::<u16>::Some(const 1_u16); // scope 0 at ui/traits/conditional-dispatch.rs:32:38: 32:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Option<u16> = {
    let mut _0: &std::option::Option<u16>; // return place in scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
    let mut _1: std::option::Option<u16>; // in scope 0 at ui/traits/conditional-dispatch.rs:32:24: 32:35

    bb0: {
        _1 = Option::<u16>::Some(const 1_u16); // scope 0 at ui/traits/conditional-dispatch.rs:32:24: 32:35
        _0 = &_1;                        // scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:32:23: 32:35
    }
}

promoted[2] in main: &u16 = {
    let mut _0: &u16;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u16;                     // in scope 0 at ui/traits/conditional-dispatch.rs:31:32: 31:37

    bb0: {
        _1 = const 1_u16;                // scope 0 at ui/traits/conditional-dispatch.rs:31:32: 31:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &u16 = {
    let mut _0: &u16;                    // return place in scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
    let mut _1: u16;                     // in scope 0 at ui/traits/conditional-dispatch.rs:31:24: 31:29

    bb0: {
        _1 = const 1_u16;                // scope 0 at ui/traits/conditional-dispatch.rs:31:24: 31:29
        _0 = &_1;                        // scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:31:23: 31:29
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/traits/conditional-dispatch.rs:30:32: 30:37

    bb0: {
        _1 = const 1_u32;                // scope 0 at ui/traits/conditional-dispatch.rs:30:32: 30:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
    let mut _1: u32;                     // in scope 0 at ui/traits/conditional-dispatch.rs:30:24: 30:29

    bb0: {
        _1 = const 1_u32;                // scope 0 at ui/traits/conditional-dispatch.rs:30:24: 30:29
        _0 = &_1;                        // scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
        return;                          // scope 0 at ui/traits/conditional-dispatch.rs:30:23: 30:29
    }
}
