// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/typeclasses-eq-example-static.rs:16:10: 16:15>::clone(_1: &Color) -> Color {
    debug self => _1;                    // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:16:10: 16:15
    let mut _0: Color;                   // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:16:10: 16:15

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:16:10: 16:15
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:16:15: 16:15
    }
}

fn <impl at ui/traits/typeclasses-eq-example-static.rs:19:1: 19:21>::isEq(_1: &Color, _2: &Color) -> bool {
    debug a => _1;                       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:20:13: 20:14
    debug b => _2;                       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:20:24: 20:25
    let mut _0: bool;                    // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:20:38: 20:42
    let mut _3: (Color, Color);          // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
    let mut _4: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:16: 21:18
    let mut _5: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:20: 21:22
    let mut _6: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:22:18: 22:22
    let mut _7: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:23:21: 23:28
    let mut _8: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:24:20: 24:26
    let mut _9: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:25:19: 25:24
    let mut _10: isize;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:22:12: 22:16

    bb0: {
        _4 = (*_1);                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:16: 21:18
        _5 = (*_2);                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:20: 21:22
        _3 = (move _4, move _5);         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
        _10 = discriminant((_3.0: Color)); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
        switchInt(move _10) -> [0: bb1, 1: bb3, 2: bb4, 3: bb5, otherwise: bb11]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:9: 21:23
    }

    bb1: {
        _6 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
        switchInt(move _6) -> [0: bb6, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:9: 21:23
    }

    bb2: {
        _0 = const false;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:26:35: 26:40
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example-static.rs:26:35: 26:40
    }

    bb3: {
        _7 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
        switchInt(move _7) -> [1: bb7, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:9: 21:23
    }

    bb4: {
        _8 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
        switchInt(move _8) -> [2: bb8, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:9: 21:23
    }

    bb5: {
        _9 = discriminant((_3.1: Color)); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:15: 21:23
        switchInt(move _9) -> [3: bb9, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:21:9: 21:23
    }

    bb6: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example-static.rs:22:35: 22:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example-static.rs:22:35: 22:39
    }

    bb7: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example-static.rs:23:35: 23:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example-static.rs:23:35: 23:39
    }

    bb8: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example-static.rs:24:35: 24:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example-static.rs:24:35: 24:39
    }

    bb9: {
        _0 = const true;                 // scope 0 at ui/traits/typeclasses-eq-example-static.rs:25:35: 25:39
        goto -> bb10;                    // scope 0 at ui/traits/typeclasses-eq-example-static.rs:25:35: 25:39
    }

    bb10: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:28:6: 28:6
    }

    bb11: {
        unreachable;                     // scope 0 at ui/traits/typeclasses-eq-example-static.rs:26:35: 26:40
    }
}

fn <impl at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15>::clone(_1: &ColorTree) -> ColorTree {
    debug self => _1;                    // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
    let mut _2: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
    let _3: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
    let mut _4: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
    let mut _5: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
    let _6: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
    let _7: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
    let mut _8: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
    let mut _9: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
    let mut _10: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
    let mut _11: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
        debug __self_1 => _7;            // in scope 2 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
    }

    bb1: {
        _6 = &(((*_1) as branch).0: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
        _7 = &(((*_1) as branch).1: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
        _9 = _6;                         // scope 2 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
        _8 = <Box<ColorTree> as Clone>::clone(move _9) -> bb5; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:34:12: 34:26
                                         // + literal: Const { ty: for<'a> fn(&'a Box<ColorTree>) -> Box<ColorTree> {<Box<ColorTree> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
    }

    bb3: {
        _3 = &(((*_1) as leaf).0: Color); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
        _5 = _3;                         // scope 1 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
        _4 = <Color as Clone>::clone(move _5) -> bb4; // scope 1 at ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:33:10: 33:15
                                         // + literal: Const { ty: for<'a> fn(&'a Color) -> Color {<Color as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = ColorTree::leaf(move _4);   // scope 1 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
        goto -> bb7;                     // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:14: 31:15
    }

    bb5: {
        _11 = _7;                        // scope 2 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
        _10 = <Box<ColorTree> as Clone>::clone(move _11) -> [return: bb6, unwind: bb8]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:34:28: 34:42
                                         // + literal: Const { ty: for<'a> fn(&'a Box<ColorTree>) -> Box<ColorTree> {<Box<ColorTree> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = ColorTree::branch(move _8, move _10); // scope 2 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
        goto -> bb7;                     // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:14: 31:15
    }

    bb7: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:15: 31:15
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 2 at ui/traits/typeclasses-eq-example-static.rs:31:14: 31:15
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:31:10: 31:15
    }
}

fn <impl at ui/traits/typeclasses-eq-example-static.rs:37:1: 37:25>::isEq(_1: &ColorTree, _2: &ColorTree) -> bool {
    debug a => _1;                       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:38:13: 38:14
    debug b => _2;                       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:38:28: 38:29
    let mut _0: bool;                    // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:38:46: 38:50
    let mut _3: (&ColorTree, &ColorTree); // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _4: &ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:16: 39:17
    let mut _5: &ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:19: 39:20
    let mut _6: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:27: 40:38
    let mut _7: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:38: 43:60
    let mut _8: isize;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:13: 40:24
    let _9: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:18: 40:23
    let _10: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:32: 40:37
    let mut _11: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:27: 41:40
    let _12: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:27: 41:40
    let _13: Color;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:28: 41:40
    let mut _14: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:28: 41:40
    let mut _15: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:42: 41:55
    let _16: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:42: 41:55
    let _17: Color;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:43: 41:55
    let mut _18: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:41:43: 41:55
    let _19: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:20: 43:26
    let _20: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:28: 43:34
    let _21: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:45: 43:51
    let _22: &std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:53: 43:59
    let mut _23: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:13: 44:58
    let mut _24: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:25: 44:40
    let _25: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:25: 44:40
    let _26: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:26: 44:40
    let mut _27: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:26: 44:40
    let mut _28: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:42: 44:57
    let _29: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:42: 44:57
    let _30: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:43: 44:57
    let mut _31: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:44:43: 44:57
    let mut _32: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:17: 45:62
    let mut _33: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:29: 45:44
    let _34: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:29: 45:44
    let _35: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:30: 45:44
    let mut _36: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:30: 45:44
    let mut _37: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:46: 45:61
    let _38: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:46: 45:61
    let _39: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:47: 45:61
    let mut _40: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:45:47: 45:61
    let mut _41: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _42: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _43: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _44: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _45: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _46: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _47: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _48: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _49: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
    let mut _50: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:20: 43:26
    let mut _51: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:28: 43:34
    let mut _52: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:45: 43:51
    let mut _53: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:53: 43:59
    let mut _54: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:20: 43:26
    let mut _55: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:28: 43:34
    let mut _56: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:45: 43:51
    let mut _57: *const ColorTree;       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:53: 43:59
    scope 1 {
        debug x => _9;                   // in scope 1 at ui/traits/typeclasses-eq-example-static.rs:40:18: 40:23
        debug y => _10;                  // in scope 1 at ui/traits/typeclasses-eq-example-static.rs:40:32: 40:37
    }
    scope 2 {
        debug l1 => _19;                 // in scope 2 at ui/traits/typeclasses-eq-example-static.rs:43:20: 43:26
        debug r1 => _20;                 // in scope 2 at ui/traits/typeclasses-eq-example-static.rs:43:28: 43:34
        debug l2 => _21;                 // in scope 2 at ui/traits/typeclasses-eq-example-static.rs:43:45: 43:51
        debug r2 => _22;                 // in scope 2 at ui/traits/typeclasses-eq-example-static.rs:43:53: 43:59
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:16: 39:17
        _5 = _2;                         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:19: 39:20
        _3 = (move _4, move _5);         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        _41 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        _8 = discriminant((*_41));       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        switchInt(move _8) -> [0: bb1, 1: bb3, otherwise: bb26]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:9: 39:21
    }

    bb1: {
        _42 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        _6 = discriminant((*_42));       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        switchInt(move _6) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:9: 39:21
    }

    bb2: {
        _0 = const false;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:47:18: 47:23
        goto -> bb20;                    // scope 0 at ui/traits/typeclasses-eq-example-static.rs:47:18: 47:23
    }

    bb3: {
        _43 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        _7 = discriminant((*_43));       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:15: 39:21
        switchInt(move _7) -> [1: bb7, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:39:9: 39:21
    }

    bb4: {
        _44 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:18: 40:23
        _9 = &(((*_44) as leaf).0: Color); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:18: 40:23
        _45 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:32: 40:37
        _10 = &(((*_45) as leaf).0: Color); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:40:32: 40:37
        _14 = _9;                        // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:28: 41:40
        _13 = <Color as Clone>::clone(move _14) -> bb5; // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:28: 41:40
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:41:33: 41:38
                                         // + literal: Const { ty: for<'a> fn(&'a Color) -> Color {<Color as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = &_13;                      // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:27: 41:40
        _11 = _12;                       // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:27: 41:40
        _18 = _10;                       // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:43: 41:55
        _17 = <Color as Clone>::clone(move _18) -> bb6; // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:43: 41:55
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:41:48: 41:53
                                         // + literal: Const { ty: for<'a> fn(&'a Color) -> Color {<Color as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &_17;                      // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:42: 41:55
        _15 = _16;                       // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:42: 41:55
        _0 = <Color as Equal>::isEq(move _11, move _15) -> bb20; // scope 1 at ui/traits/typeclasses-eq-example-static.rs:41:15: 41:56
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:41:15: 41:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb7: {
        _46 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:20: 43:26
        _19 = &(((*_46) as branch).0: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:20: 43:26
        _47 = deref_copy (_3.0: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:28: 43:34
        _20 = &(((*_47) as branch).1: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:28: 43:34
        _48 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:45: 43:51
        _21 = &(((*_48) as branch).0: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:45: 43:51
        _49 = deref_copy (_3.1: &ColorTree); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:53: 43:59
        _22 = &(((*_49) as branch).1: std::boxed::Box<ColorTree>); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:43:53: 43:59
        _50 = deref_copy (*_19);         // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:26: 44:40
        _54 = (((_50.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:26: 44:40
        _27 = &(*_54);                   // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:26: 44:40
        _26 = <ColorTree as Clone>::clone(move _27) -> bb10; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:26: 44:40
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:44:33: 44:38
                                         // + literal: Const { ty: for<'a> fn(&'a ColorTree) -> ColorTree {<ColorTree as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = const false;                // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:13: 45:62
        goto -> bb20;                    // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:13: 45:62
    }

    bb9: {
        _51 = deref_copy (*_20);         // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:30: 45:44
        _55 = (((_51.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:30: 45:44
        _36 = &(*_55);                   // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:30: 45:44
        _35 = <ColorTree as Clone>::clone(move _36) -> bb15; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:30: 45:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:45:37: 45:42
                                         // + literal: Const { ty: for<'a> fn(&'a ColorTree) -> ColorTree {<ColorTree as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10: {
        _25 = &_26;                      // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:25: 44:40
        _24 = _25;                       // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:25: 44:40
        _52 = deref_copy (*_21);         // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:43: 44:57
        _56 = (((_52.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:43: 44:57
        _31 = &(*_56);                   // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:43: 44:57
        _30 = <ColorTree as Clone>::clone(move _31) -> [return: bb11, unwind: bb24]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:43: 44:57
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:44:50: 44:55
                                         // + literal: Const { ty: for<'a> fn(&'a ColorTree) -> ColorTree {<ColorTree as Clone>::clone}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = &_30;                      // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:42: 44:57
        _28 = _29;                       // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:42: 44:57
        _23 = <ColorTree as Equal>::isEq(move _24, move _28) -> [return: bb12, unwind: bb23]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:13: 44:58
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:44:13: 44:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_30) -> [return: bb13, unwind: bb24]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:57: 44:58
    }

    bb13: {
        drop(_26) -> bb14;               // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:57: 44:58
    }

    bb14: {
        switchInt(move _23) -> [0: bb8, otherwise: bb9]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:13: 45:62
    }

    bb15: {
        _34 = &_35;                      // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:29: 45:44
        _33 = _34;                       // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:29: 45:44
        _53 = deref_copy (*_22);         // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:47: 45:61
        _57 = (((_53.0: std::ptr::Unique<ColorTree>).0: std::ptr::NonNull<ColorTree>).0: *const ColorTree); // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:47: 45:61
        _40 = &(*_57);                   // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:47: 45:61
        _39 = <ColorTree as Clone>::clone(move _40) -> [return: bb16, unwind: bb22]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:47: 45:61
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:45:54: 45:59
                                         // + literal: Const { ty: for<'a> fn(&'a ColorTree) -> ColorTree {<ColorTree as Clone>::clone}, val: Value(<ZST>) }
    }

    bb16: {
        _38 = &_39;                      // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:46: 45:61
        _37 = _38;                       // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:46: 45:61
        _32 = <ColorTree as Equal>::isEq(move _33, move _37) -> [return: bb17, unwind: bb21]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:17: 45:62
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:45:17: 45:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_39) -> [return: bb18, unwind: bb22]; // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:61: 45:62
    }

    bb18: {
        drop(_35) -> bb19;               // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:61: 45:62
    }

    bb19: {
        _0 = move _32;                   // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:13: 45:62
        goto -> bb20;                    // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:13: 45:62
    }

    bb20: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:49:6: 49:6
    }

    bb21 (cleanup): {
        drop(_39) -> bb22;               // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:61: 45:62
    }

    bb22 (cleanup): {
        drop(_35) -> bb25;               // scope 2 at ui/traits/typeclasses-eq-example-static.rs:45:61: 45:62
    }

    bb23 (cleanup): {
        drop(_30) -> bb24;               // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:57: 44:58
    }

    bb24 (cleanup): {
        drop(_26) -> bb25;               // scope 2 at ui/traits/typeclasses-eq-example-static.rs:44:57: 44:58
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:38:5: 49:6
    }

    bb26: {
        unreachable;                     // scope 0 at ui/traits/typeclasses-eq-example-static.rs:47:18: 47:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:52:15: 52:15
    let mut _1: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:5: 53:39
    let mut _2: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:13: 53:38
    let mut _3: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
    let _4: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
    let mut _5: &Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
    let _6: &Color;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
    let mut _7: !;                       // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:5: 53:39
    let mut _8: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:5: 54:45
    let mut _9: bool;                    // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:13: 54:44
    let mut _10: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
    let _11: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
    let mut _12: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
    let _13: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
    let mut _14: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:5: 54:45
    let mut _15: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:5: 55:42
    let mut _16: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:13: 55:41
    let mut _17: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:14: 55:41
    let mut _18: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
    let _19: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
    let mut _20: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
    let _21: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
    let mut _22: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:5: 55:42
    let mut _23: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:5: 56:43
    let mut _24: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:13: 56:42
    let mut _25: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:14: 56:42
    let mut _26: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
    let _27: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
    let mut _28: &Color;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
    let _29: &Color;                     // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
    let mut _30: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:5: 56:43
    let mut _31: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:5: 58:51
    let mut _32: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:13: 58:50
    let mut _33: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
    let _34: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
    let mut _35: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
    let _36: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
    let mut _37: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:5: 58:51
    let mut _38: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:5: 59:54
    let mut _39: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:13: 59:53
    let mut _40: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:14: 59:53
    let mut _41: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
    let _42: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
    let mut _43: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
    let _44: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
    let mut _45: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:5: 59:54
    let mut _46: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:5: 62:73
    let mut _47: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:13: 62:72
    let mut _48: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:25: 61:79
    let _49: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:25: 61:79
    let _50: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:26: 61:79
    let mut _51: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:33: 61:56
    let mut _52: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:42: 61:55
    let mut _53: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:47: 61:54
    let mut _54: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:58: 61:78
    let mut _55: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:67: 61:77
    let mut _56: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:72: 61:76
    let mut _57: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:17: 62:71
    let _58: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:17: 62:71
    let _59: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:18: 62:71
    let mut _60: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:25: 62:48
    let mut _61: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:34: 62:47
    let mut _62: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:39: 62:46
    let mut _63: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:50: 62:70
    let mut _64: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:59: 62:69
    let mut _65: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:64: 62:68
    let mut _66: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:5: 62:73
    let mut _67: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:5: 65:77
    let mut _68: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:13: 65:76
    let mut _69: bool;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:14: 65:76
    let mut _70: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:26: 64:80
    let _71: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:26: 64:80
    let _72: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:27: 64:80
    let mut _73: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:34: 64:57
    let mut _74: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:43: 64:56
    let mut _75: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:48: 64:55
    let mut _76: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:59: 64:79
    let mut _77: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:68: 64:78
    let mut _78: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:73: 64:77
    let mut _79: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:18: 65:75
    let _80: &ColorTree;                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:18: 65:75
    let _81: ColorTree;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:19: 65:75
    let mut _82: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:26: 65:49
    let mut _83: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:35: 65:48
    let mut _84: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:40: 65:47
    let mut _85: std::boxed::Box<ColorTree>; // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:51: 65:74
    let mut _86: ColorTree;              // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:60: 65:73
    let mut _87: Color;                  // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:65: 65:72
    let mut _88: !;                      // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:5: 65:77
    let _89: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _90: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _91: &[&str];                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
    let mut _92: &[&str; 1];             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
    let _93: &[&str; 1];                 // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
    let mut _94: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _95: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _96: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _97: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _98: &[&str; 1];             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
    let mut _99: &ColorTree;             // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
    let mut _100: &ColorTree;            // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
    let mut _101: &ColorTree;            // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
    let mut _102: &ColorTree;            // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
    let mut _103: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
    let mut _104: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
    let mut _105: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
    let mut _106: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
    let mut _107: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
    let mut _108: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
    let mut _109: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
    let mut _110: &Color;                // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30

    bb0: {
        _110 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[13])) }
        _4 = _110;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
        _3 = _4;                         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
        _109 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[12])) }
        _6 = _109;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
        _5 = _6;                         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
        _2 = <Color as Equal>::isEq(move _3, move _5) -> bb1; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:13: 53:38
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:53:13: 53:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:5: 53:39
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:5: 53:39
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: Equal::isEq(&cyan, &cyan)"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:5: 53:39
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:53:5: 53:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _108 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[11])) }
        _11 = _108;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
        _10 = _11;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
        _107 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[10])) }
        _13 = _107;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
        _12 = _13;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
        _9 = <Color as Equal>::isEq(move _10, move _12) -> bb4; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:13: 54:44
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:54:13: 54:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = Not(move _9);               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:5: 54:45
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:5: 54:45
    }

    bb5: {
        _14 = core::panicking::panic(const "assertion failed: Equal::isEq(&magenta, &magenta)"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:5: 54:45
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:54:5: 54:45
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _106 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[9])) }
        _19 = _106;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
        _18 = _19;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
        _105 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[8])) }
        _21 = _105;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
        _20 = _21;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
        _17 = <Color as Equal>::isEq(move _18, move _20) -> bb7; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:14: 55:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:55:14: 55:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = Not(move _17);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:13: 55:41
        _15 = Not(move _16);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:5: 55:42
        switchInt(move _15) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:5: 55:42
    }

    bb8: {
        _22 = core::panicking::panic(const "assertion failed: !Equal::isEq(&cyan, &yellow)"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:5: 55:42
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:55:5: 55:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _104 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[7])) }
        _27 = _104;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
        _26 = _27;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
        _103 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
                                         // + literal: Const { ty: &Color, val: Unevaluated(main, [], Some(promoted[6])) }
        _29 = _103;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
        _28 = _29;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
        _25 = <Color as Equal>::isEq(move _26, move _28) -> bb10; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:14: 56:42
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:56:14: 56:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Color, &'b Color) -> bool {<Color as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = Not(move _25);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:13: 56:42
        _23 = Not(move _24);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:5: 56:43
        switchInt(move _23) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:5: 56:43
    }

    bb11: {
        _30 = core::panicking::panic(const "assertion failed: !Equal::isEq(&magenta, &cyan)"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:5: 56:43
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:56:5: 56:43
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _102 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[5])) }
        _34 = _102;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
        _33 = _34;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
        _101 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[4])) }
        _36 = _101;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
        _35 = _36;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
        _32 = <ColorTree as Equal>::isEq(move _33, move _35) -> bb13; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:13: 58:50
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:58:13: 58:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = Not(move _32);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:5: 58:51
        switchInt(move _31) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:5: 58:51
    }

    bb14: {
        _37 = core::panicking::panic(const "assertion failed: Equal::isEq(&leaf(cyan), &leaf(cyan))"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:5: 58:51
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:58:5: 58:51
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _100 = const _;                  // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[3])) }
        _42 = _100;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
        _41 = _42;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
        _99 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
                                         // + literal: Const { ty: &ColorTree, val: Unevaluated(main, [], Some(promoted[2])) }
        _44 = _99;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
        _43 = _44;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
        _40 = <ColorTree as Equal>::isEq(move _41, move _43) -> bb16; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:14: 59:53
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:59:14: 59:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb16: {
        _39 = Not(move _40);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:13: 59:53
        _38 = Not(move _39);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:5: 59:54
        switchInt(move _38) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:5: 59:54
    }

    bb17: {
        _45 = core::panicking::panic(const "assertion failed: !Equal::isEq(&leaf(cyan), &leaf(yellow))"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:5: 59:54
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:59:5: 59:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _53 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:47: 61:54
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:61:47: 61:54
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _52 = ColorTree::leaf(move _53); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:42: 61:55
        _51 = Box::<ColorTree>::new(move _52) -> bb19; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:33: 61:56
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:61:33: 61:41
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb19: {
        _56 = const Color::cyan;         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:72: 61:76
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:61:72: 61:76
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x00)) }
        _55 = ColorTree::leaf(move _56); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:67: 61:77
        _54 = Box::<ColorTree>::new(move _55) -> [return: bb20, unwind: bb46]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:58: 61:78
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:61:58: 61:66
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _50 = ColorTree::branch(move _51, move _54); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:26: 61:79
        _49 = &_50;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:25: 61:79
        _48 = _49;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:25: 61:79
        _62 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:39: 62:46
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:62:39: 62:46
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _61 = ColorTree::leaf(move _62); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:34: 62:47
        _60 = Box::<ColorTree>::new(move _61) -> [return: bb21, unwind: bb45]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:25: 62:48
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:62:25: 62:33
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb21: {
        _65 = const Color::cyan;         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:64: 62:68
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:62:64: 62:68
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x00)) }
        _64 = ColorTree::leaf(move _65); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:59: 62:69
        _63 = Box::<ColorTree>::new(move _64) -> [return: bb22, unwind: bb44]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:50: 62:70
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:62:50: 62:58
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb22: {
        _59 = ColorTree::branch(move _60, move _63); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:18: 62:71
        _58 = &_59;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:17: 62:71
        _57 = _58;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:17: 62:71
        _47 = <ColorTree as Equal>::isEq(move _48, move _57) -> [return: bb23, unwind: bb43]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:13: 62:72
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:61:13: 61:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = Not(move _47);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:5: 62:73
        drop(_59) -> [return: bb24, unwind: bb45]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:72: 62:73
    }

    bb24: {
        drop(_50) -> bb25;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:72: 62:73
    }

    bb25: {
        switchInt(move _46) -> [0: bb27, otherwise: bb26]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:5: 62:73
    }

    bb26: {
        _66 = core::panicking::panic(const "assertion failed: Equal::isEq(&branch(Box::new(leaf(magenta)), Box::new(leaf(cyan))),\\n    &branch(Box::new(leaf(magenta)), Box::new(leaf(cyan))))"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:5: 62:73
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:61:5: 62:73
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _75 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:48: 64:55
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:64:48: 64:55
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _74 = ColorTree::leaf(move _75); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:43: 64:56
        _73 = Box::<ColorTree>::new(move _74) -> bb28; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:34: 64:57
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:64:34: 64:42
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb28: {
        _78 = const Color::cyan;         // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:73: 64:77
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:64:73: 64:77
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x00)) }
        _77 = ColorTree::leaf(move _78); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:68: 64:78
        _76 = Box::<ColorTree>::new(move _77) -> [return: bb29, unwind: bb42]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:59: 64:79
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:64:59: 64:67
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb29: {
        _72 = ColorTree::branch(move _73, move _76); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:27: 64:80
        _71 = &_72;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:26: 64:80
        _70 = _71;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:26: 64:80
        _84 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:40: 65:47
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:65:40: 65:47
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _83 = ColorTree::leaf(move _84); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:35: 65:48
        _82 = Box::<ColorTree>::new(move _83) -> [return: bb30, unwind: bb41]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:26: 65:49
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:65:26: 65:34
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb30: {
        _87 = const Color::magenta;      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:65: 65:72
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:65:65: 65:72
                                         // + literal: Const { ty: Color, val: Value(Scalar(0x01)) }
        _86 = ColorTree::leaf(move _87); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:60: 65:73
        _85 = Box::<ColorTree>::new(move _86) -> [return: bb31, unwind: bb40]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:51: 65:74
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:65:51: 65:59
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(ColorTree) -> Box<ColorTree> {Box::<ColorTree>::new}, val: Value(<ZST>) }
    }

    bb31: {
        _81 = ColorTree::branch(move _82, move _85); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:19: 65:75
        _80 = &_81;                      // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:18: 65:75
        _79 = _80;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:18: 65:75
        _69 = <ColorTree as Equal>::isEq(move _70, move _79) -> [return: bb32, unwind: bb39]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:14: 65:76
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:64:14: 64:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ColorTree, &'b ColorTree) -> bool {<ColorTree as Equal>::isEq}, val: Value(<ZST>) }
    }

    bb32: {
        _68 = Not(move _69);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:13: 65:76
        _67 = Not(move _68);             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:5: 65:77
        drop(_81) -> [return: bb33, unwind: bb41]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:76: 65:77
    }

    bb33: {
        drop(_72) -> bb34;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:76: 65:77
    }

    bb34: {
        switchInt(move _67) -> [0: bb36, otherwise: bb35]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:5: 65:77
    }

    bb35: {
        _88 = core::panicking::panic(const "assertion failed: !Equal::isEq(&branch(Box::new(leaf(magenta)), Box::new(leaf(cyan))),\\n        &branch(Box::new(leaf(magenta)), Box::new(leaf(magenta))))"); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:5: 65:77
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:64:5: 65:77
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _98 = const _;                   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _93 = _98;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
        _92 = _93;                       // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
        _91 = move _92 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
        _97 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _96 = _97;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _95 = _96;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _94 = move _95 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _90 = Arguments::<'_>::new_v1(move _91, move _94) -> bb37; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb37: {
        _89 = _print(move _90) -> bb38;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb38: {
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:68:2: 68:2
    }

    bb39 (cleanup): {
        drop(_81) -> bb41;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:76: 65:77
    }

    bb40 (cleanup): {
        drop(_82) -> bb41;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:74: 65:75
    }

    bb41 (cleanup): {
        drop(_72) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:65:76: 65:77
    }

    bb42 (cleanup): {
        drop(_73) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:64:79: 64:80
    }

    bb43 (cleanup): {
        drop(_59) -> bb45;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:72: 62:73
    }

    bb44 (cleanup): {
        drop(_60) -> bb45;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:70: 62:71
    }

    bb45 (cleanup): {
        drop(_50) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:62:72: 62:73
    }

    bb46 (cleanup): {
        drop(_51) -> bb47;               // scope 0 at ui/traits/typeclasses-eq-example-static.rs:61:78: 61:79
    }

    bb47 (cleanup): {
        resume;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:52:1: 68:2
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
    let mut _1: [&str; 1];               // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41

    bb0: {
        _1 = [const "Assertions all succeeded!\n"]; // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
                                         // mir::Constant
                                         // + span: ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:67:14: 67:41
    }
}

promoted[2] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:40: 59:52
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:45: 59:51

    bb0: {
        _2 = Color::yellow;              // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:45: 59:51
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:40: 59:52
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:39: 59:52
    }
}

promoted[3] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:27: 59:37
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:32: 59:36

    bb0: {
        _2 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:32: 59:36
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:27: 59:37
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:59:26: 59:37
    }
}

promoted[4] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:39: 58:49
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:44: 58:48

    bb0: {
        _2 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:44: 58:48
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:39: 58:49
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:38: 58:49
    }
}

promoted[5] in main: &ColorTree = {
    let mut _0: &ColorTree;              // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
    let mut _1: ColorTree;               // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:26: 58:36
    let mut _2: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:31: 58:35

    bb0: {
        _2 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:31: 58:35
        _1 = ColorTree::leaf(move _2);   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:26: 58:36
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:58:25: 58:36
    }
}

promoted[6] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:37: 56:41

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:37: 56:41
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:36: 56:41
    }
}

promoted[7] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:27: 56:34

    bb0: {
        _1 = Color::magenta;             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:27: 56:34
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:56:26: 56:34
    }
}

promoted[8] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:34: 55:40

    bb0: {
        _1 = Color::yellow;              // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:34: 55:40
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:33: 55:40
    }
}

promoted[9] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:27: 55:31

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:27: 55:31
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:55:26: 55:31
    }
}

promoted[10] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:36: 54:43

    bb0: {
        _1 = Color::magenta;             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:36: 54:43
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:35: 54:43
    }
}

promoted[11] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:26: 54:33

    bb0: {
        _1 = Color::magenta;             // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:26: 54:33
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:54:25: 54:33
    }
}

promoted[12] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:33: 53:37

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:33: 53:37
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:32: 53:37
    }
}

promoted[13] in main: &Color = {
    let mut _0: &Color;                  // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
    let mut _1: Color;                   // in scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:26: 53:30

    bb0: {
        _1 = Color::cyan;                // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:26: 53:30
        _0 = &_1;                        // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:53:25: 53:30
    }
}

fn ColorTree::leaf(_1: Color) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:5: 33:9

    bb0: {
        _0 = ColorTree::leaf(move _1);   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:5: 33:9
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:5: 33:9
    }
}

// MIR FOR CTFE
fn ColorTree::leaf(_1: Color) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:5: 33:9

    bb0: {
        _0 = ColorTree::leaf(move _1);   // scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:5: 33:9
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:33:5: 33:9
    }
}

fn ColorTree::branch(_1: Box<ColorTree>, _2: Box<ColorTree>) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:5: 34:11

    bb0: {
        _0 = ColorTree::branch(move _1, move _2); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:5: 34:11
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:5: 34:11
    }
}

// MIR FOR CTFE
fn ColorTree::branch(_1: Box<ColorTree>, _2: Box<ColorTree>) -> ColorTree {
    let mut _0: ColorTree;               // return place in scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:5: 34:11

    bb0: {
        _0 = ColorTree::branch(move _1, move _2); // scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:5: 34:11
        return;                          // scope 0 at ui/traits/typeclasses-eq-example-static.rs:34:5: 34:11
    }
}
