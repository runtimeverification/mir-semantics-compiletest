// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/subst2.rs:15:1: 15:28>::chomp(_1: &MyInt, _2: &MyInt) -> MyInt {
    debug self => _1;
    debug bamboo => _2;
    let mut _0: MyInt;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;

    bb0: {
        _4 = ((*_1).0: isize);
        _5 = ((*_2).0: isize);
        _3 = Add(move _4, move _5);
        _0 = mi(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/traits/inheritance/subst2.rs:21:1: 21:33>::add(_1: &MyInt, _2: &MyInt) -> MyInt {
    debug self => _1;
    debug other => _2;
    let mut _0: MyInt;

    bb0: {
        _0 = <MyInt as Panda<MyInt>>::chomp(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn f(_1: T, _2: T) -> T {
    debug x => _1;
    debug y => _2;
    let mut _0: T;
    let mut _3: &T;
    let _4: T;
    let mut _5: &T;
    let _6: &T;
    let _7: &T;

    bb0: {
        _5 = &_1;
        _6 = &_2;
        _4 = <T as Add<T, T>>::add(move _5, _6) -> [return: bb1, unwind: bb7];
    }

    bb1: {
        _3 = &_4;
        _7 = &_2;
        _0 = <T as Panda<T>>::chomp(move _3, _7) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        drop(_4) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_4) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

fn mi(_1: isize) -> MyInt {
    debug v => _1;
    let mut _0: MyInt;

    bb0: {
        _0 = MyInt { val: _1 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: MyInt;
    let _2: MyInt;
    let mut _3: (MyInt, MyInt);
    let mut _4: MyInt;
    let mut _5: MyInt;
    let mut _7: (&isize, &isize);
    let mut _8: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        debug y => _2;
        let _6: MyInt;
        scope 2 {
            debug z => _6;
            let _9: &isize;
            let _10: &isize;
            let mut _18: &isize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _4 = mi(const 3_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = mi(const 5_isize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = (move _4, move _5);
        _1 = move (_3.0: MyInt);
        _2 = move (_3.1: MyInt);
        _6 = f::<MyInt>(move _1, move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = &(_6.0: isize);
        _18 = const _;
        _7 = (move _8, _18);
        _9 = (_7.0: &isize);
        _10 = (_7.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 13_isize;
        _0 = &_1;
        return;
    }
}
