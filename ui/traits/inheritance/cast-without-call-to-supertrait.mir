// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/cast-without-call-to-supertrait.rs:19:1: 19:15>::f(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/cast-without-call-to-supertrait.rs:23:1: 23:15>::g(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 20_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &dyn Foo;
    let mut _2: &dyn Bar;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let _17: isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: &A;
    scope 1 {
        debug a => const _;
        scope 2 {
            debug afoo => _1;
            scope 3 {
                debug abar => _2;
                let _6: &isize;
                let _7: &isize;
                let _18: &isize;
                let _19: &isize;
                let mut _27: &isize;
                let mut _28: &isize;
                scope 4 {
                    debug left_val => _6;
                    debug right_val => _7;
                    let _12: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _12;
                    }
                }
                scope 6 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _24;
                    }
                }
            }
        }
    }

    bb0: {
        _29 = const _;
        _1 = _29 as &dyn Foo (Pointer(Unsize));
        _2 = _29 as &dyn Bar (Pointer(Unsize));
        _5 = <dyn Foo as Foo>::f(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _28 = const _;
        _3 = (move _4, _28);
        _6 = (_3.0: &isize);
        _7 = (_3.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _17 = <dyn Bar as Bar>::g(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _27 = const _;
        _15 = (move _16, _27);
        _18 = (_15.0: &isize);
        _19 = (_15.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 20_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A { x: const 3_isize };
        _0 = &_1;
        return;
    }
}
