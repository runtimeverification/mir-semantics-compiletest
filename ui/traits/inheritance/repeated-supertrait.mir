// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/repeated-supertrait.rs:15:1: 15:28>::same_as(_1: &i64, _2: i64) -> bool {
    debug self => _1;
    debug t => _2;
    let mut _0: bool;
    let mut _3: i64;

    bb0: {
        _3 = (*_1);
        _0 = Eq(move _3, _2);
        return;
    }
}

fn <impl at ui/traits/inheritance/repeated-supertrait.rs:19:1: 19:28>::same_as(_1: &i64, _2: u64) -> bool {
    debug self => _1;
    debug t => _2;
    let mut _0: bool;
    let mut _3: i64;
    let mut _4: i64;

    bb0: {
        _3 = (*_1);
        _4 = _2 as i64 (IntToInt);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn with_obj(_1: &dyn CompareToInts) -> bool {
    debug c => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = <dyn CompareToInts as CompareTo<i64>>::same_as(_1, const 22_i64) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _3 = <dyn CompareToInts as CompareTo<u64>>::same_as(_1, const 22_u64) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _3;
        goto -> bb3;
    }
}

fn with_trait(_1: &C) -> bool {
    debug c => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = <C as CompareTo<i64>>::same_as(_1, const 22_i64) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _3 = <C as CompareTo<u64>>::same_as(_1, const 22_u64) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _3;
        goto -> bb3;
    }
}

fn with_ufcs1(_1: &C) -> bool {
    debug c => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: &dyn CompareToInts;
    let mut _4: bool;
    let mut _5: &dyn CompareToInts;

    bb0: {
        _3 = _1 as &dyn CompareToInts (Pointer(Unsize));
        _2 = <dyn CompareToInts as CompareTo<i64>>::same_as(move _3, const 22_i64) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _5 = _1 as &dyn CompareToInts (Pointer(Unsize));
        _4 = <dyn CompareToInts as CompareTo<u64>>::same_as(move _5, const 22_u64) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _4;
        goto -> bb3;
    }
}

fn with_ufcs2(_1: &C) -> bool {
    debug c => _1;
    let mut _0: bool;
    let mut _2: bool;
    let mut _3: bool;

    bb0: {
        _2 = <C as CompareTo<i64>>::same_as(_1, const 22_i64) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _3 = <C as CompareTo<u64>>::same_as(_1, const 22_u64) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _2) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _3;
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&bool, &bool);
    let mut _2: &bool;
    let _3: bool;
    let _4: &bool;
    let _5: &bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&bool, &bool);
    let mut _14: &bool;
    let _15: bool;
    let _16: &bool;
    let _17: &bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&bool, &bool);
    let mut _26: &bool;
    let _27: bool;
    let _28: &bool;
    let _29: &bool;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&bool, &bool);
    let mut _38: &bool;
    let _39: bool;
    let mut _40: &dyn CompareToInts;
    let _41: &bool;
    let _42: &bool;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&bool, &bool);
    let mut _51: &bool;
    let _52: bool;
    let _53: &bool;
    let _54: &bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&bool, &bool);
    let mut _63: &bool;
    let _64: bool;
    let _65: &bool;
    let _66: &bool;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: bool;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _74: &bool;
    let mut _75: &i64;
    let mut _76: &bool;
    let mut _77: &i64;
    let mut _78: &bool;
    let mut _79: &i64;
    let mut _80: &bool;
    let mut _81: &i64;
    let mut _82: &bool;
    let mut _83: &i64;
    let mut _84: &bool;
    let mut _85: &i64;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _41;
        debug right_val => _42;
        let _47: core::panicking::AssertKind;
        scope 8 {
            debug kind => _47;
        }
    }
    scope 9 {
        debug left_val => _53;
        debug right_val => _54;
        let _59: core::panicking::AssertKind;
        scope 10 {
            debug kind => _59;
        }
    }
    scope 11 {
        debug left_val => _65;
        debug right_val => _66;
        let _71: core::panicking::AssertKind;
        scope 12 {
            debug kind => _71;
        }
    }

    bb0: {
        _85 = const _;
        _3 = <i64 as CompareTo<i64>>::same_as(_85, const 22_i64) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _84 = const _;
        _1 = (move _2, _84);
        _4 = (_1.0: &bool);
        _5 = (_1.1: &bool);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<bool, bool>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _83 = const _;
        _15 = <i64 as CompareTo<u64>>::same_as(_83, const 22_u64) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _82 = const _;
        _13 = (move _14, _82);
        _16 = (_13.0: &bool);
        _17 = (_13.1: &bool);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<bool, bool>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _81 = const _;
        _27 = with_trait::<i64>(_81) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _80 = const _;
        _25 = (move _26, _80);
        _28 = (_25.0: &bool);
        _29 = (_25.1: &bool);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<bool, bool>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        _79 = const _;
        _40 = _79 as &dyn CompareToInts (Pointer(Unsize));
        _39 = with_obj(move _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = &_39;
        _78 = const _;
        _37 = (move _38, _78);
        _41 = (_37.0: &bool);
        _42 = (_37.1: &bool);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<bool, bool>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb12: {
        _77 = const _;
        _52 = with_ufcs1::<i64>(_77) -> [return: bb13, unwind continue];
    }

    bb13: {
        _51 = &_52;
        _76 = const _;
        _50 = (move _51, _76);
        _53 = (_50.0: &bool);
        _54 = (_50.1: &bool);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<bool, bool>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb15: {
        _75 = const _;
        _64 = with_ufcs2::<i64>(_75) -> [return: bb16, unwind continue];
    }

    bb16: {
        _63 = &_64;
        _74 = const _;
        _62 = (move _63, _74);
        _65 = (_62.0: &bool);
        _66 = (_62.1: &bool);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<bool, bool>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 22_i64;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 22_i64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 22_i64;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 22_i64;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 22_i64;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 22_i64;
        _0 = &_1;
        return;
    }
}
