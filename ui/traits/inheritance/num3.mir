// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/num3.rs:9:1: 9:21>::from(_1: i32) -> Option<f32> {
    debug i => _1;
    let mut _0: std::option::Option<f32>;
    let mut _2: f32;

    bb0: {
        _2 = _1 as f32 (IntToFloat);
        _0 = Option::<f32>::Some(move _2);
        return;
    }
}

fn num_eq_one(_1: T) -> () {
    debug n => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &bool;
    let _10: bool;
    let mut _11: &T;
    let mut _12: &T;
    let _13: T;
    let mut _14: std::option::Option<T>;
    let mut _15: &[&str; 2];

    bb0: {
        _15 = const _;
        _4 = _15 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _14 = <T as NumCast>::from(const 1_i32) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _13 = Option::<T>::unwrap(move _14) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _12 = &_13;
        _10 = <T as PartialEq>::eq(move _11, move _12) -> [return: bb3, unwind: bb9];
    }

    bb3: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_9) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _2 = _print(move _3) -> [return: bb6, unwind: bb9];
    }

    bb6: {
        drop(_13) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_13) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in num_eq_one: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = num_eq_one::<f32>(const 1f32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
