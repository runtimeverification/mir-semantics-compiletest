// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15>::fmt(_1: &MyInt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
    let mut _6: &str;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
    let _7: &str;                        // in scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
    let mut _9: &&isize;                 // in scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
    let _10: &&isize;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
    let _11: &isize;                     // in scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
        _5 = const "MyInt";              // scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
        _7 = const "val";                // scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
        _11 = &((*_1).0: isize);         // scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
        _10 = &_11;                      // scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
        _9 = _10;                        // scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/traits/inheritance/overloading-simple.rs:8:16: 8:26
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:7:15: 7:15
    }
}

fn <impl at ui/traits/inheritance/overloading-simple.rs:10:1: 10:25>::eq(_1: &MyInt, _2: &MyInt) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:11:11: 11:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:11:18: 11:23
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/overloading-simple.rs:11:36: 11:40
    let mut _3: isize;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:11:43: 11:51
    let mut _4: isize;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:11:55: 11:64

    bb0: {
        _3 = ((*_1).0: isize);           // scope 0 at ui/traits/inheritance/overloading-simple.rs:11:43: 11:51
        _4 = ((*_2).0: isize);           // scope 0 at ui/traits/inheritance/overloading-simple.rs:11:55: 11:64
        _0 = Eq(move _3, move _4);       // scope 0 at ui/traits/inheritance/overloading-simple.rs:11:43: 11:64
        return;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:11:66: 11:66
    }
}

fn <impl at ui/traits/inheritance/overloading-simple.rs:10:1: 10:25>::ne(_1: &MyInt, _2: &MyInt) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:12:11: 12:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:12:18: 12:23
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/overloading-simple.rs:12:36: 12:40
    let mut _3: bool;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:12:44: 12:58
    let mut _4: &MyInt;                  // in scope 0 at ui/traits/inheritance/overloading-simple.rs:12:44: 12:58
    let mut _5: &MyInt;                  // in scope 0 at ui/traits/inheritance/overloading-simple.rs:12:52: 12:57

    bb0: {
        _4 = _1;                         // scope 0 at ui/traits/inheritance/overloading-simple.rs:12:44: 12:58
        _5 = _2;                         // scope 0 at ui/traits/inheritance/overloading-simple.rs:12:52: 12:57
        _3 = <MyInt as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/overloading-simple.rs:12:44: 12:58
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:12:49: 12:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/traits/inheritance/overloading-simple.rs:12:43: 12:58
        return;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:12:60: 12:60
    }
}

fn f(_1: T, _2: T) -> bool {
    debug x => _1;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:17:15: 17:16
    debug y => _2;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:17:21: 17:22
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/overloading-simple.rs:17:30: 17:34
    let mut _3: &T;                      // in scope 0 at ui/traits/inheritance/overloading-simple.rs:18:12: 18:13
    let mut _4: &T;                      // in scope 0 at ui/traits/inheritance/overloading-simple.rs:18:17: 18:18

    bb0: {
        _3 = &_1;                        // scope 0 at ui/traits/inheritance/overloading-simple.rs:18:12: 18:13
        _4 = &_2;                        // scope 0 at ui/traits/inheritance/overloading-simple.rs:18:17: 18:18
        _0 = <T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/traits/inheritance/overloading-simple.rs:18:12: 18:18
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:18:12: 18:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/traits/inheritance/overloading-simple.rs:19:1: 19:2
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/traits/inheritance/overloading-simple.rs:19:1: 19:2
    }

    bb3: {
        return;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:19:2: 19:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/traits/inheritance/overloading-simple.rs:19:1: 19:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/traits/inheritance/overloading-simple.rs:19:1: 19:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:17:1: 19:2
    }
}

fn mi(_1: isize) -> MyInt {
    debug v => _1;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:21:7: 21:8
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/overloading-simple.rs:21:20: 21:25
    let mut _2: isize;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:21:41: 21:42

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/inheritance/overloading-simple.rs:21:41: 21:42
        _0 = MyInt { val: move _2 };     // scope 0 at ui/traits/inheritance/overloading-simple.rs:21:28: 21:44
        return;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:21:46: 21:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/overloading-simple.rs:23:15: 23:15
    let _1: MyInt;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:10: 24:11
    let _2: MyInt;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:13: 24:14
    let _3: MyInt;                       // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:16: 24:17
    let mut _4: (MyInt, MyInt, MyInt);   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:21: 24:42
    let mut _5: MyInt;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:22: 24:27
    let mut _6: MyInt;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:29: 24:34
    let mut _7: MyInt;                   // in scope 0 at ui/traits/inheritance/overloading-simple.rs:24:36: 24:41
    let mut _8: bool;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:25:5: 25:20
    let mut _9: bool;                    // in scope 0 at ui/traits/inheritance/overloading-simple.rs:25:13: 25:19
    let mut _10: &MyInt;                 // in scope 0 at ui/traits/inheritance/overloading-simple.rs:25:13: 25:14
    let mut _11: &MyInt;                 // in scope 0 at ui/traits/inheritance/overloading-simple.rs:25:18: 25:19
    let mut _12: !;                      // in scope 0 at ui/traits/inheritance/overloading-simple.rs:25:5: 25:20
    let mut _13: (&MyInt, &MyInt);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/inheritance/overloading-simple.rs:24:10: 24:11
        debug y => _2;                   // in scope 1 at ui/traits/inheritance/overloading-simple.rs:24:13: 24:14
        debug z => _3;                   // in scope 1 at ui/traits/inheritance/overloading-simple.rs:24:16: 24:17
        let _16: &MyInt;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _17: &MyInt;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _16;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _17;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _22: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _22;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = mi(const 3_isize) -> bb1;   // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:22: 24:27
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:24:22: 24:24
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = mi(const 5_isize) -> bb2;   // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:29: 24:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:24:29: 24:31
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = mi(const 3_isize) -> bb3;   // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:36: 24:41
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:24:36: 24:38
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = (move _5, move _6, move _7); // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:21: 24:42
        _1 = move (_4.0: MyInt);         // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:10: 24:11
        _2 = move (_4.1: MyInt);         // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:13: 24:14
        _3 = move (_4.2: MyInt);         // scope 0 at ui/traits/inheritance/overloading-simple.rs:24:16: 24:17
        _10 = &_1;                       // scope 1 at ui/traits/inheritance/overloading-simple.rs:25:13: 25:14
        _11 = &_2;                       // scope 1 at ui/traits/inheritance/overloading-simple.rs:25:18: 25:19
        _9 = <MyInt as PartialEq>::ne(move _10, move _11) -> bb4; // scope 1 at ui/traits/inheritance/overloading-simple.rs:25:13: 25:19
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:25:13: 25:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = Not(move _9);               // scope 1 at ui/traits/inheritance/overloading-simple.rs:25:5: 25:20
        switchInt(move _8) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/traits/inheritance/overloading-simple.rs:25:5: 25:20
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: x != y"); // scope 1 at ui/traits/inheritance/overloading-simple.rs:25:5: 25:20
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading-simple.rs:25:5: 25:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _14 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = &_3;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &MyInt);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &MyInt);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <MyInt as PartialEq>::eq(move _20, move _21) -> bb7; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = Not(move _19);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb9, otherwise: bb8]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _22 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<MyInt, MyInt>(move _24, move _25, move _27, move _29); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MyInt, &'b MyInt, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MyInt, MyInt>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/traits/inheritance/overloading-simple.rs:27:2: 27:2
    }
}
