// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/self.rs:14:1: 14:18>::f(_1: &S, _2: &S) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/self.rs:15:10: 15:15
    debug x => _2;                       // in scope 0 at ui/traits/inheritance/self.rs:15:17: 15:18
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/self.rs:15:24: 15:24
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
    let mut _6: &[&str; 2];              // in scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
    let _7: &[&str; 2];                  // in scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/inheritance/self.rs:16:24: 16:27
    let mut _13: &isize;                 // in scope 0 at ui/traits/inheritance/self.rs:16:24: 16:27
    let _14: &isize;                     // in scope 0 at ui/traits/inheritance/self.rs:16:24: 16:27
    let mut _15: &[&str; 2];             // in scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22

    bb0: {
        _15 = const _;                   // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self.rs:16:18: 16:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<S as Foo<S>>::f, [], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
        _6 = _7;                         // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
        _14 = &((*_2).0: isize);         // scope 0 at ui/traits/inheritance/self.rs:16:24: 16:27
        _13 = _14;                       // scope 0 at ui/traits/inheritance/self.rs:16:24: 16:27
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _13) -> bb1; // scope 0 at ui/traits/inheritance/self.rs:16:24: 16:27
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self.rs:16:24: 16:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/inheritance/self.rs:17:6: 17:6
    }
}

promoted[0] in <impl at ui/traits/inheritance/self.rs:14:1: 14:18>::f: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self.rs:16:18: 16:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
        return;                          // scope 0 at ui/traits/inheritance/self.rs:16:18: 16:22
    }
}

fn <impl at ui/traits/inheritance/self.rs:20:1: 20:15>::g(_1: &S) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/self.rs:21:10: 21:15
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/self.rs:21:17: 21:17
    let _2: ();                          // in scope 0 at ui/traits/inheritance/self.rs:22:9: 22:21
    let mut _3: &S;                      // in scope 0 at ui/traits/inheritance/self.rs:22:9: 22:21
    let mut _4: &S;                      // in scope 0 at ui/traits/inheritance/self.rs:22:16: 22:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/inheritance/self.rs:22:9: 22:21
        _4 = _1;                         // scope 0 at ui/traits/inheritance/self.rs:22:16: 22:20
        _2 = <S as Foo<S>>::f(move _3, move _4) -> bb1; // scope 0 at ui/traits/inheritance/self.rs:22:9: 22:21
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self.rs:22:14: 22:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S, &'b S) {<S as Foo<S>>::f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/self.rs:23:6: 23:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/self.rs:26:15: 26:15
    let _1: S;                           // in scope 0 at ui/traits/inheritance/self.rs:27:9: 27:10
    let _2: ();                          // in scope 0 at ui/traits/inheritance/self.rs:28:5: 28:10
    let mut _3: &S;                      // in scope 0 at ui/traits/inheritance/self.rs:28:5: 28:10
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/traits/inheritance/self.rs:27:9: 27:10
    }

    bb0: {
        _1 = S { x: const 1_isize };     // scope 0 at ui/traits/inheritance/self.rs:27:13: 27:23
        _3 = &_1;                        // scope 1 at ui/traits/inheritance/self.rs:28:5: 28:10
        _2 = <S as Bar>::g(move _3) -> bb1; // scope 1 at ui/traits/inheritance/self.rs:28:5: 28:10
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self.rs:28:7: 28:8
                                         // + literal: Const { ty: for<'a> fn(&'a S) {<S as Bar>::g}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/self.rs:29:2: 29:2
    }
}
