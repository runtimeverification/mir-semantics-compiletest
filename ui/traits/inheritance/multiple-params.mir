// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/multiple-params.rs:10:1: 10:13>::a(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/multiple-params.rs:11:1: 11:13>::b(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 20_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/multiple-params.rs:12:1: 12:13>::c(_1: &S) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 30_isize;
        return;
    }
}

fn f(_1: &X, _2: &Y, _3: &Z) -> () {
    debug x => _1;
    debug y => _2;
    debug z => _3;
    let mut _0: ();
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let _7: &isize;
    let _8: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: isize;
    let _19: &isize;
    let _20: &isize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&isize, &isize);
    let mut _29: &isize;
    let _30: isize;
    let _31: &isize;
    let _32: &isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&isize, &isize);
    let mut _41: &isize;
    let _42: isize;
    let _43: &isize;
    let _44: &isize;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: isize;
    let mut _48: isize;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&isize, &isize);
    let mut _53: &isize;
    let _54: isize;
    let _55: &isize;
    let _56: &isize;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: isize;
    let mut _60: isize;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: &isize;
    let mut _65: &isize;
    let mut _66: &isize;
    let mut _67: &isize;
    let mut _68: &isize;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _19;
        debug right_val => _20;
        let _25: core::panicking::AssertKind;
        scope 4 {
            debug kind => _25;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _43;
        debug right_val => _44;
        let _49: core::panicking::AssertKind;
        scope 8 {
            debug kind => _49;
        }
    }
    scope 9 {
        debug left_val => _55;
        debug right_val => _56;
        let _61: core::panicking::AssertKind;
        scope 10 {
            debug kind => _61;
        }
    }

    bb0: {
        _6 = <X as A>::a(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _68 = const _;
        _4 = (move _5, _68);
        _7 = (_4.0: &isize);
        _8 = (_4.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _18 = <Y as A>::a(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &_18;
        _67 = const _;
        _16 = (move _17, _67);
        _19 = (_16.0: &isize);
        _20 = (_16.1: &isize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<isize, isize>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb6: {
        _30 = <Y as B>::b(_2) -> [return: bb7, unwind continue];
    }

    bb7: {
        _29 = &_30;
        _66 = const _;
        _28 = (move _29, _66);
        _31 = (_28.0: &isize);
        _32 = (_28.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _42 = <Z as A>::a(_3) -> [return: bb10, unwind continue];
    }

    bb10: {
        _41 = &_42;
        _65 = const _;
        _40 = (move _41, _65);
        _43 = (_40.0: &isize);
        _44 = (_40.1: &isize);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<isize, isize>(move _49, _43, _44, move _51) -> unwind continue;
    }

    bb12: {
        _54 = <Z as C>::c(_3) -> [return: bb13, unwind continue];
    }

    bb13: {
        _53 = &_54;
        _64 = const _;
        _52 = (move _53, _64);
        _55 = (_52.0: &isize);
        _56 = (_52.1: &isize);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<isize, isize>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 30_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 20_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &S;
    scope 1 {
        debug s => const _;
    }

    bb0: {
        _2 = const _;
        _1 = f::<S, S, S>(_2, _2, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &S = {
    let mut _0: &S;
    let mut _1: S;
    let mut _2: ();

    bb0: {
        _2 = ();
        _1 = S { bogus: move _2 };
        _0 = &_1;
        return;
    }
}
