// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static FUZZY_EPSILON: f64 = {
    let mut _0: f64;                     // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:4:27: 4:30

    bb0: {
        _0 = const 0.10000000000000001f64; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:4:33: 4:36
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:4:1: 4:37
    }
}

fn <impl at ui/traits/inheritance/self-in-supertype.rs:15:1: 15:26>::fuzzy_eq(_1: &f32, _2: &f32) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:16:17: 16:22
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:16:24: 16:29
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:16:40: 16:44
    let mut _3: &f32;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:9: 17:58
    let mut _4: &f32;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:27: 17:32
    let mut _5: &f32;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:34: 17:57
    let _6: &f32;                        // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:34: 17:57
    let _7: f32;                         // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:35: 17:57
    let mut _8: f64;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:36: 17:49

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:9: 17:58
        _4 = _2;                         // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:27: 17:32
        _8 = const 0.10000000000000001f64; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:36: 17:49
        _7 = move _8 as f32 (FloatToFloat); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:35: 17:57
        _6 = &_7;                        // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:34: 17:57
        _5 = _6;                         // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:34: 17:57
        _0 = <f32 as FuzzyEq<f32>>::fuzzy_eq_eps(move _3, move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:17:9: 17:58
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:17:14: 17:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a f32, &'b f32, &'c f32) -> bool {<f32 as FuzzyEq<f32>>::fuzzy_eq_eps}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:18:6: 18:6
    }
}

fn <impl at ui/traits/inheritance/self-in-supertype.rs:15:1: 15:26>::fuzzy_eq_eps(_1: &f32, _2: &f32, _3: &f32) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:20:21: 20:26
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:20:28: 20:33
    debug epsilon => _3;                 // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:20:41: 20:48
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:20:59: 20:63
    let mut _4: f32;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:9: 21:31
    let mut _5: f32;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:9: 21:25
    let mut _6: f32;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:10: 21:15
    let mut _7: f32;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:18: 21:24
    let mut _8: f32;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:34: 21:42

    bb0: {
        _6 = (*_1);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:10: 21:15
        _7 = (*_2);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:18: 21:24
        _5 = Sub(move _6, move _7);      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:9: 21:25
        _4 = f32::<impl f32>::abs(move _5) -> bb1; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:9: 21:31
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:21:26: 21:29
                                         // + literal: Const { ty: fn(f32) -> f32 {f32::<impl f32>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (*_3);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:34: 21:42
        _0 = Lt(move _4, move _8);       // scope 0 at ui/traits/inheritance/self-in-supertype.rs:21:9: 21:42
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:22:6: 22:6
    }
}

fn <impl at ui/traits/inheritance/self-in-supertype.rs:25:1: 25:19>::two_pi() -> f32 {
    let mut _0: f32;                     // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:26:20: 26:23

    bb0: {
        _0 = const 6.28318548f32;        // scope 0 at ui/traits/inheritance/self-in-supertype.rs:26:26: 26:67
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:26:69: 26:69
    }
}

fn <impl at ui/traits/inheritance/self-in-supertype.rs:29:1: 29:26>::fuzzy_eq(_1: &f64, _2: &f64) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:30:17: 30:22
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:30:24: 30:29
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:30:40: 30:44
    let mut _3: &f64;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:9: 31:58
    let mut _4: &f64;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:27: 31:32
    let mut _5: &f64;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:34: 31:57
    let _6: &f64;                        // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:34: 31:57
    let _7: f64;                         // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:35: 31:57
    let mut _8: &f64;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:36: 31:49

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:9: 31:58
        _4 = _2;                         // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:27: 31:32
        _8 = const {alloc1: &f64};       // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:36: 31:49
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:31:36: 31:49
                                         // + literal: Const { ty: &f64, val: Value(Scalar(alloc1)) }
        _7 = (*_8);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:36: 31:49
        _6 = &_7;                        // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:34: 31:57
        _5 = _6;                         // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:34: 31:57
        _0 = <f64 as FuzzyEq<f64>>::fuzzy_eq_eps(move _3, move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:31:9: 31:58
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:31:14: 31:26
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a f64, &'b f64, &'c f64) -> bool {<f64 as FuzzyEq<f64>>::fuzzy_eq_eps}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:32:6: 32:6
    }
}

alloc1 (static: FUZZY_EPSILON, size: 8, align: 8) {
    9a 99 99 99 99 99 b9 3f                         â”‚ .......?
}

fn <impl at ui/traits/inheritance/self-in-supertype.rs:29:1: 29:26>::fuzzy_eq_eps(_1: &f64, _2: &f64, _3: &f64) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:34:21: 34:26
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:34:28: 34:33
    debug epsilon => _3;                 // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:34:41: 34:48
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:34:59: 34:63
    let mut _4: f64;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:9: 35:31
    let mut _5: f64;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:9: 35:25
    let mut _6: f64;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:10: 35:15
    let mut _7: f64;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:18: 35:24
    let mut _8: f64;                     // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:34: 35:42

    bb0: {
        _6 = (*_1);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:10: 35:15
        _7 = (*_2);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:18: 35:24
        _5 = Sub(move _6, move _7);      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:9: 35:25
        _4 = f64::<impl f64>::abs(move _5) -> bb1; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:9: 35:31
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:35:26: 35:29
                                         // + literal: Const { ty: fn(f64) -> f64 {f64::<impl f64>::abs}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = (*_3);                      // scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:34: 35:42
        _0 = Lt(move _4, move _8);       // scope 0 at ui/traits/inheritance/self-in-supertype.rs:35:9: 35:42
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:36:6: 36:6
    }
}

fn <impl at ui/traits/inheritance/self-in-supertype.rs:39:1: 39:19>::two_pi() -> f64 {
    let mut _0: f64;                     // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:40:20: 40:23

    bb0: {
        _0 = const 6.2831853071795862f64; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:40:26: 40:67
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:40:69: 40:69
    }
}

fn compare(_1: F) -> bool {
    debug f1 => _1;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:43:21: 43:23
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:43:31: 43:35
    let _2: F;                           // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:44:9: 44:11
    let mut _3: &F;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:45:5: 45:21
    let mut _4: &F;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:45:17: 45:20
    let _5: &F;                          // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:45:17: 45:20
    scope 1 {
        debug f2 => _2;                  // in scope 1 at ui/traits/inheritance/self-in-supertype.rs:44:9: 44:11
    }

    bb0: {
        _2 = <F as Float>::two_pi() -> [return: bb1, unwind: bb6]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:44:14: 44:29
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:44:14: 44:27
                                         // + literal: Const { ty: fn() -> F {<F as Float>::two_pi}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at ui/traits/inheritance/self-in-supertype.rs:45:5: 45:21
        _5 = &_2;                        // scope 1 at ui/traits/inheritance/self-in-supertype.rs:45:17: 45:20
        _4 = _5;                         // scope 1 at ui/traits/inheritance/self-in-supertype.rs:45:17: 45:20
        _0 = <F as FuzzyEq<F>>::fuzzy_eq(move _3, move _4) -> [return: bb2, unwind: bb5]; // scope 1 at ui/traits/inheritance/self-in-supertype.rs:45:5: 45:21
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:45:8: 45:16
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a F, &'b F) -> bool {<F as FuzzyEq<F>>::fuzzy_eq}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb6]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:46:1: 46:2
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/inheritance/self-in-supertype.rs:46:1: 46:2
    }

    bb4: {
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:46:2: 46:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/traits/inheritance/self-in-supertype.rs:46:1: 46:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/traits/inheritance/self-in-supertype.rs:46:1: 46:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:43:1: 46:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/self-in-supertype.rs:48:15: 48:15
    let mut _1: bool;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:5: 49:67
    let mut _2: bool;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:13: 49:66
    let mut _3: !;                       // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:5: 49:67
    let mut _4: bool;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:5: 50:34
    let mut _5: bool;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:13: 50:33
    let mut _6: !;                       // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:5: 50:34
    let mut _7: bool;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:5: 51:33
    let mut _8: bool;                    // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:13: 51:32
    let mut _9: !;                       // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:5: 51:33
    let mut _10: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:5: 52:34
    let mut _11: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:13: 52:33
    let mut _12: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:5: 52:34
    let mut _13: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:5: 53:68
    let mut _14: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:13: 53:67
    let mut _15: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:14: 53:67
    let mut _16: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:5: 53:68
    let mut _17: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:5: 54:35
    let mut _18: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:13: 54:34
    let mut _19: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:14: 54:34
    let mut _20: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:5: 54:35
    let mut _21: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:5: 56:67
    let mut _22: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:13: 56:66
    let mut _23: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:5: 56:67
    let mut _24: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:5: 57:34
    let mut _25: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:13: 57:33
    let mut _26: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:5: 57:34
    let mut _27: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:5: 58:33
    let mut _28: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:13: 58:32
    let mut _29: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:5: 58:33
    let mut _30: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:5: 59:34
    let mut _31: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:13: 59:33
    let mut _32: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:5: 59:34
    let mut _33: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:5: 60:68
    let mut _34: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:13: 60:67
    let mut _35: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:14: 60:67
    let mut _36: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:5: 60:68
    let mut _37: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:5: 61:35
    let mut _38: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:13: 61:34
    let mut _39: bool;                   // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:14: 61:34
    let mut _40: !;                      // in scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:5: 61:35

    bb0: {
        _2 = compare::<f32>(const 6.28318548f32) -> bb1; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:13: 49:66
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:49:13: 49:27
                                         // + literal: Const { ty: fn(f32) -> bool {compare::<f32>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:5: 49:67
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:5: 49:67
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: compare::<f32>(6.28318530717958647692528676655900576)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:49:5: 49:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:49:5: 49:67
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _5 = compare::<f32>(const 6.28999996f32) -> bb4; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:13: 50:33
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:50:13: 50:27
                                         // + literal: Const { ty: fn(f32) -> bool {compare::<f32>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = Not(move _5);               // scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:5: 50:34
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:5: 50:34
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: compare::<f32>(6.29)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:50:5: 50:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:50:5: 50:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _8 = compare::<f32>(const 6.30000019f32) -> bb7; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:13: 51:32
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:51:13: 51:27
                                         // + literal: Const { ty: fn(f32) -> bool {compare::<f32>}, val: Value(<ZST>) }
    }

    bb7: {
        _7 = Not(move _8);               // scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:5: 51:33
        switchInt(move _7) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:5: 51:33
    }

    bb8: {
        _9 = core::panicking::panic(const "assertion failed: compare::<f32>(6.3)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:51:5: 51:33
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:51:5: 51:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _11 = compare::<f32>(const 6.19000006f32) -> bb10; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:13: 52:33
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:52:13: 52:27
                                         // + literal: Const { ty: fn(f32) -> bool {compare::<f32>}, val: Value(<ZST>) }
    }

    bb10: {
        _10 = Not(move _11);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:5: 52:34
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:5: 52:34
    }

    bb11: {
        _12 = core::panicking::panic(const "assertion failed: compare::<f32>(6.19)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:52:5: 52:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:52:5: 52:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _15 = compare::<f32>(const 7.28318548f32) -> bb13; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:14: 53:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:53:14: 53:28
                                         // + literal: Const { ty: fn(f32) -> bool {compare::<f32>}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = Not(move _15);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:13: 53:67
        _13 = Not(move _14);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:5: 53:68
        switchInt(move _13) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:5: 53:68
    }

    bb14: {
        _16 = core::panicking::panic(const "assertion failed: !compare::<f32>(7.28318530717958647692528676655900576)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:53:5: 53:68
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:53:5: 53:68
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _19 = compare::<f32>(const 6.17999983f32) -> bb16; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:14: 54:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:54:14: 54:28
                                         // + literal: Const { ty: fn(f32) -> bool {compare::<f32>}, val: Value(<ZST>) }
    }

    bb16: {
        _18 = Not(move _19);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:13: 54:34
        _17 = Not(move _18);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:5: 54:35
        switchInt(move _17) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:5: 54:35
    }

    bb17: {
        _20 = core::panicking::panic(const "assertion failed: !compare::<f32>(6.18)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:54:5: 54:35
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:54:5: 54:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _22 = compare::<f64>(const 6.2831853071795862f64) -> bb19; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:13: 56:66
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:56:13: 56:27
                                         // + literal: Const { ty: fn(f64) -> bool {compare::<f64>}, val: Value(<ZST>) }
    }

    bb19: {
        _21 = Not(move _22);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:5: 56:67
        switchInt(move _21) -> [0: bb21, otherwise: bb20]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:5: 56:67
    }

    bb20: {
        _23 = core::panicking::panic(const "assertion failed: compare::<f64>(6.28318530717958647692528676655900576)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:56:5: 56:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:56:5: 56:67
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _25 = compare::<f64>(const 6.29f64) -> bb22; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:13: 57:33
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:57:13: 57:27
                                         // + literal: Const { ty: fn(f64) -> bool {compare::<f64>}, val: Value(<ZST>) }
    }

    bb22: {
        _24 = Not(move _25);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:5: 57:34
        switchInt(move _24) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:5: 57:34
    }

    bb23: {
        _26 = core::panicking::panic(const "assertion failed: compare::<f64>(6.29)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:57:5: 57:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:57:5: 57:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _28 = compare::<f64>(const 6.2999999999999998f64) -> bb25; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:13: 58:32
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:58:13: 58:27
                                         // + literal: Const { ty: fn(f64) -> bool {compare::<f64>}, val: Value(<ZST>) }
    }

    bb25: {
        _27 = Not(move _28);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:5: 58:33
        switchInt(move _27) -> [0: bb27, otherwise: bb26]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:5: 58:33
    }

    bb26: {
        _29 = core::panicking::panic(const "assertion failed: compare::<f64>(6.3)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:58:5: 58:33
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:58:5: 58:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _31 = compare::<f64>(const 6.1900000000000004f64) -> bb28; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:13: 59:33
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:59:13: 59:27
                                         // + literal: Const { ty: fn(f64) -> bool {compare::<f64>}, val: Value(<ZST>) }
    }

    bb28: {
        _30 = Not(move _31);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:5: 59:34
        switchInt(move _30) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:5: 59:34
    }

    bb29: {
        _32 = core::panicking::panic(const "assertion failed: compare::<f64>(6.19)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:59:5: 59:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:59:5: 59:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _35 = compare::<f64>(const 7.2831853071795862f64) -> bb31; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:14: 60:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:60:14: 60:28
                                         // + literal: Const { ty: fn(f64) -> bool {compare::<f64>}, val: Value(<ZST>) }
    }

    bb31: {
        _34 = Not(move _35);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:13: 60:67
        _33 = Not(move _34);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:5: 60:68
        switchInt(move _33) -> [0: bb33, otherwise: bb32]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:5: 60:68
    }

    bb32: {
        _36 = core::panicking::panic(const "assertion failed: !compare::<f64>(7.28318530717958647692528676655900576)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:60:5: 60:68
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:60:5: 60:68
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _39 = compare::<f64>(const 6.1799999999999997f64) -> bb34; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:14: 61:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:61:14: 61:28
                                         // + literal: Const { ty: fn(f64) -> bool {compare::<f64>}, val: Value(<ZST>) }
    }

    bb34: {
        _38 = Not(move _39);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:13: 61:34
        _37 = Not(move _38);             // scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:5: 61:35
        switchInt(move _37) -> [0: bb36, otherwise: bb35]; // scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:5: 61:35
    }

    bb35: {
        _40 = core::panicking::panic(const "assertion failed: !compare::<f64>(6.18)"); // scope 0 at ui/traits/inheritance/self-in-supertype.rs:61:5: 61:35
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/self-in-supertype.rs:61:5: 61:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        return;                          // scope 0 at ui/traits/inheritance/self-in-supertype.rs:62:2: 62:2
    }
}
