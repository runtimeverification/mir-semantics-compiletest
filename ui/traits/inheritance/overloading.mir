// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/overloading.rs:7:10: 7:15>::clone(_1: &MyInt) -> MyInt {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:7:10: 7:15
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/overloading.rs:7:10: 7:15
    let mut _2: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let mut _3: &isize;                  // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let _4: &isize;                      // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26

    bb0: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _3 = _4;                         // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _2 = (*_3);                      // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _0 = MyInt { val: move _2 };     // scope 0 at ui/traits/inheritance/overloading.rs:7:10: 7:15
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:7:15: 7:15
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:7:17: 7:22>::fmt(_1: &MyInt, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
    debug f => _2;                       // in scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
    let mut _4: &str;                    // in scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
    let _5: &str;                        // in scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
    let mut _6: &str;                    // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let _7: &str;                        // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let mut _9: &&isize;                 // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let _10: &&isize;                    // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
    let _11: &isize;                     // in scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
        _5 = const "MyInt";              // scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:7:17: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
        _7 = const "val";                // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:8:16: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _11 = &((*_1).0: isize);         // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _10 = &_11;                      // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _9 = _10;                        // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/traits/inheritance/overloading.rs:8:16: 8:26
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/traits/inheritance/overloading.rs:7:17: 7:22
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:7:17: 7:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:7:22: 7:22
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:10:1: 10:19>::add(_1: MyInt, _2: MyInt) -> MyInt {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:13:12: 13:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading.rs:13:18: 13:23
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/overloading.rs:13:35: 13:40
    let mut _3: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:66
    let mut _4: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:54
    let mut _5: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:13:57: 13:66
    let mut _6: (isize, bool);           // in scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:66

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:54
        _5 = (_2.0: isize);              // scope 0 at ui/traits/inheritance/overloading.rs:13:57: 13:66
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:66
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:66
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/traits/inheritance/overloading.rs:13:46: 13:66
        _0 = mi(move _3) -> bb2;         // scope 0 at ui/traits/inheritance/overloading.rs:13:43: 13:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:13:43: 13:45
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:13:69: 13:69
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:16:1: 16:19>::sub(_1: MyInt, _2: MyInt) -> MyInt {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:19:12: 19:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading.rs:19:18: 19:23
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/overloading.rs:19:35: 19:40
    let mut _3: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:66
    let mut _4: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:54
    let mut _5: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:19:57: 19:66
    let mut _6: (isize, bool);           // in scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:66

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:54
        _5 = (_2.0: isize);              // scope 0 at ui/traits/inheritance/overloading.rs:19:57: 19:66
        _6 = CheckedSub(_4, _5);         // scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:66
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:66
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/traits/inheritance/overloading.rs:19:46: 19:66
        _0 = mi(move _3) -> bb2;         // scope 0 at ui/traits/inheritance/overloading.rs:19:43: 19:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:19:43: 19:45
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:19:69: 19:69
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:22:1: 22:19>::mul(_1: MyInt, _2: MyInt) -> MyInt {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:25:12: 25:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading.rs:25:18: 25:23
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/overloading.rs:25:35: 25:40
    let mut _3: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:66
    let mut _4: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:54
    let mut _5: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:25:57: 25:66
    let mut _6: (isize, bool);           // in scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:66

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:54
        _5 = (_2.0: isize);              // scope 0 at ui/traits/inheritance/overloading.rs:25:57: 25:66
        _6 = CheckedMul(_4, _5);         // scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:66
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:66
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/traits/inheritance/overloading.rs:25:46: 25:66
        _0 = mi(move _3) -> bb2;         // scope 0 at ui/traits/inheritance/overloading.rs:25:43: 25:67
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:25:43: 25:45
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:25:69: 25:69
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:28:1: 28:25>::eq(_1: &MyInt, _2: &MyInt) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:29:11: 29:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading.rs:29:18: 29:23
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/overloading.rs:29:36: 29:40
    let mut _3: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:29:43: 29:51
    let mut _4: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:29:55: 29:64

    bb0: {
        _3 = ((*_1).0: isize);           // scope 0 at ui/traits/inheritance/overloading.rs:29:43: 29:51
        _4 = ((*_2).0: isize);           // scope 0 at ui/traits/inheritance/overloading.rs:29:55: 29:64
        _0 = Eq(move _3, move _4);       // scope 0 at ui/traits/inheritance/overloading.rs:29:43: 29:64
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:29:66: 29:66
    }
}

fn <impl at ui/traits/inheritance/overloading.rs:28:1: 28:25>::ne(_1: &MyInt, _2: &MyInt) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/overloading.rs:30:11: 30:16
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/overloading.rs:30:18: 30:23
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/overloading.rs:30:36: 30:40
    let mut _3: bool;                    // in scope 0 at ui/traits/inheritance/overloading.rs:30:44: 30:58
    let mut _4: &MyInt;                  // in scope 0 at ui/traits/inheritance/overloading.rs:30:44: 30:58
    let mut _5: &MyInt;                  // in scope 0 at ui/traits/inheritance/overloading.rs:30:52: 30:57

    bb0: {
        _4 = _1;                         // scope 0 at ui/traits/inheritance/overloading.rs:30:44: 30:58
        _5 = _2;                         // scope 0 at ui/traits/inheritance/overloading.rs:30:52: 30:57
        _3 = <MyInt as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/overloading.rs:30:44: 30:58
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:30:49: 30:51
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/traits/inheritance/overloading.rs:30:43: 30:58
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:30:60: 30:60
    }
}

fn f(_1: T, _2: T) -> (T, T, T) {
    debug x => _1;                       // in scope 0 at ui/traits/inheritance/overloading.rs:35:15: 35:16
    debug y => _2;                       // in scope 0 at ui/traits/inheritance/overloading.rs:35:21: 35:22
    let mut _0: (T, T, T);               // return place in scope 0 at ui/traits/inheritance/overloading.rs:35:30: 35:39
    let mut _3: T;                       // in scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
    let mut _4: T;                       // in scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:22
    let mut _5: &T;                      // in scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:22
    let mut _6: T;                       // in scope 0 at ui/traits/inheritance/overloading.rs:36:25: 36:34
    let mut _7: &T;                      // in scope 0 at ui/traits/inheritance/overloading.rs:36:25: 36:34
    let mut _8: T;                       // in scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:57
    let mut _9: T;                       // in scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:45
    let mut _10: &T;                     // in scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:45
    let mut _11: T;                      // in scope 0 at ui/traits/inheritance/overloading.rs:36:48: 36:57
    let mut _12: &T;                     // in scope 0 at ui/traits/inheritance/overloading.rs:36:48: 36:57
    let mut _13: T;                      // in scope 0 at ui/traits/inheritance/overloading.rs:36:59: 36:64
    let mut _14: T;                      // in scope 0 at ui/traits/inheritance/overloading.rs:36:59: 36:60
    let mut _15: T;                      // in scope 0 at ui/traits/inheritance/overloading.rs:36:63: 36:64
    let mut _16: bool;                   // in scope 0 at ui/traits/inheritance/overloading.rs:36:56: 36:57
    let mut _17: bool;                   // in scope 0 at ui/traits/inheritance/overloading.rs:36:33: 36:34
    let mut _18: bool;                   // in scope 0 at ui/traits/inheritance/overloading.rs:37:1: 37:2
    let mut _19: bool;                   // in scope 0 at ui/traits/inheritance/overloading.rs:37:1: 37:2

    bb0: {
        _17 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _16 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _18 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _19 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _19 = const true;                // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _18 = const true;                // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _5 = &_1;                        // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:22
        _4 = <T as Clone>::clone(move _5) -> [return: bb1, unwind: bb17]; // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:22
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:15: 36:20
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = const true;                // scope 0 at ui/traits/inheritance/overloading.rs:36:21: 36:22
        _7 = &_2;                        // scope 0 at ui/traits/inheritance/overloading.rs:36:25: 36:34
        _6 = <T as Clone>::clone(move _7) -> [return: bb2, unwind: bb15]; // scope 0 at ui/traits/inheritance/overloading.rs:36:25: 36:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:27: 36:32
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _17 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
        _3 = <T as Add>::add(move _4, move _6) -> [return: bb3, unwind: bb15]; // scope 0 at ui/traits/inheritance/overloading.rs:36:13: 36:34
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:13: 36:34
                                         // + literal: Const { ty: fn(T, T) -> <T as Add>::Output {<T as Add>::add}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:33: 36:34
        _10 = &_1;                       // scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:45
        _9 = <T as Clone>::clone(move _10) -> [return: bb4, unwind: bb9]; // scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:45
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:38: 36:43
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = const true;                // scope 0 at ui/traits/inheritance/overloading.rs:36:44: 36:45
        _12 = &_2;                       // scope 0 at ui/traits/inheritance/overloading.rs:36:48: 36:57
        _11 = <T as Clone>::clone(move _12) -> [return: bb5, unwind: bb13]; // scope 0 at ui/traits/inheritance/overloading.rs:36:48: 36:57
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:50: 36:55
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:57
        _8 = <T as Sub>::sub(move _9, move _11) -> [return: bb6, unwind: bb13]; // scope 0 at ui/traits/inheritance/overloading.rs:36:36: 36:57
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:36: 36:57
                                         // + literal: Const { ty: fn(T, T) -> <T as Sub>::Output {<T as Sub>::sub}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:56: 36:57
        _19 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:59: 36:60
        _14 = move _1;                   // scope 0 at ui/traits/inheritance/overloading.rs:36:59: 36:60
        _18 = const false;               // scope 0 at ui/traits/inheritance/overloading.rs:36:63: 36:64
        _15 = move _2;                   // scope 0 at ui/traits/inheritance/overloading.rs:36:63: 36:64
        _13 = <T as Mul>::mul(move _14, move _15) -> [return: bb7, unwind: bb8]; // scope 0 at ui/traits/inheritance/overloading.rs:36:59: 36:64
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:36:59: 36:64
                                         // + literal: Const { ty: fn(T, T) -> <T as Mul>::Output {<T as Mul>::mul}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = (move _3, move _8, move _13); // scope 0 at ui/traits/inheritance/overloading.rs:36:12: 36:65
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:37:2: 37:2
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 0 at ui/traits/inheritance/overloading.rs:36:64: 36:65
    }

    bb9 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at ui/traits/inheritance/overloading.rs:36:64: 36:65
    }

    bb10 (cleanup): {
        switchInt(_19) -> [0: bb11, otherwise: bb18]; // scope 0 at ui/traits/inheritance/overloading.rs:37:1: 37:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/traits/inheritance/overloading.rs:35:1: 37:2
    }

    bb12 (cleanup): {
        drop(_9) -> bb9;                 // scope 0 at ui/traits/inheritance/overloading.rs:36:56: 36:57
    }

    bb13 (cleanup): {
        switchInt(_16) -> [0: bb9, otherwise: bb12]; // scope 0 at ui/traits/inheritance/overloading.rs:36:56: 36:57
    }

    bb14 (cleanup): {
        drop(_4) -> bb17;                // scope 0 at ui/traits/inheritance/overloading.rs:36:33: 36:34
    }

    bb15 (cleanup): {
        switchInt(_17) -> [0: bb17, otherwise: bb14]; // scope 0 at ui/traits/inheritance/overloading.rs:36:33: 36:34
    }

    bb16 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/traits/inheritance/overloading.rs:37:1: 37:2
    }

    bb17 (cleanup): {
        switchInt(_18) -> [0: bb10, otherwise: bb16]; // scope 0 at ui/traits/inheritance/overloading.rs:37:1: 37:2
    }

    bb18 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/traits/inheritance/overloading.rs:37:1: 37:2
    }
}

fn mi(_1: isize) -> MyInt {
    debug v => _1;                       // in scope 0 at ui/traits/inheritance/overloading.rs:39:7: 39:8
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/overloading.rs:39:20: 39:25
    let mut _2: isize;                   // in scope 0 at ui/traits/inheritance/overloading.rs:39:41: 39:42

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/inheritance/overloading.rs:39:41: 39:42
        _0 = MyInt { val: move _2 };     // scope 0 at ui/traits/inheritance/overloading.rs:39:28: 39:44
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:39:46: 39:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/overloading.rs:41:15: 41:15
    let _1: MyInt;                       // in scope 0 at ui/traits/inheritance/overloading.rs:42:10: 42:11
    let _2: MyInt;                       // in scope 0 at ui/traits/inheritance/overloading.rs:42:13: 42:14
    let mut _3: (MyInt, MyInt);          // in scope 0 at ui/traits/inheritance/overloading.rs:42:18: 42:32
    let mut _4: MyInt;                   // in scope 0 at ui/traits/inheritance/overloading.rs:42:19: 42:24
    let mut _5: MyInt;                   // in scope 0 at ui/traits/inheritance/overloading.rs:42:26: 42:31
    let mut _9: (MyInt, MyInt, MyInt);   // in scope 0 at ui/traits/inheritance/overloading.rs:43:21: 43:28
    let mut _10: MyInt;                  // in scope 0 at ui/traits/inheritance/overloading.rs:43:23: 43:24
    let mut _11: MyInt;                  // in scope 0 at ui/traits/inheritance/overloading.rs:43:26: 43:27
    let mut _12: (&MyInt, &MyInt);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _14: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _15: MyInt;                      // in scope 0 at ui/traits/inheritance/overloading.rs:44:19: 44:24
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&MyInt, &MyInt);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _32: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _33: MyInt;                      // in scope 0 at ui/traits/inheritance/overloading.rs:45:19: 45:25
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _48: (&MyInt, &MyInt);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _49: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _50: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _51: MyInt;                      // in scope 0 at ui/traits/inheritance/overloading.rs:46:19: 46:25
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _56: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _57: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _59: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _60: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _61: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _62: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _63: &MyInt;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _64: &MyInt;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/inheritance/overloading.rs:42:10: 42:11
        debug y => _2;                   // in scope 1 at ui/traits/inheritance/overloading.rs:42:13: 42:14
        let _6: MyInt;                   // in scope 1 at ui/traits/inheritance/overloading.rs:43:10: 43:11
        let _7: MyInt;                   // in scope 1 at ui/traits/inheritance/overloading.rs:43:13: 43:14
        let _8: MyInt;                   // in scope 1 at ui/traits/inheritance/overloading.rs:43:16: 43:17
        scope 2 {
            debug a => _6;               // in scope 2 at ui/traits/inheritance/overloading.rs:43:10: 43:11
            debug b => _7;               // in scope 2 at ui/traits/inheritance/overloading.rs:43:13: 43:14
            debug c => _8;               // in scope 2 at ui/traits/inheritance/overloading.rs:43:16: 43:17
            let _16: &MyInt;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &MyInt;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _34: &MyInt;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _35: &MyInt;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _52: &MyInt;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _53: &MyInt;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _34;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _35;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _40: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _40;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug left_val => _52;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _53;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _58: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _58;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = mi(const 3_isize) -> bb1;   // scope 0 at ui/traits/inheritance/overloading.rs:42:19: 42:24
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:42:19: 42:21
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = mi(const 5_isize) -> bb2;   // scope 0 at ui/traits/inheritance/overloading.rs:42:26: 42:31
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:42:26: 42:28
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = (move _4, move _5);         // scope 0 at ui/traits/inheritance/overloading.rs:42:18: 42:32
        _1 = move (_3.0: MyInt);         // scope 0 at ui/traits/inheritance/overloading.rs:42:10: 42:11
        _2 = move (_3.1: MyInt);         // scope 0 at ui/traits/inheritance/overloading.rs:42:13: 42:14
        _10 = move _1;                   // scope 1 at ui/traits/inheritance/overloading.rs:43:23: 43:24
        _11 = move _2;                   // scope 1 at ui/traits/inheritance/overloading.rs:43:26: 43:27
        _9 = f::<MyInt>(move _10, move _11) -> bb3; // scope 1 at ui/traits/inheritance/overloading.rs:43:21: 43:28
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:43:21: 43:22
                                         // + literal: Const { ty: fn(MyInt, MyInt) -> (MyInt, MyInt, MyInt) {f::<MyInt>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = move (_9.0: MyInt);         // scope 1 at ui/traits/inheritance/overloading.rs:43:10: 43:11
        _7 = move (_9.1: MyInt);         // scope 1 at ui/traits/inheritance/overloading.rs:43:13: 43:14
        _8 = move (_9.2: MyInt);         // scope 1 at ui/traits/inheritance/overloading.rs:43:16: 43:17
        _13 = &_6;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = mi(const 8_isize) -> bb4;  // scope 2 at ui/traits/inheritance/overloading.rs:44:19: 44:24
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:44:19: 44:21
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = &_15;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _14);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_12.0: &MyInt);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_12.1: &MyInt);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <MyInt as PartialEq>::eq(move _20, move _21) -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<MyInt, MyInt>(move _24, move _25, move _27, move _29); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MyInt, &'b MyInt, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MyInt, MyInt>}, val: Value(<ZST>) }
    }

    bb7: {
        _31 = &_7;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _33 = mi(const -2_isize) -> bb8; // scope 2 at ui/traits/inheritance/overloading.rs:45:19: 45:25
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:45:19: 45:21
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb8: {
        _32 = &_33;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _32);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_30.0: &MyInt);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_30.1: &MyInt);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <MyInt as PartialEq>::eq(move _38, move _39) -> bb9; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = Not(move _37);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb11, otherwise: bb10]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _40 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<MyInt, MyInt>(move _42, move _43, move _45, move _47); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MyInt, &'b MyInt, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MyInt, MyInt>}, val: Value(<ZST>) }
    }

    bb11: {
        _49 = &_8;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _51 = mi(const 15_isize) -> bb12; // scope 2 at ui/traits/inheritance/overloading.rs:46:19: 46:25
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/overloading.rs:46:19: 46:21
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb12: {
        _50 = &_51;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _48 = (move _49, move _50);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _52 = (_48.0: &MyInt);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _53 = (_48.1: &MyInt);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _56 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _57 = _53;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _55 = <MyInt as PartialEq>::eq(move _56, move _57) -> bb13; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MyInt, &'b MyInt) -> bool {<MyInt as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _54 = Not(move _55);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _54) -> [0: bb15, otherwise: bb14]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _58 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _62 = _52;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _61 = _62;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _64 = _53;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _65 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _59 = core::panicking::assert_failed::<MyInt, MyInt>(move _60, move _61, move _63, move _65); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MyInt, &'b MyInt, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MyInt, MyInt>}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at ui/traits/inheritance/overloading.rs:47:2: 47:2
    }
}
