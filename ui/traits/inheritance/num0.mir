// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn greater_than_one(_1: &T) -> bool {
    debug n => _1;                       // in scope 0 at ui/traits/inheritance/num0.rs:20:31: 20:32
    let mut _0: bool;                    // return place in scope 0 at ui/traits/inheritance/num0.rs:20:41: 20:45
    let mut _2: &T;                      // in scope 0 at ui/traits/inheritance/num0.rs:21:5: 21:37
    let mut _3: &T;                      // in scope 0 at ui/traits/inheritance/num0.rs:21:10: 21:36
    let _4: &T;                          // in scope 0 at ui/traits/inheritance/num0.rs:21:10: 21:36
    let _5: T;                           // in scope 0 at ui/traits/inheritance/num0.rs:21:11: 21:36
    let mut _6: std::option::Option<T>;  // in scope 0 at ui/traits/inheritance/num0.rs:21:11: 21:27

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/inheritance/num0.rs:21:5: 21:37
        _6 = <T as NumCast>::from(const 1_i32) -> bb1; // scope 0 at ui/traits/inheritance/num0.rs:21:11: 21:27
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/num0.rs:21:11: 21:24
                                         // + literal: Const { ty: fn(i32) -> Option<T> {<T as NumCast>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Option::<T>::unwrap(move _6) -> bb2; // scope 0 at ui/traits/inheritance/num0.rs:21:11: 21:36
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/num0.rs:21:28: 21:34
                                         // + literal: Const { ty: fn(Option<T>) -> T {Option::<T>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at ui/traits/inheritance/num0.rs:21:10: 21:36
        _3 = _4;                         // scope 0 at ui/traits/inheritance/num0.rs:21:10: 21:36
        _0 = <T as PartialOrd>::gt(move _2, move _3) -> [return: bb3, unwind: bb5]; // scope 0 at ui/traits/inheritance/num0.rs:21:5: 21:37
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/num0.rs:21:7: 21:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_5) -> bb4;                 // scope 0 at ui/traits/inheritance/num0.rs:22:1: 22:2
    }

    bb4: {
        return;                          // scope 0 at ui/traits/inheritance/num0.rs:22:2: 22:2
    }

    bb5 (cleanup): {
        drop(_5) -> bb6;                 // scope 0 at ui/traits/inheritance/num0.rs:22:1: 22:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/traits/inheritance/num0.rs:20:1: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/num0.rs:24:15: 24:15

    bb0: {
        return;                          // scope 0 at ui/traits/inheritance/num0.rs:24:17: 24:17
    }
}
