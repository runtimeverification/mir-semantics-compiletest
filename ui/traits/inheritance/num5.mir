// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/num5.rs:13:1: 13:21>::from(_1: i32) -> Option<f32> {
    debug i => _1;                       // in scope 0 at ui/traits/inheritance/num5.rs:14:13: 14:14
    let mut _0: std::option::Option<f32>; // return place in scope 0 at ui/traits/inheritance/num5.rs:14:24: 14:35
    let mut _2: f32;                     // in scope 0 at ui/traits/inheritance/num5.rs:14:43: 14:51
    let mut _3: i32;                     // in scope 0 at ui/traits/inheritance/num5.rs:14:43: 14:44

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/inheritance/num5.rs:14:43: 14:44
        _2 = move _3 as f32 (IntToFloat); // scope 0 at ui/traits/inheritance/num5.rs:14:43: 14:51
        _0 = Option::<f32>::Some(move _2); // scope 0 at ui/traits/inheritance/num5.rs:14:38: 14:52
        return;                          // scope 0 at ui/traits/inheritance/num5.rs:14:54: 14:54
    }
}

fn <impl at ui/traits/inheritance/num5.rs:16:1: 16:23>::from(_1: i32) -> Option<isize> {
    debug i => _1;                       // in scope 0 at ui/traits/inheritance/num5.rs:17:13: 17:14
    let mut _0: std::option::Option<isize>; // return place in scope 0 at ui/traits/inheritance/num5.rs:17:24: 17:37
    let mut _2: isize;                   // in scope 0 at ui/traits/inheritance/num5.rs:17:45: 17:55
    let mut _3: i32;                     // in scope 0 at ui/traits/inheritance/num5.rs:17:45: 17:46

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/inheritance/num5.rs:17:45: 17:46
        _2 = move _3 as isize (IntToInt); // scope 0 at ui/traits/inheritance/num5.rs:17:45: 17:55
        _0 = Option::<isize>::Some(move _2); // scope 0 at ui/traits/inheritance/num5.rs:17:40: 17:56
        return;                          // scope 0 at ui/traits/inheritance/num5.rs:17:58: 17:58
    }
}

fn num_eq_one() -> T {
    let mut _0: T;                       // return place in scope 0 at ui/traits/inheritance/num5.rs:20:30: 20:31
    let mut _1: std::option::Option<T>;  // in scope 0 at ui/traits/inheritance/num5.rs:21:5: 21:21

    bb0: {
        _1 = <T as NumCast>::from(const 1_i32) -> bb1; // scope 0 at ui/traits/inheritance/num5.rs:21:5: 21:21
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/num5.rs:21:5: 21:18
                                         // + literal: Const { ty: fn(i32) -> Option<T> {<T as NumCast>::from}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<T>::unwrap(move _1) -> bb2; // scope 0 at ui/traits/inheritance/num5.rs:21:5: 21:30
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/num5.rs:21:22: 21:28
                                         // + literal: Const { ty: fn(Option<T>) -> T {Option::<T>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/inheritance/num5.rs:22:2: 22:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/num5.rs:24:15: 24:15
    let _1: isize;                       // in scope 0 at ui/traits/inheritance/num5.rs:25:5: 25:26

    bb0: {
        _1 = num_eq_one::<isize>() -> bb1; // scope 0 at ui/traits/inheritance/num5.rs:25:5: 25:26
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/num5.rs:25:5: 25:24
                                         // + literal: Const { ty: fn() -> isize {num_eq_one::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inheritance/num5.rs:26:2: 26:2
    }
}
