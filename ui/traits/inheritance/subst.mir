// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/subst.rs:11:1: 11:33>::add(_1: &MyInt, _2: &MyInt) -> MyInt {
    debug self => _1;                    // in scope 0 at ui/traits/inheritance/subst.rs:12:12: 12:17
    debug other => _2;                   // in scope 0 at ui/traits/inheritance/subst.rs:12:19: 12:24
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/subst.rs:12:37: 12:42
    let mut _3: isize;                   // in scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:68
    let mut _4: isize;                   // in scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:56
    let mut _5: isize;                   // in scope 0 at ui/traits/inheritance/subst.rs:12:59: 12:68
    let mut _6: (isize, bool);           // in scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:68

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:56
        _5 = ((*_2).0: isize);           // scope 0 at ui/traits/inheritance/subst.rs:12:59: 12:68
        _6 = CheckedAdd(_4, _5);         // scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:68
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:68
    }

    bb1: {
        _3 = move (_6.0: isize);         // scope 0 at ui/traits/inheritance/subst.rs:12:48: 12:68
        _0 = mi(move _3) -> bb2;         // scope 0 at ui/traits/inheritance/subst.rs:12:45: 12:69
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/subst.rs:12:45: 12:47
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/inheritance/subst.rs:12:71: 12:71
    }
}

fn f(_1: T, _2: T) -> T {
    debug x => _1;                       // in scope 0 at ui/traits/inheritance/subst.rs:17:15: 17:16
    debug y => _2;                       // in scope 0 at ui/traits/inheritance/subst.rs:17:21: 17:22
    let mut _0: T;                       // return place in scope 0 at ui/traits/inheritance/subst.rs:17:30: 17:31
    let mut _3: &T;                      // in scope 0 at ui/traits/inheritance/subst.rs:18:12: 18:21
    let mut _4: &T;                      // in scope 0 at ui/traits/inheritance/subst.rs:18:18: 18:20
    let _5: &T;                          // in scope 0 at ui/traits/inheritance/subst.rs:18:18: 18:20

    bb0: {
        _3 = &_1;                        // scope 0 at ui/traits/inheritance/subst.rs:18:12: 18:21
        _5 = &_2;                        // scope 0 at ui/traits/inheritance/subst.rs:18:18: 18:20
        _4 = _5;                         // scope 0 at ui/traits/inheritance/subst.rs:18:18: 18:20
        _0 = <T as Add<T, T>>::add(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/traits/inheritance/subst.rs:18:12: 18:21
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/subst.rs:18:14: 18:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> T {<T as Add<T, T>>::add}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/traits/inheritance/subst.rs:19:1: 19:2
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/traits/inheritance/subst.rs:19:1: 19:2
    }

    bb3: {
        return;                          // scope 0 at ui/traits/inheritance/subst.rs:19:2: 19:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/traits/inheritance/subst.rs:19:1: 19:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/traits/inheritance/subst.rs:19:1: 19:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/traits/inheritance/subst.rs:17:1: 19:2
    }
}

fn mi(_1: isize) -> MyInt {
    debug v => _1;                       // in scope 0 at ui/traits/inheritance/subst.rs:21:7: 21:8
    let mut _0: MyInt;                   // return place in scope 0 at ui/traits/inheritance/subst.rs:21:20: 21:25
    let mut _2: isize;                   // in scope 0 at ui/traits/inheritance/subst.rs:21:41: 21:42

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/inheritance/subst.rs:21:41: 21:42
        _0 = MyInt { val: move _2 };     // scope 0 at ui/traits/inheritance/subst.rs:21:28: 21:44
        return;                          // scope 0 at ui/traits/inheritance/subst.rs:21:46: 21:46
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inheritance/subst.rs:23:15: 23:15
    let _1: MyInt;                       // in scope 0 at ui/traits/inheritance/subst.rs:24:10: 24:11
    let _2: MyInt;                       // in scope 0 at ui/traits/inheritance/subst.rs:24:13: 24:14
    let mut _3: (MyInt, MyInt);          // in scope 0 at ui/traits/inheritance/subst.rs:24:18: 24:32
    let mut _4: MyInt;                   // in scope 0 at ui/traits/inheritance/subst.rs:24:19: 24:24
    let mut _5: MyInt;                   // in scope 0 at ui/traits/inheritance/subst.rs:24:26: 24:31
    let mut _7: MyInt;                   // in scope 0 at ui/traits/inheritance/subst.rs:25:15: 25:16
    let mut _8: MyInt;                   // in scope 0 at ui/traits/inheritance/subst.rs:25:18: 25:19
    let mut _9: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/inheritance/subst.rs:24:10: 24:11
        debug y => _2;                   // in scope 1 at ui/traits/inheritance/subst.rs:24:13: 24:14
        let _6: MyInt;                   // in scope 1 at ui/traits/inheritance/subst.rs:25:9: 25:10
        scope 2 {
            debug z => _6;               // in scope 2 at ui/traits/inheritance/subst.rs:25:9: 25:10
            let _12: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _26: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _12;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = mi(const 3_isize) -> bb1;   // scope 0 at ui/traits/inheritance/subst.rs:24:19: 24:24
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/subst.rs:24:19: 24:21
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = mi(const 5_isize) -> bb2;   // scope 0 at ui/traits/inheritance/subst.rs:24:26: 24:31
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/subst.rs:24:26: 24:28
                                         // + literal: Const { ty: fn(isize) -> MyInt {mi}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = (move _4, move _5);         // scope 0 at ui/traits/inheritance/subst.rs:24:18: 24:32
        _1 = move (_3.0: MyInt);         // scope 0 at ui/traits/inheritance/subst.rs:24:10: 24:11
        _2 = move (_3.1: MyInt);         // scope 0 at ui/traits/inheritance/subst.rs:24:13: 24:14
        _7 = move _1;                    // scope 1 at ui/traits/inheritance/subst.rs:25:15: 25:16
        _8 = move _2;                    // scope 1 at ui/traits/inheritance/subst.rs:25:18: 25:19
        _6 = f::<MyInt>(move _7, move _8) -> bb3; // scope 1 at ui/traits/inheritance/subst.rs:25:13: 25:20
                                         // mir::Constant
                                         // + span: ui/traits/inheritance/subst.rs:25:13: 25:14
                                         // + literal: Const { ty: fn(MyInt, MyInt) -> MyInt {f::<MyInt>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &(_6.0: isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 8_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<isize, isize>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/traits/inheritance/subst.rs:27:2: 27:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/traits/inheritance/subst.rs:26:23: 26:24

    bb0: {
        _1 = const 8_isize;              // scope 0 at ui/traits/inheritance/subst.rs:26:23: 26:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
