// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inheritance/basic.rs:12:1: 12:15>::f(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 10_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/basic.rs:13:1: 13:15>::g(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 20_isize;
        return;
    }
}

fn <impl at ui/traits/inheritance/basic.rs:14:1: 14:15>::h(_1: &A) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = const 30_isize;
        return;
    }
}

fn f(_1: &T) -> () {
    debug a => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&isize, &isize);
    let mut _15: &isize;
    let _16: isize;
    let _17: &isize;
    let _18: &isize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&isize, &isize);
    let mut _27: &isize;
    let _28: isize;
    let _29: &isize;
    let _30: &isize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: isize;
    let mut _34: isize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: &isize;
    let mut _39: &isize;
    let mut _40: &isize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _17;
        debug right_val => _18;
        let _23: core::panicking::AssertKind;
        scope 4 {
            debug kind => _23;
        }
    }
    scope 5 {
        debug left_val => _29;
        debug right_val => _30;
        let _35: core::panicking::AssertKind;
        scope 6 {
            debug kind => _35;
        }
    }

    bb0: {
        _4 = <T as Foo>::f(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _40 = const _;
        _2 = (move _3, _40);
        _5 = (_2.0: &isize);
        _6 = (_2.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _16 = <T as Bar>::g(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _39 = const _;
        _14 = (move _15, _39);
        _17 = (_14.0: &isize);
        _18 = (_14.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb6: {
        _28 = <T as Baz>::h(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        _27 = &_28;
        _38 = const _;
        _26 = (move _27, _38);
        _29 = (_26.0: &isize);
        _30 = (_26.1: &isize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<isize, isize>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 30_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 20_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &A;
    scope 1 {
        debug a => const _;
    }

    bb0: {
        _2 = const _;
        _1 = f::<A>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A { x: const 3_isize };
        _0 = &_1;
        return;
    }
}
