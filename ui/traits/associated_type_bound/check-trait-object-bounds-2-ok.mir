// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:9:35: 9:35
    let _1: std::option::Option<&i32>;   // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:5: 10:32
    let mut _2: std::option::Option<<T as X<'_>>::F>; // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:5: 10:17
    let mut _3: [closure@ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:22: 10:25]; // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:22: 10:31

    bb0: {
        _2 = Option::<<T as X<'_>>::F>::None; // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:5: 10:17
                                         // adt
                                         // + user_ty: UserType(0)
        _1 = Option::<<T as X<'_>>::F>::map::<&i32, [closure@ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:22: 10:25]>(move _2, move _3) -> bb1; // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:5: 10:32
                                         // mir::Constant
                                         // + span: ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:18: 10:21
                                         // + literal: Const { ty: fn(Option<<T as X<'_>>::F>, [closure@ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:22: 10:25]) -> Option<&i32> {Option::<<T as X<'_>>::F>::map::<&i32, [closure@ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:22: 10:25]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:11:2: 11:2
    }
}

fn f::{closure#0}(_1: [closure@ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:22: 10:25], _2: <T as X<'_>>::F) -> &i32 {
    debug f => _2;                       // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:23: 10:24
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:26
    let mut _3: <T as X<'_>>::F;         // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:27
    let mut _4: (&i32,);                 // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:31
    let mut _5: &i32;                    // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
    let _6: &i32;                        // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
    let mut _7: &i32;                    // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30

    bb0: {
        _3 = move _2;                    // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:27
        _7 = const _;                    // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
                                         // mir::Constant
                                         // + span: ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
                                         // + literal: Const { ty: &i32, val: Unevaluated(f::{closure#0}, [T, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _7;                         // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
        _5 = _6;                         // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
        _4 = (move _5,);                 // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:31
        _0 = <<T as X<'_>>::F as FnOnce<(&i32,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:31
                                         // mir::Constant
                                         // + span: ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:26: 10:27
                                         // + literal: Const { ty: extern "rust-call" fn(<T as X<'_>>::F, (&i32,)) -> <<T as X<'_>>::F as FnOnce<(&i32,)>>::Output {<<T as X<'_>>::F as FnOnce<(&i32,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:31: 10:31
    }
}

promoted[0] in f::{closure#0}: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
    let mut _1: i32;                     // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:29: 10:30

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:29: 10:30
        _0 = &_1;                        // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
        return;                          // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:10:28: 10:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:13:11: 13:11
    let _1: ();                          // in scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:14:5: 14:54

    bb0: {
        _1 = f::<dyn for<'x> X<'x, for<'x> F = for<'a> fn(&'a i32) -> &'x i32>>() -> bb1; // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:14:5: 14:54
                                         // mir::Constant
                                         // + span: ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:14:5: 14:52
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {f::<dyn for<'x> X<'x, for<'x> F = for<'a> fn(&'a i32) -> &'x i32>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/associated_type_bound/check-trait-object-bounds-2-ok.rs:15:2: 15:2
    }
}
