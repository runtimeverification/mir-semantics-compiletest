// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Movable::translate(_1: &mut Self, _2: S) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/superdefault-generics.rs:16:16: 16:25
    debug dx => _2;                      // in scope 0 at ui/traits/superdefault-generics.rs:16:27: 16:29
    let mut _0: ();                      // return place in scope 0 at ui/traits/superdefault-generics.rs:16:34: 16:34
    let _3: S;                           // in scope 0 at ui/traits/superdefault-generics.rs:17:9: 17:10
    let mut _4: S;                       // in scope 0 at ui/traits/superdefault-generics.rs:17:13: 17:21
    let mut _5: &Self;                   // in scope 0 at ui/traits/superdefault-generics.rs:17:13: 17:21
    let mut _6: S;                       // in scope 0 at ui/traits/superdefault-generics.rs:17:24: 17:26
    let _7: ();                          // in scope 0 at ui/traits/superdefault-generics.rs:18:5: 18:17
    let mut _8: &mut Self;               // in scope 0 at ui/traits/superdefault-generics.rs:18:5: 18:17
    let mut _9: S;                       // in scope 0 at ui/traits/superdefault-generics.rs:18:15: 18:16
    let mut _10: bool;                   // in scope 0 at ui/traits/superdefault-generics.rs:19:3: 19:4
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/traits/superdefault-generics.rs:17:9: 17:10
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/traits/superdefault-generics.rs:17:9: 17:10
        _10 = const true;                // scope 0 at ui/traits/superdefault-generics.rs:17:9: 17:10
        _5 = &(*_1);                     // scope 0 at ui/traits/superdefault-generics.rs:17:13: 17:21
        _4 = <Self as Positioned<S>>::X(move _5) -> [return: bb1, unwind: bb6]; // scope 0 at ui/traits/superdefault-generics.rs:17:13: 17:21
                                         // mir::Constant
                                         // + span: ui/traits/superdefault-generics.rs:17:18: 17:19
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> S {<Self as Positioned<S>>::X}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const false;               // scope 0 at ui/traits/superdefault-generics.rs:17:24: 17:26
        _6 = move _2;                    // scope 0 at ui/traits/superdefault-generics.rs:17:24: 17:26
        _3 = <S as Add>::add(move _4, move _6) -> [return: bb2, unwind: bb6]; // scope 0 at ui/traits/superdefault-generics.rs:17:13: 17:26
                                         // mir::Constant
                                         // + span: ui/traits/superdefault-generics.rs:17:13: 17:26
                                         // + literal: Const { ty: fn(S, S) -> <S as Add>::Output {<S as Add>::add}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut (*_1);                 // scope 1 at ui/traits/superdefault-generics.rs:18:5: 18:17
        _9 = move _3;                    // scope 1 at ui/traits/superdefault-generics.rs:18:15: 18:16
        _7 = <Self as Positioned<S>>::SetX(move _8, move _9) -> [return: bb3, unwind: bb6]; // scope 1 at ui/traits/superdefault-generics.rs:18:5: 18:17
                                         // mir::Constant
                                         // + span: ui/traits/superdefault-generics.rs:18:10: 18:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self, S) {<Self as Positioned<S>>::SetX}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/superdefault-generics.rs:19:4: 19:4
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/superdefault-generics.rs:16:3: 19:4
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/traits/superdefault-generics.rs:19:3: 19:4
    }

    bb6 (cleanup): {
        switchInt(_10) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/traits/superdefault-generics.rs:19:3: 19:4
    }
}

fn <impl at ui/traits/superdefault-generics.rs:24:1: 24:42>::SetX(_1: &mut Point<S>, _2: S) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/superdefault-generics.rs:25:13: 25:22
    debug x => _2;                       // in scope 0 at ui/traits/superdefault-generics.rs:25:24: 25:25
    let mut _0: ();                      // return place in scope 0 at ui/traits/superdefault-generics.rs:25:30: 25:30
    let mut _3: S;                       // in scope 0 at ui/traits/superdefault-generics.rs:26:18: 26:19

    bb0: {
        _3 = move _2;                    // scope 0 at ui/traits/superdefault-generics.rs:26:18: 26:19
        drop(((*_1).0: S)) -> [return: bb2, unwind: bb1]; // scope 0 at ui/traits/superdefault-generics.rs:26:9: 26:15
    }

    bb1 (cleanup): {
        ((*_1).0: S) = move _3;          // scope 0 at ui/traits/superdefault-generics.rs:26:9: 26:15
        resume;                          // scope 0 at ui/traits/superdefault-generics.rs:25:5: 27:6
    }

    bb2: {
        ((*_1).0: S) = move _3;          // scope 0 at ui/traits/superdefault-generics.rs:26:9: 26:15
        return;                          // scope 0 at ui/traits/superdefault-generics.rs:27:6: 27:6
    }
}

fn <impl at ui/traits/superdefault-generics.rs:24:1: 24:42>::X(_1: &Point<S>) -> S {
    debug self => _1;                    // in scope 0 at ui/traits/superdefault-generics.rs:28:10: 28:15
    let mut _0: S;                       // return place in scope 0 at ui/traits/superdefault-generics.rs:28:20: 28:21
    let mut _2: &S;                      // in scope 0 at ui/traits/superdefault-generics.rs:29:9: 29:23

    bb0: {
        _2 = &((*_1).0: S);              // scope 0 at ui/traits/superdefault-generics.rs:29:9: 29:23
        _0 = <S as Clone>::clone(move _2) -> bb1; // scope 0 at ui/traits/superdefault-generics.rs:29:9: 29:23
                                         // mir::Constant
                                         // + span: ui/traits/superdefault-generics.rs:29:16: 29:21
                                         // + literal: Const { ty: for<'a> fn(&'a S) -> S {<S as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/superdefault-generics.rs:30:6: 30:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/superdefault-generics.rs:35:15: 35:15
    let mut _1: Point<i32>;              // in scope 0 at ui/traits/superdefault-generics.rs:36:9: 36:14
    let _2: ();                          // in scope 0 at ui/traits/superdefault-generics.rs:37:5: 37:19
    let mut _3: &mut Point<i32>;         // in scope 0 at ui/traits/superdefault-generics.rs:37:5: 37:19
    let mut _4: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: i32;                         // in scope 0 at ui/traits/superdefault-generics.rs:38:16: 38:21
    let mut _7: &Point<i32>;             // in scope 0 at ui/traits/superdefault-generics.rs:38:16: 38:21
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug p => _1;                   // in scope 1 at ui/traits/superdefault-generics.rs:36:9: 36:14
        let _9: &i32;                    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _10: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _23: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _9;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _10;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _15: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = Point::<i32> { x: const 1_i32, y: const 2_i32 }; // scope 0 at ui/traits/superdefault-generics.rs:36:17: 36:35
        _3 = &mut _1;                    // scope 1 at ui/traits/superdefault-generics.rs:37:5: 37:19
        _2 = <Point<i32> as Movable<i32>>::translate(move _3, const 3_i32) -> bb1; // scope 1 at ui/traits/superdefault-generics.rs:37:5: 37:19
                                         // mir::Constant
                                         // + span: ui/traits/superdefault-generics.rs:37:7: 37:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut Point<i32>, i32) {<Point<i32> as Movable<i32>>::translate}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_1;                        // scope 1 at ui/traits/superdefault-generics.rs:38:16: 38:21
        _6 = <Point<i32> as Positioned<i32>>::X(move _7) -> bb2; // scope 1 at ui/traits/superdefault-generics.rs:38:16: 38:21
                                         // mir::Constant
                                         // + span: ui/traits/superdefault-generics.rs:38:18: 38:19
                                         // + literal: Const { ty: for<'a> fn(&'a Point<i32>) -> i32 {<Point<i32> as Positioned<i32>>::X}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _23;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &i32);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 4_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<i32, i32>(move _17, move _18, move _20, move _22); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/traits/superdefault-generics.rs:39:2: 39:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/traits/superdefault-generics.rs:38:23: 38:24

    bb0: {
        _1 = const 4_i32;                // scope 0 at ui/traits/superdefault-generics.rs:38:23: 38:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
