// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/multidispatch-infer-convert-target.rs:11:1: 11:26>::convert(_1: &i16) -> u32 {
    debug self => _1;
    let mut _0: u32;
    let mut _2: i16;

    bb0: {
        _2 = (*_1);
        _0 = move _2 as u32 (IntToInt);
        return;
    }
}

fn <impl at ui/traits/multidispatch-infer-convert-target.rs:17:1: 17:26>::convert(_1: &u32) -> i16 {
    debug self => _1;
    let mut _0: i16;
    let mut _2: u32;

    bb0: {
        _2 = (*_1);
        _0 = move _2 as i16 (IntToInt);
        return;
    }
}

fn test(_1: T, _2: U, _3: usize, _4: usize) -> () {
    debug t_size => _3;
    debug u_size => _4;
    let mut _0: ();
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: &usize;
    let _8: &usize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&usize, &usize);
    let mut _17: &usize;
    let _18: &usize;
    let _19: &usize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: &usize;
    let mut _28: &usize;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _13: core::panicking::AssertKind;
        scope 2 {
            debug kind => _13;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }

    bb0: {
        _28 = const _;
        _6 = &_3;
        _5 = (_28, move _6);
        _7 = (_5.0: &usize);
        _8 = (_5.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15) -> bb7;
    }

    bb2: {
        _27 = const _;
        _17 = &_4;
        _16 = (_27, move _17);
        _18 = (_16.0: &usize);
        _19 = (_16.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26) -> bb7;
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_2) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }
}

promoted[0] in test: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<U>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[1] in test: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<T>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: u32;
    let _3: ();
    let mut _4: i16;

    bb0: {
        _2 = <u32 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = test::<i16, u32>(const 22_i16, move _2, const 2_usize, const 4_usize) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = <i16 as Default>::default() -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = test::<u32, i16>(const 22_u32, move _4, const 4_usize, const 2_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}
