// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: &dyn Derived<P>) -> () {
    debug obj => _1;                     // in scope 0 at ui/traits/normalize-supertrait.rs:28:15: 28:18
    let mut _0: ();                      // return place in scope 0 at ui/traits/normalize-supertrait.rs:28:37: 28:37
    let _2: ();                          // in scope 0 at ui/traits/normalize-supertrait.rs:29:5: 29:21
    let mut _3: &dyn Derived<P>;         // in scope 0 at ui/traits/normalize-supertrait.rs:29:5: 29:21
    let _4: ();                          // in scope 0 at ui/traits/normalize-supertrait.rs:30:5: 30:31
    let mut _5: &dyn Derived<P>;         // in scope 0 at ui/traits/normalize-supertrait.rs:30:27: 30:30
    let _6: ();                          // in scope 0 at ui/traits/normalize-supertrait.rs:31:5: 31:29
    let mut _7: &dyn Derived<P>;         // in scope 0 at ui/traits/normalize-supertrait.rs:31:25: 31:28

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/normalize-supertrait.rs:29:5: 29:21
        _2 = <dyn Derived<P> as Derived<P>>::is_derived(move _3) -> bb1; // scope 0 at ui/traits/normalize-supertrait.rs:29:5: 29:21
                                         // mir::Constant
                                         // + span: ui/traits/normalize-supertrait.rs:29:9: 29:19
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Derived<P>) {<dyn Derived<P> as Derived<P>>::is_derived}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _1;                         // scope 0 at ui/traits/normalize-supertrait.rs:30:27: 30:30
        _4 = <dyn Derived<P> as Base<<P as Proj>::S>>::is_base(move _5) -> bb2; // scope 0 at ui/traits/normalize-supertrait.rs:30:5: 30:31
                                         // mir::Constant
                                         // + span: ui/traits/normalize-supertrait.rs:30:5: 30:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Derived<P>) {<dyn Derived<P> as Base<<P as Proj>::S>>::is_base}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _1;                         // scope 0 at ui/traits/normalize-supertrait.rs:31:25: 31:28
        _6 = <dyn Derived<P> as Base<()>>::is_base(move _7) -> bb3; // scope 0 at ui/traits/normalize-supertrait.rs:31:5: 31:29
                                         // mir::Constant
                                         // + span: ui/traits/normalize-supertrait.rs:31:5: 31:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Derived<P>) {<dyn Derived<P> as Base<()>>::is_base}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/normalize-supertrait.rs:32:2: 32:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/normalize-supertrait.rs:34:11: 34:11
    let _1: fn(&dyn Derived<()>);        // in scope 0 at ui/traits/normalize-supertrait.rs:35:9: 35:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/normalize-supertrait.rs:35:9: 35:10
        let _2: fn(&dyn Derived<i32>);   // in scope 1 at ui/traits/normalize-supertrait.rs:36:9: 36:10
        scope 2 {
            debug x => _2;               // in scope 2 at ui/traits/normalize-supertrait.rs:36:9: 36:10
        }
    }

    bb0: {
        _1 = f::<()> as for<'a> fn(&'a (dyn Derived<()> + 'a)) (Pointer(ReifyFnPointer)); // scope 0 at ui/traits/normalize-supertrait.rs:35:20: 35:27
                                         // mir::Constant
                                         // + span: ui/traits/normalize-supertrait.rs:35:20: 35:27
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Derived<()> + 'a)) {f::<()>}, val: Value(<ZST>) }
        _2 = f::<i32> as for<'a> fn(&'a (dyn Derived<i32> + 'a)) (Pointer(ReifyFnPointer)); // scope 1 at ui/traits/normalize-supertrait.rs:36:20: 36:28
                                         // mir::Constant
                                         // + span: ui/traits/normalize-supertrait.rs:36:20: 36:28
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Derived<i32> + 'a)) {f::<i32>}, val: Value(<ZST>) }
        return;                          // scope 0 at ui/traits/normalize-supertrait.rs:37:2: 37:2
    }
}
