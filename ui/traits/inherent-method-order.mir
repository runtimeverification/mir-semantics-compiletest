// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inherent-method-order.rs:5:1: 5:9>::foo(_1: Foo) -> () {
    debug self => const Foo;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "wrong method!") -> unwind continue;
    }
}

fn <impl at ui/traits/inherent-method-order.rs:16:1: 16:41>::foo(_1: &&&Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &&&Foo;
    scope 1 {
        debug x => const _;
    }

    bb0: {
        _2 = const _;
        _1 = <&&&Foo as Trait>::foo(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &&&Foo = {
    let mut _0: &&&Foo;
    let mut _1: &&Foo;
    let mut _2: &Foo;
    let mut _3: Foo;

    bb0: {
        _3 = Foo;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}
