// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/inherent-method-order.rs:5:1: 5:9>::foo(_1: Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/inherent-method-order.rs:7:12: 7:16
    let mut _0: ();                      // return place in scope 0 at ui/traits/inherent-method-order.rs:7:18: 7:18
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "wrong method!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/traits/inherent-method-order.rs:8:16: 8:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/traits/inherent-method-order.rs:16:1: 16:41>::foo(_1: &&&Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/inherent-method-order.rs:17:12: 17:16
    let mut _0: ();                      // return place in scope 0 at ui/traits/inherent-method-order.rs:17:18: 17:18

    bb0: {
        return;                          // scope 0 at ui/traits/inherent-method-order.rs:19:6: 19:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/inherent-method-order.rs:22:11: 22:11
    let _1: &&&Foo;                      // in scope 0 at ui/traits/inherent-method-order.rs:23:9: 23:10
    let _2: ();                          // in scope 0 at ui/traits/inherent-method-order.rs:24:5: 24:12
    let mut _3: &&&Foo;                  // in scope 0 at ui/traits/inherent-method-order.rs:24:5: 24:12
    let mut _4: &&&Foo;                  // in scope 0 at ui/traits/inherent-method-order.rs:23:13: 23:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/inherent-method-order.rs:23:9: 23:10
    }

    bb0: {
        _4 = const _;                    // scope 0 at ui/traits/inherent-method-order.rs:23:13: 23:23
                                         // mir::Constant
                                         // + span: ui/traits/inherent-method-order.rs:23:13: 23:23
                                         // + literal: Const { ty: &&&Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _1 = _4;                         // scope 0 at ui/traits/inherent-method-order.rs:23:13: 23:23
        _3 = _1;                         // scope 1 at ui/traits/inherent-method-order.rs:24:5: 24:12
        _2 = <&&&Foo as Trait>::foo(move _3) -> bb1; // scope 1 at ui/traits/inherent-method-order.rs:24:5: 24:12
                                         // mir::Constant
                                         // + span: ui/traits/inherent-method-order.rs:24:7: 24:10
                                         // + literal: Const { ty: fn(&&&Foo) {<&&&Foo as Trait>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/inherent-method-order.rs:25:2: 25:2
    }
}

promoted[0] in main: &&&Foo = {
    let mut _0: &&&Foo;                  // return place in scope 0 at ui/traits/inherent-method-order.rs:23:13: 23:23
    let mut _1: &&Foo;                   // in scope 0 at ui/traits/inherent-method-order.rs:23:14: 23:23
    let mut _2: &Foo;                    // in scope 0 at ui/traits/inherent-method-order.rs:23:16: 23:22
    let mut _3: Foo;                     // in scope 0 at ui/traits/inherent-method-order.rs:23:18: 23:21

    bb0: {
        _3 = Foo;                        // scope 0 at ui/traits/inherent-method-order.rs:23:18: 23:21
        _2 = &_3;                        // scope 0 at ui/traits/inherent-method-order.rs:23:16: 23:22
        _1 = &_2;                        // scope 0 at ui/traits/inherent-method-order.rs:23:14: 23:23
        _0 = &_1;                        // scope 0 at ui/traits/inherent-method-order.rs:23:13: 23:23
        return;                          // scope 0 at ui/traits/inherent-method-order.rs:23:13: 23:23
    }
}
