// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Grault::bar(_1: <() as Corge<<Self as Grault>::Thud>>::Fred) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-78632.rs:28:48: 28:48

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/traits/issue-78632.rs:28:49: 28:50
    }

    bb1: {
        return;                          // scope 0 at ui/traits/issue-78632.rs:28:50: 28:50
    }
}

fn <impl at ui/traits/issue-78632.rs:44:16: 44:21>::clone(_1: &Qiz<T>) -> Qiz<T> {
    debug self => _1;                    // in scope 0 at ui/traits/issue-78632.rs:44:16: 44:21
    let mut _0: Qiz<T>;                  // return place in scope 0 at ui/traits/issue-78632.rs:44:16: 44:21
    let mut _2: T;                       // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let mut _3: &T;                      // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let _4: &T;                          // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _3 = _4;                         // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
                                         // mir::Constant
                                         // + span: ui/traits/issue-78632.rs:46:5: 46:11
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Qiz::<T> { foo: move _2 };  // scope 0 at ui/traits/issue-78632.rs:44:16: 44:21
        return;                          // scope 0 at ui/traits/issue-78632.rs:44:21: 44:21
    }
}

fn <impl at ui/traits/issue-78632.rs:44:23: 44:28>::fmt(_1: &Qiz<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
    debug f => _2;                       // in scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
    let mut _4: &str;                    // in scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
    let _5: &str;                        // in scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
    let mut _6: &str;                    // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let _7: &str;                        // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let mut _9: &&T;                     // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let _10: &&T;                        // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
    let _11: &T;                         // in scope 0 at ui/traits/issue-78632.rs:46:5: 46:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
        _5 = const "Qiz";                // scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
                                         // mir::Constant
                                         // + span: ui/traits/issue-78632.rs:44:23: 44:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
        _7 = const "foo";                // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
                                         // mir::Constant
                                         // + span: ui/traits/issue-78632.rs:46:5: 46:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _11 = &((*_1).0: T);             // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _10 = &_11;                      // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _9 = _10;                        // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/traits/issue-78632.rs:46:5: 46:11
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/traits/issue-78632.rs:44:23: 44:28
                                         // mir::Constant
                                         // + span: ui/traits/issue-78632.rs:44:23: 44:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/issue-78632.rs:44:28: 44:28
    }
}

fn <impl at ui/traits/issue-78632.rs:49:1: 49:55>::baz() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-78632.rs:54:14: 54:14

    bb0: {
        return;                          // scope 0 at ui/traits/issue-78632.rs:54:16: 54:16
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-78632.rs:57:15: 57:15
    let _1: ();                          // in scope 0 at ui/traits/issue-78632.rs:58:5: 58:36

    bb0: {
        _1 = <Qiz<u32> as Plugh<u32>>::baz() -> bb1; // scope 0 at ui/traits/issue-78632.rs:58:5: 58:36
                                         // mir::Constant
                                         // + span: ui/traits/issue-78632.rs:58:5: 58:34
                                         // + literal: Const { ty: fn() {<Qiz<u32> as Plugh<u32>>::baz}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/issue-78632.rs:59:2: 59:2
    }
}
