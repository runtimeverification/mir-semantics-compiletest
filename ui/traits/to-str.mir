// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/to-str.rs:9:1: 9:22>::to_string_(_1: &isize) -> String {
    debug self => _1;                    // in scope 0 at ui/traits/to-str.rs:10:19: 10:24
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/to-str.rs:10:29: 10:35
    let mut _2: &isize;                  // in scope 0 at ui/traits/to-str.rs:10:38: 10:54

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/to-str.rs:10:38: 10:54
        _0 = <isize as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/traits/to-str.rs:10:38: 10:54
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:10:43: 10:52
                                         // + literal: Const { ty: for<'a> fn(&'a isize) -> String {<isize as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/to-str.rs:10:56: 10:56
    }
}

fn <impl at ui/traits/to-str.rs:13:1: 13:33>::to_string_(_1: &Vec<T>) -> String {
    debug self => _1;                    // in scope 0 at ui/traits/to-str.rs:14:19: 14:24
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _3: &[&str];                 // in scope 0 at ui/traits/to-str.rs:15:17: 15:23
    let mut _4: &[&str; 2];              // in scope 0 at ui/traits/to-str.rs:15:17: 15:23
    let _5: &[&str; 2];                  // in scope 0 at ui/traits/to-str.rs:15:17: 15:23
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let mut _11: &std::string::String;   // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let _12: &std::string::String;       // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let _13: std::string::String;        // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let mut _14: &[std::string::String]; // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let _15: &[std::string::String];     // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let mut _16: &std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/to-str.rs:16:17: 19:32
    let _17: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/to-str.rs:16:17: 18:46
    let mut _18: std::iter::Map<std::slice::Iter<'_, T>, [closure@ui/traits/to-str.rs:17:26: 17:29]>; // in scope 0 at ui/traits/to-str.rs:16:17: 17:45
    let mut _19: std::slice::Iter<'_, T>; // in scope 0 at ui/traits/to-str.rs:16:17: 16:28
    let mut _20: &[T];                   // in scope 0 at ui/traits/to-str.rs:16:17: 16:28
    let _21: &[T];                       // in scope 0 at ui/traits/to-str.rs:16:17: 16:28
    let mut _22: &std::vec::Vec<T>;      // in scope 0 at ui/traits/to-str.rs:16:17: 16:28
    let mut _23: [closure@ui/traits/to-str.rs:17:26: 17:29]; // in scope 0 at ui/traits/to-str.rs:17:26: 17:44
    let mut _24: &str;                   // in scope 0 at ui/traits/to-str.rs:19:27: 19:31
    let _25: &str;                       // in scope 0 at ui/traits/to-str.rs:19:27: 19:31
    let mut _26: &[&str; 2];             // in scope 0 at ui/traits/to-str.rs:15:17: 15:23
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _26 = const _;                   // scope 0 at ui/traits/to-str.rs:15:17: 15:23
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:15:17: 15:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(<Vec<T> as to_str>::to_string_, [T], Some(promoted[0])) }
        _5 = _26;                        // scope 0 at ui/traits/to-str.rs:15:17: 15:23
        _4 = _5;                         // scope 0 at ui/traits/to-str.rs:15:17: 15:23
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/to-str.rs:15:17: 15:23
        _22 = _1;                        // scope 0 at ui/traits/to-str.rs:16:17: 16:28
        _21 = <Vec<T> as Deref>::deref(move _22) -> bb1; // scope 0 at ui/traits/to-str.rs:16:17: 16:28
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:16:17: 16:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<T>) -> &'a <Vec<T> as Deref>::Target {<Vec<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _20 = _21;                       // scope 0 at ui/traits/to-str.rs:16:17: 16:28
        _19 = core::slice::<impl [T]>::iter(move _20) -> bb2; // scope 0 at ui/traits/to-str.rs:16:17: 16:28
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:16:22: 16:26
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = <std::slice::Iter<'_, T> as Iterator>::map::<String, [closure@ui/traits/to-str.rs:17:26: 17:29]>(move _19, move _23) -> bb3; // scope 0 at ui/traits/to-str.rs:16:17: 17:45
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:17:22: 17:25
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, T>, [closure@ui/traits/to-str.rs:17:26: 17:29]) -> Map<std::slice::Iter<'_, T>, [closure@ui/traits/to-str.rs:17:26: 17:29]> {<std::slice::Iter<'_, T> as Iterator>::map::<String, [closure@ui/traits/to-str.rs:17:26: 17:29]>}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = <Map<std::slice::Iter<'_, T>, [closure@ui/traits/to-str.rs:17:26: 17:29]> as Iterator>::collect::<Vec<String>>(move _18) -> bb4; // scope 0 at ui/traits/to-str.rs:16:17: 18:46
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:18:22: 18:29
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Map<std::slice::Iter<'_, T>, [closure@ui/traits/to-str.rs:17:26: 17:29]>) -> Vec<String> {<Map<std::slice::Iter<'_, T>, [closure@ui/traits/to-str.rs:17:26: 17:29]> as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &_17;                      // scope 0 at ui/traits/to-str.rs:16:17: 19:32
        _15 = <Vec<String> as Deref>::deref(move _16) -> [return: bb5, unwind: bb15]; // scope 0 at ui/traits/to-str.rs:16:17: 19:32
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:16:17: 19:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> &'a <Vec<String> as Deref>::Target {<Vec<String> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = _15;                       // scope 0 at ui/traits/to-str.rs:16:17: 19:32
        _25 = const ", ";                // scope 0 at ui/traits/to-str.rs:19:27: 19:31
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:19:27: 19:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25;                       // scope 0 at ui/traits/to-str.rs:19:27: 19:31
        _13 = slice::<impl [String]>::join::<&str>(move _14, move _24) -> [return: bb6, unwind: bb15]; // scope 0 at ui/traits/to-str.rs:16:17: 19:32
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:19:22: 19:26
                                         // + literal: Const { ty: for<'a> fn(&'a [String], &str) -> <[String] as Join<&str>>::Output {slice::<impl [String]>::join::<&str>}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &_13;                      // scope 0 at ui/traits/to-str.rs:16:17: 19:32
        _11 = _12;                       // scope 0 at ui/traits/to-str.rs:16:17: 19:32
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _11) -> [return: bb7, unwind: bb14]; // scope 0 at ui/traits/to-str.rs:16:17: 19:32
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:16:17: 19:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb7: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb8, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = format(move _2) -> [return: bb9, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_13) -> [return: bb10, unwind: bb12]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb10: {
        drop(_17) -> [return: bb11, unwind: bb13]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb11: {
        return;                          // scope 0 at ui/traits/to-str.rs:20:6: 20:6
    }

    bb12 (cleanup): {
        drop(_17) -> bb13;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb13 (cleanup): {
        drop(_0) -> bb16;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:120:5: 120:6
    }

    bb14 (cleanup): {
        drop(_13) -> bb15;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb15 (cleanup): {
        drop(_17) -> bb16;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/traits/to-str.rs:14:5: 20:6
    }
}

promoted[0] in <impl at ui/traits/to-str.rs:13:1: 13:33>::to_string_: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/to-str.rs:15:17: 15:23
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/to-str.rs:15:17: 15:23

    bb0: {
        _1 = [const "[", const "]"];     // scope 0 at ui/traits/to-str.rs:15:17: 15:23
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:15:17: 15:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:15:17: 15:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/to-str.rs:15:17: 15:23
        return;                          // scope 0 at ui/traits/to-str.rs:15:17: 15:23
    }
}

fn <impl at ui/traits/to-str.rs:13:1: 13:33>::to_string_::{closure#0}(_1: &mut [closure@ui/traits/to-str.rs:17:26: 17:29], _2: &T) -> String {
    debug e => _2;                       // in scope 0 at ui/traits/to-str.rs:17:27: 17:28
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/to-str.rs:17:30: 17:30
    let mut _3: &T;                      // in scope 0 at ui/traits/to-str.rs:17:30: 17:44

    bb0: {
        _3 = _2;                         // scope 0 at ui/traits/to-str.rs:17:30: 17:44
        _0 = <T as to_str>::to_string_(move _3) -> bb1; // scope 0 at ui/traits/to-str.rs:17:30: 17:44
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:17:32: 17:42
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> String {<T as to_str>::to_string_}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/to-str.rs:17:44: 17:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/to-str.rs:23:15: 23:15
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/traits/to-str.rs:24:16: 24:30
    let mut _4: &isize;                  // in scope 0 at ui/traits/to-str.rs:24:16: 24:30
    let mut _5: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: std::string::String;         // in scope 0 at ui/traits/to-str.rs:24:32: 24:47
    let mut _7: &str;                    // in scope 0 at ui/traits/to-str.rs:24:32: 24:47
    let _8: &str;                        // in scope 0 at ui/traits/to-str.rs:24:32: 24:35
    let _9: &std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: std::string::String;        // in scope 0 at ui/traits/to-str.rs:25:16: 25:44
    let mut _26: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/to-str.rs:25:16: 25:44
    let _27: std::vec::Vec<isize>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _28: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _29: std::boxed::Box<[isize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _30: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _32: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _33: std::boxed::Box<[isize; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _34: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _35: std::string::String;        // in scope 0 at ui/traits/to-str.rs:25:46: 25:69
    let mut _36: &str;                   // in scope 0 at ui/traits/to-str.rs:25:46: 25:69
    let _37: &str;                       // in scope 0 at ui/traits/to-str.rs:25:46: 25:57
    let _38: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _39: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _42: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _43: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _45: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _46: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _47: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _48: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _49: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _50: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _52: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _53: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _54: std::string::String;        // in scope 0 at ui/traits/to-str.rs:30:16: 30:38
    let mut _55: std::vec::Vec<isize>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _56: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _57: std::boxed::Box<[isize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _58: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _59: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _60: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _61: std::boxed::Box<[isize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _62: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _63: std::string::String;        // in scope 0 at ui/traits/to-str.rs:30:40: 30:63
    let mut _64: &str;                   // in scope 0 at ui/traits/to-str.rs:30:40: 30:63
    let _65: &str;                       // in scope 0 at ui/traits/to-str.rs:30:40: 30:51
    let _66: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _67: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _70: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _71: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _73: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _74: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _75: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _76: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _77: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _78: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _80: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _81: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _82: std::string::String;        // in scope 0 at ui/traits/to-str.rs:35:16: 35:34
    let mut _83: std::vec::Vec<isize>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _84: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _85: std::boxed::Box<[isize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _86: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _87: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _88: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _89: std::boxed::Box<[isize; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _90: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _91: std::string::String;        // in scope 0 at ui/traits/to-str.rs:35:36: 35:54
    let mut _92: &str;                   // in scope 0 at ui/traits/to-str.rs:35:36: 35:54
    let _93: &str;                       // in scope 0 at ui/traits/to-str.rs:35:36: 35:42
    let _94: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _95: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _96: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _97: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _98: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _99: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _101: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _102: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _103: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _104: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _105: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _106: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _108: &isize;                // in scope 0 at ui/traits/to-str.rs:24:16: 24:30
    let mut _109: *const [isize; 3];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _110: *const [isize; 2];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _111: *const [isize; 1];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
    }
    scope 4 {
        debug left_val => _38;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _39;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _44: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 5 {
            debug kind => _44;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 6 {
    }
    scope 7 {
        debug left_val => _66;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _67;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _72: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _72;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
    }
    scope 10 {
        debug left_val => _94;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _95;          // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _100: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 11 {
            debug kind => _100;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _108 = const _;                  // scope 0 at ui/traits/to-str.rs:24:16: 24:30
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:24:16: 24:30
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _108;                       // scope 0 at ui/traits/to-str.rs:24:16: 24:30
        _3 = <isize as to_str>::to_string_(move _4) -> bb1; // scope 0 at ui/traits/to-str.rs:24:16: 24:30
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:24:18: 24:28
                                         // + literal: Const { ty: for<'a> fn(&'a isize) -> String {<isize as to_str>::to_string_}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = const "1";                  // scope 0 at ui/traits/to-str.rs:24:32: 24:35
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:24:32: 24:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/traits/to-str.rs:24:32: 24:47
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb44]; // scope 0 at ui/traits/to-str.rs:24:32: 24:47
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:24:36: 24:45
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <String as PartialEq>::eq(move _13, move _14) -> [return: bb3, unwind: bb43]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<String, String>(move _17, move _18, move _20, move _22) -> bb43; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_6) -> [return: bb6, unwind: bb44]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _30 = const 24_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = const 8_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _32 = alloc::alloc::exchange_malloc(move _30, move _31) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = ShallowInitBox(move _32, [isize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _109 = (((_33.0: std::ptr::Unique<[isize; 3]>).0: std::ptr::NonNull<[isize; 3]>).0: *const [isize; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_109) = [const 2_isize, const 3_isize, const 4_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _29 = move _33;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _28 = move _29 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _27 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _28) -> bb9; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = &_27;                      // scope 0 at ui/traits/to-str.rs:25:16: 25:44
        _25 = <Vec<isize> as to_str>::to_string_(move _26) -> [return: bb10, unwind: bb42]; // scope 0 at ui/traits/to-str.rs:25:16: 25:44
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:25:32: 25:42
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> String {<Vec<isize> as to_str>::to_string_}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const "[2, 3, 4]";         // scope 0 at ui/traits/to-str.rs:25:46: 25:57
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:25:46: 25:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _36 = _37;                       // scope 0 at ui/traits/to-str.rs:25:46: 25:69
        _35 = <str as ToString>::to_string(move _36) -> [return: bb11, unwind: bb41]; // scope 0 at ui/traits/to-str.rs:25:46: 25:69
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:25:58: 25:67
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _34 = &_35;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _34);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _38 = (_23.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _39 = (_23.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _42 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _43 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _41 = <String as PartialEq>::eq(move _42, move _43) -> [return: bb12, unwind: bb40]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _40 = Not(move _41);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _40) -> [0: bb14, otherwise: bb13]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _44 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = _50;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _45 = core::panicking::assert_failed::<String, String>(move _46, move _47, move _49, move _51) -> bb40; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_35) -> [return: bb15, unwind: bb41]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        drop(_25) -> [return: bb16, unwind: bb42]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16: {
        drop(_27) -> bb17;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        _58 = const 16_usize;            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _59 = const 8_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _60 = alloc::alloc::exchange_malloc(move _58, move _59) -> bb18; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb18: {
        _61 = ShallowInitBox(move _60, [isize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _110 = (((_61.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_110) = [const 10_isize, const 20_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _57 = move _61;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _56 = move _57 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _55 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _56) -> bb19; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb19: {
        _54 = indirect::<Vec<isize>>(move _55) -> bb20; // scope 0 at ui/traits/to-str.rs:30:16: 30:38
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:30:16: 30:24
                                         // + literal: Const { ty: fn(Vec<isize>) -> String {indirect::<Vec<isize>>}, val: Value(<ZST>) }
    }

    bb20: {
        _53 = &_54;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = const "[10, 20]!";         // scope 0 at ui/traits/to-str.rs:30:40: 30:51
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:30:40: 30:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _64 = _65;                       // scope 0 at ui/traits/to-str.rs:30:40: 30:63
        _63 = <str as ToString>::to_string(move _64) -> [return: bb21, unwind: bb39]; // scope 0 at ui/traits/to-str.rs:30:40: 30:63
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:30:52: 30:61
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb21: {
        _62 = &_63;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _52 = (move _53, move _62);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _66 = (_52.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _67 = (_52.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _70 = _66;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _71 = _67;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _69 = <String as PartialEq>::eq(move _70, move _71) -> [return: bb22, unwind: bb38]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _68 = Not(move _69);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _68) -> [0: bb24, otherwise: bb23]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _72 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _76;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _67;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = _78;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _73 = core::panicking::assert_failed::<String, String>(move _74, move _75, move _77, move _79) -> bb38; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_63) -> [return: bb25, unwind: bb39]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        drop(_54) -> bb26;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        _86 = const 8_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _87 = const 8_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _88 = alloc::alloc::exchange_malloc(move _86, move _87) -> bb27; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb27: {
        _89 = ShallowInitBox(move _88, [isize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _111 = (((_89.0: std::ptr::Unique<[isize; 1]>).0: std::ptr::NonNull<[isize; 1]>).0: *const [isize; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_111) = [const 1_isize];       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _85 = move _89;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _84 = move _85 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _83 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _84) -> bb28; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb28: {
        _82 = indirect2::<Vec<isize>>(move _83) -> bb29; // scope 0 at ui/traits/to-str.rs:35:16: 35:34
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:35:16: 35:25
                                         // + literal: Const { ty: fn(Vec<isize>) -> String {indirect2::<Vec<isize>>}, val: Value(<ZST>) }
    }

    bb29: {
        _81 = &_82;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _93 = const "[1]!";              // scope 0 at ui/traits/to-str.rs:35:36: 35:42
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:35:36: 35:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _92 = _93;                       // scope 0 at ui/traits/to-str.rs:35:36: 35:54
        _91 = <str as ToString>::to_string(move _92) -> [return: bb30, unwind: bb37]; // scope 0 at ui/traits/to-str.rs:35:36: 35:54
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:35:43: 35:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb30: {
        _90 = &_91;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _80 = (move _81, move _90);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _94 = (_80.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _95 = (_80.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _98 = _94;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _99 = _95;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _97 = <String as PartialEq>::eq(move _98, move _99) -> [return: bb31, unwind: bb36]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _96 = Not(move _97);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _96) -> [0: bb33, otherwise: bb32]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _100 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = _94;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _103 = _104;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _95;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = _106;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _101 = core::panicking::assert_failed::<String, String>(move _102, move _103, move _105, move _107) -> bb36; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb33: {
        drop(_91) -> [return: bb34, unwind: bb37]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34: {
        drop(_82) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35: {
        return;                          // scope 0 at ui/traits/to-str.rs:36:2: 36:2
    }

    bb36 (cleanup): {
        drop(_91) -> bb37;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb37 (cleanup): {
        drop(_82) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb38 (cleanup): {
        drop(_63) -> bb39;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb39 (cleanup): {
        drop(_54) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb40 (cleanup): {
        drop(_35) -> bb41;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb41 (cleanup): {
        drop(_25) -> bb42;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb42 (cleanup): {
        drop(_27) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb43 (cleanup): {
        drop(_6) -> bb44;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb44 (cleanup): {
        drop(_3) -> bb45;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb45 (cleanup): {
        resume;                          // scope 0 at ui/traits/to-str.rs:23:1: 36:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/traits/to-str.rs:24:16: 24:30
    let mut _1: isize;                   // in scope 0 at ui/traits/to-str.rs:24:16: 24:17

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/traits/to-str.rs:24:16: 24:17
        _0 = &_1;                        // scope 0 at ui/traits/to-str.rs:24:16: 24:30
        return;                          // scope 0 at ui/traits/to-str.rs:24:16: 24:30
    }
}

fn indirect(_1: T) -> String {
    debug x => _1;                       // in scope 0 at ui/traits/to-str.rs:27:27: 27:28
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _3: &[&str];                 // in scope 0 at ui/traits/to-str.rs:28:17: 28:22
    let mut _4: &[&str; 2];              // in scope 0 at ui/traits/to-str.rs:28:17: 28:22
    let _5: &[&str; 2];                  // in scope 0 at ui/traits/to-str.rs:28:17: 28:22
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/to-str.rs:28:24: 28:38
    let mut _11: &std::string::String;   // in scope 0 at ui/traits/to-str.rs:28:24: 28:38
    let _12: &std::string::String;       // in scope 0 at ui/traits/to-str.rs:28:24: 28:38
    let _13: std::string::String;        // in scope 0 at ui/traits/to-str.rs:28:24: 28:38
    let mut _14: &T;                     // in scope 0 at ui/traits/to-str.rs:28:24: 28:38
    let mut _15: &[&str; 2];             // in scope 0 at ui/traits/to-str.rs:28:17: 28:22
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _15 = const _;                   // scope 0 at ui/traits/to-str.rs:28:17: 28:22
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:28:17: 28:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(indirect, [T], Some(promoted[0])) }
        _5 = _15;                        // scope 0 at ui/traits/to-str.rs:28:17: 28:22
        _4 = _5;                         // scope 0 at ui/traits/to-str.rs:28:17: 28:22
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/to-str.rs:28:17: 28:22
        _14 = &_1;                       // scope 0 at ui/traits/to-str.rs:28:24: 28:38
        _13 = <T as to_str>::to_string_(move _14) -> [return: bb1, unwind: bb9]; // scope 0 at ui/traits/to-str.rs:28:24: 28:38
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:28:26: 28:36
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> String {<T as to_str>::to_string_}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = &_13;                      // scope 0 at ui/traits/to-str.rs:28:24: 28:38
        _11 = _12;                       // scope 0 at ui/traits/to-str.rs:28:24: 28:38
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _11) -> [return: bb2, unwind: bb8]; // scope 0 at ui/traits/to-str.rs:28:24: 28:38
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:28:24: 28:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb3, unwind: bb8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = format(move _2) -> [return: bb4, unwind: bb8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_13) -> [return: bb5, unwind: bb7]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/traits/to-str.rs:29:5: 29:6
    }

    bb6: {
        return;                          // scope 0 at ui/traits/to-str.rs:29:6: 29:6
    }

    bb7 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:120:5: 120:6
    }

    bb8 (cleanup): {
        drop(_13) -> bb9;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:80: 118:81
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/traits/to-str.rs:29:5: 29:6
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/traits/to-str.rs:27:5: 29:6
    }
}

promoted[0] in indirect: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/to-str.rs:28:17: 28:22
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/to-str.rs:28:17: 28:22

    bb0: {
        _1 = [const "", const "!"];      // scope 0 at ui/traits/to-str.rs:28:17: 28:22
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:28:17: 28:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:28:17: 28:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/to-str.rs:28:17: 28:22
        return;                          // scope 0 at ui/traits/to-str.rs:28:17: 28:22
    }
}

fn indirect2(_1: T) -> String {
    debug x => _1;                       // in scope 0 at ui/traits/to-str.rs:32:28: 32:29
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/to-str.rs:32:37: 32:43
    let mut _2: T;                       // in scope 0 at ui/traits/to-str.rs:33:18: 33:19

    bb0: {
        _2 = move _1;                    // scope 0 at ui/traits/to-str.rs:33:18: 33:19
        _0 = indirect::<T>(move _2) -> bb1; // scope 0 at ui/traits/to-str.rs:33:9: 33:20
                                         // mir::Constant
                                         // + span: ui/traits/to-str.rs:33:9: 33:17
                                         // + literal: Const { ty: fn(T) -> String {indirect::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/to-str.rs:34:6: 34:6
    }
}
