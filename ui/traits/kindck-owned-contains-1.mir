// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/kindck-owned-contains-1.rs:7:1: 7:45>::get(_1: &Box<A>) -> A {
    debug self => _1;                    // in scope 0 at ui/traits/kindck-owned-contains-1.rs:8:12: 8:17
    let mut _0: A;                       // return place in scope 0 at ui/traits/kindck-owned-contains-1.rs:8:22: 8:23
    let mut _2: &A;                      // in scope 0 at ui/traits/kindck-owned-contains-1.rs:9:9: 9:25
    let mut _3: std::boxed::Box<A>;      // in scope 0 at ui/traits/kindck-owned-contains-1.rs:8:12: 8:17
    let mut _4: *const A;                // in scope 0 at ui/traits/kindck-owned-contains-1.rs:8:12: 8:17

    bb0: {
        _3 = deref_copy (*_1);           // scope 0 at ui/traits/kindck-owned-contains-1.rs:9:9: 9:25
        _4 = (((_3.0: std::ptr::Unique<A>).0: std::ptr::NonNull<A>).0: *const A); // scope 0 at ui/traits/kindck-owned-contains-1.rs:9:9: 9:25
        _2 = &(*_4);                     // scope 0 at ui/traits/kindck-owned-contains-1.rs:9:9: 9:25
        _0 = <A as Clone>::clone(move _2) -> bb1; // scope 0 at ui/traits/kindck-owned-contains-1.rs:9:9: 9:25
                                         // mir::Constant
                                         // + span: ui/traits/kindck-owned-contains-1.rs:9:18: 9:23
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/kindck-owned-contains-1.rs:10:6: 10:6
    }
}

fn repeater(_1: Box<A>) -> Box<dyn repeat<A>> {
    debug v => _1;                       // in scope 0 at ui/traits/kindck-owned-contains-1.rs:13:32: 13:33
    let mut _0: std::boxed::Box<dyn repeat<A>>; // return place in scope 0 at ui/traits/kindck-owned-contains-1.rs:13:46: 13:72
    let mut _2: std::boxed::Box<dyn repeat<A>>; // in scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:46
    let mut _3: std::boxed::Box<dyn repeat<A>>; // in scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:46
    let mut _4: std::boxed::Box<dyn repeat<A>>; // in scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:46
    let mut _5: std::boxed::Box<std::boxed::Box<A>>; // in scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:16
    let mut _6: std::boxed::Box<A>;      // in scope 0 at ui/traits/kindck-owned-contains-1.rs:14:14: 14:15

    bb0: {
        _6 = move _1;                    // scope 0 at ui/traits/kindck-owned-contains-1.rs:14:14: 14:15
        _5 = Box::<Box<A>>::new(move _6) -> bb1; // scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:16
                                         // mir::Constant
                                         // + span: ui/traits/kindck-owned-contains-1.rs:14:5: 14:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<A>) -> Box<Box<A>> {Box::<Box<A>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn repeat<A>> (Pointer(Unsize)); // scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:16
        _3 = move _4;                    // scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:46
        _2 = move _3 as std::boxed::Box<dyn repeat<A>> (Pointer(Unsize)); // scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:46
        _0 = move _2 as std::boxed::Box<dyn repeat<A>> (Pointer(Unsize)); // scope 0 at ui/traits/kindck-owned-contains-1.rs:14:5: 14:46
        return;                          // scope 0 at ui/traits/kindck-owned-contains-1.rs:15:2: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/kindck-owned-contains-1.rs:17:15: 17:15
    let _1: i32;                         // in scope 0 at ui/traits/kindck-owned-contains-1.rs:18:9: 18:10
    let mut _3: std::boxed::Box<i32>;    // in scope 0 at ui/traits/kindck-owned-contains-1.rs:19:22: 19:33
    let mut _4: i32;                     // in scope 0 at ui/traits/kindck-owned-contains-1.rs:19:31: 19:32
    let mut _5: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: i32;                         // in scope 0 at ui/traits/kindck-owned-contains-1.rs:20:19: 20:26
    let mut _9: &dyn repeat<i32>;        // in scope 0 at ui/traits/kindck-owned-contains-1.rs:20:19: 20:26
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: *const dyn repeat<i32>; // in scope 0 at ui/traits/kindck-owned-contains-1.rs:19:9: 19:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/kindck-owned-contains-1.rs:18:9: 18:10
        let _2: std::boxed::Box<dyn repeat<i32>>; // in scope 1 at ui/traits/kindck-owned-contains-1.rs:19:9: 19:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/traits/kindck-owned-contains-1.rs:19:9: 19:10
            let _10: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/traits/kindck-owned-contains-1.rs:18:13: 18:14
        _4 = _1;                         // scope 1 at ui/traits/kindck-owned-contains-1.rs:19:31: 19:32
        _3 = Box::<i32>::new(move _4) -> bb1; // scope 1 at ui/traits/kindck-owned-contains-1.rs:19:22: 19:33
                                         // mir::Constant
                                         // + span: ui/traits/kindck-owned-contains-1.rs:19:22: 19:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = repeater::<i32>(move _3) -> bb2; // scope 1 at ui/traits/kindck-owned-contains-1.rs:19:13: 19:34
                                         // mir::Constant
                                         // + span: ui/traits/kindck-owned-contains-1.rs:19:13: 19:21
                                         // + literal: Const { ty: fn(Box<i32>) -> Box<(dyn repeat<i32> + 'static)> {repeater::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = (((_2.0: std::ptr::Unique<dyn repeat<i32>>).0: std::ptr::NonNull<dyn repeat<i32>>).0: *const dyn repeat<i32>); // scope 2 at ui/traits/kindck-owned-contains-1.rs:20:19: 20:26
        _9 = &(*_24);                    // scope 2 at ui/traits/kindck-owned-contains-1.rs:20:19: 20:26
        _8 = <dyn repeat<i32> as repeat<i32>>::get(move _9) -> [return: bb3, unwind: bb7]; // scope 2 at ui/traits/kindck-owned-contains-1.rs:20:19: 20:26
                                         // mir::Constant
                                         // + span: ui/traits/kindck-owned-contains-1.rs:20:21: 20:24
                                         // + literal: Const { ty: for<'a> fn(&'a dyn repeat<i32>) -> i32 {<dyn repeat<i32> as repeat<i32>>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_5.0: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_5.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i32, i32>(move _18, move _19, move _21, move _23) -> bb7; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_2) -> bb6;                 // scope 1 at ui/traits/kindck-owned-contains-1.rs:21:1: 21:2
    }

    bb6: {
        return;                          // scope 0 at ui/traits/kindck-owned-contains-1.rs:21:2: 21:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 1 at ui/traits/kindck-owned-contains-1.rs:21:1: 21:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/traits/kindck-owned-contains-1.rs:17:1: 21:2
    }
}
