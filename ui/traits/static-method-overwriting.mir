// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn base::<impl at ui/traits/static-method-overwriting.rs:12:5: 12:32>::new() -> Foo {
    let mut _0: base::Foo;
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[&str; 1];

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in base::<impl at ui/traits/static-method-overwriting.rs:12:5: 12:32>::new: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Foo\n"];
        _0 = &_1;
        return;
    }
}

fn base::<impl at ui/traits/static-method-overwriting.rs:23:5: 23:32>::new() -> Bar {
    let mut _0: base::Bar;
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[&str; 1];

    bb0: {
        _4 = const _;
        _3 = _4 as &[&str] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_const(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = _print(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in base::<impl at ui/traits/static-method-overwriting.rs:23:5: 23:32>::new: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "Bar\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: base::Foo;
    scope 1 {
        debug _f => const Foo {{ dummy: () }};
        let _2: base::Bar;
        scope 2 {
            debug _b => const Bar {{ dummy: () }};
        }
    }

    bb0: {
        _1 = <Foo as HasNew>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <Bar as HasNew>::new() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
