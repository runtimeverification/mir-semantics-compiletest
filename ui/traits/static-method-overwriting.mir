// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn base::<impl at ui/traits/static-method-overwriting.rs:12:5: 12:32>::new() -> Foo {
    let mut _0: base::Foo;               // return place in scope 0 at ui/traits/static-method-overwriting.rs:13:21: 13:24
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
    let mut _4: &[&str; 1];              // in scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
    let _5: &[&str; 1];                  // in scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str; 1];             // in scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27

    bb0: {
        _10 = const _;                   // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
                                         // mir::Constant
                                         // + span: ui/traits/static-method-overwriting.rs:14:22: 14:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Foo as HasNew>::new, [], Some(promoted[1])) }
        _5 = _10;                        // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
        _4 = _5;                         // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
        _9 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Foo as HasNew>::new, [], Some(promoted[0])) }
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _print(move _2) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/static-method-overwriting.rs:16:10: 16:10
    }
}

promoted[0] in base::<impl at ui/traits/static-method-overwriting.rs:12:5: 12:32>::new: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in base::<impl at ui/traits/static-method-overwriting.rs:12:5: 12:32>::new: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
    let mut _1: [&str; 1];               // in scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27

    bb0: {
        _1 = [const "Foo\n"];            // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
                                         // mir::Constant
                                         // + span: ui/traits/static-method-overwriting.rs:14:22: 14:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
        return;                          // scope 0 at ui/traits/static-method-overwriting.rs:14:22: 14:27
    }
}

fn base::<impl at ui/traits/static-method-overwriting.rs:23:5: 23:32>::new() -> Bar {
    let mut _0: base::Bar;               // return place in scope 0 at ui/traits/static-method-overwriting.rs:24:21: 24:24
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
    let mut _4: &[&str; 1];              // in scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
    let _5: &[&str; 1];                  // in scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str; 1];             // in scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27

    bb0: {
        _10 = const _;                   // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
                                         // mir::Constant
                                         // + span: ui/traits/static-method-overwriting.rs:25:22: 25:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Bar as HasNew>::new, [], Some(promoted[1])) }
        _5 = _10;                        // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
        _4 = _5;                         // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
        _9 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Bar as HasNew>::new, [], Some(promoted[0])) }
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _print(move _2) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/static-method-overwriting.rs:27:10: 27:10
    }
}

promoted[0] in base::<impl at ui/traits/static-method-overwriting.rs:23:5: 23:32>::new: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in base::<impl at ui/traits/static-method-overwriting.rs:23:5: 23:32>::new: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
    let mut _1: [&str; 1];               // in scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27

    bb0: {
        _1 = [const "Bar\n"];            // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
                                         // mir::Constant
                                         // + span: ui/traits/static-method-overwriting.rs:25:22: 25:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
        return;                          // scope 0 at ui/traits/static-method-overwriting.rs:25:22: 25:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/static-method-overwriting.rs:31:15: 31:15
    let _1: base::Foo;                   // in scope 0 at ui/traits/static-method-overwriting.rs:32:9: 32:11
    scope 1 {
        debug _f => _1;                  // in scope 1 at ui/traits/static-method-overwriting.rs:32:9: 32:11
        let _2: base::Bar;               // in scope 1 at ui/traits/static-method-overwriting.rs:33:9: 33:11
        scope 2 {
            debug _b => _2;              // in scope 2 at ui/traits/static-method-overwriting.rs:33:9: 33:11
        }
    }

    bb0: {
        _1 = <Foo as HasNew>::new() -> bb1; // scope 0 at ui/traits/static-method-overwriting.rs:32:25: 32:44
                                         // mir::Constant
                                         // + span: ui/traits/static-method-overwriting.rs:32:25: 32:42
                                         // + literal: Const { ty: fn() -> Foo {<Foo as HasNew>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Bar as HasNew>::new() -> bb2; // scope 1 at ui/traits/static-method-overwriting.rs:33:25: 33:44
                                         // mir::Constant
                                         // + span: ui/traits/static-method-overwriting.rs:33:25: 33:42
                                         // + literal: Const { ty: fn() -> Bar {<Bar as HasNew>::new}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/static-method-overwriting.rs:34:2: 34:2
    }
}
