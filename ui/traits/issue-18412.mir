// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-18412.rs:12:1: 12:7>::bar(_1: &A) -> usize {
    debug self => _1;                    // in scope 0 at ui/traits/issue-18412.rs:13:12: 13:17
    let mut _0: usize;                   // return place in scope 0 at ui/traits/issue-18412.rs:13:22: 13:27

    bb0: {
        _0 = ((*_1).0: usize);           // scope 0 at ui/traits/issue-18412.rs:13:30: 13:36
        return;                          // scope 0 at ui/traits/issue-18412.rs:13:38: 13:38
    }
}

fn <impl at ui/traits/issue-18412.rs:16:1: 16:15>::foo(_1: &A) -> usize {
    debug self => _1;                    // in scope 0 at ui/traits/issue-18412.rs:17:12: 17:17
    let mut _0: usize;                   // return place in scope 0 at ui/traits/issue-18412.rs:17:22: 17:27
    let mut _2: &A;                      // in scope 0 at ui/traits/issue-18412.rs:17:30: 17:40

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/issue-18412.rs:17:30: 17:40
        _0 = A::bar(move _2) -> bb1;     // scope 0 at ui/traits/issue-18412.rs:17:30: 17:40
                                         // mir::Constant
                                         // + span: ui/traits/issue-18412.rs:17:35: 17:38
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> usize {A::bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/issue-18412.rs:17:42: 17:42
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-18412.rs:20:11: 20:11
    let _1: for<'a> fn(&'a A) -> usize {A::bar}; // in scope 0 at ui/traits/issue-18412.rs:21:9: 21:10
    let mut _4: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: usize;                       // in scope 0 at ui/traits/issue-18412.rs:25:16: 25:21
    let mut _7: for<'a> fn(&'a A) -> usize {A::bar}; // in scope 0 at ui/traits/issue-18412.rs:25:16: 25:17
    let mut _8: &A;                      // in scope 0 at ui/traits/issue-18412.rs:25:18: 25:20
    let _9: &A;                          // in scope 0 at ui/traits/issue-18412.rs:25:18: 25:20
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: usize;                      // in scope 0 at ui/traits/issue-18412.rs:25:23: 25:28
    let mut _12: for<'a> fn(&'a A) -> usize {<A as Foo>::foo}; // in scope 0 at ui/traits/issue-18412.rs:25:23: 25:24
    let mut _13: &A;                     // in scope 0 at ui/traits/issue-18412.rs:25:25: 25:27
    let _14: &A;                         // in scope 0 at ui/traits/issue-18412.rs:25:25: 25:27
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/traits/issue-18412.rs:21:9: 21:10
        let _2: for<'a> fn(&'a A) -> usize {<A as Foo>::foo}; // in scope 1 at ui/traits/issue-18412.rs:22:9: 22:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/traits/issue-18412.rs:22:9: 22:10
            let _3: A;                   // in scope 2 at ui/traits/issue-18412.rs:23:9: 23:10
            scope 3 {
                debug a => _3;           // in scope 3 at ui/traits/issue-18412.rs:23:9: 23:10
                let _15: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _16: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _15; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _16; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _21: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _21; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _3 = A(const 42_usize);          // scope 2 at ui/traits/issue-18412.rs:23:13: 23:18
        _9 = &_3;                        // scope 3 at ui/traits/issue-18412.rs:25:18: 25:20
        _8 = _9;                         // scope 3 at ui/traits/issue-18412.rs:25:18: 25:20
        _6 = move _7(move _8) -> bb1;    // scope 3 at ui/traits/issue-18412.rs:25:16: 25:21
    }

    bb1: {
        _5 = &_6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _14 = &_3;                       // scope 3 at ui/traits/issue-18412.rs:25:25: 25:27
        _13 = _14;                       // scope 3 at ui/traits/issue-18412.rs:25:25: 25:27
        _11 = move _12(move _13) -> bb2; // scope 3 at ui/traits/issue-18412.rs:25:23: 25:28
    }

    bb2: {
        _10 = &_11;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _10);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_4.0: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_4.1: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = (*_15);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = (*_16);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = Eq(move _19, move _20);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _17 = Not(move _18);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<usize, usize>(move _23, move _24, move _26, move _28); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/traits/issue-18412.rs:26:2: 26:2
    }
}

fn A(_1: usize) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/traits/issue-18412.rs:10:1: 10:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/traits/issue-18412.rs:10:1: 10:9
        return;                          // scope 0 at ui/traits/issue-18412.rs:10:1: 10:9
    }
}

// MIR FOR CTFE
fn A(_1: usize) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/traits/issue-18412.rs:10:1: 10:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/traits/issue-18412.rs:10:1: 10:9
        return;                          // scope 0 at ui/traits/issue-18412.rs:10:1: 10:9
    }
}
