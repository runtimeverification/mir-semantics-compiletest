// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Bleh::foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/item-inside-macro.rs:6:18: 6:18

    bb0: {
        return;                          // scope 0 at ui/traits/item-inside-macro.rs:6:21: 6:21
    }
}

fn <impl at ui/traits/item-inside-macro.rs:23:1: 23:19>::bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/item-inside-macro.rs:24:14: 24:14

    bb0: {
        return;                          // scope 0 at ui/traits/item-inside-macro.rs:24:16: 24:16
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/item-inside-macro.rs:27:11: 27:11
    let _1: ();                          // in scope 0 at ui/traits/item-inside-macro.rs:28:5: 28:16
    let _2: ();                          // in scope 0 at ui/traits/item-inside-macro.rs:29:5: 29:16

    bb0: {
        _1 = <Test as Bleh>::bar() -> bb1; // scope 0 at ui/traits/item-inside-macro.rs:28:5: 28:16
                                         // mir::Constant
                                         // + span: ui/traits/item-inside-macro.rs:28:5: 28:14
                                         // + literal: Const { ty: fn() {<Test as Bleh>::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Test as Bleh>::foo() -> bb2; // scope 0 at ui/traits/item-inside-macro.rs:29:5: 29:16
                                         // mir::Constant
                                         // + span: ui/traits/item-inside-macro.rs:29:5: 29:14
                                         // + literal: Const { ty: fn() {<Test as Bleh>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/item-inside-macro.rs:30:2: 30:2
    }
}
