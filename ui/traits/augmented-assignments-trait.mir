// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/augmented-assignments-trait.rs:6:1: 6:23>::add_assign(_1: &mut Int, _2: Int) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/augmented-assignments-trait.rs:7:19: 7:28
    let mut _0: ();                      // return place in scope 0 at ui/traits/augmented-assignments-trait.rs:7:38: 7:38
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/augmented-assignments-trait.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/traits/augmented-assignments-trait.rs:12:13: 12:13
    }
}

fn Int(_1: i32) -> Int {
    let mut _0: Int;                     // return place in scope 0 at ui/traits/augmented-assignments-trait.rs:4:1: 4:11

    bb0: {
        _0 = Int(move _1);               // scope 0 at ui/traits/augmented-assignments-trait.rs:4:1: 4:11
        return;                          // scope 0 at ui/traits/augmented-assignments-trait.rs:4:1: 4:11
    }
}

// MIR FOR CTFE
fn Int(_1: i32) -> Int {
    let mut _0: Int;                     // return place in scope 0 at ui/traits/augmented-assignments-trait.rs:4:1: 4:11

    bb0: {
        _0 = Int(move _1);               // scope 0 at ui/traits/augmented-assignments-trait.rs:4:1: 4:11
        return;                          // scope 0 at ui/traits/augmented-assignments-trait.rs:4:1: 4:11
    }
}
