// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-6334.rs:20:1: 20:15>::a(_1: &Foo) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn <impl at ui/traits/issue-6334.rs:24:1: 24:15>::b(_1: &Foo) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn <impl at ui/traits/issue-6334.rs:30:1: 30:15>::combine(_1: &Bar, _2: &T) -> usize {
    debug self => _1;
    debug t => _2;
    let mut _0: usize;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: usize;

    bb0: {
        _4 = <T as A>::a(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Mul(move _4, const 100_usize);
        _5 = <T as B>::b(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Add(move _3, move _5);
        return;
    }
}

fn use_c(_1: &S, _2: &T) -> usize {
    debug s => _1;
    debug t => _2;
    let mut _0: usize;

    bb0: {
        _0 = <S as C>::combine::<T>(_1, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let _4: &Bar;
    let _5: &Foo;
    let mut _6: (&usize, &usize);
    let mut _7: &usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => const Foo;
        let _2: Bar;
        scope 2 {
            debug bar => const Bar;
            let _3: usize;
            scope 3 {
                debug r => _3;
                let _8: &usize;
                let _9: &usize;
                let mut _17: &usize;
                scope 4 {
                    debug left_val => _8;
                    debug right_val => _9;
                    let _14: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _14;
                    }
                }
            }
        }
    }

    bb0: {
        _4 = &_2;
        _5 = &_1;
        _3 = use_c::<Bar, Foo>(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_3;
        _17 = const _;
        _6 = (move _7, _17);
        _8 = (_6.0: &usize);
        _9 = (_6.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 102_usize;
        _0 = &_1;
        return;
    }
}
