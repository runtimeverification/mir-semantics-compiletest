// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-6334.rs:20:1: 20:15>::a(_1: &Foo) -> usize {
    debug self => _1;                    // in scope 0 at ui/traits/issue-6334.rs:21:10: 21:15
    let mut _0: usize;                   // return place in scope 0 at ui/traits/issue-6334.rs:21:20: 21:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/traits/issue-6334.rs:21:28: 21:29
        return;                          // scope 0 at ui/traits/issue-6334.rs:21:31: 21:31
    }
}

fn <impl at ui/traits/issue-6334.rs:24:1: 24:15>::b(_1: &Foo) -> usize {
    debug self => _1;                    // in scope 0 at ui/traits/issue-6334.rs:25:10: 25:15
    let mut _0: usize;                   // return place in scope 0 at ui/traits/issue-6334.rs:25:20: 25:25

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/traits/issue-6334.rs:25:28: 25:29
        return;                          // scope 0 at ui/traits/issue-6334.rs:25:31: 25:31
    }
}

fn <impl at ui/traits/issue-6334.rs:30:1: 30:15>::combine(_1: &Bar, _2: &T) -> usize {
    debug self => _1;                    // in scope 0 at ui/traits/issue-6334.rs:32:23: 32:28
    debug t => _2;                       // in scope 0 at ui/traits/issue-6334.rs:32:30: 32:31
    let mut _0: usize;                   // return place in scope 0 at ui/traits/issue-6334.rs:32:40: 32:45
    let mut _3: usize;                   // in scope 0 at ui/traits/issue-6334.rs:33:9: 33:22
    let mut _4: usize;                   // in scope 0 at ui/traits/issue-6334.rs:33:10: 33:15
    let mut _5: &T;                      // in scope 0 at ui/traits/issue-6334.rs:33:10: 33:15
    let mut _6: (usize, bool);           // in scope 0 at ui/traits/issue-6334.rs:33:9: 33:22
    let mut _7: usize;                   // in scope 0 at ui/traits/issue-6334.rs:33:25: 33:30
    let mut _8: &T;                      // in scope 0 at ui/traits/issue-6334.rs:33:25: 33:30
    let mut _9: (usize, bool);           // in scope 0 at ui/traits/issue-6334.rs:33:9: 33:30

    bb0: {
        _5 = _2;                         // scope 0 at ui/traits/issue-6334.rs:33:10: 33:15
        _4 = <T as A>::a(move _5) -> bb1; // scope 0 at ui/traits/issue-6334.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/traits/issue-6334.rs:33:12: 33:13
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> usize {<T as A>::a}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = CheckedMul(_4, const 100_usize); // scope 0 at ui/traits/issue-6334.rs:33:9: 33:22
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, const 100_usize) -> bb2; // scope 0 at ui/traits/issue-6334.rs:33:9: 33:22
    }

    bb2: {
        _3 = move (_6.0: usize);         // scope 0 at ui/traits/issue-6334.rs:33:9: 33:22
        _8 = _2;                         // scope 0 at ui/traits/issue-6334.rs:33:25: 33:30
        _7 = <T as B>::b(move _8) -> bb3; // scope 0 at ui/traits/issue-6334.rs:33:25: 33:30
                                         // mir::Constant
                                         // + span: ui/traits/issue-6334.rs:33:27: 33:28
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> usize {<T as B>::b}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = CheckedAdd(_3, _7);         // scope 0 at ui/traits/issue-6334.rs:33:9: 33:30
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _7) -> bb4; // scope 0 at ui/traits/issue-6334.rs:33:9: 33:30
    }

    bb4: {
        _0 = move (_9.0: usize);         // scope 0 at ui/traits/issue-6334.rs:33:9: 33:30
        return;                          // scope 0 at ui/traits/issue-6334.rs:34:6: 34:6
    }
}

fn use_c(_1: &S, _2: &T) -> usize {
    debug s => _1;                       // in scope 0 at ui/traits/issue-6334.rs:37:22: 37:23
    debug t => _2;                       // in scope 0 at ui/traits/issue-6334.rs:37:29: 37:30
    let mut _0: usize;                   // return place in scope 0 at ui/traits/issue-6334.rs:37:39: 37:44
    let mut _3: &S;                      // in scope 0 at ui/traits/issue-6334.rs:38:5: 38:17
    let mut _4: &T;                      // in scope 0 at ui/traits/issue-6334.rs:38:15: 38:16

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/issue-6334.rs:38:5: 38:17
        _4 = _2;                         // scope 0 at ui/traits/issue-6334.rs:38:15: 38:16
        _0 = <S as C>::combine::<T>(move _3, move _4) -> bb1; // scope 0 at ui/traits/issue-6334.rs:38:5: 38:17
                                         // mir::Constant
                                         // + span: ui/traits/issue-6334.rs:38:7: 38:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S, &'b T) -> usize {<S as C>::combine::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/issue-6334.rs:39:2: 39:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-6334.rs:41:15: 41:15
    let _1: Foo;                         // in scope 0 at ui/traits/issue-6334.rs:42:9: 42:12
    let mut _4: &Bar;                    // in scope 0 at ui/traits/issue-6334.rs:44:19: 44:23
    let _5: &Bar;                        // in scope 0 at ui/traits/issue-6334.rs:44:19: 44:23
    let mut _6: &Foo;                    // in scope 0 at ui/traits/issue-6334.rs:44:25: 44:29
    let _7: &Foo;                        // in scope 0 at ui/traits/issue-6334.rs:44:25: 44:29
    let mut _8: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/traits/issue-6334.rs:42:9: 42:12
        let _2: Bar;                     // in scope 1 at ui/traits/issue-6334.rs:43:9: 43:12
        scope 2 {
            debug bar => _2;             // in scope 2 at ui/traits/issue-6334.rs:43:9: 43:12
            let _3: usize;               // in scope 2 at ui/traits/issue-6334.rs:44:9: 44:10
            scope 3 {
                debug r => _3;           // in scope 3 at ui/traits/issue-6334.rs:44:9: 44:10
                let _11: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _12: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _25: &usize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _11; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _12; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _17: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _17; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _5 = &_2;                        // scope 2 at ui/traits/issue-6334.rs:44:19: 44:23
        _4 = _5;                         // scope 2 at ui/traits/issue-6334.rs:44:19: 44:23
        _7 = &_1;                        // scope 2 at ui/traits/issue-6334.rs:44:25: 44:29
        _6 = _7;                         // scope 2 at ui/traits/issue-6334.rs:44:25: 44:29
        _3 = use_c::<Bar, Foo>(move _4, move _6) -> bb1; // scope 2 at ui/traits/issue-6334.rs:44:13: 44:30
                                         // mir::Constant
                                         // + span: ui/traits/issue-6334.rs:44:13: 44:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Foo) -> usize {use_c::<Bar, Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_3;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = const 102_usize;           // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<usize, usize>(move _19, move _20, move _22, move _24); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/issue-6334.rs:46:2: 46:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/traits/issue-6334.rs:45:19: 45:22

    bb0: {
        _1 = const 102_usize;            // scope 0 at ui/traits/issue-6334.rs:45:19: 45:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
