// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static BYTE: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 33_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &dyn std::fmt::Display;
    let _2: &u8;
    let mut _4: std::boxed::Box<u8>;
    let mut _5: u8;
    let mut _6: &u8;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &&dyn std::fmt::Display;
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &std::boxed::Box<dyn std::fmt::Display>;
    let mut _25: (&std::string::String, &&str);
    let mut _26: &std::string::String;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&std::string::String, &&str);
    let mut _35: &std::string::String;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _3: std::boxed::Box<dyn std::fmt::Display>;
        scope 2 {
            debug y => _3;
            scope 3 {
                scope 4 {
                    let _7: std::string::String;
                    let _8: std::string::String;
                    let mut _46: &[&str; 1];
                    scope 5 {
                        debug xstr => _7;
                        let _16: std::string::String;
                        let _17: std::string::String;
                        let mut _45: &[&str; 1];
                        scope 7 {
                            debug ystr => _16;
                            let _27: &std::string::String;
                            let _28: &&str;
                            let _36: &std::string::String;
                            let _37: &&str;
                            let mut _43: &&str;
                            let mut _44: &&str;
                            scope 9 {
                                debug left_val => _27;
                                debug right_val => _28;
                                let _31: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _31;
                                }
                            }
                            scope 11 {
                                debug left_val => _36;
                                debug right_val => _37;
                                let _40: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _40;
                                }
                            }
                        }
                        scope 8 {
                            debug res => _17;
                        }
                    }
                    scope 6 {
                        debug res => _8;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const {alloc1: &u8};
        _1 = _2 as &dyn std::fmt::Display (Pointer(Unsize));
        _6 = const {alloc1: &u8};
        _5 = (*_6);
        _4 = Box::<u8>::new(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::fmt::Display> (Pointer(Unsize));
        _46 = const _;
        _10 = _46 as &[&str] (Pointer(Unsize));
        _15 = &_1;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<&dyn std::fmt::Display>(_15) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _7 = move _8;
        _45 = const _;
        _19 = _45 as &[&str] (Pointer(Unsize));
        _24 = &_3;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<Box<dyn std::fmt::Display>>(_24) -> [return: bb5, unwind: bb18];
    }

    bb5: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _17 = format(move _18) -> [return: bb7, unwind: bb18];
    }

    bb7: {
        _16 = move _17;
        _26 = &_7;
        _44 = const _;
        _25 = (move _26, _44);
        _27 = (_25.0: &std::string::String);
        _28 = (_25.1: &&str);
        _30 = <String as PartialEq<&str>>::eq(_27, _28) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<String, &str>(move _31, _27, _28, move _33) -> bb17;
    }

    bb10: {
        _35 = &_16;
        _43 = const _;
        _34 = (move _35, _43);
        _36 = (_34.0: &std::string::String);
        _37 = (_34.1: &&str);
        _39 = <String as PartialEq<&str>>::eq(_36, _37) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<String, &str>(move _40, _36, _37, move _42) -> bb17;
    }

    bb13: {
        drop(_16) -> [return: bb14, unwind: bb18];
    }

    bb14: {
        drop(_7) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        drop(_3) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_16) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_7) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_3) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}

alloc1 (static: BYTE, size: 1, align: 1) {
    21                                              â”‚ !
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "33";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "33";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}
