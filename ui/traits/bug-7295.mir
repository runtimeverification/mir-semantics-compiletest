// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::func2(_1: &Self, _2: U, _3: T) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/bug-7295.rs:7:17: 7:22
    debug t => _2;                       // in scope 0 at ui/traits/bug-7295.rs:7:24: 7:25
    debug w => _3;                       // in scope 0 at ui/traits/bug-7295.rs:7:30: 7:31
    let mut _0: ();                      // return place in scope 0 at ui/traits/bug-7295.rs:7:36: 7:36
    let _4: ();                          // in scope 0 at ui/traits/bug-7295.rs:8:9: 8:25
    let mut _5: &Self;                   // in scope 0 at ui/traits/bug-7295.rs:8:9: 8:25
    let mut _6: U;                       // in scope 0 at ui/traits/bug-7295.rs:8:20: 8:21
    let mut _7: T;                       // in scope 0 at ui/traits/bug-7295.rs:8:23: 8:24

    bb0: {
        _5 = _1;                         // scope 0 at ui/traits/bug-7295.rs:8:9: 8:25
        _6 = move _2;                    // scope 0 at ui/traits/bug-7295.rs:8:20: 8:21
        _7 = move _3;                    // scope 0 at ui/traits/bug-7295.rs:8:23: 8:24
        _4 = <Self as Foo<T>>::func1::<U>(move _5, move _6, move _7) -> bb1; // scope 0 at ui/traits/bug-7295.rs:8:9: 8:25
                                         // mir::Constant
                                         // + span: ui/traits/bug-7295.rs:8:14: 8:19
                                         // + literal: Const { ty: for<'a> fn(&'a Self, U, T) {<Self as Foo<T>>::func1::<U>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/bug-7295.rs:9:6: 9:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/bug-7295.rs:12:15: 12:15

    bb0: {
        return;                          // scope 0 at ui/traits/bug-7295.rs:14:2: 14:2
    }
}
