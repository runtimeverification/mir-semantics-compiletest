// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/coercion-generic.rs:7:16: 7:21>::clone(_1: &Struct) -> Struct {
    debug self => _1;
    let mut _0: Struct;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/coercion-generic.rs:13:1: 13:36>::f(_1: &Struct, _2: &str) -> () {
    debug self => _1;
    debug x => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &&str;
    let mut _11: &[&str; 2];

    bb0: {
        _11 = const _;
        _5 = _11 as &[&str] (Pointer(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<&str>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in <impl at ui/traits/coercion-generic.rs:13:1: 13:36>::f: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "Hi, ", const "!\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Struct;
    let mut _3: std::boxed::Box<Struct>;
    let mut _4: Struct;
    let _5: ();
    let mut _6: &dyn Trait<&str>;
    let _8: &Struct;
    let _9: ();
    let mut _10: *const dyn Trait<&str>;
    scope 1 {
        debug a => _1;
        let _2: std::boxed::Box<dyn Trait<&str>>;
        scope 2 {
            debug b => _2;
            let _7: &dyn Trait<&str>;
            scope 3 {
                debug c => _7;
            }
        }
    }

    bb0: {
        _1 = Struct { x: const 1_isize, y: const 2_isize };
        _4 = _1;
        _3 = Box::<Struct>::new(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn Trait<&str>> (Pointer(Unsize));
        _10 = (((_2.0: std::ptr::Unique<dyn Trait<&str>>).0: std::ptr::NonNull<dyn Trait<&str>>).0: *const dyn Trait<&str>);
        _6 = &(*_10);
        _5 = <dyn Trait<&str> as Trait<&str>>::f(move _6, const "Mary") -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _8 = &_1;
        _7 = _8 as &dyn Trait<&str> (Pointer(Unsize));
        _9 = <dyn Trait<&str> as Trait<&str>>::f(_7, const "Joe") -> [return: bb3, unwind: bb5];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}
