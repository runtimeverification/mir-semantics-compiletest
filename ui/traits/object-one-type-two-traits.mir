// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/object-one-type-two-traits.rs:14:1: 14:20>::get(_1: &isize) -> isize {
    debug self => _1;                    // in scope 0 at ui/traits/object-one-type-two-traits.rs:15:12: 15:17
    let mut _0: isize;                   // return place in scope 0 at ui/traits/object-one-type-two-traits.rs:15:22: 15:27

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/object-one-type-two-traits.rs:16:9: 16:14
        return;                          // scope 0 at ui/traits/object-one-type-two-traits.rs:17:6: 17:6
    }
}

fn <impl at ui/traits/object-one-type-two-traits.rs:14:1: 14:20>::wrap(_1: Box<isize>) -> Box<dyn Any> {
    debug self => _1;                    // in scope 0 at ui/traits/object-one-type-two-traits.rs:18:13: 18:17
    let mut _0: std::boxed::Box<dyn std::any::Any>; // return place in scope 0 at ui/traits/object-one-type-two-traits.rs:18:34: 18:54
    let mut _2: std::boxed::Box<dyn std::any::Any>; // in scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:37
    let mut _3: std::boxed::Box<dyn std::any::Any>; // in scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:37
    let mut _4: std::boxed::Box<dyn std::any::Any>; // in scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:37
    let mut _5: std::boxed::Box<isize>;  // in scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:13

    bb0: {
        _5 = move _1;                    // scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:13
        _4 = move _5 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize)); // scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:13
        _3 = move _4;                    // scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:37
        _2 = move _3 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize)); // scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:37
        _0 = move _2 as std::boxed::Box<dyn std::any::Any> (Pointer(Unsize)); // scope 0 at ui/traits/object-one-type-two-traits.rs:19:9: 19:37
        return;                          // scope 0 at ui/traits/object-one-type-two-traits.rs:20:6: 20:6
    }
}

fn is(_1: &dyn Any) -> bool {
    debug x => _1;                       // in scope 0 at ui/traits/object-one-type-two-traits.rs:23:14: 23:15
    let mut _0: bool;                    // return place in scope 0 at ui/traits/object-one-type-two-traits.rs:23:30: 23:34
    let mut _2: &dyn std::any::Any;      // in scope 0 at ui/traits/object-one-type-two-traits.rs:24:5: 24:16

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/object-one-type-two-traits.rs:24:5: 24:16
        _0 = <(dyn Any + 'static)>::is::<T>(move _2) -> bb1; // scope 0 at ui/traits/object-one-type-two-traits.rs:24:5: 24:16
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:24:7: 24:9
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a (dyn Any + 'static)) -> bool {<(dyn Any + 'static)>::is::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/object-one-type-two-traits.rs:25:2: 25:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/object-one-type-two-traits.rs:27:11: 27:11
    let _1: std::boxed::Box<dyn Wrap>;   // in scope 0 at ui/traits/object-one-type-two-traits.rs:28:9: 28:10
    let mut _2: std::boxed::Box<dyn Wrap>; // in scope 0 at ui/traits/object-one-type-two-traits.rs:28:13: 28:47
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/traits/object-one-type-two-traits.rs:28:13: 28:30
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
    let mut _7: &[&str; 2];              // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
    let _8: &[&str; 2];                  // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
    let mut _14: &isize;                 // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
    let _15: &isize;                     // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
    let _16: isize;                      // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
    let mut _17: &dyn Wrap;              // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
    let mut _19: std::boxed::Box<dyn Wrap>; // in scope 0 at ui/traits/object-one-type-two-traits.rs:30:13: 30:14
    let mut _21: bool;                   // in scope 0 at ui/traits/object-one-type-two-traits.rs:31:1: 31:2
    let mut _22: *const dyn Wrap;        // in scope 0 at ui/traits/object-one-type-two-traits.rs:28:9: 28:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/object-one-type-two-traits.rs:28:9: 28:10
        let _18: std::boxed::Box<dyn std::any::Any>; // in scope 1 at ui/traits/object-one-type-two-traits.rs:30:9: 30:10
        let mut _20: &[&str; 2];         // in scope 1 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
        scope 2 {
            debug y => _18;              // in scope 2 at ui/traits/object-one-type-two-traits.rs:30:9: 30:10
        }
    }

    bb0: {
        _21 = const false;               // scope 0 at ui/traits/object-one-type-two-traits.rs:28:9: 28:10
        _3 = Box::<isize>::new(const 22_isize) -> bb1; // scope 0 at ui/traits/object-one-type-two-traits.rs:28:13: 28:30
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:28:13: 28:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn Wrap> (Pointer(Unsize)); // scope 0 at ui/traits/object-one-type-two-traits.rs:28:13: 28:30
        _21 = const true;                // scope 0 at ui/traits/object-one-type-two-traits.rs:28:13: 28:47
        _1 = move _2;                    // scope 0 at ui/traits/object-one-type-two-traits.rs:28:13: 28:47
        _20 = const _;                   // scope 1 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:29:14: 29:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _20;                        // scope 1 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
        _7 = _8;                         // scope 1 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
        _22 = (((_1.0: std::ptr::Unique<dyn Wrap>).0: std::ptr::NonNull<dyn Wrap>).0: *const dyn Wrap); // scope 1 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
        _17 = &(*_22);                   // scope 1 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
        _16 = <dyn Wrap as Wrap>::get(move _17) -> [return: bb2, unwind: bb10]; // scope 1 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:29:24: 29:27
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Wrap) -> isize {<dyn Wrap as Wrap>::get}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = &_16;                      // scope 1 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
        _14 = _15;                       // scope 1 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _14) -> [return: bb3, unwind: bb10]; // scope 1 at ui/traits/object-one-type-two-traits.rs:29:22: 29:29
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:29:22: 29:29
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb4, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = _print(move _5) -> [return: bb5, unwind: bb10]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = const false;               // scope 1 at ui/traits/object-one-type-two-traits.rs:30:13: 30:14
        _19 = move _1;                   // scope 1 at ui/traits/object-one-type-two-traits.rs:30:13: 30:14
        _18 = <dyn Wrap as Wrap>::wrap(move _19) -> [return: bb6, unwind: bb10]; // scope 1 at ui/traits/object-one-type-two-traits.rs:30:13: 30:21
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:30:15: 30:19
                                         // + literal: Const { ty: fn(Box<dyn Wrap>) -> Box<(dyn Any + 'static)> {<dyn Wrap as Wrap>::wrap}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_18) -> [return: bb7, unwind: bb10]; // scope 1 at ui/traits/object-one-type-two-traits.rs:31:1: 31:2
    }

    bb7: {
        _21 = const false;               // scope 0 at ui/traits/object-one-type-two-traits.rs:31:1: 31:2
        return;                          // scope 0 at ui/traits/object-one-type-two-traits.rs:31:2: 31:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/traits/object-one-type-two-traits.rs:27:1: 31:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/traits/object-one-type-two-traits.rs:31:1: 31:2
    }

    bb10 (cleanup): {
        switchInt(_21) -> [0: bb8, otherwise: bb9]; // scope 0 at ui/traits/object-one-type-two-traits.rs:31:1: 31:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
    let mut _1: [&str; 2];               // in scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20

    bb0: {
        _1 = [const "x=", const "\n"];   // scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:29:14: 29:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/traits/object-one-type-two-traits.rs:29:14: 29:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
        return;                          // scope 0 at ui/traits/object-one-type-two-traits.rs:29:14: 29:20
    }
}
