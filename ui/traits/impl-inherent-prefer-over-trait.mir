// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/impl-inherent-prefer-over-trait.rs:10:1: 10:9>::bar(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/impl-inherent-prefer-over-trait.rs:14:1: 14:15>::baz(_1: &Foo) -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/traits/impl-inherent-prefer-over-trait.rs:18:1: 18:19>::bar(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: !;

    bb0: {
        _2 = begin_panic::<&str>(const "wrong method called!") -> unwind continue;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let mut _5: &Foo;
    let mut _6: &Foo;
    let mut _7: &Foo;
    let mut _8: &Foo;

    bb0: {
        _8 = const _;
        _1 = Foo::bar(_8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = const _;
        _2 = Foo::bar(_7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = const _;
        _3 = Foo::bar(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = const _;
        _4 = <(dyn Trait + 'static)>::baz(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}
