// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/impl-inherent-prefer-over-trait.rs:10:1: 10:9>::bar(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:11:12: 11:17
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:11:19: 11:19

    bb0: {
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:11:21: 11:21
    }
}

fn <impl at ui/traits/impl-inherent-prefer-over-trait.rs:14:1: 14:15>::baz(_1: &Foo) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:15:21: 15:21

    bb0: {
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:15:23: 15:23
    }
}

fn <impl at ui/traits/impl-inherent-prefer-over-trait.rs:18:1: 18:19>::bar(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:19:12: 19:17
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:19:19: 19:19
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "wrong method called!"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:19:28: 19:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
    let mut _2: &Foo;                    // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
    let _3: ();                          // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:5: 24:19
    let mut _4: &Foo;                    // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
    let _5: &Foo;                        // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
    let _6: ();                          // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:5: 25:21
    let mut _7: &Foo;                    // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
    let _8: &Foo;                        // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
    let _9: ();                          // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:5: 29:27
    let mut _10: &Foo;                   // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
    let _11: &Foo;                       // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
    let mut _12: &Foo;                   // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
    let mut _13: &Foo;                   // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
    let mut _14: &Foo;                   // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
    let mut _15: &Foo;                   // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14

    bb0: {
        _15 = const _;                   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _15;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
        _1 = Foo::bar(move _2) -> bb1;   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:23:9: 23:12
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = const _;                   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _14;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
        _4 = _5;                         // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
        _3 = Foo::bar(move _4) -> bb2;   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:5: 24:19
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:24:5: 24:13
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = const _;                   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _13;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
        _7 = _8;                         // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
        _6 = Foo::bar(move _7) -> bb3;   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:5: 25:21
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:25:5: 25:15
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = const _;                   // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _12;                       // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
        _10 = _11;                       // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
        _9 = <(dyn Trait + 'static)>::baz(move _10) -> bb4; // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:5: 29:27
                                         // mir::Constant
                                         // + span: ui/traits/impl-inherent-prefer-over-trait.rs:29:5: 29:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {<(dyn Trait + 'static)>::baz}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:30:2: 30:2
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
    let mut _1: Foo;                     // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:23: 29:26

    bb0: {
        _1 = Foo;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:23: 29:26
        _0 = &_1;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:29:22: 29:26
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
    let mut _1: Foo;                     // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:17: 25:20

    bb0: {
        _1 = Foo;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:17: 25:20
        _0 = &_1;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:25:16: 25:20
    }
}

promoted[2] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
    let mut _1: Foo;                     // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:15: 24:18

    bb0: {
        _1 = Foo;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:15: 24:18
        _0 = &_1;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:24:14: 24:18
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
    let mut _1: Foo;                     // in scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:8

    bb0: {
        _1 = Foo;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:8
        _0 = &_1;                        // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
        return;                          // scope 0 at ui/traits/impl-inherent-prefer-over-trait.rs:23:5: 23:14
    }
}
