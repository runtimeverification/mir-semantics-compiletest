// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/generic.rs:9:1: 9:22>::to_string_(_1: &isize) -> String {
    debug self => _1;                    // in scope 0 at ui/traits/generic.rs:10:19: 10:24
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/generic.rs:10:29: 10:35
    let mut _2: &isize;                  // in scope 0 at ui/traits/generic.rs:10:38: 10:54

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/generic.rs:10:38: 10:54
        _0 = <isize as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/traits/generic.rs:10:38: 10:54
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:10:43: 10:52
                                         // + literal: Const { ty: for<'a> fn(&'a isize) -> String {<isize as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/generic.rs:10:56: 10:56
    }
}

fn <impl at ui/traits/generic.rs:12:1: 12:23>::to_string_(_1: &String) -> String {
    debug self => _1;                    // in scope 0 at ui/traits/generic.rs:13:19: 13:24
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/generic.rs:13:29: 13:35
    let mut _2: &std::string::String;    // in scope 0 at ui/traits/generic.rs:13:38: 13:50

    bb0: {
        _2 = _1;                         // scope 0 at ui/traits/generic.rs:13:38: 13:50
        _0 = <String as Clone>::clone(move _2) -> bb1; // scope 0 at ui/traits/generic.rs:13:38: 13:50
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:13:43: 13:48
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/generic.rs:13:52: 13:52
    }
}

fn <impl at ui/traits/generic.rs:15:1: 15:19>::to_string_(_1: &()) -> String {
    debug self => _1;                    // in scope 0 at ui/traits/generic.rs:16:19: 16:24
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/generic.rs:16:29: 16:35
    let mut _2: &str;                    // in scope 0 at ui/traits/generic.rs:16:38: 16:54
    let _3: &str;                        // in scope 0 at ui/traits/generic.rs:16:38: 16:42

    bb0: {
        _3 = const "()";                 // scope 0 at ui/traits/generic.rs:16:38: 16:42
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:16:38: 16:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/traits/generic.rs:16:38: 16:54
        _0 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/traits/generic.rs:16:38: 16:54
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:16:43: 16:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/generic.rs:16:56: 16:56
    }
}

fn <impl at ui/traits/generic.rs:22:1: 22:26>::map(_1: &Vec<T>, _2: F) -> Vec<U> {
    debug self => _1;                    // in scope 0 at ui/traits/generic.rs:23:18: 23:23
    debug f => _2;                       // in scope 0 at ui/traits/generic.rs:23:25: 23:30
    let mut _0: std::vec::Vec<U>;        // return place in scope 0 at ui/traits/generic.rs:24:13: 24:18
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/traits/generic.rs:25:18: 25:22
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/traits/generic.rs:25:18: 25:22
    let mut _6: std::option::Option<&T>; // in scope 0 at ui/traits/generic.rs:25:18: 25:22
    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/traits/generic.rs:25:18: 25:22
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/traits/generic.rs:25:18: 25:22
    let mut _9: isize;                   // in scope 0 at ui/traits/generic.rs:25:9: 27:10
    let _11: ();                         // in scope 0 at ui/traits/generic.rs:26:13: 26:25
    let mut _12: &mut std::vec::Vec<U>;  // in scope 0 at ui/traits/generic.rs:26:13: 26:25
    let mut _13: U;                      // in scope 0 at ui/traits/generic.rs:26:20: 26:24
    let mut _14: &mut F;                 // in scope 0 at ui/traits/generic.rs:26:20: 26:21
    let mut _15: (&T,);                  // in scope 0 at ui/traits/generic.rs:26:20: 26:24
    let mut _16: &T;                     // in scope 0 at ui/traits/generic.rs:26:22: 26:23
    scope 1 {
        debug r => _0;                   // in scope 1 at ui/traits/generic.rs:24:13: 24:18
        let mut _5: std::slice::Iter<'_, T>; // in scope 1 at ui/traits/generic.rs:25:18: 25:22
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/traits/generic.rs:25:18: 25:22
            let _10: &T;                 // in scope 2 at ui/traits/generic.rs:25:13: 25:14
            scope 3 {
                debug i => _10;          // in scope 3 at ui/traits/generic.rs:25:13: 25:14
            }
        }
    }

    bb0: {
        _0 = Vec::<U>::new() -> [return: bb1, unwind: bb11]; // scope 0 at ui/traits/generic.rs:24:21: 24:31
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:24:21: 24:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<U> {Vec::<U>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/traits/generic.rs:25:18: 25:22
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb10]; // scope 1 at ui/traits/generic.rs:25:18: 25:22
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:25:18: 25:22
                                         // + literal: Const { ty: fn(&Vec<T>) -> <&Vec<T> as IntoIterator>::IntoIter {<&Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 1 at ui/traits/generic.rs:25:18: 25:22
        goto -> bb3;                     // scope 2 at ui/traits/generic.rs:25:9: 27:10
    }

    bb3: {
        _8 = &mut _5;                    // scope 2 at ui/traits/generic.rs:25:18: 25:22
        _7 = &mut (*_8);                 // scope 2 at ui/traits/generic.rs:25:18: 25:22
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(move _7) -> [return: bb4, unwind: bb10]; // scope 2 at ui/traits/generic.rs:25:18: 25:22
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:25:18: 25:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 2 at ui/traits/generic.rs:25:18: 25:22
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/traits/generic.rs:25:18: 25:22
    }

    bb5: {
        _10 = ((_6 as Some).0: &T);      // scope 2 at ui/traits/generic.rs:25:13: 25:14
        _12 = &mut _0;                   // scope 3 at ui/traits/generic.rs:26:13: 26:25
        _14 = &mut _2;                   // scope 3 at ui/traits/generic.rs:26:20: 26:21
        _16 = _10;                       // scope 3 at ui/traits/generic.rs:26:22: 26:23
        _15 = (move _16,);               // scope 3 at ui/traits/generic.rs:26:20: 26:24
        _13 = <F as FnMut<(&T,)>>::call_mut(move _14, move _15) -> [return: bb8, unwind: bb10]; // scope 3 at ui/traits/generic.rs:26:20: 26:24
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:26:20: 26:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/traits/generic.rs:25:18: 25:22
    }

    bb7: {
        drop(_2) -> bb9;                 // scope 0 at ui/traits/generic.rs:29:5: 29:6
    }

    bb8: {
        _11 = Vec::<U>::push(move _12, move _13) -> [return: bb13, unwind: bb10]; // scope 3 at ui/traits/generic.rs:26:13: 26:25
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:26:15: 26:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<U>, U) {Vec::<U>::push}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/traits/generic.rs:29:6: 29:6
    }

    bb10 (cleanup): {
        drop(_0) -> bb11;                // scope 0 at ui/traits/generic.rs:29:5: 29:6
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/traits/generic.rs:29:5: 29:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/traits/generic.rs:23:5: 29:6
    }

    bb13: {
        goto -> bb3;                     // scope 3 at ui/traits/generic.rs:26:13: 26:25
    }
}

fn foo(_1: T) -> Vec<String> {
    debug x => _1;                       // in scope 0 at ui/traits/generic.rs:32:22: 32:23
    let mut _0: std::vec::Vec<std::string::String>; // return place in scope 0 at ui/traits/generic.rs:32:31: 32:42
    let mut _2: &T;                      // in scope 0 at ui/traits/generic.rs:33:5: 33:34
    let mut _3: [closure@ui/traits/generic.rs:33:11: 33:15]; // in scope 0 at ui/traits/generic.rs:33:11: 33:32

    bb0: {
        _2 = &_1;                        // scope 0 at ui/traits/generic.rs:33:5: 33:34
        _0 = <T as map<U>>::map::<String, [closure@ui/traits/generic.rs:33:11: 33:15]>(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/traits/generic.rs:33:5: 33:34
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:33:7: 33:10
                                         // + literal: Const { ty: for<'a> fn(&'a T, [closure@ui/traits/generic.rs:33:11: 33:15]) -> Vec<String> {<T as map<U>>::map::<String, [closure@ui/traits/generic.rs:33:11: 33:15]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/traits/generic.rs:34:1: 34:2
    }

    bb2: {
        return;                          // scope 0 at ui/traits/generic.rs:34:2: 34:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/generic.rs:34:1: 34:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/generic.rs:32:1: 34:2
    }
}

fn foo::{closure#0}(_1: &mut [closure@ui/traits/generic.rs:33:11: 33:15], _2: &U) -> String {
    debug _e => _2;                      // in scope 0 at ui/traits/generic.rs:33:12: 33:14
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/generic.rs:33:16: 33:16
    let mut _3: &str;                    // in scope 0 at ui/traits/generic.rs:33:16: 33:32
    let _4: &str;                        // in scope 0 at ui/traits/generic.rs:33:16: 33:20

    bb0: {
        _4 = const "hi";                 // scope 0 at ui/traits/generic.rs:33:16: 33:20
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:33:16: 33:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/traits/generic.rs:33:16: 33:32
        _0 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/traits/generic.rs:33:16: 33:32
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:33:21: 33:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/generic.rs:33:32: 33:32
    }
}

fn bar(_1: T) -> Vec<String> {
    debug x => _1;                       // in scope 0 at ui/traits/generic.rs:35:27: 35:28
    let mut _0: std::vec::Vec<std::string::String>; // return place in scope 0 at ui/traits/generic.rs:35:36: 35:47
    let mut _2: &T;                      // in scope 0 at ui/traits/generic.rs:36:5: 36:33
    let mut _3: [closure@ui/traits/generic.rs:36:11: 36:15]; // in scope 0 at ui/traits/generic.rs:36:11: 36:31

    bb0: {
        _2 = &_1;                        // scope 0 at ui/traits/generic.rs:36:5: 36:33
        _0 = <T as map<U>>::map::<String, [closure@ui/traits/generic.rs:36:11: 36:15]>(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/traits/generic.rs:36:5: 36:33
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:36:7: 36:10
                                         // + literal: Const { ty: for<'a> fn(&'a T, [closure@ui/traits/generic.rs:36:11: 36:15]) -> Vec<String> {<T as map<U>>::map::<String, [closure@ui/traits/generic.rs:36:11: 36:15]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/traits/generic.rs:37:1: 37:2
    }

    bb2: {
        return;                          // scope 0 at ui/traits/generic.rs:37:2: 37:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/generic.rs:37:1: 37:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/generic.rs:35:1: 37:2
    }
}

fn bar::{closure#0}(_1: &mut [closure@ui/traits/generic.rs:36:11: 36:15], _2: &U) -> String {
    debug _e => _2;                      // in scope 0 at ui/traits/generic.rs:36:12: 36:14
    let mut _0: std::string::String;     // return place in scope 0 at ui/traits/generic.rs:36:16: 36:16
    let mut _3: &U;                      // in scope 0 at ui/traits/generic.rs:36:16: 36:31

    bb0: {
        _3 = _2;                         // scope 0 at ui/traits/generic.rs:36:16: 36:31
        _0 = <U as to_str>::to_string_(move _3) -> bb1; // scope 0 at ui/traits/generic.rs:36:16: 36:31
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:36:19: 36:29
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> String {<U as to_str>::to_string_}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/generic.rs:36:31: 36:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/generic.rs:39:15: 39:15
    let mut _1: (&std::vec::Vec<std::string::String>, &[std::string::String; 1]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/generic.rs:40:16: 40:28
    let mut _4: std::vec::Vec<i32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _5: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: [std::string::String; 1];   // in scope 0 at ui/traits/generic.rs:40:30: 40:48
    let mut _13: std::string::String;    // in scope 0 at ui/traits/generic.rs:40:31: 40:47
    let mut _14: &str;                   // in scope 0 at ui/traits/generic.rs:40:31: 40:47
    let _15: &str;                       // in scope 0 at ui/traits/generic.rs:40:31: 40:35
    let _16: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _17: &[std::string::String; 1];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &[std::string::String; 1];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&std::vec::Vec<std::string::String>, &[std::string::String; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _32: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/generic.rs:41:16: 41:53
    let mut _33: std::vec::Vec<isize>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _34: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _35: std::boxed::Box<[isize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _36: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _37: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _38: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _39: std::boxed::Box<[isize; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _40: &[std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _41: [std::string::String; 2];   // in scope 0 at ui/traits/generic.rs:41:55: 41:89
    let mut _42: std::string::String;    // in scope 0 at ui/traits/generic.rs:41:56: 41:71
    let mut _43: &str;                   // in scope 0 at ui/traits/generic.rs:41:56: 41:71
    let _44: &str;                       // in scope 0 at ui/traits/generic.rs:41:56: 41:59
    let mut _45: std::string::String;    // in scope 0 at ui/traits/generic.rs:41:73: 41:88
    let mut _46: &str;                   // in scope 0 at ui/traits/generic.rs:41:73: 41:88
    let _47: &str;                       // in scope 0 at ui/traits/generic.rs:41:73: 41:76
    let _48: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _49: &[std::string::String; 2];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &[std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &[std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &[std::string::String; 2];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: (&std::vec::Vec<std::string::String>, &[std::string::String; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _64: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/generic.rs:42:16: 42:83
    let mut _65: std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _66: std::boxed::Box<[std::string::String]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _67: std::boxed::Box<[std::string::String; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _68: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _69: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _70: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _71: std::boxed::Box<[std::string::String; 2]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _72: std::string::String;    // in scope 0 at ui/traits/generic.rs:42:49: 42:64
    let mut _73: &str;                   // in scope 0 at ui/traits/generic.rs:42:49: 42:64
    let _74: &str;                       // in scope 0 at ui/traits/generic.rs:42:49: 42:52
    let mut _75: std::string::String;    // in scope 0 at ui/traits/generic.rs:42:66: 42:81
    let mut _76: &str;                   // in scope 0 at ui/traits/generic.rs:42:66: 42:81
    let _77: &str;                       // in scope 0 at ui/traits/generic.rs:42:66: 42:69
    let mut _78: &[std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _79: [std::string::String; 2];   // in scope 0 at ui/traits/generic.rs:43:16: 43:50
    let mut _80: std::string::String;    // in scope 0 at ui/traits/generic.rs:43:17: 43:32
    let mut _81: &str;                   // in scope 0 at ui/traits/generic.rs:43:17: 43:32
    let _82: &str;                       // in scope 0 at ui/traits/generic.rs:43:17: 43:20
    let mut _83: std::string::String;    // in scope 0 at ui/traits/generic.rs:43:34: 43:49
    let mut _84: &str;                   // in scope 0 at ui/traits/generic.rs:43:34: 43:49
    let _85: &str;                       // in scope 0 at ui/traits/generic.rs:43:34: 43:37
    let _86: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _87: &[std::string::String; 2];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: &[std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &[std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &[std::string::String; 2];  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: (&std::vec::Vec<std::string::String>, &[std::string::String; 1]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _101: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _102: std::vec::Vec<std::string::String>; // in scope 0 at ui/traits/generic.rs:44:16: 44:44
    let mut _103: std::vec::Vec<()>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _104: std::boxed::Box<[()]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _105: std::boxed::Box<[(); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _106: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _107: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _108: *mut u8;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _109: std::boxed::Box<[(); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _110: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _111: [std::string::String; 1];  // in scope 0 at ui/traits/generic.rs:44:46: 44:64
    let mut _112: std::string::String;   // in scope 0 at ui/traits/generic.rs:44:47: 44:63
    let mut _113: &str;                  // in scope 0 at ui/traits/generic.rs:44:47: 44:63
    let _114: &str;                      // in scope 0 at ui/traits/generic.rs:44:47: 44:51
    let _115: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _116: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _117: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _118: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _119: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _120: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _122: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _123: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _124: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _125: &std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _126: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _127: &[std::string::String; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _128: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _129: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _130: *const [i32; 1];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _131: *const [isize; 2];     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _132: *const [std::string::String; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
        debug left_val => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _17;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _22: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _22;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 4 {
    }
    scope 5 {
        debug left_val => _48;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _49;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _54;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
    }
    scope 8 {
        debug left_val => _86;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _87;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _92: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 9 {
            debug kind => _92;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 10 {
    }
    scope 11 {
        debug left_val => _115;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _116;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _121: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _121;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = const 4_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const 4_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = ShallowInitBox(move _9, [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _130 = (((_10.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_130) = [const 1_i32];         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _6 = move _10;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _5) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = foo::<i32, Vec<i32>>(move _4) -> bb3; // scope 0 at ui/traits/generic.rs:40:16: 40:28
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:40:16: 40:19
                                         // + literal: Const { ty: fn(Vec<i32>) -> Vec<String> {foo::<i32, Vec<i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = const "hi";                // scope 0 at ui/traits/generic.rs:40:31: 40:35
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:40:31: 40:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/traits/generic.rs:40:31: 40:47
        _13 = <str as ToString>::to_string(move _14) -> [return: bb4, unwind: bb51]; // scope 0 at ui/traits/generic.rs:40:31: 40:47
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:40:36: 40:45
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = [move _13];                // scope 0 at ui/traits/generic.rs:40:30: 40:48
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _11);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_1.0: &std::vec::Vec<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_1.1: &[std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <Vec<String> as PartialEq<[String; 1]>>::eq(move _20, move _21) -> [return: bb5, unwind: bb50]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<String>, &'b [String; 1]) -> bool {<Vec<String> as PartialEq<[String; 1]>>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<Vec<String>, [String; 1]>(move _24, move _25, move _27, move _29) -> bb50; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<String>, &'b [String; 1], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<String>, [String; 1]>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_12) -> [return: bb8, unwind: bb51]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        drop(_3) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        _36 = const 16_usize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _37 = const 8_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _38 = alloc::alloc::exchange_malloc(move _36, move _37) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb10: {
        _39 = ShallowInitBox(move _38, [isize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _131 = (((_39.0: std::ptr::Unique<[isize; 2]>).0: std::ptr::NonNull<[isize; 2]>).0: *const [isize; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_131) = [const 4_isize, const 5_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _35 = move _39;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _34 = move _35 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _33 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _34) -> bb11; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = bar::<isize, Vec<isize>>(move _33) -> bb12; // scope 0 at ui/traits/generic.rs:41:16: 41:53
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:41:16: 41:41
                                         // + literal: Const { ty: fn(Vec<isize>) -> Vec<String> {bar::<isize, Vec<isize>>}, val: Value(<ZST>) }
    }

    bb12: {
        _31 = &_32;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = const "4";                 // scope 0 at ui/traits/generic.rs:41:56: 41:59
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:41:56: 41:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _43 = _44;                       // scope 0 at ui/traits/generic.rs:41:56: 41:71
        _42 = <str as ToString>::to_string(move _43) -> [return: bb13, unwind: bb49]; // scope 0 at ui/traits/generic.rs:41:56: 41:71
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:41:60: 41:69
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb13: {
        _47 = const "5";                 // scope 0 at ui/traits/generic.rs:41:73: 41:76
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:41:73: 41:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _46 = _47;                       // scope 0 at ui/traits/generic.rs:41:73: 41:88
        _45 = <str as ToString>::to_string(move _46) -> [return: bb14, unwind: bb48]; // scope 0 at ui/traits/generic.rs:41:73: 41:88
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:41:77: 41:86
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb14: {
        _41 = [move _42, move _45];      // scope 0 at ui/traits/generic.rs:41:55: 41:89
        _40 = &_41;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _40);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_30.0: &std::vec::Vec<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_30.1: &[std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <Vec<String> as PartialEq<[String; 2]>>::eq(move _52, move _53) -> [return: bb15, unwind: bb47]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<String>, &'b [String; 2]) -> bool {<Vec<String> as PartialEq<[String; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb17, otherwise: bb16]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<Vec<String>, [String; 2]>(move _56, move _57, move _59, move _61) -> bb47; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<String>, &'b [String; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<String>, [String; 2]>}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_41) -> [return: bb18, unwind: bb49]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        drop(_32) -> bb19;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19: {
        _68 = const 48_usize;            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _69 = const 8_usize;             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _70 = alloc::alloc::exchange_malloc(move _68, move _69) -> bb20; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb20: {
        _71 = ShallowInitBox(move _70, [std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _74 = const "x";                 // scope 0 at ui/traits/generic.rs:42:49: 42:52
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:42:49: 42:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _73 = _74;                       // scope 0 at ui/traits/generic.rs:42:49: 42:64
        _72 = <str as ToString>::to_string(move _73) -> [return: bb21, unwind: bb53]; // scope 0 at ui/traits/generic.rs:42:49: 42:64
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:42:53: 42:62
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb21: {
        _77 = const "y";                 // scope 0 at ui/traits/generic.rs:42:66: 42:69
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:42:66: 42:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _76 = _77;                       // scope 0 at ui/traits/generic.rs:42:66: 42:81
        _75 = <str as ToString>::to_string(move _76) -> [return: bb22, unwind: bb46]; // scope 0 at ui/traits/generic.rs:42:66: 42:81
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:42:70: 42:79
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb22: {
        _132 = (((_71.0: std::ptr::Unique<[std::string::String; 2]>).0: std::ptr::NonNull<[std::string::String; 2]>).0: *const [std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_132) = [move _72, move _75];  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _67 = move _71;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _66 = move _67 as std::boxed::Box<[std::string::String]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _65 = slice::<impl [String]>::into_vec::<std::alloc::Global>(move _66) -> bb23; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<[String]>) -> Vec<String> {slice::<impl [String]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb23: {
        _64 = bar::<String, Vec<String>>(move _65) -> bb24; // scope 0 at ui/traits/generic.rs:42:16: 42:83
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:42:16: 42:43
                                         // + literal: Const { ty: fn(Vec<String>) -> Vec<String> {bar::<String, Vec<String>>}, val: Value(<ZST>) }
    }

    bb24: {
        _63 = &_64;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _82 = const "x";                 // scope 0 at ui/traits/generic.rs:43:17: 43:20
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:43:17: 43:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _81 = _82;                       // scope 0 at ui/traits/generic.rs:43:17: 43:32
        _80 = <str as ToString>::to_string(move _81) -> [return: bb25, unwind: bb45]; // scope 0 at ui/traits/generic.rs:43:17: 43:32
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:43:21: 43:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb25: {
        _85 = const "y";                 // scope 0 at ui/traits/generic.rs:43:34: 43:37
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:43:34: 43:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _84 = _85;                       // scope 0 at ui/traits/generic.rs:43:34: 43:49
        _83 = <str as ToString>::to_string(move _84) -> [return: bb26, unwind: bb44]; // scope 0 at ui/traits/generic.rs:43:34: 43:49
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:43:38: 43:47
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb26: {
        _79 = [move _80, move _83];      // scope 0 at ui/traits/generic.rs:43:16: 43:50
        _78 = &_79;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _78);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_62.0: &std::vec::Vec<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_62.1: &[std::string::String; 2]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = _86;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = _87;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = <Vec<String> as PartialEq<[String; 2]>>::eq(move _90, move _91) -> [return: bb27, unwind: bb43]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<String>, &'b [String; 2]) -> bool {<Vec<String> as PartialEq<[String; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb27: {
        _88 = Not(move _89);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb29, otherwise: bb28]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _92 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<Vec<String>, [String; 2]>(move _94, move _95, move _97, move _99) -> bb43; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<String>, &'b [String; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<String>, [String; 2]>}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_79) -> [return: bb30, unwind: bb45]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30: {
        drop(_64) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31: {
        _106 = const 0_usize;            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _107 = const 1_usize;            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _108 = alloc::alloc::exchange_malloc(move _106, move _107) -> bb32; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb32: {
        _109 = ShallowInitBox(move _108, [(); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _105 = move _109;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _104 = move _105 as std::boxed::Box<[()]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _103 = slice::<impl [()]>::into_vec::<std::alloc::Global>(move _104) -> bb33; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[()]>) -> Vec<()> {slice::<impl [()]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb33: {
        _102 = bar::<(), Vec<()>>(move _103) -> bb34; // scope 0 at ui/traits/generic.rs:44:16: 44:44
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:44:16: 44:34
                                         // + literal: Const { ty: fn(Vec<()>) -> Vec<String> {bar::<(), Vec<()>>}, val: Value(<ZST>) }
    }

    bb34: {
        _101 = &_102;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _114 = const "()";               // scope 0 at ui/traits/generic.rs:44:47: 44:51
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:44:47: 44:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _113 = _114;                     // scope 0 at ui/traits/generic.rs:44:47: 44:63
        _112 = <str as ToString>::to_string(move _113) -> [return: bb35, unwind: bb42]; // scope 0 at ui/traits/generic.rs:44:47: 44:63
                                         // mir::Constant
                                         // + span: ui/traits/generic.rs:44:52: 44:61
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb35: {
        _111 = [move _112];              // scope 0 at ui/traits/generic.rs:44:46: 44:64
        _110 = &_111;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _100 = (move _101, move _110);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _115 = (_100.0: &std::vec::Vec<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _116 = (_100.1: &[std::string::String; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _119 = _115;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _120 = _116;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _118 = <Vec<String> as PartialEq<[String; 1]>>::eq(move _119, move _120) -> [return: bb36, unwind: bb41]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<String>, &'b [String; 1]) -> bool {<Vec<String> as PartialEq<[String; 1]>>::eq}, val: Value(<ZST>) }
    }

    bb36: {
        _117 = Not(move _118);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _117) -> [0: bb38, otherwise: bb37]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _121 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _123 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _125 = _115;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _124 = _125;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _127 = _116;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _126 = _127;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _128 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _122 = core::panicking::assert_failed::<Vec<String>, [String; 1]>(move _123, move _124, move _126, move _128) -> bb41; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<String>, &'b [String; 1], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<String>, [String; 1]>}, val: Value(<ZST>) }
    }

    bb38: {
        drop(_111) -> [return: bb39, unwind: bb42]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb39: {
        drop(_102) -> bb40;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb40: {
        return;                          // scope 0 at ui/traits/generic.rs:45:2: 45:2
    }

    bb41 (cleanup): {
        drop(_111) -> bb42;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb42 (cleanup): {
        drop(_102) -> bb52;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb43 (cleanup): {
        drop(_79) -> bb45;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb44 (cleanup): {
        drop(_80) -> bb45;               // scope 0 at ui/traits/generic.rs:43:49: 43:50
    }

    bb45 (cleanup): {
        drop(_64) -> bb52;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb46 (cleanup): {
        drop(_72) -> bb53;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb47 (cleanup): {
        drop(_41) -> bb49;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb48 (cleanup): {
        drop(_42) -> bb49;               // scope 0 at ui/traits/generic.rs:41:88: 41:89
    }

    bb49 (cleanup): {
        drop(_32) -> bb52;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb50 (cleanup): {
        drop(_12) -> bb51;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb51 (cleanup): {
        drop(_3) -> bb52;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb52 (cleanup): {
        resume;                          // scope 0 at ui/traits/generic.rs:39:1: 45:2
    }

    bb53 (cleanup): {
        _129 = alloc::alloc::box_free::<[String; 2], std::alloc::Global>(move (_71.0: std::ptr::Unique<[std::string::String; 2]>), move (_71.1: std::alloc::Global)) -> bb52; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[String; 2]>, std::alloc::Global) {alloc::alloc::box_free::<[String; 2], std::alloc::Global>}, val: Value(<ZST>) }
    }
}
