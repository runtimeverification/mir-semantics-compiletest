// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/coercion.rs:12:16: 12:21>::clone(_1: &Struct) -> Struct {
    debug self => _1;                    // in scope 0 at ui/traits/coercion.rs:12:16: 12:21
    let mut _0: Struct;                  // return place in scope 0 at ui/traits/coercion.rs:12:16: 12:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/traits/coercion.rs:12:16: 12:21
        return;                          // scope 0 at ui/traits/coercion.rs:12:21: 12:21
    }
}

fn <impl at ui/traits/coercion.rs:18:1: 18:22>::f(_1: &Struct) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/coercion.rs:19:10: 19:15
    let mut _0: ();                      // return place in scope 0 at ui/traits/coercion.rs:19:17: 19:17
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/traits/coercion.rs:20:18: 20:23
    let mut _5: &[&str; 1];              // in scope 0 at ui/traits/coercion.rs:20:18: 20:23
    let _6: &[&str; 1];                  // in scope 0 at ui/traits/coercion.rs:20:18: 20:23
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/traits/coercion.rs:20:18: 20:23

    bb0: {
        _11 = const _;                   // scope 0 at ui/traits/coercion.rs:20:18: 20:23
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:20:18: 20:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Struct as Trait>::f, [], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/traits/coercion.rs:20:18: 20:23
        _5 = _6;                         // scope 0 at ui/traits/coercion.rs:20:18: 20:23
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/traits/coercion.rs:20:18: 20:23
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Struct as Trait>::f, [], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/coercion.rs:21:6: 21:6
    }
}

promoted[0] in <impl at ui/traits/coercion.rs:18:1: 18:22>::f: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/traits/coercion.rs:18:1: 18:22>::f: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/traits/coercion.rs:20:18: 20:23
    let mut _1: [&str; 1];               // in scope 0 at ui/traits/coercion.rs:20:18: 20:23

    bb0: {
        _1 = [const "Hi!\n"];            // scope 0 at ui/traits/coercion.rs:20:18: 20:23
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:20:18: 20:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/traits/coercion.rs:20:18: 20:23
        return;                          // scope 0 at ui/traits/coercion.rs:20:18: 20:23
    }
}

fn foo(_1: Box<dyn std::io::Write>) -> () {
    debug a => _1;                       // in scope 0 at ui/traits/coercion.rs:24:8: 24:13
    let mut _0: ();                      // return place in scope 0 at ui/traits/coercion.rs:24:31: 24:31

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/traits/coercion.rs:24:32: 24:33
    }

    bb1: {
        return;                          // scope 0 at ui/traits/coercion.rs:24:33: 24:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/coercion.rs:26:15: 26:15
    let _1: Struct;                      // in scope 0 at ui/traits/coercion.rs:27:9: 27:10
    let mut _3: std::boxed::Box<Struct>; // in scope 0 at ui/traits/coercion.rs:28:29: 28:40
    let mut _4: Struct;                  // in scope 0 at ui/traits/coercion.rs:28:38: 28:39
    let _5: ();                          // in scope 0 at ui/traits/coercion.rs:29:5: 29:10
    let mut _6: &dyn Trait;              // in scope 0 at ui/traits/coercion.rs:29:5: 29:10
    let mut _8: &Struct;                 // in scope 0 at ui/traits/coercion.rs:30:25: 30:27
    let _9: &Struct;                     // in scope 0 at ui/traits/coercion.rs:30:25: 30:27
    let _10: ();                         // in scope 0 at ui/traits/coercion.rs:31:5: 31:10
    let mut _11: &dyn Trait;             // in scope 0 at ui/traits/coercion.rs:31:5: 31:10
    let _13: ();                         // in scope 0 at ui/traits/coercion.rs:34:5: 34:23
    let mut _14: std::boxed::Box<dyn std::io::Write>; // in scope 0 at ui/traits/coercion.rs:34:9: 34:22
    let mut _15: std::boxed::Box<std::io::Stdout>; // in scope 0 at ui/traits/coercion.rs:34:9: 34:22
    let mut _16: std::io::Stdout;        // in scope 0 at ui/traits/coercion.rs:34:18: 34:21
    let mut _17: *const dyn Trait;       // in scope 0 at ui/traits/coercion.rs:28:9: 28:10
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/traits/coercion.rs:27:9: 27:10
        let _2: std::boxed::Box<dyn Trait>; // in scope 1 at ui/traits/coercion.rs:28:9: 28:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/traits/coercion.rs:28:9: 28:10
            let _7: &dyn Trait;          // in scope 2 at ui/traits/coercion.rs:30:9: 30:10
            scope 3 {
                debug c => _7;           // in scope 3 at ui/traits/coercion.rs:30:9: 30:10
                let _12: std::io::Stdout; // in scope 3 at ui/traits/coercion.rs:33:9: 33:12
                scope 4 {
                    debug out => _12;    // in scope 4 at ui/traits/coercion.rs:33:9: 33:12
                }
            }
        }
    }

    bb0: {
        _1 = Struct { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/traits/coercion.rs:27:13: 27:34
        _4 = _1;                         // scope 1 at ui/traits/coercion.rs:28:38: 28:39
        _3 = Box::<Struct>::new(move _4) -> bb1; // scope 1 at ui/traits/coercion.rs:28:29: 28:40
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:28:29: 28:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Struct) -> Box<Struct> {Box::<Struct>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn Trait> (Pointer(Unsize)); // scope 1 at ui/traits/coercion.rs:28:29: 28:40
        _17 = (((_2.0: std::ptr::Unique<dyn Trait>).0: std::ptr::NonNull<dyn Trait>).0: *const dyn Trait); // scope 2 at ui/traits/coercion.rs:29:5: 29:10
        _6 = &(*_17);                    // scope 2 at ui/traits/coercion.rs:29:5: 29:10
        _5 = <dyn Trait as Trait>::f(move _6) -> [return: bb2, unwind: bb8]; // scope 2 at ui/traits/coercion.rs:29:5: 29:10
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:29:7: 29:8
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Trait) {<dyn Trait as Trait>::f}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &_1;                        // scope 2 at ui/traits/coercion.rs:30:25: 30:27
        _8 = _9;                         // scope 2 at ui/traits/coercion.rs:30:25: 30:27
        _7 = move _8 as &dyn Trait (Pointer(Unsize)); // scope 2 at ui/traits/coercion.rs:30:25: 30:27
        _11 = _7;                        // scope 3 at ui/traits/coercion.rs:31:5: 31:10
        _10 = <dyn Trait as Trait>::f(move _11) -> [return: bb3, unwind: bb8]; // scope 3 at ui/traits/coercion.rs:31:5: 31:10
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:31:7: 31:8
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Trait) {<dyn Trait as Trait>::f}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = stdout() -> [return: bb4, unwind: bb8]; // scope 3 at ui/traits/coercion.rs:33:15: 33:27
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:33:15: 33:25
                                         // + literal: Const { ty: fn() -> Stdout {stdout}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = move _12;                  // scope 4 at ui/traits/coercion.rs:34:18: 34:21
        _15 = Box::<Stdout>::new(move _16) -> [return: bb5, unwind: bb8]; // scope 4 at ui/traits/coercion.rs:34:9: 34:22
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:34:9: 34:17
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Stdout) -> Box<Stdout> {Box::<Stdout>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = move _15 as std::boxed::Box<dyn std::io::Write> (Pointer(Unsize)); // scope 4 at ui/traits/coercion.rs:34:9: 34:22
        _13 = foo(move _14) -> [return: bb6, unwind: bb8]; // scope 4 at ui/traits/coercion.rs:34:5: 34:23
                                         // mir::Constant
                                         // + span: ui/traits/coercion.rs:34:5: 34:8
                                         // + literal: Const { ty: fn(Box<(dyn std::io::Write + 'static)>) {foo}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 1 at ui/traits/coercion.rs:35:1: 35:2
    }

    bb7: {
        return;                          // scope 0 at ui/traits/coercion.rs:35:2: 35:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 1 at ui/traits/coercion.rs:35:1: 35:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/traits/coercion.rs:26:1: 35:2
    }
}
