// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-4107.rs:4:15: 4:15
    let _1: &Mat2<f64>;                  // in scope 0 at ui/traits/issue-4107.rs:5:9: 5:12
    let _2: &Mat2<f64>;                  // in scope 0 at ui/traits/issue-4107.rs:5:27: 5:49
    let _3: Mat2<f64>;                   // in scope 0 at ui/traits/issue-4107.rs:5:28: 5:49
    scope 1 {
        debug _id => _1;                 // in scope 1 at ui/traits/issue-4107.rs:5:9: 5:12
    }

    bb0: {
        _3 = <Mat2<f64> as Matrix<f64, Vec2<f64>>>::identity(const 1f64) -> bb1; // scope 0 at ui/traits/issue-4107.rs:5:28: 5:49
                                         // mir::Constant
                                         // + span: ui/traits/issue-4107.rs:5:28: 5:44
                                         // + literal: Const { ty: fn(f64) -> Mat2<f64> {<Mat2<f64> as Matrix<f64, Vec2<f64>>>::identity}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at ui/traits/issue-4107.rs:5:27: 5:49
        _1 = _2;                         // scope 0 at ui/traits/issue-4107.rs:5:27: 5:49
        return;                          // scope 0 at ui/traits/issue-4107.rs:6:2: 6:2
    }
}

fn Index::get(_1: &Self, _2: Index) -> Result {
    debug self => _1;                    // in scope 0 at ui/traits/issue-4107.rs:8:40: 8:45
    let mut _0: Result;                  // return place in scope 0 at ui/traits/issue-4107.rs:8:60: 8:66
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/traits/issue-4107.rs:8:78: 8:79
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/traits/issue-4107.rs:8:33: 8:79
    }
}

fn <impl at ui/traits/issue-4107.rs:24:1: 24:39>::identity(_1: T) -> Mat2<T> {
    debug t => _1;                       // in scope 0 at ui/traits/issue-4107.rs:25:17: 25:18
    let mut _0: Mat2<T>;                 // return place in scope 0 at ui/traits/issue-4107.rs:25:25: 25:32
    let mut _2: T;                       // in scope 0 at ui/traits/issue-4107.rs:25:44: 25:45

    bb0: {
        _2 = move _1;                    // scope 0 at ui/traits/issue-4107.rs:25:44: 25:45
        _0 = Mat2::<T> { x: move _2 };   // scope 0 at ui/traits/issue-4107.rs:25:35: 25:47
        return;                          // scope 0 at ui/traits/issue-4107.rs:25:49: 25:49
    }
}
