// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn T::f(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/traits/privacy.rs:7:18: 7:23
    let mut _0: ();                      // return place in scope 0 at ui/traits/privacy.rs:7:25: 7:25

    bb0: {
        return;                          // scope 0 at ui/traits/privacy.rs:7:27: 7:27
    }
}

fn g() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/privacy.rs:13:8: 13:8
    let _1: ();                          // in scope 0 at ui/traits/privacy.rs:15:5: 15:11
    let mut _2: &();                     // in scope 0 at ui/traits/privacy.rs:15:5: 15:11
    let mut _3: &();                     // in scope 0 at ui/traits/privacy.rs:15:5: 15:11

    bb0: {
        _3 = const _;                    // scope 0 at ui/traits/privacy.rs:15:5: 15:11
                                         // mir::Constant
                                         // + span: ui/traits/privacy.rs:15:5: 15:11
                                         // + literal: Const { ty: &(), val: Unevaluated(g, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/traits/privacy.rs:15:5: 15:11
        _1 = <() as T>::f(move _2) -> bb1; // scope 0 at ui/traits/privacy.rs:15:5: 15:11
                                         // mir::Constant
                                         // + span: ui/traits/privacy.rs:15:8: 15:9
                                         // + literal: Const { ty: for<'a> fn(&'a ()) {<() as T>::f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/traits/privacy.rs:16:2: 16:2
    }
}

promoted[0] in g: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/traits/privacy.rs:15:5: 15:11
    let mut _1: ();                      // in scope 0 at ui/traits/privacy.rs:15:5: 15:7

    bb0: {
        _1 = ();                         // scope 0 at ui/traits/privacy.rs:15:5: 15:7
        _0 = &_1;                        // scope 0 at ui/traits/privacy.rs:15:5: 15:11
        return;                          // scope 0 at ui/traits/privacy.rs:15:5: 15:11
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/privacy.rs:18:8: 18:8
    let _1: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/traits/privacy.rs:19:9: 19:14
    let mut _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/traits/privacy.rs:19:17: 19:51
    let mut _3: std::thread::JoinHandle<()>; // in scope 0 at ui/traits/privacy.rs:19:17: 19:44
    let mut _4: [closure@ui/traits/privacy.rs:19:38: 19:40]; // in scope 0 at ui/traits/privacy.rs:19:38: 19:43
    let _5: std::any::TypeId;            // in scope 0 at ui/traits/privacy.rs:20:5: 20:20
    let mut _6: &dyn std::any::Any + std::marker::Send; // in scope 0 at ui/traits/privacy.rs:20:5: 20:20
    let mut _7: *const dyn std::any::Any + std::marker::Send; // in scope 0 at ui/traits/privacy.rs:19:9: 19:14
    scope 1 {
        debug error => _1;               // in scope 1 at ui/traits/privacy.rs:19:9: 19:14
    }

    bb0: {
        _3 = spawn::<[closure@ui/traits/privacy.rs:19:38: 19:40], ()>(move _4) -> bb1; // scope 0 at ui/traits/privacy.rs:19:17: 19:44
                                         // mir::Constant
                                         // + span: ui/traits/privacy.rs:19:17: 19:37
                                         // + literal: Const { ty: fn([closure@ui/traits/privacy.rs:19:38: 19:40]) -> JoinHandle<()> {spawn::<[closure@ui/traits/privacy.rs:19:38: 19:40], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = JoinHandle::<()>::join(move _3) -> bb2; // scope 0 at ui/traits/privacy.rs:19:17: 19:51
                                         // mir::Constant
                                         // + span: ui/traits/privacy.rs:19:45: 19:49
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _2) -> bb3; // scope 0 at ui/traits/privacy.rs:19:17: 19:64
                                         // mir::Constant
                                         // + span: ui/traits/privacy.rs:19:52: 19:62
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = (((_1.0: std::ptr::Unique<dyn std::any::Any + std::marker::Send>).0: std::ptr::NonNull<dyn std::any::Any + std::marker::Send>).0: *const dyn std::any::Any + std::marker::Send); // scope 1 at ui/traits/privacy.rs:20:5: 20:20
        _6 = &(*_7);                     // scope 1 at ui/traits/privacy.rs:20:5: 20:20
        _5 = <dyn Any + Send as Any>::type_id(move _6) -> [return: bb4, unwind: bb6]; // scope 1 at ui/traits/privacy.rs:20:5: 20:20
                                         // mir::Constant
                                         // + span: ui/traits/privacy.rs:20:11: 20:18
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Any + Send) -> TypeId {<dyn Any + Send as Any>::type_id}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/traits/privacy.rs:21:1: 21:2
    }

    bb5: {
        return;                          // scope 0 at ui/traits/privacy.rs:21:2: 21:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/traits/privacy.rs:21:1: 21:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/traits/privacy.rs:18:1: 21:2
    }
}

fn f::{closure#0}(_1: [closure@ui/traits/privacy.rs:19:38: 19:40]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/privacy.rs:19:41: 19:41

    bb0: {
        return;                          // scope 0 at ui/traits/privacy.rs:19:43: 19:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/privacy.rs:24:11: 24:11

    bb0: {
        return;                          // scope 0 at ui/traits/privacy.rs:24:13: 24:13
    }
}
