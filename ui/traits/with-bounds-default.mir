// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Getter::do_get2(_1: &Self) -> (T, T) {
    debug self => _1;
    let mut _0: (T, T);
    let _2: T;
    let mut _3: T;
    let mut _4: &T;
    let mut _5: T;
    let mut _6: &T;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _2 = <Self as Getter<T>>::do_get(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_2;
        _3 = <T as Clone>::clone(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = &_2;
        _5 = <T as Clone>::clone(move _6) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn <impl at ui/traits/with-bounds-default.rs:20:1: 20:29>::do_get(_1: &isize) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/traits/with-bounds-default.rs:24:1: 24:39>::do_get(_1: &Option<T>) -> T {
    debug self => _1;
    let mut _0: T;
    let mut _2: &T;
    let _3: &T;
    let mut _4: std::option::Option<&T>;

    bb0: {
        _4 = Option::<T>::as_ref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Option::<&T>::unwrap(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _3;
        _0 = <T as Clone>::clone(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(isize, isize), &(isize, isize));
    let mut _2: &(isize, isize);
    let _3: (isize, isize);
    let _4: &(isize, isize);
    let _5: &(isize, isize);
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&(std::string::String, std::string::String), &(std::string::String, std::string::String));
    let mut _12: &(std::string::String, std::string::String);
    let _13: (std::string::String, std::string::String);
    let mut _14: &std::option::Option<std::string::String>;
    let _15: std::option::Option<std::string::String>;
    let mut _16: std::string::String;
    let _17: &str;
    let mut _18: &(std::string::String, std::string::String);
    let _19: (std::string::String, std::string::String);
    let mut _20: std::string::String;
    let _21: &str;
    let mut _22: std::string::String;
    let _23: &str;
    let _24: &(std::string::String, std::string::String);
    let _25: &(std::string::String, std::string::String);
    let mut _26: bool;
    let mut _27: bool;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &(isize, isize);
    let mut _32: &isize;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _28: core::panicking::AssertKind;
        scope 4 {
            debug kind => _28;
        }
    }

    bb0: {
        _32 = const _;
        _3 = <isize as Getter<isize>>::do_get2(_32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _31 = const _;
        _1 = (move _2, _31);
        _4 = (_1.0: &(isize, isize));
        _5 = (_1.1: &(isize, isize));
        _7 = <(isize, isize) as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<(isize, isize), (isize, isize)>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _17 = const "hi";
        _16 = <str as ToString>::to_string(_17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = Option::<String>::Some(move _16);
        _14 = &_15;
        _13 = <Option<String> as Getter<String>>::do_get2(move _14) -> [return: bb6, unwind: bb18];
    }

    bb6: {
        _12 = &_13;
        _21 = const "hi";
        _20 = <str as ToString>::to_string(_21) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _23 = const "hi";
        _22 = <str as ToString>::to_string(_23) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _19 = (move _20, move _22);
        _18 = &_19;
        _11 = (move _12, move _18);
        _24 = (_11.0: &(std::string::String, std::string::String));
        _25 = (_11.1: &(std::string::String, std::string::String));
        _27 = <(String, String) as PartialEq>::eq(_24, _25) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<(String, String), (String, String)>(move _28, _24, _25, move _30) -> bb15;
    }

    bb11: {
        drop(_19) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        drop(_13) -> [return: bb13, unwind: bb18];
    }

    bb13: {
        drop(_15) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_19) -> [return: bb17, unwind terminate];
    }

    bb16 (cleanup): {
        drop(_20) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_13) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_15) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}

promoted[0] in main: &(isize, isize) = {
    let mut _0: &(isize, isize);
    let mut _1: (isize, isize);

    bb0: {
        _1 = (const 3_isize, const 3_isize);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}
