// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Getter::do_get2(_1: &Self) -> (T, T) {
    debug self => _1;                    // in scope 0 at ui/traits/with-bounds-default.rs:13:16: 13:21
    let mut _0: (T, T);                  // return place in scope 0 at ui/traits/with-bounds-default.rs:13:26: 13:32
    let _2: T;                           // in scope 0 at ui/traits/with-bounds-default.rs:14:13: 14:14
    let mut _3: &Self;                   // in scope 0 at ui/traits/with-bounds-default.rs:14:17: 14:30
    let mut _4: T;                       // in scope 0 at ui/traits/with-bounds-default.rs:15:10: 15:19
    let mut _5: &T;                      // in scope 0 at ui/traits/with-bounds-default.rs:15:10: 15:19
    let mut _6: T;                       // in scope 0 at ui/traits/with-bounds-default.rs:15:21: 15:30
    let mut _7: &T;                      // in scope 0 at ui/traits/with-bounds-default.rs:15:21: 15:30
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/traits/with-bounds-default.rs:14:13: 14:14
    }

    bb0: {
        _3 = _1;                         // scope 0 at ui/traits/with-bounds-default.rs:14:17: 14:30
        _2 = <Self as Getter<T>>::do_get(move _3) -> bb1; // scope 0 at ui/traits/with-bounds-default.rs:14:17: 14:30
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:14:22: 14:28
                                         // + literal: Const { ty: for<'a> fn(&'a Self) -> T {<Self as Getter<T>>::do_get}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_2;                        // scope 1 at ui/traits/with-bounds-default.rs:15:10: 15:19
        _4 = <T as Clone>::clone(move _5) -> [return: bb2, unwind: bb6]; // scope 1 at ui/traits/with-bounds-default.rs:15:10: 15:19
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:15:12: 15:17
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_2;                        // scope 1 at ui/traits/with-bounds-default.rs:15:21: 15:30
        _6 = <T as Clone>::clone(move _7) -> [return: bb3, unwind: bb5]; // scope 1 at ui/traits/with-bounds-default.rs:15:21: 15:30
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:15:23: 15:28
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = (move _4, move _6);         // scope 1 at ui/traits/with-bounds-default.rs:15:9: 15:31
        drop(_2) -> bb4;                 // scope 0 at ui/traits/with-bounds-default.rs:16:5: 16:6
    }

    bb4: {
        return;                          // scope 0 at ui/traits/with-bounds-default.rs:16:6: 16:6
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 1 at ui/traits/with-bounds-default.rs:15:30: 15:31
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/traits/with-bounds-default.rs:16:5: 16:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/traits/with-bounds-default.rs:13:5: 16:6
    }
}

fn <impl at ui/traits/with-bounds-default.rs:20:1: 20:29>::do_get(_1: &isize) -> isize {
    debug self => _1;                    // in scope 0 at ui/traits/with-bounds-default.rs:21:15: 21:20
    let mut _0: isize;                   // return place in scope 0 at ui/traits/with-bounds-default.rs:21:25: 21:30

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/traits/with-bounds-default.rs:21:33: 21:38
        return;                          // scope 0 at ui/traits/with-bounds-default.rs:21:40: 21:40
    }
}

fn <impl at ui/traits/with-bounds-default.rs:24:1: 24:39>::do_get(_1: &Option<T>) -> T {
    debug self => _1;                    // in scope 0 at ui/traits/with-bounds-default.rs:25:15: 25:20
    let mut _0: T;                       // return place in scope 0 at ui/traits/with-bounds-default.rs:25:25: 25:26
    let mut _2: &T;                      // in scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:59
    let _3: &T;                          // in scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:51
    let mut _4: std::option::Option<&T>; // in scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:42
    let mut _5: &std::option::Option<T>; // in scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:42

    bb0: {
        _5 = _1;                         // scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:42
        _4 = Option::<T>::as_ref(move _5) -> bb1; // scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:42
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:25:34: 25:40
                                         // + literal: Const { ty: for<'a> fn(&'a Option<T>) -> Option<&'a T> {Option::<T>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Option::<&T>::unwrap(move _4) -> bb2; // scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:51
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:25:43: 25:49
                                         // + literal: Const { ty: fn(Option<&T>) -> &T {Option::<&T>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _3;                         // scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:59
        _0 = <T as Clone>::clone(move _2) -> bb3; // scope 0 at ui/traits/with-bounds-default.rs:25:29: 25:59
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:25:52: 25:57
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/with-bounds-default.rs:25:61: 25:61
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/with-bounds-default.rs:29:15: 29:15
    let mut _1: (&(isize, isize), &(isize, isize)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &(isize, isize);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: (isize, isize);              // in scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
    let mut _4: &isize;                  // in scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
    let mut _5: &(isize, isize);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &(isize, isize);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &(isize, isize);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &(isize, isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &(isize, isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &(isize, isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &(isize, isize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &(isize, isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &(isize, isize);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&(std::string::String, std::string::String), &(std::string::String, std::string::String)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: (std::string::String, std::string::String); // in scope 0 at ui/traits/with-bounds-default.rs:31:16: 31:48
    let mut _23: &std::option::Option<std::string::String>; // in scope 0 at ui/traits/with-bounds-default.rs:31:16: 31:48
    let _24: std::option::Option<std::string::String>; // in scope 0 at ui/traits/with-bounds-default.rs:31:16: 31:38
    let mut _25: std::string::String;    // in scope 0 at ui/traits/with-bounds-default.rs:31:21: 31:37
    let mut _26: &str;                   // in scope 0 at ui/traits/with-bounds-default.rs:31:21: 31:37
    let _27: &str;                       // in scope 0 at ui/traits/with-bounds-default.rs:31:21: 31:25
    let mut _28: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: (std::string::String, std::string::String); // in scope 0 at ui/traits/with-bounds-default.rs:31:50: 31:86
    let mut _30: std::string::String;    // in scope 0 at ui/traits/with-bounds-default.rs:31:51: 31:67
    let mut _31: &str;                   // in scope 0 at ui/traits/with-bounds-default.rs:31:51: 31:67
    let _32: &str;                       // in scope 0 at ui/traits/with-bounds-default.rs:31:51: 31:55
    let mut _33: std::string::String;    // in scope 0 at ui/traits/with-bounds-default.rs:31:69: 31:85
    let mut _34: &str;                   // in scope 0 at ui/traits/with-bounds-default.rs:31:69: 31:85
    let _35: &str;                       // in scope 0 at ui/traits/with-bounds-default.rs:31:69: 31:73
    let _36: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _37: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &(std::string::String, std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: &(isize, isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _51: &isize;                 // in scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _36;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _37;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _42: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _42;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _51 = const _;                   // scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:30:16: 30:27
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _51;                        // scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
        _3 = <isize as Getter<isize>>::do_get2(move _4) -> bb1; // scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:30:18: 30:25
                                         // + literal: Const { ty: for<'a> fn(&'a isize) -> (isize, isize) {<isize as Getter<isize>>::do_get2}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(isize, isize), val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _50;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &(isize, isize));    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &(isize, isize));    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <(isize, isize) as PartialEq>::eq(move _10, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (isize, isize), &'b (isize, isize)) -> bool {<(isize, isize) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<(isize, isize), (isize, isize)>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (isize, isize), &'b (isize, isize), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(isize, isize), (isize, isize)>}, val: Value(<ZST>) }
    }

    bb4: {
        _27 = const "hi";                // scope 0 at ui/traits/with-bounds-default.rs:31:21: 31:25
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:21: 31:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = _27;                       // scope 0 at ui/traits/with-bounds-default.rs:31:21: 31:37
        _25 = <str as ToString>::to_string(move _26) -> bb5; // scope 0 at ui/traits/with-bounds-default.rs:31:21: 31:37
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:26: 31:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = Option::<String>::Some(move _25); // scope 0 at ui/traits/with-bounds-default.rs:31:16: 31:38
        _23 = &_24;                      // scope 0 at ui/traits/with-bounds-default.rs:31:16: 31:48
        _22 = <Option<String> as Getter<String>>::do_get2(move _23) -> [return: bb6, unwind: bb18]; // scope 0 at ui/traits/with-bounds-default.rs:31:16: 31:48
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:39: 31:46
                                         // + literal: Const { ty: for<'a> fn(&'a Option<String>) -> (String, String) {<Option<String> as Getter<String>>::do_get2}, val: Value(<ZST>) }
    }

    bb6: {
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = const "hi";                // scope 0 at ui/traits/with-bounds-default.rs:31:51: 31:55
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:51: 31:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _31 = _32;                       // scope 0 at ui/traits/with-bounds-default.rs:31:51: 31:67
        _30 = <str as ToString>::to_string(move _31) -> [return: bb7, unwind: bb17]; // scope 0 at ui/traits/with-bounds-default.rs:31:51: 31:67
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:56: 31:65
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _35 = const "hi";                // scope 0 at ui/traits/with-bounds-default.rs:31:69: 31:73
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:69: 31:73
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _34 = _35;                       // scope 0 at ui/traits/with-bounds-default.rs:31:69: 31:85
        _33 = <str as ToString>::to_string(move _34) -> [return: bb8, unwind: bb16]; // scope 0 at ui/traits/with-bounds-default.rs:31:69: 31:85
                                         // mir::Constant
                                         // + span: ui/traits/with-bounds-default.rs:31:74: 31:83
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = (move _30, move _33);      // scope 0 at ui/traits/with-bounds-default.rs:31:50: 31:86
        _28 = &_29;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_20.0: &(std::string::String, std::string::String)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_20.1: &(std::string::String, std::string::String)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = _36;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = _37;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = <(String, String) as PartialEq>::eq(move _40, move _41) -> [return: bb9, unwind: bb15]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (String, String), &'b (String, String)) -> bool {<(String, String) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _38 = Not(move _39);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _42 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = core::panicking::assert_failed::<(String, String), (String, String)>(move _44, move _45, move _47, move _49) -> bb15; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (String, String), &'b (String, String), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(String, String), (String, String)>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_29) -> [return: bb12, unwind: bb17]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12: {
        drop(_22) -> [return: bb13, unwind: bb18]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_24) -> bb14;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14: {
        return;                          // scope 0 at ui/traits/with-bounds-default.rs:32:2: 32:2
    }

    bb15 (cleanup): {
        drop(_29) -> bb17;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16 (cleanup): {
        drop(_30) -> bb17;               // scope 0 at ui/traits/with-bounds-default.rs:31:85: 31:86
    }

    bb17 (cleanup): {
        drop(_22) -> bb18;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18 (cleanup): {
        drop(_24) -> bb19;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/traits/with-bounds-default.rs:29:1: 32:2
    }
}

promoted[0] in main: &(isize, isize) = {
    let mut _0: &(isize, isize);         // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (isize, isize);          // in scope 0 at ui/traits/with-bounds-default.rs:30:29: 30:35

    bb0: {
        _1 = (const 3_isize, const 3_isize); // scope 0 at ui/traits/with-bounds-default.rs:30:29: 30:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
    let mut _1: isize;                   // in scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:17

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:17
        _0 = &_1;                        // scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
        return;                          // scope 0 at ui/traits/with-bounds-default.rs:30:16: 30:27
    }
}
