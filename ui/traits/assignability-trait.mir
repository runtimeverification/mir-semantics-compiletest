// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/assignability-trait.rs:12:1: 12:35>::iterate(_1: &&[A], _2: F) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/assignability-trait.rs:13:19: 13:24
    debug f => _2;                       // in scope 0 at ui/traits/assignability-trait.rs:13:26: 13:27
    let mut _0: bool;                    // return place in scope 0 at ui/traits/assignability-trait.rs:13:35: 13:39
    let mut _3: &mut std::slice::Iter<'_, A>; // in scope 0 at ui/traits/assignability-trait.rs:14:9: 14:27
    let mut _4: std::slice::Iter<'_, A>; // in scope 0 at ui/traits/assignability-trait.rs:14:9: 14:20
    let mut _5: &[A];                    // in scope 0 at ui/traits/assignability-trait.rs:14:9: 14:20
    let mut _6: F;                       // in scope 0 at ui/traits/assignability-trait.rs:14:25: 14:26
    let mut _7: &[A];                    // in scope 0 at ui/traits/assignability-trait.rs:13:19: 13:24
    let mut _8: bool;                    // in scope 0 at ui/traits/assignability-trait.rs:15:5: 15:6

    bb0: {
        _8 = const false;                // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:27
        _8 = const true;                 // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:27
        _7 = deref_copy (*_1);           // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:20
        _5 = _7;                         // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:20
        _4 = core::slice::<impl [A]>::iter(move _5) -> [return: bb1, unwind: bb5]; // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:20
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:14:14: 14:18
                                         // + literal: Const { ty: for<'a> fn(&'a [A]) -> std::slice::Iter<'a, A> {core::slice::<impl [A]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &mut _4;                    // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:27
        _8 = const false;                // scope 0 at ui/traits/assignability-trait.rs:14:25: 14:26
        _6 = move _2;                    // scope 0 at ui/traits/assignability-trait.rs:14:25: 14:26
        _0 = <std::slice::Iter<'_, A> as Iterator>::all::<F>(move _3, move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/traits/assignability-trait.rs:14:9: 14:27
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:14:21: 14:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, A>, F) -> bool {<std::slice::Iter<'_, A> as Iterator>::all::<F>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/traits/assignability-trait.rs:15:6: 15:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/traits/assignability-trait.rs:13:5: 15:6
    }

    bb4 (cleanup): {
        drop(_2) -> bb3;                 // scope 0 at ui/traits/assignability-trait.rs:15:5: 15:6
    }

    bb5 (cleanup): {
        switchInt(_8) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/traits/assignability-trait.rs:15:5: 15:6
    }
}

fn <impl at ui/traits/assignability-trait.rs:18:1: 18:31>::iterate(_1: &Vec<A>, _2: F) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/assignability-trait.rs:19:19: 19:24
    debug f => _2;                       // in scope 0 at ui/traits/assignability-trait.rs:19:26: 19:27
    let mut _0: bool;                    // return place in scope 0 at ui/traits/assignability-trait.rs:19:35: 19:39
    let mut _3: &mut std::slice::Iter<'_, A>; // in scope 0 at ui/traits/assignability-trait.rs:20:9: 20:27
    let mut _4: std::slice::Iter<'_, A>; // in scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
    let mut _5: &[A];                    // in scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
    let _6: &[A];                        // in scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
    let mut _7: &std::vec::Vec<A>;       // in scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
    let mut _8: F;                       // in scope 0 at ui/traits/assignability-trait.rs:20:25: 20:26
    let mut _9: bool;                    // in scope 0 at ui/traits/assignability-trait.rs:21:5: 21:6

    bb0: {
        _9 = const false;                // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:27
        _9 = const true;                 // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:27
        _7 = _1;                         // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
        _6 = <Vec<A> as Deref>::deref(move _7) -> [return: bb1, unwind: bb6]; // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:20:9: 20:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<A>) -> &'a <Vec<A> as Deref>::Target {<Vec<A> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
        _4 = core::slice::<impl [A]>::iter(move _5) -> [return: bb2, unwind: bb6]; // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:20
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:20:14: 20:18
                                         // + literal: Const { ty: for<'a> fn(&'a [A]) -> std::slice::Iter<'a, A> {core::slice::<impl [A]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &mut _4;                    // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:27
        _9 = const false;                // scope 0 at ui/traits/assignability-trait.rs:20:25: 20:26
        _8 = move _2;                    // scope 0 at ui/traits/assignability-trait.rs:20:25: 20:26
        _0 = <std::slice::Iter<'_, A> as Iterator>::all::<F>(move _3, move _8) -> [return: bb3, unwind: bb6]; // scope 0 at ui/traits/assignability-trait.rs:20:9: 20:27
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:20:21: 20:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, A>, F) -> bool {<std::slice::Iter<'_, A> as Iterator>::all::<F>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/assignability-trait.rs:21:6: 21:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/assignability-trait.rs:19:5: 21:6
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/traits/assignability-trait.rs:21:5: 21:6
    }

    bb6 (cleanup): {
        switchInt(_9) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/traits/assignability-trait.rs:21:5: 21:6
    }
}

fn length(_1: T) -> usize {
    debug x => _1;                       // in scope 0 at ui/traits/assignability-trait.rs:24:30: 24:31
    let mut _0: usize;                   // return place in scope 0 at ui/traits/assignability-trait.rs:25:9: 25:16
    let _2: bool;                        // in scope 0 at ui/traits/assignability-trait.rs:26:5: 29:7
    let mut _3: &T;                      // in scope 0 at ui/traits/assignability-trait.rs:26:5: 29:7
    let mut _4: [closure@ui/traits/assignability-trait.rs:26:15: 26:19]; // in scope 0 at ui/traits/assignability-trait.rs:26:15: 29:6
    let mut _5: &mut usize;              // in scope 0 at ui/traits/assignability-trait.rs:26:15: 29:6
    scope 1 {
        debug len => _0;                 // in scope 1 at ui/traits/assignability-trait.rs:25:9: 25:16
    }

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/traits/assignability-trait.rs:25:19: 25:20
        _3 = &_1;                        // scope 1 at ui/traits/assignability-trait.rs:26:5: 29:7
        _5 = &mut _0;                    // scope 1 at ui/traits/assignability-trait.rs:26:15: 29:6
        _4 = [closure@ui/traits/assignability-trait.rs:26:15: 26:19] { len: move _5 }; // scope 1 at ui/traits/assignability-trait.rs:26:15: 29:6
                                         // closure
                                         // + def_id: DefId(0:19 ~ assignability_trait[2582]::length::{closure#0})
                                         // + substs: [
                                         //     A,
                                         //     T,
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a A,)) -> bool,
                                         //     (&mut usize,),
                                         // ]
        _2 = <T as iterable<A>>::iterate::<[closure@ui/traits/assignability-trait.rs:26:15: 26:19]>(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 1 at ui/traits/assignability-trait.rs:26:5: 29:7
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:26:7: 26:14
                                         // + literal: Const { ty: for<'a> fn(&'a T, [closure@ui/traits/assignability-trait.rs:26:15: 26:19]) -> bool {<T as iterable<A>>::iterate::<[closure@ui/traits/assignability-trait.rs:26:15: 26:19]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/traits/assignability-trait.rs:31:1: 31:2
    }

    bb2: {
        return;                          // scope 0 at ui/traits/assignability-trait.rs:31:2: 31:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/traits/assignability-trait.rs:31:1: 31:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/traits/assignability-trait.rs:24:1: 31:2
    }
}

fn length::{closure#0}(_1: &mut [closure@ui/traits/assignability-trait.rs:26:15: 26:19], _2: &A) -> bool {
    debug _y => _2;                      // in scope 0 at ui/traits/assignability-trait.rs:26:16: 26:18
    debug len => (*((*_1).0: &mut usize)); // in scope 0 at ui/traits/assignability-trait.rs:25:9: 25:16
    let mut _0: bool;                    // return place in scope 0 at ui/traits/assignability-trait.rs:26:20: 26:20
    let mut _3: (usize, bool);           // in scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
    let mut _4: &mut usize;              // in scope 0 at ui/traits/assignability-trait.rs:26:15: 29:6
    let mut _5: &mut usize;              // in scope 0 at ui/traits/assignability-trait.rs:26:15: 29:6
    let mut _6: &mut usize;              // in scope 0 at ui/traits/assignability-trait.rs:26:15: 29:6

    bb0: {
        _4 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
        _3 = CheckedAdd((*_4), const 1_usize); // scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
        _5 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_5), const 1_usize) -> bb1; // scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
    }

    bb1: {
        _6 = deref_copy ((*_1).0: &mut usize); // scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
        (*_6) = move (_3.0: usize);      // scope 0 at ui/traits/assignability-trait.rs:27:9: 27:17
        _0 = const true;                 // scope 0 at ui/traits/assignability-trait.rs:28:9: 28:13
        return;                          // scope 0 at ui/traits/assignability-trait.rs:29:6: 29:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/assignability-trait.rs:33:15: 33:15
    let _1: std::vec::Vec<isize>;        // in scope 0 at ui/traits/assignability-trait.rs:34:9: 34:10
    let mut _2: std::boxed::Box<[isize]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[isize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[isize; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _8: bool;                        // in scope 0 at ui/traits/assignability-trait.rs:36:5: 36:60
    let mut _9: &std::vec::Vec<isize>;   // in scope 0 at ui/traits/assignability-trait.rs:36:5: 36:60
    let mut _10: [closure@ui/traits/assignability-trait.rs:36:15: 36:18]; // in scope 0 at ui/traits/assignability-trait.rs:36:15: 36:59
    let mut _11: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/assignability-trait.rs:36:15: 36:59
    let mut _12: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _14: usize;                      // in scope 0 at ui/traits/assignability-trait.rs:38:16: 38:33
    let mut _15: std::vec::Vec<isize>;   // in scope 0 at ui/traits/assignability-trait.rs:38:23: 38:32
    let mut _16: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/assignability-trait.rs:38:23: 38:32
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _18: usize;                      // in scope 0 at ui/traits/assignability-trait.rs:38:35: 38:42
    let mut _19: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/assignability-trait.rs:38:35: 38:42
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _34: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _35: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _36: usize;                      // in scope 0 at ui/traits/assignability-trait.rs:41:16: 41:46
    let mut _37: &[isize];               // in scope 0 at ui/traits/assignability-trait.rs:41:42: 41:45
    let _38: &[isize];                   // in scope 0 at ui/traits/assignability-trait.rs:41:42: 41:45
    let _39: &[isize];                   // in scope 0 at ui/traits/assignability-trait.rs:41:43: 41:45
    let mut _40: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/assignability-trait.rs:41:44: 41:45
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _42: usize;                      // in scope 0 at ui/traits/assignability-trait.rs:41:48: 41:55
    let mut _43: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/assignability-trait.rs:41:48: 41:55
    let mut _46: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _48: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _49: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _51: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _52: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _53: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _54: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _55: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _56: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _59: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _61: usize;                      // in scope 0 at ui/traits/assignability-trait.rs:46:16: 46:45
    let mut _62: &[isize];               // in scope 0 at ui/traits/assignability-trait.rs:46:42: 46:44
    let mut _63: &[isize; 4];            // in scope 0 at ui/traits/assignability-trait.rs:46:42: 46:44
    let _64: &[isize; 4];                // in scope 0 at ui/traits/assignability-trait.rs:46:42: 46:44
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _66: usize;                      // in scope 0 at ui/traits/assignability-trait.rs:46:47: 46:54
    let mut _67: &[isize];               // in scope 0 at ui/traits/assignability-trait.rs:46:47: 46:54
    let mut _68: &[isize; 4];            // in scope 0 at ui/traits/assignability-trait.rs:46:47: 46:54
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _83: *const [isize; 4];      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/traits/assignability-trait.rs:34:9: 34:10
        let _20: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _21: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _44: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _45: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _58: [isize; 4];             // in scope 1 at ui/traits/assignability-trait.rs:44:9: 44:10
        scope 3 {
            debug left_val => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _21;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _26: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _26;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _44;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _45;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _50: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _50;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug z => _58;              // in scope 7 at ui/traits/assignability-trait.rs:44:9: 44:10
            let _69: &usize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _70: &usize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 8 {
                debug left_val => _69;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _70;  // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _75: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 9 {
                    debug kind => _75;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 32_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [isize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _83 = (((_7.0: std::ptr::Unique<[isize; 4]>).0: std::ptr::NonNull<[isize; 4]>).0: *const [isize; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_83) = [const 0_isize, const 1_isize, const 2_isize, const 3_isize]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[isize]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [isize]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[isize]>) -> Vec<isize> {slice::<impl [isize]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &_1;                        // scope 1 at ui/traits/assignability-trait.rs:36:5: 36:60
        _11 = &_1;                       // scope 1 at ui/traits/assignability-trait.rs:36:15: 36:59
        _10 = [closure@ui/traits/assignability-trait.rs:36:15: 36:18] { x: move _11 }; // scope 1 at ui/traits/assignability-trait.rs:36:15: 36:59
                                         // closure
                                         // + def_id: DefId(0:21 ~ assignability_trait[2582]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a isize,)) -> bool,
                                         //     (&std::vec::Vec<isize>,),
                                         // ]
        _8 = <Vec<isize> as iterable<isize>>::iterate::<[closure@ui/traits/assignability-trait.rs:36:15: 36:18]>(move _9, move _10) -> [return: bb3, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:36:5: 36:60
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:36:7: 36:14
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, [closure@ui/traits/assignability-trait.rs:36:15: 36:18]) -> bool {<Vec<isize> as iterable<isize>>::iterate::<[closure@ui/traits/assignability-trait.rs:36:15: 36:18]>}, val: Value(<ZST>) }
    }

    bb3: {
        _16 = &_1;                       // scope 1 at ui/traits/assignability-trait.rs:38:23: 38:32
        _15 = <Vec<isize> as Clone>::clone(move _16) -> [return: bb4, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:38:23: 38:32
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:38:25: 38:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> Vec<isize> {<Vec<isize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = length::<isize, Vec<isize>>(move _15) -> [return: bb5, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:38:16: 38:33
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:38:16: 38:22
                                         // + literal: Const { ty: fn(Vec<isize>) -> usize {length::<isize, Vec<isize>>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = &_1;                       // scope 1 at ui/traits/assignability-trait.rs:38:35: 38:42
        _18 = Vec::<isize>::len(move _19) -> [return: bb6, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:38:35: 38:42
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:38:37: 38:40
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> usize {Vec::<isize>::len}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = &_18;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _17);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_12.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_12.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = (*_20);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = (*_21);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = Eq(move _24, move _25);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _22 = Not(move _23);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<usize, usize>(move _28, move _29, move _31, move _33) -> bb19; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _40 = &_1;                       // scope 1 at ui/traits/assignability-trait.rs:41:44: 41:45
        _39 = <Vec<isize> as Deref>::deref(move _40) -> [return: bb9, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:41:43: 41:45
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:41:43: 41:45
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> &'a <Vec<isize> as Deref>::Target {<Vec<isize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _38 = _39;                       // scope 1 at ui/traits/assignability-trait.rs:41:42: 41:45
        _37 = _38;                       // scope 1 at ui/traits/assignability-trait.rs:41:42: 41:45
        _36 = length::<isize, &[isize]>(move _37) -> [return: bb10, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:41:16: 41:46
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:41:16: 41:41
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[isize]) -> usize {length::<isize, &[isize]>}, val: Value(<ZST>) }
    }

    bb10: {
        _35 = &_36;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = &_1;                       // scope 1 at ui/traits/assignability-trait.rs:41:48: 41:55
        _42 = Vec::<isize>::len(move _43) -> [return: bb11, unwind: bb19]; // scope 1 at ui/traits/assignability-trait.rs:41:48: 41:55
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:41:50: 41:53
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>) -> usize {Vec::<isize>::len}, val: Value(<ZST>) }
    }

    bb11: {
        _41 = &_42;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = (move _35, move _41);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _44 = (_34.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _45 = (_34.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _48 = (*_44);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _49 = (*_45);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _47 = Eq(move _48, move _49);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _46 = Not(move _47);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _46) -> [0: bb13, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _50 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _52 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _55 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _51 = core::panicking::assert_failed::<usize, usize>(move _52, move _53, move _55, move _57) -> bb19; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb13: {
        _58 = [const 0_isize, const 1_isize, const 2_isize, const 3_isize]; // scope 1 at ui/traits/assignability-trait.rs:44:13: 44:22
        _64 = &_58;                      // scope 7 at ui/traits/assignability-trait.rs:46:42: 46:44
        _63 = _64;                       // scope 7 at ui/traits/assignability-trait.rs:46:42: 46:44
        _62 = move _63 as &[isize] (Pointer(Unsize)); // scope 7 at ui/traits/assignability-trait.rs:46:42: 46:44
        _61 = length::<isize, &[isize]>(move _62) -> [return: bb14, unwind: bb19]; // scope 7 at ui/traits/assignability-trait.rs:46:16: 46:45
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:46:16: 46:41
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[isize]) -> usize {length::<isize, &[isize]>}, val: Value(<ZST>) }
    }

    bb14: {
        _60 = &_61;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _68 = &_58;                      // scope 7 at ui/traits/assignability-trait.rs:46:47: 46:54
        _67 = move _68 as &[isize] (Pointer(Unsize)); // scope 7 at ui/traits/assignability-trait.rs:46:47: 46:54
        _66 = core::slice::<impl [isize]>::len(move _67) -> [return: bb15, unwind: bb19]; // scope 7 at ui/traits/assignability-trait.rs:46:47: 46:54
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:46:49: 46:52
                                         // + literal: Const { ty: for<'a> fn(&'a [isize]) -> usize {core::slice::<impl [isize]>::len}, val: Value(<ZST>) }
    }

    bb15: {
        _65 = &_66;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _65);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_59.0: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_59.1: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = (*_69);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = (*_70);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = Eq(move _73, move _74);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _71 = Not(move _72);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb17, otherwise: bb16]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _75 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<usize, usize>(move _77, move _78, move _80, move _82) -> bb19; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_1) -> bb18;                // scope 0 at ui/traits/assignability-trait.rs:47:1: 47:2
    }

    bb18: {
        return;                          // scope 0 at ui/traits/assignability-trait.rs:47:2: 47:2
    }

    bb19 (cleanup): {
        drop(_1) -> bb20;                // scope 0 at ui/traits/assignability-trait.rs:47:1: 47:2
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/traits/assignability-trait.rs:33:1: 47:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/traits/assignability-trait.rs:36:15: 36:18], _2: &isize) -> bool {
    debug y => _2;                       // in scope 0 at ui/traits/assignability-trait.rs:36:16: 36:17
    debug x => (*((*_1).0: &std::vec::Vec<isize>)); // in scope 0 at ui/traits/assignability-trait.rs:34:9: 34:10
    let mut _0: bool;                    // return place in scope 0 at ui/traits/assignability-trait.rs:36:19: 36:19
    let mut _3: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: &isize;                      // in scope 0 at ui/traits/assignability-trait.rs:36:32: 36:46
    let mut _6: &std::vec::Vec<isize>;   // in scope 0 at ui/traits/assignability-trait.rs:36:32: 36:33
    let mut _7: usize;                   // in scope 0 at ui/traits/assignability-trait.rs:36:34: 36:45
    let mut _8: isize;                   // in scope 0 at ui/traits/assignability-trait.rs:36:34: 36:36
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &std::vec::Vec<isize>;  // in scope 0 at ui/traits/assignability-trait.rs:36:15: 36:59
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _24 = deref_copy ((*_1).0: &std::vec::Vec<isize>); // scope 0 at ui/traits/assignability-trait.rs:36:32: 36:33
        _6 = _24;                        // scope 0 at ui/traits/assignability-trait.rs:36:32: 36:33
        _8 = (*_2);                      // scope 0 at ui/traits/assignability-trait.rs:36:34: 36:36
        _7 = move _8 as usize (IntToInt); // scope 0 at ui/traits/assignability-trait.rs:36:34: 36:45
        _5 = <Vec<isize> as Index<usize>>::index(move _6, move _7) -> bb1; // scope 0 at ui/traits/assignability-trait.rs:36:32: 36:46
                                         // mir::Constant
                                         // + span: ui/traits/assignability-trait.rs:36:32: 36:46
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<isize>, usize) -> &'a <Vec<isize> as Index<usize>>::Output {<Vec<isize> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = _2;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_3.0: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_3.1: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = const true;                 // scope 0 at ui/traits/assignability-trait.rs:36:53: 36:57
        return;                          // scope 0 at ui/traits/assignability-trait.rs:36:59: 36:59
    }
}
