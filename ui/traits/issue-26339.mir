// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-26339.rs:13:1: 13:30>::eq(_1: &Aimpl, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/issue-26339.rs:14:11: 14:16
    debug _rhs => _2;                    // in scope 0 at ui/traits/issue-26339.rs:14:18: 14:22
    let mut _0: bool;                    // return place in scope 0 at ui/traits/issue-26339.rs:14:33: 14:37

    bb0: {
        _0 = const true;                 // scope 0 at ui/traits/issue-26339.rs:15:9: 15:13
        return;                          // scope 0 at ui/traits/issue-26339.rs:16:6: 16:6
    }
}

fn <impl at ui/traits/issue-26339.rs:19:1: 19:30>::eq(_1: &Aimpl, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/traits/issue-26339.rs:20:11: 20:16
    debug _rhs => _2;                    // in scope 0 at ui/traits/issue-26339.rs:20:18: 20:22
    let mut _0: bool;                    // return place in scope 0 at ui/traits/issue-26339.rs:20:33: 20:37

    bb0: {
        _0 = const false;                // scope 0 at ui/traits/issue-26339.rs:21:9: 21:14
        return;                          // scope 0 at ui/traits/issue-26339.rs:22:6: 22:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/traits/issue-26339.rs:27:11: 27:11
    let _1: &dyn A;                      // in scope 0 at ui/traits/issue-26339.rs:28:9: 28:10
    let mut _2: &dyn A;                  // in scope 0 at ui/traits/issue-26339.rs:28:13: 28:29
    let mut _3: &Aimpl;                  // in scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
    let _4: &Aimpl;                      // in scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
    let mut _5: bool;                    // in scope 0 at ui/traits/issue-26339.rs:30:5: 30:23
    let mut _6: bool;                    // in scope 0 at ui/traits/issue-26339.rs:30:13: 30:22
    let mut _7: &dyn A;                  // in scope 0 at ui/traits/issue-26339.rs:30:13: 30:15
    let mut _8: &Foo;                    // in scope 0 at ui/traits/issue-26339.rs:30:19: 30:22
    let mut _9: !;                       // in scope 0 at ui/traits/issue-26339.rs:30:5: 30:23
    let mut _11: &Aimpl;                 // in scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/traits/issue-26339.rs:28:9: 28:10
        let mut _10: &Foo;               // in scope 1 at ui/traits/issue-26339.rs:30:19: 30:22
    }

    bb0: {
        _11 = const _;                   // scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
                                         // mir::Constant
                                         // + span: ui/traits/issue-26339.rs:28:13: 28:19
                                         // + literal: Const { ty: &Aimpl, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _11;                        // scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
        _3 = _4;                         // scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
        _2 = move _3 as &dyn A (Pointer(Unsize)); // scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
        _1 = _2;                         // scope 0 at ui/traits/issue-26339.rs:28:13: 28:29
        _7 = _1;                         // scope 1 at ui/traits/issue-26339.rs:30:13: 30:15
        _10 = const _;                   // scope 1 at ui/traits/issue-26339.rs:30:19: 30:22
                                         // mir::Constant
                                         // + span: ui/traits/issue-26339.rs:30:19: 30:22
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _10;                        // scope 1 at ui/traits/issue-26339.rs:30:19: 30:22
        _6 = <dyn A as PartialEq<Foo>>::eq(move _7, move _8) -> bb1; // scope 1 at ui/traits/issue-26339.rs:30:13: 30:22
                                         // mir::Constant
                                         // + span: ui/traits/issue-26339.rs:30:13: 30:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a dyn A, &'b Foo) -> bool {<dyn A as PartialEq<Foo>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Not(move _6);               // scope 1 at ui/traits/issue-26339.rs:30:5: 30:23
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/traits/issue-26339.rs:30:5: 30:23
    }

    bb2: {
        _9 = core::panicking::panic(const "assertion failed: *a == Foo"); // scope 1 at ui/traits/issue-26339.rs:30:5: 30:23
                                         // mir::Constant
                                         // + span: ui/traits/issue-26339.rs:30:5: 30:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/traits/issue-26339.rs:31:2: 31:2
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/traits/issue-26339.rs:30:19: 30:22
    let mut _1: Foo;                     // in scope 0 at ui/traits/issue-26339.rs:30:19: 30:22

    bb0: {
        _1 = Foo;                        // scope 0 at ui/traits/issue-26339.rs:30:19: 30:22
        _0 = &_1;                        // scope 0 at ui/traits/issue-26339.rs:30:19: 30:22
        return;                          // scope 0 at ui/traits/issue-26339.rs:30:19: 30:22
    }
}

promoted[1] in main: &Aimpl = {
    let mut _0: &Aimpl;                  // return place in scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
    let mut _1: Aimpl;                   // in scope 0 at ui/traits/issue-26339.rs:28:14: 28:19

    bb0: {
        _1 = Aimpl;                      // scope 0 at ui/traits/issue-26339.rs:28:14: 28:19
        _0 = &_1;                        // scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
        return;                          // scope 0 at ui/traits/issue-26339.rs:28:13: 28:19
    }
}
