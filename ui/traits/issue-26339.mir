// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/traits/issue-26339.rs:13:1: 13:30>::eq(_1: &Aimpl, _2: &Foo) -> bool {
    debug self => _1;
    debug _rhs => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/traits/issue-26339.rs:19:1: 19:30>::eq(_1: &Aimpl, _2: &Bar) -> bool {
    debug self => _1;
    debug _rhs => _2;
    let mut _0: bool;

    bb0: {
        _0 = const false;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: &dyn A;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: !;
    let mut _6: &Aimpl;
    scope 1 {
        debug a => _1;
        let mut _5: &Foo;
    }

    bb0: {
        _6 = const _;
        _1 = _6 as &dyn A (Pointer(Unsize));
        _5 = const _;
        _3 = <dyn A as PartialEq<Foo>>::eq(_1, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Not(move _3);
        switchInt(move _2) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: *a == Foo") -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Aimpl = {
    let mut _0: &Aimpl;
    let mut _1: Aimpl;

    bb0: {
        _1 = Aimpl;
        _0 = &_1;
        return;
    }
}
