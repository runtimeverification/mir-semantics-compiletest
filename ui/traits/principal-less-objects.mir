// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
SetOnDrop::1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

fn <impl at ui/traits/principal-less-objects.rs:11:1: 11:32>::drop(_1: &mut SetOnDrop<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: std::sync::atomic::Ordering;
    let mut _6: std::sync::atomic::Ordering;
    let mut _7: &std::sync::atomic::AtomicUsize;
    let mut _8: &std::sync::atomic::AtomicUsize;

    bb0: {
        _7 = deref_copy ((*_1).0: &std::sync::atomic::AtomicUsize);
        _8 = deref_copy ((*_1).0: &std::sync::atomic::AtomicUsize);
        _5 = Relaxed;
        _4 = AtomicUsize::load(_8, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = Add(move _4, const 1_usize);
        _6 = Relaxed;
        _2 = AtomicUsize::store(_7, move _3, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn assert_types_eq() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: std::sync::atomic::AtomicUsize;
    let mut _6: std::boxed::Box<SetOnDrop<'_>>;
    let mut _7: SetOnDrop<'_>;
    let _8: &std::sync::atomic::AtomicUsize;
    let mut _9: [u8; 64];
    let mut _10: (&usize, &usize);
    let mut _11: &usize;
    let _12: usize;
    let _13: &dyn std::marker::Sync;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&usize, &usize);
    let mut _24: &usize;
    let _25: usize;
    let _26: &dyn std::marker::Sync;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: usize;
    let mut _32: usize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&usize, &usize);
    let mut _37: &usize;
    let _38: usize;
    let mut _39: &std::sync::atomic::AtomicUsize;
    let mut _40: std::sync::atomic::Ordering;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: usize;
    let mut _46: usize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&usize, &usize);
    let mut _51: &usize;
    let _52: usize;
    let mut _53: &std::sync::atomic::AtomicUsize;
    let mut _54: std::sync::atomic::Ordering;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: usize;
    let mut _60: usize;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: *const dyn std::marker::Sync;
    let mut _69: *const dyn std::marker::Sync;
    scope 1 {
        debug c => _4;
        let _5: std::boxed::Box<dyn std::marker::Sync>;
        let _55: &usize;
        let _56: &usize;
        let mut _64: &usize;
        scope 2 {
            debug d => _5;
            let _14: &usize;
            let _15: &usize;
            let _27: &usize;
            let _28: &usize;
            let _41: &usize;
            let _42: &usize;
            let mut _65: &usize;
            let mut _66: &usize;
            let mut _67: &usize;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _27;
                debug right_val => _28;
                let _33: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _33;
                }
            }
            scope 7 {
                debug left_val => _41;
                debug right_val => _42;
                let _47: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _47;
                }
            }
        }
        scope 9 {
            debug left_val => _55;
            debug right_val => _56;
            let _61: core::panicking::AssertKind;
            scope 10 {
                debug kind => _61;
            }
        }
    }

    bb0: {
        _1 = assert_types_eq::<dyn Sync, dyn Sync>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = assert_types_eq::<dyn Send + Sync, dyn Send + Sync>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = assert_types_eq::<dyn Send + Sync, dyn Send + Sync>() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = AtomicUsize::new(const 0_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = &_4;
        _9 = [const 0_u8; 64];
        _7 = SetOnDrop::<'_>(_8, move _9);
        _6 = Box::<SetOnDrop<'_>>::new(move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _5 = move _6 as std::boxed::Box<dyn std::marker::Sync> (Pointer(Unsize));
        _68 = (((_5.0: std::ptr::Unique<dyn std::marker::Sync>).0: std::ptr::NonNull<dyn std::marker::Sync>).0: *const dyn std::marker::Sync);
        _13 = &(*_68);
        _12 = std::mem::size_of_val::<dyn Sync>(_13) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _11 = &_12;
        _67 = const _;
        _10 = (move _11, _67);
        _14 = (_10.0: &usize);
        _15 = (_10.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> bb19;
    }

    bb8: {
        _69 = (((_5.0: std::ptr::Unique<dyn std::marker::Sync>).0: std::ptr::NonNull<dyn std::marker::Sync>).0: *const dyn std::marker::Sync);
        _26 = &(*_69);
        _25 = align_of_val::<dyn Sync>(_26) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _24 = &_25;
        _66 = const _;
        _23 = (move _24, _66);
        _27 = (_23.0: &usize);
        _28 = (_23.1: &usize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<usize, usize>(move _33, _27, _28, move _35) -> bb19;
    }

    bb11: {
        _39 = &_4;
        _40 = Relaxed;
        _38 = AtomicUsize::load(move _39, move _40) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _37 = &_38;
        _65 = const _;
        _36 = (move _37, _65);
        _41 = (_36.0: &usize);
        _42 = (_36.1: &usize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<usize, usize>(move _47, _41, _42, move _49) -> bb19;
    }

    bb14: {
        drop(_5) -> [return: bb15, unwind continue];
    }

    bb15: {
        _53 = &_4;
        _54 = Relaxed;
        _52 = AtomicUsize::load(move _53, move _54) -> [return: bb16, unwind continue];
    }

    bb16: {
        _51 = &_52;
        _64 = const _;
        _50 = (move _51, _64);
        _55 = (_50.0: &usize);
        _56 = (_50.1: &usize);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<usize, usize>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_5) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = align_of::<SetOnDrop<'_>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<SetOnDrop<'_>>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 64_usize;
        return;
    }
}

fn SetOnDrop(_1: &AtomicUsize, _2: [u8; 64]) -> SetOnDrop<'_> {
    let mut _0: SetOnDrop<'_>;

    bb0: {
        _0 = SetOnDrop::<'_>(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn SetOnDrop(_1: &AtomicUsize, _2: [u8; 64]) -> SetOnDrop<'_> {
    let mut _0: SetOnDrop<'_>;

    bb0: {
        _0 = SetOnDrop::<'_>(move _1, move _2);
        return;
    }
}
