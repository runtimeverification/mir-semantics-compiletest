// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 42_usize;
        return;
    }
}

static B: usize = {
    let mut _0: usize;
    let mut _1: &usize;

    bb0: {
        StorageLive(_1);
        _1 = const {alloc1: &usize};
        _0 = (*_1);
        StorageDead(_1);
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let _4: &usize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: &usize;
    scope 1 {
        debug left_val => _3;
        debug right_val => _4;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }

    bb0: {
        _2 = const {alloc2: &usize};
        _12 = const _;
        _1 = (_2, _12);
        _3 = (_1.0: &usize);
        _4 = (_1.1: &usize);
        _7 = (*_3);
        _8 = (*_4);
        _6 = Eq(move _7, move _8);
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<usize, usize>(move _9, _3, _4, move _11) -> unwind continue;
    }

    bb2: {
        return;
    }
}

alloc2 (static: B, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 42_usize;
        _0 = &_1;
        return;
    }
}
