// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/static/refer-to-other-statics-by-value.rs:3:11: 3:16

    bb0: {
        _0 = const 42_usize;             // scope 0 at ui/static/refer-to-other-statics-by-value.rs:3:19: 3:21
        return;                          // scope 0 at ui/static/refer-to-other-statics-by-value.rs:3:1: 3:22
    }
}

static B: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:11: 4:16
    let mut _1: &usize;                  // in scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:19: 4:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:19: 4:20
        _1 = const {alloc1: &usize};     // scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:19: 4:20
                                         // mir::Constant
                                         // + span: ui/static/refer-to-other-statics-by-value.rs:4:19: 4:20
                                         // + literal: Const { ty: &usize, val: Value(Scalar(alloc1)) }
        _0 = (*_1);                      // scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:19: 4:20
        StorageDead(_1);                 // scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:19: 4:20
        return;                          // scope 0 at ui/static/refer-to-other-statics-by-value.rs:4:1: 4:21
    }
}

alloc1 (static: A, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/static/refer-to-other-statics-by-value.rs:6:11: 6:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &usize;                      // in scope 0 at ui/static/refer-to-other-statics-by-value.rs:7:16: 7:17
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _7: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _7;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = const {alloc2: &usize};     // scope 0 at ui/static/refer-to-other-statics-by-value.rs:7:16: 7:17
                                         // mir::Constant
                                         // + span: ui/static/refer-to-other-statics-by-value.rs:7:16: 7:17
                                         // + literal: Const { ty: &usize, val: Value(Scalar(alloc2)) }
        _2 = _3;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/static/refer-to-other-statics-by-value.rs:8:2: 8:2
    }
}

alloc2 (static: B, size: 8, align: 8) {
    2a 00 00 00 00 00 00 00                         │ *.......
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/static/refer-to-other-statics-by-value.rs:7:19: 7:21

    bb0: {
        _1 = const 42_usize;             // scope 0 at ui/static/refer-to-other-statics-by-value.rs:7:19: 7:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
