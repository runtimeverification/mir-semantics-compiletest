// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static B: &A = {
    let mut _0: &A;                      // return place in scope 0 at ui/static/issue-34194.rs:8:11: 8:21
    let _1: &A;                          // in scope 0 at ui/static/issue-34194.rs:8:24: 8:37
    let _2: A;                           // in scope 0 at ui/static/issue-34194.rs:8:25: 8:37
    let mut _3: &();                     // in scope 0 at ui/static/issue-34194.rs:8:32: 8:35
    let _4: &();                         // in scope 0 at ui/static/issue-34194.rs:8:32: 8:35
    let _5: ();                          // in scope 0 at ui/static/issue-34194.rs:8:33: 8:35
    let mut _6: &A;                      // in scope 0 at ui/static/issue-34194.rs:8:24: 8:37

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/static/issue-34194.rs:8:24: 8:37
        _6 = const _;                    // scope 0 at ui/static/issue-34194.rs:8:24: 8:37
                                         // mir::Constant
                                         // + span: ui/static/issue-34194.rs:8:24: 8:37
                                         // + literal: Const { ty: &A, val: Unevaluated(B, [], Some(promoted[0])) }
        _1 = &(*_6);                     // scope 0 at ui/static/issue-34194.rs:8:24: 8:37
        _0 = &(*_1);                     // scope 0 at ui/static/issue-34194.rs:8:24: 8:37
        StorageDead(_1);                 // scope 0 at ui/static/issue-34194.rs:8:36: 8:37
        return;                          // scope 0 at ui/static/issue-34194.rs:8:1: 8:38
    }
}

promoted[0] in B: &A = {
    let mut _0: &A;                      // return place in scope 0 at ui/static/issue-34194.rs:8:24: 8:37
    let mut _1: A;                       // in scope 0 at ui/static/issue-34194.rs:8:25: 8:37
    let mut _2: &();                     // in scope 0 at ui/static/issue-34194.rs:8:32: 8:35
    let mut _3: &();                     // in scope 0 at ui/static/issue-34194.rs:8:32: 8:35
    let mut _4: ();                      // in scope 0 at ui/static/issue-34194.rs:8:33: 8:35

    bb0: {
        _4 = ();                         // scope 0 at ui/static/issue-34194.rs:8:33: 8:35
        _3 = &_4;                        // scope 0 at ui/static/issue-34194.rs:8:32: 8:35
        _2 = &(*_3);                     // scope 0 at ui/static/issue-34194.rs:8:32: 8:35
        _1 = A { a: move _2 };           // scope 0 at ui/static/issue-34194.rs:8:25: 8:37
        _0 = &_1;                        // scope 0 at ui/static/issue-34194.rs:8:24: 8:37
        return;                          // scope 0 at ui/static/issue-34194.rs:8:24: 8:37
    }
}

static C: &A = {
    let mut _0: &A;                      // return place in scope 0 at ui/static/issue-34194.rs:9:11: 9:21
    let _1: &&A;                         // in scope 0 at ui/static/issue-34194.rs:9:24: 9:26
    let _2: &&A;                         // in scope 0 at ui/static/issue-34194.rs:9:25: 9:26
    let mut _3: &A;                      // in scope 0 at ui/static/issue-34194.rs:9:24: 9:26

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/static/issue-34194.rs:9:24: 9:26
        StorageLive(_2);                 // scope 0 at ui/static/issue-34194.rs:9:25: 9:26
        _2 = const {alloc1: &&A};        // scope 0 at ui/static/issue-34194.rs:9:25: 9:26
                                         // mir::Constant
                                         // + span: ui/static/issue-34194.rs:9:25: 9:26
                                         // + literal: Const { ty: &&A, val: Value(Scalar(alloc1)) }
        _1 = &(*_2);                     // scope 0 at ui/static/issue-34194.rs:9:24: 9:26
        _3 = deref_copy (*_1);           // scope 0 at ui/static/issue-34194.rs:9:24: 9:26
        _0 = &(*_3);                     // scope 0 at ui/static/issue-34194.rs:9:24: 9:26
        StorageDead(_1);                 // scope 0 at ui/static/issue-34194.rs:9:25: 9:26
        return;                          // scope 0 at ui/static/issue-34194.rs:9:1: 9:27
    }
}

alloc1 (static: B, size: 8, align: 8) {
    ╾───────alloc5────────╼                         │ ╾──────╼
}

alloc5 (size: 8, align: 8) {
    ╾───────alloc4────────╼                         │ ╾──────╼
}

alloc4 (size: 0, align: 1) {}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/static/issue-34194.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/static/issue-34194.rs:11:13: 11:13
    }
}
