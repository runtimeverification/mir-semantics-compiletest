// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/static/static-extern-type.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/static/static-extern-type.rs:27:13: 27:13
    }
}

fn TransparentType(_1: a::StartFn) -> TransparentType {
    let mut _0: b::TransparentType;      // return place in scope 0 at ui/static/static-extern-type.rs:13:5: 13:31

    bb0: {
        _0 = TransparentType(move _1);   // scope 0 at ui/static/static-extern-type.rs:13:5: 13:31
        return;                          // scope 0 at ui/static/static-extern-type.rs:13:5: 13:31
    }
}

// MIR FOR CTFE
fn TransparentType(_1: a::StartFn) -> TransparentType {
    let mut _0: b::TransparentType;      // return place in scope 0 at ui/static/static-extern-type.rs:13:5: 13:31

    bb0: {
        _0 = TransparentType(move _1);   // scope 0 at ui/static/static-extern-type.rs:13:5: 13:31
        return;                          // scope 0 at ui/static/static-extern-type.rs:13:5: 13:31
    }
}

fn CType(_1: u32, _2: TransparentType) -> CType {
    let mut _0: c::CType;                // return place in scope 0 at ui/static/static-extern-type.rs:21:5: 21:21

    bb0: {
        _0 = CType(move _1, move _2);    // scope 0 at ui/static/static-extern-type.rs:21:5: 21:21
        return;                          // scope 0 at ui/static/static-extern-type.rs:21:5: 21:21
    }
}

// MIR FOR CTFE
fn CType(_1: u32, _2: TransparentType) -> CType {
    let mut _0: c::CType;                // return place in scope 0 at ui/static/static-extern-type.rs:21:5: 21:21

    bb0: {
        _0 = CType(move _1, move _2);    // scope 0 at ui/static/static-extern-type.rs:21:5: 21:21
        return;                          // scope 0 at ui/static/static-extern-type.rs:21:5: 21:21
    }
}
