// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const THREADS: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdio-is-blocking.rs:10:16: 10:21

    bb0: {
        _0 = const 20_usize;             // scope 0 at ui/stdio-is-blocking.rs:10:24: 10:26
        return;                          // scope 0 at ui/stdio-is-blocking.rs:10:1: 10:27
    }
}

const WRITES: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdio-is-blocking.rs:11:15: 11:20

    bb0: {
        _0 = const 100_usize;            // scope 0 at ui/stdio-is-blocking.rs:11:23: 11:26
        return;                          // scope 0 at ui/stdio-is-blocking.rs:11:1: 11:27
    }
}

const WRITE_SIZE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdio-is-blocking.rs:12:19: 12:24
    let mut _1: (usize, bool);           // in scope 0 at ui/stdio-is-blocking.rs:12:27: 12:36

    bb0: {
        _1 = CheckedMul(const 1024_usize, const 32_usize); // scope 0 at ui/stdio-is-blocking.rs:12:27: 12:36
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_usize, const 32_usize) -> bb1; // scope 0 at ui/stdio-is-blocking.rs:12:27: 12:36
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/stdio-is-blocking.rs:12:27: 12:36
        return;                          // scope 0 at ui/stdio-is-blocking.rs:12:1: 12:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdio-is-blocking.rs:14:11: 14:11
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at ui/stdio-is-blocking.rs:15:9: 15:13
    let mut _2: std::env::Args;          // in scope 0 at ui/stdio-is-blocking.rs:15:16: 15:27
    let mut _3: usize;                   // in scope 0 at ui/stdio-is-blocking.rs:16:8: 16:18
    let mut _4: &std::vec::Vec<std::string::String>; // in scope 0 at ui/stdio-is-blocking.rs:16:8: 16:18
    let _5: ();                          // in scope 0 at ui/stdio-is-blocking.rs:17:9: 17:17
    let _6: ();                          // in scope 0 at ui/stdio-is-blocking.rs:19:9: 19:16
    scope 1 {
        debug args => _1;                // in scope 1 at ui/stdio-is-blocking.rs:15:9: 15:13
    }

    bb0: {
        _2 = args() -> bb1;              // scope 0 at ui/stdio-is-blocking.rs:15:16: 15:27
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:15:16: 15:25
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2; // scope 0 at ui/stdio-is-blocking.rs:15:16: 15:47
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:15:28: 15:35
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Args as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_1;                        // scope 1 at ui/stdio-is-blocking.rs:16:8: 16:18
        _3 = Vec::<String>::len(move _4) -> [return: bb3, unwind: bb8]; // scope 1 at ui/stdio-is-blocking.rs:16:8: 16:18
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:16:13: 16:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _3) -> [1: bb4, otherwise: bb5]; // scope 1 at ui/stdio-is-blocking.rs:16:8: 16:23
    }

    bb4: {
        _5 = parent() -> [return: bb10, unwind: bb8]; // scope 1 at ui/stdio-is-blocking.rs:17:9: 17:17
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:17:9: 17:15
                                         // + literal: Const { ty: fn() {parent}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = child() -> [return: bb11, unwind: bb8]; // scope 1 at ui/stdio-is-blocking.rs:19:9: 19:16
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:19:9: 19:14
                                         // + literal: Const { ty: fn() {child}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/stdio-is-blocking.rs:21:1: 21:2
    }

    bb7: {
        return;                          // scope 0 at ui/stdio-is-blocking.rs:21:2: 21:2
    }

    bb8 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/stdio-is-blocking.rs:21:1: 21:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/stdio-is-blocking.rs:14:1: 21:2
    }

    bb10: {
        goto -> bb6;                     // scope 1 at ui/stdio-is-blocking.rs:17:9: 17:17
    }

    bb11: {
        goto -> bb6;                     // scope 1 at ui/stdio-is-blocking.rs:19:9: 19:16
    }
}

fn parent() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdio-is-blocking.rs:23:13: 23:13
    let _1: std::path::PathBuf;          // in scope 0 at ui/stdio-is-blocking.rs:24:9: 24:11
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/stdio-is-blocking.rs:24:14: 24:32
    let mut _4: std::path::PathBuf;      // in scope 0 at ui/stdio-is-blocking.rs:25:32: 25:34
    let _5: &mut std::process::Command;  // in scope 0 at ui/stdio-is-blocking.rs:26:5: 26:28
    let mut _6: &mut std::process::Command; // in scope 0 at ui/stdio-is-blocking.rs:26:5: 26:28
    let mut _8: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/stdio-is-blocking.rs:27:18: 27:30
    let mut _9: &mut std::process::Command; // in scope 0 at ui/stdio-is-blocking.rs:27:18: 27:30
    let mut _10: bool;                   // in scope 0 at ui/stdio-is-blocking.rs:28:5: 28:37
    let mut _11: bool;                   // in scope 0 at ui/stdio-is-blocking.rs:28:13: 28:36
    let mut _12: &std::process::ExitStatus; // in scope 0 at ui/stdio-is-blocking.rs:28:13: 28:36
    let mut _13: !;                      // in scope 0 at ui/stdio-is-blocking.rs:28:5: 28:37
    let mut _14: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: usize;                      // in scope 0 at ui/stdio-is-blocking.rs:29:16: 29:35
    let mut _17: &std::vec::Vec<u8>;     // in scope 0 at ui/stdio-is-blocking.rs:29:16: 29:35
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _33: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _35: usize;                      // in scope 0 at ui/stdio-is-blocking.rs:30:16: 30:35
    let mut _36: &std::vec::Vec<u8>;     // in scope 0 at ui/stdio-is-blocking.rs:30:16: 30:35
    let mut _37: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _42: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _43: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _45: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _46: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _47: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _48: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _49: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _50: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _52: std::slice::Iter<'_, u8>; // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _53: std::slice::Iter<'_, u8>; // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _54: &[u8];                  // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let _55: &[u8];                      // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _56: &std::vec::Vec<u8>;     // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _58: std::option::Option<&u8>; // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _59: &mut std::slice::Iter<'_, u8>; // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _60: &mut std::slice::Iter<'_, u8>; // in scope 0 at ui/stdio-is-blocking.rs:31:17: 31:37
    let mut _61: isize;                  // in scope 0 at ui/stdio-is-blocking.rs:31:5: 33:6
    let mut _63: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _64: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _65: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _68: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _70: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _71: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _73: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _74: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _75: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _76: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _77: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _78: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug me => _1;                  // in scope 1 at ui/stdio-is-blocking.rs:24:9: 24:11
        let mut _3: std::process::Command; // in scope 1 at ui/stdio-is-blocking.rs:25:9: 25:16
        scope 2 {
            debug cmd => _3;             // in scope 2 at ui/stdio-is-blocking.rs:25:9: 25:16
            let _7: std::process::Output; // in scope 2 at ui/stdio-is-blocking.rs:27:9: 27:15
            scope 3 {
                debug output => _7;      // in scope 3 at ui/stdio-is-blocking.rs:27:9: 27:15
                let _19: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _20: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _38: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _39: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _57: std::slice::Iter<'_, u8>; // in scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
                let mut _81: &usize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _82: &usize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _19; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _20; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _25: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _25; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _38; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _39; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _44: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _44; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    debug iter => _57;   // in scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
                    let _62: &u8;        // in scope 8 at ui/stdio-is-blocking.rs:31:9: 31:13
                    scope 9 {
                        debug byte => _62; // in scope 9 at ui/stdio-is-blocking.rs:31:9: 31:13
                        let _66: &u8;    // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _67: &u8;    // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _80: &u8; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 10 {
                            debug left_val => _66; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _67; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _72: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 11 {
                                debug kind => _72; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = current_exe() -> bb1;       // scope 0 at ui/stdio-is-blocking.rs:24:14: 24:32
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:24:14: 24:30
                                         // + literal: Const { ty: fn() -> Result<PathBuf, std::io::Error> {current_exe}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Result::<PathBuf, std::io::Error>::unwrap(move _2) -> bb2; // scope 0 at ui/stdio-is-blocking.rs:24:14: 24:41
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:24:33: 24:39
                                         // + literal: Const { ty: fn(Result<PathBuf, std::io::Error>) -> PathBuf {Result::<PathBuf, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _1;                    // scope 1 at ui/stdio-is-blocking.rs:25:32: 25:34
        _3 = Command::new::<PathBuf>(move _4) -> bb3; // scope 1 at ui/stdio-is-blocking.rs:25:19: 25:35
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:25:19: 25:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(PathBuf) -> Command {Command::new::<PathBuf>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _3;                    // scope 2 at ui/stdio-is-blocking.rs:26:5: 26:28
        _5 = Command::arg::<&str>(move _6, const "run-the-test") -> [return: bb4, unwind: bb28]; // scope 2 at ui/stdio-is-blocking.rs:26:5: 26:28
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:26:9: 26:12
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:26:13: 26:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _9 = &mut _3;                    // scope 2 at ui/stdio-is-blocking.rs:27:18: 27:30
        _8 = Command::output(move _9) -> [return: bb5, unwind: bb28]; // scope 2 at ui/stdio-is-blocking.rs:27:18: 27:30
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:27:22: 27:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = Result::<Output, std::io::Error>::unwrap(move _8) -> [return: bb6, unwind: bb28]; // scope 2 at ui/stdio-is-blocking.rs:27:18: 27:39
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:27:31: 27:37
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = &(_7.0: std::process::ExitStatus); // scope 3 at ui/stdio-is-blocking.rs:28:13: 28:36
        _11 = ExitStatus::success(move _12) -> [return: bb7, unwind: bb27]; // scope 3 at ui/stdio-is-blocking.rs:28:13: 28:36
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:28:27: 28:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = Not(move _11);             // scope 3 at ui/stdio-is-blocking.rs:28:5: 28:37
        switchInt(move _10) -> [0: bb9, otherwise: bb8]; // scope 3 at ui/stdio-is-blocking.rs:28:5: 28:37
    }

    bb8: {
        _13 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb27; // scope 3 at ui/stdio-is-blocking.rs:28:5: 28:37
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:28:5: 28:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _17 = &(_7.2: std::vec::Vec<u8>); // scope 3 at ui/stdio-is-blocking.rs:29:16: 29:35
        _16 = Vec::<u8>::len(move _17) -> [return: bb10, unwind: bb27]; // scope 3 at ui/stdio-is-blocking.rs:29:16: 29:35
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:29:30: 29:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> usize {Vec::<u8>::len}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = &_16;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _82 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(parent, [], Some(promoted[2])) }
        _18 = _82;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _18);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_14.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_14.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = (*_19);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = const 0_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = Eq(move _23, move _24);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _21 = Not(move _22);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb12, otherwise: bb11]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _25 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<usize, usize>(move _27, move _28, move _30, move _32) -> bb27; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb12: {
        _36 = &(_7.1: std::vec::Vec<u8>); // scope 3 at ui/stdio-is-blocking.rs:30:16: 30:35
        _35 = Vec::<u8>::len(move _36) -> [return: bb13, unwind: bb27]; // scope 3 at ui/stdio-is-blocking.rs:30:16: 30:35
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:30:30: 30:33
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> usize {Vec::<u8>::len}, val: Value(<ZST>) }
    }

    bb13: {
        _34 = &_35;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(parent, [], Some(promoted[1])) }
        _37 = _81;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _37);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _38 = (_33.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _39 = (_33.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _42 = (*_38);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _43 = const 65536000_usize;      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _41 = Eq(move _42, move _43);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _40 = Not(move _41);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _40) -> [0: bb15, otherwise: bb14]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _44 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _48;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _39;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = _50;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _45 = core::panicking::assert_failed::<usize, usize>(move _46, move _47, move _49, move _51) -> bb27; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb15: {
        _56 = &(_7.1: std::vec::Vec<u8>); // scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
        _55 = <Vec<u8> as Deref>::deref(move _56) -> [return: bb16, unwind: bb27]; // scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:31:17: 31:37
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb16: {
        _54 = _55;                       // scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
        _53 = core::slice::<impl [u8]>::iter(move _54) -> [return: bb17, unwind: bb27]; // scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:31:31: 31:35
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> std::slice::Iter<'a, u8> {core::slice::<impl [u8]>::iter}, val: Value(<ZST>) }
    }

    bb17: {
        _52 = <std::slice::Iter<'_, u8> as IntoIterator>::into_iter(move _53) -> [return: bb18, unwind: bb27]; // scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:31:17: 31:37
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, u8>) -> <std::slice::Iter<'_, u8> as IntoIterator>::IntoIter {<std::slice::Iter<'_, u8> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb18: {
        _57 = move _52;                  // scope 3 at ui/stdio-is-blocking.rs:31:17: 31:37
        goto -> bb19;                    // scope 8 at ui/stdio-is-blocking.rs:31:5: 33:6
    }

    bb19: {
        _60 = &mut _57;                  // scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
        _59 = &mut (*_60);               // scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
        _58 = <std::slice::Iter<'_, u8> as Iterator>::next(move _59) -> [return: bb20, unwind: bb27]; // scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:31:17: 31:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, u8>) -> Option<<std::slice::Iter<'_, u8> as Iterator>::Item> {<std::slice::Iter<'_, u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb20: {
        _61 = discriminant(_58);         // scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
        switchInt(move _61) -> [0: bb23, 1: bb21, otherwise: bb22]; // scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
    }

    bb21: {
        _62 = ((_58 as Some).0: &u8);    // scope 8 at ui/stdio-is-blocking.rs:31:9: 31:13
        _64 = _62;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _80 = const _;                   // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(parent, [], Some(promoted[0])) }
        _65 = _80;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _63 = (move _64, move _65);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _66 = (_63.0: &u8);              // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _67 = (_63.1: &u8);              // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _70 = (*_66);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _71 = const 97_u8;               // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _69 = Eq(move _70, move _71);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _68 = Not(move _69);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _68) -> [0: bb19, otherwise: bb24]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        unreachable;                     // scope 8 at ui/stdio-is-blocking.rs:31:17: 31:37
    }

    bb23: {
        drop(_7) -> [return: bb25, unwind: bb28]; // scope 2 at ui/stdio-is-blocking.rs:34:1: 34:2
    }

    bb24: {
        _72 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = _66;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _76;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _67;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = _78;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _73 = core::panicking::assert_failed::<u8, u8>(move _74, move _75, move _77, move _79) -> bb27; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_3) -> bb26;                // scope 1 at ui/stdio-is-blocking.rs:34:1: 34:2
    }

    bb26: {
        return;                          // scope 0 at ui/stdio-is-blocking.rs:34:2: 34:2
    }

    bb27 (cleanup): {
        drop(_7) -> bb28;                // scope 2 at ui/stdio-is-blocking.rs:34:1: 34:2
    }

    bb28 (cleanup): {
        drop(_3) -> bb29;                // scope 1 at ui/stdio-is-blocking.rs:34:1: 34:2
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/stdio-is-blocking.rs:23:1: 34:2
    }
}

promoted[0] in parent: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/stdio-is-blocking.rs:32:27: 32:31

    bb0: {
        _1 = const 97_u8;                // scope 0 at ui/stdio-is-blocking.rs:32:27: 32:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in parent: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/stdio-is-blocking.rs:30:37: 30:66
    let mut _2: (usize, bool);           // in scope 0 at ui/stdio-is-blocking.rs:30:37: 30:66
    let mut _3: usize;                   // in scope 0 at ui/stdio-is-blocking.rs:30:37: 30:53
    let mut _4: (usize, bool);           // in scope 0 at ui/stdio-is-blocking.rs:30:37: 30:53

    bb0: {
        _4 = CheckedMul(const _, const _); // scope 0 at ui/stdio-is-blocking.rs:30:37: 30:53
        _3 = move (_4.0: usize);         // scope 0 at ui/stdio-is-blocking.rs:30:37: 30:53
        _2 = CheckedMul(_3, const _);    // scope 0 at ui/stdio-is-blocking.rs:30:37: 30:66
        _1 = move (_2.0: usize);         // scope 0 at ui/stdio-is-blocking.rs:30:37: 30:66
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in parent: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/stdio-is-blocking.rs:29:37: 29:38

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/stdio-is-blocking.rs:29:37: 29:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn child() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdio-is-blocking.rs:36:12: 36:12
    let _1: std::vec::Vec<std::thread::JoinHandle<()>>; // in scope 0 at ui/stdio-is-blocking.rs:37:9: 37:16
    let mut _2: std::iter::Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>; // in scope 0 at ui/stdio-is-blocking.rs:37:19: 44:7
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/stdio-is-blocking.rs:37:19: 37:31
    let mut _4: [closure@ui/stdio-is-blocking.rs:37:36: 37:39]; // in scope 0 at ui/stdio-is-blocking.rs:37:36: 44:6
    let mut _5: std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 0 at ui/stdio-is-blocking.rs:46:19: 46:26
    let mut _6: std::vec::Vec<std::thread::JoinHandle<()>>; // in scope 0 at ui/stdio-is-blocking.rs:46:19: 46:26
    let mut _8: std::option::Option<std::thread::JoinHandle<()>>; // in scope 0 at ui/stdio-is-blocking.rs:46:19: 46:26
    let mut _9: &mut std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 0 at ui/stdio-is-blocking.rs:46:19: 46:26
    let mut _10: &mut std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 0 at ui/stdio-is-blocking.rs:46:19: 46:26
    let mut _11: isize;                  // in scope 0 at ui/stdio-is-blocking.rs:46:5: 48:6
    let _13: ();                         // in scope 0 at ui/stdio-is-blocking.rs:47:9: 47:31
    let mut _14: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/stdio-is-blocking.rs:47:9: 47:22
    let mut _15: std::thread::JoinHandle<()>; // in scope 0 at ui/stdio-is-blocking.rs:47:9: 47:15
    scope 1 {
        debug threads => _1;             // in scope 1 at ui/stdio-is-blocking.rs:37:9: 37:16
        let mut _7: std::vec::IntoIter<std::thread::JoinHandle<()>>; // in scope 1 at ui/stdio-is-blocking.rs:46:19: 46:26
        scope 2 {
            debug iter => _7;            // in scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
            let _12: std::thread::JoinHandle<()>; // in scope 2 at ui/stdio-is-blocking.rs:46:9: 46:15
            scope 3 {
                debug thread => _12;     // in scope 3 at ui/stdio-is-blocking.rs:46:9: 46:15
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: const _ }; // scope 0 at ui/stdio-is-blocking.rs:37:19: 37:31
        _2 = <std::ops::Range<usize> as Iterator>::map::<JoinHandle<()>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>(move _3, move _4) -> bb1; // scope 0 at ui/stdio-is-blocking.rs:37:19: 44:7
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:37:32: 37:35
                                         // + literal: Const { ty: fn(std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]) -> Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]> {<std::ops::Range<usize> as Iterator>::map::<JoinHandle<()>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]> as Iterator>::collect::<Vec<JoinHandle<()>>>(move _2) -> bb2; // scope 0 at ui/stdio-is-blocking.rs:37:19: 44:27
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:44:8: 44:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>) -> Vec<JoinHandle<()>> {<Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]> as Iterator>::collect::<Vec<JoinHandle<()>>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _1;                    // scope 1 at ui/stdio-is-blocking.rs:46:19: 46:26
        _5 = <Vec<JoinHandle<()>> as IntoIterator>::into_iter(move _6) -> bb3; // scope 1 at ui/stdio-is-blocking.rs:46:19: 46:26
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:46:19: 46:26
                                         // + literal: Const { ty: fn(Vec<JoinHandle<()>>) -> <Vec<JoinHandle<()>> as IntoIterator>::IntoIter {<Vec<JoinHandle<()>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = move _5;                    // scope 1 at ui/stdio-is-blocking.rs:46:19: 46:26
        goto -> bb4;                     // scope 2 at ui/stdio-is-blocking.rs:46:5: 48:6
    }

    bb4: {
        _10 = &mut _7;                   // scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
        _9 = &mut (*_10);                // scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
        _8 = <std::vec::IntoIter<JoinHandle<()>> as Iterator>::next(move _9) -> [return: bb5, unwind: bb11]; // scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:46:19: 46:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<JoinHandle<()>>) -> Option<<std::vec::IntoIter<JoinHandle<()>> as Iterator>::Item> {<std::vec::IntoIter<JoinHandle<()>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = discriminant(_8);          // scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
        switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
    }

    bb6: {
        _12 = move ((_8 as Some).0: std::thread::JoinHandle<()>); // scope 2 at ui/stdio-is-blocking.rs:46:9: 46:15
        _15 = move _12;                  // scope 3 at ui/stdio-is-blocking.rs:47:9: 47:15
        _14 = JoinHandle::<()>::join(move _15) -> [return: bb9, unwind: bb11]; // scope 3 at ui/stdio-is-blocking.rs:47:9: 47:22
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:47:16: 47:20
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 2 at ui/stdio-is-blocking.rs:46:19: 46:26
    }

    bb8: {
        drop(_7) -> bb10;                // scope 1 at ui/stdio-is-blocking.rs:48:5: 48:6
    }

    bb9: {
        _13 = Result::<(), Box<dyn Any + Send>>::unwrap(move _14) -> [return: bb13, unwind: bb11]; // scope 3 at ui/stdio-is-blocking.rs:47:9: 47:31
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:47:23: 47:29
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) {Result::<(), Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/stdio-is-blocking.rs:49:2: 49:2
    }

    bb11 (cleanup): {
        drop(_7) -> bb12;                // scope 1 at ui/stdio-is-blocking.rs:48:5: 48:6
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/stdio-is-blocking.rs:36:1: 49:2
    }

    bb13: {
        goto -> bb4;                     // scope 3 at ui/stdio-is-blocking.rs:47:9: 47:31
    }
}

fn child::{closure#0}(_1: &mut [closure@ui/stdio-is-blocking.rs:37:36: 37:39], _2: usize) -> JoinHandle<()> {
    let mut _0: std::thread::JoinHandle<()>; // return place in scope 0 at ui/stdio-is-blocking.rs:37:40: 37:40
    let mut _3: [closure@ui/stdio-is-blocking.rs:38:23: 38:25]; // in scope 0 at ui/stdio-is-blocking.rs:38:23: 43:10

    bb0: {
        _0 = spawn::<[closure@ui/stdio-is-blocking.rs:38:23: 38:25], ()>(move _3) -> bb1; // scope 0 at ui/stdio-is-blocking.rs:38:9: 43:11
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:38:9: 38:22
                                         // + literal: Const { ty: fn([closure@ui/stdio-is-blocking.rs:38:23: 38:25]) -> JoinHandle<()> {spawn::<[closure@ui/stdio-is-blocking.rs:38:23: 38:25], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/stdio-is-blocking.rs:44:6: 44:6
    }
}

fn child::{closure#0}::{closure#0}(_1: [closure@ui/stdio-is-blocking.rs:38:23: 38:25]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/stdio-is-blocking.rs:38:26: 38:26
    let _2: [u8; 32768];                 // in scope 0 at ui/stdio-is-blocking.rs:39:17: 39:20
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/stdio-is-blocking.rs:40:22: 40:31
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/stdio-is-blocking.rs:40:22: 40:31
    let mut _6: std::option::Option<usize>; // in scope 0 at ui/stdio-is-blocking.rs:40:22: 40:31
    let mut _7: &mut std::ops::Range<usize>; // in scope 0 at ui/stdio-is-blocking.rs:40:22: 40:31
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/stdio-is-blocking.rs:40:22: 40:31
    let mut _9: isize;                   // in scope 0 at ui/stdio-is-blocking.rs:40:13: 42:14
    let _10: ();                         // in scope 0 at ui/stdio-is-blocking.rs:41:17: 41:32
    let mut _11: &[u8];                  // in scope 0 at ui/stdio-is-blocking.rs:41:27: 41:31
    let mut _12: &[u8; 32768];           // in scope 0 at ui/stdio-is-blocking.rs:41:27: 41:31
    let _13: &[u8; 32768];               // in scope 0 at ui/stdio-is-blocking.rs:41:27: 41:31
    scope 1 {
        debug buf => _2;                 // in scope 1 at ui/stdio-is-blocking.rs:39:17: 39:20
        let mut _5: std::ops::Range<usize>; // in scope 1 at ui/stdio-is-blocking.rs:40:22: 40:31
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
        }
    }

    bb0: {
        _2 = [const 97_u8; 32768];       // scope 0 at ui/stdio-is-blocking.rs:39:23: 39:41
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const _ }; // scope 1 at ui/stdio-is-blocking.rs:40:22: 40:31
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> bb1; // scope 1 at ui/stdio-is-blocking.rs:40:22: 40:31
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:40:22: 40:31
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 1 at ui/stdio-is-blocking.rs:40:22: 40:31
        goto -> bb2;                     // scope 2 at ui/stdio-is-blocking.rs:40:13: 42:14
    }

    bb2: {
        _8 = &mut _5;                    // scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
        _7 = &mut (*_8);                 // scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
        _6 = <std::ops::Range<usize> as Iterator>::next(move _7) -> bb3; // scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:40:22: 40:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
    }

    bb4: {
        _13 = &_2;                       // scope 2 at ui/stdio-is-blocking.rs:41:27: 41:31
        _12 = _13;                       // scope 2 at ui/stdio-is-blocking.rs:41:27: 41:31
        _11 = move _12 as &[u8] (Pointer(Unsize)); // scope 2 at ui/stdio-is-blocking.rs:41:27: 41:31
        _10 = write_all(move _11) -> bb2; // scope 2 at ui/stdio-is-blocking.rs:41:17: 41:32
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:41:17: 41:26
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) {write_all}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 2 at ui/stdio-is-blocking.rs:40:22: 40:31
    }

    bb6: {
        return;                          // scope 0 at ui/stdio-is-blocking.rs:43:10: 43:10
    }
}

child::{closure#0}::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/stdio-is-blocking.rs:39:30: 39:40

    bb0: {
        _0 = const _;                    // scope 0 at ui/stdio-is-blocking.rs:39:30: 39:40
        return;                          // scope 0 at ui/stdio-is-blocking.rs:39:30: 39:40
    }
}

fn write_all(_1: &[u8]) -> () {
    debug buf => _1;                     // in scope 0 at ui/stdio-is-blocking.rs:52:14: 52:17
    let mut _0: ();                      // return place in scope 0 at ui/stdio-is-blocking.rs:52:26: 52:26
    let mut _2: std::fs::File;           // in scope 0 at ui/stdio-is-blocking.rs:57:9: 57:17
    let mut _4: &mut std::fs::File;      // in scope 0 at ui/stdio-is-blocking.rs:58:15: 58:34
    let mut _5: &[u8];                   // in scope 0 at ui/stdio-is-blocking.rs:58:30: 58:33
    let _6: ();                          // in scope 0 at ui/stdio-is-blocking.rs:59:5: 59:22
    let mut _7: std::fs::File;           // in scope 0 at ui/stdio-is-blocking.rs:59:17: 59:21
    let _8: ();                          // in scope 0 at ui/stdio-is-blocking.rs:60:5: 60:17
    let mut _9: std::result::Result<(), std::io::Error>; // in scope 0 at ui/stdio-is-blocking.rs:60:5: 60:8
    let mut _10: bool;                   // in scope 0 at ui/stdio-is-blocking.rs:61:1: 61:2
    let mut _11: bool;                   // in scope 0 at ui/stdio-is-blocking.rs:61:1: 61:2
    scope 1 {
        debug file => _2;                // in scope 1 at ui/stdio-is-blocking.rs:57:9: 57:17
        let _3: std::result::Result<(), std::io::Error>; // in scope 1 at ui/stdio-is-blocking.rs:58:9: 58:12
        scope 3 {
            debug res => _3;             // in scope 3 at ui/stdio-is-blocking.rs:58:9: 58:12
        }
    }
    scope 2 {
    }

    bb0: {
        _11 = const false;               // scope 0 at ui/stdio-is-blocking.rs:57:9: 57:17
        _10 = const false;               // scope 0 at ui/stdio-is-blocking.rs:57:9: 57:17
        _11 = const true;                // scope 2 at ui/stdio-is-blocking.rs:57:29: 57:49
        _2 = <File as std::os::fd::FromRawFd>::from_raw_fd(const 1_i32) -> bb1; // scope 2 at ui/stdio-is-blocking.rs:57:29: 57:49
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:57:29: 57:46
                                         // + literal: Const { ty: unsafe fn(i32) -> File {<File as std::os::fd::FromRawFd>::from_raw_fd}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _2;                    // scope 1 at ui/stdio-is-blocking.rs:58:15: 58:34
        _5 = _1;                         // scope 1 at ui/stdio-is-blocking.rs:58:30: 58:33
        _3 = <File as std::io::Write>::write_all(move _4, move _5) -> [return: bb2, unwind: bb9]; // scope 1 at ui/stdio-is-blocking.rs:58:15: 58:34
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:58:20: 58:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut File, &'b [u8]) -> Result<(), std::io::Error> {<File as std::io::Write>::write_all}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const true;                // scope 1 at ui/stdio-is-blocking.rs:58:33: 58:34
        _11 = const false;               // scope 3 at ui/stdio-is-blocking.rs:59:17: 59:21
        _7 = move _2;                    // scope 3 at ui/stdio-is-blocking.rs:59:17: 59:21
        _6 = std::mem::forget::<File>(move _7) -> [return: bb3, unwind: bb7]; // scope 3 at ui/stdio-is-blocking.rs:59:5: 59:22
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:59:5: 59:16
                                         // + literal: Const { ty: fn(File) {std::mem::forget::<File>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const false;               // scope 3 at ui/stdio-is-blocking.rs:60:5: 60:8
        _9 = move _3;                    // scope 3 at ui/stdio-is-blocking.rs:60:5: 60:8
        _8 = Result::<(), std::io::Error>::unwrap(move _9) -> [return: bb4, unwind: bb7]; // scope 3 at ui/stdio-is-blocking.rs:60:5: 60:17
                                         // mir::Constant
                                         // + span: ui/stdio-is-blocking.rs:60:9: 60:15
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) {Result::<(), std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = const false;               // scope 1 at ui/stdio-is-blocking.rs:61:1: 61:2
        _11 = const false;               // scope 0 at ui/stdio-is-blocking.rs:61:1: 61:2
        return;                          // scope 0 at ui/stdio-is-blocking.rs:61:2: 61:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/stdio-is-blocking.rs:52:1: 61:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb9;                 // scope 1 at ui/stdio-is-blocking.rs:61:1: 61:2
    }

    bb7 (cleanup): {
        switchInt(_10) -> [0: bb9, otherwise: bb6]; // scope 1 at ui/stdio-is-blocking.rs:61:1: 61:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/stdio-is-blocking.rs:61:1: 61:2
    }

    bb9 (cleanup): {
        switchInt(_11) -> [0: bb5, otherwise: bb8]; // scope 0 at ui/stdio-is-blocking.rs:61:1: 61:2
    }
}
