// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const THREADS: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 20_usize;
        return;
    }
}

const WRITES: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 100_usize;
        return;
    }
}

const WRITE_SIZE: usize = {
    let mut _0: usize;
    let mut _1: (usize, bool);

    bb0: {
        _1 = CheckedMul(const 1024_usize, const 32_usize);
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 1024_usize, const 32_usize) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::string::String>;
    let mut _2: std::env::Args;
    let mut _3: usize;
    let mut _4: &std::vec::Vec<std::string::String>;
    let _5: ();
    let _6: ();
    scope 1 {
        debug args => _1;
    }

    bb0: {
        _2 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_1;
        _3 = Vec::<String>::len(move _4) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        switchInt(move _3) -> [1: bb4, otherwise: bb5];
    }

    bb4: {
        _5 = parent() -> [return: bb10, unwind: bb8];
    }

    bb5: {
        _6 = child() -> [return: bb11, unwind: bb8];
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        goto -> bb6;
    }

    bb11: {
        goto -> bb6;
    }
}

fn parent() -> () {
    let mut _0: ();
    let _1: std::path::PathBuf;
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _4: std::path::PathBuf;
    let _5: &mut std::process::Command;
    let mut _6: &mut std::process::Command;
    let mut _8: std::result::Result<std::process::Output, std::io::Error>;
    let mut _9: &mut std::process::Command;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: &std::process::ExitStatus;
    let mut _13: !;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let _16: usize;
    let mut _17: &std::vec::Vec<u8>;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: usize;
    let mut _23: usize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&usize, &usize);
    let mut _28: &usize;
    let _29: usize;
    let mut _30: &std::vec::Vec<u8>;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: usize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: std::slice::Iter<'_, u8>;
    let mut _41: std::slice::Iter<'_, u8>;
    let mut _42: &[u8];
    let _43: &[u8];
    let mut _44: &std::vec::Vec<u8>;
    let mut _46: std::option::Option<&u8>;
    let mut _47: &mut std::slice::Iter<'_, u8>;
    let mut _48: isize;
    let mut _50: (&u8, &u8);
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: u8;
    let mut _56: u8;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug me => _1;
        let mut _3: std::process::Command;
        scope 2 {
            debug cmd => _3;
            let _7: std::process::Output;
            scope 3 {
                debug output => _7;
                let _18: &usize;
                let _19: &usize;
                let _31: &usize;
                let _32: &usize;
                let mut _45: std::slice::Iter<'_, u8>;
                let mut _61: &usize;
                let mut _62: &usize;
                scope 4 {
                    debug left_val => _18;
                    debug right_val => _19;
                    let _24: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _24;
                    }
                }
                scope 6 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _37: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _37;
                    }
                }
                scope 8 {
                    debug iter => _45;
                    let _49: &u8;
                    scope 9 {
                        debug byte => _49;
                        let _51: &u8;
                        let _52: &u8;
                        let mut _60: &u8;
                        scope 10 {
                            debug left_val => _51;
                            debug right_val => _52;
                            let _57: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _57;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = current_exe() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Result::<PathBuf, std::io::Error>::unwrap(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = move _1;
        _3 = Command::new::<PathBuf>(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &mut _3;
        _5 = Command::arg::<&str>(move _6, const "run-the-test") -> [return: bb4, unwind: bb28];
    }

    bb4: {
        _9 = &mut _3;
        _8 = Command::output(move _9) -> [return: bb5, unwind: bb28];
    }

    bb5: {
        _7 = Result::<Output, std::io::Error>::unwrap(move _8) -> [return: bb6, unwind: bb28];
    }

    bb6: {
        _12 = &(_7.0: std::process::ExitStatus);
        _11 = ExitStatus::success(move _12) -> [return: bb7, unwind: bb27];
    }

    bb7: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _13 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb27;
    }

    bb9: {
        _17 = &(_7.2: std::vec::Vec<u8>);
        _16 = Vec::<u8>::len(move _17) -> [return: bb10, unwind: bb27];
    }

    bb10: {
        _15 = &_16;
        _62 = const _;
        _14 = (move _15, _62);
        _18 = (_14.0: &usize);
        _19 = (_14.1: &usize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<usize, usize>(move _24, _18, _19, move _26) -> bb27;
    }

    bb12: {
        _30 = &(_7.1: std::vec::Vec<u8>);
        _29 = Vec::<u8>::len(move _30) -> [return: bb13, unwind: bb27];
    }

    bb13: {
        _28 = &_29;
        _61 = const _;
        _27 = (move _28, _61);
        _31 = (_27.0: &usize);
        _32 = (_27.1: &usize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<usize, usize>(move _37, _31, _32, move _39) -> bb27;
    }

    bb15: {
        _44 = &(_7.1: std::vec::Vec<u8>);
        _43 = <Vec<u8> as Deref>::deref(move _44) -> [return: bb16, unwind: bb27];
    }

    bb16: {
        _42 = _43;
        _41 = core::slice::<impl [u8]>::iter(move _42) -> [return: bb17, unwind: bb27];
    }

    bb17: {
        _40 = <std::slice::Iter<'_, u8> as IntoIterator>::into_iter(move _41) -> [return: bb18, unwind: bb27];
    }

    bb18: {
        _45 = move _40;
        goto -> bb19;
    }

    bb19: {
        _47 = &mut _45;
        _46 = <std::slice::Iter<'_, u8> as Iterator>::next(_47) -> [return: bb20, unwind: bb27];
    }

    bb20: {
        _48 = discriminant(_46);
        switchInt(move _48) -> [0: bb23, 1: bb21, otherwise: bb22];
    }

    bb21: {
        _49 = ((_46 as Some).0: &u8);
        _60 = const _;
        _50 = (_49, _60);
        _51 = (_50.0: &u8);
        _52 = (_50.1: &u8);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb19, otherwise: bb24];
    }

    bb22: {
        unreachable;
    }

    bb23: {
        drop(_7) -> [return: bb25, unwind: bb28];
    }

    bb24: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<u8, u8>(move _57, _51, _52, move _59) -> bb27;
    }

    bb25: {
        drop(_3) -> [return: bb26, unwind continue];
    }

    bb26: {
        return;
    }

    bb27 (cleanup): {
        drop(_7) -> [return: bb28, unwind terminate];
    }

    bb28 (cleanup): {
        drop(_3) -> [return: bb29, unwind terminate];
    }

    bb29 (cleanup): {
        resume;
    }
}

promoted[0] in parent: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 97_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in parent: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = Mul(const _, const _);
        _1 = Mul(move _2, const _);
        _0 = &_1;
        return;
    }
}

promoted[2] in parent: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn child() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::thread::JoinHandle<()>>;
    let mut _2: std::iter::Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::vec::IntoIter<std::thread::JoinHandle<()>>;
    let mut _5: std::vec::Vec<std::thread::JoinHandle<()>>;
    let mut _7: std::option::Option<std::thread::JoinHandle<()>>;
    let mut _8: &mut std::vec::IntoIter<std::thread::JoinHandle<()>>;
    let mut _9: isize;
    let _11: ();
    let mut _12: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    scope 1 {
        debug threads => _1;
        let mut _6: std::vec::IntoIter<std::thread::JoinHandle<()>>;
        scope 2 {
            debug iter => _6;
            let _10: std::thread::JoinHandle<()>;
            scope 3 {
                debug thread => _10;
            }
        }
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _2 = <std::ops::Range<usize> as Iterator>::map::<JoinHandle<()>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]>(move _3, const ZeroSized: [closure@ui/stdio-is-blocking.rs:37:36: 37:39]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Map<std::ops::Range<usize>, [closure@ui/stdio-is-blocking.rs:37:36: 37:39]> as Iterator>::collect::<Vec<JoinHandle<()>>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = move _1;
        _4 = <Vec<JoinHandle<()>> as IntoIterator>::into_iter(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = move _4;
        goto -> bb4;
    }

    bb4: {
        _8 = &mut _6;
        _7 = <std::vec::IntoIter<JoinHandle<()>> as Iterator>::next(_8) -> [return: bb5, unwind: bb11];
    }

    bb5: {
        _9 = discriminant(_7);
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7];
    }

    bb6: {
        _10 = move ((_7 as Some).0: std::thread::JoinHandle<()>);
        _12 = JoinHandle::<()>::join(move _10) -> [return: bb9, unwind: bb11];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        drop(_6) -> [return: bb10, unwind continue];
    }

    bb9: {
        _11 = Result::<(), Box<dyn Any + Send>>::unwrap(move _12) -> [return: bb13, unwind: bb11];
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_6) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        goto -> bb4;
    }
}

fn child::{closure#0}(_1: &mut [closure@ui/stdio-is-blocking.rs:37:36: 37:39], _2: usize) -> JoinHandle<()> {
    let mut _0: std::thread::JoinHandle<()>;

    bb0: {
        _0 = spawn::<[closure@ui/stdio-is-blocking.rs:38:23: 38:25], ()>(const ZeroSized: [closure@ui/stdio-is-blocking.rs:38:23: 38:25]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn child::{closure#0}::{closure#0}(_1: [closure@ui/stdio-is-blocking.rs:38:23: 38:25]) -> () {
    let mut _0: ();
    let _2: [u8; 32768];
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _6: std::option::Option<usize>;
    let mut _7: &mut std::ops::Range<usize>;
    let mut _8: isize;
    let _9: ();
    let mut _10: &[u8];
    let _11: &[u8; 32768];
    scope 1 {
        debug buf => _2;
        let mut _5: std::ops::Range<usize>;
        scope 2 {
            debug iter => _5;
        }
    }

    bb0: {
        _2 = [const 97_u8; 32768];
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = move _3;
        goto -> bb2;
    }

    bb2: {
        _7 = &mut _5;
        _6 = <std::ops::Range<usize> as Iterator>::next(_7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _11 = &_2;
        _10 = _11 as &[u8] (Pointer(Unsize));
        _9 = write_all(move _10) -> [return: bb2, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }
}

child::{closure#0}::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn write_all(_1: &[u8]) -> () {
    debug buf => _1;
    let mut _0: ();
    let mut _2: std::fs::File;
    let mut _4: &mut std::fs::File;
    let _5: ();
    let mut _6: std::fs::File;
    let _7: ();
    let mut _8: std::result::Result<(), std::io::Error>;
    let mut _9: bool;
    let mut _10: bool;
    scope 1 {
        debug file => _2;
        let _3: std::result::Result<(), std::io::Error>;
        scope 3 {
            debug res => _3;
        }
    }
    scope 2 {
    }

    bb0: {
        _10 = const false;
        _9 = const false;
        _10 = const true;
        _2 = <File as std::os::fd::FromRawFd>::from_raw_fd(const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _2;
        _3 = <File as std::io::Write>::write_all(move _4, _1) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _9 = const true;
        _10 = const false;
        _6 = move _2;
        _5 = std::mem::forget::<File>(move _6) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = const false;
        _8 = move _3;
        _7 = Result::<(), std::io::Error>::unwrap(move _8) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _9 = const false;
        _10 = const false;
        return;
    }

    bb5 (cleanup): {
        resume;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        switchInt(_9) -> [0: bb9, otherwise: bb6];
    }

    bb8 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_10) -> [0: bb5, otherwise: bb8];
    }
}
