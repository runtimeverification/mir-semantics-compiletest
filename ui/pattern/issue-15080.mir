// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/issue-15080.rs:3:11: 3:11
    let mut _1: &[i32];                  // in scope 0 at ui/pattern/issue-15080.rs:4:9: 4:14
    let mut _2: &[i32; 4];               // in scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
    let _3: &[i32; 4];                   // in scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
    let mut _5: &[i32];                  // in scope 0 at ui/pattern/issue-15080.rs:8:13: 19:10
    let mut _6: usize;                   // in scope 0 at ui/pattern/issue-15080.rs:17:13: 17:15
    let mut _7: usize;                   // in scope 0 at ui/pattern/issue-15080.rs:17:13: 17:15
    let mut _8: bool;                    // in scope 0 at ui/pattern/issue-15080.rs:17:13: 17:15
    let mut _9: usize;                   // in scope 0 at ui/pattern/issue-15080.rs:13:13: 13:31
    let mut _10: usize;                  // in scope 0 at ui/pattern/issue-15080.rs:13:13: 13:31
    let mut _11: bool;                   // in scope 0 at ui/pattern/issue-15080.rs:13:13: 13:31
    let mut _12: usize;                  // in scope 0 at ui/pattern/issue-15080.rs:9:13: 9:37
    let mut _13: usize;                  // in scope 0 at ui/pattern/issue-15080.rs:9:13: 9:37
    let mut _14: bool;                   // in scope 0 at ui/pattern/issue-15080.rs:9:13: 9:37
    let _17: ();                         // in scope 0 at ui/pattern/issue-15080.rs:10:17: 10:31
    let mut _18: &mut std::vec::Vec<i32>; // in scope 0 at ui/pattern/issue-15080.rs:10:17: 10:31
    let mut _19: i32;                    // in scope 0 at ui/pattern/issue-15080.rs:10:29: 10:30
    let _22: ();                         // in scope 0 at ui/pattern/issue-15080.rs:14:17: 14:31
    let mut _23: &mut std::vec::Vec<i32>; // in scope 0 at ui/pattern/issue-15080.rs:14:17: 14:31
    let mut _24: i32;                    // in scope 0 at ui/pattern/issue-15080.rs:14:29: 14:30
    let mut _25: (&std::vec::Vec<i32>, &[i32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &[i32; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: &[i32; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &[i32; 2];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &[i32; 2];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: &[i32; 4];              // in scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/pattern/issue-15080.rs:4:9: 4:14
        let mut _4: std::vec::Vec<i32>;  // in scope 1 at ui/pattern/issue-15080.rs:6:9: 6:19
        scope 2 {
            debug result => _4;          // in scope 2 at ui/pattern/issue-15080.rs:6:9: 6:19
            let _15: i32;                // in scope 2 at ui/pattern/issue-15080.rs:9:17: 9:18
            let _16: &[i32];             // in scope 2 at ui/pattern/issue-15080.rs:9:23: 9:31
            let _20: i32;                // in scope 2 at ui/pattern/issue-15080.rs:13:14: 13:15
            let _21: &[i32];             // in scope 2 at ui/pattern/issue-15080.rs:13:17: 13:25
            let _28: &std::vec::Vec<i32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _29: &[i32; 2];          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _42: &[i32; 2];      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug n => _15;          // in scope 3 at ui/pattern/issue-15080.rs:9:17: 9:18
                debug rest => _16;       // in scope 3 at ui/pattern/issue-15080.rs:9:23: 9:31
            }
            scope 4 {
                debug n => _20;          // in scope 4 at ui/pattern/issue-15080.rs:13:14: 13:15
                debug rest => _21;       // in scope 4 at ui/pattern/issue-15080.rs:13:17: 13:25
            }
            scope 5 {
                debug left_val => _28;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _29;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _34: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _34;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _43 = const _;                   // scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
                                         // mir::Constant
                                         // + span: ui/pattern/issue-15080.rs:4:23: 4:36
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[1])) }
        _3 = _43;                        // scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
        _2 = _3;                         // scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
        _1 = move _2 as &[i32] (Pointer(Unsize)); // scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
        _4 = Vec::<i32>::new() -> bb1;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = Len((*_1));                // scope 2 at ui/pattern/issue-15080.rs:9:13: 9:37
        _13 = const 3_usize;             // scope 2 at ui/pattern/issue-15080.rs:9:13: 9:37
        _14 = Ge(move _12, move _13);    // scope 2 at ui/pattern/issue-15080.rs:9:13: 9:37
        switchInt(move _14) -> [0: bb4, otherwise: bb2]; // scope 2 at ui/pattern/issue-15080.rs:9:13: 9:37
    }

    bb2: {
        switchInt((*_1)[0 of 3]) -> [1: bb3, otherwise: bb4]; // scope 2 at ui/pattern/issue-15080.rs:8:13: 8:21
    }

    bb3: {
        switchInt((*_1)[2 of 3]) -> [3: bb8, otherwise: bb4]; // scope 2 at ui/pattern/issue-15080.rs:8:13: 8:21
    }

    bb4: {
        _9 = Len((*_1));                 // scope 2 at ui/pattern/issue-15080.rs:13:13: 13:31
        _10 = const 1_usize;             // scope 2 at ui/pattern/issue-15080.rs:13:13: 13:31
        _11 = Ge(move _9, move _10);     // scope 2 at ui/pattern/issue-15080.rs:13:13: 13:31
        switchInt(move _11) -> [0: bb5, otherwise: bb10]; // scope 2 at ui/pattern/issue-15080.rs:13:13: 13:31
    }

    bb5: {
        _6 = Len((*_1));                 // scope 2 at ui/pattern/issue-15080.rs:17:13: 17:15
        _7 = const 0_usize;              // scope 2 at ui/pattern/issue-15080.rs:17:13: 17:15
        _8 = Eq(move _6, move _7);       // scope 2 at ui/pattern/issue-15080.rs:17:13: 17:15
        switchInt(move _8) -> [0: bb7, otherwise: bb6]; // scope 2 at ui/pattern/issue-15080.rs:17:13: 17:15
    }

    bb6: {
        _26 = &_4;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _27 = _42;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &std::vec::Vec<i32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &[i32; 2]);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = <Vec<i32> as PartialEq<[i32; 2]>>::eq(move _32, move _33) -> [return: bb13, unwind: bb17]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 2]) -> bool {<Vec<i32> as PartialEq<[i32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 2 at ui/pattern/issue-15080.rs:8:19: 8:21
    }

    bb8: {
        _15 = (*_1)[1 of 3];             // scope 2 at ui/pattern/issue-15080.rs:9:17: 9:18
        _16 = &(*_1)[3:];                // scope 2 at ui/pattern/issue-15080.rs:9:23: 9:31
        _18 = &mut _4;                   // scope 3 at ui/pattern/issue-15080.rs:10:17: 10:31
        _19 = _15;                       // scope 3 at ui/pattern/issue-15080.rs:10:29: 10:30
        _17 = Vec::<i32>::push(move _18, move _19) -> [return: bb9, unwind: bb17]; // scope 3 at ui/pattern/issue-15080.rs:10:17: 10:31
                                         // mir::Constant
                                         // + span: ui/pattern/issue-15080.rs:10:24: 10:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb9: {
        _5 = _16;                        // scope 3 at ui/pattern/issue-15080.rs:11:17: 11:21
        goto -> bb12;                    // scope 2 at ui/pattern/issue-15080.rs:12:13: 12:14
    }

    bb10: {
        _20 = (*_1)[0 of 1];             // scope 2 at ui/pattern/issue-15080.rs:13:14: 13:15
        _21 = &(*_1)[1:];                // scope 2 at ui/pattern/issue-15080.rs:13:17: 13:25
        _23 = &mut _4;                   // scope 4 at ui/pattern/issue-15080.rs:14:17: 14:31
        _24 = _20;                       // scope 4 at ui/pattern/issue-15080.rs:14:29: 14:30
        _22 = Vec::<i32>::push(move _23, move _24) -> [return: bb11, unwind: bb17]; // scope 4 at ui/pattern/issue-15080.rs:14:17: 14:31
                                         // mir::Constant
                                         // + span: ui/pattern/issue-15080.rs:14:24: 14:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb11: {
        _5 = _21;                        // scope 4 at ui/pattern/issue-15080.rs:15:17: 15:21
        goto -> bb12;                    // scope 2 at ui/pattern/issue-15080.rs:16:13: 16:14
    }

    bb12: {
        _1 = move _5;                    // scope 2 at ui/pattern/issue-15080.rs:8:9: 19:10
        goto -> bb1;                     // scope 2 at ui/pattern/issue-15080.rs:7:5: 20:6
    }

    bb13: {
        _30 = Not(move _31);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _34 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<Vec<i32>, [i32; 2]>(move _36, move _37, move _39, move _41) -> bb17; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 2]>}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_4) -> bb16;                // scope 1 at ui/pattern/issue-15080.rs:22:1: 22:2
    }

    bb16: {
        return;                          // scope 0 at ui/pattern/issue-15080.rs:22:2: 22:2
    }

    bb17 (cleanup): {
        drop(_4) -> bb18;                // scope 1 at ui/pattern/issue-15080.rs:22:1: 22:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/pattern/issue-15080.rs:3:1: 22:2
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 2];                // in scope 0 at ui/pattern/issue-15080.rs:21:24: 21:30

    bb0: {
        _1 = [const 2_i32, const 4_i32]; // scope 0 at ui/pattern/issue-15080.rs:21:24: 21:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
    let mut _1: [i32; 4];                // in scope 0 at ui/pattern/issue-15080.rs:4:24: 4:36

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/pattern/issue-15080.rs:4:24: 4:36
        _0 = &_1;                        // scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
        return;                          // scope 0 at ui/pattern/issue-15080.rs:4:23: 4:36
    }
}
