// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: &[i32];
    let mut _3: &[i32];
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let _15: ();
    let mut _16: &mut std::vec::Vec<i32>;
    let _19: ();
    let mut _20: &mut std::vec::Vec<i32>;
    let mut _21: (&std::vec::Vec<i32>, &[i32; 2]);
    let mut _22: &std::vec::Vec<i32>;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: &[i32; 4];
    scope 1 {
        debug x => _1;
        let mut _2: std::vec::Vec<i32>;
        scope 2 {
            debug result => _2;
            let _13: i32;
            let _14: &[i32];
            let _17: i32;
            let _18: &[i32];
            let _23: &std::vec::Vec<i32>;
            let _24: &[i32; 2];
            let mut _30: &[i32; 2];
            scope 3 {
                debug n => _13;
                debug rest => _14;
            }
            scope 4 {
                debug n => _17;
                debug rest => _18;
            }
            scope 5 {
                debug left_val => _23;
                debug right_val => _24;
                let _27: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _27;
                }
            }
        }
    }

    bb0: {
        _31 = const _;
        _1 = _31 as &[i32] (Pointer(Unsize));
        _2 = Vec::<i32>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = Len((*_1));
        _11 = const 3_usize;
        _12 = Ge(move _10, move _11);
        switchInt(move _12) -> [0: bb4, otherwise: bb2];
    }

    bb2: {
        switchInt((*_1)[0 of 3]) -> [1: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_1)[2 of 3]) -> [3: bb8, otherwise: bb4];
    }

    bb4: {
        _7 = Len((*_1));
        _8 = const 1_usize;
        _9 = Ge(move _7, move _8);
        switchInt(move _9) -> [0: bb5, otherwise: bb10];
    }

    bb5: {
        _4 = Len((*_1));
        _5 = const 0_usize;
        _6 = Eq(move _4, move _5);
        switchInt(move _6) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _22 = &_2;
        _30 = const _;
        _21 = (move _22, _30);
        _23 = (_21.0: &std::vec::Vec<i32>);
        _24 = (_21.1: &[i32; 2]);
        _26 = <Vec<i32> as PartialEq<[i32; 2]>>::eq(_23, _24) -> [return: bb13, unwind: bb17];
    }

    bb7: {
        unreachable;
    }

    bb8: {
        _13 = (*_1)[1 of 3];
        _14 = &(*_1)[3:];
        _16 = &mut _2;
        _15 = Vec::<i32>::push(move _16, _13) -> [return: bb9, unwind: bb17];
    }

    bb9: {
        _3 = _14;
        goto -> bb12;
    }

    bb10: {
        _17 = (*_1)[0 of 1];
        _18 = &(*_1)[1:];
        _20 = &mut _2;
        _19 = Vec::<i32>::push(move _20, _17) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _3 = _18;
        goto -> bb12;
    }

    bb12: {
        _1 = move _3;
        goto -> bb1;
    }

    bb13: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<Vec<i32>, [i32; 2]>(move _27, _23, _24, move _29) -> bb17;
    }

    bb15: {
        drop(_2) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}
