// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:6:11: 6:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn g() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:10:11: 10:16
    let mut _1: !;                       // in scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:11:11: 11:14

    bb0: {
        _1 = f();                        // scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:11:11: 11:14
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:11:11: 11:12
                                         // + literal: Const { ty: fn() -> ! {f}, val: Value(<ZST>) }
    }
}

fn h() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:17:11: 17:16
    let mut _1: !;                       // in scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:18:11: 18:14

    bb0: {
        _1 = f();                        // scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:18:11: 18:14
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:18:11: 18:12
                                         // + literal: Const { ty: fn() -> ! {f}, val: Value(<ZST>) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:22:11: 22:11

    bb0: {
        return;                          // scope 0 at ui/pattern/usefulness/issue-71930-type-of-match-scrutinee.rs:22:13: 22:13
    }
}
