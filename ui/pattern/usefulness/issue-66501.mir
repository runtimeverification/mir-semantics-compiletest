// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/issue-66501.rs:5:11: 5:11

    bb0: {
        return;                          // scope 0 at ui/pattern/usefulness/issue-66501.rs:12:2: 12:2
    }
}

promoted[0] in main: &[Option<()>; 1] = {
    let mut _0: &[std::option::Option<()>; 1]; // return place in scope 0 at ui/pattern/usefulness/issue-66501.rs:7:11: 7:22
    let mut _1: [std::option::Option<()>; 1]; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:7:12: 7:22
    let mut _2: std::option::Option<()>; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:7:13: 7:21
    let mut _3: ();                      // in scope 0 at ui/pattern/usefulness/issue-66501.rs:7:18: 7:20

    bb0: {
        _3 = ();                         // scope 0 at ui/pattern/usefulness/issue-66501.rs:7:18: 7:20
        _2 = Option::<()>::Some(move _3); // scope 0 at ui/pattern/usefulness/issue-66501.rs:7:13: 7:21
        _1 = [move _2];                  // scope 0 at ui/pattern/usefulness/issue-66501.rs:7:12: 7:22
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/issue-66501.rs:7:11: 7:22
        return;                          // scope 0 at ui/pattern/usefulness/issue-66501.rs:7:11: 7:22
    }
}

const CONST: &[Option<()>; 1] = {
    let mut _0: &[std::option::Option<()>; 1]; // return place in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:18: 6:34
    let _1: &[std::option::Option<()>; 1]; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
    let _2: [std::option::Option<()>; 1]; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:38: 6:48
    let mut _3: std::option::Option<()>; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:39: 6:47
    let mut _4: ();                      // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:44: 6:46
    let mut _5: &[std::option::Option<()>; 1]; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
        _5 = const _;                    // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
                                         // + literal: Const { ty: &[Option<()>; 1], val: Unevaluated(CONST, [], Some(promoted[0])) }
        _1 = &(*_5);                     // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
        _0 = &(*_1);                     // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
        StorageDead(_1);                 // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:47: 6:48
        return;                          // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:5: 6:49
    }
}

promoted[0] in CONST: &[Option<()>; 1] = {
    let mut _0: &[std::option::Option<()>; 1]; // return place in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
    let mut _1: [std::option::Option<()>; 1]; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:38: 6:48
    let mut _2: std::option::Option<()>; // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:39: 6:47
    let mut _3: ();                      // in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:44: 6:46

    bb0: {
        _3 = ();                         // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:44: 6:46
        _2 = Option::<()>::Some(move _3); // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:39: 6:47
        _1 = [move _2];                  // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:38: 6:48
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
        return;                          // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:37: 6:48
    }
}

CONST::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/issue-66501.rs:6:32: 6:33

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:32: 6:33
        return;                          // scope 0 at ui/pattern/usefulness/issue-66501.rs:6:32: 6:33
    }
}
