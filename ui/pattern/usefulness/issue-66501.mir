// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _2: &[std::option::Option<()>; 1];

    bb0: {
        _2 = const _;
        _1 = discriminant((*_2)[0 of 1]);
        switchInt(move _1) -> [0: bb2, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &[Option<()>; 1] = {
    let mut _0: &[std::option::Option<()>; 1];
    let mut _1: [std::option::Option<()>; 1];
    let mut _2: std::option::Option<()>;
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = Option::<()>::Some(move _3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

const CONST: &[Option<()>; 1] = {
    let mut _0: &[std::option::Option<()>; 1];
    let _1: &[std::option::Option<()>; 1];
    let _2: [std::option::Option<()>; 1];
    let mut _3: std::option::Option<()>;
    let mut _4: ();
    let mut _5: &[std::option::Option<()>; 1];

    bb0: {
        StorageLive(_1);
        _5 = const _;
        _1 = &(*_5);
        _0 = &(*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in CONST: &[Option<()>; 1] = {
    let mut _0: &[std::option::Option<()>; 1];
    let mut _1: [std::option::Option<()>; 1];
    let mut _2: std::option::Option<()>;
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = Option::<()>::Some(move _3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

CONST::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}
