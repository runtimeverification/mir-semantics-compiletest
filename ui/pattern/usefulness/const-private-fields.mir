// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn inner::<impl at ui/pattern/usefulness/const-private-fields.rs:7:14: 7:23>::eq(_1: &inner::PrivateField, _2: &inner::PrivateField) -> bool {
    debug self => _1;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:14: 7:23
    debug other => _2;                   // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:14: 7:23
    let mut _0: bool;                    // return place in scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:14: 7:23
    let mut _3: bool;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:9:9: 9:20
    let mut _4: bool;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:9:9: 9:20
    let mut _5: bool;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:9:9: 9:20
    let mut _6: bool;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
    let mut _7: bool;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
    let mut _8: bool;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16

    bb0: {
        _4 = ((*_1).0: bool);            // scope 0 at ui/pattern/usefulness/const-private-fields.rs:9:9: 9:20
        _5 = ((*_2).0: bool);            // scope 0 at ui/pattern/usefulness/const-private-fields.rs:9:9: 9:20
        _3 = Eq(move _4, move _5);       // scope 0 at ui/pattern/usefulness/const-private-fields.rs:9:9: 9:20
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
        goto -> bb3;                     // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
    }

    bb2: {
        _7 = ((*_1).1: bool);            // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
        _8 = ((*_2).1: bool);            // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
        _6 = Eq(move _7, move _8);       // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
        _0 = move _6;                    // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
        goto -> bb3;                     // scope 0 at ui/pattern/usefulness/const-private-fields.rs:10:9: 10:16
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:23: 7:23
    }
}

fn inner::<impl at ui/pattern/usefulness/const-private-fields.rs:7:25: 7:27>::assert_receiver_is_total_eq(_1: &inner::PrivateField) -> () {
    debug self => _1;                    // in scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:25: 7:27
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:25: 7:27
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/pattern/usefulness/const-private-fields.rs:7:27: 7:27
    }
}

const inner::FOO: inner::PrivateField = {
    let mut _0: inner::PrivateField;     // return place in scope 0 at ui/pattern/usefulness/const-private-fields.rs:13:20: 13:32

    bb0: {
        _0 = inner::PrivateField { x: const true, y: const true }; // scope 0 at ui/pattern/usefulness/const-private-fields.rs:13:35: 13:68
        return;                          // scope 0 at ui/pattern/usefulness/const-private-fields.rs:13:5: 13:69
    }
}

const inner::BAR: inner::PrivateField = {
    let mut _0: inner::PrivateField;     // return place in scope 0 at ui/pattern/usefulness/const-private-fields.rs:14:20: 14:32

    bb0: {
        _0 = inner::PrivateField { x: const true, y: const false }; // scope 0 at ui/pattern/usefulness/const-private-fields.rs:14:35: 14:69
        return;                          // scope 0 at ui/pattern/usefulness/const-private-fields.rs:14:5: 14:70
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/const-private-fields.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/pattern/usefulness/const-private-fields.rs:30:2: 30:2
    }
}
