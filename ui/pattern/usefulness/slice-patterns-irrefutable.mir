// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:3:11: 3:11
    let _1: &[bool];                     // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:9: 4:10
    let mut _2: &[bool; 0];              // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
    let _3: &[bool; 0];                  // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
    let _5: &[bool; 0];                  // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
    let _7: &[bool; 1];                  // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
    let _9: &[bool; 2];                  // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
    let mut _13: &[bool; 0];             // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:9: 4:10
        let _4: &[bool; 0];              // in scope 1 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:9: 5:11
        let mut _12: &[bool; 0];         // in scope 1 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
        scope 2 {
            debug s0 => _4;              // in scope 2 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:9: 5:11
            let _6: &[bool; 1];          // in scope 2 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:9: 6:11
            let mut _11: &[bool; 1];     // in scope 2 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
            scope 3 {
                debug s1 => _6;          // in scope 3 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:9: 6:11
                let _8: &[bool; 2];      // in scope 3 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:9: 7:11
                let mut _10: &[bool; 2]; // in scope 3 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
                scope 4 {
                    debug s2 => _8;      // in scope 4 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:9: 7:11
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                scope 12 {
                                                    scope 13 {
                                                        scope 14 {
                                                            scope 15 {
                                                                scope 16 {
                                                                    scope 17 {
                                                                        scope 18 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _13 = const _;                   // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
                                         // + literal: Const { ty: &[bool; 0], val: Unevaluated(main, [], Some(promoted[3])) }
        _3 = _13;                        // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
        _2 = _3;                         // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
        _1 = move _2 as &[bool] (Pointer(Unsize)); // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
        _12 = const _;                   // scope 1 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
                                         // + literal: Const { ty: &[bool; 0], val: Unevaluated(main, [], Some(promoted[2])) }
        _5 = _12;                        // scope 1 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
        _4 = _5;                         // scope 1 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
        _11 = const _;                   // scope 2 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
                                         // + literal: Const { ty: &[bool; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _11;                        // scope 2 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
        _6 = _7;                         // scope 2 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
        _10 = const _;                   // scope 3 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
                                         // + literal: Const { ty: &[bool; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _10;                        // scope 3 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
        _8 = _9;                         // scope 3 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:26:2: 26:2
    }
}

promoted[0] in main: &[bool; 2] = {
    let mut _0: &[bool; 2];              // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
    let mut _1: [bool; 2];               // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:27: 7:37

    bb0: {
        _1 = [const false; 2];           // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:27: 7:37
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:26: 7:37
    }
}

promoted[1] in main: &[bool; 1] = {
    let mut _0: &[bool; 1];              // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
    let mut _1: [bool; 1];               // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:27: 6:37

    bb0: {
        _1 = [const false; 1];           // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:27: 6:37
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:26: 6:37
    }
}

promoted[2] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];              // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
    let mut _1: [bool; 0];               // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:27: 5:29

    bb0: {
        _1 = [];                         // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:27: 5:29
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:26: 5:29
    }
}

promoted[3] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];              // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
    let mut _1: [bool; 0];               // in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:23: 4:32

    bb0: {
        _1 = [];                         // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:23: 4:32
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:22: 4:32
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:30: 4:31

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:30: 4:31
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:4:30: 4:31
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:21: 5:22

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:21: 5:22
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:5:21: 5:22
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:35: 6:36

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:35: 6:36
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:35: 6:36
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:21: 6:22

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:21: 6:22
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:6:21: 6:22
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:35: 7:36

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:35: 7:36
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:35: 7:36
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:21: 7:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:21: 7:22
        return;                          // scope 0 at ui/pattern/usefulness/slice-patterns-irrefutable.rs:7:21: 7:22
    }
}
