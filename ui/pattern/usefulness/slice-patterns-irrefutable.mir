// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[bool];
    let mut _2: &[bool; 0];
    scope 1 {
        debug s => _1;
        scope 2 {
            debug s0 => const _;
            scope 3 {
                debug s1 => const _;
                scope 4 {
                    debug s2 => const _;
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                scope 12 {
                                                    scope 13 {
                                                        scope 14 {
                                                            scope 15 {
                                                                scope 16 {
                                                                    scope 17 {
                                                                        scope 18 {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const _;
        _1 = _2 as &[bool] (Pointer(Unsize));
        return;
    }
}

promoted[0] in main: &[bool; 2] = {
    let mut _0: &[bool; 2];
    let mut _1: [bool; 2];

    bb0: {
        _1 = [const false; 2];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[bool; 1] = {
    let mut _0: &[bool; 1];
    let mut _1: [bool; 1];

    bb0: {
        _1 = [const false; 1];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];
    let mut _1: [bool; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];
    let mut _1: [bool; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 0_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

main::{constant#5}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

main::{constant#4}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
