// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _foo(_1: ApplicationTy) -> () {
    debug ty => _1;                      // in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:16:9: 16:11
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:16:28: 16:28
    let mut _2: isize;                   // in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:18:17: 18:32
    let mut _3: isize;                   // in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:23:23: 23:38

    bb0: {
        _2 = discriminant((_1.0: TypeCtor)); // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:17:11: 17:13
        switchInt(move _2) -> [0: bb2, 1: bb2, otherwise: bb1]; // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:17:5: 17:13
    }

    bb1: {
        unreachable;                     // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:17:11: 17:13
    }

    bb2: {
        _3 = discriminant((_1.0: TypeCtor)); // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:22:11: 22:13
        switchInt(move _3) -> [0: bb4, 1: bb4, otherwise: bb3]; // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:22:5: 22:13
    }

    bb3: {
        unreachable;                     // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:22:11: 22:13
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:25:2: 25:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:27:13: 27:13
    }
}

fn ApplicationTy(_1: TypeCtor) -> ApplicationTy {
    let mut _0: ApplicationTy;           // return place in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:8:1: 8:25

    bb0: {
        _0 = ApplicationTy(move _1);     // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:8:1: 8:25
        return;                          // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:8:1: 8:25
    }
}

// MIR FOR CTFE
fn ApplicationTy(_1: TypeCtor) -> ApplicationTy {
    let mut _0: ApplicationTy;           // return place in scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:8:1: 8:25

    bb0: {
        _0 = ApplicationTy(move _1);     // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:8:1: 8:25
        return;                          // scope 0 at ui/pattern/usefulness/issue-80501-or-pat-and-macro.rs:8:1: 8:25
    }
}
