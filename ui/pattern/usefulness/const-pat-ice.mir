// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO: &&&u32 = {
    let mut _0: &&&u32;                  // return place in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:12: 3:18
    let _1: &&&u32;                      // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
    let _2: &&u32;                       // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:22: 3:26
    let _3: &u32;                        // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:23: 3:26
    let _4: u32;                         // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:24: 3:26
    let mut _5: &&&u32;                  // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
        _5 = const _;                    // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
                                         // + literal: Const { ty: &&&u32, val: Unevaluated(FOO, [], Some(promoted[0])) }
        _1 = &(*_5);                     // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
        _0 = &(*_1);                     // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
        StorageDead(_1);                 // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:25: 3:26
        return;                          // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:1: 3:27
    }
}

promoted[0] in FOO: &&&u32 = {
    let mut _0: &&&u32;                  // return place in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
    let mut _1: &&u32;                   // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:22: 3:26
    let mut _2: &u32;                    // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:23: 3:26
    let mut _3: u32;                     // in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:24: 3:26

    bb0: {
        _3 = const 42_u32;               // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:24: 3:26
        _2 = &_3;                        // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:23: 3:26
        _1 = &_2;                        // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:22: 3:26
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
        return;                          // scope 0 at ui/pattern/usefulness/const-pat-ice.rs:3:21: 3:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/const-pat-ice.rs:5:11: 5:11
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _1 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
