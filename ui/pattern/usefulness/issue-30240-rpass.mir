// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[i32];
    let mut _2: &[i32];
    let mut _3: (&&[i32], &&[i32]);
    let mut _4: &&[i32];
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &str;
    let mut _14: (&&str, &&str);
    let mut _15: &&str;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: &str;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: !;
    let mut _27: !;
    let mut _30: &[i32; 1];
    scope 1 {
        debug a => _1;
        let _5: &&[i32];
        let _6: &&[i32];
        let _12: &str;
        let mut _29: &&[i32];
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _9: core::panicking::AssertKind;
            scope 3 {
                debug kind => _9;
            }
        }
        scope 4 {
            debug a => _12;
            let _16: &&str;
            let _17: &&str;
            let mut _28: &&str;
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _20;
                }
            }
            scope 7 {
                debug _x => const _;
            }
        }
    }

    bb0: {
        _30 = const _;
        _2 = _30 as &[i32] (Pointer(Unsize));
        _1 = _2;
        _4 = &_1;
        _29 = const _;
        _3 = (move _4, _29);
        _5 = (_3.0: &&[i32]);
        _6 = (_3.1: &&[i32]);
        _8 = <&[i32] as PartialEq>::eq(_5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<&[i32], &[i32]>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb3: {
        _13 = const "hello";
        _12 = _13;
        _15 = &_12;
        _28 = const _;
        _14 = (move _15, _28);
        _16 = (_14.0: &&str);
        _17 = (_14.1: &&str);
        _19 = <&str as PartialEq>::eq(_16, _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, &str>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb6: {
        _23 = const "foo";
        _24 = <str as PartialEq>::eq(_23, const "fool") -> [return: bb7, unwind continue];
    }

    bb7: {
        switchInt(move _24) -> [0: bb8, otherwise: bb11];
    }

    bb8: {
        _25 = <str as PartialEq>::eq(_23, const "foo") -> [return: bb9, unwind continue];
    }

    bb9: {
        switchInt(move _25) -> [0: bb10, otherwise: bb12];
    }

    bb10: {
        _27 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb11: {
        _26 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&[i32] = {
    let mut _0: &&[i32];
    let mut _1: &[i32];
    let mut _2: &[i32; 1];
    let mut _3: &[i32; 1];
    let mut _4: [i32; 1];

    bb0: {
        _4 = [const 0_i32];
        _3 = &_4;
        _2 = &(*_3);
        _1 = move _2 as &[i32] (Pointer(Unsize));
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 0_i32];
        _0 = &_1;
        return;
    }
}
