// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C0: &[u8] = {
    let mut _0: &[u8];
    let mut _1: &[u8; 1];
    let _2: &[u8; 1];

    bb0: {
        StorageLive(_1);
        StorageLive(_2);
        _2 = const b"\x00";
        _1 = &(*_2);
        _0 = move _1 as &[u8] (Pointer(Unsize));
        StorageDead(_2);
        StorageDead(_1);
        return;
    }
}

alloc1 (size: 1, align: 1) {
    00                                              â”‚ .
}

fn main() -> () {
    let mut _0: ();
    let _1: &[u8];
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: &[u8; 1];
    scope 1 {
        debug x => _1;
    }

    bb0: {
        _13 = const _;
        _1 = _13 as &[u8] (Pointer(Unsize));
        _10 = Len((*_1));
        _11 = const 0_usize;
        _12 = Eq(move _10, move _11);
        switchInt(move _12) -> [0: bb1, otherwise: bb7];
    }

    bb1: {
        _7 = Len((*_1));
        _8 = const 1_usize;
        _9 = Eq(move _7, move _8);
        switchInt(move _9) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        _2 = Le(const 1_u8, (*_1)[0 of 1]);
        switchInt(move _2) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _3 = Le((*_1)[0 of 1], const u8::MAX);
        switchInt(move _3) -> [0: bb4, otherwise: bb7];
    }

    bb4: {
        switchInt((*_1)[0 of 1]) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        _4 = Len((*_1));
        _5 = const 2_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb5, otherwise: bb7];
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = [const 0_u8];
        _0 = &_1;
        return;
    }
}
