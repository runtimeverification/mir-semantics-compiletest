// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const C0: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:11: 5:24
    let mut _1: &[u8; 1];                // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
    let _2: &[u8; 1];                    // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
        StorageLive(_2);                 // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
        _2 = const b"\x00";              // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
                                         // + literal: Const { ty: &[u8; 1], val: Value(Scalar(alloc1)) }
        _1 = &(*_2);                     // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:27: 5:34
        StorageDead(_2);                 // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:33: 5:34
        StorageDead(_1);                 // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:33: 5:34
        return;                          // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:5:1: 5:35
    }
}

alloc1 (size: 1, align: 1) {
    00                                              â”‚ .
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:7:11: 7:11
    let _1: &[u8];                       // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:9: 8:10
    let mut _2: &[u8; 1];                // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
    let _3: &[u8; 1];                    // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
    let mut _4: bool;                    // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:11: 11:18
    let mut _5: bool;                    // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:11: 11:18
    let mut _6: usize;                   // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
    let mut _7: usize;                   // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
    let mut _8: bool;                    // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
    let mut _9: usize;                   // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
    let mut _10: usize;                  // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
    let mut _11: bool;                   // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
    let mut _12: &[u8; 1];               // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:9: 8:10
    }

    bb0: {
        _12 = const _;                   // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
                                         // mir::Constant
                                         // + span: ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _12;                        // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
        _2 = _3;                         // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
        _1 = move _2 as &[u8] (Pointer(Unsize)); // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
        _9 = Len((*_1));                 // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
        _10 = const 1_usize;             // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
        _11 = Eq(move _9, move _10);     // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
        switchInt(move _11) -> [0: bb5, otherwise: bb1]; // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:10: 11:19
    }

    bb1: {
        _4 = Le(const 1_u8, (*_1)[0 of 1]); // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:11: 11:18
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:11: 11:18
    }

    bb2: {
        _5 = Le((*_1)[0 of 1], const u8::MAX); // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:11: 11:18
        switchInt(move _5) -> [0: bb3, otherwise: bb6]; // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:11:11: 11:18
    }

    bb3: {
        switchInt((*_1)[0 of 1]) -> [0: bb6, otherwise: bb4]; // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:9:5: 9:12
    }

    bb4: {
        unreachable;                     // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:9:11: 9:12
    }

    bb5: {
        _6 = Len((*_1));                 // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
        _7 = const 2_usize;              // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
        _8 = Ge(move _6, move _7);       // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
        switchInt(move _8) -> [0: bb4, otherwise: bb6]; // scope 1 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:13:10: 13:20
    }

    bb6: {
        return;                          // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:15:2: 15:2
    }
}

promoted[0] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
    let mut _1: [u8; 1];                 // in scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:21: 8:24

    bb0: {
        _1 = [const 0_u8];               // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:21: 8:24
        _0 = &_1;                        // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
        return;                          // scope 0 at ui/pattern/usefulness/issue-65413-constants-and-slices-exhaustiveness.rs:8:20: 8:24
    }
}
