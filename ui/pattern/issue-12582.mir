// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: i32;
    let mut _6: (i32, i32);
    let mut _7: bool;
    let mut _8: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: i32;
    let mut _14: i32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&i32, &i32);
    let mut _19: &i32;
    let _20: i32;
    let mut _21: ((i32, i32),);
    let mut _22: (i32, i32);
    let mut _23: bool;
    let mut _24: bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 1_i32;
        let _2: i32;
        scope 2 {
            debug y => const 2_i32;
            let _9: &i32;
            let _10: &i32;
            let _25: &i32;
            let _26: &i32;
            let mut _34: &i32;
            let mut _35: &i32;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _31;
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _2 = const 2_i32;
        _35 = const _;
        _6 = (_1, _2);
        switchInt((_6.0: i32)) -> [1: bb1, 2: bb3, otherwise: bb2];
    }

    bb1: {
        switchInt((_6.1: i32)) -> [1: bb7, otherwise: bb2];
    }

    bb2: {
        _7 = Le(const 1_i32, (_6.0: i32));
        switchInt(move _7) -> [0: bb6, otherwise: bb4];
    }

    bb3: {
        switchInt((_6.1: i32)) -> [2: bb8, otherwise: bb2];
    }

    bb4: {
        _8 = Le((_6.0: i32), const 2_i32);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        switchInt((_6.1: i32)) -> [2: bb9, otherwise: bb6];
    }

    bb6: {
        _5 = const 4_i32;
        goto -> bb10;
    }

    bb7: {
        _5 = const 1_i32;
        goto -> bb10;
    }

    bb8: {
        _5 = const 2_i32;
        goto -> bb10;
    }

    bb9: {
        _5 = const 3_i32;
        goto -> bb10;
    }

    bb10: {
        _4 = &_5;
        _3 = (_35, move _4);
        _9 = (_3.0: &i32);
        _10 = (_3.1: &i32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<i32, i32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb12: {
        _34 = const _;
        _22 = (_1, _2);
        _21 = (move _22,);
        switchInt(((_21.0: (i32, i32)).0: i32)) -> [1: bb13, 2: bb15, otherwise: bb14];
    }

    bb13: {
        switchInt(((_21.0: (i32, i32)).1: i32)) -> [1: bb19, otherwise: bb14];
    }

    bb14: {
        _23 = Le(const 1_i32, ((_21.0: (i32, i32)).0: i32));
        switchInt(move _23) -> [0: bb18, otherwise: bb16];
    }

    bb15: {
        switchInt(((_21.0: (i32, i32)).1: i32)) -> [2: bb20, otherwise: bb14];
    }

    bb16: {
        _24 = Le(((_21.0: (i32, i32)).0: i32), const 2_i32);
        switchInt(move _24) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        switchInt(((_21.0: (i32, i32)).1: i32)) -> [2: bb21, otherwise: bb18];
    }

    bb18: {
        _20 = const 4_i32;
        goto -> bb22;
    }

    bb19: {
        _20 = const 1_i32;
        goto -> bb22;
    }

    bb20: {
        _20 = const 2_i32;
        goto -> bb22;
    }

    bb21: {
        _20 = const 3_i32;
        goto -> bb22;
    }

    bb22: {
        _19 = &_20;
        _18 = (_34, move _19);
        _25 = (_18.0: &i32);
        _26 = (_18.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
