// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn uhoh(_1: Vec<clam<T>>) -> () {
    debug v => _1;                       // in scope 0 at ui/pattern/size-and-align.rs:6:12: 6:13
    let mut _0: ();                      // return place in scope 0 at ui/pattern/size-and-align.rs:6:30: 6:30
    let mut _2: &clam<T>;                // in scope 0 at ui/pattern/size-and-align.rs:7:11: 7:15
    let mut _3: &std::vec::Vec<clam<T>>; // in scope 0 at ui/pattern/size-and-align.rs:7:11: 7:12
    let mut _4: isize;                   // in scope 0 at ui/pattern/size-and-align.rs:8:7: 8:34
    let _5: &T;                          // in scope 0 at ui/pattern/size-and-align.rs:8:20: 8:26
    let _6: &isize;                      // in scope 0 at ui/pattern/size-and-align.rs:8:28: 8:33
    let _7: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[&str];                 // in scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
    let mut _10: &[&str; 1];             // in scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
    let _11: &[&str; 1];                 // in scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
    let mut _12: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
    let mut _18: &[&str; 2];             // in scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
    let _19: &[&str; 2];                 // in scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/pattern/size-and-align.rs:10:26: 10:27
    let mut _25: &&isize;                // in scope 0 at ui/pattern/size-and-align.rs:10:26: 10:27
    let _26: &&isize;                    // in scope 0 at ui/pattern/size-and-align.rs:10:26: 10:27
    let mut _27: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _28: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _29: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _30: &[&str];                // in scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
    let mut _31: &[&str; 1];             // in scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
    let _32: &[&str; 1];                 // in scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
    let mut _33: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _34: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _35: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _39: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _40: &[&str; 1];             // in scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
    scope 1 {
        debug _t => _5;                  // in scope 1 at ui/pattern/size-and-align.rs:8:20: 8:26
        debug u => _6;                   // in scope 1 at ui/pattern/size-and-align.rs:8:28: 8:33
        let mut _36: &[&str; 2];         // in scope 1 at ui/pattern/size-and-align.rs:10:20: 10:24
        let mut _37: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _38: &[&str; 1];         // in scope 1 at ui/pattern/size-and-align.rs:9:20: 9:31
    }

    bb0: {
        _3 = &_1;                        // scope 0 at ui/pattern/size-and-align.rs:7:11: 7:12
        _2 = <Vec<clam<T>> as Index<usize>>::index(move _3, const 1_usize) -> [return: bb1, unwind: bb13]; // scope 0 at ui/pattern/size-and-align.rs:7:11: 7:15
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:7:11: 7:15
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<clam<T>>, usize) -> &'a <Vec<clam<T>> as Index<usize>>::Output {<Vec<clam<T>> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant((*_2));        // scope 0 at ui/pattern/size-and-align.rs:7:11: 7:15
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at ui/pattern/size-and-align.rs:7:5: 7:15
    }

    bb2: {
        _40 = const _;                   // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:13:34: 13:43
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(uhoh, [T], Some(promoted[4])) }
        _32 = _40;                       // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
        _31 = _32;                       // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
        _30 = move _31 as &[&str] (Pointer(Unsize)); // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
        _39 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(uhoh, [T], Some(promoted[3])) }
        _35 = _39;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _34 = _35;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = move _34 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = Arguments::<'_>::new_v1(move _30, move _33) -> [return: bb10, unwind: bb13]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/pattern/size-and-align.rs:7:11: 7:15
    }

    bb4: {
        _5 = &(((*_2) as a).0: T);       // scope 0 at ui/pattern/size-and-align.rs:8:20: 8:26
        _6 = &(((*_2) as a).1: isize);   // scope 0 at ui/pattern/size-and-align.rs:8:28: 8:33
        _38 = const _;                   // scope 1 at ui/pattern/size-and-align.rs:9:20: 9:31
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:9:20: 9:31
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(uhoh, [T], Some(promoted[2])) }
        _11 = _38;                       // scope 1 at ui/pattern/size-and-align.rs:9:20: 9:31
        _10 = _11;                       // scope 1 at ui/pattern/size-and-align.rs:9:20: 9:31
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 1 at ui/pattern/size-and-align.rs:9:20: 9:31
        _37 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(uhoh, [T], Some(promoted[1])) }
        _14 = _37;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = _14;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = move _13 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> [return: bb5, unwind: bb13]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = _print(move _8) -> [return: bb6, unwind: bb13]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _36 = const _;                   // scope 1 at ui/pattern/size-and-align.rs:10:20: 10:24
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:10:20: 10:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(uhoh, [T], Some(promoted[0])) }
        _19 = _36;                       // scope 1 at ui/pattern/size-and-align.rs:10:20: 10:24
        _18 = _19;                       // scope 1 at ui/pattern/size-and-align.rs:10:20: 10:24
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 1 at ui/pattern/size-and-align.rs:10:20: 10:24
        _26 = &_6;                       // scope 1 at ui/pattern/size-and-align.rs:10:26: 10:27
        _25 = _26;                       // scope 1 at ui/pattern/size-and-align.rs:10:26: 10:27
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<&isize>(move _25) -> [return: bb7, unwind: bb13]; // scope 1 at ui/pattern/size-and-align.rs:10:26: 10:27
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:10:26: 10:27
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&isize>}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = [move _24];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb8, unwind: bb13]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = _print(move _16) -> [return: bb9, unwind: bb13]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = begin_panic::<&str>(const "explicit panic") -> bb13; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _28 = _print(move _29) -> [return: bb11, unwind: bb13]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/pattern/size-and-align.rs:15:1: 15:2
    }

    bb12: {
        return;                          // scope 0 at ui/pattern/size-and-align.rs:15:2: 15:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/pattern/size-and-align.rs:15:1: 15:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/pattern/size-and-align.rs:6:1: 15:2
    }
}

promoted[0] in uhoh: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
    let mut _1: [&str; 2];               // in scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:10:20: 10:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:10:20: 10:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
        return;                          // scope 0 at ui/pattern/size-and-align.rs:10:20: 10:24
    }
}

promoted[1] in uhoh: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[2] in uhoh: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
    let mut _1: [&str; 1];               // in scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31

    bb0: {
        _1 = [const "incorrect\n"];      // scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:9:20: 9:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
        return;                          // scope 0 at ui/pattern/size-and-align.rs:9:20: 9:31
    }
}

promoted[3] in uhoh: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[4] in uhoh: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
    let mut _1: [&str; 1];               // in scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43

    bb0: {
        _1 = [const "correct\n"];        // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:13:34: 13:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
        return;                          // scope 0 at ui/pattern/size-and-align.rs:13:34: 13:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/size-and-align.rs:17:15: 17:15
    let _1: std::vec::Vec<clam<isize>>;  // in scope 0 at ui/pattern/size-and-align.rs:18:9: 18:10
    let mut _2: std::boxed::Box<[clam<isize>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[clam<isize>; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[clam<isize>; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: clam<isize>;             // in scope 0 at ui/pattern/size-and-align.rs:18:36: 18:52
    let mut _9: clam<isize>;             // in scope 0 at ui/pattern/size-and-align.rs:18:54: 18:70
    let mut _10: clam<isize>;            // in scope 0 at ui/pattern/size-and-align.rs:18:72: 18:96
    let _11: ();                         // in scope 0 at ui/pattern/size-and-align.rs:19:5: 19:21
    let mut _12: std::vec::Vec<clam<isize>>; // in scope 0 at ui/pattern/size-and-align.rs:19:19: 19:20
    let mut _13: *const [clam<isize>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/pattern/size-and-align.rs:18:9: 18:10
    }
    scope 2 {
    }

    bb0: {
        _4 = const 72_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [clam<isize>; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = clam::<isize>::b;           // scope 0 at ui/pattern/size-and-align.rs:18:36: 18:52
        _9 = clam::<isize>::b;           // scope 0 at ui/pattern/size-and-align.rs:18:54: 18:70
        _10 = clam::<isize>::a(const 42_isize, const 17_isize); // scope 0 at ui/pattern/size-and-align.rs:18:72: 18:96
        _13 = (((_7.0: std::ptr::Unique<[clam<isize>; 3]>).0: std::ptr::NonNull<[clam<isize>; 3]>).0: *const [clam<isize>; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_13) = [move _8, move _9, move _10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[clam<isize>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [clam<isize>]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[clam<isize>]>) -> Vec<clam<isize>> {slice::<impl [clam<isize>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = move _1;                   // scope 1 at ui/pattern/size-and-align.rs:19:19: 19:20
        _11 = uhoh::<isize>(move _12) -> bb3; // scope 1 at ui/pattern/size-and-align.rs:19:5: 19:21
                                         // mir::Constant
                                         // + span: ui/pattern/size-and-align.rs:19:5: 19:18
                                         // + literal: Const { ty: fn(Vec<clam<isize>>) {uhoh::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/size-and-align.rs:20:2: 20:2
    }
}

fn clam::a(_1: T, _2: isize) -> clam<T> {
    let mut _0: clam<T>;                 // return place in scope 0 at ui/pattern/size-and-align.rs:4:16: 4:17

    bb0: {
        _0 = clam::<T>::a(move _1, move _2); // scope 0 at ui/pattern/size-and-align.rs:4:16: 4:17
        return;                          // scope 0 at ui/pattern/size-and-align.rs:4:16: 4:17
    }
}

// MIR FOR CTFE
fn clam::a(_1: T, _2: isize) -> clam<T> {
    let mut _0: clam<T>;                 // return place in scope 0 at ui/pattern/size-and-align.rs:4:16: 4:17

    bb0: {
        _0 = clam::<T>::a(move _1, move _2); // scope 0 at ui/pattern/size-and-align.rs:4:16: 4:17
        return;                          // scope 0 at ui/pattern/size-and-align.rs:4:16: 4:17
    }
}
