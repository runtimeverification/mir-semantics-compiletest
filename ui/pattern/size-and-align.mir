// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn uhoh(_1: Vec<clam<T>>) -> () {
    debug v => _1;
    let mut _0: ();
    let mut _2: &clam<T>;
    let mut _3: &std::vec::Vec<clam<T>>;
    let mut _4: isize;
    let _5: &T;
    let _6: &isize;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &&isize;
    let mut _18: !;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[&str; 1];
    scope 1 {
        debug _t => _5;
        debug u => _6;
        let mut _23: &[&str; 2];
        let mut _24: &[&str; 1];
    }

    bb0: {
        _3 = &_1;
        _2 = <Vec<clam<T>> as Index<usize>>::index(move _3, const 1_usize) -> [return: bb1, unwind: bb13];
    }

    bb1: {
        _4 = discriminant((*_2));
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _22 = const _;
        _21 = _22 as &[&str] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_const(move _21) -> [return: bb10, unwind: bb13];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _5 = &(((*_2) as a).0: T);
        _6 = &(((*_2) as a).1: isize);
        _24 = const _;
        _9 = _24 as &[&str] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_const(move _9) -> [return: bb5, unwind: bb13];
    }

    bb5: {
        _7 = _print(move _8) -> [return: bb6, unwind: bb13];
    }

    bb6: {
        _23 = const _;
        _12 = _23 as &[&str] (Pointer(Unsize));
        _17 = &_6;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<&isize>(_17) -> [return: bb7, unwind: bb13];
    }

    bb7: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb8, unwind: bb13];
    }

    bb8: {
        _10 = _print(move _11) -> [return: bb9, unwind: bb13];
    }

    bb9: {
        _18 = begin_panic::<&str>(const "explicit panic") -> bb13;
    }

    bb10: {
        _19 = _print(move _20) -> [return: bb11, unwind: bb13];
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }
}

promoted[0] in uhoh: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "correct\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in uhoh: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in uhoh: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "incorrect\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<clam<isize>>;
    let mut _2: std::boxed::Box<[clam<isize>]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[clam<isize>; 3]>;
    let mut _7: clam<isize>;
    let mut _8: clam<isize>;
    let mut _9: clam<isize>;
    let _10: ();
    let mut _11: std::vec::Vec<clam<isize>>;
    let mut _12: *const [clam<isize>; 3];
    let mut _13: *const ();
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    scope 1 {
        debug v => _1;
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([clam<isize>; 3]);
        _4 = AlignOf([clam<isize>; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [clam<isize>; 3]);
        _7 = clam::<isize>::b;
        _8 = clam::<isize>::b;
        _9 = clam::<isize>::a(const 42_isize, const 17_isize);
        _12 = (((_6.0: std::ptr::Unique<[clam<isize>; 3]>).0: std::ptr::NonNull<[clam<isize>; 3]>).0: *const [clam<isize>; 3]);
        _13 = _12 as *const () (PtrToPtr);
        _14 = _13 as usize (Transmute);
        _15 = AlignOf(clam<isize>);
        _16 = Sub(_15, const 1_usize);
        _17 = BitAnd(_14, _16);
        _18 = Eq(_17, const 0_usize);
        assert(_18, "misaligned pointer dereference: address must be a multiple of {} but is {}", _15, _14) -> [success: bb4, unwind unreachable];
    }

    bb2: {
        _11 = move _1;
        _10 = uhoh::<isize>(move _11) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        (*_12) = [move _7, move _8, move _9];
        _2 = move _6 as std::boxed::Box<[clam<isize>]> (Pointer(Unsize));
        _1 = slice::<impl [clam<isize>]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

fn clam::a(_1: T, _2: isize) -> clam<T> {
    let mut _0: clam<T>;

    bb0: {
        _0 = clam::<T>::a(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn clam::a(_1: T, _2: isize) -> clam<T> {
    let mut _0: clam<T>;

    bb0: {
        _0 = clam::<T>::a(move _1, move _2);
        return;
    }
}
