// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mka() -> A {
    let mut _0: A;                       // return place in scope 0 at ui/pattern/issue-10392.rs:7:13: 7:14
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn mkb() -> B {
    let mut _0: B;                       // return place in scope 0 at ui/pattern/issue-10392.rs:8:13: 8:14
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/issue-10392.rs:10:11: 10:11
    let _1: isize;                       // in scope 0 at ui/pattern/issue-10392.rs:11:13: 11:16
    let mut _2: A;                       // in scope 0 at ui/pattern/issue-10392.rs:11:22: 11:27
    let mut _4: A;                       // in scope 0 at ui/pattern/issue-10392.rs:14:9: 14:14
    let mut _8: B;                       // in scope 0 at ui/pattern/issue-10392.rs:16:26: 16:31
    let mut _9: A;                       // in scope 0 at ui/pattern/issue-10392.rs:18:11: 18:16
    let mut _11: std::option::Option<A>; // in scope 0 at ui/pattern/issue-10392.rs:22:11: 22:22
    let mut _12: A;                      // in scope 0 at ui/pattern/issue-10392.rs:22:16: 22:21
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/pattern/issue-10392.rs:11:13: 11:16
        let _3: isize;                   // in scope 1 at ui/pattern/issue-10392.rs:13:9: 13:12
        scope 2 {
            debug foo => _3;             // in scope 2 at ui/pattern/issue-10392.rs:13:9: 13:12
            let _5: isize;               // in scope 2 at ui/pattern/issue-10392.rs:16:13: 16:14
            let _6: isize;               // in scope 2 at ui/pattern/issue-10392.rs:16:16: 16:17
            let _7: isize;               // in scope 2 at ui/pattern/issue-10392.rs:16:19: 16:20
            scope 3 {
                debug a => _5;           // in scope 3 at ui/pattern/issue-10392.rs:16:13: 16:14
                debug b => _6;           // in scope 3 at ui/pattern/issue-10392.rs:16:16: 16:17
                debug c => _7;           // in scope 3 at ui/pattern/issue-10392.rs:16:19: 16:20
                let _10: isize;          // in scope 3 at ui/pattern/issue-10392.rs:19:18: 19:22
                let _13: isize;          // in scope 3 at ui/pattern/issue-10392.rs:23:23: 23:27
                scope 4 {
                    debug _foo => _10;   // in scope 4 at ui/pattern/issue-10392.rs:19:18: 19:22
                }
                scope 5 {
                    debug _foo => _13;   // in scope 5 at ui/pattern/issue-10392.rs:23:23: 23:27
                }
            }
        }
    }

    bb0: {
        _2 = mka() -> bb1;               // scope 0 at ui/pattern/issue-10392.rs:11:22: 11:27
                                         // mir::Constant
                                         // + span: ui/pattern/issue-10392.rs:11:22: 11:25
                                         // + literal: Const { ty: fn() -> A {mka}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = (_2.0: isize);              // scope 0 at ui/pattern/issue-10392.rs:11:13: 11:16
        _4 = mka() -> bb2;               // scope 1 at ui/pattern/issue-10392.rs:14:9: 14:14
                                         // mir::Constant
                                         // + span: ui/pattern/issue-10392.rs:14:9: 14:12
                                         // + literal: Const { ty: fn() -> A {mka}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = (_4.0: isize);              // scope 1 at ui/pattern/issue-10392.rs:13:9: 13:12
        _8 = mkb() -> bb3;               // scope 2 at ui/pattern/issue-10392.rs:16:26: 16:31
                                         // mir::Constant
                                         // + span: ui/pattern/issue-10392.rs:16:26: 16:29
                                         // + literal: Const { ty: fn() -> B {mkb}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = (_8.0: isize);              // scope 2 at ui/pattern/issue-10392.rs:16:13: 16:14
        _6 = (_8.1: isize);              // scope 2 at ui/pattern/issue-10392.rs:16:16: 16:17
        _7 = (_8.2: isize);              // scope 2 at ui/pattern/issue-10392.rs:16:19: 16:20
        _9 = mka() -> bb4;               // scope 3 at ui/pattern/issue-10392.rs:18:11: 18:16
                                         // mir::Constant
                                         // + span: ui/pattern/issue-10392.rs:18:11: 18:14
                                         // + literal: Const { ty: fn() -> A {mka}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = (_9.0: isize);             // scope 3 at ui/pattern/issue-10392.rs:19:18: 19:22
        _12 = mka() -> bb5;              // scope 3 at ui/pattern/issue-10392.rs:22:16: 22:21
                                         // mir::Constant
                                         // + span: ui/pattern/issue-10392.rs:22:16: 22:19
                                         // + literal: Const { ty: fn() -> A {mka}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = Option::<A>::Some(move _12); // scope 3 at ui/pattern/issue-10392.rs:22:11: 22:22
        _13 = (((_11 as Some).0: A).0: isize); // scope 3 at ui/pattern/issue-10392.rs:23:23: 23:27
        return;                          // scope 0 at ui/pattern/issue-10392.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/issue-10392.rs:28:15: 28:15

    bb0: {
        return;                          // scope 0 at ui/pattern/issue-10392.rs:30:2: 30:2
    }
}
