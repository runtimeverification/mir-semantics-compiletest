// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/issue-22546.rs:7:10: 7:17>::default() -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/pattern/issue-22546.rs:7:10: 7:17
    let mut _1: T;                       // in scope 0 at ui/pattern/issue-22546.rs:8:19: 8:20
    let mut _2: T;                       // in scope 0 at ui/pattern/issue-22546.rs:8:22: 8:23

    bb0: {
        _1 = <T as Default>::default() -> bb1; // scope 0 at ui/pattern/issue-22546.rs:8:19: 8:20
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:8:19: 8:20
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <T as Default>::default() -> [return: bb2, unwind: bb3]; // scope 0 at ui/pattern/issue-22546.rs:8:22: 8:23
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:8:22: 8:23
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Foo::<T>(move _1, move _2); // scope 0 at ui/pattern/issue-22546.rs:7:10: 7:17
        return;                          // scope 0 at ui/pattern/issue-22546.rs:7:17: 7:17
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/pattern/issue-22546.rs:7:16: 7:17
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/pattern/issue-22546.rs:7:10: 7:17
    }
}

fn <impl at ui/pattern/issue-22546.rs:10:1: 10:36>::foo(_1: &Foo<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/pattern/issue-22546.rs:11:12: 11:17
    let mut _0: ();                      // return place in scope 0 at ui/pattern/issue-22546.rs:11:19: 11:19
    let _2: &T;                          // in scope 0 at ui/pattern/issue-22546.rs:13:22: 13:27
    let _3: &T;                          // in scope 0 at ui/pattern/issue-22546.rs:13:29: 13:34
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
    let mut _7: &[&str; 3];              // in scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
    let _8: &[&str; 3];                  // in scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/pattern/issue-22546.rs:13:73: 13:74
    let mut _14: &&T;                    // in scope 0 at ui/pattern/issue-22546.rs:13:73: 13:74
    let _15: &&T;                        // in scope 0 at ui/pattern/issue-22546.rs:13:73: 13:74
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/pattern/issue-22546.rs:13:76: 13:77
    let mut _17: &&T;                    // in scope 0 at ui/pattern/issue-22546.rs:13:76: 13:77
    let _18: &&T;                        // in scope 0 at ui/pattern/issue-22546.rs:13:76: 13:77
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/pattern/issue-22546.rs:13:22: 13:27
        debug y => _3;                   // in scope 1 at ui/pattern/issue-22546.rs:13:29: 13:34
        let mut _19: &[&str; 3];         // in scope 1 at ui/pattern/issue-22546.rs:13:48: 13:71
    }

    bb0: {
        _2 = &((*_1).0: T);              // scope 0 at ui/pattern/issue-22546.rs:13:22: 13:27
        _3 = &((*_1).1: T);              // scope 0 at ui/pattern/issue-22546.rs:13:29: 13:34
        _19 = const _;                   // scope 1 at ui/pattern/issue-22546.rs:13:48: 13:71
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:13:48: 13:71
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(Foo::<T>::foo, [T], Some(promoted[0])) }
        _8 = _19;                        // scope 1 at ui/pattern/issue-22546.rs:13:48: 13:71
        _7 = _8;                         // scope 1 at ui/pattern/issue-22546.rs:13:48: 13:71
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/pattern/issue-22546.rs:13:48: 13:71
        _15 = &_2;                       // scope 1 at ui/pattern/issue-22546.rs:13:73: 13:74
        _14 = _15;                       // scope 1 at ui/pattern/issue-22546.rs:13:73: 13:74
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<&T>(move _14) -> bb1; // scope 1 at ui/pattern/issue-22546.rs:13:73: 13:74
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:13:73: 13:74
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &T) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&T>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = &_3;                       // scope 1 at ui/pattern/issue-22546.rs:13:76: 13:77
        _17 = _18;                       // scope 1 at ui/pattern/issue-22546.rs:13:76: 13:77
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<&T>(move _17) -> bb2; // scope 1 at ui/pattern/issue-22546.rs:13:76: 13:77
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:13:76: 13:77
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &T) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&T>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13, move _16];      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/issue-22546.rs:15:6: 15:6
    }
}

promoted[0] in <impl at ui/pattern/issue-22546.rs:10:1: 10:36>::foo: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
    let mut _1: [&str; 3];               // in scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71

    bb0: {
        _1 = [const "Goodbye, World! ", const " ", const "\n"]; // scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:13:48: 13:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:13:48: 13:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:13:48: 13:71
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
        return;                          // scope 0 at ui/pattern/issue-22546.rs:13:48: 13:71
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/issue-22546.rs:30:11: 30:11
    let _1: i32;                         // in scope 0 at ui/pattern/issue-22546.rs:31:20: 31:21
    let _2: i32;                         // in scope 0 at ui/pattern/issue-22546.rs:31:23: 31:24
    let mut _3: Foo<i32>;                // in scope 0 at ui/pattern/issue-22546.rs:31:28: 31:46
    let _5: ();                          // in scope 0 at ui/pattern/issue-22546.rs:34:5: 34:12
    let mut _6: &Foo<i32>;               // in scope 0 at ui/pattern/issue-22546.rs:34:5: 34:12
    let mut _8: Foo<u8>;                 // in scope 0 at ui/pattern/issue-22546.rs:36:30: 36:45
    let mut _9: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/pattern/issue-22546.rs:31:20: 31:21
        debug b => _2;                   // in scope 1 at ui/pattern/issue-22546.rs:31:23: 31:24
        let _4: Foo<i32>;                // in scope 1 at ui/pattern/issue-22546.rs:33:9: 33:10
        scope 2 {
            debug f => _4;               // in scope 2 at ui/pattern/issue-22546.rs:33:9: 33:10
            let _7: Wrapper<Foo<u8>>;    // in scope 2 at ui/pattern/issue-22546.rs:36:9: 36:10
            scope 3 {
                debug w => _7;           // in scope 3 at ui/pattern/issue-22546.rs:36:9: 36:10
                scope 4 {
                }
                scope 5 {
                }
                scope 6 {
                }
            }
        }
    }

    bb0: {
        _3 = <Foo<i32> as Default>::default() -> bb1; // scope 0 at ui/pattern/issue-22546.rs:31:28: 31:46
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:31:28: 31:44
                                         // + literal: Const { ty: fn() -> Foo<i32> {<Foo<i32> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = (_3.0: i32);                // scope 0 at ui/pattern/issue-22546.rs:31:20: 31:21
        _2 = (_3.1: i32);                // scope 0 at ui/pattern/issue-22546.rs:31:23: 31:24
        _4 = Foo::<i32>(const 2_i32, const 3_i32); // scope 1 at ui/pattern/issue-22546.rs:33:13: 33:21
        _6 = &_4;                        // scope 2 at ui/pattern/issue-22546.rs:34:5: 34:12
        _5 = Foo::<i32>::foo(move _6) -> bb2; // scope 2 at ui/pattern/issue-22546.rs:34:5: 34:12
                                         // mir::Constant
                                         // + span: ui/pattern/issue-22546.rs:34:7: 34:10
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<i32>) {Foo::<i32>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Foo::<u8>(const 10_u8, const 11_u8); // scope 2 at ui/pattern/issue-22546.rs:36:30: 36:45
        _7 = Wrapper::<Foo<u8>> { value: move _8 }; // scope 2 at ui/pattern/issue-22546.rs:36:13: 36:47
        switchInt(((_7.0: Foo<u8>).1: u8)) -> [11: bb4, otherwise: bb3]; // scope 3 at ui/pattern/issue-22546.rs:37:5: 37:12
    }

    bb3: {
        _9 = begin_panic::<&str>(const "explicit panic"); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/issue-22546.rs:52:2: 52:2
    }
}

fn Foo(_1: T, _2: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/pattern/issue-22546.rs:8:1: 8:18

    bb0: {
        _0 = Foo::<T>(move _1, move _2); // scope 0 at ui/pattern/issue-22546.rs:8:1: 8:18
        return;                          // scope 0 at ui/pattern/issue-22546.rs:8:1: 8:18
    }
}

// MIR FOR CTFE
fn Foo(_1: T, _2: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/pattern/issue-22546.rs:8:1: 8:18

    bb0: {
        _0 = Foo::<T>(move _1, move _2); // scope 0 at ui/pattern/issue-22546.rs:8:1: 8:18
        return;                          // scope 0 at ui/pattern/issue-22546.rs:8:1: 8:18
    }
}
