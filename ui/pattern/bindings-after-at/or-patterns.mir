// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let mut _3: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let _4: &usize;                      // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let mut _6: &str;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let _7: &str;                        // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    let mut _9: &&usize;                 // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    let _10: &&usize;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let mut _12: &str;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    let _13: &str;                       // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    }

    bb1: {
        _11 = &mut (*_2);                // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
        _13 = const "Wild";              // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
        _0 = Formatter::<'_>::write_str(move _11, move _12) -> bb4; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _5 = &mut (*_2);                 // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
        _7 = const "Arm";                // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
        _10 = &_4;                       // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _9 = _10;                        // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:15: 6:15
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    debug other => _2;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _0: bool;                    // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let _3: isize;                       // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _4: &MatchArm;               // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _6: &MatchArm;               // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _7: bool;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _8: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _9: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _10: bool;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _11: (&MatchArm, &MatchArm); // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _12: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _13: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _14: isize;                  // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _15: isize;                  // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _18: usize;                  // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    let mut _19: usize;                  // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
    let mut _20: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _21: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _22: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    let mut _23: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        let _5: isize;                   // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
            let _16: &usize;             // in scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
            let _17: &usize;             // in scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
                debug __arg1_0 => _17;   // in scope 3 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _3 = discriminant((*_4));        // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _6 = _2;                         // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _5 = discriminant((*_6));        // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _8 = _3;                         // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _9 = _5;                         // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        goto -> bb3;                     // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _13 = _2;                        // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _11 = (move _12, move _13);      // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _20 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _15 = discriminant((*_20));      // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:6:26: 6:26
    }

    bb4: {
        _21 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        _14 = discriminant((*_21));      // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    }

    bb6: {
        _22 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _16 = &(((*_22) as Arm).0: usize); // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _23 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _17 = &(((*_23) as Arm).0: usize); // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _18 = (*_16);                    // scope 3 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _19 = (*_17);                    // scope 3 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        _10 = Eq(move _18, move _19);    // scope 3 at ui/pattern/bindings-after-at/or-patterns.rs:8:9: 8:14
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:25: 6:26
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
        goto -> bb3;                     // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let mut _4: &str;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let mut _5: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let _6: &str;                        // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let _7: &str;                        // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let _8: &str;                        // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    let _9: &str;                        // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
        _5 = discriminant((*_1));        // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    }

    bb1: {
        _9 = const "Qux";                // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _9;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:14: 12:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
    }

    bb3: {
        _6 = const "Foo";                // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:14: 12:15
    }

    bb4: {
        _7 = const "Bar";                // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:14: 12:15
    }

    bb5: {
        _8 = const "Baz";                // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
        goto -> bb6;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:14: 12:15
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb7; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:15: 12:15
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:17: 12:22>::clone(_1: &Test) -> Test {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:17: 12:22
    let mut _0: Test;                    // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:17: 12:22

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:17: 12:22
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:22: 12:22
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    debug other => _2;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    let mut _0: bool;                    // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    let _3: isize;                       // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    let mut _4: &Test;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    let mut _6: &Test;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    let mut _7: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    let mut _8: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        let _5: isize;                   // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        _3 = discriminant((*_4));        // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        _6 = _2;                         // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        _5 = discriminant((*_6));        // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        _7 = _3;                         // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        _8 = _5;                         // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        _0 = Eq(move _7, move _8);       // scope 2 at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:12:39: 12:39
    }
}

fn test(_1: Option<Test>) -> MatchArm {
    debug foo => _1;                     // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:20:9: 20:12
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:20:31: 20:39
    let mut _2: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:22:20: 22:29
    let mut _3: isize;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:22:15: 22:42
    let _4: std::option::Option<Test>;   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:22:9: 22:12
    let mut _5: bool;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:13: 23:70
    let mut _6: bool;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:69
    let mut _7: bool;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:43
    let mut _8: &std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:24
    let mut _9: &std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
    let mut _10: bool;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:47: 23:69
    let mut _11: &std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:47: 23:50
    let mut _12: &std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
    let mut _13: !;                      // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:13: 23:70
    scope 1 {
        debug bar => _4;                 // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:22:9: 22:12
        let mut _14: &std::option::Option<Test>; // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
        let mut _15: &std::option::Option<Test>; // in scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:21:11: 21:14
        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:21:5: 21:14
    }

    bb1: {
        _0 = MatchArm::Wild;             // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:28:14: 28:28
        goto -> bb14;                    // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:28:14: 28:28
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Test)); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:21:11: 21:14
        switchInt(move _2) -> [0: bb4, 1: bb5, otherwise: bb13]; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:21:5: 21:14
    }

    bb3: {
        _8 = &_4;                        // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:24
        _15 = const _;                   // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
                                         // + literal: Const { ty: &Option<Test>, val: Unevaluated(test, [], Some(promoted[1])) }
        _9 = _15;                        // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
        _7 = <Option<Test> as PartialEq>::eq(move _8, move _9) -> bb9; // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:43
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<Test>, &'b Option<Test>) -> bool {<Option<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = _1;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:22:9: 22:12
        goto -> bb3;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:21:5: 29:6
    }

    bb5: {
        _4 = _1;                         // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:22:9: 22:12
        goto -> bb3;                     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:21:5: 29:6
    }

    bb6: {
        _6 = const true;                 // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:69
        goto -> bb8;                     // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:69
    }

    bb7: {
        _11 = &_4;                       // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:47: 23:50
        _14 = const _;                   // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
                                         // + literal: Const { ty: &Option<Test>, val: Unevaluated(test, [], Some(promoted[0])) }
        _12 = _14;                       // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
        _10 = <Option<Test> as PartialEq>::eq(move _11, move _12) -> bb10; // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:47: 23:69
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:23:47: 23:69
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<Test>, &'b Option<Test>) -> bool {<Option<Test> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _5 = Not(move _6);               // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:13: 23:70
        switchInt(move _5) -> [0: bb12, otherwise: bb11]; // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:13: 23:70
    }

    bb9: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:69
    }

    bb10: {
        _6 = move _10;                   // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:69
        goto -> bb8;                     // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:21: 23:69
    }

    bb11: {
        _13 = core::panicking::panic(const "assertion failed: bar == Some(Test::Foo) || bar == Some(Test::Bar)"); // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:23:13: 23:70
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:23:13: 23:70
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _0 = MatchArm::Arm(const 0_usize); // scope 1 at ui/pattern/bindings-after-at/or-patterns.rs:25:13: 25:29
        goto -> bb14;                    // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:26:9: 26:10
    }

    bb13: {
        _0 = MatchArm::Arm(const 1_usize); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:27:20: 27:36
        goto -> bb14;                    // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:27:20: 27:36
    }

    bb14: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:30:2: 30:2
    }
}

promoted[0] in test: &Option<Test> = {
    let mut _0: &std::option::Option<Test>; // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
    let mut _1: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
    let mut _2: Test;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:59: 23:68

    bb0: {
        _2 = Test::Bar;                  // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:59: 23:68
        _1 = Option::<Test>::Some(move _2); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
        _0 = &_1;                        // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:54: 23:69
    }
}

promoted[1] in test: &Option<Test> = {
    let mut _0: &std::option::Option<Test>; // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
    let mut _1: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
    let mut _2: Test;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:33: 23:42

    bb0: {
        _2 = Test::Foo;                  // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:33: 23:42
        _1 = Option::<Test>::Some(move _2); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
        _0 = &_1;                        // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:23:28: 23:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:32:11: 32:11
    let mut _1: (&MatchArm, &MatchArm);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: MatchArm;                    // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:33:16: 33:37
    let mut _4: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:33:21: 33:36
    let mut _5: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &MatchArm;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &MatchArm;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:34:16: 34:37
    let mut _23: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:34:21: 34:36
    let mut _24: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _25: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _26: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _41: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:35:16: 35:37
    let mut _42: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:35:21: 35:36
    let mut _43: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _44: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _45: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _46: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _48: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _49: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _51: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _52: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _53: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _54: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _55: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _56: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _58: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _60: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:36:16: 36:37
    let mut _61: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:36:21: 36:36
    let mut _62: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _63: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _64: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _67: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _68: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _70: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _71: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _72: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _73: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _74: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _75: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _77: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _78: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _79: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:37:16: 37:26
    let mut _80: std::option::Option<Test>; // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:37:21: 37:25
    let mut _81: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _82: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _83: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _86: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _87: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _89: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _90: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _91: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _92: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _93: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _94: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _96: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _97: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _98: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _99: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _100: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _25;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _26;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _31;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _44;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _45;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _50: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _50;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _63;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _64;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _69: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _69;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _82;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _83;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _88: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _88;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = const Option::<Test>::Some(Test::Foo); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:33:21: 33:36
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:33:21: 33:36
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x00)) }
        _3 = test(move _4) -> bb1;       // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:33:16: 33:37
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:33:16: 33:20
                                         // + literal: Const { ty: fn(Option<Test>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _100 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[4])) }
        _5 = _100;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &MatchArm);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &MatchArm);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <MatchArm as PartialEq>::eq(move _10, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = const Option::<Test>::Some(Test::Bar); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:34:21: 34:36
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:34:21: 34:36
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x01)) }
        _22 = test(move _23) -> bb5;     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:34:16: 34:37
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:34:16: 34:20
                                         // + literal: Const { ty: fn(Option<Test>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = &_22;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _99 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[3])) }
        _24 = _99;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _24);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_20.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_20.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <MatchArm as PartialEq>::eq(move _29, move _30) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _33, move _34, move _36, move _38); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb8: {
        _42 = const Option::<Test>::Some(Test::Baz); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:35:21: 35:36
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:35:21: 35:36
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x02)) }
        _41 = test(move _42) -> bb9;     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:35:16: 35:37
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:35:16: 35:20
                                         // + literal: Const { ty: fn(Option<Test>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb9: {
        _40 = &_41;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[2])) }
        _43 = _98;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _43);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _44 = (_39.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _45 = (_39.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _48 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _49 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _47 = <MatchArm as PartialEq>::eq(move _48, move _49) -> bb10; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _46 = Not(move _47);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _46) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _50 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _52 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _55 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _51 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _52, move _53, move _55, move _57); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb12: {
        _61 = const Option::<Test>::Some(Test::Qux); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:36:21: 36:36
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:36:21: 36:36
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x03)) }
        _60 = test(move _61) -> bb13;    // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:36:16: 36:37
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:36:16: 36:20
                                         // + literal: Const { ty: fn(Option<Test>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb13: {
        _59 = &_60;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _97 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[1])) }
        _62 = _97;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _62);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _63 = (_58.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _64 = (_58.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _67 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _68 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _66 = <MatchArm as PartialEq>::eq(move _67, move _68) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _65 = Not(move _66);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _65) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _69 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _73;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _70 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _71, move _72, move _74, move _76); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb16: {
        _80 = const Option::<Test>::None; // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:37:21: 37:25
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:37:21: 37:25
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x04)) }
        _79 = test(move _80) -> bb17;    // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:37:16: 37:26
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/or-patterns.rs:37:16: 37:20
                                         // + literal: Const { ty: fn(Option<Test>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb17: {
        _78 = &_79;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _96 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[0])) }
        _81 = _96;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _77 = (move _78, move _81);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _82 = (_77.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _83 = (_77.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _86 = _82;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _87 = _83;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _85 = <MatchArm as PartialEq>::eq(move _86, move _87) -> bb18; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _84 = Not(move _85);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _84) -> [0: bb20, otherwise: bb19]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _88 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _90 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = _82;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _92;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _83;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _93 = _94;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _89 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _90, move _91, move _93, move _95); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb20: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:38:2: 38:2
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:37:28: 37:42

    bb0: {
        _1 = MatchArm::Wild;             // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:37:28: 37:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:36:39: 36:55

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:36:39: 36:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:35:39: 35:55

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:35:39: 35:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:34:39: 34:55

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:34:39: 34:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:33:39: 33:55

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:33:39: 33:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:5: 8:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:5: 8:8
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:5: 8:8
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:5: 8:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:5: 8:8
        return;                          // scope 0 at ui/pattern/bindings-after-at/or-patterns.rs:8:5: 8:8
    }
}
