// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:6:10: 6:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:6:17: 6:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:10: 12:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Qux";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Foo";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "Bar";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "Baz";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:17: 12:22>::clone(_1: &Test) -> Test {
    debug self => _1;
    let mut _0: Test;

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns.rs:12:30: 12:39>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn test(_1: Option<Test>) -> MatchArm {
    debug foo => _1;
    let mut _0: MatchArm;
    let mut _2: isize;
    let mut _3: isize;
    let _4: std::option::Option<Test>;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &std::option::Option<Test>;
    let mut _9: bool;
    let mut _10: &std::option::Option<Test>;
    let mut _11: !;
    scope 1 {
        debug bar => _4;
        let mut _12: &std::option::Option<Test>;
        let mut _13: &std::option::Option<Test>;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = MatchArm::Wild;
        goto -> bb14;
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Test));
        switchInt(move _2) -> [0: bb4, 1: bb5, otherwise: bb13];
    }

    bb3: {
        _8 = &_4;
        _13 = const _;
        _7 = <Option<Test> as PartialEq>::eq(move _8, _13) -> [return: bb9, unwind continue];
    }

    bb4: {
        _4 = _1;
        goto -> bb3;
    }

    bb5: {
        _4 = _1;
        goto -> bb3;
    }

    bb6: {
        _6 = const true;
        goto -> bb8;
    }

    bb7: {
        _10 = &_4;
        _12 = const _;
        _9 = <Option<Test> as PartialEq>::eq(move _10, _12) -> [return: bb10, unwind continue];
    }

    bb8: {
        _5 = Not(move _6);
        switchInt(move _5) -> [0: bb12, otherwise: bb11];
    }

    bb9: {
        switchInt(move _7) -> [0: bb7, otherwise: bb6];
    }

    bb10: {
        _6 = move _9;
        goto -> bb8;
    }

    bb11: {
        _11 = core::panicking::panic(const "assertion failed: bar == Some(Test::Foo) || bar == Some(Test::Bar)") -> unwind continue;
    }

    bb12: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb14;
    }

    bb13: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

promoted[0] in test: &Option<Test> = {
    let mut _0: &std::option::Option<Test>;
    let mut _1: std::option::Option<Test>;
    let mut _2: Test;

    bb0: {
        _2 = Test::Bar;
        _1 = Option::<Test>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in test: &Option<Test> = {
    let mut _0: &std::option::Option<Test>;
    let mut _1: std::option::Option<Test>;
    let mut _2: Test;

    bb0: {
        _2 = Test::Foo;
        _1 = Option::<Test>::Some(move _2);
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&MatchArm, &MatchArm);
    let mut _2: &MatchArm;
    let _3: MatchArm;
    let mut _4: std::option::Option<Test>;
    let mut _5: Test;
    let _6: &MatchArm;
    let _7: &MatchArm;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&MatchArm, &MatchArm);
    let mut _14: &MatchArm;
    let _15: MatchArm;
    let mut _16: std::option::Option<Test>;
    let mut _17: Test;
    let _18: &MatchArm;
    let _19: &MatchArm;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&MatchArm, &MatchArm);
    let mut _26: &MatchArm;
    let _27: MatchArm;
    let mut _28: std::option::Option<Test>;
    let mut _29: Test;
    let _30: &MatchArm;
    let _31: &MatchArm;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&MatchArm, &MatchArm);
    let mut _38: &MatchArm;
    let _39: MatchArm;
    let mut _40: std::option::Option<Test>;
    let mut _41: Test;
    let _42: &MatchArm;
    let _43: &MatchArm;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&MatchArm, &MatchArm);
    let mut _50: &MatchArm;
    let _51: MatchArm;
    let mut _52: std::option::Option<Test>;
    let _53: &MatchArm;
    let _54: &MatchArm;
    let mut _55: bool;
    let mut _56: bool;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: &MatchArm;
    let mut _61: &MatchArm;
    let mut _62: &MatchArm;
    let mut _63: &MatchArm;
    let mut _64: &MatchArm;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _53;
        debug right_val => _54;
        let _57: core::panicking::AssertKind;
        scope 10 {
            debug kind => _57;
        }
    }

    bb0: {
        _5 = Test::Foo;
        _4 = Option::<Test>::Some(move _5);
        _3 = test(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _64 = const _;
        _1 = (move _2, _64);
        _6 = (_1.0: &MatchArm);
        _7 = (_1.1: &MatchArm);
        _9 = <MatchArm as PartialEq>::eq(_6, _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb4: {
        _17 = Test::Bar;
        _16 = Option::<Test>::Some(move _17);
        _15 = test(move _16) -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = &_15;
        _63 = const _;
        _13 = (move _14, _63);
        _18 = (_13.0: &MatchArm);
        _19 = (_13.1: &MatchArm);
        _21 = <MatchArm as PartialEq>::eq(_18, _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb8: {
        _29 = Test::Baz;
        _28 = Option::<Test>::Some(move _29);
        _27 = test(move _28) -> [return: bb9, unwind continue];
    }

    bb9: {
        _26 = &_27;
        _62 = const _;
        _25 = (move _26, _62);
        _30 = (_25.0: &MatchArm);
        _31 = (_25.1: &MatchArm);
        _33 = <MatchArm as PartialEq>::eq(_30, _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _34, _30, _31, move _36) -> unwind continue;
    }

    bb12: {
        _41 = Test::Qux;
        _40 = Option::<Test>::Some(move _41);
        _39 = test(move _40) -> [return: bb13, unwind continue];
    }

    bb13: {
        _38 = &_39;
        _61 = const _;
        _37 = (move _38, _61);
        _42 = (_37.0: &MatchArm);
        _43 = (_37.1: &MatchArm);
        _45 = <MatchArm as PartialEq>::eq(_42, _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb16: {
        _52 = Option::<Test>::None;
        _51 = test(move _52) -> [return: bb17, unwind continue];
    }

    bb17: {
        _50 = &_51;
        _60 = const _;
        _49 = (move _50, _60);
        _53 = (_49.0: &MatchArm);
        _54 = (_49.1: &MatchArm);
        _56 = <MatchArm as PartialEq>::eq(_53, _54) -> [return: bb18, unwind continue];
    }

    bb18: {
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _57, _53, _54, move _59) -> unwind continue;
    }

    bb20: {
        return;
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
