// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let _2: &u8;
    let mut _3: (&u8, &u8);
    let mut _4: &u8;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u8;
    let mut _10: u8;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u8, &u8);
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: u8;
    let mut _20: u8;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let _24: &u8;
    let mut _25: !;
    let mut _26: &A;
    let mut _29: &A;
    let mut _30: &A;
    scope 1 {
        debug x => const _;
        debug a => _2;
        let _5: &u8;
        let _6: &u8;
        let _15: &u8;
        let _16: &u8;
        let mut _27: &u8;
        let mut _28: &u8;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug left_val => _15;
            debug right_val => _16;
            let _21: core::panicking::AssertKind;
            scope 5 {
                debug kind => _21;
            }
        }
    }
    scope 6 {
        debug _b => _24;
    }

    bb0: {
        _1 = A { a: const 10_u8, b: const 20_u8 };
        switchInt((_1.1: u8)) -> [20: bb2, otherwise: bb1];
    }

    bb1: {
        _26 = const _;
        _24 = &((*_26).1: u8);
        _25 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _30 = const _;
        _2 = &((*_30).0: u8);
        _29 = const _;
        _4 = &((*_29).0: u8);
        _28 = const _;
        _3 = (move _4, _28);
        _5 = (_3.0: &u8);
        _6 = (_3.1: &u8);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u8, u8>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb4: {
        _27 = const _;
        _14 = (_2, _27);
        _15 = (_14.0: &u8);
        _16 = (_14.1: &u8);
        _19 = (*_15);
        _20 = (*_16);
        _18 = Eq(move _19, move _20);
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<u8, u8>(move _21, _15, _16, move _23) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A { a: const 10_u8, b: const 20_u8 };
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A { a: const 10_u8, b: const 20_u8 };
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A { a: const 10_u8, b: const 20_u8 };
        _0 = &_1;
        return;
    }
}
