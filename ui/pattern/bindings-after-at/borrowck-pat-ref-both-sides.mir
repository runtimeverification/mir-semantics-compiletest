// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _3: main::U;
    let mut _8: (main::U, [main::U; 2]);
    let mut _9: main::U;
    let mut _10: main::U;
    let mut _11: main::U;
    let mut _15: &(main::U, [main::U; 2]);
    let _16: (main::U, [main::U; 2]);
    let mut _17: main::U;
    let mut _18: main::U;
    let mut _19: main::U;
    let mut _22: &main::U;
    let _23: main::U;
    let mut _24: std::result::Result<main::U, main::U>;
    let mut _25: main::U;
    let mut _26: isize;
    scope 1 {
        debug a => const _;
        debug b => const _;
        scope 2 {
            scope 3 {
                let _1: &main::U;
                let _2: &main::U;
                scope 4 {
                    debug a => _1;
                    debug b => _2;
                    scope 5 {
                        scope 6 {
                            let _4: &(main::U, [main::U; 2]);
                            let _5: &main::U;
                            let _6: &main::U;
                            let _7: &main::U;
                            scope 7 {
                                debug a => _4;
                                debug b => _5;
                                debug c => _6;
                                debug d => _7;
                                scope 8 {
                                    scope 9 {
                                        scope 10 {
                                            scope 11 {
                                                let _12: &main::U;
                                                let _13: &main::U;
                                                let _14: &main::U;
                                                scope 12 {
                                                    debug a => _15;
                                                    debug b => _12;
                                                    debug c => _13;
                                                    debug d => _14;
                                                    scope 13 {
                                                        scope 14 {
                                                            scope 15 {
                                                                scope 16 {
                                                                    let _20: &&main::U;
                                                                    let _21: &main::U;
                                                                    scope 17 {
                                                                        debug a => _20;
                                                                        debug b => _21;
                                                                        scope 18 {
                                                                            scope 19 {
                                                                                let _27: &std::result::Result<main::U, main::U>;
                                                                                let _28: &main::U;
                                                                                scope 20 {
                                                                                    debug a => _27;
                                                                                    debug b => _28;
                                                                                    scope 21 {
                                                                                        scope 22 {
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = u() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = &_3;
        _9 = u() -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = u() -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = u() -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = &(_8.1: [main::U; 2])[0 of 2];
        _7 = &(_8.1: [main::U; 2])[1 of 2];
        _5 = &(_8.0: main::U);
        _4 = &_8;
        _17 = u() -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = u() -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = u() -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = &_16;
        _13 = &((*_15).1: [main::U; 2])[0 of 2];
        _14 = &((*_15).1: [main::U; 2])[1 of 2];
        _12 = &((*_15).0: main::U);
        _23 = u() -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = &_23;
        _21 = _22;
        _20 = &_22;
        _25 = u() -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = Result::<U, U>::Ok(const U);
        _26 = discriminant(_24);
        switchInt(move _26) -> [0: bb13, 1: bb10, otherwise: bb11];
    }

    bb10: {
        _27 = &_24;
        _28 = &((_24 as Err).0: main::U);
        goto -> bb12;
    }

    bb11: {
        unreachable;
    }

    bb12: {
        return;
    }

    bb13: {
        _27 = &_24;
        _28 = &((_24 as Ok).0: main::U);
        goto -> bb12;
    }
}

promoted[0] in main: &U = {
    let mut _0: &main::U;
    let mut _1: main::U;

    bb0: {
        _1 = U;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &U = {
    let mut _0: &main::U;
    let mut _1: main::U;

    bb0: {
        _1 = U;
        _0 = &_1;
        return;
    }
}

fn u() -> U {
    let mut _0: main::U;

    bb0: {
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}

fn f1(_1: (U, [U; 4])) -> () {
    let mut _0: ();
    let _2: &(main::U, [main::U; 4]);
    let _3: &main::U;
    let _4: &main::U;
    let _5: &[main::U; 2];
    let _6: &main::U;
    scope 1 {
        debug a => _2;
        debug b => _3;
        debug c => _4;
        debug mid => _5;
        debug d => _6;
    }

    bb0: {
        _4 = &(_1.1: [main::U; 4])[0 of 4];
        _5 = &(_1.1: [main::U; 4])[1..3];
        _6 = &(_1.1: [main::U; 4])[3 of 4];
        _3 = &(_1.0: main::U);
        _2 = &_1;
        return;
    }
}

f1::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
