// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let mut _3: isize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let _4: &usize;                      // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let mut _6: &str;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let _7: &str;                        // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    let mut _9: &&usize;                 // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    let _10: &&usize;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let mut _12: &str;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    let _13: &str;                       // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    }

    bb1: {
        _11 = &mut (*_2);                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
        _13 = const "Wild";              // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
        _0 = Formatter::<'_>::write_str(move _11, move _12) -> bb4; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize); // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _5 = &mut (*_2);                 // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
        _7 = const "Arm";                // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
        _10 = &_4;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _9 = _10;                        // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:15: 6:15
    }
}

fn <impl at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    debug other => _2;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _0: bool;                    // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let _3: isize;                       // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _4: &MatchArm;               // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _6: &MatchArm;               // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _7: bool;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _8: isize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _9: isize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _10: bool;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _11: (&MatchArm, &MatchArm); // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _12: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _13: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _14: isize;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _15: isize;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _18: usize;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    let mut _19: usize;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
    let mut _20: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _21: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _22: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    let mut _23: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        let _5: isize;                   // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
            let _16: &usize;             // in scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
            let _17: &usize;             // in scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
                debug __arg1_0 => _17;   // in scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _3 = discriminant((*_4));        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _6 = _2;                         // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _5 = discriminant((*_6));        // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _8 = _3;                         // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _9 = _5;                         // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        goto -> bb3;                     // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _13 = _2;                        // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _11 = (move _12, move _13);      // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _20 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _15 = discriminant((*_20));      // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:6:26: 6:26
    }

    bb4: {
        _21 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        _14 = discriminant((*_21));      // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    }

    bb6: {
        _22 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _16 = &(((*_22) as Arm).0: usize); // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _23 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _17 = &(((*_23) as Arm).0: usize); // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _18 = (*_16);                    // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _19 = (*_17);                    // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        _10 = Eq(move _18, move _19);    // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:8:9: 8:14
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:25: 6:26
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
        goto -> bb3;                     // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26
    }
}

fn test(_1: &[i32]) -> MatchArm {
    debug foo => _1;                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:12:9: 12:12
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:12:25: 12:33
    let mut _2: usize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
    let mut _3: usize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
    let mut _4: bool;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
    let mut _5: usize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
    let mut _6: usize;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
    let mut _7: bool;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
    let _8: &[i32];                      // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:10: 14:13
    let _9: &&[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:10: 14:13
    let _10: &i32;                       // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:20: 14:21
    let _11: &&i32;                      // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:20: 14:21
    let mut _12: bool;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:26: 14:33
    let mut _13: &&i32;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:26: 14:27
    let mut _14: &&i32;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
    let mut _15: std::slice::Iter<'_, i32>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    let mut _16: &[i32];                 // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    let mut _18: std::option::Option<&i32>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    let mut _19: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    let mut _20: &mut std::slice::Iter<'_, i32>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    let mut _21: isize;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:15:13: 17:14
    let mut _23: bool;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:17: 16:32
    let mut _24: bool;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:25: 16:31
    let mut _25: &&i32;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:25: 16:26
    let mut _26: &&i32;                  // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
    let mut _27: !;                      // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:17: 16:32
    let _28: &[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:9: 21:12
    let _29: &i32;                       // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:16: 21:18
    let _30: &i32;                       // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:24: 21:26
    let mut _31: (&&i32, &&i32);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _32: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _33: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _48: (&&i32, &&i32);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _49: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _50: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _55: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _56: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _58: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _59: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _60: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _61: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _62: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _63: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _65: (&&i32, &&i32);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _66: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _67: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _72: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _73: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _75: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _76: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _77: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _78: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _79: &&i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _80: &&i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _82: (&&[i32], &&[i32; 4]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _83: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _84: &&[i32; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _89: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _90: &&[i32; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _94: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _95: &&[i32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _96: &&[i32; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _97: &&[i32; 4];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _104: &&i32;                 // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
    scope 1 {
        debug bar => _8;                 // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:14:10: 14:13
        debug bar => _9;                 // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:14:10: 14:13
        debug n => _10;                  // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:14:20: 14:21
        debug n => _11;                  // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:14:20: 14:21
        let mut _17: std::slice::Iter<'_, i32>; // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
        scope 2 {
            debug iter => _17;           // in scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
            let _22: &i32;               // in scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:17: 15:18
            scope 3 {
                debug i => _22;          // in scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:15:17: 15:18
                let mut _103: &&i32;     // in scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
            }
        }
    }
    scope 4 {
        debug bar => _28;                // in scope 4 at ui/pattern/bindings-after-at/slice-patterns.rs:21:9: 21:12
        debug x0 => _29;                 // in scope 4 at ui/pattern/bindings-after-at/slice-patterns.rs:21:16: 21:18
        debug xn => _30;                 // in scope 4 at ui/pattern/bindings-after-at/slice-patterns.rs:21:24: 21:26
        let _34: &&i32;                  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _35: &&i32;                  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _51: &&i32;                  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _52: &&i32;                  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _68: &&i32;                  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _69: &&i32;                  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _85: &&[i32];                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _86: &&[i32; 4];             // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _99: &&[i32; 4];         // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _100: &&i32;             // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _101: &&i32;             // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _102: &&i32;             // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 5 {
            debug left_val => _34;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _35;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _40: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _40;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug left_val => _51;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _52;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _57: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 8 {
                debug kind => _57;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 9 {
            debug left_val => _68;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _69;      // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _74: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 10 {
                debug kind => _74;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 11 {
            debug left_val => _85;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _86;      // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _91: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 12 {
                debug kind => _91;       // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = Len((*_1));                 // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
        _6 = const 1_usize;              // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
        _7 = Ge(move _5, move _6);       // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:9: 14:22
    }

    bb1: {
        _0 = MatchArm::Wild;             // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:29:14: 29:28
        goto -> bb27;                    // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:29:14: 29:28
    }

    bb2: {
        _8 = &(*_1)[:-1];                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:10: 14:13
        _9 = &_8;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:10: 14:13
        _10 = &(*_1)[-1 of 1];           // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:20: 14:21
        _11 = &_10;                      // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:20: 14:21
        _13 = _11;                       // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:26: 14:27
        _104 = const _;                  // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
                                         // + literal: Const { ty: &&i32, val: Unevaluated(test, [], Some(promoted[5])) }
        _14 = _104;                      // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
        _12 = <&i32 as PartialEq>::eq(move _13, move _14) -> bb3; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:26: 14:33
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:14:26: 14:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:26: 14:33
    }

    bb4: {
        _16 = _8;                        // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
        _15 = <&[i32] as IntoIterator>::into_iter(move _16) -> bb6; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
                                         // + literal: Const { ty: fn(&[i32]) -> <&[i32] as IntoIterator>::IntoIter {<&[i32] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _2 = Len((*_1));                 // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
        _3 = const 2_usize;              // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
        _4 = Ge(move _2, move _3);       // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
        switchInt(move _4) -> [0: bb1, otherwise: bb14]; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:15: 21:27
    }

    bb6: {
        _17 = move _15;                  // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:13: 17:14
    }

    bb7: {
        _20 = &mut _17;                  // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
        _19 = &mut (*_20);               // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
        _18 = <std::slice::Iter<'_, i32> as Iterator>::next(move _19) -> bb8; // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, i32>) -> Option<<std::slice::Iter<'_, i32> as Iterator>::Item> {<std::slice::Iter<'_, i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = discriminant(_18);         // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
        switchInt(move _21) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    }

    bb9: {
        _22 = ((_18 as Some).0: &i32);   // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:17: 15:18
        _25 = &_22;                      // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:25: 16:26
        _103 = const _;                  // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
                                         // + literal: Const { ty: &&i32, val: Unevaluated(test, [], Some(promoted[4])) }
        _26 = _103;                      // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
        _24 = <&i32 as PartialOrd>::lt(move _25, move _26) -> bb12; // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:25: 16:31
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:16:25: 16:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb10: {
        unreachable;                     // scope 2 at ui/pattern/bindings-after-at/slice-patterns.rs:15:22: 15:25
    }

    bb11: {
        _0 = MatchArm::Arm(const 0_usize); // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:19:13: 19:29
        goto -> bb27;                    // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:20:9: 20:10
    }

    bb12: {
        _23 = Not(move _24);             // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:17: 16:32
        switchInt(move _23) -> [0: bb7, otherwise: bb13]; // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:17: 16:32
    }

    bb13: {
        _27 = core::panicking::panic(const "assertion failed: i < &5"); // scope 3 at ui/pattern/bindings-after-at/slice-patterns.rs:16:17: 16:32
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:16:17: 16:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _28 = _1;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:9: 21:12
        _29 = &(*_1)[0 of 2];            // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:16: 21:18
        _30 = &(*_1)[-1 of 2];           // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:21:24: 21:26
        _32 = &_29;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = const _;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&i32, val: Unevaluated(test, [], Some(promoted[3])) }
        _33 = _102;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _31 = (move _32, move _33);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_31.0: &&i32);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_31.1: &&i32);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <&i32 as PartialEq>::eq(move _38, move _39) -> bb15; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _36 = Not(move _37);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb17, otherwise: bb16]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _40 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<&i32, &i32>(move _42, move _43, move _45, move _47); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &i32, &'b &i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&i32, &i32>}, val: Value(<ZST>) }
    }

    bb17: {
        _49 = &_29;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const _;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&i32, val: Unevaluated(test, [], Some(promoted[2])) }
        _50 = _101;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _48 = (move _49, move _50);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _51 = (_48.0: &&i32);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _52 = (_48.1: &&i32);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _55 = _51;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _56 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _54 = <&i32 as PartialEq>::eq(move _55, move _56) -> bb18; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _53 = Not(move _54);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _53) -> [0: bb20, otherwise: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _57 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _59 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = _51;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _61;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _52;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _58 = core::panicking::assert_failed::<&i32, &i32>(move _59, move _60, move _62, move _64); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &i32, &'b &i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&i32, &i32>}, val: Value(<ZST>) }
    }

    bb20: {
        _66 = &_30;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _100 = const _;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&i32, val: Unevaluated(test, [], Some(promoted[1])) }
        _67 = _100;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _65 = (move _66, move _67);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _68 = (_65.0: &&i32);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _69 = (_65.1: &&i32);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _72 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _73 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _71 = <&i32 as PartialEq>::eq(move _72, move _73) -> bb21; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &i32, &'b &i32) -> bool {<&i32 as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        _70 = Not(move _71);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _70) -> [0: bb23, otherwise: bb22]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _74 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = _68;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _78;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _69;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = _80;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _75 = core::panicking::assert_failed::<&i32, &i32>(move _76, move _77, move _79, move _81); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &i32, &'b &i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&i32, &i32>}, val: Value(<ZST>) }
    }

    bb23: {
        _83 = &_28;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _99 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 4], val: Unevaluated(test, [], Some(promoted[0])) }
        _84 = _99;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _82 = (move _83, move _84);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _85 = (_82.0: &&[i32]);          // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _86 = (_82.1: &&[i32; 4]);       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _89 = _85;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _90 = _86;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _88 = <&[i32] as PartialEq<&[i32; 4]>>::eq(move _89, move _90) -> bb24; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32], &'b &[i32; 4]) -> bool {<&[i32] as PartialEq<&[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _87 = Not(move _88);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _87) -> [0: bb26, otherwise: bb25]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _91 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = _85;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _95;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _86;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = _97;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _92 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _93, move _94, move _96, move _98); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32], &'b &[i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32], &[i32; 4]>}, val: Value(<ZST>) }
    }

    bb26: {
        _0 = MatchArm::Arm(const 1_usize); // scope 4 at ui/pattern/bindings-after-at/slice-patterns.rs:27:13: 27:29
        goto -> bb27;                    // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:28:9: 28:10
    }

    bb27: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:31:2: 31:2
    }
}

promoted[0] in test: &&[i32; 4] = {
    let mut _0: &&[i32; 4];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 4];               // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:25:29: 25:42
    let mut _2: [i32; 4];                // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:25:30: 25:42

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:25:30: 25:42
        _1 = &_2;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:25:29: 25:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &i32;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:24:28: 24:30
    let mut _2: i32;                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:24:29: 24:30

    bb0: {
        _2 = const 4_i32;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:24:29: 24:30
        _1 = &_2;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:24:28: 24:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &i32;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:23:28: 23:30
    let mut _2: i32;                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:23:29: 23:30

    bb0: {
        _2 = const 1_i32;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:23:29: 23:30
        _1 = &_2;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:23:28: 23:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &i32;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:22:28: 22:30
    let mut _2: i32;                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:22:29: 22:30

    bb0: {
        _2 = const 1_i32;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:22:29: 22:30
        _1 = &_2;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:22:28: 22:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in test: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
    let mut _1: &i32;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
    let mut _2: &i32;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
    let mut _3: i32;                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:30: 16:31

    bb0: {
        _3 = const 5_i32;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:30: 16:31
        _2 = &_3;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
        _1 = &(*_2);                     // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
        _0 = &_1;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:16:29: 16:31
    }
}

promoted[5] in test: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
    let mut _1: &i32;                    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
    let mut _2: i32;                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:32: 14:33

    bb0: {
        _2 = const 5_i32;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:32: 14:33
        _1 = &_2;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
        _0 = &_1;                        // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:14:31: 14:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:33:11: 33:11
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:34:9: 34:12
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: (&MatchArm, &MatchArm);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:16: 36:26
    let mut _11: &[i32];                 // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
    let _12: &[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
    let mut _13: &std::vec::Vec<i32>;    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
    let _14: &std::vec::Vec<i32>;        // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
    let mut _15: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _32: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:16: 37:31
    let mut _33: &[i32];                 // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:21: 37:30
    let _34: &[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:21: 37:30
    let _35: &[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:22: 37:30
    let mut _36: &std::vec::Vec<i32>;    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:22: 37:25
    let mut _37: std::ops::RangeTo<usize>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:26: 37:29
    let mut _38: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _43: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _44: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _46: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _47: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _48: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _49: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _50: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _51: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _53: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _54: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _55: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:16: 38:32
    let mut _56: &[i32];                 // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:21: 38:31
    let _57: &[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:21: 38:31
    let _58: &[i32];                     // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:22: 38:31
    let mut _59: &std::vec::Vec<i32>;    // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:22: 38:25
    let mut _60: std::ops::Range<usize>; // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:26: 38:30
    let mut _61: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _79: *const [i32; 5];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:34:9: 34:12
        let _16: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _17: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _39: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _40: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _62: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _63: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _76: &MatchArm;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _77: &MatchArm;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _78: &MatchArm;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _17;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _22;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _39;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _40;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _45: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _45;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug left_val => _62;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _63;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _68: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 8 {
                debug kind => _68;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 20_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _79 = (((_7.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_79) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = &_1;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
        _13 = _14;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
        _12 = <Vec<i32> as Deref>::deref(move _13) -> [return: bb3, unwind: bb19]; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> &'a <Vec<i32> as Deref>::Target {<Vec<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = _12;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:36:21: 36:25
        _10 = test(move _11) -> [return: bb4, unwind: bb19]; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:36:16: 36:26
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:36:16: 36:20
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[2])) }
        _15 = _78;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _15);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_8.0: &MatchArm);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_8.1: &MatchArm);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <MatchArm as PartialEq>::eq(move _20, move _21) -> [return: bb5, unwind: bb19]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _24, move _25, move _27, move _29) -> bb19; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb7: {
        _36 = &_1;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:37:22: 37:25
        _37 = const RangeTo::<usize> {{ end: 4_usize }}; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:37:26: 37:29
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:37:26: 37:29
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000004)) }
        _35 = <Vec<i32> as Index<RangeTo<usize>>>::index(move _36, move _37) -> [return: bb8, unwind: bb19]; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:37:22: 37:30
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:37:22: 37:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, RangeTo<usize>) -> &'a <Vec<i32> as Index<RangeTo<usize>>>::Output {<Vec<i32> as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _34 = _35;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:37:21: 37:30
        _33 = _34;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:37:21: 37:30
        _32 = test(move _33) -> [return: bb9, unwind: bb19]; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:37:16: 37:31
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:37:16: 37:20
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb9: {
        _31 = &_32;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _77 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[1])) }
        _38 = _77;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _38);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _39 = (_30.0: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _40 = (_30.1: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _43 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _44 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _42 = <MatchArm as PartialEq>::eq(move _43, move _44) -> [return: bb10, unwind: bb19]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _41 = Not(move _42);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _41) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _45 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _51 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _46 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _47, move _48, move _50, move _52) -> bb19; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb12: {
        _59 = &_1;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:38:22: 38:25
        _60 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize }; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:38:26: 38:30
        _58 = <Vec<i32> as Index<std::ops::Range<usize>>>::index(move _59, move _60) -> [return: bb13, unwind: bb19]; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:38:22: 38:31
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:38:22: 38:31
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, std::ops::Range<usize>) -> &'a <Vec<i32> as Index<std::ops::Range<usize>>>::Output {<Vec<i32> as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb13: {
        _57 = _58;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:38:21: 38:31
        _56 = _57;                       // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:38:21: 38:31
        _55 = test(move _56) -> [return: bb14, unwind: bb19]; // scope 1 at ui/pattern/bindings-after-at/slice-patterns.rs:38:16: 38:32
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/slice-patterns.rs:38:16: 38:20
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb14: {
        _54 = &_55;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _76 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[0])) }
        _61 = _76;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _53 = (move _54, move _61);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_53.0: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_53.1: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = <MatchArm as PartialEq>::eq(move _66, move _67) -> [return: bb15, unwind: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        _64 = Not(move _65);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb17, otherwise: bb16]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _68 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _70, move _71, move _73, move _75) -> bb19; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_1) -> bb18;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:39:1: 39:2
    }

    bb18: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:39:2: 39:2
    }

    bb19 (cleanup): {
        drop(_1) -> bb20;                // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:39:1: 39:2
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:33:1: 39:2
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:34: 38:48

    bb0: {
        _1 = MatchArm::Wild;             // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:38:34: 38:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:33: 37:49

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:37:33: 37:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:28: 36:44

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:36:28: 36:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:5: 8:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:5: 8:8
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:5: 8:8
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:5: 8:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:5: 8:8
        return;                          // scope 0 at ui/pattern/bindings-after-at/slice-patterns.rs:8:5: 8:8
    }
}
