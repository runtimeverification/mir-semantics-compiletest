// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/slice-patterns.rs:6:10: 6:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/slice-patterns.rs:6:17: 6:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn test(_1: &[i32]) -> MatchArm {
    debug foo => _1;
    let mut _0: MatchArm;
    let mut _2: usize;
    let mut _3: usize;
    let mut _4: bool;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: bool;
    let _8: &[i32];
    let _9: &&[i32];
    let _10: &i32;
    let _11: &&i32;
    let mut _12: bool;
    let mut _13: std::slice::Iter<'_, i32>;
    let mut _14: &[i32];
    let mut _16: std::option::Option<&i32>;
    let mut _17: &mut std::slice::Iter<'_, i32>;
    let mut _18: isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: &&i32;
    let mut _23: !;
    let _24: &[i32];
    let _25: &i32;
    let _26: &i32;
    let mut _27: (&&i32, &&i32);
    let mut _28: &&i32;
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&&i32, &&i32);
    let mut _37: &&i32;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&&i32, &&i32);
    let mut _46: &&i32;
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: (&&[i32], &&[i32; 4]);
    let mut _55: &&[i32];
    let mut _58: bool;
    let mut _59: bool;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _68: &&i32;
    scope 1 {
        debug bar => _8;
        debug bar => _9;
        debug n => _10;
        debug n => _11;
        let mut _15: std::slice::Iter<'_, i32>;
        scope 2 {
            debug iter => _15;
            let _19: &i32;
            scope 3 {
                debug i => _19;
                let mut _67: &&i32;
            }
        }
    }
    scope 4 {
        debug bar => _24;
        debug x0 => _25;
        debug xn => _26;
        let _29: &&i32;
        let _30: &&i32;
        let _38: &&i32;
        let _39: &&i32;
        let _47: &&i32;
        let _48: &&i32;
        let _56: &&[i32];
        let _57: &&[i32; 4];
        let mut _63: &&[i32; 4];
        let mut _64: &&i32;
        let mut _65: &&i32;
        let mut _66: &&i32;
        scope 5 {
            debug left_val => _29;
            debug right_val => _30;
            let _33: core::panicking::AssertKind;
            scope 6 {
                debug kind => _33;
            }
        }
        scope 7 {
            debug left_val => _38;
            debug right_val => _39;
            let _42: core::panicking::AssertKind;
            scope 8 {
                debug kind => _42;
            }
        }
        scope 9 {
            debug left_val => _47;
            debug right_val => _48;
            let _51: core::panicking::AssertKind;
            scope 10 {
                debug kind => _51;
            }
        }
        scope 11 {
            debug left_val => _56;
            debug right_val => _57;
            let _60: core::panicking::AssertKind;
            scope 12 {
                debug kind => _60;
            }
        }
    }

    bb0: {
        _5 = Len((*_1));
        _6 = const 1_usize;
        _7 = Ge(move _5, move _6);
        switchInt(move _7) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = MatchArm::Wild;
        goto -> bb27;
    }

    bb2: {
        _8 = &(*_1)[:-1];
        _9 = &_8;
        _10 = &(*_1)[-1 of 1];
        _11 = &_10;
        _68 = const _;
        _12 = <&i32 as PartialEq>::eq(_11, _68) -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = _8;
        _13 = <&[i32] as IntoIterator>::into_iter(move _14) -> [return: bb6, unwind continue];
    }

    bb5: {
        _2 = Len((*_1));
        _3 = const 2_usize;
        _4 = Ge(move _2, move _3);
        switchInt(move _4) -> [0: bb1, otherwise: bb14];
    }

    bb6: {
        _15 = move _13;
        goto -> bb7;
    }

    bb7: {
        _17 = &mut _15;
        _16 = <std::slice::Iter<'_, i32> as Iterator>::next(_17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = discriminant(_16);
        switchInt(move _18) -> [0: bb11, 1: bb9, otherwise: bb10];
    }

    bb9: {
        _19 = ((_16 as Some).0: &i32);
        _22 = &_19;
        _67 = const _;
        _21 = <&i32 as PartialOrd>::lt(move _22, _67) -> [return: bb12, unwind continue];
    }

    bb10: {
        unreachable;
    }

    bb11: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb27;
    }

    bb12: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb13];
    }

    bb13: {
        _23 = core::panicking::panic(const "assertion failed: i < &5") -> unwind continue;
    }

    bb14: {
        _24 = _1;
        _25 = &(*_1)[0 of 2];
        _26 = &(*_1)[-1 of 2];
        _28 = &_25;
        _66 = const _;
        _27 = (move _28, _66);
        _29 = (_27.0: &&i32);
        _30 = (_27.1: &&i32);
        _32 = <&i32 as PartialEq>::eq(_29, _30) -> [return: bb15, unwind continue];
    }

    bb15: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<&i32, &i32>(move _33, _29, _30, move _35) -> unwind continue;
    }

    bb17: {
        _37 = &_25;
        _65 = const _;
        _36 = (move _37, _65);
        _38 = (_36.0: &&i32);
        _39 = (_36.1: &&i32);
        _41 = <&i32 as PartialEq>::eq(_38, _39) -> [return: bb18, unwind continue];
    }

    bb18: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<&i32, &i32>(move _42, _38, _39, move _44) -> unwind continue;
    }

    bb20: {
        _46 = &_26;
        _64 = const _;
        _45 = (move _46, _64);
        _47 = (_45.0: &&i32);
        _48 = (_45.1: &&i32);
        _50 = <&i32 as PartialEq>::eq(_47, _48) -> [return: bb21, unwind continue];
    }

    bb21: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<&i32, &i32>(move _51, _47, _48, move _53) -> unwind continue;
    }

    bb23: {
        _55 = &_24;
        _63 = const _;
        _54 = (move _55, _63);
        _56 = (_54.0: &&[i32]);
        _57 = (_54.1: &&[i32; 4]);
        _59 = <&[i32] as PartialEq<&[i32; 4]>>::eq(_56, _57) -> [return: bb24, unwind continue];
    }

    bb24: {
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _60, _56, _57, move _62) -> unwind continue;
    }

    bb26: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb27;
    }

    bb27: {
        return;
    }
}

promoted[0] in test: &&[i32; 4] = {
    let mut _0: &&[i32; 4];
    let mut _1: &[i32; 4];
    let mut _2: [i32; 4];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in test: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 4_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in test: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 1_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[3] in test: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 1_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[4] in test: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: &i32;
    let mut _3: i32;

    bb0: {
        _3 = const 5_i32;
        _2 = &_3;
        _1 = &(*_2);
        _0 = &_1;
        return;
    }
}

promoted[5] in test: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 5_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 5]>;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: &MatchArm;
    let _9: MatchArm;
    let mut _10: &[i32];
    let _11: &[i32];
    let _12: &std::vec::Vec<i32>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: (&MatchArm, &MatchArm);
    let mut _21: &MatchArm;
    let _22: MatchArm;
    let _23: &[i32];
    let _24: &[i32];
    let mut _25: &std::vec::Vec<i32>;
    let mut _26: std::ops::RangeTo<usize>;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&MatchArm, &MatchArm);
    let mut _35: &MatchArm;
    let _36: MatchArm;
    let _37: &[i32];
    let _38: &[i32];
    let mut _39: &std::vec::Vec<i32>;
    let mut _40: std::ops::Range<usize>;
    let mut _43: bool;
    let mut _44: bool;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: *const [i32; 5];
    let mut _52: *const ();
    let mut _53: usize;
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: bool;
    scope 1 {
        debug foo => _1;
        let _13: &MatchArm;
        let _14: &MatchArm;
        let _27: &MatchArm;
        let _28: &MatchArm;
        let _41: &MatchArm;
        let _42: &MatchArm;
        let mut _48: &MatchArm;
        let mut _49: &MatchArm;
        let mut _50: &MatchArm;
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 4 {
                debug kind => _17;
            }
        }
        scope 5 {
            debug left_val => _27;
            debug right_val => _28;
            let _31: core::panicking::AssertKind;
            scope 6 {
                debug kind => _31;
            }
        }
        scope 7 {
            debug left_val => _41;
            debug right_val => _42;
            let _45: core::panicking::AssertKind;
            scope 8 {
                debug kind => _45;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 5]);
        _4 = AlignOf([i32; 5]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 5]);
        _51 = (((_6.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]);
        _52 = _51 as *const () (PtrToPtr);
        _53 = _52 as usize (Transmute);
        _54 = AlignOf(i32);
        _55 = Sub(_54, const 1_usize);
        _56 = BitAnd(_53, _55);
        _57 = Eq(_56, const 0_usize);
        assert(_57, "misaligned pointer dereference: address must be a multiple of {} but is {}", _54, _53) -> [success: bb21, unwind unreachable];
    }

    bb2: {
        _12 = &_1;
        _11 = <Vec<i32> as Deref>::deref(_12) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _10 = _11;
        _9 = test(move _10) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _8 = &_9;
        _50 = const _;
        _7 = (move _8, _50);
        _13 = (_7.0: &MatchArm);
        _14 = (_7.1: &MatchArm);
        _16 = <MatchArm as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _17, _13, _14, move _19) -> bb19;
    }

    bb7: {
        _25 = &_1;
        _26 = RangeTo::<usize> { end: const 4_usize };
        _24 = <Vec<i32> as Index<RangeTo<usize>>>::index(move _25, move _26) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _23 = _24;
        _22 = test(_23) -> [return: bb9, unwind: bb19];
    }

    bb9: {
        _21 = &_22;
        _49 = const _;
        _20 = (move _21, _49);
        _27 = (_20.0: &MatchArm);
        _28 = (_20.1: &MatchArm);
        _30 = <MatchArm as PartialEq>::eq(_27, _28) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _31, _27, _28, move _33) -> bb19;
    }

    bb12: {
        _39 = &_1;
        _40 = std::ops::Range::<usize> { start: const 0_usize, end: const 1_usize };
        _38 = <Vec<i32> as Index<std::ops::Range<usize>>>::index(move _39, move _40) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _37 = _38;
        _36 = test(_37) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _35 = &_36;
        _48 = const _;
        _34 = (move _35, _48);
        _41 = (_34.0: &MatchArm);
        _42 = (_34.1: &MatchArm);
        _44 = <MatchArm as PartialEq>::eq(_41, _42) -> [return: bb15, unwind: bb19];
    }

    bb15: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _45, _41, _42, move _47) -> bb19;
    }

    bb17: {
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }

    bb21: {
        (*_51) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
