// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/or-patterns-box-patterns.rs:7:10: 7:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns-box-patterns.rs:7:17: 7:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns-box-patterns.rs:13:10: 13:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Qux";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Foo";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "Bar";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "Baz";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/or-patterns-box-patterns.rs:13:17: 13:26>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _0 = Eq(_3, _4);
        return;
    }
}

fn test(_1: Option<Box<Test>>) -> MatchArm {
    debug foo => _1;
    let mut _0: MatchArm;
    let mut _2: isize;
    let mut _3: isize;
    let _4: &std::option::Option<std::boxed::Box<Test>>;
    let mut _5: (&&std::option::Option<std::boxed::Box<Test>>, &&std::option::Option<std::boxed::Box<Test>>);
    let mut _6: &&std::option::Option<std::boxed::Box<Test>>;
    let mut _7: &&std::option::Option<std::boxed::Box<Test>>;
    let _8: &std::option::Option<std::boxed::Box<Test>>;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let _16: &std::boxed::Box<Test>;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: &Test;
    let mut _21: bool;
    let mut _22: &Test;
    let mut _23: !;
    let mut _26: std::boxed::Box<Test>;
    let mut _27: std::boxed::Box<Test>;
    let mut _28: std::boxed::Box<Test>;
    let mut _29: *const Test;
    let mut _30: *const Test;
    let mut _31: *const Test;
    let mut _44: *const ();
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    scope 1 {
        debug bar => _4;
        let _9: &&std::option::Option<std::boxed::Box<Test>>;
        let _10: &&std::option::Option<std::boxed::Box<Test>>;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
    }
    scope 4 {
        debug bar => _16;
        let mut _24: &Test;
        let mut _25: &Test;
        let mut _32: *const ();
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: bool;
        let mut _38: *const ();
        let mut _39: usize;
        let mut _40: usize;
        let mut _41: usize;
        let mut _42: usize;
        let mut _43: bool;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = MatchArm::Wild;
        goto -> bb19;
    }

    bb2: {
        _26 = deref_copy ((_1 as Some).0: std::boxed::Box<Test>);
        _29 = (((_26.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _44 = _29 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(Test);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb25, unwind unreachable];
    }

    bb3: {
        _6 = &_4;
        _8 = &_1;
        _7 = &_8;
        _5 = (move _6, move _7);
        _9 = (_5.0: &&std::option::Option<std::boxed::Box<Test>>);
        _10 = (_5.1: &&std::option::Option<std::boxed::Box<Test>>);
        _12 = <&Option<Box<Test>> as PartialEq>::eq(_9, _10) -> [return: bb6, unwind: bb21];
    }

    bb4: {
        _4 = &_1;
        goto -> bb3;
    }

    bb5: {
        _4 = &_1;
        goto -> bb3;
    }

    bb6: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<&Option<Box<Test>>, &Option<Box<Test>>>(move _13, _9, _10, move _15) -> bb21;
    }

    bb8: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb19;
    }

    bb9: {
        _27 = deref_copy (*_16);
        _30 = (((_27.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _38 = _30 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(Test);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb24, unwind unreachable];
    }

    bb10: {
        _16 = &((_1 as Some).0: std::boxed::Box<Test>);
        goto -> bb9;
    }

    bb11: {
        _16 = &((_1 as Some).0: std::boxed::Box<Test>);
        goto -> bb9;
    }

    bb12: {
        _18 = const true;
        goto -> bb14;
    }

    bb13: {
        _28 = deref_copy (*_16);
        _31 = (((_28.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test);
        _32 = _31 as *const () (PtrToPtr);
        _33 = _32 as usize (Transmute);
        _34 = AlignOf(Test);
        _35 = Sub(_34, const 1_usize);
        _36 = BitAnd(_33, _35);
        _37 = Eq(_36, const 0_usize);
        assert(_37, "misaligned pointer dereference: address must be a multiple of {} but is {}", _34, _33) -> [success: bb23, unwind unreachable];
    }

    bb14: {
        _17 = Not(move _18);
        switchInt(move _17) -> [0: bb18, otherwise: bb17];
    }

    bb15: {
        switchInt(move _19) -> [0: bb13, otherwise: bb12];
    }

    bb16: {
        _18 = move _21;
        goto -> bb14;
    }

    bb17: {
        _23 = core::panicking::panic(const "assertion failed: **bar == Test::Baz || **bar == Test::Qux") -> bb21;
    }

    bb18: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb19;
    }

    bb19: {
        drop(_1) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_1) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        resume;
    }

    bb23: {
        _22 = &(*_31);
        _24 = const _;
        _21 = <Test as PartialEq>::eq(move _22, _24) -> [return: bb16, unwind: bb21];
    }

    bb24: {
        _20 = &(*_30);
        _25 = const _;
        _19 = <Test as PartialEq>::eq(move _20, _25) -> [return: bb15, unwind: bb21];
    }

    bb25: {
        _2 = discriminant((*_29));
        switchInt(move _2) -> [0: bb4, 1: bb5, 2: bb10, 3: bb11, otherwise: bb26];
    }

    bb26: {
        unreachable;
    }
}

promoted[0] in test: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::Qux;
        _0 = &_1;
        return;
    }
}

promoted[1] in test: &Test = {
    let mut _0: &Test;
    let mut _1: Test;

    bb0: {
        _1 = Test::Baz;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&MatchArm, &MatchArm);
    let mut _2: &MatchArm;
    let _3: MatchArm;
    let mut _4: std::option::Option<std::boxed::Box<Test>>;
    let mut _5: std::boxed::Box<Test>;
    let mut _6: Test;
    let _7: &MatchArm;
    let _8: &MatchArm;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&MatchArm, &MatchArm);
    let mut _15: &MatchArm;
    let _16: MatchArm;
    let mut _17: std::option::Option<std::boxed::Box<Test>>;
    let mut _18: std::boxed::Box<Test>;
    let mut _19: Test;
    let _20: &MatchArm;
    let _21: &MatchArm;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&MatchArm, &MatchArm);
    let mut _28: &MatchArm;
    let _29: MatchArm;
    let mut _30: std::option::Option<std::boxed::Box<Test>>;
    let mut _31: std::boxed::Box<Test>;
    let mut _32: Test;
    let _33: &MatchArm;
    let _34: &MatchArm;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&MatchArm, &MatchArm);
    let mut _41: &MatchArm;
    let _42: MatchArm;
    let mut _43: std::option::Option<std::boxed::Box<Test>>;
    let mut _44: std::boxed::Box<Test>;
    let mut _45: Test;
    let _46: &MatchArm;
    let _47: &MatchArm;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&MatchArm, &MatchArm);
    let mut _54: &MatchArm;
    let _55: MatchArm;
    let mut _56: std::option::Option<std::boxed::Box<Test>>;
    let _57: &MatchArm;
    let _58: &MatchArm;
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: &MatchArm;
    let mut _65: &MatchArm;
    let mut _66: &MatchArm;
    let mut _67: &MatchArm;
    let mut _68: &MatchArm;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _57;
        debug right_val => _58;
        let _61: core::panicking::AssertKind;
        scope 10 {
            debug kind => _61;
        }
    }

    bb0: {
        _6 = Test::Foo;
        _5 = Box::<Test>::new(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Option::<Box<Test>>::Some(move _5);
        _3 = test(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _68 = const _;
        _1 = (move _2, _68);
        _7 = (_1.0: &MatchArm);
        _8 = (_1.1: &MatchArm);
        _10 = <MatchArm as PartialEq>::eq(_7, _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb5: {
        _19 = Test::Bar;
        _18 = Box::<Test>::new(move _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _17 = Option::<Box<Test>>::Some(move _18);
        _16 = test(move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _15 = &_16;
        _67 = const _;
        _14 = (move _15, _67);
        _20 = (_14.0: &MatchArm);
        _21 = (_14.1: &MatchArm);
        _23 = <MatchArm as PartialEq>::eq(_20, _21) -> [return: bb8, unwind continue];
    }

    bb8: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _24, _20, _21, move _26) -> unwind continue;
    }

    bb10: {
        _32 = Test::Baz;
        _31 = Box::<Test>::new(move _32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _30 = Option::<Box<Test>>::Some(move _31);
        _29 = test(move _30) -> [return: bb12, unwind continue];
    }

    bb12: {
        _28 = &_29;
        _66 = const _;
        _27 = (move _28, _66);
        _33 = (_27.0: &MatchArm);
        _34 = (_27.1: &MatchArm);
        _36 = <MatchArm as PartialEq>::eq(_33, _34) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _37, _33, _34, move _39) -> unwind continue;
    }

    bb15: {
        _45 = Test::Qux;
        _44 = Box::<Test>::new(move _45) -> [return: bb16, unwind continue];
    }

    bb16: {
        _43 = Option::<Box<Test>>::Some(move _44);
        _42 = test(move _43) -> [return: bb17, unwind continue];
    }

    bb17: {
        _41 = &_42;
        _65 = const _;
        _40 = (move _41, _65);
        _46 = (_40.0: &MatchArm);
        _47 = (_40.1: &MatchArm);
        _49 = <MatchArm as PartialEq>::eq(_46, _47) -> [return: bb18, unwind continue];
    }

    bb18: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _50, _46, _47, move _52) -> unwind continue;
    }

    bb20: {
        _56 = Option::<Box<Test>>::None;
        _55 = test(move _56) -> [return: bb21, unwind continue];
    }

    bb21: {
        _54 = &_55;
        _64 = const _;
        _53 = (move _54, _64);
        _57 = (_53.0: &MatchArm);
        _58 = (_53.1: &MatchArm);
        _60 = <MatchArm as PartialEq>::eq(_57, _58) -> [return: bb22, unwind continue];
    }

    bb22: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _61, _57, _58, move _63) -> unwind continue;
    }

    bb24: {
        return;
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
