// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/bind-by-copy.rs:8:15: 8:20>::clone(_1: &C) -> C {
    debug self => _1;
    let mut _0: C;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let _2: i32;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: !;
    let _10: i32;
    let mut _11: !;
    let mut _12: B;
    let _13: C;
    let mut _14: B;
    let mut _15: C;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: D;
    let mut _41: C;
    let mut _42: (&i32, &i32);
    let mut _43: &i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: i32;
    let mut _60: i32;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: B;
    let mut _66: C;
    let mut _67: isize;
    let mut _70: (&i32, &i32);
    let mut _71: &i32;
    let mut _74: bool;
    let mut _75: bool;
    let mut _76: i32;
    let mut _77: i32;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&i32, &i32);
    let mut _82: &i32;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: i32;
    let mut _88: i32;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let _92: !;
    let mut _94: B;
    let mut _95: C;
    let mut _96: isize;
    let mut _100: (&i32, &i32);
    let mut _101: &i32;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: i32;
    let mut _107: i32;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&i32, &i32);
    let mut _112: &i32;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: i32;
    let mut _118: i32;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: (&i32, &i32);
    let mut _123: &i32;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: i32;
    let mut _129: i32;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&i32, &i32);
    let mut _134: &i32;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: i32;
    let mut _140: i32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let _144: !;
    scope 1 {
        debug x => _1;
        debug a => _2;
    }
    scope 2 {
        debug _b => _10;
    }
    scope 3 {
        debug x => _12;
        debug b => _13;
        let _18: &i32;
        let _19: &i32;
        let _29: &i32;
        let _30: &i32;
        let mut _38: D;
        let _39: C;
        let mut _153: &i32;
        let mut _154: &i32;
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
        scope 6 {
            debug left_val => _29;
            debug right_val => _30;
            let _35: core::panicking::AssertKind;
            scope 7 {
                debug kind => _35;
            }
        }
        scope 8 {
            debug y => _38;
            debug d => _39;
            let _44: &i32;
            let _45: &i32;
            let _55: &i32;
            let _56: &i32;
            let _64: std::option::Option<B>;
            let mut _151: &i32;
            let mut _152: &i32;
            scope 9 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _50;
                }
            }
            scope 11 {
                debug left_val => _55;
                debug right_val => _56;
                let _61: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _61;
                }
            }
            scope 13 {
                debug some_b => _64;
                let _93: std::option::Option<B>;
                scope 14 {
                    debug x => _68;
                    debug b => _69;
                    let _68: B;
                    let _69: C;
                    let _72: &i32;
                    let _73: &i32;
                    let _83: &i32;
                    let _84: &i32;
                    let mut _149: &i32;
                    let mut _150: &i32;
                    scope 15 {
                        debug left_val => _72;
                        debug right_val => _73;
                        let _78: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _78;
                        }
                    }
                    scope 17 {
                        debug left_val => _83;
                        debug right_val => _84;
                        let _89: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _89;
                        }
                    }
                }
                scope 19 {
                    debug some_b => _93;
                    scope 20 {
                        debug x => _97;
                        debug b => _98;
                        debug c => _99;
                        let _97: B;
                        let mut _98: C;
                        let _99: i32;
                        let _102: &i32;
                        let _103: &i32;
                        let _113: &i32;
                        let _114: &i32;
                        let _124: &i32;
                        let _125: &i32;
                        let _135: &i32;
                        let _136: &i32;
                        let mut _145: &i32;
                        let mut _146: &i32;
                        let mut _147: &i32;
                        let mut _148: &i32;
                        scope 21 {
                            debug left_val => _102;
                            debug right_val => _103;
                            let _108: core::panicking::AssertKind;
                            scope 22 {
                                debug kind => _108;
                            }
                        }
                        scope 23 {
                            debug left_val => _113;
                            debug right_val => _114;
                            let _119: core::panicking::AssertKind;
                            scope 24 {
                                debug kind => _119;
                            }
                        }
                        scope 25 {
                            debug left_val => _124;
                            debug right_val => _125;
                            let _130: core::panicking::AssertKind;
                            scope 26 {
                                debug kind => _130;
                            }
                        }
                        scope 27 {
                            debug left_val => _135;
                            debug right_val => _136;
                            let _141: core::panicking::AssertKind;
                            scope 28 {
                                debug kind => _141;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = A { a: const 10_i32, b: const 20_i32 };
        switchInt((_1.1: i32)) -> [20: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = (_1.1: i32);
        _11 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _2 = (_1.0: i32);
        _5 = (_1.0: i32);
        _4 = Eq(move _5, const 10_i32);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: x.a == 10") -> unwind continue;
    }

    bb4: {
        _8 = Eq(_2, const 10_i32);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: a == 10") -> unwind continue;
    }

    bb6: {
        _15 = C { c: const 20_i32 };
        _14 = B { a: const 10_i32, b: move _15 };
        _13 = (_14.1: C);
        _12 = move _14;
        _17 = &(_12.0: i32);
        _154 = const _;
        _16 = (move _17, _154);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb8: {
        ((_12.1: C).0: i32) = const 30_i32;
        _28 = &(_13.0: i32);
        _153 = const _;
        _27 = (move _28, _153);
        _29 = (_27.0: &i32);
        _30 = (_27.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb10: {
        _41 = C { c: const 20_i32 };
        _40 = D { a: const 10_i32, d: move _41 };
        _39 = (_40.1: C);
        _38 = move _40;
        _43 = &(_38.0: i32);
        _152 = const _;
        _42 = (move _43, _152);
        _44 = (_42.0: &i32);
        _45 = (_42.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        ((_38.1: C).0: i32) = const 30_i32;
        _54 = &(_39.0: i32);
        _151 = const _;
        _53 = (move _54, _151);
        _55 = (_53.0: &i32);
        _56 = (_53.1: &i32);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<i32, i32>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb14: {
        _66 = C { c: const 20_i32 };
        _65 = B { a: const 10_i32, b: move _66 };
        _64 = Option::<B>::Some(move _65);
        _67 = discriminant(_64);
        switchInt(move _67) -> [1: bb16, otherwise: bb15];
    }

    bb15: {
        _92 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb16: {
        _69 = (((_64 as Some).0: B).1: C);
        _68 = move ((_64 as Some).0: B);
        _71 = &((_68.1: C).0: i32);
        _150 = const _;
        _70 = (move _71, _150);
        _72 = (_70.0: &i32);
        _73 = (_70.1: &i32);
        _76 = (*_72);
        _77 = (*_73);
        _75 = Eq(move _76, move _77);
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<i32, i32>(move _78, _72, _73, move _80) -> unwind continue;
    }

    bb18: {
        _82 = &(_69.0: i32);
        _149 = const _;
        _81 = (move _82, _149);
        _83 = (_81.0: &i32);
        _84 = (_81.1: &i32);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<i32, i32>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb20: {
        _95 = C { c: const 20_i32 };
        _94 = B { a: const 10_i32, b: move _95 };
        _93 = Option::<B>::Some(move _94);
        _96 = discriminant(_93);
        switchInt(move _96) -> [1: bb22, otherwise: bb21];
    }

    bb21: {
        _144 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb22: {
        _99 = ((((_93 as Some).0: B).1: C).0: i32);
        _98 = (((_93 as Some).0: B).1: C);
        _97 = move ((_93 as Some).0: B);
        _101 = &((_97.1: C).0: i32);
        _148 = const _;
        _100 = (move _101, _148);
        _102 = (_100.0: &i32);
        _103 = (_100.1: &i32);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<i32, i32>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb24: {
        _112 = &(_98.0: i32);
        _147 = const _;
        _111 = (move _112, _147);
        _113 = (_111.0: &i32);
        _114 = (_111.1: &i32);
        _117 = (*_113);
        _118 = (*_114);
        _116 = Eq(move _117, move _118);
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<i32, i32>(move _119, _113, _114, move _121) -> unwind continue;
    }

    bb26: {
        (_98.0: i32) = const 30_i32;
        _123 = &(_98.0: i32);
        _146 = const _;
        _122 = (move _123, _146);
        _124 = (_122.0: &i32);
        _125 = (_122.1: &i32);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<i32, i32>(move _130, _124, _125, move _132) -> unwind continue;
    }

    bb28: {
        _134 = &_99;
        _145 = const _;
        _133 = (move _134, _145);
        _135 = (_133.0: &i32);
        _136 = (_133.1: &i32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<i32, i32>(move _141, _135, _136, move _143) -> unwind continue;
    }

    bb30: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 30_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 20_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}
