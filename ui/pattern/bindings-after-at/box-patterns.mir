// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn test(_1: Option<Box<i32>>) -> MatchArm {
    debug x => _1;
    let mut _0: MatchArm;
    let mut _2: isize;
    let _3: &std::option::Option<std::boxed::Box<i32>>;
    let _4: &&std::option::Option<std::boxed::Box<i32>>;
    let _5: i32;
    let _6: &i32;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: (&&std::option::Option<std::boxed::Box<i32>>, &&std::option::Option<std::boxed::Box<i32>>);
    let mut _10: &&std::option::Option<std::boxed::Box<i32>>;
    let mut _11: &&std::option::Option<std::boxed::Box<i32>>;
    let _12: &std::option::Option<std::boxed::Box<i32>>;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let _20: &std::boxed::Box<i32>;
    let _21: &&std::boxed::Box<i32>;
    let _22: i32;
    let _23: &i32;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: (&i32, &i32);
    let mut _27: &i32;
    let mut _28: &i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: std::boxed::Box<i32>;
    let mut _39: std::boxed::Box<i32>;
    let mut _40: std::boxed::Box<i32>;
    let mut _41: std::boxed::Box<i32>;
    let mut _42: std::boxed::Box<i32>;
    let mut _43: *const i32;
    let mut _44: *const i32;
    let mut _45: *const i32;
    let mut _46: *const i32;
    let mut _47: *const i32;
    let mut _54: *const ();
    let mut _55: usize;
    let mut _56: usize;
    let mut _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: *const ();
    let mut _61: usize;
    let mut _62: usize;
    let mut _63: usize;
    let mut _64: usize;
    let mut _65: bool;
    let mut _66: *const ();
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: usize;
    let mut _71: bool;
    let mut _72: *const ();
    let mut _73: usize;
    let mut _74: usize;
    let mut _75: usize;
    let mut _76: usize;
    let mut _77: bool;
    scope 1 {
        debug bar => _3;
        debug bar => _4;
        debug n => _5;
        debug n => _6;
        let _13: &&std::option::Option<std::boxed::Box<i32>>;
        let _14: &&std::option::Option<std::boxed::Box<i32>>;
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _17: core::panicking::AssertKind;
            scope 3 {
                debug kind => _17;
            }
        }
    }
    scope 4 {
        debug bar => _20;
        debug bar => _21;
        debug n => _22;
        debug n => _23;
        let _29: &i32;
        let _30: &i32;
        let mut _48: *const ();
        let mut _49: usize;
        let mut _50: usize;
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: bool;
        scope 5 {
            debug left_val => _29;
            debug right_val => _30;
            let _35: core::panicking::AssertKind;
            scope 6 {
                debug kind => _35;
            }
        }
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb2, otherwise: bb1];
    }

    bb1: {
        _0 = MatchArm::Wild;
        goto -> bb11;
    }

    bb2: {
        _3 = &_1;
        _4 = &_3;
        _38 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>);
        _43 = (((_38.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _72 = _43 as *const () (PtrToPtr);
        _73 = _72 as usize (Transmute);
        _74 = AlignOf(i32);
        _75 = Sub(_74, const 1_usize);
        _76 = BitAnd(_73, _75);
        _77 = Eq(_76, const 0_usize);
        assert(_77, "misaligned pointer dereference: address must be a multiple of {} but is {}", _74, _73) -> [success: bb19, unwind unreachable];
    }

    bb3: {
        _39 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>);
        _44 = (((_39.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _66 = _44 as *const () (PtrToPtr);
        _67 = _66 as usize (Transmute);
        _68 = AlignOf(i32);
        _69 = Sub(_68, const 1_usize);
        _70 = BitAnd(_67, _69);
        _71 = Eq(_70, const 0_usize);
        assert(_71, "misaligned pointer dereference: address must be a multiple of {} but is {}", _68, _67) -> [success: bb18, unwind unreachable];
    }

    bb4: {
        _40 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>);
        _45 = (((_40.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _60 = _45 as *const () (PtrToPtr);
        _61 = _60 as usize (Transmute);
        _62 = AlignOf(i32);
        _63 = Sub(_62, const 1_usize);
        _64 = BitAnd(_61, _63);
        _65 = Eq(_64, const 0_usize);
        assert(_65, "misaligned pointer dereference: address must be a multiple of {} but is {}", _62, _61) -> [success: bb17, unwind unreachable];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<&Option<Box<i32>>, &Option<Box<i32>>>(move _17, _13, _14, move _19) -> bb13;
    }

    bb7: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb11;
    }

    bb8: {
        _41 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>);
        _46 = (((_41.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _54 = _46 as *const () (PtrToPtr);
        _55 = _54 as usize (Transmute);
        _56 = AlignOf(i32);
        _57 = Sub(_56, const 1_usize);
        _58 = BitAnd(_55, _57);
        _59 = Eq(_58, const 0_usize);
        assert(_59, "misaligned pointer dereference: address must be a multiple of {} but is {}", _56, _55) -> [success: bb16, unwind unreachable];
    }

    bb9: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> bb13;
    }

    bb10: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb11;
    }

    bb11: {
        drop(_1) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        _27 = &(*_47);
        _28 = &_22;
        _26 = (move _27, move _28);
        _29 = (_26.0: &i32);
        _30 = (_26.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb10, otherwise: bb9];
    }

    bb16: {
        _22 = (*_46);
        _42 = deref_copy (*_20);
        _47 = (((_42.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _48 = _47 as *const () (PtrToPtr);
        _49 = _48 as usize (Transmute);
        _50 = AlignOf(i32);
        _51 = Sub(_50, const 1_usize);
        _52 = BitAnd(_49, _51);
        _53 = Eq(_52, const 0_usize);
        assert(_53, "misaligned pointer dereference: address must be a multiple of {} but is {}", _50, _49) -> [success: bb15, unwind unreachable];
    }

    bb17: {
        _23 = &(*_45);
        _20 = &((_1 as Some).0: std::boxed::Box<i32>);
        _21 = &_20;
        _25 = (*_23);
        _24 = Lt(move _25, const 0_i32);
        switchInt(move _24) -> [0: bb1, otherwise: bb8];
    }

    bb18: {
        _5 = (*_44);
        _10 = &_3;
        _12 = &_1;
        _11 = &_12;
        _9 = (move _10, move _11);
        _13 = (_9.0: &&std::option::Option<std::boxed::Box<i32>>);
        _14 = (_9.1: &&std::option::Option<std::boxed::Box<i32>>);
        _16 = <&Option<Box<i32>> as PartialEq>::eq(_13, _14) -> [return: bb5, unwind: bb13];
    }

    bb19: {
        _6 = &(*_43);
        _8 = (*_6);
        _7 = Gt(move _8, const 0_i32);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&MatchArm, &MatchArm);
    let mut _2: &MatchArm;
    let _3: MatchArm;
    let mut _4: std::option::Option<std::boxed::Box<i32>>;
    let mut _5: std::boxed::Box<i32>;
    let _6: &MatchArm;
    let _7: &MatchArm;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&MatchArm, &MatchArm);
    let mut _14: &MatchArm;
    let _15: MatchArm;
    let mut _16: std::option::Option<std::boxed::Box<i32>>;
    let mut _17: std::boxed::Box<i32>;
    let _18: &MatchArm;
    let _19: &MatchArm;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&MatchArm, &MatchArm);
    let mut _26: &MatchArm;
    let _27: MatchArm;
    let mut _28: std::option::Option<std::boxed::Box<i32>>;
    let mut _29: std::boxed::Box<i32>;
    let _30: &MatchArm;
    let _31: &MatchArm;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: &MatchArm;
    let mut _38: &MatchArm;
    let mut _39: &MatchArm;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }

    bb0: {
        _5 = Box::<i32>::new(const 2_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Option::<Box<i32>>::Some(move _5);
        _3 = test(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _39 = const _;
        _1 = (move _2, _39);
        _6 = (_1.0: &MatchArm);
        _7 = (_1.1: &MatchArm);
        _9 = <MatchArm as PartialEq>::eq(_6, _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb5: {
        _17 = Box::<i32>::new(const -1_i32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Option::<Box<i32>>::Some(move _17);
        _15 = test(move _16) -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = &_15;
        _38 = const _;
        _13 = (move _14, _38);
        _18 = (_13.0: &MatchArm);
        _19 = (_13.1: &MatchArm);
        _21 = <MatchArm as PartialEq>::eq(_18, _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb10: {
        _29 = Box::<i32>::new(const 0_i32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _28 = Option::<Box<i32>>::Some(move _29);
        _27 = test(move _28) -> [return: bb12, unwind continue];
    }

    bb12: {
        _26 = &_27;
        _37 = const _;
        _25 = (move _26, _37);
        _30 = (_25.0: &MatchArm);
        _31 = (_25.1: &MatchArm);
        _33 = <MatchArm as PartialEq>::eq(_30, _31) -> [return: bb13, unwind continue];
    }

    bb13: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _34, _30, _31, move _36) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
