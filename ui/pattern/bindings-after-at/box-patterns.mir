// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let mut _3: isize;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let _4: &usize;                      // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let mut _6: &str;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let _7: &str;                        // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    let mut _9: &&usize;                 // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    let _10: &&usize;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let mut _12: &str;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    let _13: &str;                       // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    }

    bb1: {
        _11 = &mut (*_2);                // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
        _13 = const "Wild";              // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
        _0 = Formatter::<'_>::write_str(move _11, move _12) -> bb4; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _5 = &mut (*_2);                 // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
        _7 = const "Arm";                // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
        _10 = &_4;                       // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _9 = _10;                        // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:15: 7:15
    }
}

fn <impl at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    debug other => _2;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _0: bool;                    // return place in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let _3: isize;                       // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _4: &MatchArm;               // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _6: &MatchArm;               // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _7: bool;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _8: isize;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _9: isize;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _10: bool;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _11: (&MatchArm, &MatchArm); // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _12: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _13: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _14: isize;                  // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _15: isize;                  // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _18: usize;                  // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    let mut _19: usize;                  // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
    let mut _20: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _21: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _22: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    let mut _23: &MatchArm;              // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        let _5: isize;                   // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
            let _16: &usize;             // in scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
            let _17: &usize;             // in scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
                debug __arg1_0 => _17;   // in scope 3 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _3 = discriminant((*_4));        // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _6 = _2;                         // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _5 = discriminant((*_6));        // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _8 = _3;                         // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _9 = _5;                         // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        goto -> bb3;                     // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _13 = _2;                        // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _11 = (move _12, move _13);      // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _20 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _15 = discriminant((*_20));      // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:7:26: 7:26
    }

    bb4: {
        _21 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        _14 = discriminant((*_21));      // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    }

    bb6: {
        _22 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _16 = &(((*_22) as Arm).0: usize); // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _23 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _17 = &(((*_23) as Arm).0: usize); // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _18 = (*_16);                    // scope 3 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _19 = (*_17);                    // scope 3 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        _10 = Eq(move _18, move _19);    // scope 3 at ui/pattern/bindings-after-at/box-patterns.rs:9:9: 9:14
        goto -> bb7;                     // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:25: 7:26
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
        goto -> bb3;                     // scope 2 at ui/pattern/bindings-after-at/box-patterns.rs:7:17: 7:26
    }
}

fn test(_1: Option<Box<i32>>) -> MatchArm {
    debug x => _1;                       // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:33: 13:41
    let mut _2: isize;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:19: 15:30
    let _3: &std::option::Option<std::boxed::Box<i32>>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:9: 15:16
    let _4: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:9: 15:16
    let _5: i32;                         // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
    let _6: &i32;                        // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
    let mut _7: bool;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:34: 15:39
    let mut _8: i32;                     // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:34: 15:35
    let mut _9: (&&std::option::Option<std::boxed::Box<i32>>, &&std::option::Option<std::boxed::Box<i32>>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: &std::option::Option<std::boxed::Box<i32>>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:17:29: 17:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &&std::option::Option<std::boxed::Box<i32>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _27: &std::boxed::Box<i32>;      // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
    let _28: &&std::boxed::Box<i32>;     // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
    let _29: i32;                        // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
    let _30: &i32;                       // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
    let mut _31: bool;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:34: 21:39
    let mut _32: i32;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:34: 21:35
    let mut _33: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _35: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _51: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _52: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _53: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _54: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
    let mut _55: *const i32;             // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _56: *const i32;             // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _57: *const i32;             // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _58: *const i32;             // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:9: 13:10
    let mut _59: *const i32;             // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
    scope 1 {
        debug bar => _3;                 // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:15:9: 15:16
        debug bar => _4;                 // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:15:9: 15:16
        debug n => _5;                   // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        debug n => _6;                   // in scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        let _13: &&std::option::Option<std::boxed::Box<i32>>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _14: &&std::option::Option<std::boxed::Box<i32>>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _13;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _14;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _19: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _19;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 4 {
        debug bar => _27;                // in scope 4 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
        debug bar => _28;                // in scope 4 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
        debug n => _29;                  // in scope 4 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        debug n => _30;                  // in scope 4 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        let _36: &i32;                   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _37: &i32;                   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 5 {
            debug left_val => _36;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _37;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _42: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _42;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:14:11: 14:12
        switchInt(move _2) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:14:5: 14:12
    }

    bb1: {
        _0 = MatchArm::Wild;             // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:27:14: 27:28
        goto -> bb11;                    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:27:14: 27:28
    }

    bb2: {
        _3 = &_1;                        // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:9: 15:16
        _4 = &_3;                        // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:9: 15:16
        _50 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        _55 = (((_50.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        _6 = &(*_55);                    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        _8 = (*_6);                      // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:34: 15:35
        _7 = Gt(move _8, const 0_i32);   // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:34: 15:39
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:34: 15:39
    }

    bb3: {
        _51 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        _56 = (((_51.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        _5 = (*_56);                     // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:15:28: 15:29
        _10 = &_3;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _12 = &_1;                       // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:17:29: 17:31
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_9.0: &&std::option::Option<std::boxed::Box<i32>>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_9.1: &&std::option::Option<std::boxed::Box<i32>>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = <&Option<Box<i32>> as PartialEq>::eq(move _17, move _18) -> [return: bb5, unwind: bb13]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Option<Box<i32>>, &'b &Option<Box<i32>>) -> bool {<&Option<Box<i32>> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _52 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        _57 = (((_52.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        _30 = &(*_57);                   // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        _27 = &((_1 as Some).0: std::boxed::Box<i32>); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
        _28 = &_27;                      // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:14: 21:21
        _32 = (*_30);                    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:34: 21:35
        _31 = Lt(move _32, const 0_i32); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:34: 21:39
        switchInt(move _31) -> [0: bb1, otherwise: bb8]; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:34: 21:39
    }

    bb5: {
        _15 = Not(move _16);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb7, otherwise: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<&Option<Box<i32>>, &Option<Box<i32>>>(move _21, move _22, move _24, move _26) -> bb13; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Option<Box<i32>>, &'b &Option<Box<i32>>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Option<Box<i32>>, &Option<Box<i32>>>}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = MatchArm::Arm(const 0_usize); // scope 1 at ui/pattern/bindings-after-at/box-patterns.rs:19:13: 19:29
        goto -> bb11;                    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:20:9: 20:10
    }

    bb8: {
        _53 = deref_copy ((_1 as Some).0: std::boxed::Box<i32>); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        _58 = (((_53.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        _29 = (*_58);                    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:21:28: 21:29
        _54 = deref_copy (*_27);         // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _59 = (((_54.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _34 = &(*_59);                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = &_29;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _35);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_33.0: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_33.1: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = (*_36);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = (*_37);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = Eq(move _40, move _41);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _38 = Not(move _39);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb10, otherwise: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _42 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = core::panicking::assert_failed::<i32, i32>(move _44, move _45, move _47, move _49) -> bb13; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = MatchArm::Arm(const 1_usize); // scope 4 at ui/pattern/bindings-after-at/box-patterns.rs:25:13: 25:29
        goto -> bb11;                    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:26:9: 26:10
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:29:1: 29:2
    }

    bb12: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:29:2: 29:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:29:1: 29:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:13:1: 29:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:31:11: 31:11
    let mut _1: (&MatchArm, &MatchArm);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: MatchArm;                    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:16: 32:39
    let mut _4: std::option::Option<std::boxed::Box<i32>>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:21: 32:38
    let mut _5: std::boxed::Box<i32>;    // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:26: 32:37
    let mut _6: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &MatchArm;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &MatchArm;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:16: 33:40
    let mut _24: std::option::Option<std::boxed::Box<i32>>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:21: 33:39
    let mut _25: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:26: 33:38
    let mut _26: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _28: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _43: MatchArm;                   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:16: 34:39
    let mut _44: std::option::Option<std::boxed::Box<i32>>; // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:21: 34:38
    let mut _45: std::boxed::Box<i32>;   // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:26: 34:37
    let mut _46: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _47: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _48: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _51: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _52: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _54: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _55: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _56: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _57: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _58: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _59: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _61: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _62: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _27;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _28;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _33;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _47;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _48;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _53: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _53;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = Box::<i32>::new(const 2_i32) -> bb1; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:26: 32:37
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:32:26: 32:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Option::<Box<i32>>::Some(move _5); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:21: 32:38
        _3 = test(move _4) -> bb2;       // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:16: 32:39
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:32:16: 32:20
                                         // + literal: Const { ty: fn(Option<Box<i32>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _63 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[2])) }
        _6 = _63;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &MatchArm);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &MatchArm);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <MatchArm as PartialEq>::eq(move _11, move _12) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = Box::<i32>::new(const -1_i32) -> bb6; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:26: 33:38
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:33:26: 33:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = Option::<Box<i32>>::Some(move _25); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:21: 33:39
        _23 = test(move _24) -> bb7;     // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:16: 33:40
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:33:16: 33:20
                                         // + literal: Const { ty: fn(Option<Box<i32>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _62 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[1])) }
        _26 = _62;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_21.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_21.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <MatchArm as PartialEq>::eq(move _31, move _32) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _29 = Not(move _30);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _33 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _35, move _36, move _38, move _40); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb10: {
        _45 = Box::<i32>::new(const 0_i32) -> bb11; // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:26: 34:37
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:34:26: 34:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _44 = Option::<Box<i32>>::Some(move _45); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:21: 34:38
        _43 = test(move _44) -> bb12;    // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:16: 34:39
                                         // mir::Constant
                                         // + span: ui/pattern/bindings-after-at/box-patterns.rs:34:16: 34:20
                                         // + literal: Const { ty: fn(Option<Box<i32>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb12: {
        _42 = &_43;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[0])) }
        _46 = _61;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _46);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _47 = (_41.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _48 = (_41.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _51 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _50 = <MatchArm as PartialEq>::eq(move _51, move _52) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _49 = Not(move _50);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _49) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _53 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _57 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = _59;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _60 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _54 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _55, move _56, move _58, move _60); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:35:2: 35:2
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:41: 34:55

    bb0: {
        _1 = MatchArm::Wild;             // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:34:41: 34:55
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:42: 33:58

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:33:42: 33:58
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:41: 32:57

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:32:41: 32:57
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:5: 9:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:5: 9:8
        return;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:5: 9:8
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:5: 9:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:5: 9:8
        return;                          // scope 0 at ui/pattern/bindings-after-at/box-patterns.rs:9:5: 9:8
    }
}
