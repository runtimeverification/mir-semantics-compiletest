// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug vbar => _1;
        let _2: isize;
        scope 2 {
            debug num => _2;
            let _5: &isize;
            let _6: &isize;
            let _14: SBar;
            let mut _28: &isize;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug sbar => _14;
                let _15: isize;
                scope 6 {
                    debug num => _15;
                    let _18: &isize;
                    let _19: &isize;
                    let mut _27: &isize;
                    scope 7 {
                        debug left_val => _18;
                        debug right_val => _19;
                        let _24: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _24;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Foo::VBar { num: const 1_isize };
        _2 = ((_1 as VBar).0: isize);
        _4 = &_2;
        _28 = const _;
        _3 = (move _4, _28);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _14 = SBar { num: const 2_isize };
        _15 = (_14.0: isize);
        _17 = &_15;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &isize);
        _19 = (_16.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}
