// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:16:1: 16:16>::drop(_1: &mut X) -> () {
    debug self => _1;                    // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:17:13: 17:22
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:17:24: 17:24
    let _2: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
    let mut _3: &mut std::vec::Vec<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
    let mut _4: &mut std::vec::Vec<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
    let mut _5: &mut std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
    let mut _6: std::cell::RefMut<'_, std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
    let mut _7: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
    let _8: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
    let mut _10: usize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:34: 18:41
    let mut _11: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:17:13: 17:22
    let mut _12: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:17:13: 17:22

    bb0: {
        _9 = &((*_1).1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
        _8 = <Rc<RefCell<Vec<usize>>> as Deref>::deref(move _9) -> bb1; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<usize>>>) -> &'a <Rc<RefCell<Vec<usize>>> as Deref>::Target {<Rc<RefCell<Vec<usize>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _8;                         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
        _6 = RefCell::<Vec<usize>>::borrow_mut(move _7) -> bb2; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:16: 18:26
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> RefMut<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &mut _6;                    // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
        _4 = <RefMut<'_, Vec<usize>> as DerefMut>::deref_mut(move _5) -> [return: bb3, unwind: bb6]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<usize>>) -> &'a mut <RefMut<'_, Vec<usize>> as Deref>::Target {<RefMut<'_, Vec<usize>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = &mut (*_4);                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
        _11 = deref_copy ((*_1).0: std::boxed::Box<usize>); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:34: 18:41
        _12 = (((_11.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:34: 18:41
        _10 = (*_12);                    // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:34: 18:41
        _2 = Vec::<usize>::push(move _3, move _10) -> [return: bb4, unwind: bb6]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:9: 18:42
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:29: 18:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<usize>, usize) {Vec::<usize>::push}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_6) -> bb5;                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:42: 18:43
    }

    bb5: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:19:6: 19:6
    }

    bb6 (cleanup): {
        drop(_6) -> bb7;                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:18:42: 18:43
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:17:5: 19:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:27:11: 27:11
    let _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:28:9: 28:10
    let mut _3: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:56
    let mut _6: X;                       // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:42
    let mut _7: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:39
    let mut _8: (usize,);                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:42
    let mut _9: X;                       // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:49
    let mut _10: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:46
    let mut _11: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:49
    let _12: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:37:9: 40:10
    let mut _13: isize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:13: 38:42
    let mut _16: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:46: 38:51
    let mut _17: (&X, usize, &X, usize); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:46: 38:64
    let mut _18: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:52: 38:53
    let mut _19: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:58: 38:60
    let _20: &X;                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:58: 38:60
    let mut _21: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _23: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:42
    let mut _24: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:39
    let mut _25: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:42
    let mut _26: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:49
    let mut _27: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:46
    let mut _28: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:49
    let _29: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:42:9: 45:10
    let mut _30: isize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:13: 43:42
    let mut _33: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:46: 43:51
    let mut _34: (&X, usize, &X, usize); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:46: 43:64
    let mut _35: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:52: 43:54
    let _36: &X;                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:52: 43:54
    let mut _37: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:59: 43:60
    let mut _38: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _39: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:9: 49:10
    let mut _40: DoubleOption<X, X>;     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:15: 46:48
    let mut _41: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:40
    let mut _42: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:37
    let mut _43: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:40
    let mut _44: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:47
    let mut _45: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:44
    let mut _46: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:47
    let mut _47: isize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:13: 47:42
    let mut _50: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:46: 47:51
    let mut _51: (&X, usize, &X, usize); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:46: 47:64
    let mut _52: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:52: 47:53
    let mut _53: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:58: 47:60
    let _54: &X;                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:58: 47:60
    let mut _55: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _56: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:9: 53:10
    let mut _57: DoubleOption<X, X>;     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:15: 50:48
    let mut _58: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:40
    let mut _59: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:37
    let mut _60: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:40
    let mut _61: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:47
    let mut _62: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:44
    let mut _63: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:47
    let mut _64: isize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:13: 51:42
    let mut _67: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:46: 51:51
    let mut _68: (&X, usize, &X, usize); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:46: 51:64
    let mut _69: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:52: 51:54
    let _70: &X;                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:52: 51:54
    let mut _71: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:59: 51:60
    let mut _72: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _75: (X, X);                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:30: 55:45
    let mut _76: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:36
    let mut _77: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:33
    let mut _78: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:36
    let mut _79: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:44
    let mut _80: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:40
    let mut _81: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:44
    let mut _84: (X, X);                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:30: 56:46
    let mut _85: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:37
    let mut _86: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:33
    let mut _87: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:37
    let mut _88: X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:45
    let mut _89: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:41
    let mut _90: (usize,);               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:45
    let _91: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:32
    let mut _92: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:18
    let mut _93: (&X, usize, &X, usize); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:32
    let mut _94: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:19: 57:21
    let _95: &X;                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:19: 57:21
    let mut _96: &X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:26: 57:27
    let _97: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:33
    let mut _98: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:18
    let mut _99: (&X, usize, &X, usize); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:33
    let mut _100: &X;                    // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:19: 58:20
    let mut _101: &X;                    // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:26: 58:28
    let _102: &X;                        // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:26: 58:28
    let _103: ();                        // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:9: 67:62
    let mut _104: [X; 6];                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:13: 67:61
    let mut _105: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:20
    let mut _106: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:16
    let mut _107: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:20
    let mut _108: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:28
    let mut _109: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:24
    let mut _110: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:28
    let mut _111: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:36
    let mut _112: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:32
    let mut _113: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:36
    let mut _114: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:44
    let mut _115: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:40
    let mut _116: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:44
    let mut _117: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:52
    let mut _118: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:48
    let mut _119: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:52
    let mut _120: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:60
    let mut _121: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:56
    let mut _122: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:60
    let _124: ();                        // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:46
    let mut _125: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:12
    let mut _126: ((X, X, X, X),);       // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:46
    let mut _127: (X, X, X, X);          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:13: 75:45
    let mut _128: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:20
    let mut _129: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:16
    let mut _130: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:20
    let mut _131: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:28
    let mut _132: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:24
    let mut _133: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:28
    let mut _134: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:36
    let mut _135: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:32
    let mut _136: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:36
    let mut _137: X;                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:44
    let mut _138: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:40
    let mut _139: (usize,);              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:44
    let mut _141: (&&std::vec::Vec<usize>, &&[usize; 22]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _142: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _143: &std::vec::Vec<usize>;     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:16: 78:28
    let _144: &std::vec::Vec<usize>;     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:17: 78:28
    let mut _145: &std::cell::Ref<'_, std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
    let _146: std::cell::Ref<'_, std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
    let mut _147: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
    let _148: &std::cell::RefCell<std::vec::Vec<usize>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
    let mut _149: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
    let mut _150: &&[usize; 22];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _151: &[usize; 22];              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:30: 78:39
    let mut _154: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _155: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _156: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _157: &&[usize; 22];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _159: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _160: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _161: &&std::vec::Vec<usize>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _162: &&std::vec::Vec<usize>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _163: &&[usize; 22];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _164: &&[usize; 22];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _166: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
    let mut _167: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
    let mut _168: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    let mut _169: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    let mut _170: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
    let mut _171: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
    let mut _172: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    let mut _173: isize;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    scope 1 {
        debug d => _1;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:28:9: 28:10
        let _2: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21]; // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:13: 30:15
        let _140: [usize; 22];           // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:77:9: 77:17
        scope 2 {
            debug mk => _2;              // in scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:13: 30:15
            let _4: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45]; // in scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:13: 31:18
            scope 3 {
                debug check => _4;       // in scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:13: 31:18
                let _5: DoubleOption<X, X>; // in scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:13: 36:14
                scope 4 {
                    debug x => _5;       // in scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:13: 36:14
                    let _14: &X;         // in scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:33: 38:38
                    let _15: X;          // in scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:40: 38:41
                    let _22: DoubleOption<X, X>; // in scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:13: 41:14
                    scope 5 {
                        debug a => _14;  // in scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:33: 38:38
                        debug b => _15;  // in scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:40: 38:41
                    }
                    scope 6 {
                        debug x => _22;  // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:13: 41:14
                        let _31: X;      // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:33: 43:34
                        let _32: &X;     // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:36: 43:41
                        let _48: &X;     // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:33: 47:38
                        let _49: X;      // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:40: 47:41
                        let _65: X;      // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:33: 51:34
                        let _66: &X;     // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:36: 51:41
                        let _73: X;      // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:18: 55:19
                        let _74: &X;     // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:21: 55:26
                        let _123: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59]; // in scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:13: 69:16
                        scope 7 {
                            debug a => _31; // in scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:33: 43:34
                            debug b => _32; // in scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:36: 43:41
                        }
                        scope 8 {
                            debug a => _48; // in scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:33: 47:38
                            debug b => _49; // in scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:40: 47:41
                        }
                        scope 9 {
                            debug a => _65; // in scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:33: 51:34
                            debug b => _66; // in scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:36: 51:41
                        }
                        scope 10 {
                            debug a => _73; // in scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:18: 55:19
                            debug b => _74; // in scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:21: 55:26
                            let _82: &X; // in scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:18: 56:23
                            let _83: X;  // in scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:25: 56:26
                            scope 11 {
                                debug c => _82; // in scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:18: 56:23
                                debug d => _83; // in scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:25: 56:26
                            }
                        }
                        scope 12 {
                            debug lam => _123; // in scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:13: 69:16
                        }
                    }
                }
            }
        }
        scope 13 {
            debug expected => _140;      // in scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:77:9: 77:17
            let _152: &&std::vec::Vec<usize>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _153: &&[usize; 22];     // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 14 {
                debug left_val => _152;  // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _153; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _158: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 15 {
                    debug kind => _158;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = <Rc<RefCell<Vec<usize>>> as Default>::default() -> bb1; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:28:31: 28:45
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:28:31: 28:43
                                         // + literal: Const { ty: fn() -> Rc<RefCell<Vec<usize>>> {<Rc<RefCell<Vec<usize>>> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_1;                        // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:56
        _2 = [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] { d: move _3 }; // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:56
                                         // closure
                                         // + def_id: DefId(0:21 ~ move_ref_patterns_dynamic_semantics[544d]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((usize,)) -> X,
                                         //     (&std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>,),
                                         // ]
        _7 = &_2;                        // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:39
        _8 = const (1_usize,);           // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:42
        _6 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _7, move _8) -> [return: bb2, unwind: bb79]; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:42
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:37: 36:39
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_2;                       // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:46
        _11 = const (2_usize,);          // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:49
        _9 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _10, move _11) -> [return: bb3, unwind: bb78]; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:49
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:44: 36:46
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = DoubleOption::<X, X>::Some2(move _6, move _9); // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:17: 36:50
        _13 = discriminant(_5);          // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:37:15: 37:16
        switchInt(move _13) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:37:9: 37:16
    }

    bb4: {
        _21 = begin_panic::<&str>(const "explicit panic") -> bb100; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        unreachable;                     // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:37:15: 37:16
    }

    bb6: {
        _14 = &((_5 as Some2).0: X);     // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:33: 38:38
        _15 = move ((_5 as Some2).1: X); // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:40: 38:41
        _16 = &_4;                       // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:46: 38:51
        _18 = _14;                       // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:52: 38:53
        _20 = &_15;                      // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:58: 38:60
        _19 = _20;                       // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:58: 38:60
        _17 = (move _18, const 1_usize, move _19, const 2_usize); // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:46: 38:64
        _12 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _16, move _17) -> [return: bb7, unwind: bb77]; // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:46: 38:64
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:46: 38:51
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], (&X, usize, &X, usize)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as FnOnce<(&X, usize, &X, usize)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_15) -> [return: bb8, unwind: bb100]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:63: 38:64
    }

    bb8: {
        _24 = &_2;                       // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:39
        _25 = const (3_usize,);          // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:42
        _23 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _24, move _25) -> [return: bb9, unwind: bb100]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:42
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:37: 41:39
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = &_2;                       // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:46
        _28 = const (4_usize,);          // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:49
        _26 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _27, move _28) -> [return: bb10, unwind: bb76]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:49
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:44: 41:46
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = DoubleOption::<X, X>::Some2(move _23, move _26); // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:17: 41:50
        _30 = discriminant(_22);         // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:42:15: 42:16
        switchInt(move _30) -> [0: bb13, 1: bb11, otherwise: bb12]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:42:9: 42:16
    }

    bb11: {
        _38 = begin_panic::<&str>(const "explicit panic") -> bb98; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        unreachable;                     // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:42:15: 42:16
    }

    bb13: {
        _31 = move ((_22 as Some2).0: X); // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:33: 43:34
        _32 = &((_22 as Some2).1: X);    // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:36: 43:41
        _33 = &_4;                       // scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:46: 43:51
        _36 = &_31;                      // scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:52: 43:54
        _35 = _36;                       // scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:52: 43:54
        _37 = _32;                       // scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:59: 43:60
        _34 = (move _35, const 3_usize, move _37, const 4_usize); // scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:46: 43:64
        _29 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _33, move _34) -> [return: bb14, unwind: bb75]; // scope 7 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:46: 43:64
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:46: 43:51
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], (&X, usize, &X, usize)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as FnOnce<(&X, usize, &X, usize)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_31) -> [return: bb15, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:63: 43:64
    }

    bb15: {
        _42 = &_2;                       // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:37
        _43 = const (5_usize,);          // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:40
        _41 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _42, move _43) -> [return: bb16, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:40
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:35: 46:37
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb16: {
        _45 = &_2;                       // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:44
        _46 = const (6_usize,);          // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:47
        _44 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _45, move _46) -> [return: bb17, unwind: bb74]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:47
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:42: 46:44
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb17: {
        _40 = DoubleOption::<X, X>::Some2(move _41, move _44); // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:15: 46:48
        _47 = discriminant(_40);         // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:15: 46:48
        switchInt(move _47) -> [0: bb20, 1: bb18, otherwise: bb19]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:9: 46:48
    }

    bb18: {
        _55 = begin_panic::<&str>(const "explicit panic") -> bb96; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        unreachable;                     // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:15: 46:48
    }

    bb20: {
        _48 = &((_40 as Some2).0: X);    // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:33: 47:38
        _49 = move ((_40 as Some2).1: X); // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:40: 47:41
        _50 = &_4;                       // scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:46: 47:51
        _52 = _48;                       // scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:52: 47:53
        _54 = &_49;                      // scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:58: 47:60
        _53 = _54;                       // scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:58: 47:60
        _51 = (move _52, const 5_usize, move _53, const 6_usize); // scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:46: 47:64
        _39 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _50, move _51) -> [return: bb21, unwind: bb73]; // scope 8 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:46: 47:64
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:46: 47:51
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], (&X, usize, &X, usize)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as FnOnce<(&X, usize, &X, usize)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call}, val: Value(<ZST>) }
    }

    bb21: {
        drop(_49) -> [return: bb22, unwind: bb96]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:63: 47:64
    }

    bb22: {
        _166 = discriminant(_40);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
        switchInt(move _166) -> [0: bb82, otherwise: bb81]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
    }

    bb23: {
        _62 = &_2;                       // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:44
        _63 = const (8_usize,);          // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:47
        _61 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _62, move _63) -> [return: bb24, unwind: bb72]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:47
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:42: 50:44
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb24: {
        _57 = DoubleOption::<X, X>::Some2(move _58, move _61); // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:15: 50:48
        _64 = discriminant(_57);         // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:15: 50:48
        switchInt(move _64) -> [0: bb27, 1: bb25, otherwise: bb26]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:9: 50:48
    }

    bb25: {
        _72 = begin_panic::<&str>(const "explicit panic") -> bb94; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        unreachable;                     // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:15: 50:48
    }

    bb27: {
        _65 = move ((_57 as Some2).0: X); // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:33: 51:34
        _66 = &((_57 as Some2).1: X);    // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:36: 51:41
        _67 = &_4;                       // scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:46: 51:51
        _70 = &_65;                      // scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:52: 51:54
        _69 = _70;                       // scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:52: 51:54
        _71 = _66;                       // scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:59: 51:60
        _68 = (move _69, const 7_usize, move _71, const 8_usize); // scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:46: 51:64
        _56 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _67, move _68) -> [return: bb28, unwind: bb71]; // scope 9 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:46: 51:64
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:46: 51:51
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], (&X, usize, &X, usize)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as FnOnce<(&X, usize, &X, usize)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call}, val: Value(<ZST>) }
    }

    bb28: {
        drop(_65) -> [return: bb29, unwind: bb94]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:63: 51:64
    }

    bb29: {
        _167 = discriminant(_57);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
        switchInt(move _167) -> [0: bb84, otherwise: bb83]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
    }

    bb30: {
        _80 = &_2;                       // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:40
        _81 = const (10_usize,);         // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:44
        _79 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _80, move _81) -> [return: bb31, unwind: bb70]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:44
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:38: 55:40
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb31: {
        _75 = (move _76, move _79);      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:30: 55:45
        _73 = move (_75.0: X);           // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:18: 55:19
        _74 = &(_75.1: X);               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:21: 55:26
        _86 = &_2;                       // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:33
        _87 = const (11_usize,);         // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:37
        _85 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _86, move _87) -> [return: bb32, unwind: bb69]; // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:37
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:31: 56:33
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb32: {
        _89 = &_2;                       // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:41
        _90 = const (12_usize,);         // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:45
        _88 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _89, move _90) -> [return: bb33, unwind: bb68]; // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:45
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:39: 56:41
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb33: {
        _84 = (move _85, move _88);      // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:30: 56:46
        _82 = &(_84.0: X);               // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:18: 56:23
        _83 = move (_84.1: X);           // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:25: 56:26
        _92 = &_4;                       // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:18
        _95 = &_73;                      // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:19: 57:21
        _94 = _95;                       // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:19: 57:21
        _96 = _74;                       // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:26: 57:27
        _93 = (move _94, const 9_usize, move _96, const 10_usize); // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:32
        _91 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _92, move _93) -> [return: bb34, unwind: bb67]; // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:32
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:57:13: 57:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], (&X, usize, &X, usize)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as FnOnce<(&X, usize, &X, usize)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call}, val: Value(<ZST>) }
    }

    bb34: {
        _98 = &_4;                       // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:18
        _100 = _82;                      // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:19: 58:20
        _102 = &_83;                     // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:26: 58:28
        _101 = _102;                     // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:26: 58:28
        _99 = (move _100, const 11_usize, move _101, const 12_usize); // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:33
        _97 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call(move _98, move _99) -> [return: bb35, unwind: bb67]; // scope 11 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:33
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:58:13: 58:18
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], (&X, usize, &X, usize)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as FnOnce<(&X, usize, &X, usize)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45] as Fn<(&X, usize, &X, usize)>>::call}, val: Value(<ZST>) }
    }

    bb35: {
        drop(_83) -> [return: bb36, unwind: bb91]; // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb36: {
        drop((_84.0: X)) -> [return: bb85, unwind: bb69]; // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb37: {
        drop((_75.1: X)) -> [return: bb86, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb38: {
        _109 = &_2;                      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:24
        _110 = const (14_usize,);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:28
        _108 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _109, move _110) -> [return: bb39, unwind: bb66]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:22: 67:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb39: {
        _112 = &_2;                      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:32
        _113 = const (15_usize,);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:36
        _111 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _112, move _113) -> [return: bb40, unwind: bb65]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:36
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:30: 67:32
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb40: {
        _115 = &_2;                      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:40
        _116 = const (16_usize,);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:44
        _114 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _115, move _116) -> [return: bb41, unwind: bb64]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:44
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:38: 67:40
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb41: {
        _118 = &_2;                      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:48
        _119 = const (17_usize,);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:52
        _117 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _118, move _119) -> [return: bb42, unwind: bb63]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:52
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:46: 67:48
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb42: {
        _121 = &_2;                      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:56
        _122 = const (18_usize,);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:60
        _120 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _121, move _122) -> [return: bb43, unwind: bb62]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:60
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:54: 67:56
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb43: {
        _104 = [move _105, move _108, move _111, move _114, move _117, move _120]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:13: 67:61
        _103 = fun(move _104) -> [return: bb44, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:9: 67:62
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:9: 67:12
                                         // + literal: Const { ty: fn([X; 6]) {fun}, val: Value(<ZST>) }
    }

    bb44: {
        _125 = &_123;                    // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:12
        _129 = &_2;                      // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:16
        _130 = const (19_usize,);        // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:20
        _128 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _129, move _130) -> [return: bb45, unwind: bb98]; // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:20
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:14: 75:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb45: {
        _132 = &_2;                      // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:24
        _133 = const (20_usize,);        // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:28
        _131 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _132, move _133) -> [return: bb46, unwind: bb61]; // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:22: 75:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb46: {
        _135 = &_2;                      // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:32
        _136 = const (21_usize,);        // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:36
        _134 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _135, move _136) -> [return: bb47, unwind: bb60]; // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:36
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:30: 75:32
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb47: {
        _138 = &_2;                      // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:40
        _139 = const (22_usize,);        // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:44
        _137 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _138, move _139) -> [return: bb48, unwind: bb59]; // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:44
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:38: 75:40
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb48: {
        _127 = (move _128, move _131, move _134, move _137); // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:13: 75:45
        _126 = (move _127,);             // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:46
        _124 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59] as Fn<((X, X, X, X),)>>::call(move _125, move _126) -> [return: bb49, unwind: bb98]; // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:46
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:9: 75:12
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59], ((X, X, X, X),)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59] as FnOnce<((X, X, X, X),)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59] as Fn<((X, X, X, X),)>>::call}, val: Value(<ZST>) }
    }

    bb49: {
        _168 = discriminant(_22);        // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
        switchInt(move _168) -> [0: bb88, otherwise: bb87]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb50: {
        _147 = _148;                     // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
        _146 = RefCell::<Vec<usize>>::borrow(move _147) -> [return: bb51, unwind: bb79]; // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:20: 78:26
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<usize>>) -> Ref<'a, Vec<usize>> {RefCell::<Vec<usize>>::borrow}, val: Value(<ZST>) }
    }

    bb51: {
        _145 = &_146;                    // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
        _144 = <Ref<'_, Vec<usize>> as Deref>::deref(move _145) -> [return: bb52, unwind: bb58]; // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:17: 78:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:17: 78:28
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<usize>>) -> &'a <Ref<'_, Vec<usize>> as Deref>::Target {<Ref<'_, Vec<usize>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb52: {
        _143 = _144;                     // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:16: 78:28
        _142 = &_143;                    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _151 = &_140;                    // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:30: 78:39
        _150 = &_151;                    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _141 = (move _142, move _150);   // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _152 = (_141.0: &&std::vec::Vec<usize>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _153 = (_141.1: &&[usize; 22]);  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _156 = _152;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _157 = _153;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _155 = <&Vec<usize> as PartialEq<&[usize; 22]>>::eq(move _156, move _157) -> [return: bb53, unwind: bb58]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &Vec<usize>, &'b &[usize; 22]) -> bool {<&Vec<usize> as PartialEq<&[usize; 22]>>::eq}, val: Value(<ZST>) }
    }

    bb53: {
        _154 = Not(move _155);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _154) -> [0: bb55, otherwise: bb54]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb54: {
        _158 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _162 = _152;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _161 = _162;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _164 = _153;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = _164;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _165 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _159 = core::panicking::assert_failed::<&Vec<usize>, &[usize; 22]>(move _160, move _161, move _163, move _165) -> bb58; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &Vec<usize>, &'b &[usize; 22], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&Vec<usize>, &[usize; 22]>}, val: Value(<ZST>) }
    }

    bb55: {
        drop(_146) -> [return: bb56, unwind: bb79]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb56: {
        drop(_1) -> bb57;                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:79:1: 79:2
    }

    bb57: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:79:2: 79:2
    }

    bb58 (cleanup): {
        drop(_146) -> bb79;              // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb59 (cleanup): {
        drop(_134) -> bb60;              // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:44: 75:45
    }

    bb60 (cleanup): {
        drop(_131) -> bb61;              // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:44: 75:45
    }

    bb61 (cleanup): {
        drop(_128) -> bb98;              // scope 12 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:75:44: 75:45
    }

    bb62 (cleanup): {
        drop(_117) -> bb63;              // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:60: 67:61
    }

    bb63 (cleanup): {
        drop(_114) -> bb64;              // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:60: 67:61
    }

    bb64 (cleanup): {
        drop(_111) -> bb65;              // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:60: 67:61
    }

    bb65 (cleanup): {
        drop(_108) -> bb66;              // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:60: 67:61
    }

    bb66 (cleanup): {
        drop(_105) -> bb98;              // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:60: 67:61
    }

    bb67 (cleanup): {
        drop(_83) -> bb91;               // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb68 (cleanup): {
        drop(_85) -> bb69;               // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:56:45: 56:46
    }

    bb69 (cleanup): {
        drop(_73) -> bb92;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb70 (cleanup): {
        drop(_76) -> bb98;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:44: 55:45
    }

    bb71 (cleanup): {
        drop(_65) -> bb94;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:51:63: 51:64
    }

    bb72 (cleanup): {
        drop(_58) -> bb98;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:47: 50:48
    }

    bb73 (cleanup): {
        drop(_49) -> bb96;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:47:63: 47:64
    }

    bb74 (cleanup): {
        drop(_41) -> bb98;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:46:47: 46:48
    }

    bb75 (cleanup): {
        drop(_31) -> bb98;               // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:43:63: 43:64
    }

    bb76 (cleanup): {
        drop(_23) -> bb100;              // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:41:49: 41:50
    }

    bb77 (cleanup): {
        drop(_15) -> bb100;              // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:38:63: 38:64
    }

    bb78 (cleanup): {
        drop(_6) -> bb79;                // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:36:49: 36:50
    }

    bb79 (cleanup): {
        drop(_1) -> bb80;                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:79:1: 79:2
    }

    bb80 (cleanup): {
        resume;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:27:1: 79:2
    }

    bb81: {
        _59 = &_2;                       // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:37
        _60 = const (7_usize,);          // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:40
        _58 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _59, move _60) -> [return: bb23, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:40
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:50:35: 50:37
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb82: {
        drop(((_40 as Some2).0: X)) -> [return: bb81, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
    }

    bb83: {
        _77 = &_2;                       // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:33
        _78 = const (9_usize,);          // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:36
        _76 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _77, move _78) -> [return: bb30, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:36
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:55:31: 55:33
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb84: {
        drop(((_57 as Some2).1: X)) -> [return: bb83, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
    }

    bb85: {
        drop(_73) -> [return: bb37, unwind: bb92]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb86: {
        _106 = &_2;                      // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:16
        _107 = const (13_usize,);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:20
        _105 = <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call(move _106, move _107) -> [return: bb38, unwind: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:20
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:67:14: 67:16
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], (usize,)) -> <[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as FnOnce<(usize,)>>::Output {<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21] as Fn<(usize,)>>::call}, val: Value(<ZST>) }
    }

    bb87: {
        _169 = discriminant(_5);         // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
        switchInt(move _169) -> [0: bb90, otherwise: bb89]; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb88: {
        drop(((_22 as Some2).1: X)) -> [return: bb87, unwind: bb100]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb89: {
        _140 = [const 2_usize, const 3_usize, const 6_usize, const 5_usize, const 7_usize, const 8_usize, const 12_usize, const 11_usize, const 9_usize, const 10_usize, const 18_usize, const 13_usize, const 14_usize, const 15_usize, const 16_usize, const 17_usize, const 21_usize, const 19_usize, const 20_usize, const 22_usize, const 4_usize, const 1_usize]; // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:77:20: 77:99
        _149 = &_1;                      // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
        _148 = <Rc<RefCell<Vec<usize>>> as Deref>::deref(move _149) -> [return: bb50, unwind: bb79]; // scope 13 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:78:18: 78:28
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<usize>>>) -> &'a <Rc<RefCell<Vec<usize>>> as Deref>::Target {<Rc<RefCell<Vec<usize>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb90: {
        drop(((_5 as Some2).0: X)) -> [return: bb89, unwind: bb79]; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb91 (cleanup): {
        drop((_84.0: X)) -> bb69;        // scope 10 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb92 (cleanup): {
        drop((_75.1: X)) -> bb98;        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:59:9: 59:10
    }

    bb93 (cleanup): {
        drop(((_57 as Some2).1: X)) -> bb98; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
    }

    bb94 (cleanup): {
        _170 = discriminant(_57);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
        switchInt(move _170) -> [0: bb93, otherwise: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:53:9: 53:10
    }

    bb95 (cleanup): {
        drop(((_40 as Some2).0: X)) -> bb98; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
    }

    bb96 (cleanup): {
        _171 = discriminant(_40);        // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
        switchInt(move _171) -> [0: bb95, otherwise: bb98]; // scope 6 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:49:9: 49:10
    }

    bb97 (cleanup): {
        drop(((_22 as Some2).1: X)) -> bb100; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb98 (cleanup): {
        _172 = discriminant(_22);        // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
        switchInt(move _172) -> [0: bb97, otherwise: bb100]; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb99 (cleanup): {
        drop(((_5 as Some2).0: X)) -> bb79; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }

    bb100 (cleanup): {
        _173 = discriminant(_5);         // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
        switchInt(move _173) -> [0: bb99, otherwise: bb79]; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:76:5: 76:6
    }
}

fn main::{closure#0}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:21], _2: usize) -> X {
    debug v => _2;                       // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:19: 30:20
    debug d => (*((*_1).0: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>)); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:28:9: 28:10
    let mut _0: X;                       // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:22: 30:22
    let mut _3: std::boxed::Box<usize>;  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:29: 30:40
    let mut _4: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:38: 30:39
    let mut _5: std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:45: 30:54
    let mut _6: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:45: 30:54
    let mut _7: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:56

    bb0: {
        _4 = _2;                         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:38: 30:39
        _3 = Box::<usize>::new(move _4) -> bb1; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:29: 30:40
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:29: 30:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = deref_copy ((*_1).0: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<usize>>>); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:45: 30:54
        _6 = _7;                         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:45: 30:54
        _5 = <Rc<RefCell<Vec<usize>>> as Clone>::clone(move _6) -> [return: bb2, unwind: bb3]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:45: 30:54
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:47: 30:52
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<usize>>>) -> Rc<RefCell<Vec<usize>>> {<Rc<RefCell<Vec<usize>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = X { x: move _3, d: move _5 }; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:22: 30:56
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:56: 30:56
    }

    bb3 (cleanup): {
        drop(_3) -> bb4;                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:55: 30:56
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:30:18: 30:56
    }
}

fn main::{closure#1}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:21: 31:45], _2: &X, _3: usize, _4: &X, _5: usize) -> () {
    debug a1 => _2;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:22: 31:24
    debug a2 => _3;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:30: 31:32
    debug b1 => _4;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:34: 31:36
    debug b2 => _5;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:42: 31:44
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:46: 31:46
    let mut _6: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _30: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _33: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _34: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _35: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _36: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _37: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _38: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:22: 31:24
    let mut _41: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:34: 31:36
    let mut _42: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:22: 31:24
    let mut _43: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:31:34: 31:36
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _26;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _27;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _32: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _32;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _40 = deref_copy ((*_2).0: std::boxed::Box<usize>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = (((_40.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &(*_42);                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_6.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_6.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _41 = deref_copy ((*_4).0: std::boxed::Box<usize>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = (((_41.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = &(*_43);                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = &_5;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _25);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _26 = (_23.0: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _27 = (_23.1: &usize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _30 = (*_26);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _31 = (*_27);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _29 = Eq(move _30, move _31);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _28 = Not(move _29);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _28) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _32 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = _38;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _33 = core::panicking::assert_failed::<usize, usize>(move _34, move _35, move _37, move _39); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:34:10: 34:10
    }
}

fn fun(_1: [X; 6]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:63: 60:63
    let _2: X;                           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:17: 60:18
    let _3: &mut X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:20: 60:29
    let _4: &[X; 2];                     // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
    let _5: &X;                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:44: 60:49
    let _6: X;                           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:51: 60:52
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&&[usize; 2], &&[usize; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &&[usize; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _43: &[usize; 2];                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:24: 63:45
    let _44: [usize; 2];                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:25: 63:45
    let mut _45: usize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:26: 63:34
    let _46: usize;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:30: 63:31
    let mut _47: usize;                  // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:36: 63:44
    let _48: usize;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:40: 63:41
    let mut _49: &&[usize; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: &&[usize; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: &&[usize; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &&[usize; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &&[usize; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &&[usize; 2];           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &&[usize; 2];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _66: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _69: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _71: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _72: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _74: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _75: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _76: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _77: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _78: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _79: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _81: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _82: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _83: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _88: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _89: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _91: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _92: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _93: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _94: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _95: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _96: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _103: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:17: 60:18
    let mut _104: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:20: 60:29
    let mut _105: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
    let mut _106: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
    let mut _107: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:44: 60:49
    let mut _108: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:51: 60:52
    let mut _109: *const usize;          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:17: 60:18
    let mut _110: *const usize;          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:20: 60:29
    let mut _111: *const usize;          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
    let mut _112: *const usize;          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
    let mut _113: *const usize;          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:44: 60:49
    let mut _114: *const usize;          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:51: 60:52
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:17: 60:18
        debug b => _3;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:20: 60:29
        debug xs => _4;                  // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
        debug c => _5;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:44: 60:49
        debug d => _6;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:51: 60:52
        let _10: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _27: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _28: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _50: &&[usize; 2];           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _51: &&[usize; 2];           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _67: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _68: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _84: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _85: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _98: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _99: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _100: &&[usize; 2];      // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _101: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _102: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _27;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _28;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _33;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _50;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _51;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _56: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _56;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _67;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _68;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _73: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _73;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 10 {
            debug left_val => _84;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _85;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _90: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _90;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = move _1[0 of 6];            // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:17: 60:18
        _3 = &mut _1[1 of 6];            // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:20: 60:29
        _4 = &_1[2..4];                  // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:31: 60:37
        _6 = move _1[5 of 6];            // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:51: 60:52
        _5 = &_1[4 of 6];                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:44: 60:49
        _103 = deref_copy (_2.0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = (((_103.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &(*_109);                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(fun, [], Some(promoted[4])) }
        _9 = _102;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 13_usize;            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23) -> bb14; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _104 = deref_copy ((*_3).0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _110 = (((_104.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = &(*_110);                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(fun, [], Some(promoted[3])) }
        _26 = _101;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _26);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_24.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_24.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = const 14_usize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<usize, usize>(move _35, move _36, move _38, move _40) -> bb14; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _46 = const 0_usize;             // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:30: 63:31
        _105 = deref_copy ((*_4)[_46].0: std::boxed::Box<usize>); // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:26: 63:34
        _111 = (((_105.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:26: 63:34
        _45 = (*_111);                   // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:26: 63:34
        _48 = const 1_usize;             // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:40: 63:41
        _106 = deref_copy ((*_4)[_48].0: std::boxed::Box<usize>); // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:36: 63:44
        _112 = (((_106.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:36: 63:44
        _47 = (*_112);                   // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:36: 63:44
        _44 = [move _45, move _47];      // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:25: 63:45
        _43 = &_44;                      // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:24: 63:45
        _42 = &_43;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _100 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[usize; 2], val: Unevaluated(fun, [], Some(promoted[2])) }
        _49 = _100;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _49);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_41.0: &&[usize; 2]);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_41.1: &&[usize; 2]);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = <&[usize; 2] as PartialEq>::eq(move _54, move _55) -> [return: bb5, unwind: bb14]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[usize; 2], &'b &[usize; 2]) -> bool {<&[usize; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _52 = Not(move _53);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb7, otherwise: bb6]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<&[usize; 2], &[usize; 2]>(move _58, move _59, move _61, move _63) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[usize; 2], &'b &[usize; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[usize; 2], &[usize; 2]>}, val: Value(<ZST>) }
    }

    bb7: {
        _107 = deref_copy ((*_5).0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _113 = (((_107.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = &(*_113);                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _99 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(fun, [], Some(promoted[1])) }
        _66 = _99;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _66);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _67 = (_64.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _68 = (_64.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _71 = (*_67);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _72 = const 17_usize;            // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _70 = Eq(move _71, move _72);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _69 = Not(move _70);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _69) -> [0: bb9, otherwise: bb8]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _73 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _75 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = _67;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _77;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _68;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _78 = _79;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _74 = core::panicking::assert_failed::<usize, usize>(move _75, move _76, move _78, move _80) -> bb14; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _108 = deref_copy (_6.0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _114 = (((_108.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _82 = &(*_114);                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _98 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(fun, [], Some(promoted[0])) }
        _83 = _98;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _81 = (move _82, move _83);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _84 = (_81.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _85 = (_81.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _88 = (*_84);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _89 = const 18_usize;            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _87 = Eq(move _88, move _89);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _86 = Not(move _87);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _86) -> [0: bb11, otherwise: bb10]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _90 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = _84;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _94;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _85;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = _96;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _91 = core::panicking::assert_failed::<usize, usize>(move _92, move _93, move _95, move _97) -> bb14; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_6) -> [return: bb12, unwind: bb15]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb12: {
        drop(_2) -> [return: bb13, unwind: bb27]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb13: {
        drop(_1[1 of 6]) -> [return: bb23, unwind: bb19]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb14 (cleanup): {
        drop(_6) -> bb15;                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb15 (cleanup): {
        drop(_2) -> bb27;                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:9: 66:10
    }

    bb17 (cleanup): {
        drop(_1[4 of 6]) -> bb16;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb18 (cleanup): {
        drop(_1[3 of 6]) -> bb17;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb19 (cleanup): {
        drop(_1[2 of 6]) -> bb18;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb20: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:10: 66:10
    }

    bb21: {
        drop(_1[4 of 6]) -> bb20;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb22: {
        drop(_1[3 of 6]) -> [return: bb21, unwind: bb17]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb23: {
        drop(_1[2 of 6]) -> [return: bb22, unwind: bb18]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb24 (cleanup): {
        drop(_1[4 of 6]) -> bb16;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb25 (cleanup): {
        drop(_1[3 of 6]) -> bb24;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb26 (cleanup): {
        drop(_1[2 of 6]) -> bb25;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }

    bb27 (cleanup): {
        drop(_1[1 of 6]) -> bb26;        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:66:9: 66:10
    }
}

promoted[0] in fun: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:65:30: 65:32

    bb0: {
        _1 = const 18_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:65:30: 65:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in fun: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:64:30: 64:32

    bb0: {
        _1 = const 17_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:64:30: 64:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in fun: &&[usize; 2] = {
    let mut _0: &&[usize; 2];            // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[usize; 2];             // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:47: 63:56
    let mut _2: [usize; 2];              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:48: 63:56

    bb0: {
        _2 = [const 15_usize, const 16_usize]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:48: 63:56
        _1 = &_2;                        // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:63:47: 63:56
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in fun: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:62:30: 62:32

    bb0: {
        _1 = const 14_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:62:30: 62:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in fun: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:61:30: 61:32

    bb0: {
        _1 = const 13_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:61:30: 61:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fun::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:59: 60:60

    bb0: {
        _0 = const 6_usize;              // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:59: 60:60
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:60:59: 60:60
    }
}

fn main::{closure#2}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 69:59], _2: (X, X, X, X)) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:60: 69:60
    let _3: X;                           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:21: 69:22
    let _4: &X;                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:24: 69:29
    let _5: X;                           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:31: 69:32
    let _6: &mut X;                      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:34: 69:43
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _43: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _46: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _48: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _49: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _51: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _52: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _53: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _54: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _55: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _56: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _58: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _60: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _65: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _66: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _68: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _69: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _70: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _71: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _72: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _73: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _79: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:21: 69:22
    let mut _80: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:24: 69:29
    let mut _81: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:31: 69:32
    let mut _82: std::boxed::Box<usize>; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:34: 69:43
    let mut _83: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:21: 69:22
    let mut _84: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:24: 69:29
    let mut _85: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:31: 69:32
    let mut _86: *const usize;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:34: 69:43
    scope 1 {
        debug a => _3;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:21: 69:22
        debug b => _4;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:24: 69:29
        debug c => _5;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:31: 69:32
        debug d => _6;                   // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:34: 69:43
        let _10: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _27: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _28: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _44: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _45: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _61: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _62: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _75: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _76: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _77: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _78: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _27;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _28;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _33;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _44;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _45;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _50: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _50;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 8 {
            debug left_val => _61;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _62;      // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _67: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 9 {
                debug kind => _67;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = move (_2.0: X);             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:21: 69:22
        _4 = &(_2.1: X);                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:24: 69:29
        _5 = move (_2.2: X);             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:31: 69:32
        _6 = &mut (_2.3: X);             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:34: 69:43
        _79 = deref_copy (_3.0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _83 = (((_79.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = &(*_83);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[3])) }
        _9 = _78;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _80 = deref_copy ((*_4).0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _84 = (((_80.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = &(*_84);                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _77 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[2])) }
        _26 = _77;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _26);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_24.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_24.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = (*_28);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<usize, usize>(move _35, move _36, move _38, move _40) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _81 = deref_copy (_5.0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _85 = (((_81.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = &(*_85);                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _76 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _43 = _76;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _43);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _44 = (_41.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _45 = (_41.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _48 = (*_44);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _49 = (*_45);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _47 = Eq(move _48, move _49);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _46 = Not(move _47);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _46) -> [0: bb6, otherwise: bb5]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _50 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _52 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = _44;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _54;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _56 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _55 = _56;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _51 = core::panicking::assert_failed::<usize, usize>(move _52, move _53, move _55, move _57) -> bb11; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb6: {
        _82 = deref_copy ((*_6).0: std::boxed::Box<usize>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _86 = (((_82.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _59 = &(*_86);                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _75 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#2}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _60 = _75;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _60);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _61 = (_58.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _62 = (_58.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _65 = (*_61);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _66 = (*_62);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _64 = Eq(move _65, move _66);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _63 = Not(move _64);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _63) -> [0: bb8, otherwise: bb7]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _67 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = _61;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _71;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _62;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = _73;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _68 = core::panicking::assert_failed::<usize, usize>(move _69, move _70, move _72, move _74) -> bb11; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb12]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb9: {
        drop(_3) -> [return: bb10, unwind: bb18]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb10: {
        drop((_2.1: X)) -> [return: bb16, unwind: bb15]; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb11 (cleanup): {
        drop(_5) -> bb12;                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb12 (cleanup): {
        drop(_3) -> bb18;                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:69:19: 74:10
    }

    bb14: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:10: 74:10
    }

    bb15 (cleanup): {
        drop((_2.3: X)) -> bb13;         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb16: {
        drop((_2.3: X)) -> bb14;         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb17 (cleanup): {
        drop((_2.3: X)) -> bb13;         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }

    bb18 (cleanup): {
        drop((_2.1: X)) -> bb17;         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:74:9: 74:10
    }
}

promoted[0] in main::{closure#2}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:73:30: 73:32

    bb0: {
        _1 = const 22_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:73:30: 73:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main::{closure#2}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:72:30: 72:32

    bb0: {
        _1 = const 21_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:72:30: 72:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main::{closure#2}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:71:30: 71:32

    bb0: {
        _1 = const 20_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:71:30: 71:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main::{closure#2}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:70:30: 70:32

    bb0: {
        _1 = const 19_usize;             // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:70:30: 70:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn DoubleOption::Some2(_1: T, _2: U) -> DoubleOption<T, U> {
    let mut _0: DoubleOption<T, U>;      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:23:5: 23:10

    bb0: {
        _0 = DoubleOption::<T, U>::Some2(move _1, move _2); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:23:5: 23:10
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:23:5: 23:10
    }
}

// MIR FOR CTFE
fn DoubleOption::Some2(_1: T, _2: U) -> DoubleOption<T, U> {
    let mut _0: DoubleOption<T, U>;      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:23:5: 23:10

    bb0: {
        _0 = DoubleOption::<T, U>::Some2(move _1, move _2); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:23:5: 23:10
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-dynamic-semantics.rs:23:5: 23:10
    }
}
