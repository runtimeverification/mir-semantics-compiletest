// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:3:11: 3:11
    let mut _1: (main::U, main::U, main::U); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:9:9: 9:16
    let mut _6: &&main::U;               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
    let mut _7: &mut &mut main::U;       // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
    let _8: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:16:5: 16:23
    let mut _9: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:16:20: 16:22
    let mut _11: &&main::U;              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
    let mut _12: &mut &mut main::U;      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
    let _13: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:22:5: 22:22
    let mut _14: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:22:19: 22:21
    let mut _16: &&main::U;              // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 26:6
    let _17: ();                         // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:27:5: 27:18
    let mut _18: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16]; // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:27:15: 27:17
    scope 1 {
        debug tup => _1;                 // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:9:9: 9:16
        let _2: &main::U;                // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:10: 10:17
        let _3: main::U;                 // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:19: 10:22
        let _4: &mut main::U;            // in scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:24: 10:35
        scope 2 {
            debug _x0 => _2;             // in scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:10: 10:17
            debug _x1 => _3;             // in scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:19: 10:22
            debug _x2 => _4;             // in scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:24: 10:35
            let _5: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16]; // in scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:9: 11:11
            scope 3 {
                debug c1 => _5;          // in scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:9: 11:11
                let _10: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16]; // in scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:9: 18:11
                scope 4 {
                    debug c2 => _10;     // in scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:9: 18:11
                    let _15: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16]; // in scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:9: 24:11
                    scope 5 {
                        debug c3 => _15; // in scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:9: 24:11
                    }
                }
            }
        }
    }

    bb0: {
        _2 = &(_1.0: main::U);           // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:10: 10:17
        _4 = &mut (_1.2: main::U);       // scope 1 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:24: 10:35
        _6 = &_2;                        // scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
        _7 = &mut _4;                    // scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
        _5 = [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16] { _x0: move _6, _x1: move _3, _x2: move _7 }; // scope 2 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ move_ref_patterns_closure_captures_pass[8489]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&&main::U, main::U, &mut &mut main::U),
                                         // ]
        _9 = move _5;                    // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:16:20: 16:22
        _8 = accept_fn_once::<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16]>(move _9) -> bb1; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:16:5: 16:23
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:16:5: 16:19
                                         // + literal: Const { ty: fn([closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16]) {accept_fn_once::<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16]>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = &_2;                       // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
        _12 = &mut _4;                   // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
        _10 = [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16] { _x0: move _11, _x2: move _12 }; // scope 3 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
                                         // closure
                                         // + def_id: DefId(0:10 ~ move_ref_patterns_closure_captures_pass[8489]::main::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&&main::U, &mut &mut main::U),
                                         // ]
        _14 = move _10;                  // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:22:19: 22:21
        _13 = accept_fn_mut::<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16]>(move _14) -> bb2; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:22:5: 22:22
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:22:5: 22:18
                                         // + literal: Const { ty: fn([closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16]) {accept_fn_mut::<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16]>}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = &_2;                       // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 26:6
        _15 = [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16] { _x0: move _16 }; // scope 4 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 26:6
                                         // closure
                                         // + def_id: DefId(0:11 ~ move_ref_patterns_closure_captures_pass[8489]::main::{closure#2})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&&main::U,),
                                         // ]
        _18 = _15;                       // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:27:15: 27:17
        _17 = accept_fn::<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16]>(move _18) -> bb3; // scope 5 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:27:5: 27:18
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:27:5: 27:14
                                         // + literal: Const { ty: fn([closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16]) {accept_fn::<[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16]>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:28:2: 28:2
    }
}

fn accept_fn_once(_1: impl FnOnce()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:5:41: 5:41

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:5:42: 5:43
    }

    bb1: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:5:43: 5:43
    }
}

fn accept_fn_mut(_1: impl FnMut()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:6:39: 6:39

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:6:40: 6:41
    }

    bb1: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:6:41: 6:41
    }
}

fn accept_fn(_1: impl Fn()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:7:32: 7:32

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:7:33: 7:34
    }

    bb1: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:7:34: 7:34
    }
}

fn main::{closure#0}(_1: [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 11:16]) -> () {
    debug _x0 => (*(_1.0: &&main::U));   // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:10: 10:17
    debug _x1 => (_1.1: main::U);        // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:19: 10:22
    debug _x2 => (*(_1.2: &mut &mut main::U)); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:24: 10:35
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:17: 11:17
    let _2: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:9: 12:24
    let mut _3: &main::U;                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:20: 12:23
    let _4: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:13:9: 13:23
    let mut _5: main::U;                 // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:13:19: 13:22
    let _6: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:9: 14:28
    let mut _7: &mut main::U;            // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:24: 14:27
    let mut _8: &&main::U;               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
    let mut _9: &main::U;                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
    let mut _10: &mut &mut main::U;      // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6
    let mut _11: &mut main::U;           // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:11:14: 15:6

    bb0: {
        _8 = deref_copy (_1.0: &&main::U); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:20: 12:23
        _9 = deref_copy (*_8);           // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:20: 12:23
        _3 = _9;                         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:20: 12:23
        _2 = std::mem::drop::<&U>(move _3) -> bb1; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:9: 12:24
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:12:9: 12:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&U) {std::mem::drop::<&U>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = std::mem::drop::<U>(move _5) -> bb2; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:13:9: 13:23
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:13:9: 13:18
                                         // + literal: Const { ty: fn(U) {std::mem::drop::<U>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = deref_copy (_1.2: &mut &mut main::U); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:24: 14:27
        _11 = deref_copy (*_10);         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:24: 14:27
        _7 = &mut (*_11);                // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:24: 14:27
        _6 = std::mem::drop::<&mut U>(move _7) -> bb3; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:9: 14:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:14:9: 14:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut U) {std::mem::drop::<&mut U>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:15:6: 15:6
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 18:16]) -> () {
    debug _x0 => (*((*_1).0: &&main::U)); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:10: 10:17
    debug _x2 => (*((*_1).1: &mut &mut main::U)); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:24: 10:35
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:17: 18:17
    let _2: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:9: 19:24
    let mut _3: &main::U;                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:20: 19:23
    let _4: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:9: 20:28
    let mut _5: &mut main::U;            // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:24: 20:27
    let mut _6: &&main::U;               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
    let mut _7: &main::U;                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
    let mut _8: &mut &mut main::U;       // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6
    let mut _9: &mut main::U;            // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:18:14: 21:6

    bb0: {
        _6 = deref_copy ((*_1).0: &&main::U); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:20: 19:23
        _7 = deref_copy (*_6);           // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:20: 19:23
        _3 = _7;                         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:20: 19:23
        _2 = std::mem::drop::<&U>(move _3) -> bb1; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:9: 19:24
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:19:9: 19:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&U) {std::mem::drop::<&U>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = deref_copy ((*_1).1: &mut &mut main::U); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:24: 20:27
        _9 = deref_copy (*_8);           // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:24: 20:27
        _5 = &mut (*_9);                 // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:24: 20:27
        _4 = std::mem::drop::<&mut U>(move _5) -> bb2; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:9: 20:28
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:20:9: 20:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut U) {std::mem::drop::<&mut U>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:21:6: 21:6
    }
}

fn main::{closure#2}(_1: &[closure@ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 24:16]) -> () {
    debug _x0 => (*((*_1).0: &&main::U)); // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:10:10: 10:17
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:17: 24:17
    let _2: ();                          // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:9: 25:24
    let mut _3: &main::U;                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:20: 25:23
    let mut _4: &&main::U;               // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 26:6
    let mut _5: &main::U;                // in scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:24:14: 26:6

    bb0: {
        _4 = deref_copy ((*_1).0: &&main::U); // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:20: 25:23
        _5 = deref_copy (*_4);           // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:20: 25:23
        _3 = _5;                         // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:20: 25:23
        _2 = std::mem::drop::<&U>(move _3) -> bb1; // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:9: 25:24
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:25:9: 25:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&U) {std::mem::drop::<&U>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/pattern/move-ref-patterns/move-ref-patterns-closure-captures-pass.rs:26:6: 26:6
    }
}
