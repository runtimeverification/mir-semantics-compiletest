// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:12:11: 12:11
    let _1: Bar;                         // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:9: 13:12
    let mut _2: std::string::String;     // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:39
    let mut _3: &str;                    // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:39
    let _4: &str;                        // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:27
    let mut _5: std::string::String;     // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:59
    let mut _6: &str;                    // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:59
    let _7: &str;                        // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:47
    let mut _8: E;                       // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:11: 14:50
    let mut _9: std::string::String;     // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:27
    let mut _10: &str;                   // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:27
    let _11: &str;                       // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:20
    let mut _12: std::string::String;    // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:38
    let mut _13: &str;                   // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:38
    let _14: &str;                       // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:31
    let mut _15: std::string::String;    // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:49
    let mut _16: &str;                   // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:49
    let _17: &str;                       // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:42
    let mut _23: bool;                   // in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:1: 20:2
    scope 1 {
        debug bar => _1;                 // in scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:13:9: 13:12
        let _18: std::string::String;    // in scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:16: 15:17
        let _19: std::string::String;    // in scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:19: 15:20
        let _20: &std::string::String;   // in scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:22: 15:27
        let _21: std::string::String;    // in scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:18:15: 18:16
        let _22: &std::string::String;   // in scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:18:18: 18:23
        scope 2 {
            debug a => _18;              // in scope 2 at ui/pattern/move-ref-patterns/issue-53840.rs:15:16: 15:17
            debug b => _19;              // in scope 2 at ui/pattern/move-ref-patterns/issue-53840.rs:15:19: 15:20
            debug c => _20;              // in scope 2 at ui/pattern/move-ref-patterns/issue-53840.rs:15:22: 15:27
        }
        scope 3 {
            debug a => _21;              // in scope 3 at ui/pattern/move-ref-patterns/issue-53840.rs:18:15: 18:16
            debug b => _22;              // in scope 3 at ui/pattern/move-ref-patterns/issue-53840.rs:18:18: 18:23
        }
    }

    bb0: {
        _23 = const false;               // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:9: 13:12
        _4 = const "1";                  // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:27
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:39
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:24: 13:39
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:13:28: 13:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const "2";                  // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:47
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:59
        _5 = <str as ToString>::to_string(move _6) -> [return: bb2, unwind: bb12]; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:44: 13:59
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:13:48: 13:57
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = const true;                // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:15: 13:61
        _1 = Bar { a: move _2, b: move _5 }; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:15: 13:61
        _11 = const "";                  // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:20
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:27
        _9 = <&str as Into<String>>::into(move _10) -> [return: bb3, unwind: bb19]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:18: 14:27
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:14:21: 14:25
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = const "";                  // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:31
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:38
        _12 = <&str as Into<String>>::into(move _13) -> [return: bb4, unwind: bb11]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:29: 14:38
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:14:32: 14:36
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = const "";                  // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:42
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:49
        _15 = <&str as Into<String>>::into(move _16) -> [return: bb5, unwind: bb10]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:40: 14:49
                                         // mir::Constant
                                         // + span: ui/pattern/move-ref-patterns/issue-53840.rs:14:43: 14:47
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = E::Foo(move _9, move _12, move _15); // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:11: 14:50
        _18 = move ((_8 as Foo).0: std::string::String); // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:16: 15:17
        _19 = move ((_8 as Foo).1: std::string::String); // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:19: 15:20
        _20 = &((_8 as Foo).2: std::string::String); // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:22: 15:27
        drop(_19) -> [return: bb6, unwind: bb9]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:33: 15:34
    }

    bb6: {
        drop(_18) -> [return: bb7, unwind: bb16]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:33: 15:34
    }

    bb7: {
        drop(((_8 as Foo).2: std::string::String)) -> [return: bb14, unwind: bb19]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:16:5: 16:6
    }

    bb8: {
        drop((_1.1: std::string::String)) -> bb15; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:1: 20:2
    }

    bb9 (cleanup): {
        drop(_18) -> bb16;               // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:15:33: 15:34
    }

    bb10 (cleanup): {
        drop(_12) -> bb11;               // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:49: 14:50
    }

    bb11 (cleanup): {
        drop(_9) -> bb19;                // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:14:49: 14:50
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:13:60: 13:61
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:12:1: 20:2
    }

    bb14: {
        _23 = const false;               // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:18:15: 18:16
        _21 = move (_1.0: std::string::String); // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:18:15: 18:16
        _22 = &(_1.1: std::string::String); // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:18:18: 18:23
        drop(_21) -> [return: bb8, unwind: bb19]; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:18:30: 18:31
    }

    bb15: {
        _23 = const false;               // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:1: 20:2
        return;                          // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:2: 20:2
    }

    bb16 (cleanup): {
        drop(((_8 as Foo).2: std::string::String)) -> bb19; // scope 1 at ui/pattern/move-ref-patterns/issue-53840.rs:16:5: 16:6
    }

    bb17 (cleanup): {
        drop((_1.1: std::string::String)) -> bb13; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:1: 20:2
    }

    bb18 (cleanup): {
        drop((_1.0: std::string::String)) -> bb17; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:1: 20:2
    }

    bb19 (cleanup): {
        switchInt(_23) -> [0: bb17, otherwise: bb18]; // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:20:1: 20:2
    }
}

fn E::Foo(_1: String, _2: String, _3: String) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:4:5: 4:8

    bb0: {
        _0 = E::Foo(move _1, move _2, move _3); // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:4:5: 4:8
        return;                          // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:4:5: 4:8
    }
}

// MIR FOR CTFE
fn E::Foo(_1: String, _2: String, _3: String) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:4:5: 4:8

    bb0: {
        _0 = E::Foo(move _1, move _2, move _3); // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:4:5: 4:8
        return;                          // scope 0 at ui/pattern/move-ref-patterns/issue-53840.rs:4:5: 4:8
    }
}
