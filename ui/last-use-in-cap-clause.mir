// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> Box<dyn FnMut() -> isize> {
    let mut _0: std::boxed::Box<dyn std::ops::FnMut() -> isize>; // return place in scope 0 at ui/last-use-in-cap-clause.rs:8:13: 8:48
    let mut _1: std::boxed::Box<dyn std::ops::FnMut() -> isize>; // in scope 0 at ui/last-use-in-cap-clause.rs:12:5: 12:21
    let _2: std::boxed::Box<isize>;      // in scope 0 at ui/last-use-in-cap-clause.rs:9:9: 9:10
    let mut _4: std::boxed::Box<isize>;  // in scope 0 at ui/last-use-in-cap-clause.rs:10:20: 10:29
    let mut _5: &std::boxed::Box<isize>; // in scope 0 at ui/last-use-in-cap-clause.rs:10:20: 10:29
    let mut _7: std::boxed::Box<[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]>; // in scope 0 at ui/last-use-in-cap-clause.rs:12:5: 12:21
    let mut _8: [closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]; // in scope 0 at ui/last-use-in-cap-clause.rs:12:14: 12:20
    scope 1 {
        debug k => _2;                   // in scope 1 at ui/last-use-in-cap-clause.rs:9:9: 9:10
        let _3: A;                       // in scope 1 at ui/last-use-in-cap-clause.rs:10:9: 10:11
        scope 2 {
            debug _u => _3;              // in scope 2 at ui/last-use-in-cap-clause.rs:10:9: 10:11
            let _6: [closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]; // in scope 2 at ui/last-use-in-cap-clause.rs:11:9: 11:15
            scope 3 {
                debug result => _6;      // in scope 3 at ui/last-use-in-cap-clause.rs:11:9: 11:15
            }
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 22_isize) -> bb1; // scope 0 at ui/last-use-in-cap-clause.rs:9:21: 9:33
                                         // mir::Constant
                                         // + span: ui/last-use-in-cap-clause.rs:9:21: 9:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_2;                        // scope 1 at ui/last-use-in-cap-clause.rs:10:20: 10:29
        _4 = <Box<isize> as Clone>::clone(move _5) -> [return: bb2, unwind: bb7]; // scope 1 at ui/last-use-in-cap-clause.rs:10:20: 10:29
                                         // mir::Constant
                                         // + span: ui/last-use-in-cap-clause.rs:10:22: 10:27
                                         // + literal: Const { ty: for<'a> fn(&'a Box<isize>) -> Box<isize> {<Box<isize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = A { a: move _4 };           // scope 1 at ui/last-use-in-cap-clause.rs:10:14: 10:30
        _7 = Box::<[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]>::new(move _8) -> [return: bb3, unwind: bb6]; // scope 3 at ui/last-use-in-cap-clause.rs:12:5: 12:21
                                         // mir::Constant
                                         // + span: ui/last-use-in-cap-clause.rs:12:5: 12:13
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn([closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]) -> Box<[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]> {Box::<[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = move _7 as std::boxed::Box<dyn std::ops::FnMut() -> isize> (Pointer(Unsize)); // scope 3 at ui/last-use-in-cap-clause.rs:12:5: 12:21
        drop(_3) -> [return: bb4, unwind: bb7]; // scope 1 at ui/last-use-in-cap-clause.rs:13:1: 13:2
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at ui/last-use-in-cap-clause.rs:13:1: 13:2
    }

    bb5: {
        _0 = move _1 as std::boxed::Box<dyn std::ops::FnMut() -> isize> (Pointer(Unsize)); // scope 0 at ui/last-use-in-cap-clause.rs:12:5: 12:21
        return;                          // scope 0 at ui/last-use-in-cap-clause.rs:13:2: 13:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 1 at ui/last-use-in-cap-clause.rs:13:1: 13:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 0 at ui/last-use-in-cap-clause.rs:13:1: 13:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/last-use-in-cap-clause.rs:8:1: 13:2
    }
}

fn foo::{closure#0}(_1: &[closure@ui/last-use-in-cap-clause.rs:11:19: 11:21]) -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/last-use-in-cap-clause.rs:11:22: 11:22

    bb0: {
        _0 = const 22_isize;             // scope 0 at ui/last-use-in-cap-clause.rs:11:22: 11:24
        return;                          // scope 0 at ui/last-use-in-cap-clause.rs:11:24: 11:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/last-use-in-cap-clause.rs:15:15: 15:15
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: isize;                       // in scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:23
    let mut _4: &mut std::boxed::Box<dyn std::ops::FnMut() -> isize>; // in scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:21
    let mut _5: std::boxed::Box<dyn std::ops::FnMut() -> isize>; // in scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:21
    let mut _6: ();                      // in scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:23
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = foo() -> bb1;               // scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:21
                                         // mir::Constant
                                         // + span: ui/last-use-in-cap-clause.rs:16:16: 16:19
                                         // + literal: Const { ty: fn() -> Box<(dyn FnMut() -> isize + 'static)> {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _5;                    // scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:21
        _3 = <Box<dyn FnMut() -> isize> as FnMut<()>>::call_mut(move _4, move _6) -> [return: bb2, unwind: bb6]; // scope 0 at ui/last-use-in-cap-clause.rs:16:16: 16:23
                                         // mir::Constant
                                         // + span: ui/last-use-in-cap-clause.rs:16:16: 16:21
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut Box<dyn FnMut() -> isize>, ()) -> <Box<dyn FnMut() -> isize> as FnOnce<()>>::Output {<Box<dyn FnMut() -> isize> as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 22_isize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<isize, isize>(move _16, move _17, move _19, move _21) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        return;                          // scope 0 at ui/last-use-in-cap-clause.rs:17:2: 17:2
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/last-use-in-cap-clause.rs:15:1: 17:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/last-use-in-cap-clause.rs:16:25: 16:27

    bb0: {
        _1 = const 22_isize;             // scope 0 at ui/last-use-in-cap-clause.rs:16:25: 16:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
