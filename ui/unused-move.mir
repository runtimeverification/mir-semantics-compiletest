// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unused-move.rs:10:15: 10:15
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/unused-move.rs:11:9: 11:10
    let _2: std::boxed::Box<i32>;        // in scope 0 at ui/unused-move.rs:12:5: 12:6
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/unused-move.rs:11:9: 11:10
    }

    bb0: {
        _1 = Box::<i32>::new(const 1_i32) -> bb1; // scope 0 at ui/unused-move.rs:11:21: 11:32
                                         // mir::Constant
                                         // + span: ui/unused-move.rs:11:21: 11:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _1;                    // scope 1 at ui/unused-move.rs:12:5: 12:6
        drop(_2) -> bb2;                 // scope 1 at ui/unused-move.rs:12:6: 12:7
    }

    bb2: {
        return;                          // scope 0 at ui/unused-move.rs:13:2: 13:2
    }
}
