// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 42_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: fn() -> isize;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug g => _1;
        let _2: isize;
        scope 2 {
            debug i => _2;
            let _5: &isize;
            let _6: &isize;
            let mut _14: &isize;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
        }
    }

    bb0: {
        _1 = f as fn() -> isize (Pointer(ReifyFnPointer));
        _2 = _1() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_2;
        _14 = const _;
        _3 = (move _4, _14);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}
