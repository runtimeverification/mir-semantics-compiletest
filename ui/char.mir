// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: char;
    let mut _3: (&char, &char);
    let mut _4: &char;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: char;
    let mut _10: char;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&char, &char);
    let mut _15: &char;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: char;
    let mut _21: char;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&char, &char);
    let mut _26: &char;
    let mut _27: &char;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: char;
    let mut _33: char;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&char, &char);
    let mut _38: &char;
    let mut _39: &char;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: char;
    let mut _45: char;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&char, &char);
    let mut _50: &char;
    let mut _51: &char;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: char;
    let mut _57: char;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&char, &char);
    let mut _62: &char;
    let mut _65: bool;
    let mut _66: bool;
    let mut _67: char;
    let mut _68: char;
    let _70: !;
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _72: (&char, &char);
    let mut _73: &char;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: char;
    let mut _79: char;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug c => const 'x';
        let _2: char;
        scope 2 {
            debug d => const 'x';
            let _5: &char;
            let _6: &char;
            let _16: &char;
            let _17: &char;
            let _28: &char;
            let _29: &char;
            let _40: &char;
            let _41: &char;
            let _52: &char;
            let _53: &char;
            let _63: &char;
            let _64: &char;
            let _74: &char;
            let _75: &char;
            let mut _83: &char;
            let mut _84: &char;
            let mut _85: &char;
            let mut _86: &char;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
            scope 7 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _34;
                }
            }
            scope 9 {
                debug left_val => _40;
                debug right_val => _41;
                let _46: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _46;
                }
            }
            scope 11 {
                debug left_val => _52;
                debug right_val => _53;
                let _58: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _58;
                }
            }
            scope 13 {
                debug left_val => _63;
                debug right_val => _64;
                let _69: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _69;
                }
            }
            scope 15 {
                debug left_val => _74;
                debug right_val => _75;
                let _80: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _80;
                }
            }
        }
    }

    bb0: {
        _1 = const 'x';
        _2 = const 'x';
        _4 = &_1;
        _86 = const _;
        _3 = (move _4, _86);
        _5 = (_3.0: &char);
        _6 = (_3.1: &char);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<char, char>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _85 = const _;
        _15 = &_1;
        _14 = (_85, move _15);
        _16 = (_14.0: &char);
        _17 = (_14.1: &char);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<char, char>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb4: {
        _26 = &_1;
        _27 = &_1;
        _25 = (move _26, move _27);
        _28 = (_25.0: &char);
        _29 = (_25.1: &char);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<char, char>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _38 = &_1;
        _39 = &_2;
        _37 = (move _38, move _39);
        _40 = (_37.0: &char);
        _41 = (_37.1: &char);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<char, char>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb8: {
        _50 = &_2;
        _51 = &_1;
        _49 = (move _50, move _51);
        _52 = (_49.0: &char);
        _53 = (_49.1: &char);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<char, char>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb10: {
        _62 = &_2;
        _84 = const _;
        _61 = (move _62, _84);
        _63 = (_61.0: &char);
        _64 = (_61.1: &char);
        _67 = (*_63);
        _68 = (*_64);
        _66 = Eq(move _67, move _68);
        _65 = Not(move _66);
        switchInt(move _65) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _69 = core::panicking::AssertKind::Eq;
        _71 = Option::<Arguments<'_>>::None;
        _70 = core::panicking::assert_failed::<char, char>(move _69, _63, _64, move _71) -> unwind continue;
    }

    bb12: {
        _83 = const _;
        _73 = &_2;
        _72 = (_83, move _73);
        _74 = (_72.0: &char);
        _75 = (_72.1: &char);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<char, char>(move _80, _74, _75, move _82) -> unwind continue;
    }

    bb14: {
        return;
    }
}

promoted[0] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'x';
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'x';
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'x';
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'x';
        _0 = &_1;
        return;
    }
}
