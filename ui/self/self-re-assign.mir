// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<i32>;
    let mut _2: std::boxed::Box<i32>;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: std::rc::Rc<i32>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: &i32;
    let mut _19: &std::rc::Rc<i32>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: *const i32;
    scope 1 {
        debug x => _1;
        let _5: &i32;
        let _6: &i32;
        let mut _14: std::rc::Rc<i32>;
        let mut _30: &i32;
        let mut _32: *const ();
        let mut _33: usize;
        let mut _34: usize;
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: bool;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
        scope 4 {
            debug x => _14;
            let _20: &i32;
            let _21: &i32;
            let mut _29: &i32;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 3_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _1;
        _1 = move _2;
        _31 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _32 = _31 as *const () (PtrToPtr);
        _33 = _32 as usize (Transmute);
        _34 = AlignOf(i32);
        _35 = Sub(_34, const 1_usize);
        _36 = BitAnd(_33, _35);
        _37 = Eq(_36, const 0_usize);
        assert(_37, "misaligned pointer dereference: address must be a multiple of {} but is {}", _34, _33) -> [success: bb13, unwind unreachable];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> bb11;
    }

    bb3: {
        _14 = Rc::<i32>::new(const 3_i32) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _15 = move _14;
        _14 = move _15;
        _19 = &_14;
        _18 = <Rc<i32> as Deref>::deref(move _19) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _17 = _18;
        _29 = const _;
        _16 = (move _17, _29);
        _20 = (_16.0: &i32);
        _21 = (_16.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28) -> bb10;
    }

    bb7: {
        drop(_14) -> [return: bb8, unwind: bb11];
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_14) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13: {
        _4 = &(*_31);
        _30 = const _;
        _3 = (move _4, _30);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
