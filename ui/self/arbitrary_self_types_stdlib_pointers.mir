// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_stdlib_pointers.rs:19:1: 19:19>::by_rc(_1: Rc<i64>) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: &i64;
    let mut _3: &std::rc::Rc<i64>;

    bb0: {
        _3 = &_1;
        _2 = <Rc<i64> as Deref>::deref(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _0 = (*_2);
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/self/arbitrary_self_types_stdlib_pointers.rs:19:1: 19:19>::by_arc(_1: Arc<i64>) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: &i64;
    let mut _3: &std::sync::Arc<i64>;

    bb0: {
        _3 = &_1;
        _2 = <Arc<i64> as Deref>::deref(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _0 = (*_2);
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/self/arbitrary_self_types_stdlib_pointers.rs:19:1: 19:19>::by_pin_mut(_1: Pin<&mut i64>) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: &i64;
    let mut _3: &std::pin::Pin<&mut i64>;

    bb0: {
        _3 = &_1;
        _2 = <Pin<&mut i64> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_2);
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_stdlib_pointers.rs:19:1: 19:19>::by_pin_box(_1: Pin<Box<i64>>) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: &i64;
    let mut _3: &std::pin::Pin<std::boxed::Box<i64>>;

    bb0: {
        _3 = &_1;
        _2 = <Pin<Box<i64>> as Deref>::deref(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _0 = (*_2);
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn <impl at ui/self/arbitrary_self_types_stdlib_pointers.rs:19:1: 19:19>::by_pin_pin_pin_ref(_1: Pin<Pin<Pin<&i64>>>) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: &i64;
    let mut _3: &std::pin::Pin<std::pin::Pin<std::pin::Pin<&i64>>>;

    bb0: {
        _3 = &_1;
        _2 = <Pin<Pin<Pin<&i64>>> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::rc::Rc<dyn Trait>;
    let mut _2: std::rc::Rc<i64>;
    let mut _3: (&i64, &i64);
    let mut _4: &i64;
    let _5: i64;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i64;
    let mut _11: i64;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: std::sync::Arc<dyn Trait>;
    let mut _16: std::sync::Arc<i64>;
    let mut _17: (&i64, &i64);
    let mut _18: &i64;
    let _19: i64;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i64;
    let mut _25: i64;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: std::pin::Pin<&mut dyn Trait>;
    let mut _31: std::pin::Pin<&mut i64>;
    let mut _32: &mut i64;
    let mut _33: (&i64, &i64);
    let mut _34: &i64;
    let _35: i64;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: i64;
    let mut _41: i64;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: std::pin::Pin<std::boxed::Box<dyn Trait>>;
    let mut _46: std::pin::Pin<std::boxed::Box<i64>>;
    let mut _47: std::boxed::Box<i64>;
    let mut _48: (&i64, &i64);
    let mut _49: &i64;
    let _50: i64;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: i64;
    let mut _56: i64;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: std::pin::Pin<std::pin::Pin<std::pin::Pin<&dyn Trait>>>;
    let mut _62: std::pin::Pin<std::pin::Pin<std::pin::Pin<&i64>>>;
    let mut _63: std::pin::Pin<std::pin::Pin<&i64>>;
    let mut _64: std::pin::Pin<&i64>;
    let mut _65: &i64;
    let mut _66: (&i64, &i64);
    let mut _67: &i64;
    let _68: i64;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: i64;
    let mut _74: i64;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug rc => _1;
        let _6: &i64;
        let _7: &i64;
        let mut _82: &i64;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug arc => _15;
            let _20: &i64;
            let _21: &i64;
            let mut _29: i64;
            let mut _81: &i64;
            scope 5 {
                debug left_val => _20;
                debug right_val => _21;
                let _26: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _26;
                }
            }
            scope 7 {
                debug value => _29;
                scope 8 {
                    debug pin_mut => _30;
                    let _36: &i64;
                    let _37: &i64;
                    let mut _80: &i64;
                    scope 9 {
                        debug left_val => _36;
                        debug right_val => _37;
                        let _42: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _42;
                        }
                    }
                    scope 11 {
                        debug pin_box => _45;
                        let _51: &i64;
                        let _52: &i64;
                        let _60: i64;
                        let mut _79: &i64;
                        scope 12 {
                            debug left_val => _51;
                            debug right_val => _52;
                            let _57: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _57;
                            }
                        }
                        scope 14 {
                            debug value => const 5_i64;
                            scope 15 {
                                debug pin_pin_pin_ref => _61;
                                let _69: &i64;
                                let _70: &i64;
                                let mut _78: &i64;
                                scope 16 {
                                    debug left_val => _69;
                                    debug right_val => _70;
                                    let _75: core::panicking::AssertKind;
                                    scope 17 {
                                        debug kind => _75;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = Rc::<i64>::new(const 1_i64) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::rc::Rc<dyn Trait> (Pointer(Unsize));
        _82 = const _;
        _5 = <dyn Trait as Trait>::by_rc(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _3 = (_82, move _4);
        _6 = (_3.0: &i64);
        _7 = (_3.1: &i64);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i64, i64>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        _16 = Arc::<i64>::new(const 2_i64) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = move _16 as std::sync::Arc<dyn Trait> (Pointer(Unsize));
        _81 = const _;
        _19 = <dyn Trait as Trait>::by_arc(move _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = &_19;
        _17 = (_81, move _18);
        _20 = (_17.0: &i64);
        _21 = (_17.1: &i64);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i64, i64>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb8: {
        _29 = const 3_i64;
        _32 = &mut _29;
        _31 = Pin::<&mut i64>::new(move _32) -> [return: bb9, unwind continue];
    }

    bb9: {
        _30 = move _31 as std::pin::Pin<&mut dyn Trait> (Pointer(Unsize));
        _80 = const _;
        _35 = <dyn Trait as Trait>::by_pin_mut(move _30) -> [return: bb10, unwind continue];
    }

    bb10: {
        _34 = &_35;
        _33 = (_80, move _34);
        _36 = (_33.0: &i64);
        _37 = (_33.1: &i64);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<i64, i64>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb12: {
        _47 = Box::<i64>::new(const 4_i64) -> [return: bb13, unwind continue];
    }

    bb13: {
        _46 = <Box<i64> as Into<Pin<Box<i64>>>>::into(move _47) -> [return: bb14, unwind continue];
    }

    bb14: {
        _45 = move _46 as std::pin::Pin<std::boxed::Box<dyn Trait>> (Pointer(Unsize));
        _79 = const _;
        _50 = <dyn Trait as Trait>::by_pin_box(move _45) -> [return: bb15, unwind continue];
    }

    bb15: {
        _49 = &_50;
        _48 = (_79, move _49);
        _51 = (_48.0: &i64);
        _52 = (_48.1: &i64);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<i64, i64>(move _57, _51, _52, move _59) -> unwind continue;
    }

    bb17: {
        _60 = const 5_i64;
        _65 = &_60;
        _64 = Pin::<&i64>::new(move _65) -> [return: bb18, unwind continue];
    }

    bb18: {
        _63 = Pin::<Pin<&i64>>::new(move _64) -> [return: bb19, unwind continue];
    }

    bb19: {
        _62 = Pin::<Pin<Pin<&i64>>>::new(move _63) -> [return: bb20, unwind continue];
    }

    bb20: {
        _61 = move _62 as std::pin::Pin<std::pin::Pin<std::pin::Pin<&dyn Trait>>> (Pointer(Unsize));
        _78 = const _;
        _68 = <dyn Trait as Trait>::by_pin_pin_pin_ref(_61) -> [return: bb21, unwind continue];
    }

    bb21: {
        _67 = &_68;
        _66 = (_78, move _67);
        _69 = (_66.0: &i64);
        _70 = (_66.1: &i64);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<i64, i64>(move _75, _69, _70, move _77) -> unwind continue;
    }

    bb23: {
        return;
    }
}

promoted[0] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 5_i64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 4_i64;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 3_i64;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 2_i64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 1_i64;
        _0 = &_1;
        return;
    }
}
