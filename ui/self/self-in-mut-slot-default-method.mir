// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Changer::change(_1: Self) -> Self {
    debug self => _1;
    let mut _0: Self;
    let _2: ();
    let mut _3: &mut Self;

    bb0: {
        _3 = &mut _1;
        _2 = <Self as Changer>::set_to(move _3, const 55_isize) -> [return: bb1, unwind: bb2];
    }

    bb1: {
        _0 = move _1;
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }
}

fn Changer::change_again(_1: Box<Self>) -> Box<Self> {
    debug self => _1;
    let mut _0: std::boxed::Box<Self>;
    let _2: ();
    let mut _3: &mut Self;
    let mut _4: *const Self;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<Self>).0: std::ptr::NonNull<Self>).0: *const Self);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(Self);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb4, unwind unreachable];
    }

    bb1: {
        _0 = move _1;
        return;
    }

    bb2 (cleanup): {
        drop(_1) -> [return: bb3, unwind terminate];
    }

    bb3 (cleanup): {
        resume;
    }

    bb4: {
        _3 = &mut (*_4);
        _2 = <Self as Changer>::set_to(move _3, const 45_isize) -> [return: bb1, unwind: bb2];
    }
}

fn <impl at ui/self/self-in-mut-slot-default-method.rs:21:1: 21:19>::set_to(_1: &mut X, _2: isize) -> () {
    debug self => _1;
    debug a => _2;
    let mut _0: ();

    bb0: {
        ((*_1).0: isize) = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: X;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: X;
    let mut _17: std::boxed::Box<X>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: isize;
    let mut _25: isize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: *const X;
    scope 1 {
        debug x => _1;
        let _2: X;
        scope 2 {
            debug new_x => _2;
            let _5: &isize;
            let _6: &isize;
            let _14: std::boxed::Box<X>;
            let mut _30: &isize;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug x => _14;
                let _16: std::boxed::Box<X>;
                scope 6 {
                    debug new_x => _16;
                    let _20: &isize;
                    let _21: &isize;
                    let mut _29: &isize;
                    let mut _32: *const ();
                    let mut _33: usize;
                    let mut _34: usize;
                    let mut _35: usize;
                    let mut _36: usize;
                    let mut _37: bool;
                    scope 7 {
                        debug left_val => _20;
                        debug right_val => _21;
                        let _26: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _26;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = X { a: const 32_isize };
        _2 = <X as Changer>::change(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &(_2.0: isize);
        _30 = const _;
        _3 = (move _4, _30);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _15 = move _2;
        _14 = Box::<X>::new(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = move _14;
        _16 = <X as Changer>::change_again(move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _31 = (((_16.0: std::ptr::Unique<X>).0: std::ptr::NonNull<X>).0: *const X);
        _32 = _31 as *const () (PtrToPtr);
        _33 = _32 as usize (Transmute);
        _34 = AlignOf(X);
        _35 = Sub(_34, const 1_usize);
        _36 = BitAnd(_33, _35);
        _37 = Eq(_36, const 0_usize);
        assert(_37, "misaligned pointer dereference: address must be a multiple of {} but is {}", _34, _33) -> [success: bb11, unwind unreachable];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<isize, isize>(move _26, _20, _21, move _28) -> bb9;
    }

    bb7: {
        drop(_16) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_16) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        _19 = &((*_31).0: isize);
        _29 = const _;
        _18 = (move _19, _29);
        _20 = (_18.0: &isize);
        _21 = (_18.1: &isize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb7, otherwise: bb6];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 45_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 55_isize;
        _0 = &_1;
        return;
    }
}
