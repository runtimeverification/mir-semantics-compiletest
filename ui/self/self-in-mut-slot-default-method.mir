// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Changer::change(_1: Self) -> Self {
    debug self => _1;                    // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:8:15: 8:23
    let mut _0: Self;                    // return place in scope 0 at ui/self/self-in-mut-slot-default-method.rs:8:28: 8:32
    let _2: ();                          // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:9:9: 9:24
    let mut _3: &mut Self;               // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:9:9: 9:24

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/self/self-in-mut-slot-default-method.rs:9:9: 9:24
        _2 = <Self as Changer>::set_to(move _3, const 55_isize) -> [return: bb1, unwind: bb2]; // scope 0 at ui/self/self-in-mut-slot-default-method.rs:9:9: 9:24
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:9:14: 9:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self, isize) {<Self as Changer>::set_to}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1;                    // scope 0 at ui/self/self-in-mut-slot-default-method.rs:10:9: 10:13
        return;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:11:6: 11:6
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/self/self-in-mut-slot-default-method.rs:11:5: 11:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:8:5: 11:6
    }
}

fn Changer::change_again(_1: Box<Self>) -> Box<Self> {
    debug self => _1;                    // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:13:21: 13:29
    let mut _0: std::boxed::Box<Self>;   // return place in scope 0 at ui/self/self-in-mut-slot-default-method.rs:13:45: 13:54
    let _2: ();                          // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:14:9: 14:24
    let mut _3: &mut Self;               // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:14:9: 14:24
    let mut _4: *const Self;             // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:13:21: 13:29

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<Self>).0: std::ptr::NonNull<Self>).0: *const Self); // scope 0 at ui/self/self-in-mut-slot-default-method.rs:14:9: 14:24
        _3 = &mut (*_4);                 // scope 0 at ui/self/self-in-mut-slot-default-method.rs:14:9: 14:24
        _2 = <Self as Changer>::set_to(move _3, const 45_isize) -> [return: bb1, unwind: bb2]; // scope 0 at ui/self/self-in-mut-slot-default-method.rs:14:9: 14:24
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:14:14: 14:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Self, isize) {<Self as Changer>::set_to}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _1;                    // scope 0 at ui/self/self-in-mut-slot-default-method.rs:15:9: 15:13
        return;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:16:6: 16:6
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/self/self-in-mut-slot-default-method.rs:16:5: 16:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:13:5: 16:6
    }
}

fn <impl at ui/self/self-in-mut-slot-default-method.rs:21:1: 21:19>::set_to(_1: &mut X, _2: isize) -> () {
    debug self => _1;                    // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:22:15: 22:24
    debug a => _2;                       // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:22:26: 22:27
    let mut _0: ();                      // return place in scope 0 at ui/self/self-in-mut-slot-default-method.rs:22:36: 22:36
    let mut _3: isize;                   // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:23:18: 23:19

    bb0: {
        _3 = _2;                         // scope 0 at ui/self/self-in-mut-slot-default-method.rs:23:18: 23:19
        ((*_1).0: isize) = move _3;      // scope 0 at ui/self/self-in-mut-slot-default-method.rs:23:9: 23:19
        return;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:24:6: 24:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/self-in-mut-slot-default-method.rs:27:15: 27:15
    let _1: X;                           // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:28:9: 28:10
    let mut _3: X;                       // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:29:17: 29:18
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: X;                      // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:32:30: 32:35
    let mut _24: std::boxed::Box<X>;     // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:33:17: 33:18
    let mut _25: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: *const X;               // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:33:9: 33:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/self/self-in-mut-slot-default-method.rs:28:9: 28:10
        let _2: X;                       // in scope 1 at ui/self/self-in-mut-slot-default-method.rs:29:9: 29:14
        scope 2 {
            debug new_x => _2;           // in scope 2 at ui/self/self-in-mut-slot-default-method.rs:29:9: 29:14
            let _7: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _8: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _21: std::boxed::Box<X>; // in scope 2 at ui/self/self-in-mut-slot-default-method.rs:32:9: 32:10
            let mut _43: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _7;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _8;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _13: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _13;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug x => _21;          // in scope 5 at ui/self/self-in-mut-slot-default-method.rs:32:9: 32:10
                let _23: std::boxed::Box<X>; // in scope 5 at ui/self/self-in-mut-slot-default-method.rs:33:9: 33:14
                scope 6 {
                    debug new_x => _23;  // in scope 6 at ui/self/self-in-mut-slot-default-method.rs:33:9: 33:14
                    let _28: &isize;     // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _29: &isize;     // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _42: &isize; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _28; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _29; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _34: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _34; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const X {{ a: 32_isize }};  // scope 0 at ui/self/self-in-mut-slot-default-method.rs:28:13: 28:24
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:28:13: 28:24
                                         // + literal: Const { ty: X, val: Value(Scalar(0x0000000000000020)) }
        _3 = const X {{ a: 32_isize }};  // scope 1 at ui/self/self-in-mut-slot-default-method.rs:29:17: 29:18
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:29:17: 29:18
                                         // + literal: Const { ty: X, val: Value(Scalar(0x0000000000000020)) }
        _2 = <X as Changer>::change(move _3) -> bb1; // scope 1 at ui/self/self-in-mut-slot-default-method.rs:29:17: 29:27
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:29:19: 29:25
                                         // + literal: Const { ty: fn(X) -> X {<X as Changer>::change}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &(_2.0: isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _43;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 55_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<isize, isize>(move _15, move _16, move _18, move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = move _2;                   // scope 2 at ui/self/self-in-mut-slot-default-method.rs:32:30: 32:35
        _21 = Box::<X>::new(move _22) -> bb4; // scope 2 at ui/self/self-in-mut-slot-default-method.rs:32:21: 32:36
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:32:21: 32:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(X) -> Box<X> {Box::<X>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = move _21;                  // scope 5 at ui/self/self-in-mut-slot-default-method.rs:33:17: 33:18
        _23 = <X as Changer>::change_again(move _24) -> bb5; // scope 5 at ui/self/self-in-mut-slot-default-method.rs:33:17: 33:33
                                         // mir::Constant
                                         // + span: ui/self/self-in-mut-slot-default-method.rs:33:19: 33:31
                                         // + literal: Const { ty: fn(Box<X>) -> Box<X> {<X as Changer>::change_again}, val: Value(<ZST>) }
    }

    bb5: {
        _44 = (((_23.0: std::ptr::Unique<X>).0: std::ptr::NonNull<X>).0: *const X); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = &((*_44).0: isize);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _27 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &isize);           // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &isize);           // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 45_isize;            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb7, otherwise: bb6]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _34 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<isize, isize>(move _36, move _37, move _39, move _41) -> bb9; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_23) -> bb8;                // scope 5 at ui/self/self-in-mut-slot-default-method.rs:35:1: 35:2
    }

    bb8: {
        return;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:35:2: 35:2
    }

    bb9 (cleanup): {
        drop(_23) -> bb10;               // scope 5 at ui/self/self-in-mut-slot-default-method.rs:35:1: 35:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/self/self-in-mut-slot-default-method.rs:27:1: 35:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:34:25: 34:27

    bb0: {
        _1 = const 45_isize;             // scope 0 at ui/self/self-in-mut-slot-default-method.rs:34:25: 34:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/self-in-mut-slot-default-method.rs:30:25: 30:27

    bb0: {
        _1 = const 55_isize;             // scope 0 at ui/self/self-in-mut-slot-default-method.rs:30:25: 30:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
