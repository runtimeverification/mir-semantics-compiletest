// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_nested.rs:10:10: 10:17>::default() -> Ty {
    let mut _0: Ty;

    bb0: {
        return;
    }
}

const TRAIT_MAGIC: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 42_u32;
        return;
    }
}

const INHERENT_MAGIC: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 1995_u32;
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_nested.rs:20:1: 20:18>::receive_trait(_1: &Arc<Rc<Box<Ty>>>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_nested.rs:26:1: 26:8>::receive_inherent(_1: &Arc<Rc<Box<Ty>>>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::sync::Arc<std::rc::Rc<std::boxed::Box<Ty>>>;
    let mut _2: (&u32, &u32);
    let mut _3: &u32;
    let _4: u32;
    let mut _5: &std::sync::Arc<std::rc::Rc<std::boxed::Box<Ty>>>;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u32;
    let mut _11: u32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u32, &u32);
    let mut _16: &u32;
    let _17: u32;
    let mut _18: &std::sync::Arc<std::rc::Rc<std::boxed::Box<Ty>>>;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u32;
    let mut _24: u32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug ty => _1;
        let _6: &u32;
        let _7: &u32;
        let _19: &u32;
        let _20: &u32;
        let mut _28: &u32;
        let mut _29: &u32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
    }

    bb0: {
        _1 = <Arc<Rc<Box<Ty>>> as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _29 = const _;
        _5 = &_1;
        _4 = <Ty as Trait>::receive_trait(move _5) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _3 = &_4;
        _2 = (_29, move _3);
        _6 = (_2.0: &u32);
        _7 = (_2.1: &u32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u32, u32>(move _12, _6, _7, move _14) -> bb9;
    }

    bb4: {
        _28 = const _;
        _18 = &_1;
        _17 = Ty::receive_inherent(move _18) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _16 = &_17;
        _15 = (_28, move _16);
        _19 = (_15.0: &u32);
        _20 = (_15.1: &u32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<u32, u32>(move _25, _19, _20, move _27) -> bb9;
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}
