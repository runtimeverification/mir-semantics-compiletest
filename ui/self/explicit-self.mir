// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static tau: f64 = {
    let mut _0: f64;                     // return place in scope 0 at ui/self/explicit-self.rs:6:13: 6:16

    bb0: {
        _0 = Mul(const 2f64, const 3.1415926535897931f64); // scope 0 at ui/self/explicit-self.rs:6:19: 6:42
        return;                          // scope 0 at ui/self/explicit-self.rs:6:1: 6:43
    }
}

fn compute_area(_1: &shape) -> f64 {
    debug shape => _1;                   // in scope 0 at ui/self/explicit-self.rs:16:17: 16:22
    let mut _0: f64;                     // return place in scope 0 at ui/self/explicit-self.rs:16:35: 16:38
    let mut _2: isize;                   // in scope 0 at ui/self/explicit-self.rs:18:9: 18:33
    let _3: f64;                         // in scope 0 at ui/self/explicit-self.rs:18:26: 18:32
    let mut _4: f64;                     // in scope 0 at ui/self/explicit-self.rs:18:37: 18:55
    let mut _5: f64;                     // in scope 0 at ui/self/explicit-self.rs:18:37: 18:46
    let mut _6: f64;                     // in scope 0 at ui/self/explicit-self.rs:18:49: 18:55
    let mut _7: f64;                     // in scope 0 at ui/self/explicit-self.rs:18:58: 18:64
    let _8: &Size;                       // in scope 0 at ui/self/explicit-self.rs:19:29: 19:37
    let mut _9: f64;                     // in scope 0 at ui/self/explicit-self.rs:19:42: 19:48
    let mut _10: f64;                    // in scope 0 at ui/self/explicit-self.rs:19:51: 19:57
    scope 1 {
        debug radius => _3;              // in scope 1 at ui/self/explicit-self.rs:18:26: 18:32
    }
    scope 2 {
        debug size => _8;                // in scope 2 at ui/self/explicit-self.rs:19:29: 19:37
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/self/explicit-self.rs:17:11: 17:17
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/self/explicit-self.rs:17:5: 17:17
    }

    bb1: {
        _8 = &(((*_1) as rectangle).1: Size); // scope 0 at ui/self/explicit-self.rs:19:29: 19:37
        _9 = ((*_8).0: f64);             // scope 2 at ui/self/explicit-self.rs:19:42: 19:48
        _10 = ((*_8).1: f64);            // scope 2 at ui/self/explicit-self.rs:19:51: 19:57
        _0 = Mul(move _9, move _10);     // scope 2 at ui/self/explicit-self.rs:19:42: 19:57
        goto -> bb4;                     // scope 0 at ui/self/explicit-self.rs:19:56: 19:57
    }

    bb2: {
        unreachable;                     // scope 0 at ui/self/explicit-self.rs:17:11: 17:17
    }

    bb3: {
        _3 = (((*_1) as circle).1: f64); // scope 0 at ui/self/explicit-self.rs:18:26: 18:32
        _5 = const 3.1415926535897931f64; // scope 1 at ui/self/explicit-self.rs:18:37: 18:46
        _6 = _3;                         // scope 1 at ui/self/explicit-self.rs:18:49: 18:55
        _4 = Mul(move _5, move _6);      // scope 1 at ui/self/explicit-self.rs:18:37: 18:55
        _7 = _3;                         // scope 1 at ui/self/explicit-self.rs:18:58: 18:64
        _0 = Mul(move _4, move _7);      // scope 1 at ui/self/explicit-self.rs:18:37: 18:64
        goto -> bb4;                     // scope 0 at ui/self/explicit-self.rs:18:63: 18:64
    }

    bb4: {
        return;                          // scope 0 at ui/self/explicit-self.rs:21:2: 21:2
    }
}

fn <impl at ui/self/explicit-self.rs:23:1: 23:11>::select(_1: &shape, _2: f64, _3: &T, _4: &T) -> &T {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:25:26: 25:31
    debug threshold => _2;               // in scope 0 at ui/self/explicit-self.rs:25:33: 25:42
    debug a => _3;                       // in scope 0 at ui/self/explicit-self.rs:25:49: 25:50
    debug b => _4;                       // in scope 0 at ui/self/explicit-self.rs:25:59: 25:60
    let mut _0: &T;                      // return place in scope 0 at ui/self/explicit-self.rs:26:29: 26:34
    let mut _5: bool;                    // in scope 0 at ui/self/explicit-self.rs:27:12: 27:42
    let mut _6: f64;                     // in scope 0 at ui/self/explicit-self.rs:27:12: 27:30
    let mut _7: &shape;                  // in scope 0 at ui/self/explicit-self.rs:27:25: 27:29
    let mut _8: f64;                     // in scope 0 at ui/self/explicit-self.rs:27:33: 27:42

    bb0: {
        _7 = _1;                         // scope 0 at ui/self/explicit-self.rs:27:25: 27:29
        _6 = compute_area(move _7) -> bb1; // scope 0 at ui/self/explicit-self.rs:27:12: 27:30
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:27:12: 27:24
                                         // + literal: Const { ty: for<'a> fn(&'a shape) -> f64 {compute_area}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _2;                         // scope 0 at ui/self/explicit-self.rs:27:33: 27:42
        _5 = Gt(move _6, move _8);       // scope 0 at ui/self/explicit-self.rs:27:12: 27:42
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/self/explicit-self.rs:27:12: 27:42
    }

    bb2: {
        _0 = _3;                         // scope 0 at ui/self/explicit-self.rs:27:44: 27:45
        goto -> bb4;                     // scope 0 at ui/self/explicit-self.rs:27:9: 27:55
    }

    bb3: {
        _0 = _4;                         // scope 0 at ui/self/explicit-self.rs:27:53: 27:54
        goto -> bb4;                     // scope 0 at ui/self/explicit-self.rs:27:9: 27:55
    }

    bb4: {
        return;                          // scope 0 at ui/self/explicit-self.rs:28:6: 28:6
    }
}

fn select_based_on_unit_circle(_1: f64, _2: &T, _3: &T) -> &T {
    debug threshold => _1;               // in scope 0 at ui/self/explicit-self.rs:32:5: 32:14
    debug a => _2;                       // in scope 0 at ui/self/explicit-self.rs:32:21: 32:22
    debug b => _3;                       // in scope 0 at ui/self/explicit-self.rs:32:31: 32:32
    let mut _0: &T;                      // return place in scope 0 at ui/self/explicit-self.rs:35:5: 35:34
    let _4: &shape;                      // in scope 0 at ui/self/explicit-self.rs:34:9: 34:14
    let mut _5: &shape;                  // in scope 0 at ui/self/explicit-self.rs:35:5: 35:34
    let mut _6: f64;                     // in scope 0 at ui/self/explicit-self.rs:35:18: 35:27
    let mut _7: &T;                      // in scope 0 at ui/self/explicit-self.rs:35:29: 35:30
    let mut _8: &T;                      // in scope 0 at ui/self/explicit-self.rs:35:32: 35:33
    let mut _9: &shape;                  // in scope 0 at ui/self/explicit-self.rs:34:17: 34:59
    scope 1 {
        debug shape => _4;               // in scope 1 at ui/self/explicit-self.rs:34:9: 34:14
    }

    bb0: {
        _9 = const _;                    // scope 0 at ui/self/explicit-self.rs:34:17: 34:59
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:34:17: 34:59
                                         // + literal: Const { ty: &shape, val: Unevaluated(select_based_on_unit_circle, [T], Some(promoted[0])) }
        _4 = _9;                         // scope 0 at ui/self/explicit-self.rs:34:17: 34:59
        _5 = _4;                         // scope 1 at ui/self/explicit-self.rs:35:5: 35:34
        _6 = _1;                         // scope 1 at ui/self/explicit-self.rs:35:18: 35:27
        _7 = _2;                         // scope 1 at ui/self/explicit-self.rs:35:29: 35:30
        _8 = _3;                         // scope 1 at ui/self/explicit-self.rs:35:32: 35:33
        _0 = shape::select::<T>(move _5, move _6, move _7, move _8) -> bb1; // scope 1 at ui/self/explicit-self.rs:35:5: 35:34
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:35:11: 35:17
                                         // + literal: Const { ty: for<'a, 'r> fn(&'a shape, f64, &'r T, &'r T) -> &'r T {shape::select::<T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/self/explicit-self.rs:36:2: 36:2
    }
}

promoted[0] in select_based_on_unit_circle: &shape = {
    let mut _0: &shape;                  // return place in scope 0 at ui/self/explicit-self.rs:34:17: 34:59
    let mut _1: shape;                   // in scope 0 at ui/self/explicit-self.rs:34:18: 34:59
    let mut _2: Point;                   // in scope 0 at ui/self/explicit-self.rs:34:32: 34:53

    bb0: {
        _2 = Point { x: const 0f64, y: const 0f64 }; // scope 0 at ui/self/explicit-self.rs:34:32: 34:53
        _1 = shape::circle(move _2, const 1f64); // scope 0 at ui/self/explicit-self.rs:34:18: 34:59
        _0 = &_1;                        // scope 0 at ui/self/explicit-self.rs:34:17: 34:59
        return;                          // scope 0 at ui/self/explicit-self.rs:34:17: 34:59
    }
}

fn <impl at ui/self/explicit-self.rs:38:10: 38:15>::clone(_1: &thing) -> thing {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:38:10: 38:15
    let mut _0: thing;                   // return place in scope 0 at ui/self/explicit-self.rs:38:10: 38:15
    let mut _2: A;                       // in scope 0 at ui/self/explicit-self.rs:40:5: 40:9
    let mut _3: &A;                      // in scope 0 at ui/self/explicit-self.rs:40:5: 40:9
    let _4: &A;                          // in scope 0 at ui/self/explicit-self.rs:40:5: 40:9

    bb0: {
        _4 = &((*_1).0: A);              // scope 0 at ui/self/explicit-self.rs:40:5: 40:9
        _3 = _4;                         // scope 0 at ui/self/explicit-self.rs:40:5: 40:9
        _2 = <A as Clone>::clone(move _3) -> bb1; // scope 0 at ui/self/explicit-self.rs:40:5: 40:9
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:40:5: 40:9
                                         // + literal: Const { ty: for<'a> fn(&'a A) -> A {<A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = thing { x: move _2 };       // scope 0 at ui/self/explicit-self.rs:38:10: 38:15
        return;                          // scope 0 at ui/self/explicit-self.rs:38:15: 38:15
    }
}

fn <impl at ui/self/explicit-self.rs:43:10: 43:15>::clone(_1: &A) -> A {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:43:10: 43:15
    let mut _0: A;                       // return place in scope 0 at ui/self/explicit-self.rs:43:10: 43:15
    let mut _2: isize;                   // in scope 0 at ui/self/explicit-self.rs:45:5: 45:13
    let mut _3: &isize;                  // in scope 0 at ui/self/explicit-self.rs:45:5: 45:13
    let _4: &isize;                      // in scope 0 at ui/self/explicit-self.rs:45:5: 45:13

    bb0: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/self/explicit-self.rs:45:5: 45:13
        _3 = _4;                         // scope 0 at ui/self/explicit-self.rs:45:5: 45:13
        _2 = (*_3);                      // scope 0 at ui/self/explicit-self.rs:45:5: 45:13
        _0 = A { a: move _2 };           // scope 0 at ui/self/explicit-self.rs:43:10: 43:15
        return;                          // scope 0 at ui/self/explicit-self.rs:43:15: 43:15
    }
}

fn thing(_1: A) -> thing {
    debug x => _1;                       // in scope 0 at ui/self/explicit-self.rs:48:10: 48:11
    let mut _0: thing;                   // return place in scope 0 at ui/self/explicit-self.rs:48:19: 48:24
    let mut _2: A;                       // in scope 0 at ui/self/explicit-self.rs:50:12: 50:13

    bb0: {
        _2 = move _1;                    // scope 0 at ui/self/explicit-self.rs:50:12: 50:13
        _0 = thing { x: move _2 };       // scope 0 at ui/self/explicit-self.rs:49:5: 51:6
        return;                          // scope 0 at ui/self/explicit-self.rs:52:2: 52:2
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::bar(_1: Box<thing>) -> isize {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:55:16: 55:20
    let mut _0: isize;                   // return place in scope 0 at ui/self/explicit-self.rs:55:37: 55:42
    let mut _2: *const thing;            // in scope 0 at ui/self/explicit-self.rs:55:16: 55:20

    bb0: {
        _2 = (((_1.0: std::ptr::Unique<thing>).0: std::ptr::NonNull<thing>).0: *const thing); // scope 0 at ui/self/explicit-self.rs:55:45: 55:53
        _0 = (((*_2).0: A).0: isize);    // scope 0 at ui/self/explicit-self.rs:55:45: 55:53
        drop(_1) -> bb1;                 // scope 0 at ui/self/explicit-self.rs:55:54: 55:55
    }

    bb1: {
        return;                          // scope 0 at ui/self/explicit-self.rs:55:55: 55:55
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::quux(_1: &thing) -> isize {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:56:17: 56:22
    let mut _0: isize;                   // return place in scope 0 at ui/self/explicit-self.rs:56:27: 56:32

    bb0: {
        _0 = (((*_1).0: A).0: isize);    // scope 0 at ui/self/explicit-self.rs:56:35: 56:43
        return;                          // scope 0 at ui/self/explicit-self.rs:56:45: 56:45
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::baz(_1: &thing) -> &A {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:57:20: 57:28
    let mut _0: &A;                      // return place in scope 0 at ui/self/explicit-self.rs:57:41: 57:48

    bb0: {
        _0 = &((*_1).0: A);              // scope 0 at ui/self/explicit-self.rs:57:41: 57:48
        return;                          // scope 0 at ui/self/explicit-self.rs:57:50: 57:50
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::spam(_1: thing) -> isize {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:58:17: 58:21
    let mut _0: isize;                   // return place in scope 0 at ui/self/explicit-self.rs:58:26: 58:31

    bb0: {
        _0 = ((_1.0: A).0: isize);       // scope 0 at ui/self/explicit-self.rs:58:34: 58:42
        return;                          // scope 0 at ui/self/explicit-self.rs:58:44: 58:44
    }
}

fn <impl at ui/self/explicit-self.rs:62:1: 62:19>::f(_1: &thing) -> () {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self.rs:62:27: 62:32
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self.rs:62:34: 62:34

    bb0: {
        return;                          // scope 0 at ui/self/explicit-self.rs:62:36: 62:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self.rs:64:15: 64:15
    let _1: std::boxed::Box<thing>;      // in scope 0 at ui/self/explicit-self.rs:65:9: 65:10
    let mut _2: thing;                   // in scope 0 at ui/self/explicit-self.rs:65:30: 65:46
    let mut _3: A;                       // in scope 0 at ui/self/explicit-self.rs:65:36: 65:45
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: isize;                       // in scope 0 at ui/self/explicit-self.rs:66:16: 66:31
    let mut _7: std::boxed::Box<thing>;  // in scope 0 at ui/self/explicit-self.rs:66:16: 66:25
    let mut _8: &std::boxed::Box<thing>; // in scope 0 at ui/self/explicit-self.rs:66:16: 66:25
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: isize;                      // in scope 0 at ui/self/explicit-self.rs:67:16: 67:24
    let mut _27: &thing;                 // in scope 0 at ui/self/explicit-self.rs:67:16: 67:24
    let mut _28: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: A;                      // in scope 0 at ui/self/explicit-self.rs:69:19: 69:28
    let mut _45: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _47: isize;                      // in scope 0 at ui/self/explicit-self.rs:70:16: 70:24
    let mut _48: thing;                  // in scope 0 at ui/self/explicit-self.rs:70:16: 70:17
    let mut _49: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: *const thing;           // in scope 0 at ui/self/explicit-self.rs:65:9: 65:10
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/self/explicit-self.rs:65:9: 65:10
        let _10: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _30: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _43: thing;                  // in scope 1 at ui/self/explicit-self.rs:69:9: 69:10
        let mut _65: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _66: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _29;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _30;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _35: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _35;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug z => _43;              // in scope 6 at ui/self/explicit-self.rs:69:9: 69:10
            let _50: &isize;             // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _51: &isize;             // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _64: &isize;         // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 7 {
                debug left_val => _50;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _51;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _56: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _56;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = const A {{ a: 10_isize }};  // scope 0 at ui/self/explicit-self.rs:65:36: 65:45
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:65:36: 65:45
                                         // + literal: Const { ty: A, val: Value(Scalar(0x000000000000000a)) }
        _2 = thing(move _3) -> bb1;      // scope 0 at ui/self/explicit-self.rs:65:30: 65:46
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:65:30: 65:35
                                         // + literal: Const { ty: fn(A) -> thing {thing}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Box::<thing>::new(move _2) -> bb2; // scope 0 at ui/self/explicit-self.rs:65:21: 65:47
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:65:21: 65:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(thing) -> Box<thing> {Box::<thing>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_1;                        // scope 1 at ui/self/explicit-self.rs:66:16: 66:25
        _7 = <Box<thing> as Clone>::clone(move _8) -> [return: bb3, unwind: bb15]; // scope 1 at ui/self/explicit-self.rs:66:16: 66:25
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:66:18: 66:23
                                         // + literal: Const { ty: for<'a> fn(&'a Box<thing>) -> Box<thing> {<Box<thing> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = thing::bar(move _7) -> [return: bb4, unwind: bb15]; // scope 1 at ui/self/explicit-self.rs:66:16: 66:31
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:66:26: 66:29
                                         // + literal: Const { ty: fn(Box<thing>) -> isize {thing::bar}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = &_6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _66 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _9 = _66;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_4.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_4.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 10_isize;            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23) -> bb15; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb6: {
        _67 = (((_1.0: std::ptr::Unique<thing>).0: std::ptr::NonNull<thing>).0: *const thing); // scope 1 at ui/self/explicit-self.rs:67:16: 67:24
        _27 = &(*_67);                   // scope 1 at ui/self/explicit-self.rs:67:16: 67:24
        _26 = thing::quux(move _27) -> [return: bb7, unwind: bb15]; // scope 1 at ui/self/explicit-self.rs:67:16: 67:24
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:67:18: 67:22
                                         // + literal: Const { ty: for<'a> fn(&'a thing) -> isize {thing::quux}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = &_26;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _65 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _28 = _65;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _28);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_24.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_24.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 10_isize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb9, otherwise: bb8]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<isize, isize>(move _37, move _38, move _40, move _42) -> bb15; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb9: {
        _44 = const A {{ a: 11_isize }}; // scope 1 at ui/self/explicit-self.rs:69:19: 69:28
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:69:19: 69:28
                                         // + literal: Const { ty: A, val: Value(Scalar(0x000000000000000b)) }
        _43 = thing(move _44) -> [return: bb10, unwind: bb15]; // scope 1 at ui/self/explicit-self.rs:69:13: 69:29
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:69:13: 69:18
                                         // + literal: Const { ty: fn(A) -> thing {thing}, val: Value(<ZST>) }
    }

    bb10: {
        _48 = move _43;                  // scope 6 at ui/self/explicit-self.rs:70:16: 70:17
        _47 = thing::spam(move _48) -> [return: bb11, unwind: bb15]; // scope 6 at ui/self/explicit-self.rs:70:16: 70:24
                                         // mir::Constant
                                         // + span: ui/self/explicit-self.rs:70:18: 70:22
                                         // + literal: Const { ty: fn(thing) -> isize {thing::spam}, val: Value(<ZST>) }
    }

    bb11: {
        _46 = &_47;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _64 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _49 = _64;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _49);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_45.0: &isize);           // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_45.1: &isize);           // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = const 11_isize;            // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb13, otherwise: bb12]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _56 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<isize, isize>(move _58, move _59, move _61, move _63) -> bb15; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_1) -> bb14;                // scope 0 at ui/self/explicit-self.rs:71:1: 71:2
    }

    bb14: {
        return;                          // scope 0 at ui/self/explicit-self.rs:71:2: 71:2
    }

    bb15 (cleanup): {
        drop(_1) -> bb16;                // scope 0 at ui/self/explicit-self.rs:71:1: 71:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/self/explicit-self.rs:64:1: 71:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/explicit-self.rs:70:26: 70:28

    bb0: {
        _1 = const 11_isize;             // scope 0 at ui/self/explicit-self.rs:70:26: 70:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/explicit-self.rs:67:26: 67:28

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/self/explicit-self.rs:67:26: 67:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/explicit-self.rs:66:33: 66:35

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/self/explicit-self.rs:66:33: 66:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn shape::circle(_1: Point, _2: f64) -> shape {
    let mut _0: shape;                   // return place in scope 0 at ui/self/explicit-self.rs:11:5: 11:11

    bb0: {
        _0 = shape::circle(move _1, move _2); // scope 0 at ui/self/explicit-self.rs:11:5: 11:11
        return;                          // scope 0 at ui/self/explicit-self.rs:11:5: 11:11
    }
}

// MIR FOR CTFE
fn shape::circle(_1: Point, _2: f64) -> shape {
    let mut _0: shape;                   // return place in scope 0 at ui/self/explicit-self.rs:11:5: 11:11

    bb0: {
        _0 = shape::circle(move _1, move _2); // scope 0 at ui/self/explicit-self.rs:11:5: 11:11
        return;                          // scope 0 at ui/self/explicit-self.rs:11:5: 11:11
    }
}

fn shape::rectangle(_1: Point, _2: Size) -> shape {
    let mut _0: shape;                   // return place in scope 0 at ui/self/explicit-self.rs:12:5: 12:14

    bb0: {
        _0 = shape::rectangle(move _1, move _2); // scope 0 at ui/self/explicit-self.rs:12:5: 12:14
        return;                          // scope 0 at ui/self/explicit-self.rs:12:5: 12:14
    }
}

// MIR FOR CTFE
fn shape::rectangle(_1: Point, _2: Size) -> shape {
    let mut _0: shape;                   // return place in scope 0 at ui/self/explicit-self.rs:12:5: 12:14

    bb0: {
        _0 = shape::rectangle(move _1, move _2); // scope 0 at ui/self/explicit-self.rs:12:5: 12:14
        return;                          // scope 0 at ui/self/explicit-self.rs:12:5: 12:14
    }
}
