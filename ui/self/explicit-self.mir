// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static tau: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Mul(const 2f64, const 3.1415926535897931f64);
        return;
    }
}

fn compute_area(_1: &shape) -> f64 {
    debug shape => _1;
    let mut _0: f64;
    let mut _2: isize;
    let _3: f64;
    let mut _4: f64;
    let mut _5: f64;
    let mut _6: f64;
    let mut _7: &f64;
    let _8: &Size;
    let mut _9: f64;
    let mut _10: f64;
    scope 1 {
        debug radius => _3;
    }
    scope 2 {
        debug size => _8;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as rectangle).1: Size);
        _9 = ((*_8).0: f64);
        _10 = ((*_8).1: f64);
        _0 = Mul(move _9, move _10);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = (((*_1) as circle).1: f64);
        _7 = const {alloc1: &f64};
        _6 = (*_7);
        _5 = Mul(const 0.5f64, move _6);
        _4 = Mul(move _5, _3);
        _0 = Mul(move _4, _3);
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

alloc1 (static: tau, size: 8, align: 8) {
    18 2d 44 54 fb 21 19 40                         â”‚ .-DT.!.@
}

fn <impl at ui/self/explicit-self.rs:23:1: 23:11>::select(_1: &shape, _2: f64, _3: &T, _4: &T) -> &T {
    debug self => _1;
    debug threshold => _2;
    debug a => _3;
    debug b => _4;
    let mut _0: &T;
    let mut _5: bool;
    let mut _6: f64;

    bb0: {
        _6 = compute_area(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = Gt(move _6, _2);
        switchInt(move _5) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _0 = _3;
        goto -> bb4;
    }

    bb3: {
        _0 = _4;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn select_based_on_unit_circle(_1: f64, _2: &T, _3: &T) -> &T {
    debug threshold => _1;
    debug a => _2;
    debug b => _3;
    let mut _0: &T;
    let _4: &T;
    let mut _5: &shape;
    scope 1 {
        debug shape => const _;
    }

    bb0: {
        _5 = const _;
        _4 = shape::select::<T>(_5, _1, _2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _4;
        return;
    }
}

promoted[0] in select_based_on_unit_circle: &shape = {
    let mut _0: &shape;
    let mut _1: shape;
    let mut _2: Point;

    bb0: {
        _2 = Point { x: const 0f64, y: const 0f64 };
        _1 = shape::circle(move _2, const 1f64);
        _0 = &_1;
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:38:10: 38:15>::clone(_1: &thing) -> thing {
    debug self => _1;
    let mut _0: thing;
    let mut _2: A;
    let _3: &A;

    bb0: {
        _3 = &((*_1).0: A);
        _2 = <A as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = thing { x: move _2 };
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:43:10: 43:15>::clone(_1: &A) -> A {
    debug self => _1;
    let mut _0: A;
    let mut _2: isize;
    let _3: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _0 = A { a: move _2 };
        return;
    }
}

fn thing(_1: A) -> thing {
    debug x => _1;
    let mut _0: thing;

    bb0: {
        _0 = thing { x: move _1 };
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::bar(_1: Box<thing>) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: *const thing;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _2 = (((_1.0: std::ptr::Unique<thing>).0: std::ptr::NonNull<thing>).0: *const thing);
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(thing);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _0 = (((*_2).0: A).0: isize);
        drop(_1) -> [return: bb1, unwind continue];
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::quux(_1: &thing) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = (((*_1).0: A).0: isize);
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::baz(_1: &thing) -> &A {
    debug self => _1;
    let mut _0: &A;

    bb0: {
        _0 = &((*_1).0: A);
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:54:1: 54:11>::spam(_1: thing) -> isize {
    debug self => _1;
    let mut _0: isize;

    bb0: {
        _0 = ((_1.0: A).0: isize);
        return;
    }
}

fn <impl at ui/self/explicit-self.rs:62:1: 62:19>::f(_1: &thing) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<thing>;
    let mut _2: thing;
    let mut _3: A;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _7: std::boxed::Box<thing>;
    let mut _8: &std::boxed::Box<thing>;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&isize, &isize);
    let mut _19: &isize;
    let _20: isize;
    let mut _21: &thing;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: A;
    let mut _33: (&isize, &isize);
    let mut _34: &isize;
    let _35: isize;
    let mut _36: thing;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: isize;
    let mut _42: isize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: *const thing;
    scope 1 {
        debug y => _1;
        let _9: &isize;
        let _10: &isize;
        let _22: &isize;
        let _23: &isize;
        let _31: thing;
        let mut _47: &isize;
        let mut _48: &isize;
        let mut _50: *const ();
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: usize;
        let mut _54: usize;
        let mut _55: bool;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
        scope 6 {
            debug z => _31;
            let _37: &isize;
            let _38: &isize;
            let mut _46: &isize;
            scope 7 {
                debug left_val => _37;
                debug right_val => _38;
                let _43: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _43;
                }
            }
        }
    }

    bb0: {
        _3 = A { a: const 10_isize };
        _2 = thing(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Box::<thing>::new(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &_1;
        _7 = <Box<thing> as Clone>::clone(move _8) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _6 = thing::bar(move _7) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _5 = &_6;
        _48 = const _;
        _4 = (move _5, _48);
        _9 = (_4.0: &isize);
        _10 = (_4.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> bb15;
    }

    bb6: {
        _49 = (((_1.0: std::ptr::Unique<thing>).0: std::ptr::NonNull<thing>).0: *const thing);
        _50 = _49 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf(thing);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb17, unwind unreachable];
    }

    bb7: {
        _19 = &_20;
        _47 = const _;
        _18 = (move _19, _47);
        _22 = (_18.0: &isize);
        _23 = (_18.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> bb15;
    }

    bb9: {
        _32 = A { a: const 11_isize };
        _31 = thing(move _32) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _36 = move _31;
        _35 = thing::spam(move _36) -> [return: bb11, unwind: bb15];
    }

    bb11: {
        _34 = &_35;
        _46 = const _;
        _33 = (move _34, _46);
        _37 = (_33.0: &isize);
        _38 = (_33.1: &isize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<isize, isize>(move _43, _37, _38, move _45) -> bb15;
    }

    bb13: {
        drop(_1) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        _21 = &(*_49);
        _20 = thing::quux(move _21) -> [return: bb7, unwind: bb15];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

fn shape::circle(_1: Point, _2: f64) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::circle(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn shape::circle(_1: Point, _2: f64) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::circle(move _1, move _2);
        return;
    }
}

fn shape::rectangle(_1: Point, _2: Size) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::rectangle(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn shape::rectangle(_1: Point, _2: Size) -> shape {
    let mut _0: shape;

    bb0: {
        _0 = shape::rectangle(move _1, move _2);
        return;
    }
}
