// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::complicated(_1: *const *const Self) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: *const Self;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(*const Self);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _2 = (*_1);
        _0 = <Self as Foo>::bar(move _2) -> [return: bb1, unwind continue];
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:16:1: 16:17>::foo(_1: *const i32) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "I'm an i32!";
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:16:1: 16:17>::bar(_1: *const i32) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: i32;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(i32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _2 = (*_1);
        _0 = move _2 as i64 (IntToInt);
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:26:1: 26:17>::foo(_1: *const u32) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "I'm a u32!";
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_trait.rs:26:1: 26:17>::bar(_1: *const u32) -> i64 {
    debug self => _1;
    let mut _0: i64;
    let mut _2: u32;
    let mut _3: *const ();
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: bool;

    bb0: {
        _3 = _1 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }

    bb1: {
        _2 = (*_1);
        _0 = move _2 as i64 (IntToInt);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: *const dyn Foo;
    let mut _2: *const i32;
    let mut _3: *const dyn Foo;
    let mut _4: *const u32;
    let mut _5: (&&str, &&str);
    let mut _6: &&str;
    let _7: &str;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&&str, &&str);
    let mut _16: &&str;
    let _17: &str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let _27: &i32;
    let mut _28: (&&str, &&str);
    let mut _29: &&str;
    let _30: &str;
    let mut _31: *const i32;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i64, &i64);
    let mut _40: &i64;
    let _41: i64;
    let mut _42: *const i32;
    let mut _45: bool;
    let mut _46: bool;
    let mut _47: i64;
    let mut _48: i64;
    let _50: !;
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&i64, &i64);
    let mut _53: &i64;
    let _54: i64;
    let mut _55: *const *const i32;
    let _56: &*const i32;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: i64;
    let mut _62: i64;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: *const dyn Foo;
    let mut _67: *const i32;
    let mut _68: (&&str, &&str);
    let mut _69: &&str;
    let _70: &str;
    let mut _73: bool;
    let mut _74: bool;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&i64, &i64);
    let mut _79: &i64;
    let _80: i64;
    let mut _83: bool;
    let mut _84: bool;
    let mut _85: i64;
    let mut _86: i64;
    let _88: !;
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>;
    let _92: &u32;
    let mut _93: (&&str, &&str);
    let mut _94: &&str;
    let _95: &str;
    let mut _96: *const u32;
    let mut _99: bool;
    let mut _100: bool;
    let _102: !;
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _104: (&i64, &i64);
    let mut _105: &i64;
    let _106: i64;
    let mut _107: *const u32;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: i64;
    let mut _113: i64;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: (&i64, &i64);
    let mut _118: &i64;
    let _119: i64;
    let mut _120: *const *const u32;
    let _121: &*const u32;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: i64;
    let mut _127: i64;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: *const dyn Foo;
    let mut _132: *const u32;
    let mut _133: (&&str, &&str);
    let mut _134: &&str;
    let _135: &str;
    let mut _138: bool;
    let mut _139: bool;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: (&i64, &i64);
    let mut _144: &i64;
    let _145: i64;
    let mut _148: bool;
    let mut _149: bool;
    let mut _150: i64;
    let mut _151: i64;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug null_i32 => _1;
        scope 2 {
            debug null_u32 => _3;
            let _8: &&str;
            let _9: &&str;
            let _18: &&str;
            let _19: &&str;
            let _25: i32;
            let mut _165: &&str;
            let mut _166: &&str;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
            scope 7 {
                debug valid_i32 => const 5_i32;
                let _26: *const i32;
                scope 8 {
                    debug valid_i32_thin => _26;
                    let _32: &&str;
                    let _33: &&str;
                    let _43: &i64;
                    let _44: &i64;
                    let _57: &i64;
                    let _58: &i64;
                    let mut _162: &i64;
                    let mut _163: &i64;
                    let mut _164: &&str;
                    scope 9 {
                        debug left_val => _32;
                        debug right_val => _33;
                        let _36: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _36;
                        }
                    }
                    scope 11 {
                    }
                    scope 12 {
                        debug left_val => _43;
                        debug right_val => _44;
                        let _49: core::panicking::AssertKind;
                        scope 13 {
                            debug kind => _49;
                        }
                    }
                    scope 14 {
                    }
                    scope 15 {
                        debug left_val => _57;
                        debug right_val => _58;
                        let _63: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _63;
                        }
                    }
                    scope 17 {
                        debug valid_i32_fat => _66;
                        let _71: &&str;
                        let _72: &&str;
                        let _81: &i64;
                        let _82: &i64;
                        let _90: u32;
                        let mut _160: &i64;
                        let mut _161: &&str;
                        scope 18 {
                            debug left_val => _71;
                            debug right_val => _72;
                            let _75: core::panicking::AssertKind;
                            scope 19 {
                                debug kind => _75;
                            }
                        }
                        scope 20 {
                        }
                        scope 21 {
                            debug left_val => _81;
                            debug right_val => _82;
                            let _87: core::panicking::AssertKind;
                            scope 22 {
                                debug kind => _87;
                            }
                        }
                        scope 23 {
                            debug valid_u32 => const 18_u32;
                            let _91: *const u32;
                            scope 24 {
                                debug valid_u32_thin => _91;
                                let _97: &&str;
                                let _98: &&str;
                                let _108: &i64;
                                let _109: &i64;
                                let _122: &i64;
                                let _123: &i64;
                                let mut _157: &i64;
                                let mut _158: &i64;
                                let mut _159: &&str;
                                scope 25 {
                                    debug left_val => _97;
                                    debug right_val => _98;
                                    let _101: core::panicking::AssertKind;
                                    scope 26 {
                                        debug kind => _101;
                                    }
                                }
                                scope 27 {
                                }
                                scope 28 {
                                    debug left_val => _108;
                                    debug right_val => _109;
                                    let _114: core::panicking::AssertKind;
                                    scope 29 {
                                        debug kind => _114;
                                    }
                                }
                                scope 30 {
                                }
                                scope 31 {
                                    debug left_val => _122;
                                    debug right_val => _123;
                                    let _128: core::panicking::AssertKind;
                                    scope 32 {
                                        debug kind => _128;
                                    }
                                }
                                scope 33 {
                                    debug valid_u32_fat => _131;
                                    let _136: &&str;
                                    let _137: &&str;
                                    let _146: &i64;
                                    let _147: &i64;
                                    let mut _155: &i64;
                                    let mut _156: &&str;
                                    scope 34 {
                                        debug left_val => _136;
                                        debug right_val => _137;
                                        let _140: core::panicking::AssertKind;
                                        scope 35 {
                                            debug kind => _140;
                                        }
                                    }
                                    scope 36 {
                                    }
                                    scope 37 {
                                        debug left_val => _146;
                                        debug right_val => _147;
                                        let _152: core::panicking::AssertKind;
                                        scope 38 {
                                            debug kind => _152;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = null::<i32>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as *const dyn Foo (Pointer(Unsize));
        _4 = null::<u32>() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = move _4 as *const dyn Foo (Pointer(Unsize));
        _166 = const _;
        _7 = <dyn Foo as Foo>::foo(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _5 = (_166, move _6);
        _8 = (_5.0: &&str);
        _9 = (_5.1: &&str);
        _11 = <&str as PartialEq>::eq(_8, _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<&str, &str>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb6: {
        _165 = const _;
        _17 = <dyn Foo as Foo>::foo(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = &_17;
        _15 = (_165, move _16);
        _18 = (_15.0: &&str);
        _19 = (_15.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> [return: bb8, unwind continue];
    }

    bb8: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb10: {
        _25 = const 5_i32;
        _27 = &_25;
        _26 = &raw const (*_27);
        _164 = const _;
        _31 = _26;
        _30 = <i32 as Foo>::foo(move _31) -> [return: bb11, unwind continue];
    }

    bb11: {
        _29 = &_30;
        _28 = (_164, move _29);
        _32 = (_28.0: &&str);
        _33 = (_28.1: &&str);
        _35 = <&str as PartialEq>::eq(_32, _33) -> [return: bb12, unwind continue];
    }

    bb12: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<&str, &str>(move _36, _32, _33, move _38) -> unwind continue;
    }

    bb14: {
        _163 = const _;
        _42 = _26;
        _41 = <i32 as Foo>::bar(move _42) -> [return: bb15, unwind continue];
    }

    bb15: {
        _40 = &_41;
        _39 = (_163, move _40);
        _43 = (_39.0: &i64);
        _44 = (_39.1: &i64);
        _47 = (*_43);
        _48 = (*_44);
        _46 = Eq(move _47, move _48);
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _49 = core::panicking::AssertKind::Eq;
        _51 = Option::<Arguments<'_>>::None;
        _50 = core::panicking::assert_failed::<i64, i64>(move _49, _43, _44, move _51) -> unwind continue;
    }

    bb17: {
        _162 = const _;
        _56 = &_26;
        _55 = &raw const (*_56);
        _54 = <i32 as Foo>::complicated(move _55) -> [return: bb18, unwind continue];
    }

    bb18: {
        _53 = &_54;
        _52 = (_162, move _53);
        _57 = (_52.0: &i64);
        _58 = (_52.1: &i64);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<i64, i64>(move _63, _57, _58, move _65) -> unwind continue;
    }

    bb20: {
        _67 = _26;
        _66 = move _67 as *const dyn Foo (Pointer(Unsize));
        _161 = const _;
        _70 = <dyn Foo as Foo>::foo(_66) -> [return: bb21, unwind continue];
    }

    bb21: {
        _69 = &_70;
        _68 = (_161, move _69);
        _71 = (_68.0: &&str);
        _72 = (_68.1: &&str);
        _74 = <&str as PartialEq>::eq(_71, _72) -> [return: bb22, unwind continue];
    }

    bb22: {
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<&str, &str>(move _75, _71, _72, move _77) -> unwind continue;
    }

    bb24: {
        _160 = const _;
        _80 = <dyn Foo as Foo>::bar(_66) -> [return: bb25, unwind continue];
    }

    bb25: {
        _79 = &_80;
        _78 = (_160, move _79);
        _81 = (_78.0: &i64);
        _82 = (_78.1: &i64);
        _85 = (*_81);
        _86 = (*_82);
        _84 = Eq(move _85, move _86);
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _87 = core::panicking::AssertKind::Eq;
        _89 = Option::<Arguments<'_>>::None;
        _88 = core::panicking::assert_failed::<i64, i64>(move _87, _81, _82, move _89) -> unwind continue;
    }

    bb27: {
        _90 = const 18_u32;
        _92 = &_90;
        _91 = &raw const (*_92);
        _159 = const _;
        _96 = _91;
        _95 = <u32 as Foo>::foo(move _96) -> [return: bb28, unwind continue];
    }

    bb28: {
        _94 = &_95;
        _93 = (_159, move _94);
        _97 = (_93.0: &&str);
        _98 = (_93.1: &&str);
        _100 = <&str as PartialEq>::eq(_97, _98) -> [return: bb29, unwind continue];
    }

    bb29: {
        _99 = Not(move _100);
        switchInt(move _99) -> [0: bb31, otherwise: bb30];
    }

    bb30: {
        _101 = core::panicking::AssertKind::Eq;
        _103 = Option::<Arguments<'_>>::None;
        _102 = core::panicking::assert_failed::<&str, &str>(move _101, _97, _98, move _103) -> unwind continue;
    }

    bb31: {
        _158 = const _;
        _107 = _91;
        _106 = <u32 as Foo>::bar(move _107) -> [return: bb32, unwind continue];
    }

    bb32: {
        _105 = &_106;
        _104 = (_158, move _105);
        _108 = (_104.0: &i64);
        _109 = (_104.1: &i64);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = core::panicking::assert_failed::<i64, i64>(move _114, _108, _109, move _116) -> unwind continue;
    }

    bb34: {
        _157 = const _;
        _121 = &_91;
        _120 = &raw const (*_121);
        _119 = <u32 as Foo>::complicated(move _120) -> [return: bb35, unwind continue];
    }

    bb35: {
        _118 = &_119;
        _117 = (_157, move _118);
        _122 = (_117.0: &i64);
        _123 = (_117.1: &i64);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb37, otherwise: bb36];
    }

    bb36: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<i64, i64>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb37: {
        _132 = _91;
        _131 = move _132 as *const dyn Foo (Pointer(Unsize));
        _156 = const _;
        _135 = <dyn Foo as Foo>::foo(_131) -> [return: bb38, unwind continue];
    }

    bb38: {
        _134 = &_135;
        _133 = (_156, move _134);
        _136 = (_133.0: &&str);
        _137 = (_133.1: &&str);
        _139 = <&str as PartialEq>::eq(_136, _137) -> [return: bb39, unwind continue];
    }

    bb39: {
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb41, otherwise: bb40];
    }

    bb40: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<&str, &str>(move _140, _136, _137, move _142) -> unwind continue;
    }

    bb41: {
        _155 = const _;
        _145 = <dyn Foo as Foo>::bar(_131) -> [return: bb42, unwind continue];
    }

    bb42: {
        _144 = &_145;
        _143 = (_155, move _144);
        _146 = (_143.0: &i64);
        _147 = (_143.1: &i64);
        _150 = (*_146);
        _151 = (*_147);
        _149 = Eq(move _150, move _151);
        _148 = Not(move _149);
        switchInt(move _148) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<i64, i64>(move _152, _146, _147, move _154) -> unwind continue;
    }

    bb44: {
        return;
    }
}

promoted[0] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 18_i64;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "I'm a u32!";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 18_i64;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 18_i64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "I'm a u32!";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 5_i64;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "I'm an i32!";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 5_i64;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i64 = {
    let mut _0: &i64;
    let mut _1: i64;

    bb0: {
        _1 = const 5_i64;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "I'm an i32!";
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "I'm a u32!";
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "I'm an i32!";
        _0 = &_1;
        return;
    }
}
