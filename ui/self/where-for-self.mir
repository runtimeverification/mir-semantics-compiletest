// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNT: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 1_u32;
        return;
    }
}

fn <impl at ui/self/where-for-self.rs:17:1: 17:33>::bar(_1: &&u32) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u32;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u32};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 2_u32);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 4, align: 4) {
    01 00 00 00                                     │ ....
}

fn <impl at ui/self/where-for-self.rs:23:1: 23:33>::baz(_1: &&u32) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u32;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u32};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u32);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 3_u32);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u32);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 4, align: 4) {
    01 00 00 00                                     │ ....
}

fn foo1(_1: &T) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: &&T;

    bb0: {
        _2 = &_1;
        _0 = <&T as Bar<'_>>::bar(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn foo2(_1: &T) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: &&T;
    let mut _4: &&T;

    bb0: {
        _3 = &_1;
        _2 = <&T as Baz<'_>>::baz(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _0 = <&T as Bar<'_>>::bar(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let _2: ();
    let _3: &u32;
    let _4: ();
    let _5: &u32;
    let mut _6: (&u32, &u32);
    let mut _7: &u32;
    let _8: *mut u32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 42_u32;
        scope 2 {
            let _9: &u32;
            let _10: &u32;
            let mut _18: &u32;
            let mut _19: *const ();
            let mut _20: usize;
            let mut _21: usize;
            let mut _22: usize;
            let mut _23: usize;
            let mut _24: bool;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }

    bb0: {
        _1 = const 42_u32;
        _3 = &_1;
        _2 = foo1::<u32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_1;
        _4 = foo2::<u32>(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = const {alloc1: *mut u32};
        _19 = _8 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf(u32);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb5, unwind unreachable];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u32, u32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb4: {
        return;
    }

    bb5: {
        _7 = &(*_8);
        _18 = const _;
        _6 = (move _7, _18);
        _9 = (_6.0: &u32);
        _10 = (_6.1: &u32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }
}

alloc1 (static: COUNT, size: 4, align: 4) {
    01 00 00 00                                     │ ....
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 12_u32;
        _0 = &_1;
        return;
    }
}
