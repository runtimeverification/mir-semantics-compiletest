// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_unsized_struct.rs:7:1: 7:15>::len(_1: Rc<Foo<[u8]>>) -> usize {
    debug self => _1;
    let mut _0: usize;
    let mut _2: &[u8];
    let _3: &Foo<[u8]>;
    let mut _4: &std::rc::Rc<Foo<[u8]>>;

    bb0: {
        _4 = &_1;
        _3 = <Rc<Foo<[u8]>> as Deref>::deref(move _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _2 = &((*_3).0: [u8]);
        _0 = Len((*_2));
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<Foo<[u8]>>;
    let mut _2: std::rc::Rc<Foo<[u8; 3]>>;
    let mut _3: Foo<[u8; 3]>;
    let mut _4: [u8; 3];
    let mut _5: (&usize, &usize);
    let mut _6: &usize;
    let _7: usize;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: usize;
    let mut _13: usize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug rc => _1;
        let _8: &usize;
        let _9: &usize;
        let mut _17: &usize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
    }

    bb0: {
        _4 = [const 1_u8, const 2_u8, const 3_u8];
        _3 = Foo::<[u8; 3]>(move _4);
        _2 = Rc::<Foo<[u8; 3]>>::new(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = move _2 as std::rc::Rc<Foo<[u8]>> (Pointer(Unsize));
        _17 = const _;
        _7 = Foo::<[u8]>::len(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _5 = (_17, move _6);
        _8 = (_5.0: &usize);
        _9 = (_5.1: &usize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<usize, usize>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;

    bb0: {
        _0 = Foo::<T>(move _1);
        return;
    }
}
