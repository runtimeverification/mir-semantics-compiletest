// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/self-impl-2.rs:11:1: 11:9>::foo(_1: Foo, _2: &Foo, _3: Box<Foo>) -> Foo {
    debug _x => const Foo;
    debug _y => _2;
    debug _z => _3;
    let mut _0: Foo;

    bb0: {
        drop(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/self/self-impl-2.rs:11:1: 11:9>::baz() -> () {
    let mut _0: ();
    let _1: ();
    scope 1 {
    }

    bb0: {
        _1 = Foo::empty() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/self/self-impl-2.rs:11:1: 11:9>::empty() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Bar::dummy(_1: &Self, _2: X) -> () {
    debug self => _1;
    debug x => _2;
    let mut _0: ();

    bb0: {
        drop(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/self/self-impl-2.rs:48:1: 48:36>::bar(_1: Box<Baz<isize>>, _2: &Box<Baz<isize>>, _3: Box<Box<Baz<isize>>>, _4: bool) -> Box<Baz<isize>> {
    debug _x => _1;
    debug _y => _2;
    debug _z => _3;
    let mut _0: std::boxed::Box<Baz<isize>>;
    let mut _5: Baz<isize>;
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _5 = Baz::<isize> { f: const 42_isize };
        _0 = Box::<Baz<isize>>::new(move _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        drop(_3) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let mut _2: std::boxed::Box<Foo>;
    let mut _3: std::boxed::Box<Baz<isize>>;
    let mut _4: std::boxed::Box<Baz<isize>>;
    let mut _5: Baz<isize>;
    let _6: &std::boxed::Box<Baz<isize>>;
    let _7: std::boxed::Box<Baz<isize>>;
    let mut _8: Baz<isize>;
    let mut _9: std::boxed::Box<std::boxed::Box<Baz<isize>>>;
    let mut _10: std::boxed::Box<Baz<isize>>;
    let mut _11: Baz<isize>;
    let mut _12: &Foo;
    let mut _13: bool;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _13 = const false;
        _12 = const _;
        _2 = Box::<Foo>::new(const Foo) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Foo::foo(const Foo, _12, move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = Baz::<isize> { f: const 42_isize };
        _13 = const true;
        _4 = Box::<Baz<isize>>::new(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _8 = Baz::<isize> { f: const 42_isize };
        _7 = Box::<Baz<isize>>::new(move _8) -> [return: bb4, unwind: bb11];
    }

    bb4: {
        _6 = &_7;
        _11 = Baz::<isize> { f: const 42_isize };
        _10 = Box::<Baz<isize>>::new(move _11) -> [return: bb5, unwind: bb14];
    }

    bb5: {
        _9 = Box::<Box<Baz<isize>>>::new(move _10) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _13 = const false;
        _3 = <Box<Baz<isize>> as Bar<isize>>::bar(move _4, _6, move _9, const true) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _13 = const false;
        drop(_3) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_7) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_7) -> [return: bb12, unwind terminate];
    }

    bb11 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }

    bb13 (cleanup): {
        drop(_4) -> [return: bb10, unwind terminate];
    }

    bb14 (cleanup): {
        switchInt(_13) -> [0: bb10, otherwise: bb13];
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}
