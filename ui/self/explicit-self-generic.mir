// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/explicit-self-generic.rs:4:16: 4:21>::clone(_1: &LM) -> LM {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self-generic.rs:4:16: 4:21
    let mut _0: LM;                      // return place in scope 0 at ui/self/explicit-self-generic.rs:4:16: 4:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/self/explicit-self-generic.rs:4:16: 4:21
        return;                          // scope 0 at ui/self/explicit-self-generic.rs:4:21: 4:21
    }
}

fn linear_map() -> HashMap<K, V> {
    let mut _0: HashMap<K, V>;           // return place in scope 0 at ui/self/explicit-self-generic.rs:11:25: 11:37
    let mut _1: LM;                      // in scope 0 at ui/self/explicit-self-generic.rs:12:23: 14:17
    let mut _2: std::vec::Vec<(K, V)>;   // in scope 0 at ui/self/explicit-self-generic.rs:14:19: 14:29

    bb0: {
        _1 = LM { resize_at: const 32_usize, size: const 0_usize }; // scope 0 at ui/self/explicit-self-generic.rs:12:23: 14:17
        _2 = Vec::<(K, V)>::new() -> bb1; // scope 0 at ui/self/explicit-self-generic.rs:14:19: 14:29
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-generic.rs:14:19: 14:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<(K, V)> {Vec::<(K, V)>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = HashMap::<K, V>::HashMap_(move _1, move _2); // scope 0 at ui/self/explicit-self-generic.rs:12:5: 14:30
        return;                          // scope 0 at ui/self/explicit-self-generic.rs:15:2: 15:2
    }
}

fn <impl at ui/self/explicit-self-generic.rs:17:1: 17:23>::len(_1: &mut HashMap<K, V>) -> usize {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self-generic.rs:18:16: 18:25
    let mut _0: usize;                   // return place in scope 0 at ui/self/explicit-self-generic.rs:18:30: 18:35
    let _2: &LM;                         // in scope 0 at ui/self/explicit-self-generic.rs:20:31: 20:36
    scope 1 {
        debug l => _2;                   // in scope 1 at ui/self/explicit-self-generic.rs:20:31: 20:36
    }

    bb0: {
        _2 = &(((*_1) as HashMap_).0: LM); // scope 0 at ui/self/explicit-self-generic.rs:20:31: 20:36
        _0 = ((*_2).1: usize);           // scope 1 at ui/self/explicit-self-generic.rs:20:44: 20:50
        return;                          // scope 0 at ui/self/explicit-self-generic.rs:22:6: 22:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self-generic.rs:25:15: 25:15
    let mut _1: std::boxed::Box<HashMap<(), ()>>; // in scope 0 at ui/self/explicit-self-generic.rs:26:9: 26:14
    let mut _2: HashMap<(), ()>;         // in scope 0 at ui/self/explicit-self-generic.rs:26:34: 26:55
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at ui/self/explicit-self-generic.rs:27:16: 27:23
    let mut _6: &mut HashMap<(), ()>;    // in scope 0 at ui/self/explicit-self-generic.rs:27:16: 27:23
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: *const HashMap<(), ()>; // in scope 0 at ui/self/explicit-self-generic.rs:26:9: 26:14
    scope 1 {
        debug m => _1;                   // in scope 1 at ui/self/explicit-self-generic.rs:26:9: 26:14
        let _8: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _9: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _22: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _8;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _9;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _14: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _14;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = linear_map::<(), ()>() -> bb1; // scope 0 at ui/self/explicit-self-generic.rs:26:34: 26:55
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-generic.rs:26:34: 26:53
                                         // + literal: Const { ty: fn() -> HashMap<(), ()> {linear_map::<(), ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Box::<HashMap<(), ()>>::new(move _2) -> bb2; // scope 0 at ui/self/explicit-self-generic.rs:26:25: 26:56
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-generic.rs:26:25: 26:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(HashMap<(), ()>) -> Box<HashMap<(), ()>> {Box::<HashMap<(), ()>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = (((_1.0: std::ptr::Unique<HashMap<(), ()>>).0: std::ptr::NonNull<HashMap<(), ()>>).0: *const HashMap<(), ()>); // scope 1 at ui/self/explicit-self-generic.rs:27:16: 27:23
        _6 = &mut (*_23);                // scope 1 at ui/self/explicit-self-generic.rs:27:16: 27:23
        _5 = HashMap::<(), ()>::len(move _6) -> [return: bb3, unwind: bb7]; // scope 1 at ui/self/explicit-self-generic.rs:27:16: 27:23
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-generic.rs:27:18: 27:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut HashMap<(), ()>) -> usize {HashMap::<(), ()>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 0_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21) -> bb7; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_1) -> bb6;                 // scope 0 at ui/self/explicit-self-generic.rs:28:1: 28:2
    }

    bb6: {
        return;                          // scope 0 at ui/self/explicit-self-generic.rs:28:2: 28:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/self/explicit-self-generic.rs:28:1: 28:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/self/explicit-self-generic.rs:25:1: 28:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/self/explicit-self-generic.rs:27:25: 27:26

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/self/explicit-self-generic.rs:27:25: 27:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn HashMap::HashMap_(_1: LM, _2: Vec<(K, V)>) -> HashMap<K, V> {
    let mut _0: HashMap<K, V>;           // return place in scope 0 at ui/self/explicit-self-generic.rs:8:5: 8:13

    bb0: {
        _0 = HashMap::<K, V>::HashMap_(move _1, move _2); // scope 0 at ui/self/explicit-self-generic.rs:8:5: 8:13
        return;                          // scope 0 at ui/self/explicit-self-generic.rs:8:5: 8:13
    }
}

// MIR FOR CTFE
fn HashMap::HashMap_(_1: LM, _2: Vec<(K, V)>) -> HashMap<K, V> {
    let mut _0: HashMap<K, V>;           // return place in scope 0 at ui/self/explicit-self-generic.rs:8:5: 8:13

    bb0: {
        _0 = HashMap::<K, V>::HashMap_(move _1, move _2); // scope 0 at ui/self/explicit-self-generic.rs:8:5: 8:13
        return;                          // scope 0 at ui/self/explicit-self-generic.rs:8:5: 8:13
    }
}
