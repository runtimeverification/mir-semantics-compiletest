// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_silly.rs:7:1: 7:29>::deref(_1: &Bar) -> &Foo {
    debug self => _1;
    let mut _0: &Foo;

    bb0: {
        _0 = const _;
        return;
    }
}

promoted[0] in <impl at ui/self/arbitrary_self_types_silly.rs:7:1: 7:29>::deref: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_silly.rs:15:1: 15:9>::bar(_1: Bar) -> i32 {
    debug self => const Bar;
    let mut _0: i32;

    bb0: {
        _0 = const 3_i32;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i32, &i32);
    let mut _2: &i32;
    let _3: i32;
    let _4: &i32;
    let _5: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &i32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _13 = const _;
        _3 = Foo::bar(const Bar) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_13, move _2);
        _4 = (_1.0: &i32);
        _5 = (_1.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
