// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_trait.rs:10:1: 10:24>::trait_method(_1: &Box<Rc<Vec<i32>>>) -> &[i32] {
    debug self => _1;
    let mut _0: &[i32];
    let _2: &[i32];
    let _3: &std::vec::Vec<i32>;
    let _4: &std::vec::Vec<i32>;
    let mut _5: &std::rc::Rc<std::vec::Vec<i32>>;
    let mut _6: std::boxed::Box<std::rc::Rc<std::vec::Vec<i32>>>;
    let mut _7: *const std::rc::Rc<std::vec::Vec<i32>>;
    let mut _8: *const ();
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: bool;

    bb0: {
        _6 = deref_copy (*_1);
        _7 = (((_6.0: std::ptr::Unique<std::rc::Rc<std::vec::Vec<i32>>>).0: std::ptr::NonNull<std::rc::Rc<std::vec::Vec<i32>>>).0: *const std::rc::Rc<std::vec::Vec<i32>>);
        _8 = _7 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(std::rc::Rc<std::vec::Vec<i32>>);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        _3 = _4;
        _2 = <Vec<i32> as Deref>::deref(_3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = _2;
        return;
    }

    bb3: {
        _5 = &(*_7);
        _4 = <Rc<Vec<i32>> as Deref>::deref(move _5) -> [return: bb1, unwind continue];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let mut _7: (&&[i32; 3], &&[i32]);
    let mut _8: &&[i32];
    let _9: &[i32];
    let mut _10: &std::boxed::Box<std::rc::Rc<std::vec::Vec<i32>>>;
    let _11: std::boxed::Box<std::rc::Rc<std::vec::Vec<i32>>>;
    let mut _12: std::rc::Rc<std::vec::Vec<i32>>;
    let mut _13: std::vec::Vec<i32>;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: *const [i32; 3];
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
        debug v => _1;
        let _14: &&[i32; 3];
        let _15: &&[i32];
        let mut _21: &&[i32; 3];
        scope 3 {
            debug left_val => _14;
            debug right_val => _15;
            let _18: core::panicking::AssertKind;
            scope 4 {
                debug kind => _18;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _22 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _23 = _22 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(i32);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb12, unwind unreachable];
    }

    bb2: {
        _21 = const _;
        _13 = move _1;
        _12 = Rc::<Vec<i32>>::new(move _13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = Box::<Rc<Vec<i32>>>::new(move _12) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = &_11;
        _9 = <Vec<i32> as Trait>::trait_method(move _10) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _8 = &_9;
        _7 = (_21, move _8);
        _14 = (_7.0: &&[i32; 3]);
        _15 = (_7.1: &&[i32]);
        _17 = <&[i32; 3] as PartialEq<&[i32]>>::eq(_14, _15) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&[i32; 3], &[i32]>(move _18, _14, _15, move _20) -> bb10;
    }

    bb8: {
        drop(_11) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_11) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }

    bb12: {
        (*_22) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &&[i32; 3] = {
    let mut _0: &&[i32; 3];
    let mut _1: &[i32; 3];
    let mut _2: [i32; 3];

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}
