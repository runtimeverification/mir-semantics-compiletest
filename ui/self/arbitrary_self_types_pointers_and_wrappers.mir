// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:13:1: 13:33>::deref(_1: &Ptr<T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let mut _2: std::boxed::Box<T>;
    let mut _3: *const T;

    bb0: {
        _2 = deref_copy ((*_1).0: std::boxed::Box<T>);
        _3 = (((_2.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T);
        _0 = &(*_3);
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:27:1: 27:45>::deref(_1: &CellPtr<'_, T>) -> &T {
    debug self => _1;
    let mut _0: &T;
    let _2: &T;
    let mut _3: &std::cell::Cell<&T>;

    bb0: {
        _3 = &((*_1).0: std::cell::Cell<&T>);
        _2 = Cell::<&T>::get(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:40:1: 40:37>::deref(_1: &Wrapper<T>) -> &T {
    debug self => _1;
    let mut _0: &T;

    bb0: {
        _0 = &((*_1).0: T);
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::ptr_wrapper(_1: Ptr<Wrapper<i32>>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: &i32;
    let mut _3: &Wrapper<i32>;
    let _4: &Wrapper<i32>;
    let mut _5: &Ptr<Wrapper<i32>>;

    bb0: {
        _5 = &_1;
        _4 = <Ptr<Wrapper<i32>> as Deref>::deref(move _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _3 = _4;
        _2 = <Wrapper<i32> as Deref>::deref(move _3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _0 = (*_2);
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::wrapper_ptr(_1: Wrapper<Ptr<i32>>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: &i32;
    let mut _3: &Ptr<i32>;
    let _4: &Ptr<i32>;
    let mut _5: &Wrapper<Ptr<i32>>;

    bb0: {
        _5 = &_1;
        _4 = <Wrapper<Ptr<i32>> as Deref>::deref(move _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _3 = _4;
        _2 = <Ptr<i32> as Deref>::deref(move _3) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        _0 = (*_2);
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::wrapper_ptr_wrapper(_1: Wrapper<Ptr<Wrapper<i32>>>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: &i32;
    let mut _3: &Wrapper<i32>;
    let _4: &Wrapper<i32>;
    let mut _5: &Ptr<Wrapper<i32>>;
    let _6: &Ptr<Wrapper<i32>>;
    let mut _7: &Wrapper<Ptr<Wrapper<i32>>>;

    bb0: {
        _7 = &_1;
        _6 = <Wrapper<Ptr<Wrapper<i32>>> as Deref>::deref(move _7) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _5 = _6;
        _4 = <Ptr<Wrapper<i32>> as Deref>::deref(move _5) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _3 = _4;
        _2 = <Wrapper<i32> as Deref>::deref(move _3) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _0 = (*_2);
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_1) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        resume;
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::cell(_1: CellPtr<'_, i32>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: &i32;
    let mut _3: &CellPtr<'_, i32>;

    bb0: {
        _3 = &_1;
        _2 = <CellPtr<'_, i32> as Deref>::deref(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = (*_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Ptr<Wrapper<dyn Trait>>;
    let mut _2: Ptr<Wrapper<i32>>;
    let mut _3: std::boxed::Box<Wrapper<i32>>;
    let mut _4: Wrapper<i32>;
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let _7: i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: Wrapper<Ptr<dyn Trait>>;
    let mut _18: Wrapper<Ptr<i32>>;
    let mut _19: Ptr<i32>;
    let mut _20: std::boxed::Box<i32>;
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let _23: i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: i32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: Wrapper<Ptr<Wrapper<dyn Trait>>>;
    let mut _34: Wrapper<Ptr<Wrapper<i32>>>;
    let mut _35: Ptr<Wrapper<i32>>;
    let mut _36: std::boxed::Box<Wrapper<i32>>;
    let mut _37: Wrapper<i32>;
    let mut _38: (&i32, &i32);
    let mut _39: &i32;
    let _40: i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: CellPtr<'_, dyn Trait>;
    let mut _51: CellPtr<'_, i32>;
    let mut _52: std::cell::Cell<&i32>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let _55: i32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: i32;
    let mut _61: i32;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug pw => _1;
        let _8: &i32;
        let _9: &i32;
        let mut _69: &i32;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug wp => _17;
            let _24: &i32;
            let _25: &i32;
            let mut _68: &i32;
            scope 5 {
                debug left_val => _24;
                debug right_val => _25;
                let _30: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _30;
                }
            }
            scope 7 {
                debug wpw => _33;
                let _41: &i32;
                let _42: &i32;
                let mut _66: &i32;
                let mut _67: &i32;
                scope 8 {
                    debug left_val => _41;
                    debug right_val => _42;
                    let _47: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _47;
                    }
                }
                scope 10 {
                    debug c => _50;
                    let _56: &i32;
                    let _57: &i32;
                    let mut _65: &i32;
                    scope 11 {
                        debug left_val => _56;
                        debug right_val => _57;
                        let _62: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _62;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = Wrapper::<i32>(const 5_i32);
        _3 = Box::<Wrapper<i32>>::new(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Ptr::<Wrapper<i32>>(move _3);
        _1 = move _2 as Ptr<Wrapper<dyn Trait>> (Pointer(Unsize));
        _7 = <dyn Trait as Trait>::ptr_wrapper(move _1) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _69 = const _;
        _5 = (move _6, _69);
        _8 = (_5.0: &i32);
        _9 = (_5.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb4: {
        _20 = Box::<i32>::new(const 6_i32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = Ptr::<i32>(move _20);
        _18 = Wrapper::<Ptr<i32>>(move _19);
        _17 = move _18 as Wrapper<Ptr<dyn Trait>> (Pointer(Unsize));
        _23 = <dyn Trait as Trait>::wrapper_ptr(move _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _22 = &_23;
        _68 = const _;
        _21 = (move _22, _68);
        _24 = (_21.0: &i32);
        _25 = (_21.1: &i32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i32, i32>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb8: {
        _37 = Wrapper::<i32>(const 7_i32);
        _36 = Box::<Wrapper<i32>>::new(move _37) -> [return: bb9, unwind continue];
    }

    bb9: {
        _35 = Ptr::<Wrapper<i32>>(move _36);
        _34 = Wrapper::<Ptr<Wrapper<i32>>>(move _35);
        _33 = move _34 as Wrapper<Ptr<Wrapper<dyn Trait>>> (Pointer(Unsize));
        _40 = <dyn Trait as Trait>::wrapper_ptr_wrapper(move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        _39 = &_40;
        _67 = const _;
        _38 = (move _39, _67);
        _41 = (_38.0: &i32);
        _42 = (_38.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb12: {
        _66 = const _;
        _52 = Cell::<&i32>::new(_66) -> [return: bb13, unwind continue];
    }

    bb13: {
        _51 = CellPtr::<'_, i32>(move _52);
        _50 = move _51 as CellPtr<'_, dyn Trait> (Pointer(Unsize));
        _55 = <dyn Trait as Trait>::cell(move _50) -> [return: bb14, unwind continue];
    }

    bb14: {
        _54 = &_55;
        _65 = const _;
        _53 = (move _54, _65);
        _56 = (_53.0: &i32);
        _57 = (_53.1: &i32);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<i32, i32>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 8_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 8_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

fn Ptr(_1: Box<T>) -> Ptr<T> {
    let mut _0: Ptr<T>;

    bb0: {
        _0 = Ptr::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Ptr(_1: Box<T>) -> Ptr<T> {
    let mut _0: Ptr<T>;

    bb0: {
        _0 = Ptr::<T>(move _1);
        return;
    }
}

fn CellPtr(_1: Cell<&T>) -> CellPtr<'_, T> {
    let mut _0: CellPtr<'_, T>;

    bb0: {
        _0 = CellPtr::<'_, T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn CellPtr(_1: Cell<&T>) -> CellPtr<'_, T> {
    let mut _0: CellPtr<'_, T>;

    bb0: {
        _0 = CellPtr::<'_, T>(move _1);
        return;
    }
}

fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;

    bb0: {
        _0 = Wrapper::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;

    bb0: {
        _0 = Wrapper::<T>(move _1);
        return;
    }
}
