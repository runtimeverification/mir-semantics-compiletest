// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:13:1: 13:33>::deref(_1: &Ptr<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:16:14: 16:19
    let mut _0: &T;                      // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:17:9: 17:17
    let mut _2: std::boxed::Box<T>;      // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:16:14: 16:19
    let mut _3: *const T;                // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:16:14: 16:19

    bb0: {
        _2 = deref_copy ((*_1).0: std::boxed::Box<T>); // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:17:9: 17:17
        _3 = (((_2.0: std::ptr::Unique<T>).0: std::ptr::NonNull<T>).0: *const T); // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:17:9: 17:17
        _0 = &(*_3);                     // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:17:9: 17:17
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:18:6: 18:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:27:1: 27:45>::deref(_1: &CellPtr<'_, T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:30:14: 30:19
    let mut _0: &T;                      // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:31:9: 31:21
    let mut _2: &std::cell::Cell<&T>;    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:31:9: 31:21

    bb0: {
        _2 = &((*_1).0: std::cell::Cell<&T>); // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:31:9: 31:21
        _0 = Cell::<&T>::get(move _2) -> bb1; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:31:9: 31:21
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:31:16: 31:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<&T>) -> &T {Cell::<&T>::get}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:32:6: 32:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:40:1: 40:37>::deref(_1: &Wrapper<T>) -> &T {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:43:14: 43:19
    let mut _0: &T;                      // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:44:9: 44:16

    bb0: {
        _0 = &((*_1).0: T);              // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:44:9: 44:16
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:45:6: 45:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::ptr_wrapper(_1: Ptr<Wrapper<i32>>) -> i32 {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:64:20: 64:24
    let mut _0: i32;                     // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:64:49: 64:52
    let mut _2: &i32;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:9: 65:15
    let mut _3: &Wrapper<i32>;           // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:10: 65:15
    let _4: &Wrapper<i32>;               // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:10: 65:15
    let mut _5: &Ptr<Wrapper<i32>>;      // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:11: 65:15

    bb0: {
        _5 = &_1;                        // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:11: 65:15
        _4 = <Ptr<Wrapper<i32>> as Deref>::deref(move _5) -> [return: bb1, unwind: bb4]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:10: 65:15
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:10: 65:15
                                         // + literal: Const { ty: for<'a> fn(&'a Ptr<Wrapper<i32>>) -> &'a <Ptr<Wrapper<i32>> as Deref>::Target {<Ptr<Wrapper<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:10: 65:15
        _2 = <Wrapper<i32> as Deref>::deref(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:9: 65:15
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:9: 65:15
                                         // + literal: Const { ty: for<'a> fn(&'a Wrapper<i32>) -> &'a <Wrapper<i32> as Deref>::Target {<Wrapper<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (*_2);                      // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:65:9: 65:15
        drop(_1) -> bb3;                 // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:66:5: 66:6
    }

    bb3: {
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:66:6: 66:6
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:66:5: 66:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:64:5: 66:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::wrapper_ptr(_1: Wrapper<Ptr<i32>>) -> i32 {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:67:20: 67:24
    let mut _0: i32;                     // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:67:49: 67:52
    let mut _2: &i32;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:9: 68:15
    let mut _3: &Ptr<i32>;               // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:10: 68:15
    let _4: &Ptr<i32>;                   // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:10: 68:15
    let mut _5: &Wrapper<Ptr<i32>>;      // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:11: 68:15

    bb0: {
        _5 = &_1;                        // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:11: 68:15
        _4 = <Wrapper<Ptr<i32>> as Deref>::deref(move _5) -> [return: bb1, unwind: bb4]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:10: 68:15
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:10: 68:15
                                         // + literal: Const { ty: for<'a> fn(&'a Wrapper<Ptr<i32>>) -> &'a <Wrapper<Ptr<i32>> as Deref>::Target {<Wrapper<Ptr<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:10: 68:15
        _2 = <Ptr<i32> as Deref>::deref(move _3) -> [return: bb2, unwind: bb4]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:9: 68:15
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:9: 68:15
                                         // + literal: Const { ty: for<'a> fn(&'a Ptr<i32>) -> &'a <Ptr<i32> as Deref>::Target {<Ptr<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (*_2);                      // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:68:9: 68:15
        drop(_1) -> bb3;                 // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:69:5: 69:6
    }

    bb3: {
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:69:6: 69:6
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:69:5: 69:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:67:5: 69:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::wrapper_ptr_wrapper(_1: Wrapper<Ptr<Wrapper<i32>>>) -> i32 {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:70:28: 70:32
    let mut _0: i32;                     // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:70:66: 70:69
    let mut _2: &i32;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:9: 71:16
    let mut _3: &Wrapper<i32>;           // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:10: 71:16
    let _4: &Wrapper<i32>;               // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:10: 71:16
    let mut _5: &Ptr<Wrapper<i32>>;      // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:11: 71:16
    let _6: &Ptr<Wrapper<i32>>;          // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:11: 71:16
    let mut _7: &Wrapper<Ptr<Wrapper<i32>>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:12: 71:16

    bb0: {
        _7 = &_1;                        // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:12: 71:16
        _6 = <Wrapper<Ptr<Wrapper<i32>>> as Deref>::deref(move _7) -> [return: bb1, unwind: bb5]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:11: 71:16
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:11: 71:16
                                         // + literal: Const { ty: for<'a> fn(&'a Wrapper<Ptr<Wrapper<i32>>>) -> &'a <Wrapper<Ptr<Wrapper<i32>>> as Deref>::Target {<Wrapper<Ptr<Wrapper<i32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:11: 71:16
        _4 = <Ptr<Wrapper<i32>> as Deref>::deref(move _5) -> [return: bb2, unwind: bb5]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:10: 71:16
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:10: 71:16
                                         // + literal: Const { ty: for<'a> fn(&'a Ptr<Wrapper<i32>>) -> &'a <Ptr<Wrapper<i32>> as Deref>::Target {<Ptr<Wrapper<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _4;                         // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:10: 71:16
        _2 = <Wrapper<i32> as Deref>::deref(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:9: 71:16
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:9: 71:16
                                         // + literal: Const { ty: for<'a> fn(&'a Wrapper<i32>) -> &'a <Wrapper<i32> as Deref>::Target {<Wrapper<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = (*_2);                      // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:71:9: 71:16
        drop(_1) -> bb4;                 // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:72:5: 72:6
    }

    bb4: {
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:72:6: 72:6
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:72:5: 72:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:70:5: 72:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:63:1: 63:19>::cell(_1: CellPtr<'_, i32>) -> i32 {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:73:13: 73:17
    let mut _0: i32;                     // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:73:37: 73:40
    let mut _2: &i32;                    // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:74:9: 74:14
    let mut _3: &CellPtr<'_, i32>;       // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:74:10: 74:14

    bb0: {
        _3 = &_1;                        // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:74:10: 74:14
        _2 = <CellPtr<'_, i32> as Deref>::deref(move _3) -> bb1; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:74:9: 74:14
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:74:9: 74:14
                                         // + literal: Const { ty: for<'a> fn(&'a CellPtr<'_, i32>) -> &'a <CellPtr<'_, i32> as Deref>::Target {<CellPtr<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = (*_2);                      // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:74:9: 74:14
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:75:6: 75:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:78:11: 78:11
    let _1: Ptr<Wrapper<dyn Trait>>;     // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:9: 79:11
    let mut _2: Ptr<Wrapper<dyn Trait>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:14: 79:66
    let mut _3: Ptr<Wrapper<i32>>;       // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:14: 79:39
    let mut _4: std::boxed::Box<Wrapper<i32>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:18: 79:38
    let mut _5: Wrapper<i32>;            // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:27: 79:37
    let mut _6: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: i32;                         // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:16: 80:32
    let mut _9: Ptr<Wrapper<dyn Trait>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:16: 80:18
    let mut _10: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: Wrapper<Ptr<dyn Trait>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:14: 82:66
    let mut _27: Wrapper<Ptr<i32>>;      // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:14: 82:39
    let mut _28: Ptr<i32>;               // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:22: 82:38
    let mut _29: std::boxed::Box<i32>;   // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:26: 82:37
    let mut _30: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _32: i32;                        // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:16: 83:32
    let mut _33: Wrapper<Ptr<dyn Trait>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:16: 83:18
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: Wrapper<Ptr<Wrapper<dyn Trait>>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:15: 85:85
    let mut _51: Wrapper<Ptr<Wrapper<i32>>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:15: 85:49
    let mut _52: Ptr<Wrapper<i32>>;      // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:23: 85:48
    let mut _53: std::boxed::Box<Wrapper<i32>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:27: 85:47
    let mut _54: Wrapper<i32>;           // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:36: 85:46
    let mut _55: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _57: i32;                        // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:16: 86:41
    let mut _58: Wrapper<Ptr<Wrapper<dyn Trait>>>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:16: 86:19
    let mut _59: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _64: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _65: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _67: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _68: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _69: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _70: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _71: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _72: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _75: CellPtr<'_, dyn Trait>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:13: 88:57
    let mut _76: CellPtr<'_, i32>;       // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:13: 88:35
    let mut _77: std::cell::Cell<&i32>;  // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:21: 88:34
    let mut _78: &i32;                   // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
    let _79: &i32;                       // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
    let mut _80: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _81: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _82: i32;                        // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:16: 89:24
    let mut _83: CellPtr<'_, dyn Trait>; // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:16: 89:17
    let mut _84: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _89: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _90: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _94: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _95: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _96: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _97: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug pw => _1;                  // in scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:9: 79:11
        let _11: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _25: Wrapper<Ptr<dyn Trait>>; // in scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:9: 82:11
        let mut _103: &i32;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _11;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _17;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug wp => _25;             // in scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:9: 82:11
            let _35: &i32;               // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _36: &i32;               // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _49: Wrapper<Ptr<Wrapper<dyn Trait>>>; // in scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:9: 85:12
            let mut _102: &i32;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 5 {
                debug left_val => _35;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _36;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _41: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _41;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 7 {
                debug wpw => _49;        // in scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:9: 85:12
                let _60: &i32;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _61: &i32;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _74: CellPtr<'_, dyn Trait>; // in scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:9: 88:10
                let mut _100: &i32;      // in scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
                let mut _101: &i32;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _60; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _61; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _66: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _66; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 10 {
                    debug c => _74;      // in scope 10 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:9: 88:10
                    let _85: &i32;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _86: &i32;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _99: &i32;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 11 {
                        debug left_val => _85; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _86; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _91: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 12 {
                            debug kind => _91; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _5 = const Wrapper::<i32>(5_i32); // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:27: 79:37
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:27: 79:37
                                         // + literal: Const { ty: Wrapper<i32>, val: Value(Scalar(0x00000005)) }
        _4 = Box::<Wrapper<i32>>::new(move _5) -> bb1; // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:18: 79:38
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:18: 79:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Wrapper<i32>) -> Box<Wrapper<i32>> {Box::<Wrapper<i32>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Ptr::<Wrapper<i32>>(move _4); // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:14: 79:39
        _2 = move _3 as Ptr<Wrapper<dyn Trait>> (Pointer(Unsize)); // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:14: 79:39
        _1 = move _2;                    // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:79:14: 79:66
        _9 = move _1;                    // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:16: 80:18
        _8 = <dyn Trait as Trait>::ptr_wrapper(move _9) -> bb2; // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:16: 80:32
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:19: 80:30
                                         // + literal: Const { ty: fn(Ptr<Wrapper<dyn Trait>>) -> i32 {<dyn Trait as Trait>::ptr_wrapper}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[4])) }
        _10 = _103;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_6.0: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_6.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = const 5_i32;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<i32, i32>(move _19, move _20, move _22, move _24); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _29 = Box::<i32>::new(const 6_i32) -> bb5; // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:26: 82:37
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:26: 82:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = Ptr::<i32>(move _29);      // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:22: 82:38
        _27 = Wrapper::<Ptr<i32>>(move _28); // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:14: 82:39
        _26 = move _27 as Wrapper<Ptr<dyn Trait>> (Pointer(Unsize)); // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:14: 82:39
        _25 = move _26;                  // scope 1 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:82:14: 82:66
        _33 = move _25;                  // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:16: 83:18
        _32 = <dyn Trait as Trait>::wrapper_ptr(move _33) -> bb6; // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:16: 83:32
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:19: 83:30
                                         // + literal: Const { ty: fn(Wrapper<Ptr<dyn Trait>>) -> i32 {<dyn Trait as Trait>::wrapper_ptr}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = &_32;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = const _;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _34 = _102;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _34);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_30.0: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_30.1: &i32);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = (*_35);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = const 6_i32;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = Eq(move _39, move _40);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _37 = Not(move _38);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb8, otherwise: bb7]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _41 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<i32, i32>(move _43, move _44, move _46, move _48); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _54 = const Wrapper::<i32>(7_i32); // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:36: 85:46
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:36: 85:46
                                         // + literal: Const { ty: Wrapper<i32>, val: Value(Scalar(0x00000007)) }
        _53 = Box::<Wrapper<i32>>::new(move _54) -> bb9; // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:27: 85:47
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:27: 85:35
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Wrapper<i32>) -> Box<Wrapper<i32>> {Box::<Wrapper<i32>>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _52 = Ptr::<Wrapper<i32>>(move _53); // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:23: 85:48
        _51 = Wrapper::<Ptr<Wrapper<i32>>>(move _52); // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:15: 85:49
        _50 = move _51 as Wrapper<Ptr<Wrapper<dyn Trait>>> (Pointer(Unsize)); // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:15: 85:49
        _49 = move _50;                  // scope 4 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:85:15: 85:85
        _58 = move _49;                  // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:16: 86:19
        _57 = <dyn Trait as Trait>::wrapper_ptr_wrapper(move _58) -> bb10; // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:16: 86:41
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:20: 86:39
                                         // + literal: Const { ty: fn(Wrapper<Ptr<Wrapper<dyn Trait>>>) -> i32 {<dyn Trait as Trait>::wrapper_ptr_wrapper}, val: Value(<ZST>) }
    }

    bb10: {
        _56 = &_57;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _59 = _101;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _59);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _60 = (_55.0: &i32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _61 = (_55.1: &i32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _64 = (*_60);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _65 = const 7_i32;               // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _63 = Eq(move _64, move _65);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _62 = Not(move _63);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _62) -> [0: bb12, otherwise: bb11]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _66 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = _60;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _69 = _70;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _61;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = _72;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _67 = core::panicking::assert_failed::<i32, i32>(move _68, move _69, move _71, move _73); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb12: {
        _100 = const _;                  // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _79 = _100;                      // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
        _78 = _79;                       // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
        _77 = Cell::<&i32>::new(move _78) -> bb13; // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:21: 88:34
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:21: 88:30
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&i32) -> Cell<&i32> {Cell::<&i32>::new}, val: Value(<ZST>) }
    }

    bb13: {
        _76 = CellPtr::<'_, i32>(move _77); // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:13: 88:35
        _75 = move _76 as CellPtr<'_, dyn Trait> (Pointer(Unsize)); // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:13: 88:35
        _74 = move _75;                  // scope 7 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:13: 88:57
        _83 = move _74;                  // scope 10 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:16: 89:17
        _82 = <dyn Trait as Trait>::cell(move _83) -> bb14; // scope 10 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:16: 89:24
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:18: 89:22
                                         // + literal: Const { ty: for<'a> fn(CellPtr<'a, dyn Trait>) -> i32 {<dyn Trait as Trait>::cell}, val: Value(<ZST>) }
    }

    bb14: {
        _81 = &_82;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _99 = const _;                   // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _84 = _99;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _80 = (move _81, move _84);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _85 = (_80.0: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _86 = (_80.1: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _89 = (*_85);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _90 = const 8_i32;               // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _88 = Eq(move _89, move _90);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _87 = Not(move _88);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _87) -> [0: bb16, otherwise: bb15]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _91 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = _85;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _95;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _86;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = _97;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _92 = core::panicking::assert_failed::<i32, i32>(move _93, move _94, move _96, move _98); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb16: {
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:90:2: 90:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:26: 89:27

    bb0: {
        _1 = const 8_i32;                // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:89:26: 89:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
    let mut _1: i32;                     // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:32: 88:33

    bb0: {
        _1 = const 8_i32;                // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:32: 88:33
        _0 = &_1;                        // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:88:31: 88:33
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:43: 86:44

    bb0: {
        _1 = const 7_i32;                // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:86:43: 86:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:34: 83:35

    bb0: {
        _1 = const 6_i32;                // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:83:34: 83:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:34: 80:35

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:80:34: 80:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Ptr(_1: Box<T>) -> Ptr<T> {
    let mut _0: Ptr<T>;                  // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:11:1: 11:22

    bb0: {
        _0 = Ptr::<T>(move _1);          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:11:1: 11:22
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:11:1: 11:22
    }
}

// MIR FOR CTFE
fn Ptr(_1: Box<T>) -> Ptr<T> {
    let mut _0: Ptr<T>;                  // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:11:1: 11:22

    bb0: {
        _0 = Ptr::<T>(move _1);          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:11:1: 11:22
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:11:1: 11:22
    }
}

fn CellPtr(_1: Cell<&T>) -> CellPtr<'_, T> {
    let mut _0: CellPtr<'_, T>;          // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:25:1: 25:30

    bb0: {
        _0 = CellPtr::<'_, T>(move _1);  // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:25:1: 25:30
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:25:1: 25:30
    }
}

// MIR FOR CTFE
fn CellPtr(_1: Cell<&T>) -> CellPtr<'_, T> {
    let mut _0: CellPtr<'_, T>;          // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:25:1: 25:30

    bb0: {
        _0 = CellPtr::<'_, T>(move _1);  // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:25:1: 25:30
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:25:1: 25:30
    }
}

fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;              // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:38:1: 38:26

    bb0: {
        _0 = Wrapper::<T>(move _1);      // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:38:1: 38:26
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:38:1: 38:26
    }
}

// MIR FOR CTFE
fn Wrapper(_1: T) -> Wrapper<T> {
    let mut _0: Wrapper<T>;              // return place in scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:38:1: 38:26

    bb0: {
        _0 = Wrapper::<T>(move _1);      // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:38:1: 38:26
        return;                          // scope 0 at ui/self/arbitrary_self_types_pointers_and_wrappers.rs:38:1: 38:26
    }
}
