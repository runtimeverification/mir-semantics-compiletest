// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/self-in-mut-slot-immediate-value.rs:6:16: 6:21>::clone(_1: &Value) -> Value {
    debug self => _1;
    let mut _0: Value;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/self/self-in-mut-slot-immediate-value.rs:11:1: 11:11>::squared(_1: Value) -> Value {
    debug self => _1;
    let mut _0: Value;
    let mut _2: isize;

    bb0: {
        _2 = (_1.0: isize);
        (_1.0: isize) = Mul((_1.0: isize), move _2);
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Value;
    let mut _3: Value;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&isize, &isize);
    let mut _16: &isize;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: isize;
    let mut _22: isize;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: Value;
        scope 2 {
            debug y => _2;
            let _6: &isize;
            let _7: &isize;
            let _17: &isize;
            let _18: &isize;
            let mut _26: &isize;
            let mut _27: &isize;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
        }
    }

    bb0: {
        _1 = Value { n: const 3_isize };
        _3 = _1;
        _2 = Value::squared(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &(_1.0: isize);
        _27 = const _;
        _4 = (move _5, _27);
        _6 = (_4.0: &isize);
        _7 = (_4.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _16 = &(_2.0: isize);
        _26 = const _;
        _15 = (move _16, _26);
        _17 = (_15.0: &isize);
        _18 = (_15.1: &isize);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<isize, isize>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 9_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}
