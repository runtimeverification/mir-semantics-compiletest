// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_raw_pointer_struct.rs:8:1: 8:9>::foo(_1: *const Foo) -> *const str {
    debug self => _1;
    let mut _0: *const str;
    let _2: &str;
    let mut _3: &std::string::String;
    let mut _4: *const ();
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;

    bb0: {
        _4 = _1 as *const () (PtrToPtr);
        _5 = _4 as usize (Transmute);
        _6 = AlignOf(Foo);
        _7 = Sub(_6, const 1_usize);
        _8 = BitAnd(_5, _7);
        _9 = Eq(_8, const 0_usize);
        assert(_9, "misaligned pointer dereference: address must be a multiple of {} but is {}", _6, _5) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        _0 = &raw const (*_2);
        return;
    }

    bb2: {
        _3 = &((*_1).0: std::string::String);
        _2 = <String as AsRef<str>>::as_ref(move _3) -> [return: bb1, unwind continue];
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_struct.rs:8:1: 8:9>::complicated_1(_1: *const Rc<Foo>) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "Foo::complicated_1";
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_raw_pointer_struct.rs:8:1: 8:9>::complicated_2(_1: Rc<*const Foo>) -> *const str {
    debug self => _1;
    let mut _0: *const str;
    let _2: &str;
    let mut _3: &std::string::String;
    let _4: &*const Foo;
    let mut _5: &std::rc::Rc<*const Foo>;
    let mut _6: *const Foo;
    let mut _7: *const ();
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;

    bb0: {
        _5 = &_1;
        _4 = <Rc<*const Foo> as Deref>::deref(move _5) -> [return: bb1, unwind: bb4];
    }

    bb1: {
        _6 = deref_copy (*_4);
        _7 = _6 as *const () (PtrToPtr);
        _8 = _7 as usize (Transmute);
        _9 = AlignOf(Foo);
        _10 = Sub(_9, const 1_usize);
        _11 = BitAnd(_8, _10);
        _12 = Eq(_11, const 0_usize);
        assert(_12, "misaligned pointer dereference: address must be a multiple of {} but is {}", _9, _8) -> [success: bb6, unwind unreachable];
    }

    bb2: {
        _0 = &raw const (*_2);
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        _3 = &((*_6).0: std::string::String);
        _2 = <String as AsRef<str>>::as_ref(move _3) -> [return: bb2, unwind: bb4];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _2: std::string::String;
    let _3: &str;
    let mut _4: (&&str, &&str);
    let mut _5: &&str;
    let _6: &str;
    let _7: *const str;
    let mut _8: *const Foo;
    let _9: &Foo;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&str, &&str);
    let mut _18: &&str;
    let _19: &str;
    let mut _20: *const std::rc::Rc<Foo>;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: *const Foo;
    let _30: &Foo;
    let mut _31: (&&str, &&str);
    let mut _32: &&str;
    let _33: &str;
    let _34: *const str;
    let mut _35: std::rc::Rc<*const Foo>;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _10: &&str;
        let _11: &&str;
        let _21: &&str;
        let _22: &&str;
        let _28: std::rc::Rc<*const Foo>;
        let mut _44: &&str;
        let mut _45: &&str;
        scope 2 {
        }
        scope 3 {
            debug left_val => _10;
            debug right_val => _11;
            let _14: core::panicking::AssertKind;
            scope 4 {
                debug kind => _14;
            }
        }
        scope 5 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 6 {
                debug kind => _25;
            }
        }
        scope 7 {
            debug rc => _28;
            let _36: &&str;
            let _37: &&str;
            let mut _43: &&str;
            scope 8 {
            }
            scope 9 {
                debug left_val => _36;
                debug right_val => _37;
                let _40: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _40;
                }
            }
        }
    }

    bb0: {
        _3 = const "abc123";
        _2 = <&str as Into<String>>::into(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Foo(move _2);
        _45 = const _;
        _9 = &_1;
        _8 = &raw const (*_9);
        _7 = Foo::foo(move _8) -> [return: bb2, unwind: bb17];
    }

    bb2: {
        _6 = &(*_7);
        _5 = &_6;
        _4 = (_45, move _5);
        _10 = (_4.0: &&str);
        _11 = (_4.1: &&str);
        _13 = <&str as PartialEq>::eq(_10, _11) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&str, &str>(move _14, _10, _11, move _16) -> bb17;
    }

    bb5: {
        _44 = const _;
        _20 = null::<Rc<Foo>>() -> [return: bb6, unwind: bb17];
    }

    bb6: {
        _19 = Foo::complicated_1(move _20) -> [return: bb7, unwind: bb17];
    }

    bb7: {
        _18 = &_19;
        _17 = (_44, move _18);
        _21 = (_17.0: &&str);
        _22 = (_17.1: &&str);
        _24 = <&str as PartialEq>::eq(_21, _22) -> [return: bb8, unwind: bb17];
    }

    bb8: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&str, &str>(move _25, _21, _22, move _27) -> bb17;
    }

    bb10: {
        _30 = &_1;
        _29 = &raw const (*_30);
        _28 = Rc::<*const Foo>::new(move _29) -> [return: bb11, unwind: bb17];
    }

    bb11: {
        _43 = const _;
        _35 = move _28;
        _34 = Foo::complicated_2(move _35) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _33 = &(*_34);
        _32 = &_33;
        _31 = (_43, move _32);
        _36 = (_31.0: &&str);
        _37 = (_31.1: &&str);
        _39 = <&str as PartialEq>::eq(_36, _37) -> [return: bb13, unwind: bb17];
    }

    bb13: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<&str, &str>(move _40, _36, _37, move _42) -> bb17;
    }

    bb15: {
        drop(_1) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_1) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abc123";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Foo::complicated_1";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abc123";
        _0 = &_1;
        return;
    }
}

fn Foo(_1: String) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: String) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
