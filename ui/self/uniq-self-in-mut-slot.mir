// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/uniq-self-in-mut-slot.rs:11:1: 11:19>::change(_1: Box<X>) -> Box<X> {
    debug self => _1;                    // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:12:15: 12:23
    let mut _0: std::boxed::Box<X>;      // return place in scope 0 at ui/self/uniq-self-in-mut-slot.rs:12:36: 12:42
    let mut _2: *const X;                // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:12:15: 12:23

    bb0: {
        _2 = (((_1.0: std::ptr::Unique<X>).0: std::ptr::NonNull<X>).0: *const X); // scope 0 at ui/self/uniq-self-in-mut-slot.rs:13:9: 13:20
        ((*_2).0: isize) = const 55_isize; // scope 0 at ui/self/uniq-self-in-mut-slot.rs:13:9: 13:20
        _0 = move _1;                    // scope 0 at ui/self/uniq-self-in-mut-slot.rs:14:9: 14:13
        return;                          // scope 0 at ui/self/uniq-self-in-mut-slot.rs:15:6: 15:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/uniq-self-in-mut-slot.rs:18:15: 18:15
    let _1: std::boxed::Box<X>;          // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:19:9: 19:10
    let mut _2: X;                       // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:19:30: 19:41
    let mut _4: std::boxed::Box<X>;      // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:20:17: 20:18
    let mut _5: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: *const X;               // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:20:9: 20:14
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/self/uniq-self-in-mut-slot.rs:19:9: 19:10
        let _3: std::boxed::Box<X>;      // in scope 1 at ui/self/uniq-self-in-mut-slot.rs:20:9: 20:14
        scope 2 {
            debug new_x => _3;           // in scope 2 at ui/self/uniq-self-in-mut-slot.rs:20:9: 20:14
            let _8: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _22: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const X {{ a: 32_isize }};  // scope 0 at ui/self/uniq-self-in-mut-slot.rs:19:30: 19:41
                                         // mir::Constant
                                         // + span: ui/self/uniq-self-in-mut-slot.rs:19:30: 19:41
                                         // + literal: Const { ty: X, val: Value(Scalar(0x0000000000000020)) }
        _1 = Box::<X>::new(move _2) -> bb1; // scope 0 at ui/self/uniq-self-in-mut-slot.rs:19:21: 19:42
                                         // mir::Constant
                                         // + span: ui/self/uniq-self-in-mut-slot.rs:19:21: 19:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(X) -> Box<X> {Box::<X>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _1;                    // scope 1 at ui/self/uniq-self-in-mut-slot.rs:20:17: 20:18
        _3 = <X as Changer>::change(move _4) -> bb2; // scope 1 at ui/self/uniq-self-in-mut-slot.rs:20:17: 20:27
                                         // mir::Constant
                                         // + span: ui/self/uniq-self-in-mut-slot.rs:20:19: 20:25
                                         // + literal: Const { ty: fn(Box<X>) -> Box<X> {<X as Changer>::change}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = (((_3.0: std::ptr::Unique<X>).0: std::ptr::NonNull<X>).0: *const X); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _6 = &((*_23).0: isize);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _22;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 55_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<isize, isize>(move _16, move _17, move _19, move _21) -> bb6; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_3) -> bb5;                 // scope 1 at ui/self/uniq-self-in-mut-slot.rs:22:1: 22:2
    }

    bb5: {
        return;                          // scope 0 at ui/self/uniq-self-in-mut-slot.rs:22:2: 22:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 1 at ui/self/uniq-self-in-mut-slot.rs:22:1: 22:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/self/uniq-self-in-mut-slot.rs:18:1: 22:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/uniq-self-in-mut-slot.rs:21:25: 21:27

    bb0: {
        _1 = const 55_isize;             // scope 0 at ui/self/uniq-self-in-mut-slot.rs:21:25: 21:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
