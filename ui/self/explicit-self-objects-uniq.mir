// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/explicit-self-objects-uniq.rs:11:1: 11:15>::f(_1: Box<S>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: &isize;
    let _5: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &isize;
    let mut _14: *const S;
    let mut _15: *const ();
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: bool;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _14 = (((_1.0: std::ptr::Unique<S>).0: std::ptr::NonNull<S>).0: *const S);
        _15 = _14 as *const () (PtrToPtr);
        _16 = _15 as usize (Transmute);
        _17 = AlignOf(S);
        _18 = Sub(_17, const 1_usize);
        _19 = BitAnd(_16, _18);
        _20 = Eq(_19, const 0_usize);
        assert(_20, "misaligned pointer dereference: address must be a multiple of {} but is {}", _17, _16) -> [success: bb6, unwind unreachable];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> bb4;
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        _3 = &((*_14).0: isize);
        _13 = const _;
        _2 = (move _3, _13);
        _4 = (_2.0: &isize);
        _5 = (_2.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }
}

promoted[0] in <impl at ui/self/explicit-self-objects-uniq.rs:11:1: 11:15>::f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<S>;
    let mut _2: S;
    let mut _3: std::boxed::Box<dyn Foo>;
    let mut _4: std::boxed::Box<S>;
    let _5: ();
    scope 1 {
        debug x => _1;
        scope 2 {
            debug y => _3;
        }
    }

    bb0: {
        _2 = S { x: const 3_isize };
        _1 = Box::<S>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _1;
        _3 = move _4 as std::boxed::Box<dyn Foo> (Pointer(Unsize));
        _5 = <dyn Foo as Foo>::f(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
