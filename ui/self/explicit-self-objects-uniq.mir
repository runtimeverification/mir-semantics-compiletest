// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/explicit-self-objects-uniq.rs:11:1: 11:15>::f(_1: Box<S>) -> () {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self-objects-uniq.rs:12:10: 12:14
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self-objects-uniq.rs:12:24: 12:24
    let mut _2: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _20: *const S;               // in scope 0 at ui/self/explicit-self-objects-uniq.rs:12:10: 12:14
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _20 = (((_1.0: std::ptr::Unique<S>).0: std::ptr::NonNull<S>).0: *const S); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _3 = &((*_20).0: isize);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(<S as Foo>::f, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 3_isize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<isize, isize>(move _13, move _14, move _16, move _18) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/self/explicit-self-objects-uniq.rs:14:5: 14:6
    }

    bb3: {
        return;                          // scope 0 at ui/self/explicit-self-objects-uniq.rs:14:6: 14:6
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/self/explicit-self-objects-uniq.rs:14:5: 14:6
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/self/explicit-self-objects-uniq.rs:12:5: 14:6
    }
}

promoted[0] in <impl at ui/self/explicit-self-objects-uniq.rs:11:1: 11:15>::f: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/self/explicit-self-objects-uniq.rs:13:28: 13:29

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/self/explicit-self-objects-uniq.rs:13:28: 13:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self-objects-uniq.rs:17:15: 17:15
    let _1: std::boxed::Box<S>;          // in scope 0 at ui/self/explicit-self-objects-uniq.rs:18:9: 18:10
    let mut _2: S;                       // in scope 0 at ui/self/explicit-self-objects-uniq.rs:18:22: 18:32
    let mut _4: std::boxed::Box<dyn Foo>; // in scope 0 at ui/self/explicit-self-objects-uniq.rs:19:13: 19:30
    let mut _5: std::boxed::Box<S>;      // in scope 0 at ui/self/explicit-self-objects-uniq.rs:19:13: 19:14
    let _6: ();                          // in scope 0 at ui/self/explicit-self-objects-uniq.rs:20:5: 20:10
    let mut _7: std::boxed::Box<dyn Foo>; // in scope 0 at ui/self/explicit-self-objects-uniq.rs:20:5: 20:6
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/self/explicit-self-objects-uniq.rs:18:9: 18:10
        let _3: std::boxed::Box<dyn Foo>; // in scope 1 at ui/self/explicit-self-objects-uniq.rs:19:9: 19:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/self/explicit-self-objects-uniq.rs:19:9: 19:10
        }
    }

    bb0: {
        _2 = const S {{ x: 3_isize }};   // scope 0 at ui/self/explicit-self-objects-uniq.rs:18:22: 18:32
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-objects-uniq.rs:18:22: 18:32
                                         // + literal: Const { ty: S, val: Value(Scalar(0x0000000000000003)) }
        _1 = Box::<S>::new(move _2) -> bb1; // scope 0 at ui/self/explicit-self-objects-uniq.rs:18:13: 18:33
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-objects-uniq.rs:18:13: 18:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(S) -> Box<S> {Box::<S>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _1;                    // scope 1 at ui/self/explicit-self-objects-uniq.rs:19:13: 19:14
        _4 = move _5 as std::boxed::Box<dyn Foo> (Pointer(Unsize)); // scope 1 at ui/self/explicit-self-objects-uniq.rs:19:13: 19:14
        _3 = move _4;                    // scope 1 at ui/self/explicit-self-objects-uniq.rs:19:13: 19:30
        _7 = move _3;                    // scope 2 at ui/self/explicit-self-objects-uniq.rs:20:5: 20:6
        _6 = <dyn Foo as Foo>::f(move _7) -> bb2; // scope 2 at ui/self/explicit-self-objects-uniq.rs:20:5: 20:10
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-objects-uniq.rs:20:7: 20:8
                                         // + literal: Const { ty: fn(Box<dyn Foo>) {<dyn Foo as Foo>::f}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/self/explicit-self-objects-uniq.rs:21:2: 21:2
    }
}
