// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/elision/ref-assoc.rs:17:1: 17:12>::ref_AssocType(_1: &Struct, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/ref-assoc.rs:18:22: 18:26
    debug f => _2;                       // in scope 0 at ui/self/elision/ref-assoc.rs:18:59: 18:60
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/ref-assoc.rs:18:71: 18:75

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/ref-assoc.rs:19:9: 19:10
        return;                          // scope 0 at ui/self/elision/ref-assoc.rs:20:6: 20:6
    }
}

fn <impl at ui/self/elision/ref-assoc.rs:17:1: 17:12>::box_ref_AssocType(_1: Box<&Struct>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/ref-assoc.rs:22:26: 22:30
    debug f => _2;                       // in scope 0 at ui/self/elision/ref-assoc.rs:22:68: 22:69
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/ref-assoc.rs:22:80: 22:84

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/ref-assoc.rs:23:9: 23:10
        drop(_1) -> bb1;                 // scope 0 at ui/self/elision/ref-assoc.rs:24:5: 24:6
    }

    bb1: {
        return;                          // scope 0 at ui/self/elision/ref-assoc.rs:24:6: 24:6
    }
}

fn <impl at ui/self/elision/ref-assoc.rs:17:1: 17:12>::pin_ref_AssocType(_1: Pin<&Struct>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/ref-assoc.rs:26:26: 26:30
    debug f => _2;                       // in scope 0 at ui/self/elision/ref-assoc.rs:26:68: 26:69
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/ref-assoc.rs:26:80: 26:84

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/ref-assoc.rs:27:9: 27:10
        return;                          // scope 0 at ui/self/elision/ref-assoc.rs:28:6: 28:6
    }
}

fn <impl at ui/self/elision/ref-assoc.rs:17:1: 17:12>::box_box_ref_AssocType(_1: Box<Box<&Struct>>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/ref-assoc.rs:30:30: 30:34
    debug f => _2;                       // in scope 0 at ui/self/elision/ref-assoc.rs:30:77: 30:78
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/ref-assoc.rs:30:89: 30:93

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/ref-assoc.rs:31:9: 31:10
        drop(_1) -> bb1;                 // scope 0 at ui/self/elision/ref-assoc.rs:32:5: 32:6
    }

    bb1: {
        return;                          // scope 0 at ui/self/elision/ref-assoc.rs:32:6: 32:6
    }
}

fn <impl at ui/self/elision/ref-assoc.rs:17:1: 17:12>::box_pin_ref_AssocType(_1: Box<Pin<&Struct>>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/ref-assoc.rs:34:30: 34:34
    debug f => _2;                       // in scope 0 at ui/self/elision/ref-assoc.rs:34:77: 34:78
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/ref-assoc.rs:34:89: 34:93

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/ref-assoc.rs:35:9: 35:10
        drop(_1) -> bb1;                 // scope 0 at ui/self/elision/ref-assoc.rs:36:5: 36:6
    }

    bb1: {
        return;                          // scope 0 at ui/self/elision/ref-assoc.rs:36:6: 36:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/elision/ref-assoc.rs:39:11: 39:11

    bb0: {
        return;                          // scope 0 at ui/self/elision/ref-assoc.rs:39:14: 39:14
    }
}
