// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/elision/multiple-ref-self.rs:14:1: 14:32>::deref(_1: &Wrap<T, P>) -> &T {
    debug self => _1;                    // in scope 0 at ui/self/elision/multiple-ref-self.rs:16:14: 16:19
    let mut _0: &T;                      // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:16:29: 16:36

    bb0: {
        _0 = &((*_1).0: T);              // scope 0 at ui/self/elision/multiple-ref-self.rs:16:29: 16:36
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:16:38: 16:38
    }
}

fn <impl at ui/self/elision/multiple-ref-self.rs:19:1: 19:12>::wrap_ref_Self_ref_Self(_1: Wrap<&Struct, &Struct>, _2: &u8) -> &u8 {
    debug self => _1;                    // in scope 0 at ui/self/elision/multiple-ref-self.rs:22:31: 22:35
    debug f => _2;                       // in scope 0 at ui/self/elision/multiple-ref-self.rs:22:57: 22:58
    let mut _0: &u8;                     // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:22:68: 22:71

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/multiple-ref-self.rs:23:9: 23:10
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:24:6: 24:6
    }
}

fn <impl at ui/self/elision/multiple-ref-self.rs:19:1: 19:12>::box_wrap_ref_Self_ref_Self(_1: Box<Wrap<&Struct, &Struct>>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/multiple-ref-self.rs:26:35: 26:39
    debug f => _2;                       // in scope 0 at ui/self/elision/multiple-ref-self.rs:26:66: 26:67
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:26:78: 26:82

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/multiple-ref-self.rs:27:9: 27:10
        drop(_1) -> bb1;                 // scope 0 at ui/self/elision/multiple-ref-self.rs:28:5: 28:6
    }

    bb1: {
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:28:6: 28:6
    }
}

fn <impl at ui/self/elision/multiple-ref-self.rs:19:1: 19:12>::pin_wrap_ref_Self_ref_Self(_1: Pin<Wrap<&Struct, &Struct>>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/multiple-ref-self.rs:30:35: 30:39
    debug f => _2;                       // in scope 0 at ui/self/elision/multiple-ref-self.rs:30:66: 30:67
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:30:78: 30:82

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/multiple-ref-self.rs:31:9: 31:10
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:32:6: 32:6
    }
}

fn <impl at ui/self/elision/multiple-ref-self.rs:19:1: 19:12>::box_box_wrap_ref_Self_ref_Self(_1: Box<Box<Wrap<&Struct, &Struct>>>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/multiple-ref-self.rs:34:39: 34:43
    debug f => _2;                       // in scope 0 at ui/self/elision/multiple-ref-self.rs:34:75: 34:76
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:34:87: 34:91

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/multiple-ref-self.rs:35:9: 35:10
        drop(_1) -> bb1;                 // scope 0 at ui/self/elision/multiple-ref-self.rs:36:5: 36:6
    }

    bb1: {
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:36:6: 36:6
    }
}

fn <impl at ui/self/elision/multiple-ref-self.rs:19:1: 19:12>::box_pin_wrap_ref_Self_ref_Self(_1: Box<Pin<Wrap<&Struct, &Struct>>>, _2: &u32) -> &u32 {
    debug self => _1;                    // in scope 0 at ui/self/elision/multiple-ref-self.rs:38:39: 38:43
    debug f => _2;                       // in scope 0 at ui/self/elision/multiple-ref-self.rs:38:75: 38:76
    let mut _0: &u32;                    // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:38:87: 38:91

    bb0: {
        _0 = _2;                         // scope 0 at ui/self/elision/multiple-ref-self.rs:39:9: 39:10
        drop(_1) -> bb1;                 // scope 0 at ui/self/elision/multiple-ref-self.rs:40:5: 40:6
    }

    bb1: {
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:40:6: 40:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:43:11: 43:11

    bb0: {
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:43:14: 43:14
    }
}

fn Wrap(_1: T, _2: PhantomData<P>) -> Wrap<T, P> {
    let mut _0: Wrap<T, P>;              // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:12:1: 12:18

    bb0: {
        _0 = Wrap::<T, P>(move _1, move _2); // scope 0 at ui/self/elision/multiple-ref-self.rs:12:1: 12:18
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:12:1: 12:18
    }
}

// MIR FOR CTFE
fn Wrap(_1: T, _2: PhantomData<P>) -> Wrap<T, P> {
    let mut _0: Wrap<T, P>;              // return place in scope 0 at ui/self/elision/multiple-ref-self.rs:12:1: 12:18

    bb0: {
        _0 = Wrap::<T, P>(move _1, move _2); // scope 0 at ui/self/elision/multiple-ref-self.rs:12:1: 12:18
        return;                          // scope 0 at ui/self/elision/multiple-ref-self.rs:12:1: 12:18
    }
}
