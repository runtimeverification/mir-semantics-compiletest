// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_struct.rs:10:1: 10:9>::x(_1: &Rc<Foo>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: &Foo;

    bb0: {
        _2 = <Rc<Foo> as Deref>::deref(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = ((*_2).0: i32);
        return;
    }
}

fn <impl at ui/self/arbitrary_self_types_struct.rs:10:1: 10:9>::y(_1: Rc<Foo>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: &Foo;
    let mut _3: &std::rc::Rc<Foo>;

    bb0: {
        _3 = &_1;
        _2 = <Rc<Foo> as Deref>::deref(move _3) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        _0 = ((*_2).1: i32);
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<Foo>;
    let mut _2: Foo;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let _5: i32;
    let mut _6: &std::rc::Rc<Foo>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: std::rc::Rc<Foo>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: i32;
    let mut _25: i32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: bool;
    scope 1 {
        debug foo => _1;
        let _7: &i32;
        let _8: &i32;
        let _20: &i32;
        let _21: &i32;
        let mut _29: &i32;
        let mut _30: &i32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
    }

    bb0: {
        _31 = const false;
        _2 = Foo { x: const 3_i32, y: const 4_i32 };
        _31 = const true;
        _1 = Rc::<Foo>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _30 = const _;
        _6 = &_1;
        _5 = Foo::x(move _6) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _4 = &_5;
        _3 = (_30, move _4);
        _7 = (_3.0: &i32);
        _8 = (_3.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> bb10;
    }

    bb4: {
        _29 = const _;
        _31 = const false;
        _19 = move _1;
        _18 = Foo::y(move _19) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _17 = &_18;
        _16 = (_29, move _17);
        _20 = (_16.0: &i32);
        _21 = (_16.1: &i32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<i32, i32>(move _26, _20, _21, move _28) -> bb10;
    }

    bb7: {
        _31 = const false;
        return;
    }

    bb8 (cleanup): {
        resume;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_31) -> [0: bb8, otherwise: bb9];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
