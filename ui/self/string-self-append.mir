// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::string::String;
    let _2: &str;
    let mut _5: bool;
    let mut _6: i32;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: usize;
    let mut _16: &std::string::String;
    let mut _17: (&usize, &usize);
    let mut _18: &usize;
    let _19: usize;
    let mut _20: &std::string::String;
    let mut _21: &usize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: std::string::String;
    let mut _33: std::fmt::Arguments<'_>;
    let mut _34: &[&str];
    let mut _35: &[core::fmt::rt::Argument<'_>];
    let _36: &[core::fmt::rt::Argument<'_>; 2];
    let _37: [core::fmt::rt::Argument<'_>; 2];
    let mut _38: core::fmt::rt::Argument<'_>;
    let _39: &std::string::String;
    let mut _40: core::fmt::rt::Argument<'_>;
    let _41: &std::string::String;
    scope 1 {
        debug a => _1;
        let mut _3: i32;
        scope 2 {
            debug i => _3;
            let mut _4: usize;
            scope 3 {
                debug expected_len => _4;
                let _22: &usize;
                let _23: &usize;
                let _32: std::string::String;
                let mut _42: &[&str; 2];
                let mut _43: &[&str; 2];
                scope 4 {
                    debug left_val => _22;
                    debug right_val => _23;
                    let _28: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _28;
                    }
                }
                scope 6 {
                    debug res => _32;
                }
            }
        }
    }

    bb0: {
        _2 = const "A";
        _1 = <str as ToString>::to_string(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = const 20_i32;
        _4 = const 1_usize;
        goto -> bb2;
    }

    bb2: {
        _6 = _3;
        _5 = Gt(move _6, const 0_i32);
        switchInt(move _5) -> [0: bb17, otherwise: bb3];
    }

    bb3: {
        _43 = const _;
        _9 = _43 as &[&str] (Pointer(Unsize));
        _16 = &_1;
        _15 = String::len(move _16) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb5, unwind: bb19];
    }

    bb5: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _7 = _print(move _8) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _20 = &_1;
        _19 = String::len(move _20) -> [return: bb8, unwind: bb19];
    }

    bb8: {
        _18 = &_19;
        _21 = &_4;
        _17 = (move _18, move _21);
        _22 = (_17.0: &usize);
        _23 = (_17.1: &usize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<usize, usize>(move _28, _22, _23, move _30) -> bb19;
    }

    bb10: {
        _42 = const _;
        _34 = _42 as &[&str] (Pointer(Unsize));
        _39 = &_1;
        _38 = core::fmt::rt::Argument::<'_>::new_display::<String>(_39) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _41 = &_1;
        _40 = core::fmt::rt::Argument::<'_>::new_display::<String>(_41) -> [return: bb12, unwind: bb19];
    }

    bb12: {
        _37 = [move _38, move _40];
        _36 = &_37;
        _35 = _36 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _33 = Arguments::<'_>::new_v1(move _34, move _35) -> [return: bb13, unwind: bb19];
    }

    bb13: {
        _32 = format(move _33) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _31 = move _32;
        drop(_1) -> [return: bb15, unwind: bb16];
    }

    bb15: {
        _1 = move _31;
        _3 = Sub(_3, const 1_i32);
        _4 = Mul(_4, const 2_usize);
        goto -> bb2;
    }

    bb16 (cleanup): {
        _1 = move _31;
        goto -> bb19;
    }

    bb17: {
        drop(_1) -> [return: bb18, unwind continue];
    }

    bb18: {
        return;
    }

    bb19 (cleanup): {
        drop(_1) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
