// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/string-self-append.rs:2:15: 2:15
    let mut _1: std::string::String;     // in scope 0 at ui/self/string-self-append.rs:4:9: 4:14
    let mut _2: &str;                    // in scope 0 at ui/self/string-self-append.rs:4:25: 4:40
    let _3: &str;                        // in scope 0 at ui/self/string-self-append.rs:4:25: 4:28
    let mut _6: bool;                    // in scope 0 at ui/self/string-self-append.rs:7:11: 7:16
    let mut _7: i32;                     // in scope 0 at ui/self/string-self-append.rs:7:11: 7:12
    let _8: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str];                // in scope 0 at ui/self/string-self-append.rs:8:18: 8:22
    let mut _11: &[&str; 2];             // in scope 0 at ui/self/string-self-append.rs:8:18: 8:22
    let _12: &[&str; 2];                 // in scope 0 at ui/self/string-self-append.rs:8:18: 8:22
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/self/string-self-append.rs:8:24: 8:31
    let mut _18: &usize;                 // in scope 0 at ui/self/string-self-append.rs:8:24: 8:31
    let _19: &usize;                     // in scope 0 at ui/self/string-self-append.rs:8:24: 8:31
    let _20: usize;                      // in scope 0 at ui/self/string-self-append.rs:8:24: 8:31
    let mut _21: &std::string::String;   // in scope 0 at ui/self/string-self-append.rs:8:24: 8:31
    let mut _22: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: usize;                      // in scope 0 at ui/self/string-self-append.rs:9:20: 9:27
    let mut _25: &std::string::String;   // in scope 0 at ui/self/string-self-append.rs:9:20: 9:27
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _43: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _44: &[&str];                // in scope 0 at ui/self/string-self-append.rs:10:21: 10:27
    let mut _45: &[&str; 2];             // in scope 0 at ui/self/string-self-append.rs:10:21: 10:27
    let _46: &[&str; 2];                 // in scope 0 at ui/self/string-self-append.rs:10:21: 10:27
    let mut _47: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _48: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _49: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _50: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _51: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/self/string-self-append.rs:10:29: 10:30
    let mut _52: &std::string::String;   // in scope 0 at ui/self/string-self-append.rs:10:29: 10:30
    let _53: &std::string::String;       // in scope 0 at ui/self/string-self-append.rs:10:29: 10:30
    let mut _54: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/self/string-self-append.rs:10:32: 10:33
    let mut _55: &std::string::String;   // in scope 0 at ui/self/string-self-append.rs:10:32: 10:33
    let _56: &std::string::String;       // in scope 0 at ui/self/string-self-append.rs:10:32: 10:33
    let mut _57: (i32, bool);            // in scope 0 at ui/self/string-self-append.rs:11:9: 11:15
    let mut _58: (usize, bool);          // in scope 0 at ui/self/string-self-append.rs:12:9: 12:26
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/self/string-self-append.rs:4:9: 4:14
        let mut _4: i32;                 // in scope 1 at ui/self/string-self-append.rs:5:9: 5:14
        scope 2 {
            debug i => _4;               // in scope 2 at ui/self/string-self-append.rs:5:9: 5:14
            let mut _5: usize;           // in scope 2 at ui/self/string-self-append.rs:6:9: 6:25
            scope 3 {
                debug expected_len => _5; // in scope 3 at ui/self/string-self-append.rs:6:9: 6:25
                let _27: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _28: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _42: std::string::String; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                let mut _59: &[&str; 2]; // in scope 3 at ui/self/string-self-append.rs:10:21: 10:27
                let mut _60: &[&str; 2]; // in scope 3 at ui/self/string-self-append.rs:8:18: 8:22
                scope 4 {
                    debug left_val => _27; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _28; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _33: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _33; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug res => _42;    // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                }
            }
        }
    }

    bb0: {
        _3 = const "A";                  // scope 0 at ui/self/string-self-append.rs:4:25: 4:28
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:4:25: 4:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/self/string-self-append.rs:4:25: 4:40
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/self/string-self-append.rs:4:25: 4:40
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:4:29: 4:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const 20_i32;               // scope 1 at ui/self/string-self-append.rs:5:17: 5:19
        _5 = const 1_usize;              // scope 2 at ui/self/string-self-append.rs:6:28: 6:29
        goto -> bb2;                     // scope 3 at ui/self/string-self-append.rs:7:5: 13:6
    }

    bb2: {
        _7 = _4;                         // scope 3 at ui/self/string-self-append.rs:7:11: 7:12
        _6 = Gt(move _7, const 0_i32);   // scope 3 at ui/self/string-self-append.rs:7:11: 7:16
        switchInt(move _6) -> [0: bb17, otherwise: bb3]; // scope 3 at ui/self/string-self-append.rs:7:11: 7:16
    }

    bb3: {
        _60 = const _;                   // scope 3 at ui/self/string-self-append.rs:8:18: 8:22
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:8:18: 8:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _12 = _60;                       // scope 3 at ui/self/string-self-append.rs:8:18: 8:22
        _11 = _12;                       // scope 3 at ui/self/string-self-append.rs:8:18: 8:22
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 3 at ui/self/string-self-append.rs:8:18: 8:22
        _21 = &_1;                       // scope 3 at ui/self/string-self-append.rs:8:24: 8:31
        _20 = String::len(move _21) -> [return: bb4, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:8:24: 8:31
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:8:26: 8:29
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> usize {String::len}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = &_20;                      // scope 3 at ui/self/string-self-append.rs:8:24: 8:31
        _18 = _19;                       // scope 3 at ui/self/string-self-append.rs:8:24: 8:31
        _17 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _18) -> [return: bb5, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:8:24: 8:31
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:8:24: 8:31
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = [move _17];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = &_16;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> [return: bb6, unwind: bb19]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = _print(move _9) -> [return: bb7, unwind: bb19]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _25 = &_1;                       // scope 3 at ui/self/string-self-append.rs:9:20: 9:27
        _24 = String::len(move _25) -> [return: bb8, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:9:20: 9:27
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:9:22: 9:25
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> usize {String::len}, val: Value(<ZST>) }
    }

    bb8: {
        _23 = &_24;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = &_5;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _26);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_22.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_22.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = (*_27);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = (*_28);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = Eq(move _31, move _32);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _29 = Not(move _30);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<usize, usize>(move _35, move _36, move _38, move _40) -> bb19; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _59 = const _;                   // scope 3 at ui/self/string-self-append.rs:10:21: 10:27
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:10:21: 10:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _46 = _59;                       // scope 3 at ui/self/string-self-append.rs:10:21: 10:27
        _45 = _46;                       // scope 3 at ui/self/string-self-append.rs:10:21: 10:27
        _44 = move _45 as &[&str] (Pointer(Unsize)); // scope 3 at ui/self/string-self-append.rs:10:21: 10:27
        _53 = &_1;                       // scope 3 at ui/self/string-self-append.rs:10:29: 10:30
        _52 = _53;                       // scope 3 at ui/self/string-self-append.rs:10:29: 10:30
        _51 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _52) -> [return: bb11, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:10:29: 10:30
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:10:29: 10:30
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb11: {
        _56 = &_1;                       // scope 3 at ui/self/string-self-append.rs:10:32: 10:33
        _55 = _56;                       // scope 3 at ui/self/string-self-append.rs:10:32: 10:33
        _54 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _55) -> [return: bb12, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:10:32: 10:33
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:10:32: 10:33
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb12: {
        _50 = [move _51, move _54];      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _49 = &_50;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _48 = _49;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _47 = move _48 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _43 = Arguments::<'_>::new_v1(move _44, move _47) -> [return: bb13, unwind: bb19]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _42 = format(move _43) -> [return: bb14, unwind: bb19]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb14: {
        _41 = move _42;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        drop(_1) -> [return: bb22, unwind: bb21]; // scope 3 at ui/self/string-self-append.rs:10:9: 10:10
    }

    bb15: {
        _4 = move (_57.0: i32);          // scope 3 at ui/self/string-self-append.rs:11:9: 11:15
        _58 = CheckedMul(_5, const 2_usize); // scope 3 at ui/self/string-self-append.rs:12:9: 12:26
        assert(!move (_58.1: bool), "attempt to compute `{} * {}`, which would overflow", _5, const 2_usize) -> [success: bb16, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:12:9: 12:26
    }

    bb16: {
        _5 = move (_58.0: usize);        // scope 3 at ui/self/string-self-append.rs:12:9: 12:26
        goto -> bb2;                     // scope 3 at ui/self/string-self-append.rs:7:5: 13:6
    }

    bb17: {
        drop(_1) -> bb18;                // scope 0 at ui/self/string-self-append.rs:14:1: 14:2
    }

    bb18: {
        return;                          // scope 0 at ui/self/string-self-append.rs:14:2: 14:2
    }

    bb19 (cleanup): {
        drop(_1) -> bb20;                // scope 0 at ui/self/string-self-append.rs:14:1: 14:2
    }

    bb20 (cleanup): {
        resume;                          // scope 0 at ui/self/string-self-append.rs:2:1: 14:2
    }

    bb21 (cleanup): {
        _1 = move _41;                   // scope 3 at ui/self/string-self-append.rs:10:9: 10:10
        goto -> bb19;                    // scope 3 at ui/self/string-self-append.rs:10:9: 10:10
    }

    bb22: {
        _1 = move _41;                   // scope 3 at ui/self/string-self-append.rs:10:9: 10:10
        _57 = CheckedSub(_4, const 1_i32); // scope 3 at ui/self/string-self-append.rs:11:9: 11:15
        assert(!move (_57.1: bool), "attempt to compute `{} - {}`, which would overflow", _4, const 1_i32) -> [success: bb15, unwind: bb19]; // scope 3 at ui/self/string-self-append.rs:11:9: 11:15
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/self/string-self-append.rs:10:21: 10:27
    let mut _1: [&str; 2];               // in scope 0 at ui/self/string-self-append.rs:10:21: 10:27

    bb0: {
        _1 = [const "", const ""];       // scope 0 at ui/self/string-self-append.rs:10:21: 10:27
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:10:21: 10:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:10:21: 10:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/self/string-self-append.rs:10:21: 10:27
        return;                          // scope 0 at ui/self/string-self-append.rs:10:21: 10:27
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/self/string-self-append.rs:8:18: 8:22
    let mut _1: [&str; 2];               // in scope 0 at ui/self/string-self-append.rs:8:18: 8:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/self/string-self-append.rs:8:18: 8:22
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:8:18: 8:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/self/string-self-append.rs:8:18: 8:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/self/string-self-append.rs:8:18: 8:22
        return;                          // scope 0 at ui/self/string-self-append.rs:8:18: 8:22
    }
}
