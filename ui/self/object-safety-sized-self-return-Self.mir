// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/object-safety-sized-self-return-Self.rs:15:1: 15:26>::new() -> CCounter {
    let mut _0: CCounter;

    bb0: {
        _0 = CCounter { c: const 0_u32 };
        return;
    }
}

fn <impl at ui/self/object-safety-sized-self-return-Self.rs:15:1: 15:26>::tick(_1: &mut CCounter) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        ((*_1).0: u32) = Add(((*_1).0: u32), const 1_u32);
        _0 = ((*_1).0: u32);
        return;
    }
}

fn preticked() -> C {
    let mut _0: C;
    let mut _1: C;
    let _2: ();
    let mut _3: &mut dyn Counter;
    let mut _4: &mut C;
    scope 1 {
        debug c => _1;
    }

    bb0: {
        _1 = <C as Counter>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = _4 as &mut dyn Counter (Pointer(Unsize));
        _2 = tick(move _3) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = move _1;
        return;
    }

    bb3 (cleanup): {
        drop(_1) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn tick(_1: &mut dyn Counter) -> () {
    debug c => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = tick_generic::<dyn Counter>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn tick_generic(_1: &mut C) -> () {
    debug c => _1;
    let mut _0: ();
    let _2: u32;
    let _3: u32;

    bb0: {
        _2 = <C as Counter>::tick(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <C as Counter>::tick(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: CCounter;
    let _2: ();
    let mut _3: &mut dyn Counter;
    let mut _4: &mut CCounter;
    let mut _5: (&u32, &u32);
    let mut _6: &u32;
    let _7: u32;
    let mut _8: &mut CCounter;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug c => _1;
        let _9: &u32;
        let _10: &u32;
        let mut _18: &u32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
    }

    bb0: {
        _1 = preticked::<CCounter>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = _4 as &mut dyn Counter (Pointer(Unsize));
        _2 = tick(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = &mut _1;
        _7 = <CCounter as Counter>::tick(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = &_7;
        _18 = const _;
        _5 = (move _6, _18);
        _9 = (_5.0: &u32);
        _10 = (_5.1: &u32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u32, u32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 5_u32;
        _0 = &_1;
        return;
    }
}
