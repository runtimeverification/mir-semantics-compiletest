// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/ufcs-explicit-self.rs:4:16: 4:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;
    let mut _0: Foo;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:9:1: 9:9>::foo(_1: Foo, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;
    let mut _3: isize;

    bb0: {
        _3 = (_1.0: isize);
        _0 = Add(move _3, _2);
        return;
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:9:1: 9:9>::bar(_1: &Foo, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;
    let mut _3: isize;

    bb0: {
        _3 = ((*_1).0: isize);
        _0 = Add(move _3, _2);
        return;
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:9:1: 9:9>::baz(_1: Box<Foo>, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;
    let mut _3: isize;
    let mut _4: *const Foo;
    let mut _5: *const ();
    let mut _6: usize;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: usize;
    let mut _10: bool;

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _5 = _4 as *const () (PtrToPtr);
        _6 = _5 as usize (Transmute);
        _7 = AlignOf(Foo);
        _8 = Sub(_7, const 1_usize);
        _9 = BitAnd(_6, _8);
        _10 = Eq(_9, const 0_usize);
        assert(_10, "misaligned pointer dereference: address must be a multiple of {} but is {}", _7, _6) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        _3 = ((*_4).0: isize);
        _0 = Add(move _3, _2);
        drop(_1) -> [return: bb1, unwind continue];
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:21:16: 21:21>::clone(_1: &Bar<T>) -> Bar<T> {
    debug self => _1;
    let mut _0: Bar<T>;
    let mut _2: T;
    let _3: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Bar::<T> { f: move _2 };
        return;
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:26:1: 26:15>::foo(_1: Bar<T>, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:26:1: 26:15>::bar(_1: &Bar<T>, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        return;
    }
}

fn <impl at ui/self/ufcs-explicit-self.rs:26:1: 26:15>::baz(_1: Bar<T>, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;

    bb0: {
        _0 = _2;
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Foo>;
    let mut _2: Foo;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 3];
    let _8: [core::fmt::rt::Argument<'_>; 3];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &isize;
    let _11: isize;
    let mut _12: Foo;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &isize;
    let _15: isize;
    let mut _16: &Foo;
    let mut _17: core::fmt::rt::Argument<'_>;
    let _18: &isize;
    let _19: isize;
    let mut _20: std::boxed::Box<Foo>;
    let mut _22: Bar<isize>;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 3];
    let _28: [core::fmt::rt::Argument<'_>; 3];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &isize;
    let _31: isize;
    let mut _32: Bar<isize>;
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &isize;
    let _35: isize;
    let mut _36: &Bar<isize>;
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &isize;
    let _39: isize;
    let mut _40: Bar<isize>;
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 3];
    let _47: [core::fmt::rt::Argument<'_>; 3];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &isize;
    let _50: isize;
    let mut _51: Bar<isize>;
    let mut _52: core::fmt::rt::Argument<'_>;
    let _53: &isize;
    let _54: isize;
    let mut _55: &Bar<isize>;
    let mut _56: core::fmt::rt::Argument<'_>;
    let _57: &isize;
    let _58: isize;
    let mut _59: Bar<isize>;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: *const Foo;
    let mut _66: *const Foo;
    let mut _67: *const Bar<isize>;
    let mut _68: *const Bar<isize>;
    let mut _69: *const Bar<isize>;
    let mut _70: *const Bar<isize>;
    let mut _71: *const Bar<isize>;
    let mut _72: *const Bar<isize>;
    scope 1 {
        debug foo => _1;
        let _21: std::boxed::Box<Bar<isize>>;
        let mut _62: &[&str; 4];
        let mut _109: *const ();
        let mut _110: usize;
        let mut _111: usize;
        let mut _112: usize;
        let mut _113: usize;
        let mut _114: bool;
        let mut _115: *const ();
        let mut _116: usize;
        let mut _117: usize;
        let mut _118: usize;
        let mut _119: usize;
        let mut _120: bool;
        scope 2 {
            debug bar => _21;
            let _41: std::boxed::Box<Bar<isize>>;
            let mut _61: &[&str; 4];
            let mut _91: *const ();
            let mut _92: usize;
            let mut _93: usize;
            let mut _94: usize;
            let mut _95: usize;
            let mut _96: bool;
            let mut _97: *const ();
            let mut _98: usize;
            let mut _99: usize;
            let mut _100: usize;
            let mut _101: usize;
            let mut _102: bool;
            let mut _103: *const ();
            let mut _104: usize;
            let mut _105: usize;
            let mut _106: usize;
            let mut _107: usize;
            let mut _108: bool;
            scope 3 {
                debug bar => _41;
                let mut _60: &[&str; 4];
                let mut _73: *const ();
                let mut _74: usize;
                let mut _75: usize;
                let mut _76: usize;
                let mut _77: usize;
                let mut _78: bool;
                let mut _79: *const ();
                let mut _80: usize;
                let mut _81: usize;
                let mut _82: usize;
                let mut _83: usize;
                let mut _84: bool;
                let mut _85: *const ();
                let mut _86: usize;
                let mut _87: usize;
                let mut _88: usize;
                let mut _89: usize;
                let mut _90: bool;
            }
        }
    }

    bb0: {
        _64 = const false;
        _63 = const false;
        _2 = Foo { f: const 1_isize };
        _64 = const true;
        _1 = Box::<Foo>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _62 = const _;
        _5 = _62 as &[&str] (Pointer(Unsize));
        _65 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _115 = _65 as *const () (PtrToPtr);
        _116 = _115 as usize (Transmute);
        _117 = AlignOf(Foo);
        _118 = Sub(_117, const 1_usize);
        _119 = BitAnd(_116, _118);
        _120 = Eq(_119, const 0_usize);
        assert(_120, "misaligned pointer dereference: address must be a multiple of {} but is {}", _117, _116) -> [success: bb41, unwind unreachable];
    }

    bb2: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_10) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _66 = (((_1.0: std::ptr::Unique<Foo>).0: std::ptr::NonNull<Foo>).0: *const Foo);
        _109 = _66 as *const () (PtrToPtr);
        _110 = _109 as usize (Transmute);
        _111 = AlignOf(Foo);
        _112 = Sub(_111, const 1_usize);
        _113 = BitAnd(_110, _112);
        _114 = Eq(_113, const 0_usize);
        assert(_114, "misaligned pointer dereference: address must be a multiple of {} but is {}", _111, _110) -> [success: bb40, unwind unreachable];
    }

    bb4: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_14) -> [return: bb5, unwind: bb33];
    }

    bb5: {
        _64 = const false;
        _20 = move _1;
        _19 = Foo::baz(move _20, const 2_isize) -> [return: bb6, unwind: bb33];
    }

    bb6: {
        _18 = &_19;
        _17 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_18) -> [return: bb7, unwind: bb33];
    }

    bb7: {
        _8 = [move _9, move _13, move _17];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _3 = _print(move _4) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _22 = Bar::<isize> { f: const 1_isize };
        _21 = Box::<Bar<isize>>::new(move _22) -> [return: bb10, unwind: bb33];
    }

    bb10: {
        _63 = const true;
        _61 = const _;
        _25 = _61 as &[&str] (Pointer(Unsize));
        _67 = (((_21.0: std::ptr::Unique<Bar<isize>>).0: std::ptr::NonNull<Bar<isize>>).0: *const Bar<isize>);
        _103 = _67 as *const () (PtrToPtr);
        _104 = _103 as usize (Transmute);
        _105 = AlignOf(Bar<isize>);
        _106 = Sub(_105, const 1_usize);
        _107 = BitAnd(_104, _106);
        _108 = Eq(_107, const 0_usize);
        assert(_108, "misaligned pointer dereference: address must be a multiple of {} but is {}", _105, _104) -> [success: bb39, unwind unreachable];
    }

    bb11: {
        _30 = &_31;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_30) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _68 = (((_21.0: std::ptr::Unique<Bar<isize>>).0: std::ptr::NonNull<Bar<isize>>).0: *const Bar<isize>);
        _97 = _68 as *const () (PtrToPtr);
        _98 = _97 as usize (Transmute);
        _99 = AlignOf(Bar<isize>);
        _100 = Sub(_99, const 1_usize);
        _101 = BitAnd(_98, _100);
        _102 = Eq(_101, const 0_usize);
        assert(_102, "misaligned pointer dereference: address must be a multiple of {} but is {}", _99, _98) -> [success: bb38, unwind unreachable];
    }

    bb13: {
        _34 = &_35;
        _33 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_34) -> [return: bb14, unwind: bb31];
    }

    bb14: {
        _69 = (((_21.0: std::ptr::Unique<Bar<isize>>).0: std::ptr::NonNull<Bar<isize>>).0: *const Bar<isize>);
        _91 = _69 as *const () (PtrToPtr);
        _92 = _91 as usize (Transmute);
        _93 = AlignOf(Bar<isize>);
        _94 = Sub(_93, const 1_usize);
        _95 = BitAnd(_92, _94);
        _96 = Eq(_95, const 0_usize);
        assert(_96, "misaligned pointer dereference: address must be a multiple of {} but is {}", _93, _92) -> [success: bb37, unwind unreachable];
    }

    bb15: {
        _38 = &_39;
        _37 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_38) -> [return: bb16, unwind: bb31];
    }

    bb16: {
        _28 = [move _29, move _33, move _37];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        _23 = _print(move _24) -> [return: bb18, unwind: bb31];
    }

    bb18: {
        _63 = const false;
        _41 = move _21;
        _60 = const _;
        _44 = _60 as &[&str] (Pointer(Unsize));
        _70 = (((_41.0: std::ptr::Unique<Bar<isize>>).0: std::ptr::NonNull<Bar<isize>>).0: *const Bar<isize>);
        _85 = _70 as *const () (PtrToPtr);
        _86 = _85 as usize (Transmute);
        _87 = AlignOf(Bar<isize>);
        _88 = Sub(_87, const 1_usize);
        _89 = BitAnd(_86, _88);
        _90 = Eq(_89, const 0_usize);
        assert(_90, "misaligned pointer dereference: address must be a multiple of {} but is {}", _87, _86) -> [success: bb36, unwind unreachable];
    }

    bb19: {
        _49 = &_50;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_49) -> [return: bb20, unwind: bb28];
    }

    bb20: {
        _71 = (((_41.0: std::ptr::Unique<Bar<isize>>).0: std::ptr::NonNull<Bar<isize>>).0: *const Bar<isize>);
        _79 = _71 as *const () (PtrToPtr);
        _80 = _79 as usize (Transmute);
        _81 = AlignOf(Bar<isize>);
        _82 = Sub(_81, const 1_usize);
        _83 = BitAnd(_80, _82);
        _84 = Eq(_83, const 0_usize);
        assert(_84, "misaligned pointer dereference: address must be a multiple of {} but is {}", _81, _80) -> [success: bb35, unwind unreachable];
    }

    bb21: {
        _53 = &_54;
        _52 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_53) -> [return: bb22, unwind: bb28];
    }

    bb22: {
        _72 = (((_41.0: std::ptr::Unique<Bar<isize>>).0: std::ptr::NonNull<Bar<isize>>).0: *const Bar<isize>);
        _73 = _72 as *const () (PtrToPtr);
        _74 = _73 as usize (Transmute);
        _75 = AlignOf(Bar<isize>);
        _76 = Sub(_75, const 1_usize);
        _77 = BitAnd(_74, _76);
        _78 = Eq(_77, const 0_usize);
        assert(_78, "misaligned pointer dereference: address must be a multiple of {} but is {}", _75, _74) -> [success: bb34, unwind unreachable];
    }

    bb23: {
        _57 = &_58;
        _56 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_57) -> [return: bb24, unwind: bb28];
    }

    bb24: {
        _47 = [move _48, move _52, move _56];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb25, unwind: bb28];
    }

    bb25: {
        _42 = _print(move _43) -> [return: bb26, unwind: bb28];
    }

    bb26: {
        drop(_41) -> [return: bb27, unwind: bb31];
    }

    bb27: {
        _63 = const false;
        _64 = const false;
        return;
    }

    bb28 (cleanup): {
        drop(_41) -> [return: bb31, unwind terminate];
    }

    bb29 (cleanup): {
        resume;
    }

    bb30 (cleanup): {
        drop(_21) -> [return: bb33, unwind terminate];
    }

    bb31 (cleanup): {
        switchInt(_63) -> [0: bb33, otherwise: bb30];
    }

    bb32 (cleanup): {
        drop(_1) -> [return: bb29, unwind terminate];
    }

    bb33 (cleanup): {
        switchInt(_64) -> [0: bb29, otherwise: bb32];
    }

    bb34: {
        _59 = (*_72);
        _58 = Bar::<isize>::baz(move _59, const 2_isize) -> [return: bb23, unwind: bb28];
    }

    bb35: {
        _55 = &(*_71);
        _54 = Bar::<isize>::bar(move _55, const 2_isize) -> [return: bb21, unwind: bb28];
    }

    bb36: {
        _51 = (*_70);
        _50 = Bar::<isize>::foo(move _51, const 2_isize) -> [return: bb19, unwind: bb28];
    }

    bb37: {
        _40 = (*_69);
        _39 = Bar::<isize>::baz(move _40, const 2_isize) -> [return: bb15, unwind: bb31];
    }

    bb38: {
        _36 = &(*_68);
        _35 = Bar::<isize>::bar(move _36, const 2_isize) -> [return: bb13, unwind: bb31];
    }

    bb39: {
        _32 = (*_67);
        _31 = Bar::<isize>::foo(move _32, const 2_isize) -> [return: bb11, unwind: bb31];
    }

    bb40: {
        _16 = &(*_66);
        _15 = Foo::bar(move _16, const 2_isize) -> [return: bb4, unwind: bb33];
    }

    bb41: {
        _12 = (*_65);
        _11 = Foo::foo(move _12, const 2_isize) -> [return: bb2, unwind: bb33];
    }
}

promoted[0] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}
