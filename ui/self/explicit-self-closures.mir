// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/explicit-self-closures.rs:11:1: 11:9>::set_many(_1: &mut Box, _2: &[usize]) -> () {
    debug self => _1;                    // in scope 0 at ui/self/explicit-self-closures.rs:12:21: 12:30
    debug xs => _2;                      // in scope 0 at ui/self/explicit-self-closures.rs:12:32: 12:34
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self-closures.rs:12:46: 12:46
    let mut _3: std::slice::Iter<'_, usize>; // in scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
    let mut _4: &[usize];                // in scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
    let mut _5: std::slice::Iter<'_, usize>; // in scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
    let mut _6: std::option::Option<&usize>; // in scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
    let mut _7: &mut std::slice::Iter<'_, usize>; // in scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
    let mut _8: &mut std::slice::Iter<'_, usize>; // in scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
    let mut _9: isize;                   // in scope 0 at ui/self/explicit-self-closures.rs:13:9: 13:37
    let mut _11: usize;                  // in scope 0 at ui/self/explicit-self-closures.rs:13:32: 13:34
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
        let _10: &usize;                 // in scope 1 at ui/self/explicit-self-closures.rs:13:13: 13:14
        scope 2 {
            debug x => _10;              // in scope 2 at ui/self/explicit-self-closures.rs:13:13: 13:14
        }
    }

    bb0: {
        _4 = _2;                         // scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
        _3 = <&[usize] as IntoIterator>::into_iter(move _4) -> bb1; // scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-closures.rs:13:18: 13:20
                                         // + literal: Const { ty: fn(&[usize]) -> <&[usize] as IntoIterator>::IntoIter {<&[usize] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/self/explicit-self-closures.rs:13:18: 13:20
        goto -> bb2;                     // scope 1 at ui/self/explicit-self-closures.rs:13:9: 13:37
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
        _7 = &mut (*_8);                 // scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
        _6 = <std::slice::Iter<'_, usize> as Iterator>::next(move _7) -> bb3; // scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
                                         // mir::Constant
                                         // + span: ui/self/explicit-self-closures.rs:13:18: 13:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, usize>) -> Option<<std::slice::Iter<'_, usize> as Iterator>::Item> {<std::slice::Iter<'_, usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
    }

    bb4: {
        _10 = ((_6 as Some).0: &usize);  // scope 1 at ui/self/explicit-self-closures.rs:13:13: 13:14
        _11 = (*_10);                    // scope 2 at ui/self/explicit-self-closures.rs:13:32: 13:34
        ((*_1).0: usize) = move _11;     // scope 2 at ui/self/explicit-self-closures.rs:13:23: 13:34
        goto -> bb2;                     // scope 1 at ui/self/explicit-self-closures.rs:13:9: 13:37
    }

    bb5: {
        unreachable;                     // scope 1 at ui/self/explicit-self-closures.rs:13:18: 13:20
    }

    bb6: {
        return;                          // scope 0 at ui/self/explicit-self-closures.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/explicit-self-closures.rs:17:15: 17:15

    bb0: {
        return;                          // scope 0 at ui/self/explicit-self-closures.rs:17:17: 17:17
    }
}
