// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/move-self.rs:6:1: 6:7>::foo(_1: S) -> () {
    debug self => _1;                    // in scope 0 at ui/self/move-self.rs:7:16: 7:20
    let mut _0: ();                      // return place in scope 0 at ui/self/move-self.rs:7:22: 7:22
    let _2: ();                          // in scope 0 at ui/self/move-self.rs:8:9: 8:19
    let mut _3: S;                       // in scope 0 at ui/self/move-self.rs:8:9: 8:13

    bb0: {
        _3 = move _1;                    // scope 0 at ui/self/move-self.rs:8:9: 8:13
        _2 = S::bar(move _3) -> bb1;     // scope 0 at ui/self/move-self.rs:8:9: 8:19
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:8:14: 8:17
                                         // + literal: Const { ty: fn(S) {S::bar}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/self/move-self.rs:9:6: 9:6
    }
}

fn <impl at ui/self/move-self.rs:6:1: 6:7>::bar(_1: S) -> () {
    debug self => _1;                    // in scope 0 at ui/self/move-self.rs:11:16: 11:20
    let mut _0: ();                      // return place in scope 0 at ui/self/move-self.rs:11:22: 11:22
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/self/move-self.rs:12:18: 12:22
    let mut _5: &[&str; 2];              // in scope 0 at ui/self/move-self.rs:12:18: 12:22
    let _6: &[&str; 2];                  // in scope 0 at ui/self/move-self.rs:12:18: 12:22
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/self/move-self.rs:12:24: 12:30
    let mut _12: &std::string::String;   // in scope 0 at ui/self/move-self.rs:12:24: 12:30
    let _13: &std::string::String;       // in scope 0 at ui/self/move-self.rs:12:24: 12:30
    let mut _14: &[&str; 2];             // in scope 0 at ui/self/move-self.rs:12:18: 12:22

    bb0: {
        _14 = const _;                   // scope 0 at ui/self/move-self.rs:12:18: 12:22
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:12:18: 12:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(S::bar, [], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at ui/self/move-self.rs:12:18: 12:22
        _5 = _6;                         // scope 0 at ui/self/move-self.rs:12:18: 12:22
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/self/move-self.rs:12:18: 12:22
        _13 = &(_1.0: std::string::String); // scope 0 at ui/self/move-self.rs:12:24: 12:30
        _12 = _13;                       // scope 0 at ui/self/move-self.rs:12:24: 12:30
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb5]; // scope 0 at ui/self/move-self.rs:12:24: 12:30
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:12:24: 12:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/self/move-self.rs:13:5: 13:6
    }

    bb4: {
        return;                          // scope 0 at ui/self/move-self.rs:13:6: 13:6
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/self/move-self.rs:13:5: 13:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/self/move-self.rs:11:5: 13:6
    }
}

promoted[0] in <impl at ui/self/move-self.rs:6:1: 6:7>::bar: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/self/move-self.rs:12:18: 12:22
    let mut _1: [&str; 2];               // in scope 0 at ui/self/move-self.rs:12:18: 12:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/self/move-self.rs:12:18: 12:22
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:12:18: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:12:18: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/self/move-self.rs:12:18: 12:22
        return;                          // scope 0 at ui/self/move-self.rs:12:18: 12:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/move-self.rs:16:15: 16:15
    let _1: S;                           // in scope 0 at ui/self/move-self.rs:17:9: 17:10
    let mut _2: std::string::String;     // in scope 0 at ui/self/move-self.rs:17:20: 17:40
    let mut _3: &str;                    // in scope 0 at ui/self/move-self.rs:17:20: 17:40
    let _4: &str;                        // in scope 0 at ui/self/move-self.rs:17:20: 17:28
    let _5: ();                          // in scope 0 at ui/self/move-self.rs:18:5: 18:12
    let mut _6: S;                       // in scope 0 at ui/self/move-self.rs:18:5: 18:6
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/self/move-self.rs:17:9: 17:10
    }

    bb0: {
        _4 = const "Hello!";             // scope 0 at ui/self/move-self.rs:17:20: 17:28
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:17:20: 17:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/self/move-self.rs:17:20: 17:40
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/self/move-self.rs:17:20: 17:40
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:17:29: 17:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = S { x: move _2 };           // scope 0 at ui/self/move-self.rs:17:13: 17:42
        _6 = move _1;                    // scope 1 at ui/self/move-self.rs:18:5: 18:6
        _5 = S::foo(move _6) -> bb2;     // scope 1 at ui/self/move-self.rs:18:5: 18:12
                                         // mir::Constant
                                         // + span: ui/self/move-self.rs:18:7: 18:10
                                         // + literal: Const { ty: fn(S) {S::foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/self/move-self.rs:19:2: 19:2
    }
}
