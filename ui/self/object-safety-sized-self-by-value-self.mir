// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/object-safety-sized-self-by-value-self.rs:16:1: 16:26>::tick(_1: &mut CCounter) -> u32 {
    debug self => _1;                    // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:13: 17:22
    let mut _0: u32;                     // return place in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:27: 17:30
    let mut _2: (u32, bool);             // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:33: 17:44

    bb0: {
        _2 = CheckedAdd(((*_1).0: u32), const 1_u32); // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:33: 17:44
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: u32), const 1_u32) -> bb1; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:33: 17:44
    }

    bb1: {
        ((*_1).0: u32) = move (_2.0: u32); // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:33: 17:44
        _0 = ((*_1).0: u32);             // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:46: 17:52
        return;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:17:54: 17:54
    }
}

fn <impl at ui/self/object-safety-sized-self-by-value-self.rs:16:1: 16:26>::get(_1: CCounter) -> u32 {
    debug self => _1;                    // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:18:12: 18:16
    let mut _0: u32;                     // return place in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:18:21: 18:24

    bb0: {
        _0 = (_1.0: u32);                // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:18:46: 18:52
        return;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:18:54: 18:54
    }
}

fn tick1(_1: C) -> u32 {
    debug c => _1;                       // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:21:21: 21:26
    let mut _0: u32;                     // return place in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:21:34: 21:37
    let _2: ();                          // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:5: 22:18
    let mut _3: &mut dyn Counter;        // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:11: 22:17
    let mut _4: &mut C;                  // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:11: 22:17
    let mut _5: &mut C;                  // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:11: 22:17
    let mut _6: C;                       // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:23:5: 23:6
    let mut _7: bool;                    // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:24:1: 24:2

    bb0: {
        _7 = const false;                // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:5: 22:18
        _7 = const true;                 // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:5: 22:18
        _5 = &mut _1;                    // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:11: 22:17
        _4 = &mut (*_5);                 // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:11: 22:17
        _3 = move _4 as &mut dyn Counter (Pointer(Unsize)); // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:11: 22:17
        _2 = tick2(move _3) -> [return: bb1, unwind: bb5]; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:22:5: 22:18
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:22:5: 22:10
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn Counter + 'a)) {tick2}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const false;                // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:23:5: 23:6
        _6 = move _1;                    // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:23:5: 23:6
        _0 = <C as Counter>::get(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:23:5: 23:12
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:23:7: 23:10
                                         // + literal: Const { ty: fn(C) -> u32 {<C as Counter>::get}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:24:2: 24:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:21:1: 24:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:24:1: 24:2
    }

    bb5 (cleanup): {
        switchInt(_7) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:24:1: 24:2
    }
}

fn tick2(_1: &mut dyn Counter) -> () {
    debug c => _1;                       // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:26:10: 26:11
    let mut _0: ();                      // return place in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:26:31: 26:31
    let _2: ();                          // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:27:5: 27:13
    let mut _3: &mut dyn Counter;        // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:27:11: 27:12

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:27:11: 27:12
        _2 = tick3::<dyn Counter>(move _3) -> bb1; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:27:5: 27:13
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:27:5: 27:10
                                         // + literal: Const { ty: for<'a> fn(&'a mut dyn Counter) {tick3::<dyn Counter>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:28:2: 28:2
    }
}

fn tick3(_1: &mut C) -> () {
    debug c => _1;                       // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:30:28: 30:29
    let mut _0: ();                      // return place in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:30:39: 30:39
    let _2: u32;                         // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:31:5: 31:13
    let mut _3: &mut C;                  // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:31:5: 31:13
    let _4: u32;                         // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:32:5: 32:13
    let mut _5: &mut C;                  // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:32:5: 32:13

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:31:5: 31:13
        _2 = <C as Counter>::tick(move _3) -> bb1; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:31:5: 31:13
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:31:7: 31:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut C) -> u32 {<C as Counter>::tick}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &mut (*_1);                 // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:32:5: 32:13
        _4 = <C as Counter>::tick(move _5) -> bb2; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:32:5: 32:13
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:32:7: 32:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut C) -> u32 {<C as Counter>::tick}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:33:2: 33:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:35:11: 35:11
    let mut _1: CCounter;                // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:36:9: 36:14
    let mut _3: CCounter;                // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:37:23: 37:24
    let mut _4: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug c => _1;                   // in scope 1 at ui/self/object-safety-sized-self-by-value-self.rs:36:9: 36:14
        let _2: u32;                     // in scope 1 at ui/self/object-safety-sized-self-by-value-self.rs:37:9: 37:14
        scope 2 {
            debug value => _2;           // in scope 2 at ui/self/object-safety-sized-self-by-value-self.rs:37:9: 37:14
            let _7: &u32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _8: &u32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _21: &u32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _7;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _8;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _13: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _13;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const CCounter {{ c: 0_u32 }}; // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:36:17: 36:34
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:36:17: 36:34
                                         // + literal: Const { ty: CCounter, val: Value(Scalar(0x00000000)) }
        _3 = const CCounter {{ c: 0_u32 }}; // scope 1 at ui/self/object-safety-sized-self-by-value-self.rs:37:23: 37:24
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:37:23: 37:24
                                         // + literal: Const { ty: CCounter, val: Value(Scalar(0x00000000)) }
        _2 = tick1::<CCounter>(move _3) -> bb1; // scope 1 at ui/self/object-safety-sized-self-by-value-self.rs:37:17: 37:25
                                         // mir::Constant
                                         // + span: ui/self/object-safety-sized-self-by-value-self.rs:37:17: 37:22
                                         // + literal: Const { ty: fn(CCounter) -> u32 {tick1::<CCounter>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &u32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &u32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 2_u32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<u32, u32>(move _15, move _16, move _18, move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:39:2: 39:2
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:38:23: 38:24

    bb0: {
        _1 = const 2_u32;                // scope 0 at ui/self/object-safety-sized-self-by-value-self.rs:38:23: 38:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
