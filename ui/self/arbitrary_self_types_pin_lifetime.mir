// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:8:1: 8:9>::pin_ref(_1: Pin<&Foo>) -> Pin<&Foo> {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:9:16: 9:20
    let mut _0: std::pin::Pin<&Foo>;     // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:9:37: 9:47

    bb0: {
        _0 = _1;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:9:50: 9:54
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:9:56: 9:56
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:8:1: 8:9>::pin_mut(_1: Pin<&mut Foo>) -> Pin<&mut Foo> {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:11:16: 11:20
    let mut _0: std::pin::Pin<&mut Foo>; // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:11:41: 11:55

    bb0: {
        _0 = move _1;                    // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:11:58: 11:62
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:11:64: 11:64
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:8:1: 8:9>::pin_pin_pin_ref(_1: Pin<Pin<Pin<&Foo>>>) -> Pin<Pin<Pin<&Foo>>> {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:13:24: 13:28
    let mut _0: std::pin::Pin<std::pin::Pin<std::pin::Pin<&Foo>>>; // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:13:55: 13:75

    bb0: {
        _0 = _1;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:13:78: 13:82
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:13:84: 13:84
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:8:1: 8:9>::pin_ref_impl_trait(_1: Pin<&Foo>) -> impl Clone + '_ {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:15:27: 15:31
    let mut _0: impl std::clone::Clone + '_; // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:15:48: 15:63

    bb0: {
        _0 = _1;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:15:66: 15:70
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:15:72: 15:72
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:8:1: 8:9>::b(_1: Pin<&Foo>, _2: &Foo) -> Pin<&Foo> {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:17:10: 17:14
    debug f => _2;                       // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:17:27: 17:28
    let mut _0: std::pin::Pin<&Foo>;     // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:17:39: 17:48

    bb0: {
        _0 = _1;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:17:51: 17:55
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:17:57: 17:57
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:21:1: 21:9>::bar(_1: Pin<&Foo>, _2: &()) -> Pin<&Foo> {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:22:16: 22:20
    debug arg => _2;                     // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:22:36: 22:39
    let mut _0: std::pin::Pin<&Foo>;     // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:22:52: 22:64

    bb0: {
        _0 = _1;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:22:67: 22:71
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:22:73: 22:73
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:30:1: 30:35>::fields(_1: Pin<&mut Bar<T, U>>) -> (Pin<&mut T>, Pin<&mut U>) {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:31:15: 31:19
    let mut _0: (std::pin::Pin<&mut T>, std::pin::Pin<&mut U>); // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:31:40: 31:66
    let _2: &mut Bar<T, U>;              // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:32:13: 32:17
    let mut _3: std::pin::Pin<&mut Bar<T, U>>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:32:20: 32:24
    let mut _4: std::pin::Pin<&mut T>;   // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:10: 33:36
    let mut _5: &mut T;                  // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:19: 33:35
    let mut _6: &mut T;                  // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:19: 33:35
    let mut _7: std::pin::Pin<&mut U>;   // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:38: 33:64
    let mut _8: &mut U;                  // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:47: 33:63
    let mut _9: &mut U;                  // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:47: 33:63
    scope 1 {
        debug this => _2;                // in scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:32:13: 32:17
    }

    bb0: {
        _3 = move _1;                    // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:32:20: 32:24
        _2 = Pin::<&mut Bar<T, U>>::get_mut(move _3) -> bb1; // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:32:20: 32:34
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:32:25: 32:32
                                         // + literal: Const { ty: fn(Pin<&mut Bar<T, U>>) -> &mut Bar<T, U> {Pin::<&mut Bar<T, U>>::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut ((*_2).0: T);          // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:19: 33:35
        _5 = &mut (*_6);                 // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:19: 33:35
        _4 = Pin::<&mut T>::new(move _5) -> bb2; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:10: 33:36
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:33:10: 33:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut T) -> Pin<&mut T> {Pin::<&mut T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut ((*_2).1: U);          // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:47: 33:63
        _8 = &mut (*_9);                 // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:47: 33:63
        _7 = Pin::<&mut U>::new(move _8) -> bb3; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:38: 33:64
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:33:38: 33:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut U) -> Pin<&mut U> {Pin::<&mut U>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = (move _4, move _7);         // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:33:9: 33:65
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:34:6: 34:6
    }
}

fn <impl at ui/self/arbitrary_self_types_pin_lifetime.rs:44:1: 44:26>::poll_fill_buf(_1: Pin<&mut Baz>, _2: &mut Context<'_>) -> Poll<Result<&[u8], std::io::Error>> {
    debug self => _1;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:45:22: 45:26
    debug cx => _2;                      // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:45:44: 45:46
    let mut _0: std::task::Poll<std::result::Result<&[u8], std::io::Error>>; // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:46:12: 46:40
    let mut _3: std::result::Result<&[u8], std::io::Error>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:21: 48:42
    let mut _4: &[u8];                   // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
    let _5: &[u8];                       // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
    let mut _6: &std::vec::Vec<u8>;      // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
    let _7: &std::vec::Vec<u8>;          // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
    let _8: &mut Baz;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:25: 48:39
    let mut _9: std::pin::Pin<&mut Baz>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:25: 48:29

    bb0: {
        _9 = move _1;                    // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:25: 48:29
        _8 = Pin::<&mut Baz>::get_mut(move _9) -> bb1; // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:25: 48:39
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:48:30: 48:37
                                         // + literal: Const { ty: fn(Pin<&mut Baz>) -> &mut Baz {Pin::<&mut Baz>::get_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_8).0: std::vec::Vec<u8>); // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
        _6 = _7;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
        _5 = <Vec<u8> as Deref>::deref(move _6) -> bb2; // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _5;                         // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:24: 48:41
        _3 = Result::<&[u8], std::io::Error>::Ok(move _4); // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:21: 48:42
        _0 = Poll::<Result<&[u8], std::io::Error>>::Ready(move _3); // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:48:9: 48:43
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:49:6: 49:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:52:11: 52:11
    let mut _1: Foo;                     // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:53:9: 53:16
    let _2: std::pin::Pin<&Foo>;         // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:54:7: 54:31
    let mut _3: std::pin::Pin<&Foo>;     // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:54:7: 54:21
    let mut _4: &Foo;                    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:54:16: 54:20
    let _5: std::pin::Pin<&mut Foo>;     // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:55:7: 55:35
    let mut _6: std::pin::Pin<&mut Foo>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:55:7: 55:25
    let mut _7: &mut Foo;                // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:55:16: 55:24
    let _8: std::pin::Pin<std::pin::Pin<std::pin::Pin<&Foo>>>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:7: 56:59
    let mut _9: std::pin::Pin<std::pin::Pin<std::pin::Pin<&Foo>>>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:7: 56:41
    let mut _10: std::pin::Pin<std::pin::Pin<&Foo>>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:16: 56:40
    let mut _11: std::pin::Pin<&Foo>;    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:25: 56:39
    let mut _12: &Foo;                   // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:34: 56:38
    let _13: impl std::clone::Clone + '_; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:57:7: 57:42
    let mut _14: std::pin::Pin<&Foo>;    // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:57:7: 57:21
    let mut _15: &Foo;                   // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:57:16: 57:20
    let _17: (std::pin::Pin<&mut u8>, std::pin::Pin<&mut u8>); // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:59:7: 59:34
    let mut _18: std::pin::Pin<&mut Bar<u8, u8>>; // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:59:7: 59:25
    let mut _19: &mut Bar<u8, u8>;       // in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:59:16: 59:24
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:53:9: 53:16
        let mut _16: Bar<u8, u8>;        // in scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:58:9: 58:16
        scope 2 {
            debug bar => _16;            // in scope 2 at ui/self/arbitrary_self_types_pin_lifetime.rs:58:9: 58:16
        }
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:54:16: 54:20
        _3 = Pin::<&Foo>::new(move _4) -> bb1; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:54:7: 54:21
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:54:7: 54:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&Foo) -> Pin<&Foo> {Pin::<&Foo>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Foo::pin_ref(move _3) -> bb2; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:54:7: 54:31
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:54:22: 54:29
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a Foo>) -> Pin<&'a Foo> {Foo::pin_ref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _1;                    // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:55:16: 55:24
        _6 = Pin::<&mut Foo>::new(move _7) -> bb3; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:55:7: 55:25
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:55:7: 55:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut Foo) -> Pin<&mut Foo> {Pin::<&mut Foo>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Foo::pin_mut(move _6) -> bb4; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:55:7: 55:35
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:55:26: 55:33
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut Foo>) -> Pin<&'a mut Foo> {Foo::pin_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &_1;                       // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:34: 56:38
        _11 = Pin::<&Foo>::new(move _12) -> bb5; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:25: 56:39
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:56:25: 56:33
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&Foo) -> Pin<&Foo> {Pin::<&Foo>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = Pin::<Pin<&Foo>>::new(move _11) -> bb6; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:16: 56:40
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:56:16: 56:24
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Pin<&Foo>) -> Pin<Pin<&Foo>> {Pin::<Pin<&Foo>>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = Pin::<Pin<Pin<&Foo>>>::new(move _10) -> bb7; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:7: 56:41
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:56:7: 56:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Pin<Pin<&Foo>>) -> Pin<Pin<Pin<&Foo>>> {Pin::<Pin<Pin<&Foo>>>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = Foo::pin_pin_pin_ref(move _9) -> bb8; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:56:7: 56:59
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:56:42: 56:57
                                         // + literal: Const { ty: for<'a> fn(Pin<Pin<Pin<&'a Foo>>>) -> Pin<Pin<Pin<&'a Foo>>> {Foo::pin_pin_pin_ref}, val: Value(<ZST>) }
    }

    bb8: {
        _15 = &_1;                       // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:57:16: 57:20
        _14 = Pin::<&Foo>::new(move _15) -> bb9; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:57:7: 57:21
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:57:7: 57:15
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&Foo) -> Pin<&Foo> {Pin::<&Foo>::new}, val: Value(<ZST>) }
    }

    bb9: {
        _13 = Foo::pin_ref_impl_trait(move _14) -> bb10; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:57:7: 57:42
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:57:22: 57:40
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a Foo>) -> impl Clone + 'a {Foo::pin_ref_impl_trait}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = Bar::<u8, u8> { field1: const 0_u8, field2: const 1_u8 }; // scope 1 at ui/self/arbitrary_self_types_pin_lifetime.rs:58:19: 58:51
        _19 = &mut _16;                  // scope 2 at ui/self/arbitrary_self_types_pin_lifetime.rs:59:16: 59:24
        _18 = Pin::<&mut Bar<u8, u8>>::new(move _19) -> bb11; // scope 2 at ui/self/arbitrary_self_types_pin_lifetime.rs:59:7: 59:25
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:59:7: 59:15
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&mut Bar<u8, u8>) -> Pin<&mut Bar<u8, u8>> {Pin::<&mut Bar<u8, u8>>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _17 = Bar::<u8, u8>::fields(move _18) -> bb12; // scope 2 at ui/self/arbitrary_self_types_pin_lifetime.rs:59:7: 59:34
                                         // mir::Constant
                                         // + span: ui/self/arbitrary_self_types_pin_lifetime.rs:59:26: 59:32
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut Bar<u8, u8>>) -> (Pin<&'a mut u8>, Pin<&'a mut u8>) {Bar::<u8, u8>::fields}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:60:2: 60:2
    }
}

fn Baz(_1: Vec<u8>) -> Baz {
    let mut _0: Baz;                     // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:42:1: 42:11

    bb0: {
        _0 = Baz(move _1);               // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:42:1: 42:11
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:42:1: 42:11
    }
}

// MIR FOR CTFE
fn Baz(_1: Vec<u8>) -> Baz {
    let mut _0: Baz;                     // return place in scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:42:1: 42:11

    bb0: {
        _0 = Baz(move _1);               // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:42:1: 42:11
        return;                          // scope 0 at ui/self/arbitrary_self_types_pin_lifetime.rs:42:1: 42:11
    }
}
