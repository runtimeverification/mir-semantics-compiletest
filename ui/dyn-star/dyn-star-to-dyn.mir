// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: dyn* std::fmt::Debug;
    let mut _3: std::boxed::Box<dyn std::fmt::Debug>;
    let mut _4: std::boxed::Box<dyn* std::fmt::Debug>;
    let mut _5: (&&str, &std::string::String);
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &std::boxed::Box<dyn std::fmt::Debug>;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: std::boxed::Box<i32>;
    let mut _26: dyn* std::fmt::Debug;
    let mut _27: &std::boxed::Box<dyn std::fmt::Debug>;
    let mut _28: (&&str, &std::string::String);
    let mut _29: &std::string::String;
    let _30: std::string::String;
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &dyn* std::fmt::Debug;
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: &i32;
    scope 1 {
        debug x => _1;
        let _2: std::boxed::Box<dyn std::fmt::Debug>;
        scope 2 {
            debug x => _2;
            let _8: std::string::String;
            let _16: &&str;
            let _17: &std::string::String;
            let _23: std::boxed::Box<dyn std::fmt::Debug>;
            let mut _48: &[&str; 1];
            let mut _49: &&str;
            scope 3 {
                debug res => _8;
            }
            scope 4 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _20;
                }
            }
            scope 6 {
                debug x => _23;
                let _25: dyn* std::fmt::Debug;
                scope 7 {
                    debug x => _25;
                    let _31: std::string::String;
                    let _39: &&str;
                    let _40: &std::string::String;
                    let mut _46: &[&str; 1];
                    let mut _47: &&str;
                    scope 8 {
                        debug res => _31;
                    }
                    scope 9 {
                        debug left_val => _39;
                        debug right_val => _40;
                        let _43: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _43;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _50 = const _;
        _1 = _50 as dyn* std::fmt::Debug (DynStar);
        _4 = Box::<dyn* Debug>::new(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize));
        _2 = move _3;
        _49 = const _;
        _48 = const _;
        _10 = _48 as &[&str] (Pointer(Unsize));
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<Box<dyn Debug>>(_15) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb3, unwind: bb24];
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb24];
    }

    bb4: {
        _7 = move _8;
        _6 = &_7;
        _5 = (_49, move _6);
        _16 = (_5.0: &&str);
        _17 = (_5.1: &std::string::String);
        _19 = <&str as PartialEq<String>>::eq(_16, _17) -> [return: bb5, unwind: bb23];
    }

    bb5: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, String>(move _20, _16, _17, move _22) -> bb23;
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb24];
    }

    bb8: {
        _24 = Box::<i32>::new(const 42_i32) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _23 = move _24 as std::boxed::Box<dyn std::fmt::Debug> (Pointer(Unsize));
        _27 = &_23;
        _26 = move _27 as dyn* std::fmt::Debug (DynStar);
        _25 = move _26;
        _47 = const _;
        _46 = const _;
        _33 = _46 as &[&str] (Pointer(Unsize));
        _38 = &_25;
        _37 = core::fmt::rt::Argument::<'_>::new_debug::<dyn* Debug>(_38) -> [return: bb10, unwind: bb21];
    }

    bb10: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb11, unwind: bb21];
    }

    bb11: {
        _31 = format(move _32) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _30 = move _31;
        _29 = &_30;
        _28 = (_47, move _29);
        _39 = (_28.0: &&str);
        _40 = (_28.1: &std::string::String);
        _42 = <&str as PartialEq<String>>::eq(_39, _40) -> [return: bb13, unwind: bb20];
    }

    bb13: {
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<&str, String>(move _43, _39, _40, move _45) -> bb20;
    }

    bb15: {
        drop(_30) -> [return: bb16, unwind: bb21];
    }

    bb16: {
        drop(_25) -> [return: bb17, unwind: bb22];
    }

    bb17: {
        drop(_23) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        drop(_2) -> [return: bb19, unwind continue];
    }

    bb19: {
        return;
    }

    bb20 (cleanup): {
        drop(_30) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        drop(_25) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_23) -> [return: bb24, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_7) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "42";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "42";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}
