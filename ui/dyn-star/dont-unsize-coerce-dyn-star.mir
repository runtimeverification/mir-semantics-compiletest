// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dyn-star/dont-unsize-coerce-dyn-star.rs:11:1: 11:22>::add1(_1: &mut usize) -> usize {
    debug self => _1;
    let mut _0: usize;

    bb0: {
        (*_1) = Add((*_1), const 1_usize);
        _0 = (*_1);
        return;
    }
}

fn add_one(_1: &mut dyn* AddOne) -> usize {
    debug i => _1;
    let mut _0: usize;

    bb0: {
        _0 = <dyn* AddOne as AddOne>::add1(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: dyn* AddOne;
    let mut _2: dyn* AddOne;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &usize;
    let _11: usize;
    let mut _12: &mut dyn* AddOne;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &usize;
    let _21: usize;
    let mut _22: &mut dyn* AddOne;
    scope 1 {
        debug x => _1;
        let mut _23: &[&str; 2];
        let mut _24: &[&str; 2];
    }

    bb0: {
        _2 = const 42_usize as dyn* AddOne (DynStar);
        _1 = move _2;
        _24 = const _;
        _5 = _24 as &[&str] (Pointer(Unsize));
        _12 = &mut _1;
        _11 = add_one(_12) -> [return: bb1, unwind: bb10];
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_10) -> [return: bb2, unwind: bb10];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb10];
    }

    bb4: {
        _23 = const _;
        _15 = _23 as &[&str] (Pointer(Unsize));
        _22 = &mut _1;
        _21 = add_one(_22) -> [return: bb5, unwind: bb10];
    }

    bb5: {
        _20 = &_21;
        _19 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_20) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb7, unwind: bb10];
    }

    bb7: {
        _13 = _print(move _14) -> [return: bb8, unwind: bb10];
    }

    bb8: {
        drop(_1) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_1) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
