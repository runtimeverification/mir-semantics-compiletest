// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/dyn-star/issue-102430.rs:10:1: 10:22>::add1(_1: &mut usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/dyn-star/issue-102430.rs:11:13: 11:22
    let mut _0: usize;                   // return place in scope 0 at ui/dyn-star/issue-102430.rs:11:27: 11:32
    let mut _2: (usize, bool);           // in scope 0 at ui/dyn-star/issue-102430.rs:12:9: 12:19

    bb0: {
        _2 = CheckedAdd((*_1), const 1_usize); // scope 0 at ui/dyn-star/issue-102430.rs:12:9: 12:19
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_1), const 1_usize) -> bb1; // scope 0 at ui/dyn-star/issue-102430.rs:12:9: 12:19
    }

    bb1: {
        (*_1) = move (_2.0: usize);      // scope 0 at ui/dyn-star/issue-102430.rs:12:9: 12:19
        _0 = (*_1);                      // scope 0 at ui/dyn-star/issue-102430.rs:13:9: 13:14
        return;                          // scope 0 at ui/dyn-star/issue-102430.rs:14:6: 14:6
    }
}

fn <impl at ui/dyn-star/issue-102430.rs:17:1: 17:27>::add1(_1: &mut &mut usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/dyn-star/issue-102430.rs:18:13: 18:22
    let mut _0: usize;                   // return place in scope 0 at ui/dyn-star/issue-102430.rs:18:27: 18:32
    let mut _2: &mut usize;              // in scope 0 at ui/dyn-star/issue-102430.rs:19:9: 19:23
    let mut _3: &mut usize;              // in scope 0 at ui/dyn-star/issue-102430.rs:18:13: 18:22

    bb0: {
        _3 = deref_copy (*_1);           // scope 0 at ui/dyn-star/issue-102430.rs:19:9: 19:23
        _2 = &mut (*_3);                 // scope 0 at ui/dyn-star/issue-102430.rs:19:9: 19:23
        _0 = <usize as AddOne>::add1(move _2) -> bb1; // scope 0 at ui/dyn-star/issue-102430.rs:19:9: 19:23
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:19:17: 19:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut usize) -> usize {<usize as AddOne>::add1}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/dyn-star/issue-102430.rs:20:6: 20:6
    }
}

fn add_one(_1: dyn* AddOne) -> usize {
    debug i => _1;                       // in scope 0 at ui/dyn-star/issue-102430.rs:23:12: 23:17
    let mut _0: usize;                   // return place in scope 0 at ui/dyn-star/issue-102430.rs:23:40: 23:45
    let mut _2: &mut dyn* AddOne;        // in scope 0 at ui/dyn-star/issue-102430.rs:24:5: 24:13

    bb0: {
        _2 = &mut _1;                    // scope 0 at ui/dyn-star/issue-102430.rs:24:5: 24:13
        _0 = <dyn* AddOne as AddOne>::add1(move _2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/dyn-star/issue-102430.rs:24:5: 24:13
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:24:7: 24:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut dyn* AddOne) -> usize {<dyn* AddOne as AddOne>::add1}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/dyn-star/issue-102430.rs:25:1: 25:2
    }

    bb2: {
        return;                          // scope 0 at ui/dyn-star/issue-102430.rs:25:2: 25:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/dyn-star/issue-102430.rs:25:1: 25:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/dyn-star/issue-102430.rs:23:1: 25:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/dyn-star/issue-102430.rs:27:11: 27:11
    let mut _1: usize;                   // in scope 0 at ui/dyn-star/issue-102430.rs:28:9: 28:14
    let mut _3: dyn* AddOne;             // in scope 0 at ui/dyn-star/issue-102430.rs:29:13: 29:41
    let mut _4: &mut usize;              // in scope 0 at ui/dyn-star/issue-102430.rs:29:13: 29:19
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
    let mut _8: &[&str; 2];              // in scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
    let _9: &[&str; 2];                  // in scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/dyn-star/issue-102430.rs:31:20: 31:30
    let mut _15: &usize;                 // in scope 0 at ui/dyn-star/issue-102430.rs:31:20: 31:30
    let _16: &usize;                     // in scope 0 at ui/dyn-star/issue-102430.rs:31:20: 31:30
    let _17: usize;                      // in scope 0 at ui/dyn-star/issue-102430.rs:31:20: 31:30
    let mut _18: dyn* AddOne;            // in scope 0 at ui/dyn-star/issue-102430.rs:31:28: 31:29
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/dyn-star/issue-102430.rs:28:9: 28:14
        let _2: dyn* AddOne;             // in scope 1 at ui/dyn-star/issue-102430.rs:29:9: 29:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/dyn-star/issue-102430.rs:29:9: 29:10
            let mut _19: &[&str; 2];     // in scope 2 at ui/dyn-star/issue-102430.rs:31:14: 31:18
        }
    }

    bb0: {
        _1 = const 42_usize;             // scope 0 at ui/dyn-star/issue-102430.rs:28:17: 28:24
        _4 = &mut _1;                    // scope 1 at ui/dyn-star/issue-102430.rs:29:13: 29:19
        _3 = move _4 as dyn* AddOne (DynStar); // scope 1 at ui/dyn-star/issue-102430.rs:29:13: 29:19
        _2 = move _3;                    // scope 1 at ui/dyn-star/issue-102430.rs:29:13: 29:41
        _19 = const _;                   // scope 2 at ui/dyn-star/issue-102430.rs:31:14: 31:18
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:31:14: 31:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _19;                        // scope 2 at ui/dyn-star/issue-102430.rs:31:14: 31:18
        _8 = _9;                         // scope 2 at ui/dyn-star/issue-102430.rs:31:14: 31:18
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 2 at ui/dyn-star/issue-102430.rs:31:14: 31:18
        _18 = move _2;                   // scope 2 at ui/dyn-star/issue-102430.rs:31:28: 31:29
        _17 = add_one(move _18) -> bb1;  // scope 2 at ui/dyn-star/issue-102430.rs:31:20: 31:30
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:31:20: 31:27
                                         // + literal: Const { ty: for<'a> fn((dyn* AddOne + 'a)) -> usize {add_one}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = &_17;                      // scope 2 at ui/dyn-star/issue-102430.rs:31:20: 31:30
        _15 = _16;                       // scope 2 at ui/dyn-star/issue-102430.rs:31:20: 31:30
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _15) -> bb2; // scope 2 at ui/dyn-star/issue-102430.rs:31:20: 31:30
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:31:20: 31:30
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> bb4;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/dyn-star/issue-102430.rs:32:2: 32:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
    let mut _1: [&str; 2];               // in scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:31:14: 31:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/dyn-star/issue-102430.rs:31:14: 31:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
        return;                          // scope 0 at ui/dyn-star/issue-102430.rs:31:14: 31:18
    }
}
