// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/codegen/issue-16602-3.rs:4:10: 4:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    debug f => _2;                       // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let mut _3: isize;                   // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let _4: &u32;                        // in scope 0 at ui/codegen/issue-16602-3.rs:7:9: 7:12
    let _5: &u32;                        // in scope 0 at ui/codegen/issue-16602-3.rs:7:14: 7:17
    let mut _6: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let mut _7: &str;                    // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let _8: &str;                        // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/codegen/issue-16602-3.rs:7:9: 7:12
    let mut _10: &u32;                   // in scope 0 at ui/codegen/issue-16602-3.rs:7:9: 7:12
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at ui/codegen/issue-16602-3.rs:7:14: 7:17
    let mut _12: &&u32;                  // in scope 0 at ui/codegen/issue-16602-3.rs:7:14: 7:17
    let _13: &&u32;                      // in scope 0 at ui/codegen/issue-16602-3.rs:7:14: 7:17
    let _14: &&u32;                      // in scope 0 at ui/codegen/issue-16602-3.rs:8:9: 8:21
    let _15: &&u32;                      // in scope 0 at ui/codegen/issue-16602-3.rs:8:23: 8:35
    let mut _16: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let mut _17: &str;                   // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let _18: &str;                       // in scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    let mut _19: &dyn std::fmt::Debug;   // in scope 0 at ui/codegen/issue-16602-3.rs:8:9: 8:21
    let mut _20: &&u32;                  // in scope 0 at ui/codegen/issue-16602-3.rs:8:9: 8:21
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/codegen/issue-16602-3.rs:8:23: 8:35
    let mut _22: &&&u32;                 // in scope 0 at ui/codegen/issue-16602-3.rs:8:23: 8:35
    let _23: &&&u32;                     // in scope 0 at ui/codegen/issue-16602-3.rs:8:23: 8:35
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/codegen/issue-16602-3.rs:7:9: 7:12
        debug __self_1 => _5;            // in scope 1 at ui/codegen/issue-16602-3.rs:7:14: 7:17
    }
    scope 2 {
        debug __self_0 => _14;           // in scope 2 at ui/codegen/issue-16602-3.rs:8:9: 8:21
        debug __self_1 => _15;           // in scope 2 at ui/codegen/issue-16602-3.rs:8:23: 8:35
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    }

    bb1: {
        _14 = &(((*_1) as Baz).0: &u32); // scope 0 at ui/codegen/issue-16602-3.rs:8:9: 8:21
        _15 = &(((*_1) as Baz).1: &u32); // scope 0 at ui/codegen/issue-16602-3.rs:8:23: 8:35
        _16 = &mut (*_2);                // scope 2 at ui/codegen/issue-16602-3.rs:4:10: 4:15
        _18 = const "Baz";               // scope 2 at ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 2 at ui/codegen/issue-16602-3.rs:4:10: 4:15
        _20 = _14;                       // scope 2 at ui/codegen/issue-16602-3.rs:8:9: 8:21
        _19 = move _20 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/codegen/issue-16602-3.rs:8:9: 8:21
        _23 = &_15;                      // scope 2 at ui/codegen/issue-16602-3.rs:8:23: 8:35
        _22 = _23;                       // scope 2 at ui/codegen/issue-16602-3.rs:8:23: 8:35
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/codegen/issue-16602-3.rs:8:23: 8:35
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _16, move _17, move _19, move _21) -> bb4; // scope 2 at ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/codegen/issue-16602-3.rs:4:10: 4:15
    }

    bb3: {
        _4 = &(((*_1) as Bar).0: u32);   // scope 0 at ui/codegen/issue-16602-3.rs:7:9: 7:12
        _5 = &(((*_1) as Bar).1: u32);   // scope 0 at ui/codegen/issue-16602-3.rs:7:14: 7:17
        _6 = &mut (*_2);                 // scope 1 at ui/codegen/issue-16602-3.rs:4:10: 4:15
        _8 = const "Bar";                // scope 1 at ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/codegen/issue-16602-3.rs:4:10: 4:15
        _10 = _4;                        // scope 1 at ui/codegen/issue-16602-3.rs:7:9: 7:12
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/codegen/issue-16602-3.rs:7:9: 7:12
        _13 = &_5;                       // scope 1 at ui/codegen/issue-16602-3.rs:7:14: 7:17
        _12 = _13;                       // scope 1 at ui/codegen/issue-16602-3.rs:7:14: 7:17
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/codegen/issue-16602-3.rs:7:14: 7:17
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _6, move _7, move _9, move _11) -> bb4; // scope 1 at ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:4:10: 4:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:4:15: 4:15
    }
}

static NUM: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:11:13: 11:16

    bb0: {
        _0 = const 100_u32;              // scope 0 at ui/codegen/issue-16602-3.rs:11:19: 11:22
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:11:1: 11:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-16602-3.rs:13:12: 13:12
    let mut _1: Foo;                     // in scope 0 at ui/codegen/issue-16602-3.rs:14:9: 14:14
    let mut _2: &u32;                    // in scope 0 at ui/codegen/issue-16602-3.rs:14:26: 14:30
    let _3: &u32;                        // in scope 0 at ui/codegen/issue-16602-3.rs:14:26: 14:30
    let _4: &u32;                        // in scope 0 at ui/codegen/issue-16602-3.rs:14:27: 14:30
    let mut _5: &u32;                    // in scope 0 at ui/codegen/issue-16602-3.rs:14:32: 14:36
    let _6: &u32;                        // in scope 0 at ui/codegen/issue-16602-3.rs:14:32: 14:36
    let _7: &u32;                        // in scope 0 at ui/codegen/issue-16602-3.rs:14:33: 14:36
    let mut _8: Foo;                     // in scope 0 at ui/codegen/issue-16602-3.rs:15:9: 15:31
    let mut _9: u32;                     // in scope 0 at ui/codegen/issue-16602-3.rs:15:18: 15:23
    let mut _10: &Foo;                   // in scope 0 at ui/codegen/issue-16602-3.rs:15:20: 15:22
    let _11: &Foo;                       // in scope 0 at ui/codegen/issue-16602-3.rs:15:20: 15:22
    let mut _12: u32;                    // in scope 0 at ui/codegen/issue-16602-3.rs:15:25: 15:30
    let mut _13: &Foo;                   // in scope 0 at ui/codegen/issue-16602-3.rs:15:27: 15:29
    let _14: &Foo;                       // in scope 0 at ui/codegen/issue-16602-3.rs:15:27: 15:29
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/codegen/issue-16602-3.rs:14:9: 14:14
    }

    bb0: {
        _4 = const {alloc1: &u32};       // scope 0 at ui/codegen/issue-16602-3.rs:14:27: 14:30
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:14:27: 14:30
                                         // + literal: Const { ty: &u32, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/codegen/issue-16602-3.rs:14:26: 14:30
        _2 = _3;                         // scope 0 at ui/codegen/issue-16602-3.rs:14:26: 14:30
        _7 = const {alloc1: &u32};       // scope 0 at ui/codegen/issue-16602-3.rs:14:33: 14:36
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:14:33: 14:36
                                         // + literal: Const { ty: &u32, val: Value(Scalar(alloc1)) }
        _6 = _7;                         // scope 0 at ui/codegen/issue-16602-3.rs:14:32: 14:36
        _5 = _6;                         // scope 0 at ui/codegen/issue-16602-3.rs:14:32: 14:36
        _1 = Foo::Baz(move _2, move _5); // scope 0 at ui/codegen/issue-16602-3.rs:14:17: 14:37
        _11 = &_1;                       // scope 1 at ui/codegen/issue-16602-3.rs:15:20: 15:22
        _10 = _11;                       // scope 1 at ui/codegen/issue-16602-3.rs:15:20: 15:22
        _9 = f(move _10) -> bb1;         // scope 1 at ui/codegen/issue-16602-3.rs:15:18: 15:23
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:15:18: 15:19
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> u32 {f}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = &_1;                       // scope 1 at ui/codegen/issue-16602-3.rs:15:27: 15:29
        _13 = _14;                       // scope 1 at ui/codegen/issue-16602-3.rs:15:27: 15:29
        _12 = g(move _13) -> bb2;        // scope 1 at ui/codegen/issue-16602-3.rs:15:25: 15:30
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-3.rs:15:25: 15:26
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> u32 {g}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Foo::Bar(move _9, move _12); // scope 1 at ui/codegen/issue-16602-3.rs:15:9: 15:31
        _1 = move _8;                    // scope 1 at ui/codegen/issue-16602-3.rs:15:5: 15:31
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:16:2: 16:2
    }
}

alloc1 (static: NUM, size: 4, align: 4) {
    64 00 00 00                                     │ d...
}

static FNUM: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:18:14: 18:17

    bb0: {
        _0 = const 1_u32;                // scope 0 at ui/codegen/issue-16602-3.rs:18:20: 18:21
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:18:1: 18:22
    }
}

fn f(_1: &Foo) -> u32 {
    debug b => _1;                       // in scope 0 at ui/codegen/issue-16602-3.rs:20:7: 20:8
    let mut _0: u32;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:20:19: 20:22

    bb0: {
        _0 = const 1_u32;                // scope 0 at ui/codegen/issue-16602-3.rs:21:5: 21:9
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:22:2: 22:2
    }
}

static GNUM: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:24:14: 24:17

    bb0: {
        _0 = const 2_u32;                // scope 0 at ui/codegen/issue-16602-3.rs:24:20: 24:21
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:24:1: 24:22
    }
}

fn g(_1: &Foo) -> u32 {
    debug b => _1;                       // in scope 0 at ui/codegen/issue-16602-3.rs:26:7: 26:8
    let mut _0: u32;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:26:19: 26:22

    bb0: {
        _0 = const 2_u32;                // scope 0 at ui/codegen/issue-16602-3.rs:27:5: 27:9
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:28:2: 28:2
    }
}

fn Foo::Bar(_1: u32, _2: u32) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:7:5: 7:8

    bb0: {
        _0 = Foo::Bar(move _1, move _2); // scope 0 at ui/codegen/issue-16602-3.rs:7:5: 7:8
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:7:5: 7:8
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: u32, _2: u32) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:7:5: 7:8

    bb0: {
        _0 = Foo::Bar(move _1, move _2); // scope 0 at ui/codegen/issue-16602-3.rs:7:5: 7:8
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:7:5: 7:8
    }
}

fn Foo::Baz(_1: &u32, _2: &u32) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:8:5: 8:8

    bb0: {
        _0 = Foo::Baz(move _1, move _2); // scope 0 at ui/codegen/issue-16602-3.rs:8:5: 8:8
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:8:5: 8:8
    }
}

// MIR FOR CTFE
fn Foo::Baz(_1: &u32, _2: &u32) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/codegen/issue-16602-3.rs:8:5: 8:8

    bb0: {
        _0 = Foo::Baz(move _1, move _2); // scope 0 at ui/codegen/issue-16602-3.rs:8:5: 8:8
        return;                          // scope 0 at ui/codegen/issue-16602-3.rs:8:5: 8:8
    }
}
