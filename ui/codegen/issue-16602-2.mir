// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: A;
    let mut _2: A;
    let mut _3: u32;
    let mut _4: u32;
    let mut _5: u32;
    let mut _6: u32;
    let mut _7: (&u32, &u32);
    let mut _8: &u32;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u32;
    let mut _14: u32;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&u32, &u32);
    let mut _19: &u32;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u32;
    let mut _25: u32;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _9: &u32;
        let _10: &u32;
        let _20: &u32;
        let _21: &u32;
        let mut _29: &u32;
        let mut _30: &u32;
        scope 2 {
            debug left_val => _9;
            debug right_val => _10;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _20;
            debug right_val => _21;
            let _26: core::panicking::AssertKind;
            scope 5 {
                debug kind => _26;
            }
        }
    }

    bb0: {
        _1 = A { x: const 1_u32, y: const 1_u32 };
        _4 = (_1.1: u32);
        _3 = Mul(move _4, const 2_u32);
        _6 = (_1.0: u32);
        _5 = Mul(move _6, const 2_u32);
        _2 = A { x: move _3, y: move _5 };
        _1 = move _2;
        _8 = &(_1.0: u32);
        _30 = const _;
        _7 = (move _8, _30);
        _9 = (_7.0: &u32);
        _10 = (_7.1: &u32);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u32, u32>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb2: {
        _19 = &(_1.1: u32);
        _29 = const _;
        _18 = (move _19, _29);
        _20 = (_18.0: &u32);
        _21 = (_18.1: &u32);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u32, u32>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}
