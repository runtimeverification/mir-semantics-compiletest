// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-16602-1.rs:2:11: 2:11
    let mut _1: [i32; 2];                // in scope 0 at ui/codegen/issue-16602-1.rs:3:9: 3:14
    let mut _2: i32;                     // in scope 0 at ui/codegen/issue-16602-1.rs:4:10: 4:18
    let mut _3: i32;                     // in scope 0 at ui/codegen/issue-16602-1.rs:4:10: 4:14
    let _4: usize;                       // in scope 0 at ui/codegen/issue-16602-1.rs:4:12: 4:13
    let mut _5: (i32, bool);             // in scope 0 at ui/codegen/issue-16602-1.rs:4:10: 4:18
    let mut _6: i32;                     // in scope 0 at ui/codegen/issue-16602-1.rs:4:20: 4:28
    let mut _7: i32;                     // in scope 0 at ui/codegen/issue-16602-1.rs:4:20: 4:24
    let _8: usize;                       // in scope 0 at ui/codegen/issue-16602-1.rs:4:22: 4:23
    let mut _9: (i32, bool);             // in scope 0 at ui/codegen/issue-16602-1.rs:4:20: 4:28
    let mut _10: (&&[i32], &&[i32; 2]);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: &[i32];                     // in scope 0 at ui/codegen/issue-16602-1.rs:5:16: 5:22
    let _13: &[i32];                     // in scope 0 at ui/codegen/issue-16602-1.rs:5:17: 5:22
    let mut _14: &[i32; 2];              // in scope 0 at ui/codegen/issue-16602-1.rs:5:17: 5:18
    let mut _15: std::ops::RangeFull;    // in scope 0 at ui/codegen/issue-16602-1.rs:5:19: 5:21
    let mut _16: &&[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _21: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _22: &&[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _24: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _25: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _26: &&[i32];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _27: &&[i32];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _28: &&[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _29: &&[i32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/codegen/issue-16602-1.rs:3:9: 3:14
        let _17: &&[i32];                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _18: &&[i32; 2];             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _31: &&[i32; 2];         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _17;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _18;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _23: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _23;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = [const 1_i32; 2];           // scope 0 at ui/codegen/issue-16602-1.rs:3:17: 3:23
        _4 = const 1_usize;              // scope 1 at ui/codegen/issue-16602-1.rs:4:12: 4:13
        _3 = _1[_4];                     // scope 1 at ui/codegen/issue-16602-1.rs:4:10: 4:14
        _5 = CheckedMul(_3, const 2_i32); // scope 1 at ui/codegen/issue-16602-1.rs:4:10: 4:18
        assert(!move (_5.1: bool), "attempt to compute `{} * {}`, which would overflow", move _3, const 2_i32) -> bb1; // scope 1 at ui/codegen/issue-16602-1.rs:4:10: 4:18
    }

    bb1: {
        _2 = move (_5.0: i32);           // scope 1 at ui/codegen/issue-16602-1.rs:4:10: 4:18
        _8 = const 0_usize;              // scope 1 at ui/codegen/issue-16602-1.rs:4:22: 4:23
        _7 = _1[_8];                     // scope 1 at ui/codegen/issue-16602-1.rs:4:20: 4:24
        _9 = CheckedMul(_7, const 2_i32); // scope 1 at ui/codegen/issue-16602-1.rs:4:20: 4:28
        assert(!move (_9.1: bool), "attempt to compute `{} * {}`, which would overflow", move _7, const 2_i32) -> bb2; // scope 1 at ui/codegen/issue-16602-1.rs:4:20: 4:28
    }

    bb2: {
        _6 = move (_9.0: i32);           // scope 1 at ui/codegen/issue-16602-1.rs:4:20: 4:28
        _1 = [move _2, move _6];         // scope 1 at ui/codegen/issue-16602-1.rs:4:5: 4:29
        _14 = &_1;                       // scope 1 at ui/codegen/issue-16602-1.rs:5:17: 5:18
        _13 = <[i32; 2] as Index<RangeFull>>::index(move _14, move _15) -> bb3; // scope 1 at ui/codegen/issue-16602-1.rs:5:17: 5:22
                                         // mir::Constant
                                         // + span: ui/codegen/issue-16602-1.rs:5:17: 5:22
                                         // + literal: Const { ty: for<'a> fn(&'a [i32; 2], RangeFull) -> &'a <[i32; 2] as Index<RangeFull>>::Output {<[i32; 2] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = _13;                       // scope 1 at ui/codegen/issue-16602-1.rs:5:16: 5:22
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _31 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _16 = _31;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _16);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _17 = (_10.0: &&[i32]);          // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _18 = (_10.1: &&[i32; 2]);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _21 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _22 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _20 = <&[i32] as PartialEq<&[i32; 2]>>::eq(move _21, move _22) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32], &'b &[i32; 2]) -> bool {<&[i32] as PartialEq<&[i32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = Not(move _20);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _19) -> [0: bb6, otherwise: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _23 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _24 = core::panicking::assert_failed::<&[i32], &[i32; 2]>(move _25, move _26, move _28, move _30); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32], &'b &[i32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32], &[i32; 2]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/codegen/issue-16602-1.rs:6:2: 6:2
    }
}

promoted[0] in main: &&[i32; 2] = {
    let mut _0: &&[i32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 2];               // in scope 0 at ui/codegen/issue-16602-1.rs:5:24: 5:31
    let mut _2: [i32; 2];                // in scope 0 at ui/codegen/issue-16602-1.rs:5:25: 5:31

    bb0: {
        _2 = [const 2_i32, const 2_i32]; // scope 0 at ui/codegen/issue-16602-1.rs:5:25: 5:31
        _1 = &_2;                        // scope 0 at ui/codegen/issue-16602-1.rs:5:24: 5:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/codegen/issue-16602-1.rs:3:21: 3:22

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/codegen/issue-16602-1.rs:3:21: 3:22
        return;                          // scope 0 at ui/codegen/issue-16602-1.rs:3:21: 3:22
    }
}
