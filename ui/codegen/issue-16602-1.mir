// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: [i32; 2];
    let mut _2: i32;
    let mut _3: i32;
    let _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: i32;
    let mut _8: i32;
    let _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: (&&[i32], &&[i32; 2]);
    let mut _13: &&[i32];
    let _14: &[i32];
    let _15: &[i32];
    let mut _16: &[i32; 2];
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug t => _1;
        let _17: &&[i32];
        let _18: &&[i32; 2];
        let mut _24: &&[i32; 2];
        scope 2 {
            debug left_val => _17;
            debug right_val => _18;
            let _21: core::panicking::AssertKind;
            scope 3 {
                debug kind => _21;
            }
        }
    }

    bb0: {
        _1 = [const 1_i32; 2];
        _4 = const 1_usize;
        _5 = const 2_usize;
        _6 = Lt(_4, _5);
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _4) -> [success: bb1, unwind continue];
    }

    bb1: {
        _3 = _1[_4];
        _2 = Mul(move _3, const 2_i32);
        _9 = const 0_usize;
        _10 = const 2_usize;
        _11 = Lt(_9, _10);
        assert(move _11, "index out of bounds: the length is {} but the index is {}", move _10, _9) -> [success: bb2, unwind continue];
    }

    bb2: {
        _8 = _1[_9];
        _7 = Mul(move _8, const 2_i32);
        _1 = [move _2, move _7];
        _16 = &_1;
        _15 = <[i32; 2] as Index<RangeFull>>::index(move _16, const RangeFull) -> [return: bb3, unwind continue];
    }

    bb3: {
        _14 = _15;
        _13 = &_14;
        _24 = const _;
        _12 = (move _13, _24);
        _17 = (_12.0: &&[i32]);
        _18 = (_12.1: &&[i32; 2]);
        _20 = <&[i32] as PartialEq<&[i32; 2]>>::eq(_17, _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<&[i32], &[i32; 2]>(move _21, _17, _18, move _23) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &&[i32; 2] = {
    let mut _0: &&[i32; 2];
    let mut _1: &[i32; 2];
    let mut _2: [i32; 2];

    bb0: {
        _2 = [const 2_i32, const 2_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 2_usize;
        return;
    }
}
