// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-55976.rs:6:11: 6:11
    let _1: ();                          // in scope 0 at ui/codegen/issue-55976.rs:7:5: 7:23
    let mut _2: for<'a> fn(&'a std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>) -> &'a std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(&u8)>>; // in scope 0 at ui/codegen/issue-55976.rs:7:16: 7:22
    let mut _3: [closure@ui/codegen/issue-55976.rs:7:16: 7:19]; // in scope 0 at ui/codegen/issue-55976.rs:7:16: 7:22

    bb0: {
        _2 = move _3 as for<'a> fn(&'a std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>) -> &'a std::vec::Vec<std::boxed::Box<dyn std::ops::Fn(&u8)>> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/codegen/issue-55976.rs:7:16: 7:22
        _1 = type_error::<&u8>(move _2) -> bb1; // scope 0 at ui/codegen/issue-55976.rs:7:5: 7:23
                                         // mir::Constant
                                         // + span: ui/codegen/issue-55976.rs:7:5: 7:15
                                         // + literal: Const { ty: fn(for<'a> fn(&'a Vec<Box<(dyn for<'b> Fn(&'b u8) + 'static)>>) -> &'a Vec<Box<(dyn Fn(&u8) + 'static)>>) {type_error::<&u8>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/codegen/issue-55976.rs:8:2: 8:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/codegen/issue-55976.rs:7:16: 7:19], _2: &Vec<Box<dyn for<'b> Fn(&'b u8)>>) -> &Vec<Box<dyn for<'b> Fn(&'b u8)>> {
    debug x => _2;                       // in scope 0 at ui/codegen/issue-55976.rs:7:17: 7:18
    let mut _0: &std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>; // return place in scope 0 at ui/codegen/issue-55976.rs:7:20: 7:22
    let _3: &&std::vec::Vec<std::boxed::Box<dyn for<'b> std::ops::Fn(&'b u8)>>; // in scope 0 at ui/codegen/issue-55976.rs:7:20: 7:22

    bb0: {
        _3 = &_2;                        // scope 0 at ui/codegen/issue-55976.rs:7:20: 7:22
        _0 = deref_copy (*_3);           // scope 0 at ui/codegen/issue-55976.rs:7:20: 7:22
        return;                          // scope 0 at ui/codegen/issue-55976.rs:7:22: 7:22
    }
}

fn type_error(_1: for<'a> fn(&'a Vec<Box<dyn for<'b> Fn(&'b u8)>>) -> &'a Vec<Box<dyn Fn(T)>>) -> () {
    debug _selector => _1;               // in scope 0 at ui/codegen/issue-55976.rs:11:5: 11:14
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-55976.rs:12:3: 12:3

    bb0: {
        return;                          // scope 0 at ui/codegen/issue-55976.rs:13:2: 13:2
    }
}
