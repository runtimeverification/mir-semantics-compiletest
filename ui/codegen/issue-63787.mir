// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn break_if_r_is_noalias(_1: &RefCell<i32>, _2: impl Deref<Target = i32>) -> i32 {
    debug rc => _1;                      // in scope 0 at ui/codegen/issue-63787.rs:13:30: 13:32
    debug r => _2;                       // in scope 0 at ui/codegen/issue-63787.rs:13:49: 13:50
    let mut _0: i32;                     // return place in scope 0 at ui/codegen/issue-63787.rs:13:81: 13:84
    let _3: *const i32;                  // in scope 0 at ui/codegen/issue-63787.rs:14:9: 14:13
    let _4: &i32;                        // in scope 0 at ui/codegen/issue-63787.rs:14:16: 14:19
    let _5: &i32;                        // in scope 0 at ui/codegen/issue-63787.rs:14:17: 14:19
    let mut _6: &impl Deref<Target = i32>; // in scope 0 at ui/codegen/issue-63787.rs:14:18: 14:19
    let mut _8: &i32;                    // in scope 0 at ui/codegen/issue-63787.rs:15:13: 15:15
    let mut _9: &impl Deref<Target = i32>; // in scope 0 at ui/codegen/issue-63787.rs:15:14: 15:15
    let _10: ();                         // in scope 0 at ui/codegen/issue-63787.rs:16:5: 16:12
    let mut _11: impl Deref<Target = i32>; // in scope 0 at ui/codegen/issue-63787.rs:16:10: 16:11
    let mut _12: &mut i32;               // in scope 0 at ui/codegen/issue-63787.rs:17:5: 17:21
    let mut _13: &mut std::cell::RefMut<'_, i32>; // in scope 0 at ui/codegen/issue-63787.rs:17:6: 17:21
    let mut _14: std::cell::RefMut<'_, i32>; // in scope 0 at ui/codegen/issue-63787.rs:17:6: 17:21
    let mut _15: &std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:17:6: 17:21
    let mut _17: &std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:18:14: 18:25
    let _19: &i32;                       // in scope 0 at ui/codegen/issue-63787.rs:19:16: 19:20
    let _20: &i32;                       // in scope 0 at ui/codegen/issue-63787.rs:19:17: 19:20
    let mut _21: &std::cell::Ref<'_, i32>; // in scope 0 at ui/codegen/issue-63787.rs:19:18: 19:20
    let mut _22: bool;                   // in scope 0 at ui/codegen/issue-63787.rs:20:8: 20:20
    let mut _23: *const i32;             // in scope 0 at ui/codegen/issue-63787.rs:20:8: 20:12
    let mut _24: *const i32;             // in scope 0 at ui/codegen/issue-63787.rs:20:16: 20:20
    let mut _25: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _26: i32;                    // in scope 0 at ui/codegen/issue-63787.rs:25:5: 25:6
    let mut _27: i32;                    // in scope 0 at ui/codegen/issue-63787.rs:25:9: 25:12
    let mut _28: &i32;                   // in scope 0 at ui/codegen/issue-63787.rs:25:9: 25:12
    let mut _29: &std::cell::Ref<'_, i32>; // in scope 0 at ui/codegen/issue-63787.rs:25:10: 25:12
    let mut _30: (i32, bool);            // in scope 0 at ui/codegen/issue-63787.rs:25:5: 25:12
    let mut _31: bool;                   // in scope 0 at ui/codegen/issue-63787.rs:26:1: 26:2
    scope 1 {
        debug ptr1 => _3;                // in scope 1 at ui/codegen/issue-63787.rs:14:9: 14:13
        let _7: i32;                     // in scope 1 at ui/codegen/issue-63787.rs:15:9: 15:10
        scope 2 {
            debug a => _7;               // in scope 2 at ui/codegen/issue-63787.rs:15:9: 15:10
            let _16: std::cell::Ref<'_, i32>; // in scope 2 at ui/codegen/issue-63787.rs:18:9: 18:11
            scope 3 {
                debug r2 => _16;         // in scope 3 at ui/codegen/issue-63787.rs:18:9: 18:11
                let _18: *const i32;     // in scope 3 at ui/codegen/issue-63787.rs:19:9: 19:13
                scope 4 {
                    debug ptr2 => _18;   // in scope 4 at ui/codegen/issue-63787.rs:19:9: 19:13
                }
            }
        }
    }

    bb0: {
        _31 = const false;               // scope 0 at ui/codegen/issue-63787.rs:14:9: 14:13
        _31 = const true;                // scope 0 at ui/codegen/issue-63787.rs:14:9: 14:13
        _6 = &_2;                        // scope 0 at ui/codegen/issue-63787.rs:14:18: 14:19
        _5 = <impl Deref<Target = i32> as Deref>::deref(move _6) -> [return: bb1, unwind: bb18]; // scope 0 at ui/codegen/issue-63787.rs:14:17: 14:19
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:14:17: 14:19
                                         // + literal: Const { ty: for<'a> fn(&'a impl Deref<Target = i32>) -> &'a <impl Deref<Target = i32> as Deref>::Target {<impl Deref<Target = i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/codegen/issue-63787.rs:14:16: 14:19
        _3 = &raw const (*_4);           // scope 0 at ui/codegen/issue-63787.rs:14:16: 14:19
        _9 = &_2;                        // scope 1 at ui/codegen/issue-63787.rs:15:14: 15:15
        _8 = <impl Deref<Target = i32> as Deref>::deref(move _9) -> [return: bb2, unwind: bb18]; // scope 1 at ui/codegen/issue-63787.rs:15:13: 15:15
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:15:13: 15:15
                                         // + literal: Const { ty: for<'a> fn(&'a impl Deref<Target = i32>) -> &'a <impl Deref<Target = i32> as Deref>::Target {<impl Deref<Target = i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = (*_8);                      // scope 1 at ui/codegen/issue-63787.rs:15:13: 15:15
        _31 = const false;               // scope 2 at ui/codegen/issue-63787.rs:16:10: 16:11
        _11 = move _2;                   // scope 2 at ui/codegen/issue-63787.rs:16:10: 16:11
        _10 = std::mem::drop::<impl Deref<Target = i32>>(move _11) -> [return: bb3, unwind: bb18]; // scope 2 at ui/codegen/issue-63787.rs:16:5: 16:12
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:16:5: 16:9
                                         // + literal: Const { ty: fn(impl Deref<Target = i32>) {std::mem::drop::<impl Deref<Target = i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = _1;                        // scope 2 at ui/codegen/issue-63787.rs:17:6: 17:21
        _14 = RefCell::<i32>::borrow_mut(move _15) -> [return: bb4, unwind: bb18]; // scope 2 at ui/codegen/issue-63787.rs:17:6: 17:21
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:17:9: 17:19
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> RefMut<'a, i32> {RefCell::<i32>::borrow_mut}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &mut _14;                  // scope 2 at ui/codegen/issue-63787.rs:17:6: 17:21
        _12 = <RefMut<'_, i32> as DerefMut>::deref_mut(move _13) -> [return: bb5, unwind: bb15]; // scope 2 at ui/codegen/issue-63787.rs:17:5: 17:21
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:17:5: 17:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, i32>) -> &'a mut <RefMut<'_, i32> as Deref>::Target {<RefMut<'_, i32> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb5: {
        (*_12) = const 2_i32;            // scope 2 at ui/codegen/issue-63787.rs:17:5: 17:25
        drop(_14) -> [return: bb6, unwind: bb18]; // scope 2 at ui/codegen/issue-63787.rs:17:25: 17:26
    }

    bb6: {
        _17 = _1;                        // scope 2 at ui/codegen/issue-63787.rs:18:14: 18:25
        _16 = RefCell::<i32>::borrow(move _17) -> [return: bb7, unwind: bb18]; // scope 2 at ui/codegen/issue-63787.rs:18:14: 18:25
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:18:17: 18:23
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> Ref<'a, i32> {RefCell::<i32>::borrow}, val: Value(<ZST>) }
    }

    bb7: {
        _21 = &_16;                      // scope 3 at ui/codegen/issue-63787.rs:19:18: 19:20
        _20 = <Ref<'_, i32> as Deref>::deref(move _21) -> [return: bb8, unwind: bb14]; // scope 3 at ui/codegen/issue-63787.rs:19:17: 19:20
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:19:17: 19:20
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, i32>) -> &'a <Ref<'_, i32> as Deref>::Target {<Ref<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = _20;                       // scope 3 at ui/codegen/issue-63787.rs:19:16: 19:20
        _18 = &raw const (*_19);         // scope 3 at ui/codegen/issue-63787.rs:19:16: 19:20
        _23 = _18;                       // scope 4 at ui/codegen/issue-63787.rs:20:8: 20:12
        _24 = _3;                        // scope 4 at ui/codegen/issue-63787.rs:20:16: 20:20
        _22 = Ne(move _23, move _24);    // scope 4 at ui/codegen/issue-63787.rs:20:8: 20:20
        switchInt(move _22) -> [0: bb10, otherwise: bb9]; // scope 4 at ui/codegen/issue-63787.rs:20:8: 20:20
    }

    bb9: {
        _25 = begin_panic::<&str>(const "explicit panic") -> bb14; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _26 = _7;                        // scope 4 at ui/codegen/issue-63787.rs:25:5: 25:6
        _29 = &_16;                      // scope 4 at ui/codegen/issue-63787.rs:25:10: 25:12
        _28 = <Ref<'_, i32> as Deref>::deref(move _29) -> [return: bb11, unwind: bb14]; // scope 4 at ui/codegen/issue-63787.rs:25:9: 25:12
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:25:9: 25:12
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, i32>) -> &'a <Ref<'_, i32> as Deref>::Target {<Ref<'_, i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _27 = (*_28);                    // scope 4 at ui/codegen/issue-63787.rs:25:9: 25:12
        _30 = CheckedAdd(_26, _27);      // scope 4 at ui/codegen/issue-63787.rs:25:5: 25:12
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _26, move _27) -> [success: bb12, unwind: bb14]; // scope 4 at ui/codegen/issue-63787.rs:25:5: 25:12
    }

    bb12: {
        _0 = move (_30.0: i32);          // scope 4 at ui/codegen/issue-63787.rs:25:5: 25:12
        drop(_16) -> [return: bb13, unwind: bb18]; // scope 2 at ui/codegen/issue-63787.rs:26:1: 26:2
    }

    bb13: {
        return;                          // scope 0 at ui/codegen/issue-63787.rs:26:2: 26:2
    }

    bb14 (cleanup): {
        drop(_16) -> bb18;               // scope 2 at ui/codegen/issue-63787.rs:26:1: 26:2
    }

    bb15 (cleanup): {
        drop(_14) -> bb18;               // scope 2 at ui/codegen/issue-63787.rs:17:25: 17:26
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/codegen/issue-63787.rs:13:1: 26:2
    }

    bb17 (cleanup): {
        drop(_2) -> bb16;                // scope 0 at ui/codegen/issue-63787.rs:26:1: 26:2
    }

    bb18 (cleanup): {
        switchInt(_31) -> [0: bb16, otherwise: bb17]; // scope 0 at ui/codegen/issue-63787.rs:26:1: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-63787.rs:28:11: 28:11
    let mut _1: std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:29:9: 29:15
    let mut _3: &std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:30:37: 30:40
    let _4: &std::cell::RefCell<i32>;    // in scope 0 at ui/codegen/issue-63787.rs:30:37: 30:40
    let mut _5: std::cell::Ref<'_, i32>; // in scope 0 at ui/codegen/issue-63787.rs:30:42: 30:53
    let mut _6: &std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:30:42: 30:53
    let mut _7: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &mut i32;               // in scope 0 at ui/codegen/issue-63787.rs:33:6: 33:18
    let mut _25: &mut std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:33:6: 33:18
    let mut _27: &std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:34:37: 34:40
    let _28: &std::cell::RefCell<i32>;   // in scope 0 at ui/codegen/issue-63787.rs:34:37: 34:40
    let mut _29: std::cell::RefMut<'_, i32>; // in scope 0 at ui/codegen/issue-63787.rs:34:42: 34:57
    let mut _30: &std::cell::RefCell<i32>; // in scope 0 at ui/codegen/issue-63787.rs:34:42: 34:57
    let mut _31: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug rc => _1;                  // in scope 1 at ui/codegen/issue-63787.rs:29:9: 29:15
        let _2: i32;                     // in scope 1 at ui/codegen/issue-63787.rs:30:9: 30:12
        scope 2 {
            debug res => _2;             // in scope 2 at ui/codegen/issue-63787.rs:30:9: 30:12
            let _10: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _26: i32;                // in scope 2 at ui/codegen/issue-63787.rs:34:9: 34:12
            let mut _49: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug res => _26;        // in scope 5 at ui/codegen/issue-63787.rs:34:9: 34:12
                let _34: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _35: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _48: &i32;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _34; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _35; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _40: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _40; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _1 = RefCell::<i32>::new(const 1_i32) -> bb1; // scope 0 at ui/codegen/issue-63787.rs:29:18: 29:33
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:29:18: 29:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> RefCell<i32> {RefCell::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at ui/codegen/issue-63787.rs:30:37: 30:40
        _3 = _4;                         // scope 1 at ui/codegen/issue-63787.rs:30:37: 30:40
        _6 = &_1;                        // scope 1 at ui/codegen/issue-63787.rs:30:42: 30:53
        _5 = RefCell::<i32>::borrow(move _6) -> bb2; // scope 1 at ui/codegen/issue-63787.rs:30:42: 30:53
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:30:45: 30:51
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> Ref<'a, i32> {RefCell::<i32>::borrow}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = break_if_r_is_noalias::<Ref<'_, i32>>(move _3, move _5) -> bb3; // scope 1 at ui/codegen/issue-63787.rs:30:15: 30:54
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:30:15: 30:36
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>, Ref<'_, i32>) -> i32 {break_if_r_is_noalias::<Ref<'_, i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _9 = _49;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 3_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i32, i32>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = &mut _1;                   // scope 2 at ui/codegen/issue-63787.rs:33:6: 33:18
        _24 = RefCell::<i32>::get_mut(move _25) -> bb6; // scope 2 at ui/codegen/issue-63787.rs:33:6: 33:18
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:33:9: 33:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefCell<i32>) -> &'a mut i32 {RefCell::<i32>::get_mut}, val: Value(<ZST>) }
    }

    bb6: {
        (*_24) = const 1_i32;            // scope 2 at ui/codegen/issue-63787.rs:33:5: 33:22
        _28 = &_1;                       // scope 2 at ui/codegen/issue-63787.rs:34:37: 34:40
        _27 = _28;                       // scope 2 at ui/codegen/issue-63787.rs:34:37: 34:40
        _30 = &_1;                       // scope 2 at ui/codegen/issue-63787.rs:34:42: 34:57
        _29 = RefCell::<i32>::borrow_mut(move _30) -> bb7; // scope 2 at ui/codegen/issue-63787.rs:34:42: 34:57
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:34:45: 34:55
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>) -> RefMut<'a, i32> {RefCell::<i32>::borrow_mut}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = break_if_r_is_noalias::<RefMut<'_, i32>>(move _27, move _29) -> bb8; // scope 2 at ui/codegen/issue-63787.rs:34:15: 34:58
                                         // mir::Constant
                                         // + span: ui/codegen/issue-63787.rs:34:15: 34:36
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<i32>, RefMut<'_, i32>) -> i32 {break_if_r_is_noalias::<RefMut<'_, i32>>}, val: Value(<ZST>) }
    }

    bb8: {
        _32 = &_26;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _48 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _33 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _31 = (move _32, move _33);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_31.0: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_31.1: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = (*_34);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = const 3_i32;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = Eq(move _38, move _39);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _36 = Not(move _37);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb10, otherwise: bb9]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _40 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<i32, i32>(move _42, move _43, move _45, move _47); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/codegen/issue-63787.rs:36:2: 36:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/codegen/issue-63787.rs:35:21: 35:22

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/codegen/issue-63787.rs:35:21: 35:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/codegen/issue-63787.rs:31:21: 31:22

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/codegen/issue-63787.rs:31:21: 31:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
