// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn indirect_get_slice() -> &[usize] {
    let mut _0: &[usize];
    let mut _1: &[usize; 0];

    bb0: {
        _1 = const _;
        _0 = _1 as &[usize] (Pointer(Unsize));
        return;
    }
}

promoted[0] in indirect_get_slice: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

fn get_slice() -> &[usize] {
    let mut _0: &[usize];
    let _1: &[usize];
    scope 1 {
        debug ret => _1;
    }

    bb0: {
        _1 = indirect_get_slice() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: &[usize];
    let _3: &[usize];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug output => _1;
        let _6: &usize;
        let _7: &usize;
        let mut _15: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _3 = get_slice() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _3;
        _1 = Len((*_2));
        _5 = &_1;
        _15 = const _;
        _4 = (move _5, _15);
        _6 = (_4.0: &usize);
        _7 = (_4.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}
