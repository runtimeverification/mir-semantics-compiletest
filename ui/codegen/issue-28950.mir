// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const LEN: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/codegen/issue-28950.rs:11:12: 11:17
    let mut _1: (usize, bool);           // in scope 0 at ui/codegen/issue-28950.rs:11:20: 11:27

    bb0: {
        _1 = CheckedShl(const 1_usize, const 15_i32); // scope 0 at ui/codegen/issue-28950.rs:11:20: 11:27
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const 15_i32) -> bb1; // scope 0 at ui/codegen/issue-28950.rs:11:20: 11:27
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/codegen/issue-28950.rs:11:20: 11:27
        return;                          // scope 0 at ui/codegen/issue-28950.rs:11:1: 11:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-28950.rs:15:11: 15:11
    let mut _1: bool;                    // in scope 0 at ui/codegen/issue-28950.rs:16:5: 21:32
    let mut _2: bool;                    // in scope 0 at ui/codegen/issue-28950.rs:16:13: 21:31
    let mut _3: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/codegen/issue-28950.rs:16:13: 21:31
    let _4: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/codegen/issue-28950.rs:16:13: 21:23
    let mut _5: std::thread::JoinHandle<()>; // in scope 0 at ui/codegen/issue-28950.rs:16:13: 21:16
    let mut _6: std::result::Result<std::thread::JoinHandle<()>, std::io::Error>; // in scope 0 at ui/codegen/issue-28950.rs:16:13: 21:7
    let mut _7: std::thread::Builder;    // in scope 0 at ui/codegen/issue-28950.rs:16:13: 16:47
    let mut _8: std::thread::Builder;    // in scope 0 at ui/codegen/issue-28950.rs:16:13: 16:27
    let mut _9: usize;                   // in scope 0 at ui/codegen/issue-28950.rs:16:39: 16:46
    let mut _10: [closure@ui/codegen/issue-28950.rs:16:54: 16:56]; // in scope 0 at ui/codegen/issue-28950.rs:16:54: 21:6
    let mut _11: !;                      // in scope 0 at ui/codegen/issue-28950.rs:16:5: 21:32
    let mut _12: bool;                   // in scope 0 at ui/codegen/issue-28950.rs:16:46: 16:47

    bb0: {
        _12 = const false;               // scope 0 at ui/codegen/issue-28950.rs:16:5: 21:32
        _12 = const true;                // scope 0 at ui/codegen/issue-28950.rs:16:13: 16:27
        _8 = Builder::new() -> bb1;      // scope 0 at ui/codegen/issue-28950.rs:16:13: 16:27
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:16:13: 16:25
                                         // + literal: Const { ty: fn() -> Builder {Builder::new}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const 16384_usize;          // scope 0 at ui/codegen/issue-28950.rs:16:39: 16:46
        _12 = const false;               // scope 0 at ui/codegen/issue-28950.rs:16:13: 16:47
        _7 = Builder::stack_size(move _8, move _9) -> [return: bb2, unwind: bb13]; // scope 0 at ui/codegen/issue-28950.rs:16:13: 16:47
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:16:28: 16:38
                                         // + literal: Const { ty: fn(Builder, usize) -> Builder {Builder::stack_size}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = const false;               // scope 0 at ui/codegen/issue-28950.rs:16:46: 16:47
        _6 = Builder::spawn::<[closure@ui/codegen/issue-28950.rs:16:54: 16:56], ()>(move _7, move _10) -> bb3; // scope 0 at ui/codegen/issue-28950.rs:16:13: 21:7
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:16:48: 16:53
                                         // + literal: Const { ty: fn(Builder, [closure@ui/codegen/issue-28950.rs:16:54: 16:56]) -> Result<JoinHandle<()>, std::io::Error> {Builder::spawn::<[closure@ui/codegen/issue-28950.rs:16:54: 16:56], ()>}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Result::<JoinHandle<()>, std::io::Error>::unwrap(move _6) -> bb4; // scope 0 at ui/codegen/issue-28950.rs:16:13: 21:16
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:21:8: 21:14
                                         // + literal: Const { ty: fn(Result<JoinHandle<()>, std::io::Error>) -> JoinHandle<()> {Result::<JoinHandle<()>, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = JoinHandle::<()>::join(move _5) -> bb5; // scope 0 at ui/codegen/issue-28950.rs:16:13: 21:23
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:21:17: 21:21
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb5: {
        _3 = &_4;                        // scope 0 at ui/codegen/issue-28950.rs:16:13: 21:31
        _2 = Result::<(), Box<dyn Any + Send>>::is_ok(move _3) -> [return: bb6, unwind: bb10]; // scope 0 at ui/codegen/issue-28950.rs:16:13: 21:31
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:21:24: 21:29
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_ok}, val: Value(<ZST>) }
    }

    bb6: {
        _1 = Not(move _2);               // scope 0 at ui/codegen/issue-28950.rs:16:5: 21:32
        drop(_4) -> bb7;                 // scope 0 at ui/codegen/issue-28950.rs:21:31: 21:32
    }

    bb7: {
        switchInt(move _1) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/codegen/issue-28950.rs:16:5: 21:32
    }

    bb8: {
        _11 = core::panicking::panic(const "assertion failed: Builder::new().stack_size(LEN /\\n                        2).spawn(||\\n                    {\\n                        let vec =\\n                            vec![unsafe { std :: mem :: zeroed :: < [u8 ; LEN] > () }];\\n                        assert_eq!(vec.len(), 1);\\n                    }).unwrap().join().is_ok()"); // scope 0 at ui/codegen/issue-28950.rs:16:5: 21:32
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:16:5: 21:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        return;                          // scope 0 at ui/codegen/issue-28950.rs:22:2: 22:2
    }

    bb10 (cleanup): {
        drop(_4) -> bb11;                // scope 0 at ui/codegen/issue-28950.rs:21:31: 21:32
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/codegen/issue-28950.rs:15:1: 22:2
    }

    bb12 (cleanup): {
        drop(_8) -> bb11;                // scope 0 at ui/codegen/issue-28950.rs:16:46: 16:47
    }

    bb13 (cleanup): {
        switchInt(_12) -> [0: bb11, otherwise: bb12]; // scope 0 at ui/codegen/issue-28950.rs:16:46: 16:47
    }
}

fn main::{closure#0}(_1: [closure@ui/codegen/issue-28950.rs:16:54: 16:56]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/codegen/issue-28950.rs:16:57: 16:57
    let _2: std::vec::Vec<[u8; 32768]>;  // in scope 0 at ui/codegen/issue-28950.rs:19:13: 19:16
    let mut _3: std::boxed::Box<[[u8; 32768]]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: std::boxed::Box<[[u8; 32768]; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::boxed::Box<[[u8; 32768]; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: [u8; 32768];             // in scope 0 at ui/codegen/issue-28950.rs:19:24: 19:66
    let mut _10: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: usize;                      // in scope 0 at ui/codegen/issue-28950.rs:20:20: 20:29
    let mut _13: &std::vec::Vec<[u8; 32768]>; // in scope 0 at ui/codegen/issue-28950.rs:20:20: 20:29
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _31: *const [[u8; 32768]; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug vec => _2;                 // in scope 1 at ui/codegen/issue-28950.rs:19:13: 19:16
        let _15: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _16: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _29: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 4 {
            debug left_val => _15;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _16;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _21: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _21;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }
    scope 3 {
    }

    bb0: {
        _5 = const 32768_usize;          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [[u8; 32768]; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = zeroed::<[u8; 32768]>() -> [return: bb2, unwind: bb10]; // scope 3 at ui/codegen/issue-28950.rs:19:33: 19:64
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:19:33: 19:62
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: unsafe fn() -> [u8; 32768] {zeroed::<[u8; 32768]>}, val: Value(<ZST>) }
    }

    bb2: {
        _31 = (((_8.0: std::ptr::Unique<[[u8; 32768]; 1]>).0: std::ptr::NonNull<[[u8; 32768]; 1]>).0: *const [[u8; 32768]; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_31) = [move _9];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _4 = move _8;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = move _4 as std::boxed::Box<[[u8; 32768]]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = slice::<impl [[u8; 32768]]>::into_vec::<std::alloc::Global>(move _3) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[[u8; 32768]]>) -> Vec<[u8; 32768]> {slice::<impl [[u8; 32768]]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &_2;                       // scope 1 at ui/codegen/issue-28950.rs:20:20: 20:29
        _12 = Vec::<[u8; 32768]>::len(move _13) -> [return: bb4, unwind: bb8]; // scope 1 at ui/codegen/issue-28950.rs:20:20: 20:29
                                         // mir::Constant
                                         // + span: ui/codegen/issue-28950.rs:20:24: 20:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<[u8; 32768]>) -> usize {Vec::<[u8; 32768]>::len}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _14 = _29;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _14);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_10.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_10.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = (*_15);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = (*_16);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = Eq(move _19, move _20);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _17 = Not(move _18);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<usize, usize>(move _23, move _24, move _26, move _28) -> bb8; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb7;                 // scope 0 at ui/codegen/issue-28950.rs:21:5: 21:6
    }

    bb7: {
        return;                          // scope 0 at ui/codegen/issue-28950.rs:21:6: 21:6
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/codegen/issue-28950.rs:21:5: 21:6
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/codegen/issue-28950.rs:16:54: 21:6
    }

    bb10 (cleanup): {
        _30 = alloc::alloc::box_free::<[[u8; 32768]; 1], std::alloc::Global>(move (_8.0: std::ptr::Unique<[[u8; 32768]; 1]>), move (_8.1: std::alloc::Global)) -> bb9; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[[u8; 32768]; 1]>, std::alloc::Global) {alloc::alloc::box_free::<[[u8; 32768]; 1], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main::{closure#0}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/codegen/issue-28950.rs:20:31: 20:32

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/codegen/issue-28950.rs:20:31: 20:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/codegen/issue-28950.rs:19:57: 19:60

    bb0: {
        _0 = const _;                    // scope 0 at ui/codegen/issue-28950.rs:19:57: 19:60
        return;                          // scope 0 at ui/codegen/issue-28950.rs:19:57: 19:60
    }
}
