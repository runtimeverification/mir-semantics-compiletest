// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn is_fn() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:5:38: 5:38

    bb0: {
        return;                          // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:5:40: 5:40
    }
}

fn is_fn2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:6:47: 6:47

    bb0: {
        return;                          // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:6:49: 6:49
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:10:11: 10:11
    let _1: ();                          // in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:11:5: 11:44
    let _2: ();                          // in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:12:5: 12:61
    let _3: ();                          // in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:13:5: 13:63
    let _4: ();                          // in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:14:5: 14:63

    bb0: {
        _1 = is_fn::<for<'a> fn(&'a ()) -> &'a ()>() -> bb1; // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:11:5: 11:44
                                         // mir::Constant
                                         // + span: ui/function-pointer/sized-ret-with-binder.rs:11:5: 11:42
                                         // + literal: Const { ty: fn() {is_fn::<for<'a> fn(&'a ()) -> &'a ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = is_fn::<for<'a> fn(&'a ()) -> &'a (dyn Debug + 'a)>() -> bb2; // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:12:5: 12:61
                                         // mir::Constant
                                         // + span: ui/function-pointer/sized-ret-with-binder.rs:12:5: 12:59
                                         // + literal: Const { ty: fn() {is_fn::<for<'a> fn(&'a ()) -> &'a (dyn Debug + 'a)>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> Outlives<'a, 'b>>() -> bb3; // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:13:5: 13:63
                                         // mir::Constant
                                         // + span: ui/function-pointer/sized-ret-with-binder.rs:13:5: 13:61
                                         // + literal: Const { ty: fn() {is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> Outlives<'a, 'b>>}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> (&'a (), &'a ())>() -> bb4; // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:14:5: 14:63
                                         // mir::Constant
                                         // + span: ui/function-pointer/sized-ret-with-binder.rs:14:5: 14:61
                                         // + literal: Const { ty: fn() {is_fn2::<for<'a, 'b> fn(&'a &'b ()) -> (&'a (), &'a ())>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:15:2: 15:2
    }
}

fn Outlives(_1: PhantomData<&&()>) -> Outlives<'_, '_> {
    let mut _0: Outlives<'_, '_>;        // return place in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:8:1: 8:24

    bb0: {
        _0 = Outlives::<'_, '_>(move _1); // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:8:1: 8:24
        return;                          // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:8:1: 8:24
    }
}

// MIR FOR CTFE
fn Outlives(_1: PhantomData<&&()>) -> Outlives<'_, '_> {
    let mut _0: Outlives<'_, '_>;        // return place in scope 0 at ui/function-pointer/sized-ret-with-binder.rs:8:1: 8:24

    bb0: {
        _0 = Outlives::<'_, '_>(move _1); // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:8:1: 8:24
        return;                          // scope 0 at ui/function-pointer/sized-ret-with-binder.rs:8:1: 8:24
    }
}
