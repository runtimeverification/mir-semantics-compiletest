// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Parser::parse(_1: &mut Self, _2: &str) -> Result<(), ()> {
    debug self => _1;                    // in scope 0 at ui/function-pointer/issue-102289.rs:5:14: 5:23
    debug _input => _2;                  // in scope 0 at ui/function-pointer/issue-102289.rs:5:25: 5:31
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at ui/function-pointer/issue-102289.rs:5:42: 5:56

    bb0: {
        goto -> bb1;                     // scope 0 at ui/function-pointer/issue-102289.rs:6:9: 6:16
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/function-pointer/issue-102289.rs:6:9: 6:16
    }
}

fn Parser::map(_1: Self, _2: F) -> Map<Self, F> {
    debug self => _1;                    // in scope 0 at ui/function-pointer/issue-102289.rs:8:18: 8:22
    debug _f => _2;                      // in scope 0 at ui/function-pointer/issue-102289.rs:8:24: 8:26
    let mut _0: Map<Self, F>;            // return place in scope 0 at ui/function-pointer/issue-102289.rs:8:34: 8:46
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/function-pointer/issue-102289.rs:13:5: 13:6
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/function-pointer/issue-102289.rs:13:5: 13:6
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/function-pointer/issue-102289.rs:8:5: 13:6
    }
}

fn chainl1(_1: P, _2: Op) -> Chainl1<P, Op> {
    debug _parser => _1;                 // in scope 0 at ui/function-pointer/issue-102289.rs:25:30: 25:37
    debug _op => _2;                     // in scope 0 at ui/function-pointer/issue-102289.rs:25:42: 25:45
    let mut _0: Chainl1<P, Op>;          // return place in scope 0 at ui/function-pointer/issue-102289.rs:25:54: 25:68

    bb0: {
        goto -> bb1;                     // scope 0 at ui/function-pointer/issue-102289.rs:31:5: 31:12
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/function-pointer/issue-102289.rs:31:5: 31:12
    }
}

fn chainl1_error_consume() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/function-pointer/issue-102289.rs:47:32: 47:32
    let mut _1: std::result::Result<(), ()>; // in scope 0 at ui/function-pointer/issue-102289.rs:51:13: 51:51
    let mut _2: &mut Chainl1<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>>; // in scope 0 at ui/function-pointer/issue-102289.rs:51:13: 51:51
    let mut _3: Chainl1<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>>; // in scope 0 at ui/function-pointer/issue-102289.rs:51:13: 51:41
    let mut _4: Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>; // in scope 0 at ui/function-pointer/issue-102289.rs:51:24: 51:40
    let mut _5: [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]; // in scope 0 at ui/function-pointer/issue-102289.rs:51:30: 51:39
    let mut _6: &str;                    // in scope 0 at ui/function-pointer/issue-102289.rs:51:48: 51:50
    let _7: &str;                        // in scope 0 at ui/function-pointer/issue-102289.rs:51:48: 51:50
    scope 1 {
    }

    bb0: {
        _4 = <u32 as Parser>::map::<[closure@ui/function-pointer/issue-102289.rs:51:30: 51:33], fn((), ()) {first::<(), ()>}>(const 1_u32, move _5) -> bb1; // scope 0 at ui/function-pointer/issue-102289.rs:51:24: 51:40
                                         // mir::Constant
                                         // + span: ui/function-pointer/issue-102289.rs:51:26: 51:29
                                         // + literal: Const { ty: fn(u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]) -> Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]> {<u32 as Parser>::map::<[closure@ui/function-pointer/issue-102289.rs:51:30: 51:33], fn((), ()) {first::<(), ()>}>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = chainl1::<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>>(const 1_u32, move _4) -> bb2; // scope 0 at ui/function-pointer/issue-102289.rs:51:13: 51:41
                                         // mir::Constant
                                         // + span: ui/function-pointer/issue-102289.rs:51:13: 51:20
                                         // + literal: Const { ty: fn(u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>) -> Chainl1<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>> {chainl1::<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>>}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &mut _3;                    // scope 0 at ui/function-pointer/issue-102289.rs:51:13: 51:51
        _7 = const "";                   // scope 0 at ui/function-pointer/issue-102289.rs:51:48: 51:50
                                         // mir::Constant
                                         // + span: ui/function-pointer/issue-102289.rs:51:48: 51:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/function-pointer/issue-102289.rs:51:48: 51:50
        _1 = <Chainl1<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>> as Parser>::parse(move _2, move _6) -> bb3; // scope 0 at ui/function-pointer/issue-102289.rs:51:13: 51:51
                                         // mir::Constant
                                         // + span: ui/function-pointer/issue-102289.rs:51:42: 51:47
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Chainl1<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>>, &'b str) -> Result<(), ()> {<Chainl1<u32, Map<u32, [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33]>> as Parser>::parse}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:52:2: 52:2
    }
}

fn first(_1: T, _2: U) -> T {
    debug t => _1;                       // in scope 0 at ui/function-pointer/issue-102289.rs:48:20: 48:21
    let mut _0: T;                       // return place in scope 0 at ui/function-pointer/issue-102289.rs:48:35: 48:36

    bb0: {
        _0 = move _1;                    // scope 0 at ui/function-pointer/issue-102289.rs:49:9: 49:10
        drop(_2) -> bb1;                 // scope 0 at ui/function-pointer/issue-102289.rs:50:5: 50:6
    }

    bb1: {
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:50:6: 50:6
    }
}

fn chainl1_error_consume::{closure#0}(_1: &mut [closure@ui/function-pointer/issue-102289.rs:51:30: 51:33], _2: ()) -> fn((), ()) {first::<(), ()>} {
    let mut _0: fn((), ()) {chainl1_error_consume::first::<(), ()>}; // return place in scope 0 at ui/function-pointer/issue-102289.rs:51:34: 51:34

    bb0: {
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:51:39: 51:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/function-pointer/issue-102289.rs:54:11: 54:11

    bb0: {
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:54:13: 54:13
    }
}

fn Chainl1(_1: P, _2: Op) -> Chainl1<P, Op> {
    let mut _0: Chainl1<P, Op>;          // return place in scope 0 at ui/function-pointer/issue-102289.rs:16:1: 16:33

    bb0: {
        _0 = Chainl1::<P, Op>(move _1, move _2); // scope 0 at ui/function-pointer/issue-102289.rs:16:1: 16:33
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:16:1: 16:33
    }
}

// MIR FOR CTFE
fn Chainl1(_1: P, _2: Op) -> Chainl1<P, Op> {
    let mut _0: Chainl1<P, Op>;          // return place in scope 0 at ui/function-pointer/issue-102289.rs:16:1: 16:33

    bb0: {
        _0 = Chainl1::<P, Op>(move _1, move _2); // scope 0 at ui/function-pointer/issue-102289.rs:16:1: 16:33
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:16:1: 16:33
    }
}

fn Map(_1: P, _2: F) -> Map<P, F> {
    let mut _0: Map<P, F>;               // return place in scope 0 at ui/function-pointer/issue-102289.rs:34:1: 34:28

    bb0: {
        _0 = Map::<P, F>(move _1, move _2); // scope 0 at ui/function-pointer/issue-102289.rs:34:1: 34:28
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:34:1: 34:28
    }
}

// MIR FOR CTFE
fn Map(_1: P, _2: F) -> Map<P, F> {
    let mut _0: Map<P, F>;               // return place in scope 0 at ui/function-pointer/issue-102289.rs:34:1: 34:28

    bb0: {
        _0 = Map::<P, F>(move _1, move _2); // scope 0 at ui/function-pointer/issue-102289.rs:34:1: 34:28
        return;                          // scope 0 at ui/function-pointer/issue-102289.rs:34:1: 34:28
    }
}
