// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:10: 8:12>::assert_receiver_is_total_eq(_1: &Zst) -> () {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:10: 8:12
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:10: 8:12

    bb0: {
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:12: 8:12
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:14: 8:18>::hash(_1: &Zst, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:14: 8:18
    debug state => _2;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:14: 8:18
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:14: 8:18

    bb0: {
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:18: 8:18
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25>::fmt(_1: &Zst, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
    debug f => _2;                       // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
    let mut _4: &str;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
    let _5: &str;                        // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
        _5 = const "Zst";                // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:25: 8:25
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30>::cmp(_1: &Zst, _2: &Zst) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30
    debug other => _2;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30

    bb0: {
        _0 = const Equal;                // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:30: 8:30
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:32: 8:41>::eq(_1: &Zst, _2: &Zst) -> bool {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:32: 8:41
    debug other => _2;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:32: 8:41
    let mut _0: bool;                    // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:32: 8:41

    bb0: {
        _0 = const true;                 // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:32: 8:41
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:41: 8:41
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53>::partial_cmp(_1: &Zst, _2: &Zst) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53
    debug other => _2;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:8:53: 8:53
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:11:11: 11:11
    let mut _1: std::ops::Range<usize>;  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    let mut _2: std::ops::Range<usize>;  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    let mut _4: std::option::Option<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    let mut _7: isize;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:5: 24:6
    let mut _10: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: usize;                      // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:16:20: 16:32
    let mut _13: &std::collections::BTreeMap<Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:16:20: 16:32
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _29: std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    let mut _30: std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    let mut _31: usize;                  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:23: 17:26
    let mut _33: std::option::Option<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    let mut _34: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    let mut _35: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    let mut _36: isize;                  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:9: 19:10
    let _38: std::option::Option<()>;    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:13: 18:35
    let mut _39: &mut std::collections::BTreeMap<Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:13: 18:35
    let mut _40: Zst;                    // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:27: 18:30
    let mut _41: ();                     // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:32: 18:34
    let mut _42: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _43: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _44: usize;                      // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:20: 20:32
    let mut _45: &std::collections::BTreeMap<Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:20: 20:32
    let mut _46: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _47: usize;                      // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:34: 20:62
    let mut _48: usize;                  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:37: 20:40
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _53: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _54: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _56: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _57: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _58: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _59: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _60: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _61: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _63: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _64: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _65: usize;                      // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:20: 21:41
    let mut _66: std::collections::btree_map::Iter<'_, Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:20: 21:33
    let mut _67: &std::collections::BTreeMap<Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:20: 21:33
    let mut _68: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _69: usize;                      // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:43: 21:71
    let mut _70: usize;                  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:46: 21:49
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _87: bool;                       // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:46
    let mut _88: &std::option::Option<&()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:46
    let _89: std::option::Option<&()>;   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:36
    let mut _90: &std::collections::BTreeMap<Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:36
    let mut _91: &Zst;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
    let _92: &Zst;                       // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
    let mut _93: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _94: bool;                       // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:48: 22:55
    let mut _95: usize;                  // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:48: 22:51
    let mut _98: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _101: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _103: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _104: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _105: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _106: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _107: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _108: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _110: ();                        // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:23:9: 23:23
    let mut _111: &mut std::collections::BTreeMap<Zst, ()>; // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:23:9: 23:23
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
        let _8: usize;                   // in scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:9: 14:12
        scope 2 {
            debug len => _8;             // in scope 2 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:9: 14:12
            let mut _9: std::collections::BTreeMap<Zst, ()>; // in scope 2 at ui/zero-sized/zero-sized-btreemap-insert.rs:15:13: 15:23
            scope 3 {
                debug tester => _9;      // in scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:15:13: 15:23
                let _15: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _16: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _32: std::ops::Range<usize>; // in scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
                let _49: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _50: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _71: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _72: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _96: &bool;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _97: &bool;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _112: &Zst;      // in scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
                let mut _113: &usize;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _15; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _16; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _21: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _21; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug iter => _32;   // in scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
                    let _37: usize;      // in scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:13: 17:16
                    scope 7 {
                        debug bit => _37; // in scope 7 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:13: 17:16
                    }
                }
                scope 8 {
                    debug left_val => _49; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _50; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _55: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _55; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 10 {
                    debug left_val => _71; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _72; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _77: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _77; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 12 {
                    debug left_val => _96; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _97; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _102: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 13 {
                        debug kind => _102; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<usize> { start: const 0_usize, end: const _ }; // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
        _1 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
        goto -> bb2;                     // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:5: 24:6
    }

    bb2: {
        _6 = &mut _3;                    // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
        _5 = &mut (*_6);                 // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
        _4 = <std::ops::Range<usize> as Iterator>::next(move _5) -> bb3; // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_4);           // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    }

    bb4: {
        _8 = ((_4 as Some).0: usize);    // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:9: 14:12
        _9 = BTreeMap::<Zst, ()>::new() -> bb7; // scope 2 at ui/zero-sized/zero-sized-btreemap-insert.rs:15:26: 15:41
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:15:26: 15:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> BTreeMap<Zst, ()> {BTreeMap::<Zst, ()>::new}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/zero-sized/zero-sized-btreemap-insert.rs:14:16: 14:20
    }

    bb6: {
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:25:2: 25:2
    }

    bb7: {
        _13 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:16:20: 16:32
        _12 = BTreeMap::<Zst, ()>::len(move _13) -> [return: bb8, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:16:20: 16:32
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:16:27: 16:30
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<Zst, ()>) -> usize {BTreeMap::<Zst, ()>::len}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = &_12;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _113 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _14 = _113;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _14);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_10.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_10.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = (*_15);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = const 0_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = Eq(move _19, move _20);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _17 = Not(move _18);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<usize, usize>(move _23, move _24, move _26, move _28) -> bb35; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _31 = _8;                        // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:23: 17:26
        _30 = std::ops::Range::<usize> { start: const 0_usize, end: move _31 }; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
        _29 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _30) -> [return: bb11, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb11: {
        _32 = move _29;                  // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
        goto -> bb12;                    // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:9: 19:10
    }

    bb12: {
        _35 = &mut _32;                  // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
        _34 = &mut (*_35);               // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
        _33 = <std::ops::Range<usize> as Iterator>::next(move _34) -> [return: bb13, unwind: bb35]; // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb13: {
        _36 = discriminant(_33);         // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
        switchInt(move _36) -> [0: bb16, 1: bb14, otherwise: bb15]; // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    }

    bb14: {
        _37 = ((_33 as Some).0: usize);  // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:13: 17:16
        _39 = &mut _9;                   // scope 7 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:13: 18:35
        _38 = BTreeMap::<Zst, ()>::insert(move _39, move _40, move _41) -> [return: bb37, unwind: bb35]; // scope 7 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:13: 18:35
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:18:20: 18:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<Zst, ()>, Zst, ()) -> Option<()> {BTreeMap::<Zst, ()>::insert}, val: Value(<ZST>) }
    }

    bb15: {
        unreachable;                     // scope 6 at ui/zero-sized/zero-sized-btreemap-insert.rs:17:20: 17:26
    }

    bb16: {
        _45 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:20: 20:32
        _44 = BTreeMap::<Zst, ()>::len(move _45) -> [return: bb17, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:20: 20:32
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:20:27: 20:30
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<Zst, ()>) -> usize {BTreeMap::<Zst, ()>::len}, val: Value(<ZST>) }
    }

    bb17: {
        _43 = &_44;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _48 = _8;                        // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:37: 20:40
        switchInt(move _48) -> [0: bb18, otherwise: bb19]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:37: 20:45
    }

    bb18: {
        _47 = const 0_usize;             // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:48: 20:49
        goto -> bb20;                    // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:34: 20:62
    }

    bb19: {
        _47 = const 1_usize;             // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:59: 20:60
        goto -> bb20;                    // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:20:34: 20:62
    }

    bb20: {
        _46 = &_47;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _42 = (move _43, move _46);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _49 = (_42.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _50 = (_42.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _53 = (*_49);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _54 = (*_50);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _52 = Eq(move _53, move _54);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _51 = Not(move _52);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _51) -> [0: bb22, otherwise: bb21]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _55 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _57 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _59 = _49;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _58 = _59;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _61 = _50;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _60 = _61;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _56 = core::panicking::assert_failed::<usize, usize>(move _57, move _58, move _60, move _62) -> bb35; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb22: {
        _67 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:20: 21:33
        _66 = BTreeMap::<Zst, ()>::iter(move _67) -> [return: bb23, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:20: 21:33
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:21:27: 21:31
                                         // + literal: Const { ty: for<'a> fn(&'a BTreeMap<Zst, ()>) -> std::collections::btree_map::Iter<'a, Zst, ()> {BTreeMap::<Zst, ()>::iter}, val: Value(<ZST>) }
    }

    bb23: {
        _65 = <std::collections::btree_map::Iter<'_, Zst, ()> as Iterator>::count(move _66) -> [return: bb24, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:20: 21:41
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:21:34: 21:39
                                         // + literal: Const { ty: fn(std::collections::btree_map::Iter<'_, Zst, ()>) -> usize {<std::collections::btree_map::Iter<'_, Zst, ()> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb24: {
        _64 = &_65;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = _8;                        // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:46: 21:49
        switchInt(move _70) -> [0: bb25, otherwise: bb26]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:46: 21:54
    }

    bb25: {
        _69 = const 0_usize;             // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:57: 21:58
        goto -> bb27;                    // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:43: 21:71
    }

    bb26: {
        _69 = const 1_usize;             // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:68: 21:69
        goto -> bb27;                    // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:21:43: 21:71
    }

    bb27: {
        _68 = &_69;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _63 = (move _64, move _68);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_63.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_63.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = (*_71);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = (*_72);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = Eq(move _75, move _76);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _73 = Not(move _74);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb29, otherwise: bb28]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _77 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<usize, usize>(move _79, move _80, move _82, move _84) -> bb35; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb29: {
        _90 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:36
        _112 = const _;                  // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
                                         // + literal: Const { ty: &Zst, val: Unevaluated(main, [], Some(promoted[0])) }
        _92 = _112;                      // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
        _91 = _92;                       // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
        _89 = BTreeMap::<Zst, ()>::get::<Zst>(move _90, move _91) -> [return: bb30, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:36
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:22:27: 22:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a BTreeMap<Zst, ()>, &'b Zst) -> Option<&'a ()> {BTreeMap::<Zst, ()>::get::<Zst>}, val: Value(<ZST>) }
    }

    bb30: {
        _88 = &_89;                      // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:46
        _87 = Option::<&()>::is_some(move _88) -> [return: bb31, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:20: 22:46
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:22:37: 22:44
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&()>) -> bool {Option::<&()>::is_some}, val: Value(<ZST>) }
    }

    bb31: {
        _86 = &_87;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _95 = _8;                        // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:48: 22:51
        _94 = Gt(move _95, const 0_usize); // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:48: 22:55
        _93 = &_94;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _93);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _96 = (_85.0: &bool);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _97 = (_85.1: &bool);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _100 = (*_96);                   // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _101 = (*_97);                   // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _99 = Eq(move _100, move _101);  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _98 = Not(move _99);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _98) -> [0: bb33, otherwise: bb32]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _102 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _106 = _96;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _105 = _106;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _108 = _97;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = _108;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _109 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _103 = core::panicking::assert_failed::<bool, bool>(move _104, move _105, move _107, move _109) -> bb35; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb33: {
        _111 = &mut _9;                  // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:23:9: 23:23
        _110 = BTreeMap::<Zst, ()>::clear(move _111) -> [return: bb34, unwind: bb35]; // scope 3 at ui/zero-sized/zero-sized-btreemap-insert.rs:23:9: 23:23
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-btreemap-insert.rs:23:16: 23:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut BTreeMap<Zst, ()>) {BTreeMap::<Zst, ()>::clear}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_9) -> bb2;                 // scope 2 at ui/zero-sized/zero-sized-btreemap-insert.rs:24:5: 24:6
    }

    bb35 (cleanup): {
        drop(_9) -> bb36;                // scope 2 at ui/zero-sized/zero-sized-btreemap-insert.rs:24:5: 24:6
    }

    bb36 (cleanup): {
        resume;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:11:1: 25:2
    }

    bb37: {
        goto -> bb12;                    // scope 7 at ui/zero-sized/zero-sized-btreemap-insert.rs:18:13: 18:35
    }
}

promoted[0] in main: &Zst = {
    let mut _0: &Zst;                    // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
    let mut _1: Zst;                     // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:32: 22:35

    bb0: {
        _1 = Zst;                        // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:32: 22:35
        _0 = &_1;                        // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:22:31: 22:35
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:16:34: 16:35

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:16:34: 16:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const N: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:12:14: 12:19

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:12:22: 12:23
        return;                          // scope 0 at ui/zero-sized/zero-sized-btreemap-insert.rs:12:5: 12:24
    }
}
