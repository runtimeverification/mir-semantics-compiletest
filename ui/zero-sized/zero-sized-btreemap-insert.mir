// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:10: 8:12>::assert_receiver_is_total_eq(_1: &Zst) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:14: 8:18>::hash(_1: &Zst, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:20: 8:25>::fmt(_1: &Zst, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Zst";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:27: 8:30>::cmp(_1: &Zst, _2: &Zst) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;

    bb0: {
        _0 = Equal;
        return;
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:32: 8:41>::eq(_1: &Zst, _2: &Zst) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/zero-sized/zero-sized-btreemap-insert.rs:8:43: 8:53>::partial_cmp(_1: &Zst, _2: &Zst) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let mut _3: std::cmp::Ordering;

    bb0: {
        _3 = Equal;
        _0 = Option::<std::cmp::Ordering>::Some(move _3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<usize>;
    let mut _2: std::ops::Range<usize>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::option::Option<usize>;
    let mut _5: &mut std::ops::Range<usize>;
    let mut _6: isize;
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: usize;
    let mut _12: &std::collections::BTreeMap<Zst, ()>;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: std::ops::Range<usize>;
    let mut _23: std::ops::Range<usize>;
    let mut _25: std::option::Option<usize>;
    let mut _26: &mut std::ops::Range<usize>;
    let mut _27: isize;
    let _29: std::option::Option<()>;
    let mut _30: &mut std::collections::BTreeMap<Zst, ()>;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let mut _34: &std::collections::BTreeMap<Zst, ()>;
    let mut _35: &usize;
    let _36: usize;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: usize;
    let mut _42: usize;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _46: (&usize, &usize);
    let mut _47: &usize;
    let _48: usize;
    let mut _49: std::collections::btree_map::Iter<'_, Zst, ()>;
    let mut _50: &std::collections::BTreeMap<Zst, ()>;
    let mut _51: &usize;
    let _52: usize;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: usize;
    let mut _58: usize;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: (&bool, &bool);
    let mut _63: &bool;
    let _64: bool;
    let mut _65: &std::option::Option<&()>;
    let _66: std::option::Option<&()>;
    let mut _67: &std::collections::BTreeMap<Zst, ()>;
    let mut _68: &bool;
    let _69: bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let _79: ();
    let mut _80: &mut std::collections::BTreeMap<Zst, ()>;
    scope 1 {
        debug iter => _3;
        let _7: usize;
        scope 2 {
            debug len => _7;
            let mut _8: std::collections::BTreeMap<Zst, ()>;
            scope 3 {
                debug tester => _8;
                let _13: &usize;
                let _14: &usize;
                let mut _24: std::ops::Range<usize>;
                let _37: &usize;
                let _38: &usize;
                let _53: &usize;
                let _54: &usize;
                let _70: &bool;
                let _71: &bool;
                let mut _81: &Zst;
                let mut _82: &usize;
                scope 4 {
                    debug left_val => _13;
                    debug right_val => _14;
                    let _19: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _19;
                    }
                }
                scope 6 {
                    debug iter => _24;
                    let _28: usize;
                    scope 7 {
                        debug bit => _28;
                    }
                }
                scope 8 {
                    debug left_val => _37;
                    debug right_val => _38;
                    let _43: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _43;
                    }
                }
                scope 10 {
                    debug left_val => _53;
                    debug right_val => _54;
                    let _59: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _59;
                    }
                }
                scope 12 {
                    debug left_val => _70;
                    debug right_val => _71;
                    let _76: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _76;
                    }
                }
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _1 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::ops::Range<usize> as Iterator>::next(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _7 = ((_4 as Some).0: usize);
        _8 = BTreeMap::<Zst, ()>::new() -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _12 = &_8;
        _11 = BTreeMap::<Zst, ()>::len(move _12) -> [return: bb8, unwind: bb34];
    }

    bb8: {
        _10 = &_11;
        _82 = const _;
        _9 = (move _10, _82);
        _13 = (_9.0: &usize);
        _14 = (_9.1: &usize);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<usize, usize>(move _19, _13, _14, move _21) -> bb34;
    }

    bb10: {
        _23 = std::ops::Range::<usize> { start: const 0_usize, end: _7 };
        _22 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _23) -> [return: bb11, unwind: bb34];
    }

    bb11: {
        _24 = move _22;
        goto -> bb12;
    }

    bb12: {
        _26 = &mut _24;
        _25 = <std::ops::Range<usize> as Iterator>::next(_26) -> [return: bb13, unwind: bb34];
    }

    bb13: {
        _27 = discriminant(_25);
        switchInt(move _27) -> [0: bb15, 1: bb14, otherwise: bb5];
    }

    bb14: {
        _28 = ((_25 as Some).0: usize);
        _30 = &mut _8;
        _29 = BTreeMap::<Zst, ()>::insert(move _30, const Zst, const ()) -> [return: bb36, unwind: bb34];
    }

    bb15: {
        _34 = &_8;
        _33 = BTreeMap::<Zst, ()>::len(move _34) -> [return: bb16, unwind: bb34];
    }

    bb16: {
        _32 = &_33;
        switchInt(move _7) -> [0: bb17, otherwise: bb18];
    }

    bb17: {
        _36 = const 0_usize;
        goto -> bb19;
    }

    bb18: {
        _36 = const 1_usize;
        goto -> bb19;
    }

    bb19: {
        _35 = &_36;
        _31 = (move _32, move _35);
        _37 = (_31.0: &usize);
        _38 = (_31.1: &usize);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<usize, usize>(move _43, _37, _38, move _45) -> bb34;
    }

    bb21: {
        _50 = &_8;
        _49 = BTreeMap::<Zst, ()>::iter(move _50) -> [return: bb22, unwind: bb34];
    }

    bb22: {
        _48 = <std::collections::btree_map::Iter<'_, Zst, ()> as Iterator>::count(move _49) -> [return: bb23, unwind: bb34];
    }

    bb23: {
        _47 = &_48;
        switchInt(move _7) -> [0: bb24, otherwise: bb25];
    }

    bb24: {
        _52 = const 0_usize;
        goto -> bb26;
    }

    bb25: {
        _52 = const 1_usize;
        goto -> bb26;
    }

    bb26: {
        _51 = &_52;
        _46 = (move _47, move _51);
        _53 = (_46.0: &usize);
        _54 = (_46.1: &usize);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<usize, usize>(move _59, _53, _54, move _61) -> bb34;
    }

    bb28: {
        _67 = &_8;
        _81 = const _;
        _66 = BTreeMap::<Zst, ()>::get::<Zst>(move _67, _81) -> [return: bb29, unwind: bb34];
    }

    bb29: {
        _65 = &_66;
        _64 = Option::<&()>::is_some(move _65) -> [return: bb30, unwind: bb34];
    }

    bb30: {
        _63 = &_64;
        _69 = Gt(_7, const 0_usize);
        _68 = &_69;
        _62 = (move _63, move _68);
        _70 = (_62.0: &bool);
        _71 = (_62.1: &bool);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<bool, bool>(move _76, _70, _71, move _78) -> bb34;
    }

    bb32: {
        _80 = &mut _8;
        _79 = BTreeMap::<Zst, ()>::clear(move _80) -> [return: bb33, unwind: bb34];
    }

    bb33: {
        drop(_8) -> [return: bb2, unwind continue];
    }

    bb34 (cleanup): {
        drop(_8) -> [return: bb35, unwind terminate];
    }

    bb35 (cleanup): {
        resume;
    }

    bb36: {
        goto -> bb12;
    }
}

promoted[0] in main: &Zst = {
    let mut _0: &Zst;
    let mut _1: Zst;

    bb0: {
        _1 = Zst;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

const N: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}
