// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::ops::Range<usize>;
    let mut _2: std::ops::Range<usize>;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::option::Option<usize>;
    let mut _5: &mut std::ops::Range<usize>;
    let mut _6: isize;
    let mut _9: (&usize, &usize);
    let mut _10: &usize;
    let _11: usize;
    let mut _12: &std::collections::LinkedList<()>;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&std::option::Option<&()>, &std::option::Option<&()>);
    let mut _23: &std::option::Option<&()>;
    let _24: std::option::Option<&()>;
    let mut _25: &std::collections::LinkedList<()>;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: std::ops::Range<i32>;
    let mut _34: std::ops::Range<i32>;
    let mut _35: i32;
    let mut _36: usize;
    let mut _38: std::option::Option<i32>;
    let mut _39: &mut std::ops::Range<i32>;
    let mut _40: isize;
    let mut _42: (&usize, &usize);
    let mut _43: &usize;
    let _44: usize;
    let mut _45: &std::collections::LinkedList<()>;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: usize;
    let mut _51: usize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: std::ops::Range<usize>;
    let mut _56: std::ops::Range<usize>;
    let mut _57: usize;
    let mut _59: std::option::Option<usize>;
    let mut _60: &mut std::ops::Range<usize>;
    let mut _61: isize;
    let mut _63: i32;
    let mut _64: i32;
    let _65: ();
    let mut _66: &mut std::collections::LinkedList<()>;
    let _67: ();
    let mut _68: &mut std::collections::LinkedList<()>;
    let mut _69: (&usize, &usize);
    let mut _70: &usize;
    let _71: usize;
    let mut _72: &std::collections::LinkedList<()>;
    let mut _73: &usize;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: usize;
    let mut _79: usize;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: (&usize, &usize);
    let mut _84: &usize;
    let _85: usize;
    let mut _86: std::collections::linked_list::Iter<'_, ()>;
    let mut _87: &std::collections::LinkedList<()>;
    let mut _88: &usize;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: usize;
    let mut _94: usize;
    let _96: !;
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>;
    let _98: ();
    let mut _99: &mut std::collections::LinkedList<()>;
    scope 1 {
        debug iter => _3;
        let _7: usize;
        scope 2 {
            debug len => _7;
            let mut _8: std::collections::LinkedList<()>;
            scope 3 {
                debug tester => _8;
                let _13: &usize;
                let _14: &usize;
                let _26: &std::option::Option<&()>;
                let _27: &std::option::Option<&()>;
                let mut _37: std::ops::Range<i32>;
                let mut _101: &std::option::Option<&()>;
                let mut _102: &usize;
                scope 4 {
                    debug left_val => _13;
                    debug right_val => _14;
                    let _19: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _19;
                    }
                }
                scope 6 {
                    debug left_val => _26;
                    debug right_val => _27;
                    let _30: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _30;
                    }
                }
                scope 8 {
                    debug iter => _37;
                    let _41: i32;
                    scope 9 {
                        debug case => _41;
                        let _46: &usize;
                        let _47: &usize;
                        let mut _58: std::ops::Range<usize>;
                        let _74: &usize;
                        let _75: &usize;
                        let _89: &usize;
                        let _90: &usize;
                        let mut _100: &usize;
                        scope 10 {
                            debug left_val => _46;
                            debug right_val => _47;
                            let _52: core::panicking::AssertKind;
                            scope 11 {
                                debug kind => _52;
                            }
                        }
                        scope 12 {
                            debug iter => _58;
                            let _62: usize;
                            scope 13 {
                                debug bit => _62;
                            }
                        }
                        scope 14 {
                            debug left_val => _74;
                            debug right_val => _75;
                            let _80: core::panicking::AssertKind;
                            scope 15 {
                                debug kind => _80;
                            }
                        }
                        scope 16 {
                            debug left_val => _89;
                            debug right_val => _90;
                            let _95: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _95;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<usize> { start: const 0_usize, end: const _ };
        _1 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _1;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::ops::Range<usize> as Iterator>::next(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _7 = ((_4 as Some).0: usize);
        _8 = LinkedList::<()>::new() -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _12 = &_8;
        _11 = LinkedList::<()>::len(move _12) -> [return: bb8, unwind: bb37];
    }

    bb8: {
        _10 = &_11;
        _102 = const _;
        _9 = (move _10, _102);
        _13 = (_9.0: &usize);
        _14 = (_9.1: &usize);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<usize, usize>(move _19, _13, _14, move _21) -> bb37;
    }

    bb10: {
        _25 = &_8;
        _24 = LinkedList::<()>::front(move _25) -> [return: bb11, unwind: bb37];
    }

    bb11: {
        _23 = &_24;
        _101 = const _;
        _22 = (move _23, _101);
        _26 = (_22.0: &std::option::Option<&()>);
        _27 = (_22.1: &std::option::Option<&()>);
        _29 = <Option<&()> as PartialEq>::eq(_26, _27) -> [return: bb12, unwind: bb37];
    }

    bb12: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<Option<&()>, Option<&()>>(move _30, _26, _27, move _32) -> bb37;
    }

    bb14: {
        _36 = _7;
        _35 = Shl(const 1_i32, move _36);
        _34 = std::ops::Range::<i32> { start: const 0_i32, end: move _35 };
        _33 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _34) -> [return: bb15, unwind: bb37];
    }

    bb15: {
        _37 = move _33;
        goto -> bb16;
    }

    bb16: {
        _39 = &mut _37;
        _38 = <std::ops::Range<i32> as Iterator>::next(_39) -> [return: bb17, unwind: bb37];
    }

    bb17: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb19, 1: bb18, otherwise: bb5];
    }

    bb18: {
        _41 = ((_38 as Some).0: i32);
        _45 = &_8;
        _44 = LinkedList::<()>::len(move _45) -> [return: bb20, unwind: bb37];
    }

    bb19: {
        drop(_8) -> [return: bb2, unwind continue];
    }

    bb20: {
        _43 = &_44;
        _100 = const _;
        _42 = (move _43, _100);
        _46 = (_42.0: &usize);
        _47 = (_42.1: &usize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<usize, usize>(move _52, _46, _47, move _54) -> bb37;
    }

    bb22: {
        _57 = _7;
        _56 = std::ops::Range::<usize> { start: const 0_usize, end: move _57 };
        _55 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _56) -> [return: bb23, unwind: bb37];
    }

    bb23: {
        _58 = move _55;
        goto -> bb24;
    }

    bb24: {
        _60 = &mut _58;
        _59 = <std::ops::Range<usize> as Iterator>::next(_60) -> [return: bb25, unwind: bb37];
    }

    bb25: {
        _61 = discriminant(_59);
        switchInt(move _61) -> [0: bb27, 1: bb26, otherwise: bb5];
    }

    bb26: {
        _62 = ((_59 as Some).0: usize);
        _64 = Shl(const 1_i32, _62);
        _63 = BitAnd(_41, move _64);
        switchInt(move _63) -> [0: bb29, otherwise: bb28];
    }

    bb27: {
        _72 = &_8;
        _71 = LinkedList::<()>::len(move _72) -> [return: bb30, unwind: bb37];
    }

    bb28: {
        _66 = &mut _8;
        _65 = LinkedList::<()>::push_front(move _66, const ()) -> [return: bb39, unwind: bb37];
    }

    bb29: {
        _68 = &mut _8;
        _67 = LinkedList::<()>::push_back(move _68, const ()) -> [return: bb40, unwind: bb37];
    }

    bb30: {
        _70 = &_71;
        _73 = &_7;
        _69 = (move _70, move _73);
        _74 = (_69.0: &usize);
        _75 = (_69.1: &usize);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<usize, usize>(move _80, _74, _75, move _82) -> bb37;
    }

    bb32: {
        _87 = &_8;
        _86 = LinkedList::<()>::iter(move _87) -> [return: bb33, unwind: bb37];
    }

    bb33: {
        _85 = <std::collections::linked_list::Iter<'_, ()> as Iterator>::count(move _86) -> [return: bb34, unwind: bb37];
    }

    bb34: {
        _84 = &_85;
        _88 = &_7;
        _83 = (move _84, move _88);
        _89 = (_83.0: &usize);
        _90 = (_83.1: &usize);
        _93 = (*_89);
        _94 = (*_90);
        _92 = Eq(move _93, move _94);
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _95 = core::panicking::AssertKind::Eq;
        _97 = Option::<Arguments<'_>>::None;
        _96 = core::panicking::assert_failed::<usize, usize>(move _95, _89, _90, move _97) -> bb37;
    }

    bb36: {
        _99 = &mut _8;
        _98 = LinkedList::<()>::clear(move _99) -> [return: bb41, unwind: bb37];
    }

    bb37 (cleanup): {
        drop(_8) -> [return: bb38, unwind terminate];
    }

    bb38 (cleanup): {
        resume;
    }

    bb39: {
        goto -> bb24;
    }

    bb40: {
        goto -> bb24;
    }

    bb41: {
        goto -> bb16;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<&()> = {
    let mut _0: &std::option::Option<&()>;
    let mut _1: std::option::Option<&()>;

    bb0: {
        _1 = Option::<&()>::None;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

const N: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 8_usize;
        return;
    }
}
