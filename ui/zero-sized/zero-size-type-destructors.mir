// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut destructions: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:4:27: 4:32

    bb0: {
        _0 = const 3_isize;              // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:4:35: 4:36
        return;                          // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:4:1: 4:37
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:6:14: 6:14
    let _1: [foo::Foo; 3];               // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:15:9: 15:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/zero-sized/zero-size-type-destructors.rs:15:9: 15:11
    }

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:16:1: 16:2
    }

    bb1: {
        return;                          // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:16:2: 16:2
    }
}

fn foo::<impl at ui/zero-sized/zero-size-type-destructors.rs:9:5: 9:22>::drop(_1: &mut Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:10:17: 10:26
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:10:28: 10:28
    let mut _2: *mut isize;              // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:32
    let mut _3: (isize, bool);           // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:37
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut isize}; // scope 1 at ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:32
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:32
                                         // + literal: Const { ty: *mut isize, val: Value(Scalar(alloc1)) }
        _3 = CheckedSub((*_2), const 1_isize); // scope 1 at ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:37
        assert(!move (_3.1: bool), "attempt to compute `{} - {}`, which would overflow", (*_2), const 1_isize) -> bb1; // scope 1 at ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:37
    }

    bb1: {
        (*_2) = move (_3.0: isize);      // scope 1 at ui/zero-sized/zero-size-type-destructors.rs:11:20: 11:37
        return;                          // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:12:10: 12:10
    }
}

alloc1 (static: destructions, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         â”‚ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:18:15: 18:15
    let _1: ();                          // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:19:3: 19:8
    let mut _2: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: isize;                       // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:20:14: 20:37
    let mut _5: *mut isize;              // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:20:23: 20:35
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
    }
    scope 2 {
        debug left_val => _7;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _13;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:19:3: 19:8
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-size-type-destructors.rs:19:3: 19:6
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = const {alloc1: *mut isize}; // scope 1 at ui/zero-sized/zero-size-type-destructors.rs:20:23: 20:35
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-size-type-destructors.rs:20:23: 20:35
                                         // + literal: Const { ty: *mut isize, val: Value(Scalar(alloc1)) }
        _4 = (*_5);                      // scope 1 at ui/zero-sized/zero-size-type-destructors.rs:20:23: 20:35
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 0_isize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<isize, isize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:21:2: 21:2
    }
}

alloc1 (static: destructions, size: 8, align: 8) {
    03 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/zero-sized/zero-size-type-destructors.rs:20:39: 20:40

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/zero-sized/zero-size-type-destructors.rs:20:39: 20:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
