// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:6:11: 6:11
    let mut _1: std::ops::Range<usize>;  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    let mut _2: std::ops::Range<usize>;  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    let mut _4: std::option::Option<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    let mut _7: isize;                   // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:5: 19:6
    let mut _10: usize;                  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:10:52: 10:55
    let mut _11: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _13: usize;                      // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:11:20: 11:32
    let mut _14: &std::collections::BinaryHeap<()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:11:20: 11:32
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: bool;                   // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:9: 12:42
    let mut _31: bool;                   // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:17: 12:41
    let mut _32: usize;                  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:17: 12:34
    let mut _33: &std::collections::BinaryHeap<()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:17: 12:34
    let mut _34: usize;                  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:38: 12:41
    let mut _35: !;                      // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:9: 12:42
    let mut _36: std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    let mut _37: std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    let mut _38: usize;                  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:23: 13:26
    let mut _40: std::option::Option<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    let mut _41: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    let mut _42: &mut std::ops::Range<usize>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    let mut _43: isize;                  // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:9: 15:10
    let _45: ();                         // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:14:13: 14:28
    let mut _46: &mut std::collections::BinaryHeap<()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:14:13: 14:28
    let mut _47: ();                     // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:14:25: 14:27
    let mut _48: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _49: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _50: usize;                      // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:16:20: 16:32
    let mut _51: &std::collections::BinaryHeap<()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:16:20: 16:32
    let mut _52: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _69: usize;                      // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:17:20: 17:41
    let mut _70: std::collections::binary_heap::Iter<'_, ()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:17:20: 17:33
    let mut _71: &std::collections::BinaryHeap<()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:17:20: 17:33
    let mut _72: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _75: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _76: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _77: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _78: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _80: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _81: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _82: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _83: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _84: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _85: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _86: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _87: ();                         // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:18:9: 18:23
    let mut _88: &mut std::collections::BinaryHeap<()>; // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:18:9: 18:23
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
        let _8: usize;                   // in scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:9: 9:12
        scope 2 {
            debug len => _8;             // in scope 2 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:9: 9:12
            let mut _9: std::collections::BinaryHeap<()>; // in scope 2 at ui/zero-sized/zero-sized-binary-heap-push.rs:10:13: 10:23
            scope 3 {
                debug tester => _9;      // in scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:10:13: 10:23
                let _16: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _17: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _39: std::ops::Range<usize>; // in scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
                let _53: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _54: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _73: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _74: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _89: &usize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 4 {
                    debug left_val => _16; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _17; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _22: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _22; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug iter => _39;   // in scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
                    let _44: usize;      // in scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:13: 13:16
                    scope 7 {
                        debug bit => _44; // in scope 7 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:13: 13:16
                    }
                }
                scope 8 {
                    debug left_val => _53; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _54; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _59: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _59; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 10 {
                    debug left_val => _73; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _74; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _79: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _79; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _2 = std::ops::Range::<usize> { start: const 0_usize, end: const _ }; // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
        _1 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
        goto -> bb2;                     // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:5: 19:6
    }

    bb2: {
        _6 = &mut _3;                    // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
        _5 = &mut (*_6);                 // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
        _4 = <std::ops::Range<usize> as Iterator>::next(move _5) -> bb3; // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_4);           // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    }

    bb4: {
        _8 = ((_4 as Some).0: usize);    // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:9: 9:12
        _10 = _8;                        // scope 2 at ui/zero-sized/zero-sized-binary-heap-push.rs:10:52: 10:55
        _9 = BinaryHeap::<()>::with_capacity(move _10) -> bb7; // scope 2 at ui/zero-sized/zero-sized-binary-heap-push.rs:10:26: 10:56
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:10:26: 10:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> BinaryHeap<()> {BinaryHeap::<()>::with_capacity}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/zero-sized/zero-sized-binary-heap-push.rs:9:16: 9:20
    }

    bb6: {
        return;                          // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:20:2: 20:2
    }

    bb7: {
        _14 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:11:20: 11:32
        _13 = BinaryHeap::<()>::len(move _14) -> [return: bb8, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:11:20: 11:32
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:11:27: 11:30
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<()>) -> usize {BinaryHeap::<()>::len}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = &_13;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _89 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _89;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _15);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_11.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_11.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = (*_16);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = const 0_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = Eq(move _20, move _21);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _18 = Not(move _19);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<usize, usize>(move _24, move _25, move _27, move _29) -> bb28; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:17: 12:34
        _32 = BinaryHeap::<()>::capacity(move _33) -> [return: bb11, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:17: 12:34
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:12:24: 12:32
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<()>) -> usize {BinaryHeap::<()>::capacity}, val: Value(<ZST>) }
    }

    bb11: {
        _34 = _8;                        // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:38: 12:41
        _31 = Ge(move _32, move _34);    // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:17: 12:41
        _30 = Not(move _31);             // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:9: 12:42
        switchInt(move _30) -> [0: bb13, otherwise: bb12]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:9: 12:42
    }

    bb12: {
        _35 = core::panicking::panic(const "assertion failed: tester.capacity() >= len") -> bb28; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:12:9: 12:42
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:12:9: 12:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _38 = _8;                        // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:23: 13:26
        _37 = std::ops::Range::<usize> { start: const 0_usize, end: move _38 }; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
        _36 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _37) -> [return: bb14, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb14: {
        _39 = move _36;                  // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
        goto -> bb15;                    // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:9: 15:10
    }

    bb15: {
        _42 = &mut _39;                  // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
        _41 = &mut (*_42);               // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
        _40 = <std::ops::Range<usize> as Iterator>::next(move _41) -> [return: bb16, unwind: bb28]; // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        _43 = discriminant(_40);         // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
        switchInt(move _43) -> [0: bb19, 1: bb17, otherwise: bb18]; // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    }

    bb17: {
        _44 = ((_40 as Some).0: usize);  // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:13: 13:16
        _46 = &mut _9;                   // scope 7 at ui/zero-sized/zero-sized-binary-heap-push.rs:14:13: 14:28
        _45 = BinaryHeap::<()>::push(move _46, move _47) -> [return: bb30, unwind: bb28]; // scope 7 at ui/zero-sized/zero-sized-binary-heap-push.rs:14:13: 14:28
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:14:20: 14:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<()>, ()) {BinaryHeap::<()>::push}, val: Value(<ZST>) }
    }

    bb18: {
        unreachable;                     // scope 6 at ui/zero-sized/zero-sized-binary-heap-push.rs:13:20: 13:26
    }

    bb19: {
        _51 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:16:20: 16:32
        _50 = BinaryHeap::<()>::len(move _51) -> [return: bb20, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:16:20: 16:32
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:16:27: 16:30
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<()>) -> usize {BinaryHeap::<()>::len}, val: Value(<ZST>) }
    }

    bb20: {
        _49 = &_50;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = &_8;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _48 = (move _49, move _52);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_48.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_48.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = (*_53);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = (*_54);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = Eq(move _57, move _58);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _55 = Not(move _56);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb22, otherwise: bb21]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _59 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<usize, usize>(move _61, move _62, move _64, move _66) -> bb28; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb22: {
        _71 = &_9;                       // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:17:20: 17:33
        _70 = BinaryHeap::<()>::iter(move _71) -> [return: bb23, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:17:20: 17:33
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:17:27: 17:31
                                         // + literal: Const { ty: for<'a> fn(&'a BinaryHeap<()>) -> std::collections::binary_heap::Iter<'a, ()> {BinaryHeap::<()>::iter}, val: Value(<ZST>) }
    }

    bb23: {
        _69 = <std::collections::binary_heap::Iter<'_, ()> as Iterator>::count(move _70) -> [return: bb24, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:17:20: 17:41
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:17:34: 17:39
                                         // + literal: Const { ty: fn(std::collections::binary_heap::Iter<'_, ()>) -> usize {<std::collections::binary_heap::Iter<'_, ()> as Iterator>::count}, val: Value(<ZST>) }
    }

    bb24: {
        _68 = &_69;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _72 = &_8;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _72);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _73 = (_67.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _74 = (_67.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _77 = (*_73);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _78 = (*_74);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _76 = Eq(move _77, move _78);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _75 = Not(move _76);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _75) -> [0: bb26, otherwise: bb25]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _79 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _83 = _73;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _82 = _83;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _85 = _74;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = _85;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _86 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _80 = core::panicking::assert_failed::<usize, usize>(move _81, move _82, move _84, move _86) -> bb28; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb26: {
        _88 = &mut _9;                   // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:18:9: 18:23
        _87 = BinaryHeap::<()>::clear(move _88) -> [return: bb27, unwind: bb28]; // scope 3 at ui/zero-sized/zero-sized-binary-heap-push.rs:18:9: 18:23
                                         // mir::Constant
                                         // + span: ui/zero-sized/zero-sized-binary-heap-push.rs:18:16: 18:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut BinaryHeap<()>) {BinaryHeap::<()>::clear}, val: Value(<ZST>) }
    }

    bb27: {
        drop(_9) -> bb2;                 // scope 2 at ui/zero-sized/zero-sized-binary-heap-push.rs:19:5: 19:6
    }

    bb28 (cleanup): {
        drop(_9) -> bb29;                // scope 2 at ui/zero-sized/zero-sized-binary-heap-push.rs:19:5: 19:6
    }

    bb29 (cleanup): {
        resume;                          // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:6:1: 20:2
    }

    bb30: {
        goto -> bb15;                    // scope 7 at ui/zero-sized/zero-sized-binary-heap-push.rs:14:13: 14:28
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:11:34: 11:35

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:11:34: 11:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const N: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:7:14: 7:19

    bb0: {
        _0 = const 8_usize;              // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:7:22: 7:23
        return;                          // scope 0 at ui/zero-sized/zero-sized-binary-heap-push.rs:7:5: 7:24
    }
}
