// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: E;
    let mut _2: isize;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: isize;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: u8;
    let mut _24: u8;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: E;
    let mut _30: isize;
    let mut _32: (&u8, &u8);
    let mut _33: &u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: isize;
    let mut _45: (&u8, &u8);
    let mut _46: &u8;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: u8;
    let mut _52: u8;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: E;
    scope 1 {
        debug e => _1;
        let mut _29: E;
        scope 2 {
            debug x => _3;
            let _3: u8;
            let _6: &u8;
            let _7: &u8;
            let mut _60: &u8;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
        scope 5 {
            debug x => _16;
            let _16: u8;
            let _19: &u8;
            let _20: &u8;
            let mut _59: &u8;
            scope 6 {
                debug left_val => _19;
                debug right_val => _20;
                let _25: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _25;
                }
            }
        }
        scope 8 {
            debug e => _29;
            scope 9 {
                debug x => _31;
                let _31: u8;
                let _34: &u8;
                let _35: &u8;
                let mut _58: &u8;
                scope 10 {
                    debug left_val => _34;
                    debug right_val => _35;
                    let _40: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _40;
                    }
                }
            }
            scope 12 {
                debug x => _44;
                let _44: u8;
                let _47: &u8;
                let _48: &u8;
                let mut _57: &u8;
                scope 13 {
                    debug left_val => _47;
                    debug right_val => _48;
                    let _53: core::panicking::AssertKind;
                    scope 14 {
                        debug kind => _53;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = E::V(const 10_u8);
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb3, otherwise: bb5];
    }

    bb1: {
        _5 = &_3;
        _60 = const _;
        _4 = (move _5, _60);
        _6 = (_4.0: &u8);
        _7 = (_4.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _3 = ((_1 as V).0: u8);
        goto -> bb1;
    }

    bb3: {
        _3 = ((_1 as U).0: u8);
        goto -> bb1;
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb5: {
        _15 = discriminant(_1);
        switchInt(move _15) -> [0: bb7, 1: bb8, otherwise: bb11];
    }

    bb6: {
        _18 = &_16;
        _59 = const _;
        _17 = (move _18, _59);
        _19 = (_17.0: &u8);
        _20 = (_17.1: &u8);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb10, otherwise: bb9];
    }

    bb7: {
        _16 = ((_1 as V).0: u8);
        goto -> bb6;
    }

    bb8: {
        _16 = ((_1 as U).0: u8);
        goto -> bb6;
    }

    bb9: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<u8, u8>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb10: {
        _28 = E::W;
        _1 = move _28;
        goto -> bb5;
    }

    bb11: {
        _29 = E::V(const 10_u8);
        _30 = discriminant(_29);
        switchInt(move _30) -> [0: bb13, 1: bb14, otherwise: bb16];
    }

    bb12: {
        _33 = &_31;
        _58 = const _;
        _32 = (move _33, _58);
        _34 = (_32.0: &u8);
        _35 = (_32.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb13: {
        _31 = ((_29 as V).0: u8);
        goto -> bb12;
    }

    bb14: {
        _31 = ((_29 as U).0: u8);
        goto -> bb12;
    }

    bb15: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb16: {
        _43 = discriminant(_29);
        switchInt(move _43) -> [0: bb18, 1: bb19, otherwise: bb22];
    }

    bb17: {
        _46 = &_44;
        _57 = const _;
        _45 = (move _46, _57);
        _47 = (_45.0: &u8);
        _48 = (_45.1: &u8);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb21, otherwise: bb20];
    }

    bb18: {
        _44 = ((_29 as V).0: u8);
        goto -> bb17;
    }

    bb19: {
        _44 = ((_29 as U).0: u8);
        goto -> bb17;
    }

    bb20: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<u8, u8>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb21: {
        _56 = E::W;
        _29 = move _56;
        goto -> bb16;
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 10_u8;
        _0 = &_1;
        return;
    }
}

fn E::V(_1: u8) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::V(_1: u8) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::V(move _1);
        return;
    }
}

fn E::U(_1: u8) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::U(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::U(_1: u8) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::U(move _1);
        return;
    }
}
