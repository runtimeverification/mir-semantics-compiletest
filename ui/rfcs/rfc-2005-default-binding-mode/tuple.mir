// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: (std::option::Option<i32>, (), (), std::vec::Vec<i32>);
    let mut _2: std::option::Option<i32>;
    let mut _3: std::vec::Vec<i32>;
    let mut _4: std::boxed::Box<[i32]>;
    let mut _5: usize;
    let mut _6: usize;
    let mut _7: *mut u8;
    let mut _8: std::boxed::Box<[i32; 2]>;
    let mut _9: &(std::option::Option<i32>, (), (), std::vec::Vec<i32>);
    let mut _10: isize;
    let mut _13: (&usize, &usize);
    let mut _14: &usize;
    let _15: usize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&i32, &i32);
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: i32;
    let mut _31: i32;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: !;
    let mut _38: *const [i32; 2];
    let mut _39: *const ();
    let mut _40: usize;
    let mut _41: usize;
    let mut _42: usize;
    let mut _43: usize;
    let mut _44: bool;
    scope 1 {
        debug foo => _1;
        let _11: &i32;
        let _12: &std::vec::Vec<i32>;
        scope 3 {
            debug n => _11;
            debug v => _12;
            let _16: &usize;
            let _17: &usize;
            let _26: &i32;
            let _27: &i32;
            let mut _36: &i32;
            let mut _37: &usize;
            scope 4 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _22;
                }
            }
            scope 6 {
                debug left_val => _26;
                debug right_val => _27;
                let _32: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _32;
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = Option::<i32>::Some(const 1_i32);
        _5 = SizeOf([i32; 2]);
        _6 = AlignOf([i32; 2]);
        _7 = alloc::alloc::exchange_malloc(move _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = ShallowInitBox(move _7, [i32; 2]);
        _38 = (((_8.0: std::ptr::Unique<[i32; 2]>).0: std::ptr::NonNull<[i32; 2]>).0: *const [i32; 2]);
        _39 = _38 as *const () (PtrToPtr);
        _40 = _39 as usize (Transmute);
        _41 = AlignOf(i32);
        _42 = Sub(_41, const 1_usize);
        _43 = BitAnd(_40, _42);
        _44 = Eq(_43, const 0_usize);
        assert(_44, "misaligned pointer dereference: address must be a multiple of {} but is {}", _41, _40) -> [success: bb14, unwind unreachable];
    }

    bb2: {
        _1 = (move _2, const (), const (), move _3);
        _9 = &_1;
        _10 = discriminant(((*_9).0: std::option::Option<i32>));
        switchInt(move _10) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _35 = begin_panic::<&str>(const "explicit panic") -> bb12;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _12 = &((*_9).3: std::vec::Vec<i32>);
        _11 = &((((*_9).0: std::option::Option<i32>) as Some).0: i32);
        _15 = Vec::<i32>::len(_12) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        _14 = &_15;
        _37 = const _;
        _13 = (move _14, _37);
        _16 = (_13.0: &usize);
        _17 = (_13.1: &usize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<usize, usize>(move _22, _16, _17, move _24) -> bb12;
    }

    bb8: {
        _36 = const _;
        _25 = (_11, _36);
        _26 = (_25.0: &i32);
        _27 = (_25.1: &i32);
        _30 = (*_26);
        _31 = (*_27);
        _29 = Eq(move _30, move _31);
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<i32, i32>(move _32, _26, _27, move _34) -> bb12;
    }

    bb10: {
        drop(_1) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb13, unwind terminate];
    }

    bb13 (cleanup): {
        resume;
    }

    bb14: {
        (*_38) = [const 2_i32, const 3_i32];
        _4 = move _8 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _3 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _4) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}
