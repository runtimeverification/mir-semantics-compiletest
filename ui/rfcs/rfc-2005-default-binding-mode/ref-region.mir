// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &&Option<u32>) -> &u32 {
    debug x => _1;                       // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:2:16: 2:17
    let _2: &&std::option::Option<u32>;  // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:3:9: 3:10
    let mut _3: isize;                   // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:5:9: 5:16
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _5: &std::option::Option<u32>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:3:9: 3:10
    let mut _6: &std::option::Option<u32>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:3:9: 3:10
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:3:9: 3:10
        let mut _0: &u32;                // return place in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:5:14: 5:15
        scope 2 {
            debug r => _0;               // in scope 2 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:5:14: 5:15
            scope 3 {
            }
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:3:34: 3:35
        _5 = deref_copy (*_2);           // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:4:11: 4:12
        _3 = discriminant((*_5));        // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:4:11: 4:12
        switchInt(move _3) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:4:5: 4:12
    }

    bb1: {
        _4 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        unreachable;                     // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:4:11: 4:12
    }

    bb3: {
        _6 = deref_copy (*_2);           // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:5:14: 5:15
        _0 = &(((*_6) as Some).0: u32);  // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:5:14: 5:15
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:13:15: 13:15
    let _1: std::option::Option<u32>;    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:14:9: 14:10
    let _2: &u32;                        // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:5: 15:13
    let mut _3: &&std::option::Option<u32>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:9: 15:12
    let _4: &&std::option::Option<u32>;  // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:9: 15:12
    let _5: &std::option::Option<u32>;   // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:10: 15:12
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:14:9: 14:10
    }

    bb0: {
        _1 = Option::<u32>::Some(const 5_u32); // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:14:13: 14:20
        _5 = &_1;                        // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:10: 15:12
        _4 = &_5;                        // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:9: 15:12
        _3 = _4;                         // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:9: 15:12
        _2 = foo(move _3) -> bb1;        // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:5: 15:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:15:5: 15:8
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &'b Option<u32>) -> &'a u32 {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/ref-region.rs:16:2: 16:2
    }
}
