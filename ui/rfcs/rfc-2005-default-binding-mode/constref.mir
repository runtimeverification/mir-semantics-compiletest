// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const CONST_REF: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:18: 2:26

    bb0: {
        _0 = const b"foo";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:29: 2:35
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:29: 2:35
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc1)) }
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:1: 2:36
    }
}

alloc1 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

CONST_REF::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:24: 2:25

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:24: 2:25
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:2:24: 2:25
    }
}

const Foo::CONST_REF_DEFAULT: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:30: 5:46

    bb0: {
        _0 = const b"bar";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:49: 5:55
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:49: 5:55
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc4)) }
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:5: 5:56
    }
}

alloc4 (size: 3, align: 1) {
    62 61 72                                        │ bar
}

Foo::CONST_REF_DEFAULT::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:44: 5:45

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:44: 5:45
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:5:44: 5:45
    }
}

Foo::CONST_REF::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:6:36: 6:37

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:6:36: 6:37
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:6:36: 6:37
    }
}

const <impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:9:1: 9:17>::CONST_REF: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:22: 10:38

    bb0: {
        _0 = const b"jjj";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:41: 10:47
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:41: 10:47
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc9)) }
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:5: 10:48
    }
}

alloc9 (size: 3, align: 1) {
    6a 6a 6a                                        │ jjj
}

<impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:9:1: 9:17>::CONST_REF::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:36: 10:37

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:36: 10:37
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:10:36: 10:37
    }
}

const <impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF_DEFAULT: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:30: 14:46

    bb0: {
        _0 = const b"ggg";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:49: 14:55
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:49: 14:55
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc14)) }
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:5: 14:56
    }
}

alloc14 (size: 3, align: 1) {
    67 67 67                                        │ ggg
}

<impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF_DEFAULT::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:44: 14:45

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:44: 14:45
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:14:44: 14:45
    }
}

const <impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:22: 15:38

    bb0: {
        _0 = const b"fff";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:41: 15:47
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:41: 15:47
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc19)) }
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:5: 15:48
    }
}

alloc19 (size: 3, align: 1) {
    66 66 66                                        │ fff
}

<impl at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:13:1: 13:17>::CONST_REF::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:36: 15:37

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:36: 15:37
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:15:36: 15:37
    }
}

fn const_ref() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:22:19: 22:23
    let _1: &[u8; 3];                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:23:9: 23:10
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:23:9: 23:10
    }

    bb0: {
        _1 = const b"foo";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:23:13: 23:19
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:23:13: 23:19
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc24)) }
        switchInt((*_1)[1 of 3]) -> [111: bb1, otherwise: bb2]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:24:5: 24:12
    }

    bb1: {
        switchInt((*_1)[2 of 3]) -> [111: bb3, otherwise: bb2]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:24:5: 24:12
    }

    bb2: {
        _0 = const false;                // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:26:14: 26:19
        goto -> bb4;                     // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:26:14: 26:19
    }

    bb3: {
        _0 = const true;                 // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:25:22: 25:26
        goto -> bb4;                     // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:25:22: 25:26
    }

    bb4: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:28:2: 28:2
    }
}

alloc24 (size: 3, align: 1) {
    66 6f 6f                                        │ foo
}

fn associated_const_ref() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:30:30: 30:34

    bb0: {
        _0 = const true;                 // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:32:93: 32:97
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:35:2: 35:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:37:15: 37:15
    let mut _1: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:5: 38:25
    let mut _2: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:13: 38:24
    let mut _3: !;                       // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:5: 38:25
    let mut _4: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:5: 39:36
    let mut _5: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:13: 39:35
    let mut _6: !;                       // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:5: 39:36

    bb0: {
        _2 = const_ref() -> bb1;         // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:13: 38:24
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:13: 38:22
                                         // + literal: Const { ty: fn() -> bool {const_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:5: 38:25
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:5: 38:25
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: const_ref()"); // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:5: 38:25
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:38:5: 38:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _5 = associated_const_ref() -> bb4; // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:13: 39:35
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:13: 39:33
                                         // + literal: Const { ty: fn() -> bool {associated_const_ref}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = Not(move _5);               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:5: 39:36
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:5: 39:36
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: associated_const_ref()"); // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:5: 39:36
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/constref.rs:39:5: 39:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/constref.rs:40:2: 40:2
    }
}
