// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:2:15: 2:15
    let mut _1: std::vec::Vec<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:3:9: 3:17
    let mut _2: std::boxed::Box<[(u8, u8)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[(u8, u8); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(u8, u8); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: (u8, u8);                // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:3:25: 3:35
    let mut _9: std::slice::Iter<'_, (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _10: &std::vec::Vec<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _12: std::option::Option<&(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _13: &mut std::slice::Iter<'_, (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _14: &mut std::slice::Iter<'_, (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _15: isize;                  // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:5: 8:6
    let mut _18: std::slice::IterMut<'_, (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _19: &mut std::vec::Vec<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _21: std::option::Option<&mut (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _22: &mut std::slice::IterMut<'_, (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _23: &mut std::slice::IterMut<'_, (u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _24: isize;                  // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:5: 13:6
    let mut _27: (u8, bool);             // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:11:9: 11:16
    let mut _28: (u8, bool);             // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:12:9: 12:16
    let mut _29: (&std::vec::Vec<(u8, u8)>, &std::vec::Vec<(u8, u8)>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _30: &std::vec::Vec<(u8, u8)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _31: &std::vec::Vec<(u8, u8)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _32: std::vec::Vec<(u8, u8)>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _33: std::boxed::Box<[(u8, u8)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _34: std::boxed::Box<[(u8, u8); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _35: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _36: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _37: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _38: std::boxed::Box<[(u8, u8); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _39: (u8, u8);               // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:15:27: 15:37
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: &std::vec::Vec<(u8, u8)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: &std::vec::Vec<(u8, u8)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &std::vec::Vec<(u8, u8)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &std::vec::Vec<(u8, u8)>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &std::vec::Vec<(u8, u8)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &std::vec::Vec<(u8, u8)>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: std::vec::IntoIter<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    let mut _55: std::vec::Vec<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    let mut _57: std::option::Option<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    let mut _58: &mut std::vec::IntoIter<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    let mut _59: &mut std::vec::IntoIter<(u8, u8)>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    let mut _60: isize;                  // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:5: 19:6
    let _63: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _64: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _65: &[&str];                // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
    let mut _66: &[&str; 3];             // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
    let _67: &[&str; 3];                 // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
    let mut _68: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _69: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _70: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _71: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _72: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
    let mut _73: &u8;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
    let _74: &u8;                        // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
    let mut _75: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
    let mut _76: &u8;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
    let _77: &u8;                        // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
    let mut _79: &(u8, u8);              // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _80: &(u8, u8);              // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    let mut _81: &mut (u8, u8);          // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _82: &mut (u8, u8);          // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    let mut _83: bool;                   // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:20:1: 20:2
    let mut _84: *const [(u8, u8); 1];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _85: *const [(u8, u8); 1];   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug tups => _1;                // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:3:9: 3:17
        let mut _11: std::slice::Iter<'_, (u8, u8)>; // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
        let mut _20: std::slice::IterMut<'_, (u8, u8)>; // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
        let _40: &std::vec::Vec<(u8, u8)>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _41: &std::vec::Vec<(u8, u8)>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _56: std::vec::IntoIter<(u8, u8)>; // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        scope 3 {
            debug iter => _11;           // in scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
            let _16: &u8;                // in scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:10: 5:11
            let _17: &u8;                // in scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:13: 5:14
            scope 4 {
                debug n => _16;          // in scope 4 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:10: 5:11
                debug m => _17;          // in scope 4 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:13: 5:14
                scope 5 {
                    scope 6 {
                    }
                }
            }
        }
        scope 7 {
            debug iter => _20;           // in scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
            let _25: &mut u8;            // in scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:10: 10:11
            let _26: &mut u8;            // in scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:13: 10:14
            scope 8 {
                debug n => _25;          // in scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:10: 10:11
                debug m => _26;          // in scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:13: 10:14
            }
        }
        scope 9 {
        }
        scope 10 {
            debug left_val => _40;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _41;      // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _46: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 11 {
                debug kind => _46;       // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 12 {
            debug iter => _56;           // in scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
            let _61: u8;                 // in scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:10: 17:11
            let _62: u8;                 // in scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:13: 17:14
            scope 13 {
                debug n => _61;          // in scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:10: 17:11
                debug m => _62;          // in scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:13: 17:14
                let mut _78: &[&str; 3]; // in scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _83 = const false;               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:3:9: 3:17
        _4 = const 2_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [(u8, u8); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const (0_u8, 1_u8);         // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:3:25: 3:35
        _84 = (((_7.0: std::ptr::Unique<[(u8, u8); 1]>).0: std::ptr::NonNull<[(u8, u8); 1]>).0: *const [(u8, u8); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_84) = [move _8];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[(u8, u8)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [(u8, u8)]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(u8, u8)]>) -> Vec<(u8, u8)> {slice::<impl [(u8, u8)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _83 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _10 = &_1;                       // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
        _9 = <&Vec<(u8, u8)> as IntoIterator>::into_iter(move _10) -> [return: bb3, unwind: bb37]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
                                         // + literal: Const { ty: fn(&Vec<(u8, u8)>) -> <&Vec<(u8, u8)> as IntoIterator>::IntoIter {<&Vec<(u8, u8)> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = move _9;                   // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
        goto -> bb4;                     // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:5: 8:6
    }

    bb4: {
        _14 = &mut _11;                  // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
        _13 = &mut (*_14);               // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
        _12 = <std::slice::Iter<'_, (u8, u8)> as Iterator>::next(move _13) -> [return: bb5, unwind: bb37]; // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, (u8, u8)>) -> Option<<std::slice::Iter<'_, (u8, u8)> as Iterator>::Item> {<std::slice::Iter<'_, (u8, u8)> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = discriminant(_12);         // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
        switchInt(move _15) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    }

    bb6: {
        _79 = deref_copy ((_12 as Some).0: &(u8, u8)); // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:10: 5:11
        _16 = &((*_79).0: u8);           // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:10: 5:11
        _80 = deref_copy ((_12 as Some).0: &(u8, u8)); // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:13: 5:14
        _17 = &((*_80).1: u8);           // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:13: 5:14
        goto -> bb4;                     // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:5: 8:6
    }

    bb7: {
        unreachable;                     // scope 3 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:5:19: 5:24
    }

    bb8: {
        _19 = &mut _1;                   // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
        _18 = <&mut Vec<(u8, u8)> as IntoIterator>::into_iter(move _19) -> [return: bb9, unwind: bb37]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
                                         // + literal: Const { ty: fn(&mut Vec<(u8, u8)>) -> <&mut Vec<(u8, u8)> as IntoIterator>::IntoIter {<&mut Vec<(u8, u8)> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = move _18;                  // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
        goto -> bb10;                    // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:5: 13:6
    }

    bb10: {
        _23 = &mut _20;                  // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
        _22 = &mut (*_23);               // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
        _21 = <std::slice::IterMut<'_, (u8, u8)> as Iterator>::next(move _22) -> [return: bb11, unwind: bb37]; // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::IterMut<'_, (u8, u8)>) -> Option<<std::slice::IterMut<'_, (u8, u8)> as Iterator>::Item> {<std::slice::IterMut<'_, (u8, u8)> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _24 = discriminant(_21);         // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
        switchInt(move _24) -> [0: bb14, 1: bb12, otherwise: bb13]; // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    }

    bb12: {
        _81 = deref_copy ((_21 as Some).0: &mut (u8, u8)); // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:10: 10:11
        _25 = &mut ((*_81).0: u8);       // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:10: 10:11
        _82 = deref_copy ((_21 as Some).0: &mut (u8, u8)); // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:13: 10:14
        _26 = &mut ((*_82).1: u8);       // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:13: 10:14
        _27 = CheckedAdd((*_25), const 1_u8); // scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:11:9: 11:16
        assert(!move (_27.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_25), const 1_u8) -> [success: bb15, unwind: bb37]; // scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:11:9: 11:16
    }

    bb13: {
        unreachable;                     // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:19: 10:28
    }

    bb14: {
        _30 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = const 2_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _36 = const 1_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _37 = alloc::alloc::exchange_malloc(move _35, move _36) -> [return: bb17, unwind: bb37]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb15: {
        (*_25) = move (_27.0: u8);       // scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:11:9: 11:16
        _28 = CheckedAdd((*_26), const 2_u8); // scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:12:9: 12:16
        assert(!move (_28.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_26), const 2_u8) -> [success: bb16, unwind: bb37]; // scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:12:9: 12:16
    }

    bb16: {
        (*_26) = move (_28.0: u8);       // scope 8 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:12:9: 12:16
        goto -> bb10;                    // scope 7 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:10:5: 13:6
    }

    bb17: {
        _38 = ShallowInitBox(move _37, [(u8, u8); 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _39 = const (1_u8, 3_u8);        // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:15:27: 15:37
        _85 = (((_38.0: std::ptr::Unique<[(u8, u8); 1]>).0: std::ptr::NonNull<[(u8, u8); 1]>).0: *const [(u8, u8); 1]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_85) = [move _39];             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _34 = move _38;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _33 = move _34 as std::boxed::Box<[(u8, u8)]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _32 = slice::<impl [(u8, u8)]>::into_vec::<std::alloc::Global>(move _33) -> [return: bb18, unwind: bb37]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Box<[(u8, u8)]>) -> Vec<(u8, u8)> {slice::<impl [(u8, u8)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb18: {
        _31 = &_32;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _29 = (move _30, move _31);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_29.0: &std::vec::Vec<(u8, u8)>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_29.1: &std::vec::Vec<(u8, u8)>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = _40;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = _41;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = <Vec<(u8, u8)> as PartialEq>::eq(move _44, move _45) -> [return: bb19, unwind: bb34]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<(u8, u8)>, &'b Vec<(u8, u8)>) -> bool {<Vec<(u8, u8)> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb19: {
        _42 = Not(move _43);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb21, otherwise: bb20]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb20: {
        _46 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<Vec<(u8, u8)>, Vec<(u8, u8)>>(move _48, move _49, move _51, move _53) -> bb34; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<(u8, u8)>, &'b Vec<(u8, u8)>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<(u8, u8)>, Vec<(u8, u8)>>}, val: Value(<ZST>) }
    }

    bb21: {
        drop(_32) -> [return: bb22, unwind: bb37]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb22: {
        _83 = const false;               // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        _55 = move _1;                   // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        _54 = <Vec<(u8, u8)> as IntoIterator>::into_iter(move _55) -> [return: bb23, unwind: bb37]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
                                         // + literal: Const { ty: fn(Vec<(u8, u8)>) -> <Vec<(u8, u8)> as IntoIterator>::IntoIter {<Vec<(u8, u8)> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb23: {
        _56 = move _54;                  // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        goto -> bb24;                    // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:5: 19:6
    }

    bb24: {
        _59 = &mut _56;                  // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        _58 = &mut (*_59);               // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        _57 = <std::vec::IntoIter<(u8, u8)> as Iterator>::next(move _58) -> [return: bb25, unwind: bb33]; // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<(u8, u8)>) -> Option<<std::vec::IntoIter<(u8, u8)> as Iterator>::Item> {<std::vec::IntoIter<(u8, u8)> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb25: {
        _60 = discriminant(_57);         // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
        switchInt(move _60) -> [0: bb28, 1: bb26, otherwise: bb27]; // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    }

    bb26: {
        _61 = (((_57 as Some).0: (u8, u8)).0: u8); // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:10: 17:11
        _62 = (((_57 as Some).0: (u8, u8)).1: u8); // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:13: 17:14
        _78 = const _;                   // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _67 = _78;                       // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
        _66 = _67;                       // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
        _65 = move _66 as &[&str] (Pointer(Unsize)); // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
        _74 = &_62;                      // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
        _73 = _74;                       // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
        _72 = core::fmt::ArgumentV1::<'_>::new_display::<u8>(move _73) -> [return: bb29, unwind: bb33]; // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:27: 18:28
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u8>}, val: Value(<ZST>) }
    }

    bb27: {
        unreachable;                     // scope 12 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:17:19: 17:23
    }

    bb28: {
        drop(_56) -> [return: bb32, unwind: bb37]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:19:5: 19:6
    }

    bb29: {
        _77 = &_61;                      // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
        _76 = _77;                       // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
        _75 = core::fmt::ArgumentV1::<'_>::new_display::<u8>(move _76) -> [return: bb30, unwind: bb33]; // scope 13 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:30: 18:31
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: for<'b> fn(&'b u8) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u8>}, val: Value(<ZST>) }
    }

    bb30: {
        _71 = [move _72, move _75];      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _70 = &_71;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _69 = _70;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _68 = move _69 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _64 = Arguments::<'_>::new_v1(move _65, move _68) -> [return: bb31, unwind: bb33]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb31: {
        _63 = _print(move _64) -> [return: bb38, unwind: bb33]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb32: {
        _83 = const false;               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:20:1: 20:2
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:20:2: 20:2
    }

    bb33 (cleanup): {
        drop(_56) -> bb37;               // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:19:5: 19:6
    }

    bb34 (cleanup): {
        drop(_32) -> bb37;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:2:1: 20:2
    }

    bb36 (cleanup): {
        drop(_1) -> bb35;                // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:20:1: 20:2
    }

    bb37 (cleanup): {
        switchInt(_83) -> [0: bb35, otherwise: bb36]; // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:20:1: 20:2
    }

    bb38: {
        goto -> bb24;                    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
    let mut _1: [&str; 3];               // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25

    bb0: {
        _1 = [const "", const " ", const "\n"]; // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/for.rs:18:18: 18:25
    }
}
