// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn surprise(_1: i32) -> () {
    debug x => _1;                       // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:6:13: 6:14
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:6:21: 6:21
    let mut _2: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(surprise, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 2_i32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:8:2: 8:2
    }
}

promoted[0] in surprise: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:7:19: 7:20

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:7:19: 7:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:10:11: 10:11
    let _1: &(i32, &i32);                // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:9: 11:10
    let _3: ();                          // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:13:5: 13:16
    let mut _4: i32;                     // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:13:14: 13:15
    let mut _5: &(i32, &i32);            // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:9: 11:10
        let _2: i32;                     // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:12:14: 12:15
        scope 2 {
            debug b => _2;               // in scope 2 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:12:14: 12:15
        }
    }

    bb0: {
        _5 = const _;                    // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
                                         // + literal: Const { ty: &(i32, &i32), val: Unevaluated(main, [], Some(promoted[0])) }
        _1 = _5;                         // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
        _2 = const 2_i32;                // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:12:14: 12:15
        _4 = const 2_i32;                // scope 2 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:13:14: 13:15
        _3 = surprise(move _4) -> bb1;   // scope 2 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:13:5: 13:16
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:13:5: 13:13
                                         // + literal: Const { ty: fn(i32) {surprise}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:14:2: 14:2
    }
}

promoted[0] in main: &(i32, &i32) = {
    let mut _0: &(i32, &i32);            // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
    let mut _1: (i32, &i32);             // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:14: 11:21
    let mut _2: &i32;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:18: 11:20
    let mut _3: i32;                     // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:19: 11:20

    bb0: {
        _3 = const 2_i32;                // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:19: 11:20
        _2 = &_3;                        // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:18: 11:20
        _1 = (const 1_i32, move _2);     // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:14: 11:21
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/reset-mode.rs:11:13: 11:21
    }
}
