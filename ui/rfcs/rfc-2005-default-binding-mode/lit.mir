// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn with_u8() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:3:14: 3:14
    let _1: u8;                          // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:4:9: 4:10
    let mut _3: &u8;                     // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:5:19: 5:21
    let mut _4: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:5: 10:15
    let mut _5: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:13: 10:14
    let mut _6: !;                       // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:5: 10:15
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:4:9: 4:10
        let _2: bool;                    // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:5:9: 5:10
        scope 2 {
            debug r => _2;               // in scope 2 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:5:9: 5:10
        }
    }

    bb0: {
        _1 = const 5_u8;                 // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:4:13: 4:16
        _3 = &_1;                        // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:5:19: 5:21
        switchInt((*_3)) -> [4: bb2, 5: bb3, otherwise: bb1]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:5:13: 5:21
    }

    bb1: {
        _2 = const false;                // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:8:14: 8:19
        goto -> bb4;                     // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:8:14: 8:19
    }

    bb2: {
        _2 = const false;                // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:6:14: 6:19
        goto -> bb4;                     // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:6:14: 6:19
    }

    bb3: {
        _2 = const true;                 // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:7:14: 7:18
        goto -> bb4;                     // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:7:14: 7:18
    }

    bb4: {
        _5 = _2;                         // scope 2 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:13: 10:14
        _4 = Not(move _5);               // scope 2 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:5: 10:15
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:5: 10:15
    }

    bb5: {
        _6 = core::panicking::panic(const "assertion failed: r"); // scope 2 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:5: 10:15
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/lit.rs:10:5: 10:15
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:11:2: 11:2
    }
}

fn with_str() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:15:15: 15:15
    let _1: &str;                        // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:16:9: 16:10
    let mut _2: bool;                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:18:13: 18:18
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:16:9: 16:10
    }

    bb0: {
        _1 = const "abc";                // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:16:27: 16:32
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/lit.rs:16:27: 16:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <str as PartialEq>::eq(_1, const "abc") -> bb1; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:18:13: 18:18
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/lit.rs:18:13: 18:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/lit.rs:18:13: 18:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb3]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:18:13: 18:18
    }

    bb2: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:21:2: 21:2
    }
}

fn with_bytes() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:24:17: 24:17
    let _1: &[u8];                       // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:9: 25:10
    let mut _2: &[u8; 3];                // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:28: 25:34
    let _3: &[u8; 3];                    // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:28: 25:34
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:9: 25:10
    }

    bb0: {
        _3 = const b"abc";               // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:28: 25:34
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:28: 25:34
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc3)) }
        _2 = _3;                         // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:28: 25:34
        _1 = move _2 as &[u8] (Pointer(Unsize)); // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:25:28: 25:34
        switchInt((*_1)[0 of 3]) -> [97: bb1, otherwise: bb3]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:26:5: 26:12
    }

    bb1: {
        switchInt((*_1)[1 of 3]) -> [98: bb2, otherwise: bb3]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:26:5: 26:12
    }

    bb2: {
        switchInt((*_1)[2 of 3]) -> [99: bb4, otherwise: bb3]; // scope 1 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:26:5: 26:12
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:30:2: 30:2
    }
}

alloc3 (size: 3, align: 1) {
    61 62 63                                        â”‚ abc
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:32:15: 32:15
    let _1: ();                          // in scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:33:5: 33:15

    bb0: {
        _1 = with_str() -> bb1;          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:33:5: 33:15
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc-2005-default-binding-mode/lit.rs:33:5: 33:13
                                         // + literal: Const { ty: fn() {with_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/rfcs/rfc-2005-default-binding-mode/lit.rs:34:2: 34:2
    }
}
