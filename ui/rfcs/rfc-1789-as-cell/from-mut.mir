// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &mut [i32];
    let mut _2: &mut [i32; 3];
    let mut _3: [i32; 3];
    let _5: &std::cell::Cell<[i32]>;
    let _7: &[std::cell::Cell<i32>];
    let mut _8: (&usize, &usize);
    let mut _9: &usize;
    let _10: usize;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: usize;
    let mut _16: usize;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let _22: &std::cell::Cell<[i32; 3]>;
    let mut _23: &mut [i32; 3];
    let _25: &[std::cell::Cell<i32>; 3];
    let _26: ();
    let mut _27: &std::cell::Cell<i32>;
    let _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    let mut _31: (&[i32; 3], &[i32; 3]);
    let mut _32: &[i32; 3];
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug slice => _1;
        let _4: &std::cell::Cell<[i32]>;
        scope 2 {
            debug cell_slice => _4;
            let _6: &[std::cell::Cell<i32>];
            scope 3 {
                debug slice_cell => _6;
                let _11: &usize;
                let _12: &usize;
                let mut _20: [i32; 3];
                let mut _41: &usize;
                scope 4 {
                    debug left_val => _11;
                    debug right_val => _12;
                    let _17: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _17;
                    }
                }
                scope 6 {
                    debug array => _20;
                    let _21: &std::cell::Cell<[i32; 3]>;
                    scope 7 {
                        debug cell_array => _21;
                        let _24: &[std::cell::Cell<i32>; 3];
                        scope 8 {
                            debug array_cell => _24;
                            let _33: &[i32; 3];
                            let _34: &[i32; 3];
                            let mut _40: &[i32; 3];
                            scope 9 {
                                debug left_val => _33;
                                debug right_val => _34;
                                let _37: core::panicking::AssertKind;
                                scope 10 {
                                    debug kind => _37;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = [const 1_i32, const 2_i32, const 3_i32];
        _2 = &mut _3;
        _1 = _2 as &mut [i32] (Pointer(Unsize));
        _5 = Cell::<[i32]>::from_mut(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _5;
        _7 = Cell::<[i32]>::as_slice_of_cells(_4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = _7;
        _10 = Len((*_6));
        _9 = &_10;
        _41 = const _;
        _8 = (move _9, _41);
        _11 = (_8.0: &usize);
        _12 = (_8.1: &usize);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<usize, usize>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb4: {
        _20 = [const 1_i32, const 2_i32, const 3_i32];
        _23 = &mut _20;
        _22 = Cell::<[i32; 3]>::from_mut(_23) -> [return: bb5, unwind continue];
    }

    bb5: {
        _21 = _22;
        _25 = Cell::<[i32; 3]>::as_array_of_cells(_21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = _25;
        _28 = const 0_usize;
        _29 = const 3_usize;
        _30 = Lt(_28, _29);
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> [success: bb7, unwind continue];
    }

    bb7: {
        _27 = &(*_24)[_28];
        _26 = Cell::<i32>::set(move _27, const 99_i32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _32 = &_20;
        _40 = const _;
        _31 = (move _32, _40);
        _33 = (_31.0: &[i32; 3]);
        _34 = (_31.1: &[i32; 3]);
        _36 = <[i32; 3] as PartialEq>::eq(_33, _34) -> [return: bb9, unwind continue];
    }

    bb9: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<[i32; 3], [i32; 3]>(move _37, _33, _34, move _39) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 99_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
