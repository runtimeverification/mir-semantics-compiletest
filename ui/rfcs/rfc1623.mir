// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static STATIC_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/rfcs/rfc1623.rs:8:20: 8:24

    bb0: {
        _0 = const "&'static str";       // scope 0 at ui/rfcs/rfc1623.rs:8:27: 8:41
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:8:27: 8:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:8:1: 8:42
    }
}

const CONST_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/rfcs/rfc1623.rs:9:18: 9:22

    bb0: {
        _0 = const "&'static str";       // scope 0 at ui/rfcs/rfc1623.rs:9:25: 9:39
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:9:25: 9:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:9:1: 9:40
    }
}

static EXPLICIT_STATIC_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/rfcs/rfc1623.rs:12:29: 12:41

    bb0: {
        _0 = const "&'static str";       // scope 0 at ui/rfcs/rfc1623.rs:12:44: 12:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:12:44: 12:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:12:1: 12:59
    }
}

const EXPLICIT_CONST_STR: &str = {
    let mut _0: &str;                    // return place in scope 0 at ui/rfcs/rfc1623.rs:13:27: 13:39

    bb0: {
        _0 = const "&'static str";       // scope 0 at ui/rfcs/rfc1623.rs:13:42: 13:56
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:13:42: 13:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:13:1: 13:57
    }
}

fn id_u8_slice(_1: &[u8]) -> &[u8] {
    debug arg => _1;                     // in scope 0 at ui/rfcs/rfc1623.rs:16:16: 16:19
    let mut _0: &[u8];                   // return place in scope 0 at ui/rfcs/rfc1623.rs:16:31: 16:36

    bb0: {
        _0 = _1;                         // scope 0 at ui/rfcs/rfc1623.rs:17:5: 17:8
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:18:2: 18:2
    }
}

static STATIC_SIMPLE_FN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:21:26: 21:45
    let _1: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
    let _2: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:21:49: 21:84
    let mut _3: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:21:48: 21:84
                                         // + literal: Const { ty: &for<'a> fn(&'a [u8]) -> &'a [u8], val: Unevaluated(STATIC_SIMPLE_FN, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:21:83: 21:84
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:21:1: 21:85
    }
}

promoted[0] in STATIC_SIMPLE_FN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
    let mut _1: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:21:49: 21:84

    bb0: {
        _1 = id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8] (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:21:50: 21:61
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:21:50: 21:61
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> &'a [u8] {id_u8_slice}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:21:48: 21:84
    }
}

const CONST_SIMPLE_FN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:22:24: 22:43
    let _1: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
    let _2: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:22:47: 22:82
    let mut _3: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:22:46: 22:82
                                         // + literal: Const { ty: &for<'a> fn(&'a [u8]) -> &'a [u8], val: Unevaluated(CONST_SIMPLE_FN, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:22:81: 22:82
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:22:1: 22:83
    }
}

promoted[0] in CONST_SIMPLE_FN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
    let mut _1: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:22:47: 22:82

    bb0: {
        _1 = id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8] (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:22:48: 22:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:22:48: 22:59
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> &'a [u8] {id_u8_slice}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:22:46: 22:82
    }
}

static STATIC_NON_ELIDED_fN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:25:30: 25:63
    let _1: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
    let _2: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:26:6: 26:55
    let mut _3: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:26:5: 26:55
                                         // + literal: Const { ty: &for<'a> fn(&'a [u8]) -> &'a [u8], val: Unevaluated(STATIC_NON_ELIDED_fN, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:26:54: 26:55
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:25:1: 26:56
    }
}

promoted[0] in STATIC_NON_ELIDED_fN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
    let mut _1: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:26:6: 26:55

    bb0: {
        _1 = id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8] (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:26:7: 26:18
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:26:7: 26:18
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> &'a [u8] {id_u8_slice}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:26:5: 26:55
    }
}

const CONST_NON_ELIDED_fN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:27:28: 27:61
    let _1: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
    let _2: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:28:6: 28:55
    let mut _3: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:28:5: 28:55
                                         // + literal: Const { ty: &for<'a> fn(&'a [u8]) -> &'a [u8], val: Unevaluated(CONST_NON_ELIDED_fN, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:28:54: 28:55
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:27:1: 28:56
    }
}

promoted[0] in CONST_NON_ELIDED_fN: &for<'a> fn(&'a [u8]) -> &'a [u8] = {
    let mut _0: &for<'a> fn(&'a [u8]) -> &'a [u8]; // return place in scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
    let mut _1: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:28:6: 28:55

    bb0: {
        _1 = id_u8_slice as for<'a> fn(&'a [u8]) -> &'a [u8] (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:28:7: 28:18
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:28:7: 28:18
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> &'a [u8] {id_u8_slice}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:28:5: 28:55
    }
}

fn multi_args(_1: &u8, _2: &u8, _3: &u8) -> () {
    debug a => _1;                       // in scope 0 at ui/rfcs/rfc1623.rs:31:15: 31:16
    debug b => _2;                       // in scope 0 at ui/rfcs/rfc1623.rs:31:23: 31:24
    debug c => _3;                       // in scope 0 at ui/rfcs/rfc1623.rs:31:31: 31:32
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1623.rs:31:39: 31:39

    bb0: {
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:31:41: 31:41
    }
}

static STATIC_MULTI_FN: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) = {
    let mut _0: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // return place in scope 0 at ui/rfcs/rfc1623.rs:33:25: 33:43
    let _1: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
    let _2: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:33:47: 33:80
    let mut _3: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:33:46: 33:80
                                         // + literal: Const { ty: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8), val: Unevaluated(STATIC_MULTI_FN, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:33:79: 33:80
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:33:1: 33:81
    }
}

promoted[0] in STATIC_MULTI_FN: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) = {
    let mut _0: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // return place in scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
    let mut _1: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:33:47: 33:80

    bb0: {
        _1 = multi_args as for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:33:48: 33:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:33:48: 33:58
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) {multi_args}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:33:46: 33:80
    }
}

const CONST_MULTI_FN: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) = {
    let mut _0: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // return place in scope 0 at ui/rfcs/rfc1623.rs:34:23: 34:41
    let _1: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
    let _2: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:34:45: 34:78
    let mut _3: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:34:44: 34:78
                                         // + literal: Const { ty: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8), val: Unevaluated(CONST_MULTI_FN, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:34:77: 34:78
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:34:1: 34:79
    }
}

promoted[0] in CONST_MULTI_FN: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) = {
    let mut _0: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // return place in scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
    let mut _1: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:34:45: 34:78

    bb0: {
        _1 = multi_args as for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:34:46: 34:56
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:34:46: 34:56
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8) {multi_args}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:34:44: 34:78
    }
}

static STATIC_FOO: Foo<'_> = {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/rfcs/rfc1623.rs:40:20: 40:23
    let mut _1: &[bool];                 // in scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
    let mut _2: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
    let _3: &[bool; 2];                  // in scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
    let _4: [bool; 2];                   // in scope 0 at ui/rfcs/rfc1623.rs:40:40: 40:53
    let mut _5: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        StorageLive(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        StorageLive(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        _5 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:40:39: 40:53
                                         // + literal: Const { ty: &[bool; 2], val: Unevaluated(STATIC_FOO, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        _2 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        _1 = move _2 as &[bool] (Pointer(Unsize)); // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        StorageDead(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:40:52: 40:53
        _0 = Foo::<'_> { bools: move _1 }; // scope 0 at ui/rfcs/rfc1623.rs:40:26: 40:55
        StorageDead(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:40:54: 40:55
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:40:54: 40:55
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:40:1: 40:56
    }
}

promoted[0] in STATIC_FOO: &[bool; 2] = {
    let mut _0: &[bool; 2];              // return place in scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
    let mut _1: [bool; 2];               // in scope 0 at ui/rfcs/rfc1623.rs:40:40: 40:53

    bb0: {
        _1 = [const true, const false];  // scope 0 at ui/rfcs/rfc1623.rs:40:40: 40:53
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:40:39: 40:53
    }
}

const CONST_FOO: Foo<'_> = {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/rfcs/rfc1623.rs:41:18: 41:21
    let mut _1: &[bool];                 // in scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
    let mut _2: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
    let _3: &[bool; 2];                  // in scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
    let _4: [bool; 2];                   // in scope 0 at ui/rfcs/rfc1623.rs:41:38: 41:51
    let mut _5: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        StorageLive(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        StorageLive(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        _5 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:41:37: 41:51
                                         // + literal: Const { ty: &[bool; 2], val: Unevaluated(CONST_FOO, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        _2 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        _1 = move _2 as &[bool] (Pointer(Unsize)); // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        StorageDead(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:41:50: 41:51
        _0 = Foo::<'_> { bools: move _1 }; // scope 0 at ui/rfcs/rfc1623.rs:41:24: 41:53
        StorageDead(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:41:52: 41:53
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:41:52: 41:53
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:41:1: 41:54
    }
}

promoted[0] in CONST_FOO: &[bool; 2] = {
    let mut _0: &[bool; 2];              // return place in scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
    let mut _1: [bool; 2];               // in scope 0 at ui/rfcs/rfc1623.rs:41:38: 41:51

    bb0: {
        _1 = [const true, const false];  // scope 0 at ui/rfcs/rfc1623.rs:41:38: 41:51
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:41:37: 41:51
    }
}

static STATIC_BAR: Foo<'_> = {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/rfcs/rfc1623.rs:45:20: 45:23
    let mut _1: &[bool];                 // in scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
    let mut _2: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
    let _3: &[bool; 2];                  // in scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
    let _4: [bool; 2];                   // in scope 0 at ui/rfcs/rfc1623.rs:45:40: 45:53
    let mut _5: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        StorageLive(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        StorageLive(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        _5 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:45:39: 45:53
                                         // + literal: Const { ty: &[bool; 2], val: Unevaluated(STATIC_BAR, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        _2 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        _1 = move _2 as &[bool] (Pointer(Unsize)); // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        StorageDead(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:45:52: 45:53
        _0 = Foo::<'_> { bools: move _1 }; // scope 0 at ui/rfcs/rfc1623.rs:45:26: 45:55
        StorageDead(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:45:54: 45:55
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:45:54: 45:55
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:45:1: 45:56
    }
}

promoted[0] in STATIC_BAR: &[bool; 2] = {
    let mut _0: &[bool; 2];              // return place in scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
    let mut _1: [bool; 2];               // in scope 0 at ui/rfcs/rfc1623.rs:45:40: 45:53

    bb0: {
        _1 = [const true, const false];  // scope 0 at ui/rfcs/rfc1623.rs:45:40: 45:53
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:45:39: 45:53
    }
}

const CONST_BAR: Foo<'_> = {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/rfcs/rfc1623.rs:46:18: 46:21
    let mut _1: &[bool];                 // in scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
    let mut _2: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
    let _3: &[bool; 2];                  // in scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
    let _4: [bool; 2];                   // in scope 0 at ui/rfcs/rfc1623.rs:46:38: 46:51
    let mut _5: &[bool; 2];              // in scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        StorageLive(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        StorageLive(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        _5 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:46:37: 46:51
                                         // + literal: Const { ty: &[bool; 2], val: Unevaluated(CONST_BAR, [], Some(promoted[0])) }
        _3 = &(*_5);                     // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        _2 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        _1 = move _2 as &[bool] (Pointer(Unsize)); // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        StorageDead(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:46:50: 46:51
        _0 = Foo::<'_> { bools: move _1 }; // scope 0 at ui/rfcs/rfc1623.rs:46:24: 46:53
        StorageDead(_3);                 // scope 0 at ui/rfcs/rfc1623.rs:46:52: 46:53
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:46:52: 46:53
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:46:1: 46:54
    }
}

promoted[0] in CONST_BAR: &[bool; 2] = {
    let mut _0: &[bool; 2];              // return place in scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
    let mut _1: [bool; 2];               // in scope 0 at ui/rfcs/rfc1623.rs:46:38: 46:51

    bb0: {
        _1 = [const true, const false];  // scope 0 at ui/rfcs/rfc1623.rs:46:38: 46:51
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:46:37: 46:51
    }
}

fn baz(_1: &[u8]) -> Option<u8> {
    debug e => _1;                       // in scope 0 at ui/rfcs/rfc1623.rs:50:8: 50:9
    let mut _0: std::option::Option<u8>; // return place in scope 0 at ui/rfcs/rfc1623.rs:50:21: 50:31
    let mut _2: std::option::Option<&u8>; // in scope 0 at ui/rfcs/rfc1623.rs:51:5: 51:14
    let mut _3: &[u8];                   // in scope 0 at ui/rfcs/rfc1623.rs:51:5: 51:14
    let mut _4: [closure@ui/rfcs/rfc1623.rs:51:19: 51:22]; // in scope 0 at ui/rfcs/rfc1623.rs:51:19: 51:25

    bb0: {
        _3 = _1;                         // scope 0 at ui/rfcs/rfc1623.rs:51:5: 51:14
        _2 = core::slice::<impl [u8]>::first(move _3) -> bb1; // scope 0 at ui/rfcs/rfc1623.rs:51:5: 51:14
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:51:7: 51:12
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Option<&'a u8> {core::slice::<impl [u8]>::first}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<&u8>::map::<u8, [closure@ui/rfcs/rfc1623.rs:51:19: 51:22]>(move _2, move _4) -> bb2; // scope 0 at ui/rfcs/rfc1623.rs:51:5: 51:26
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:51:15: 51:18
                                         // + literal: Const { ty: fn(Option<&u8>, [closure@ui/rfcs/rfc1623.rs:51:19: 51:22]) -> Option<u8> {Option::<&u8>::map::<u8, [closure@ui/rfcs/rfc1623.rs:51:19: 51:22]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:52:2: 52:2
    }
}

fn baz::{closure#0}(_1: [closure@ui/rfcs/rfc1623.rs:51:19: 51:22], _2: &u8) -> u8 {
    debug x => _2;                       // in scope 0 at ui/rfcs/rfc1623.rs:51:20: 51:21
    let mut _0: u8;                      // return place in scope 0 at ui/rfcs/rfc1623.rs:51:23: 51:23

    bb0: {
        _0 = (*_2);                      // scope 0 at ui/rfcs/rfc1623.rs:51:23: 51:25
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:51:25: 51:25
    }
}

static STATIC_BAZ: &fn(&[u8]) -> Option<u8> = {
    let mut _0: &fn(&[u8]) -> std::option::Option<u8>; // return place in scope 0 at ui/rfcs/rfc1623.rs:54:20: 54:24
    let _1: &fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
    let _2: fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:54:28: 54:40
    let mut _3: &fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:54:27: 54:40
                                         // + literal: Const { ty: &fn(&[u8]) -> Option<u8>, val: Unevaluated(STATIC_BAZ, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:54:39: 54:40
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:54:1: 54:41
    }
}

promoted[0] in STATIC_BAZ: &fn(&[u8]) -> Option<u8> = {
    let mut _0: &fn(&[u8]) -> std::option::Option<u8>; // return place in scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
    let mut _1: fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:54:28: 54:40

    bb0: {
        _1 = baz as for<'a> fn(&'a [u8]) -> std::option::Option<u8> (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:54:29: 54:32
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:54:29: 54:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Option<u8> {baz}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:54:27: 54:40
    }
}

const CONST_BAZ: &fn(&[u8]) -> Option<u8> = {
    let mut _0: &fn(&[u8]) -> std::option::Option<u8>; // return place in scope 0 at ui/rfcs/rfc1623.rs:55:18: 55:22
    let _1: &fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
    let _2: fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:55:26: 55:38
    let mut _3: &fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
        _3 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:55:25: 55:38
                                         // + literal: Const { ty: &fn(&[u8]) -> Option<u8>, val: Unevaluated(CONST_BAZ, [], Some(promoted[0])) }
        _1 = &(*_3);                     // scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
        _0 = &(*_1);                     // scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:55:37: 55:38
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:55:1: 55:39
    }
}

promoted[0] in CONST_BAZ: &fn(&[u8]) -> Option<u8> = {
    let mut _0: &fn(&[u8]) -> std::option::Option<u8>; // return place in scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
    let mut _1: fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:55:26: 55:38

    bb0: {
        _1 = baz as for<'a> fn(&'a [u8]) -> std::option::Option<u8> (Pointer(ReifyFnPointer)); // scope 0 at ui/rfcs/rfc1623.rs:55:27: 55:30
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:55:27: 55:30
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Option<u8> {baz}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:55:25: 55:38
    }
}

static BYTES: &[u8] = {
    let mut _0: &[u8];                   // return place in scope 0 at ui/rfcs/rfc1623.rs:57:15: 57:20
    let mut _1: &[u8; 3];                // in scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
    let _2: &[u8; 3];                    // in scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
    let _3: [u8; 3];                     // in scope 0 at ui/rfcs/rfc1623.rs:57:24: 57:33
    let mut _4: &[u8; 3];                // in scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
        StorageLive(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
        _4 = const _;                    // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:57:23: 57:33
                                         // + literal: Const { ty: &[u8; 3], val: Unevaluated(BYTES, [], Some(promoted[0])) }
        _2 = &(*_4);                     // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
        _1 = &(*_2);                     // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
        _0 = move _1 as &[u8] (Pointer(Unsize)); // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
        StorageDead(_2);                 // scope 0 at ui/rfcs/rfc1623.rs:57:32: 57:33
        StorageDead(_1);                 // scope 0 at ui/rfcs/rfc1623.rs:57:32: 57:33
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:57:1: 57:34
    }
}

promoted[0] in BYTES: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
    let mut _1: [u8; 3];                 // in scope 0 at ui/rfcs/rfc1623.rs:57:24: 57:33

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8]; // scope 0 at ui/rfcs/rfc1623.rs:57:24: 57:33
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:57:23: 57:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1623.rs:59:11: 59:11
    let _1: &[u8; 3];                    // in scope 0 at ui/rfcs/rfc1623.rs:61:9: 61:10
    let _2: &[u8];                       // in scope 0 at ui/rfcs/rfc1623.rs:62:5: 62:24
    let mut _3: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:62:5: 62:21
    let mut _4: &&for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:62:5: 62:21
    let mut _5: &[u8];                   // in scope 0 at ui/rfcs/rfc1623.rs:62:22: 62:23
    let mut _6: &[u8; 3];                // in scope 0 at ui/rfcs/rfc1623.rs:62:22: 62:23
    let _7: &[u8];                       // in scope 0 at ui/rfcs/rfc1623.rs:63:5: 63:23
    let mut _8: for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:63:5: 63:20
    let mut _9: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:63:5: 63:20
    let mut _10: &[u8];                  // in scope 0 at ui/rfcs/rfc1623.rs:63:21: 63:22
    let mut _11: &[u8; 3];               // in scope 0 at ui/rfcs/rfc1623.rs:63:21: 63:22
    let _12: std::option::Option<u8>;    // in scope 0 at ui/rfcs/rfc1623.rs:65:5: 65:22
    let mut _13: fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:65:5: 65:15
    let mut _14: &&fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:65:5: 65:15
    let mut _15: &[u8];                  // in scope 0 at ui/rfcs/rfc1623.rs:65:16: 65:21
    let mut _16: &&[u8];                 // in scope 0 at ui/rfcs/rfc1623.rs:65:16: 65:21
    let _17: std::option::Option<u8>;    // in scope 0 at ui/rfcs/rfc1623.rs:66:5: 66:21
    let mut _18: fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:66:5: 66:14
    let mut _19: &fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:66:5: 66:14
    let mut _20: &[u8];                  // in scope 0 at ui/rfcs/rfc1623.rs:66:15: 66:20
    let mut _21: &&[u8];                 // in scope 0 at ui/rfcs/rfc1623.rs:66:15: 66:20
    let _25: ();                         // in scope 0 at ui/rfcs/rfc1623.rs:73:9: 73:32
    let mut _26: for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:73:9: 73:23
    let mut _27: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8); // in scope 0 at ui/rfcs/rfc1623.rs:73:9: 73:23
    let mut _28: &u8;                    // in scope 0 at ui/rfcs/rfc1623.rs:73:24: 73:25
    let mut _29: &u8;                    // in scope 0 at ui/rfcs/rfc1623.rs:73:27: 73:28
    let mut _30: &u8;                    // in scope 0 at ui/rfcs/rfc1623.rs:73:30: 73:31
    let mut _34: &[u8; 3];               // in scope 0 at ui/rfcs/rfc1623.rs:61:13: 61:25
    let mut _35: &for<'a> fn(&'a [u8]) -> &'a [u8]; // in scope 0 at ui/rfcs/rfc1623.rs:62:5: 62:21
    let mut _36: &fn(&[u8]) -> std::option::Option<u8>; // in scope 0 at ui/rfcs/rfc1623.rs:65:5: 65:15
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/rfcs/rfc1623.rs:61:9: 61:10
        let _22: &u8;                    // in scope 1 at ui/rfcs/rfc1623.rs:69:9: 69:10
        let mut _33: &u8;                // in scope 1 at ui/rfcs/rfc1623.rs:69:13: 69:15
        scope 2 {
            debug a => _22;              // in scope 2 at ui/rfcs/rfc1623.rs:69:9: 69:10
            let _23: &u8;                // in scope 2 at ui/rfcs/rfc1623.rs:71:13: 71:14
            let mut _32: &u8;            // in scope 2 at ui/rfcs/rfc1623.rs:71:17: 71:19
            scope 3 {
                debug b => _23;          // in scope 3 at ui/rfcs/rfc1623.rs:71:13: 71:14
                let _24: &u8;            // in scope 3 at ui/rfcs/rfc1623.rs:72:13: 72:14
                let mut _31: &u8;        // in scope 3 at ui/rfcs/rfc1623.rs:72:17: 72:19
                scope 4 {
                    debug c => _24;      // in scope 4 at ui/rfcs/rfc1623.rs:72:13: 72:14
                }
            }
        }
    }

    bb0: {
        _34 = const _;                   // scope 0 at ui/rfcs/rfc1623.rs:61:13: 61:25
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:61:13: 61:25
                                         // + literal: Const { ty: &[u8; 3], val: Unevaluated(main, [], Some(promoted[3])) }
        _1 = _34;                        // scope 0 at ui/rfcs/rfc1623.rs:61:13: 61:25
        _4 = const {alloc1: &&for<'a> fn(&'a [u8]) -> &'a [u8]}; // scope 1 at ui/rfcs/rfc1623.rs:62:5: 62:21
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:62:5: 62:21
                                         // + literal: Const { ty: &&for<'a> fn(&'a [u8]) -> &'a [u8], val: Value(Scalar(alloc1)) }
        _35 = deref_copy (*_4);          // scope 1 at ui/rfcs/rfc1623.rs:62:5: 62:21
        _3 = (*_35);                     // scope 1 at ui/rfcs/rfc1623.rs:62:5: 62:21
        _6 = _1;                         // scope 1 at ui/rfcs/rfc1623.rs:62:22: 62:23
        _5 = move _6 as &[u8] (Pointer(Unsize)); // scope 1 at ui/rfcs/rfc1623.rs:62:22: 62:23
        _2 = move _3(move _5) -> bb1;    // scope 1 at ui/rfcs/rfc1623.rs:62:5: 62:24
    }

    bb1: {
        _9 = const _;                    // scope 1 at ui/rfcs/rfc1623.rs:63:5: 63:20
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:63:5: 63:20
                                         // + literal: Const { ty: &for<'a> fn(&'a [u8]) -> &'a [u8], val: Unevaluated(CONST_SIMPLE_FN, [], None) }
        _8 = (*_9);                      // scope 1 at ui/rfcs/rfc1623.rs:63:5: 63:20
        _11 = _1;                        // scope 1 at ui/rfcs/rfc1623.rs:63:21: 63:22
        _10 = move _11 as &[u8] (Pointer(Unsize)); // scope 1 at ui/rfcs/rfc1623.rs:63:21: 63:22
        _7 = move _8(move _10) -> bb2;   // scope 1 at ui/rfcs/rfc1623.rs:63:5: 63:23
    }

    bb2: {
        _14 = const {alloc2: &&fn(&[u8]) -> Option<u8>}; // scope 1 at ui/rfcs/rfc1623.rs:65:5: 65:15
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:65:5: 65:15
                                         // + literal: Const { ty: &&fn(&[u8]) -> Option<u8>, val: Value(Scalar(alloc2)) }
        _36 = deref_copy (*_14);         // scope 1 at ui/rfcs/rfc1623.rs:65:5: 65:15
        _13 = (*_36);                    // scope 1 at ui/rfcs/rfc1623.rs:65:5: 65:15
        _16 = const {alloc3: &&[u8]};    // scope 1 at ui/rfcs/rfc1623.rs:65:16: 65:21
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:65:16: 65:21
                                         // + literal: Const { ty: &&[u8], val: Value(Scalar(alloc3)) }
        _15 = (*_16);                    // scope 1 at ui/rfcs/rfc1623.rs:65:16: 65:21
        _12 = move _13(move _15) -> bb3; // scope 1 at ui/rfcs/rfc1623.rs:65:5: 65:22
    }

    bb3: {
        _19 = const _;                   // scope 1 at ui/rfcs/rfc1623.rs:66:5: 66:14
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:66:5: 66:14
                                         // + literal: Const { ty: &fn(&[u8]) -> Option<u8>, val: Unevaluated(CONST_BAZ, [], None) }
        _18 = (*_19);                    // scope 1 at ui/rfcs/rfc1623.rs:66:5: 66:14
        _21 = const {alloc3: &&[u8]};    // scope 1 at ui/rfcs/rfc1623.rs:66:15: 66:20
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:66:15: 66:20
                                         // + literal: Const { ty: &&[u8], val: Value(Scalar(alloc3)) }
        _20 = (*_21);                    // scope 1 at ui/rfcs/rfc1623.rs:66:15: 66:20
        _17 = move _18(move _20) -> bb4; // scope 1 at ui/rfcs/rfc1623.rs:66:5: 66:21
    }

    bb4: {
        _33 = const _;                   // scope 1 at ui/rfcs/rfc1623.rs:69:13: 69:15
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:69:13: 69:15
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[2])) }
        _22 = _33;                       // scope 1 at ui/rfcs/rfc1623.rs:69:13: 69:15
        _32 = const _;                   // scope 2 at ui/rfcs/rfc1623.rs:71:17: 71:19
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:71:17: 71:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _23 = _32;                       // scope 2 at ui/rfcs/rfc1623.rs:71:17: 71:19
        _31 = const _;                   // scope 3 at ui/rfcs/rfc1623.rs:72:17: 72:19
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:72:17: 72:19
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _31;                       // scope 3 at ui/rfcs/rfc1623.rs:72:17: 72:19
        _27 = const _;                   // scope 4 at ui/rfcs/rfc1623.rs:73:9: 73:23
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1623.rs:73:9: 73:23
                                         // + literal: Const { ty: &for<'a, 'b, 'c> fn(&'a u8, &'b u8, &'c u8), val: Unevaluated(CONST_MULTI_FN, [], None) }
        _26 = (*_27);                    // scope 4 at ui/rfcs/rfc1623.rs:73:9: 73:23
        _28 = _22;                       // scope 4 at ui/rfcs/rfc1623.rs:73:24: 73:25
        _29 = _23;                       // scope 4 at ui/rfcs/rfc1623.rs:73:27: 73:28
        _30 = _24;                       // scope 4 at ui/rfcs/rfc1623.rs:73:30: 73:31
        _25 = move _26(move _28, move _29, move _30) -> bb5; // scope 4 at ui/rfcs/rfc1623.rs:73:9: 73:32
    }

    bb5: {
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:75:2: 75:2
    }
}

alloc3 (static: BYTES, size: 16, align: 8) {
    ╾───────alloc57───────╼ 03 00 00 00 00 00 00 00 │ ╾──────╼........
}

alloc57 (size: 3, align: 1) {
    01 02 03                                        │ ...
}

alloc2 (static: STATIC_BAZ, size: 8, align: 8) {
    ╾───────alloc51───────╼                         │ ╾──────╼
}

alloc51 (size: 8, align: 8) {
    ╾───────alloc50───────╼                         │ ╾──────╼
}

alloc50 (fn: baz)

alloc1 (static: STATIC_SIMPLE_FN, size: 8, align: 8) {
    ╾───────alloc15───────╼                         │ ╾──────╼
}

alloc15 (size: 8, align: 8) {
    ╾───────alloc14───────╼                         │ ╾──────╼
}

alloc14 (fn: id_u8_slice)

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/rfcs/rfc1623.rs:72:17: 72:19
    let mut _1: u8;                      // in scope 0 at ui/rfcs/rfc1623.rs:72:18: 72:19

    bb0: {
        _1 = const 3_u8;                 // scope 0 at ui/rfcs/rfc1623.rs:72:18: 72:19
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:72:17: 72:19
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:72:17: 72:19
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/rfcs/rfc1623.rs:71:17: 71:19
    let mut _1: u8;                      // in scope 0 at ui/rfcs/rfc1623.rs:71:18: 71:19

    bb0: {
        _1 = const 2_u8;                 // scope 0 at ui/rfcs/rfc1623.rs:71:18: 71:19
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:71:17: 71:19
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:71:17: 71:19
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/rfcs/rfc1623.rs:69:13: 69:15
    let mut _1: u8;                      // in scope 0 at ui/rfcs/rfc1623.rs:69:14: 69:15

    bb0: {
        _1 = const 1_u8;                 // scope 0 at ui/rfcs/rfc1623.rs:69:14: 69:15
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:69:13: 69:15
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:69:13: 69:15
    }
}

promoted[3] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/rfcs/rfc1623.rs:61:13: 61:25
    let mut _1: [u8; 3];                 // in scope 0 at ui/rfcs/rfc1623.rs:61:14: 61:25

    bb0: {
        _1 = [const 1_u8, const 2_u8, const 3_u8]; // scope 0 at ui/rfcs/rfc1623.rs:61:14: 61:25
        _0 = &_1;                        // scope 0 at ui/rfcs/rfc1623.rs:61:13: 61:25
        return;                          // scope 0 at ui/rfcs/rfc1623.rs:61:13: 61:25
    }
}
