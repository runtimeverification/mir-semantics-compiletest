// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 0];
    let _6: [core::fmt::rt::Argument<'_>; 0];
    let mut _7: (&i32, &i32);
    let _8: &i32;
    let _9: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let _18: &i32;
    let _19: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let _28: &i32;
    let _29: &i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let _37: i32;
    let mut _38: (&i32, &i32);
    let mut _39: &i32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: i32;
    let mut _45: i32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&&str, &&str);
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&i32, &i32);
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i32, &i32);
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: i32;
    let mut _73: i32;
    let _75: !;
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _84: &i32;
    let mut _85: &i32;
    let mut _86: &i32;
    let mut _87: &i32;
    let mut _88: &i32;
    let mut _89: &i32;
    let mut _90: &[&str; 1];
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug match => const 5_i32;
        let _40: &i32;
        let _41: &i32;
        let _50: &&str;
        let _51: &&str;
        let _58: &i32;
        let _59: &i32;
        let _68: &i32;
        let _69: &i32;
        let mut _77: &i32;
        let mut _78: &i32;
        let mut _79: &i32;
        let mut _80: &i32;
        let mut _81: &&str;
        let mut _82: &&str;
        let mut _83: &i32;
        scope 8 {
            debug left_val => _40;
            debug right_val => _41;
            let _46: core::panicking::AssertKind;
            scope 9 {
                debug kind => _46;
            }
        }
        scope 10 {
            debug left_val => _50;
            debug right_val => _51;
            let _54: core::panicking::AssertKind;
            scope 11 {
                debug kind => _54;
            }
        }
        scope 12 {
            debug left_val => _58;
            debug right_val => _59;
            let _64: core::panicking::AssertKind;
            scope 13 {
                debug kind => _64;
            }
        }
        scope 14 {
            debug left_val => _68;
            debug right_val => _69;
            let _74: core::panicking::AssertKind;
            scope 15 {
                debug kind => _74;
            }
        }
    }

    bb0: {
        _90 = const _;
        _3 = _90 as &[&str] (Pointer(Unsize));
        _6 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _89 = const _;
        _88 = const _;
        _7 = (_89, _88);
        _8 = (_7.0: &i32);
        _9 = (_7.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb5: {
        _87 = const _;
        _86 = const _;
        _17 = (_87, _86);
        _18 = (_17.0: &i32);
        _19 = (_17.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb7: {
        _85 = const _;
        _84 = const _;
        _27 = (_85, _84);
        _28 = (_27.0: &i32);
        _29 = (_27.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        _37 = const 5_i32;
        _83 = const _;
        _39 = &_37;
        _38 = (_83, move _39);
        _40 = (_38.0: &i32);
        _41 = (_38.1: &i32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<i32, i32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb11: {
        _82 = const _;
        _81 = const _;
        _49 = (_82, _81);
        _50 = (_49.0: &&str);
        _51 = (_49.1: &&str);
        _53 = <&str as PartialEq>::eq(_50, _51) -> [return: bb12, unwind continue];
    }

    bb12: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<&str, &str>(move _54, _50, _51, move _56) -> unwind continue;
    }

    bb14: {
        _80 = const _;
        _79 = const _;
        _57 = (_80, _79);
        _58 = (_57.0: &i32);
        _59 = (_57.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb16: {
        _78 = const _;
        _77 = const _;
        _67 = (_78, _77);
        _68 = (_67.0: &i32);
        _69 = (_67.1: &i32);
        _72 = (*_68);
        _73 = (*_69);
        _71 = Eq(move _72, move _73);
        _70 = Not(move _71);
        switchInt(move _70) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _74 = core::panicking::AssertKind::Eq;
        _76 = Option::<Arguments<'_>>::None;
        _75 = core::panicking::assert_failed::<i32, i32>(move _74, _68, _69, move _76) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "r#struct";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "r#struct";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "1\n"];
        _0 = &_1;
        return;
    }
}
