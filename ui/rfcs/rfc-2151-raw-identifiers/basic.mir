// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn r#fn(_1: u32) -> u32 {
    debug match => _1;
    let mut _0: u32;

    bb0: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&i32, &i32);
    let mut _15: &i32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: i32;
    let mut _21: i32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&i32, &i32);
    let mut _27: &i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&u32, &u32);
    let mut _38: &u32;
    let _39: u32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u32;
    let mut _45: u32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&bool, &bool);
    let mut _51: &bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug struct => const 1_i32;
        let _4: &i32;
        let _5: &i32;
        let _13: i32;
        let mut _65: &i32;
        scope 2 {
            debug left_val => _4;
            debug right_val => _5;
            let _10: core::panicking::AssertKind;
            scope 3 {
                debug kind => _10;
            }
        }
        scope 4 {
            debug foo => const 2_i32;
            let _16: &i32;
            let _17: &i32;
            let _25: i32;
            let mut _64: &i32;
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _22;
                }
            }
            scope 7 {
                debug bar => const 3_i32;
                let _28: &i32;
                let _29: &i32;
                let _40: &u32;
                let _41: &u32;
                let _49: bool;
                let mut _62: &u32;
                let mut _63: &i32;
                scope 8 {
                    debug left_val => _28;
                    debug right_val => _29;
                    let _34: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _34;
                    }
                }
                scope 10 {
                    debug left_val => _40;
                    debug right_val => _41;
                    let _46: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _46;
                    }
                }
                scope 12 {
                    debug true => const false;
                    let _52: &bool;
                    let _53: &bool;
                    let mut _61: &bool;
                    scope 13 {
                        debug left_val => _52;
                        debug right_val => _53;
                        let _58: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _58;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 1_i32;
        _65 = const _;
        _3 = &_1;
        _2 = (_65, move _3);
        _4 = (_2.0: &i32);
        _5 = (_2.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _13 = const 2_i32;
        _64 = const _;
        _15 = &_13;
        _14 = (_64, move _15);
        _16 = (_14.0: &i32);
        _17 = (_14.1: &i32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<i32, i32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb4: {
        _25 = const 3_i32;
        _63 = const _;
        _27 = &_25;
        _26 = (_63, move _27);
        _28 = (_26.0: &i32);
        _29 = (_26.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _62 = const _;
        _39 = r#fn(const 4_u32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _38 = &_39;
        _37 = (_62, move _38);
        _40 = (_37.0: &u32);
        _41 = (_37.1: &u32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u32, u32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb9: {
        _49 = const false;
        _51 = &_49;
        _61 = const _;
        _50 = (move _51, _61);
        _52 = (_50.0: &bool);
        _53 = (_50.1: &bool);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<bool, bool>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const false;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}
