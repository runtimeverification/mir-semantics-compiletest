// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/rfcs/rfc-2151-raw-identifiers/attr.rs:9:12: 9:19>::fmt(_1: &Test2, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "Test2";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&str, &std::string::String);
    let mut _12: &std::string::String;
    let _13: std::string::String;
    let _14: std::string::String;
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &&str;
    let _22: &std::string::String;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: &Test2;
    let mut _29: &[&str; 1];
    let mut _30: &&str;
    let mut _31: &usize;
    let mut _32: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug res => _14;
    }
    scope 4 {
        debug left_val => _21;
        debug right_val => _22;
        let _25: core::panicking::AssertKind;
        scope 5 {
            debug kind => _25;
        }
    }

    bb0: {
        _32 = const _;
        _31 = const _;
        _1 = (_32, _31);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        _30 = const _;
        _29 = const _;
        _16 = _29 as &[&str] (Pointer(Unsize));
        _28 = const _;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<Test2>(_28) -> [return: bb3, unwind continue];
    }

    bb3: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = format(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = move _14;
        _12 = &_13;
        _11 = (_30, move _12);
        _21 = (_11.0: &&str);
        _22 = (_11.1: &std::string::String);
        _24 = <&str as PartialEq<String>>::eq(_21, _22) -> [return: bb6, unwind: bb10];
    }

    bb6: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&str, String>(move _25, _21, _22, move _27) -> bb10;
    }

    bb8: {
        drop(_13) -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }

    bb10 (cleanup): {
        drop(_13) -> [return: bb11, unwind terminate];
    }

    bb11 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Test2 = {
    let mut _0: &Test2;
    let mut _1: Test2;

    bb0: {
        _1 = Test2(const 123_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Test2(123)";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 9_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = std::mem::size_of::<Test>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

fn Test2(_1: u32) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test2(_1: u32) -> Test2 {
    let mut _0: Test2;

    bb0: {
        _0 = Test2(move _1);
        return;
    }
}
