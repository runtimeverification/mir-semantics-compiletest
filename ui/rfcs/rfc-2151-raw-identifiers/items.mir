// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:2:10: 2:15>::fmt(_1: &IntWrapper, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u32;
    let _6: &u32;

    bb0: {
        _3 = const "IntWrapper";
        _6 = &((*_1).0: u32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:2:17: 2:26>::eq(_1: &IntWrapper, _2: &IntWrapper) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _3 = ((*_1).0: u32);
        _4 = ((*_2).0: u32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:2:28: 2:30>::assert_receiver_is_total_eq(_1: &IntWrapper) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:10: 5:15>::fmt(_1: &HasKeywordField, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&u32;
    let _7: &u32;

    bb0: {
        _3 = const "HasKeywordField";
        _4 = const "struct";
        _7 = &((*_1).0: u32);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:17: 5:20>::cmp(_1: &HasKeywordField, _2: &HasKeywordField) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &u32;
    let _4: &u32;

    bb0: {
        _3 = &((*_1).0: u32);
        _4 = &((*_2).0: u32);
        _0 = <u32 as Ord>::cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:22: 5:32>::partial_cmp(_1: &HasKeywordField, _2: &HasKeywordField) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &u32;
    let _4: &u32;

    bb0: {
        _3 = &((*_1).0: u32);
        _4 = &((*_2).0: u32);
        _0 = <u32 as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:34: 5:43>::eq(_1: &HasKeywordField, _2: &HasKeywordField) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: u32;
    let mut _4: u32;

    bb0: {
        _3 = ((*_1).0: u32);
        _4 = ((*_2).0: u32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:45: 5:47>::assert_receiver_is_total_eq(_1: &HasKeywordField) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:49: 5:53>::hash(_1: &HasKeywordField, _2: &mut __H) -> () {
    debug self => _1;
    debug state => _2;
    let mut _0: ();
    let _3: &u32;

    bb0: {
        _3 = &((*_1).0: u32);
        _0 = <u32 as Hash>::hash::<__H>(_3, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:61: 5:66>::clone(_1: &HasKeywordField) -> HasKeywordField {
    debug self => _1;
    let mut _0: HasKeywordField;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:5:68: 5:75>::default() -> HasKeywordField {
    let mut _0: HasKeywordField;
    let mut _1: u32;

    bb0: {
        _1 = <u32 as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = HasKeywordField { struct: move _1 };
        return;
    }
}

fn <impl at ui/rfcs/rfc-2151-raw-identifiers/items.rs:15:1: 15:28>::r#trait(_1: &Generic<u32>) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = ((*_1).0: u32);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&IntWrapper, &IntWrapper);
    let _2: &IntWrapper;
    let _3: &IntWrapper;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: IntWrapper;
    let _10: u32;
    let mut _11: (&u32, &u32);
    let mut _12: &u32;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: u32;
    let mut _18: u32;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&&str, &std::string::String);
    let mut _23: &std::string::String;
    let _24: std::string::String;
    let _25: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &&str;
    let _33: &std::string::String;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i32, &i32);
    let mut _40: &i32;
    let _41: &i32;
    let _42: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _50: (&u32, &u32);
    let mut _51: &u32;
    let _52: u32;
    let _53: &u32;
    let _54: &u32;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: u32;
    let mut _58: u32;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: &Generic<u32>;
    let mut _63: &u32;
    let mut _64: &Generic<i32>;
    let mut _65: &i32;
    let mut _66: &HasKeywordField;
    let mut _67: &[&str; 1];
    let mut _68: &&str;
    let mut _70: &IntWrapper;
    let mut _71: &IntWrapper;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug struct => _10;
        let _13: &u32;
        let _14: &u32;
        let mut _69: &u32;
        scope 4 {
            debug left_val => _13;
            debug right_val => _14;
            let _19: core::panicking::AssertKind;
            scope 5 {
                debug kind => _19;
            }
        }
    }
    scope 6 {
        debug res => _25;
    }
    scope 7 {
        debug left_val => _32;
        debug right_val => _33;
        let _36: core::panicking::AssertKind;
        scope 8 {
            debug kind => _36;
        }
    }
    scope 9 {
        debug left_val => _41;
        debug right_val => _42;
        let _47: core::panicking::AssertKind;
        scope 10 {
            debug kind => _47;
        }
    }
    scope 11 {
        debug left_val => _53;
        debug right_val => _54;
        let _59: core::panicking::AssertKind;
        scope 12 {
            debug kind => _59;
        }
    }

    bb0: {
        _71 = const _;
        _70 = const _;
        _1 = (_71, _70);
        _2 = (_1.0: &IntWrapper);
        _3 = (_1.1: &IntWrapper);
        _5 = <IntWrapper as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<IntWrapper, IntWrapper>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _9 = IntWrapper(const 2_u32);
        _10 = (_9.0: u32);
        _69 = const _;
        _12 = &_10;
        _11 = (_69, move _12);
        _13 = (_11.0: &u32);
        _14 = (_11.1: &u32);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<u32, u32>(move _19, _13, _14, move _21) -> unwind continue;
    }

    bb5: {
        _68 = const _;
        _67 = const _;
        _27 = _67 as &[&str] (Pointer(Unsize));
        _66 = const _;
        _31 = core::fmt::rt::Argument::<'_>::new_debug::<HasKeywordField>(_66) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb7, unwind continue];
    }

    bb7: {
        _25 = format(move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _24 = move _25;
        _23 = &_24;
        _22 = (_68, move _23);
        _32 = (_22.0: &&str);
        _33 = (_22.1: &std::string::String);
        _35 = <&str as PartialEq<String>>::eq(_32, _33) -> [return: bb9, unwind: bb18];
    }

    bb9: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<&str, String>(move _36, _32, _33, move _38) -> bb18;
    }

    bb11: {
        drop(_24) -> [return: bb12, unwind continue];
    }

    bb12: {
        _65 = const _;
        _64 = const _;
        _40 = &((*_64).0: i32);
        _39 = (_65, move _40);
        _41 = (_39.0: &i32);
        _42 = (_39.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb14: {
        _63 = const _;
        _62 = const _;
        _52 = <Generic<u32> as Trait>::r#trait(_62) -> [return: bb15, unwind continue];
    }

    bb15: {
        _51 = &_52;
        _50 = (_63, move _51);
        _53 = (_50.0: &u32);
        _54 = (_50.1: &u32);
        _57 = (*_53);
        _58 = (*_54);
        _56 = Eq(move _57, move _58);
        _55 = Not(move _56);
        switchInt(move _55) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<u32, u32>(move _59, _53, _54, move _61) -> unwind continue;
    }

    bb17: {
        return;
    }

    bb18 (cleanup): {
        drop(_24) -> [return: bb19, unwind terminate];
    }

    bb19 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Generic<u32> = {
    let mut _0: &Generic<u32>;
    let mut _1: Generic<u32>;

    bb0: {
        _1 = Generic::<u32>(const 5_u32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 5_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Generic<i32> = {
    let mut _0: &Generic<i32>;
    let mut _1: Generic<i32>;

    bb0: {
        _1 = Generic::<i32>(const 4_i32);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &HasKeywordField = {
    let mut _0: &HasKeywordField;
    let mut _1: HasKeywordField;

    bb0: {
        _1 = HasKeywordField { struct: const 3_u32 };
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "HasKeywordField { struct: 3 }";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &IntWrapper = {
    let mut _0: &IntWrapper;
    let mut _1: IntWrapper;

    bb0: {
        _1 = IntWrapper(const 1_u32);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &IntWrapper = {
    let mut _0: &IntWrapper;
    let mut _1: IntWrapper;

    bb0: {
        _1 = IntWrapper(const 1_u32);
        _0 = &_1;
        return;
    }
}

fn IntWrapper(_1: u32) -> IntWrapper {
    let mut _0: IntWrapper;

    bb0: {
        _0 = IntWrapper(move _1);
        return;
    }
}

// MIR FOR CTFE
fn IntWrapper(_1: u32) -> IntWrapper {
    let mut _0: IntWrapper;

    bb0: {
        _0 = IntWrapper(move _1);
        return;
    }
}

fn Generic(_1: T) -> Generic<T> {
    let mut _0: Generic<T>;

    bb0: {
        _0 = Generic::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Generic(_1: T) -> Generic<T> {
    let mut _0: Generic<T>;

    bb0: {
        _0 = Generic::<T>(move _1);
        return;
    }
}
