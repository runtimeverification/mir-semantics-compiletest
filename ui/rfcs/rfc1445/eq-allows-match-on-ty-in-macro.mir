// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:17: 13:26>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:17: 13:26
    debug other => _2;                   // in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:17: 13:26
    let mut _0: bool;                    // return place in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:17: 13:26
    let mut _3: u32;                     // in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:8:13: 8:19
    let mut _4: u32;                     // in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:8:13: 8:19

    bb0: {
        _3 = ((*_1).0: u32);             // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:8:13: 8:19
        _4 = ((*_2).0: u32);             // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:8:13: 8:19
        _0 = Eq(move _3, move _4);       // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:8:13: 8:19
        return;                          // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:26: 13:26
    }
}

fn <impl at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:28: 13:30>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:28: 13:30
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:28: 13:30
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:13:30: 13:30
    }
}

const FOO: Foo = {
    let mut _0: Foo;                     // return place in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:15:12: 15:15

    bb0: {
        _0 = Foo { x: const 0_u32 };     // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:15:18: 15:30
        return;                          // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:15:1: 15:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:17:11: 17:11
    let _1: Foo;                         // in scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:18:9: 18:10
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:18:9: 18:10
    }

    bb0: {
        _1 = const Foo {{ x: 1_u32 }};   // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:18:13: 18:25
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:18:13: 18:25
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x00000001)) }
        return;                          // scope 0 at ui/rfcs/rfc1445/eq-allows-match-on-ty-in-macro.rs:23:2: 23:2
    }
}
