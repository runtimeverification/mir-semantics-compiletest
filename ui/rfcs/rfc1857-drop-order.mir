// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/rfcs/rfc1857-drop-order.rs:16:1: 16:16>::new(_1: u32, _2: Rc<RefCell<Vec<u32>>>) -> PushOnDrop {
    debug val => _1;                     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:17:12: 17:15
    debug vec => _2;                     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:17:22: 17:25
    let mut _0: PushOnDrop;              // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:17:53: 17:63
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:18:22: 18:25
    let mut _4: u32;                     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:18:27: 18:30

    bb0: {
        _3 = move _2;                    // scope 0 at ui/rfcs/rfc1857-drop-order.rs:18:22: 18:25
        _4 = _1;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:18:27: 18:30
        _0 = PushOnDrop { vec: move _3, val: move _4 }; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:18:9: 18:32
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:19:6: 19:6
    }
}

fn <impl at ui/rfcs/rfc1857-drop-order.rs:22:1: 22:25>::drop(_1: &mut PushOnDrop) -> () {
    debug self => _1;                    // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:23:13: 23:22
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:23:24: 23:24
    let mut _2: &mut std::vec::Vec<u32>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
    let mut _3: &mut std::vec::Vec<u32>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
    let mut _4: &mut std::cell::RefMut<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
    let mut _5: std::cell::RefMut<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
    let mut _6: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
    let _7: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
    let mut _8: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
    let mut _9: u32;                     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:36: 24:44

    bb0: {
        _8 = &((*_1).0: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
        _7 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _8) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _7;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
        _5 = RefCell::<Vec<u32>>::borrow_mut(move _6) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:30
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:24:18: 24:28
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> RefMut<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _5;                    // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
        _3 = <RefMut<'_, Vec<u32>> as DerefMut>::deref_mut(move _4) -> [return: bb3, unwind: bb6]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<u32>>) -> &'a mut <RefMut<'_, Vec<u32>> as Deref>::Target {<RefMut<'_, Vec<u32>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &mut (*_3);                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
        _9 = ((*_1).1: u32);             // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:36: 24:44
        _0 = Vec::<u32>::push(move _2, move _9) -> [return: bb4, unwind: bb6]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:24:9: 24:45
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:24:31: 24:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u32>, u32) {Vec::<u32>::push}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> bb5;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:25:5: 25:6
    }

    bb5: {
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:25:6: 25:6
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:25:5: 25:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:23:5: 25:6
    }
}

fn test_drop_tuple() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:46:22: 46:22
    let _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:48:9: 48:23
    let mut _2: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:48:34: 48:58
    let mut _3: std::vec::Vec<u32>;      // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:48:47: 48:57
    let mut _5: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:49:23: 49:65
    let mut _6: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:49:42: 49:64
    let mut _7: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:49:42: 49:64
    let mut _8: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:50:23: 50:65
    let mut _9: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:50:42: 50:64
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:50:42: 50:64
    let _11: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:51:5: 51:21
    let mut _12: (PushOnDrop, PushOnDrop); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:51:10: 51:20
    let mut _13: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _15: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:16: 52:40
    let mut _16: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
    let _17: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
    let mut _18: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
    let _19: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
    let mut _20: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
    let mut _21: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &&[u32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:56:34: 56:58
    let mut _38: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:56:47: 56:57
    let mut _40: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:57:35: 57:57
    let mut _41: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:57:35: 57:57
    let _42: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:5: 62:22
    let mut _43: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:5: 62:13
    let mut _44: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:5: 62:7
    let mut _45: [closure@ui/rfcs/rfc1857-drop-order.rs:58:25: 58:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6
    let mut _46: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6
    let mut _47: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _49: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:16: 63:40
    let mut _50: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
    let _51: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
    let mut _52: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
    let _53: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
    let mut _54: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
    let mut _55: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &&[u32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug dropped_fields => _1;      // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:48:9: 48:23
        let _4: (PushOnDrop, PushOnDrop); // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:49:9: 49:19
        scope 2 {
            debug test_tuple => _4;      // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:49:9: 49:19
            let _22: &std::vec::Vec<u32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _23: &&[u32; 2];         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _36: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:56:9: 56:23
            let mut _71: &&[u32; 2];     // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _22;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _23;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _28: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _28;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug dropped_fields => _36; // in scope 5 at ui/rfcs/rfc1857-drop-order.rs:56:9: 56:23
                let _39: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 5 at ui/rfcs/rfc1857-drop-order.rs:57:9: 57:15
                scope 6 {
                    debug cloned => _39; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:57:9: 57:15
                    let _56: &std::vec::Vec<u32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _57: &&[u32; 2]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _70: &&[u32; 2]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _56; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _57; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _62: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _62; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = Vec::<u32>::new() -> bb1;   // scope 0 at ui/rfcs/rfc1857-drop-order.rs:48:47: 48:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:48:47: 48:55
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = RefCell::<Vec<u32>>::new(move _3) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:48:34: 48:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:48:34: 48:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Rc::<RefCell<Vec<u32>>>::new(move _2) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:48:26: 48:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:48:26: 48:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_1;                        // scope 1 at ui/rfcs/rfc1857-drop-order.rs:49:42: 49:64
        _6 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _7) -> [return: bb4, unwind: bb39]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:49:42: 49:64
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:49:57: 49:62
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = PushOnDrop::new(const 1_u32, move _6) -> [return: bb5, unwind: bb39]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:49:23: 49:65
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:49:23: 49:38
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:50:42: 50:64
        _9 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _10) -> [return: bb6, unwind: bb38]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:50:42: 50:64
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:50:57: 50:62
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = PushOnDrop::new(const 2_u32, move _9) -> [return: bb7, unwind: bb38]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:50:23: 50:65
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:50:23: 50:38
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb7: {
        _4 = (move _5, move _8);         // scope 1 at ui/rfcs/rfc1857-drop-order.rs:49:22: 50:66
        _12 = move _4;                   // scope 2 at ui/rfcs/rfc1857-drop-order.rs:51:10: 51:20
        _11 = std::mem::drop::<(PushOnDrop, PushOnDrop)>(move _12) -> [return: bb8, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:51:5: 51:21
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:51:5: 51:9
                                         // + literal: Const { ty: fn((PushOnDrop, PushOnDrop)) {std::mem::drop::<(PushOnDrop, PushOnDrop)>}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = &_1;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
        _19 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _20) -> [return: bb9, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = _19;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
        _17 = RefCell::<Vec<u32>>::borrow(move _18) -> [return: bb10, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:52:32: 52:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb10: {
        _16 = &_17;                      // scope 2 at ui/rfcs/rfc1857-drop-order.rs:52:17: 52:40
        _15 = <Ref<'_, Vec<u32>> as Deref>::deref(move _16) -> [return: bb11, unwind: bb37]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:52:16: 52:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:52:16: 52:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _71 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_tuple, [], Some(promoted[1])) }
        _21 = _71;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _21);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_13.0: &std::vec::Vec<u32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_13.1: &&[u32; 2]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _26, move _27) -> [return: bb12, unwind: bb37]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = Not(move _25);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb14, otherwise: bb13]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _30, move _31, move _33, move _35) -> bb37; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_17) -> [return: bb15, unwind: bb39]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _38 = Vec::<u32>::new() -> [return: bb16, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:56:47: 56:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:56:47: 56:55
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _37 = RefCell::<Vec<u32>>::new(move _38) -> [return: bb17, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:56:34: 56:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:56:34: 56:46
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb17: {
        _36 = Rc::<RefCell<Vec<u32>>>::new(move _37) -> [return: bb18, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:56:26: 56:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:56:26: 56:33
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _41 = &_36;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:57:35: 57:57
        _40 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _41) -> [return: bb19, unwind: bb36]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:57:35: 57:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:57:50: 57:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb19: {
        _39 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _40); // scope 5 at ui/rfcs/rfc1857-drop-order.rs:57:18: 57:58
        _46 = &_39;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6
        _45 = [closure@ui/rfcs/rfc1857-drop-order.rs:58:25: 58:27] { cloned: move _46 }; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6
                                         // closure
                                         // + def_id: DefId(0:37 ~ rfc1857_drop_order[fa2e]::test_drop_tuple::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _44 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:58:25: 58:27], ()>(move _45) -> [return: bb20, unwind: bb35]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:58:5: 62:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:58:5: 58:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:58:25: 58:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:58:25: 58:27], ()>}, val: Value(<ZST>) }
    }

    bb20: {
        _43 = Result::<(), Box<dyn Any + Send>>::err(move _44) -> [return: bb21, unwind: bb35]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:58:5: 62:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:62:8: 62:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb21: {
        _42 = Option::<Box<dyn Any + Send>>::unwrap(move _43) -> [return: bb22, unwind: bb35]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:58:5: 62:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:62:14: 62:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb22: {
        drop(_42) -> [return: bb23, unwind: bb35]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:62:22: 62:23
    }

    bb23: {
        _54 = &_36;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
        _53 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _54) -> [return: bb24, unwind: bb35]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _52 = _53;                       // scope 6 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
        _51 = RefCell::<Vec<u32>>::borrow(move _52) -> [return: bb25, unwind: bb35]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:63:32: 63:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb25: {
        _50 = &_51;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:63:17: 63:40
        _49 = <Ref<'_, Vec<u32>> as Deref>::deref(move _50) -> [return: bb26, unwind: bb34]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:63:16: 63:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:63:16: 63:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb26: {
        _48 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_tuple, [], Some(promoted[0])) }
        _55 = _70;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _55);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_47.0: &std::vec::Vec<u32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_47.1: &&[u32; 2]);       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = _56;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _60, move _61) -> [return: bb27, unwind: bb34]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb27: {
        _58 = Not(move _59);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb29, otherwise: bb28]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _62 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _64, move _65, move _67, move _69) -> bb34; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_51) -> [return: bb30, unwind: bb35]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30: {
        drop(_39) -> [return: bb31, unwind: bb36]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:64:1: 64:2
    }

    bb31: {
        drop(_36) -> [return: bb32, unwind: bb39]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:64:1: 64:2
    }

    bb32: {
        drop(_1) -> bb33;                // scope 0 at ui/rfcs/rfc1857-drop-order.rs:64:1: 64:2
    }

    bb33: {
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:64:2: 64:2
    }

    bb34 (cleanup): {
        drop(_51) -> bb35;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35 (cleanup): {
        drop(_39) -> bb36;               // scope 5 at ui/rfcs/rfc1857-drop-order.rs:64:1: 64:2
    }

    bb36 (cleanup): {
        drop(_36) -> bb39;               // scope 2 at ui/rfcs/rfc1857-drop-order.rs:64:1: 64:2
    }

    bb37 (cleanup): {
        drop(_17) -> bb39;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb38 (cleanup): {
        drop(_5) -> bb39;                // scope 1 at ui/rfcs/rfc1857-drop-order.rs:50:65: 50:66
    }

    bb39 (cleanup): {
        drop(_1) -> bb40;                // scope 0 at ui/rfcs/rfc1857-drop-order.rs:64:1: 64:2
    }

    bb40 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:46:1: 64:2
    }
}

promoted[0] in test_drop_tuple: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:42: 63:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:43: 63:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:43: 63:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:63:42: 63:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_drop_tuple: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:42: 52:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:43: 52:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:43: 52:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:52:42: 52:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_drop_tuple::{closure#0}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:58:25: 58:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:57:9: 57:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:28: 58:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:10: 59:44
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:10: 60:44
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:29: 59:43
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:59:36: 59:41
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:59:10: 59:44
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:59:10: 59:25
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:29: 60:43
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:60:36: 60:41
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:60:10: 60:44
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:60:10: 60:25
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:61:17: 61:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:61:43: 61:44
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:61:43: 61:44
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:58:25: 62:6
    }
}

fn test_drop_struct() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:66:23: 66:23
    let _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:68:9: 68:23
    let mut _2: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:68:34: 68:58
    let mut _3: std::vec::Vec<u32>;      // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:68:47: 68:57
    let mut _5: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:70:12: 70:54
    let mut _6: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:70:31: 70:53
    let mut _7: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:70:31: 70:53
    let mut _8: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:71:12: 71:54
    let mut _9: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:71:31: 71:53
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:71:31: 71:53
    let mut _11: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:72:12: 72:54
    let mut _12: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:72:31: 72:53
    let mut _13: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:72:31: 72:53
    let _14: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:74:5: 74:22
    let mut _15: TestStruct;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:74:10: 74:21
    let mut _16: (&std::vec::Vec<u32>, &&[u32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _17: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _18: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:16: 75:40
    let mut _19: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
    let _20: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
    let mut _21: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
    let _22: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
    let mut _23: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
    let mut _24: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:78:34: 78:58
    let mut _41: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:78:47: 78:57
    let mut _43: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:79:45: 79:87
    let mut _44: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:79:64: 79:86
    let mut _45: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:79:64: 79:86
    let mut _46: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:80:45: 80:87
    let mut _47: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:80:64: 80:86
    let mut _48: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:80:64: 80:86
    let mut _49: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:81:45: 81:87
    let mut _50: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:81:64: 81:86
    let mut _51: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:81:64: 81:86
    let _52: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:82:5: 82:28
    let mut _53: TestTupleStruct;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:82:10: 82:27
    let mut _54: (&std::vec::Vec<u32>, &&[u32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _56: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:16: 83:40
    let mut _57: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
    let _58: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
    let mut _59: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
    let _60: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
    let mut _61: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
    let mut _62: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _67: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _68: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _70: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _71: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _72: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _73: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _74: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _75: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _78: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:87:34: 87:58
    let mut _79: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:87:47: 87:57
    let mut _81: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:88:35: 88:57
    let mut _82: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:88:35: 88:57
    let _83: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:5: 95:22
    let mut _84: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:5: 95:13
    let mut _85: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:5: 95:7
    let mut _86: [closure@ui/rfcs/rfc1857-drop-order.rs:89:25: 89:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6
    let mut _87: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6
    let mut _88: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _89: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _90: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:16: 96:40
    let mut _91: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
    let _92: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
    let mut _93: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
    let _94: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
    let mut _95: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
    let mut _96: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _101: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _102: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _104: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _105: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _106: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _107: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _108: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _109: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _112: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:99:34: 99:58
    let mut _113: std::vec::Vec<u32>;    // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:99:47: 99:57
    let mut _115: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:100:35: 100:57
    let mut _116: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:100:35: 100:57
    let _117: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:5: 107:22
    let mut _118: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:5: 107:13
    let mut _119: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:5: 107:7
    let mut _120: [closure@ui/rfcs/rfc1857-drop-order.rs:101:25: 101:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6
    let mut _121: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6
    let mut _122: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _123: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _124: &std::vec::Vec<u32>;       // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:16: 108:40
    let mut _125: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
    let _126: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
    let mut _127: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
    let _128: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
    let mut _129: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
    let mut _130: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _133: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _134: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _135: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _136: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _138: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _139: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _140: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _141: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _142: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _143: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _146: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:111:34: 111:58
    let mut _147: std::vec::Vec<u32>;    // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:111:47: 111:57
    let mut _149: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:112:35: 112:57
    let mut _150: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:112:35: 112:57
    let _151: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:5: 117:22
    let mut _152: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:5: 117:13
    let mut _153: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:5: 117:7
    let mut _154: [closure@ui/rfcs/rfc1857-drop-order.rs:113:25: 113:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6
    let mut _155: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6
    let mut _156: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _157: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _158: &std::vec::Vec<u32>;       // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:16: 118:40
    let mut _159: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
    let _160: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
    let mut _161: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
    let _162: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
    let mut _163: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
    let mut _164: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _169: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _170: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _172: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _173: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _174: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _175: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _176: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _177: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug dropped_fields => _1;      // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:68:9: 68:23
        let _4: TestStruct;              // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:69:9: 69:20
        scope 2 {
            debug test_struct => _4;     // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:69:9: 69:20
            let _25: &std::vec::Vec<u32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _26: &&[u32; 3];         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _39: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:78:9: 78:23
            let mut _183: &&[u32; 3];    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _25;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _26;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _31;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug dropped_fields => _39; // in scope 5 at ui/rfcs/rfc1857-drop-order.rs:78:9: 78:23
                let _42: TestTupleStruct; // in scope 5 at ui/rfcs/rfc1857-drop-order.rs:79:9: 79:26
                scope 6 {
                    debug test_tuple_struct => _42; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:79:9: 79:26
                    let _63: &std::vec::Vec<u32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _64: &&[u32; 3]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _77: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:87:9: 87:23
                    let mut _182: &&[u32; 3]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _63; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _64; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _69: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _69; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 9 {
                        debug dropped_fields => _77; // in scope 9 at ui/rfcs/rfc1857-drop-order.rs:87:9: 87:23
                        let _80: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 9 at ui/rfcs/rfc1857-drop-order.rs:88:9: 88:15
                        scope 10 {
                            debug cloned => _80; // in scope 10 at ui/rfcs/rfc1857-drop-order.rs:88:9: 88:15
                            let _97: &std::vec::Vec<u32>; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _98: &&[u32; 2]; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _111: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 10 at ui/rfcs/rfc1857-drop-order.rs:99:9: 99:23
                            let mut _181: &&[u32; 2]; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 11 {
                                debug left_val => _97; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _98; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _103: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 12 {
                                    debug kind => _103; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 13 {
                                debug dropped_fields => _111; // in scope 13 at ui/rfcs/rfc1857-drop-order.rs:99:9: 99:23
                                let _114: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 13 at ui/rfcs/rfc1857-drop-order.rs:100:9: 100:15
                                scope 14 {
                                    debug cloned => _114; // in scope 14 at ui/rfcs/rfc1857-drop-order.rs:100:9: 100:15
                                    let _131: &std::vec::Vec<u32>; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _132: &&[u32; 2]; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _145: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 14 at ui/rfcs/rfc1857-drop-order.rs:111:9: 111:23
                                    let mut _180: &&[u32; 2]; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 15 {
                                        debug left_val => _131; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _132; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _137: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 16 {
                                            debug kind => _137; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                    scope 17 {
                                        debug dropped_fields => _145; // in scope 17 at ui/rfcs/rfc1857-drop-order.rs:111:9: 111:23
                                        let _148: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 17 at ui/rfcs/rfc1857-drop-order.rs:112:9: 112:15
                                        scope 18 {
                                            debug cloned => _148; // in scope 18 at ui/rfcs/rfc1857-drop-order.rs:112:9: 112:15
                                            let _165: &std::vec::Vec<u32>; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            let _166: &&[u32; 2]; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let mut _179: &&[u32; 2]; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                            scope 19 {
                                                debug left_val => _165; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                debug right_val => _166; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                let _171: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                scope 20 {
                                                    debug kind => _171; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = Vec::<u32>::new() -> bb1;   // scope 0 at ui/rfcs/rfc1857-drop-order.rs:68:47: 68:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:68:47: 68:55
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = RefCell::<Vec<u32>>::new(move _3) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:68:34: 68:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:68:34: 68:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Rc::<RefCell<Vec<u32>>>::new(move _2) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:68:26: 68:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:68:26: 68:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_1;                        // scope 1 at ui/rfcs/rfc1857-drop-order.rs:70:31: 70:53
        _6 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _7) -> [return: bb4, unwind: bb104]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:70:31: 70:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:70:46: 70:51
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = PushOnDrop::new(const 1_u32, move _6) -> [return: bb5, unwind: bb104]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:70:12: 70:54
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:70:12: 70:27
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:71:31: 71:53
        _9 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _10) -> [return: bb6, unwind: bb103]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:71:31: 71:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:71:46: 71:51
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = PushOnDrop::new(const 2_u32, move _9) -> [return: bb7, unwind: bb103]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:71:12: 71:54
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:71:12: 71:27
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:72:31: 72:53
        _12 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _13) -> [return: bb8, unwind: bb102]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:72:31: 72:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:72:46: 72:51
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = PushOnDrop::new(const 3_u32, move _12) -> [return: bb9, unwind: bb102]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:72:12: 72:54
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:72:12: 72:27
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb9: {
        _4 = TestStruct { x: move _5, y: move _8, z: move _11 }; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:69:23: 73:6
        _15 = move _4;                   // scope 2 at ui/rfcs/rfc1857-drop-order.rs:74:10: 74:21
        _14 = std::mem::drop::<TestStruct>(move _15) -> [return: bb10, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:74:5: 74:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:74:5: 74:9
                                         // + literal: Const { ty: fn(TestStruct) {std::mem::drop::<TestStruct>}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = &_1;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
        _22 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _23) -> [return: bb11, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = _22;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
        _20 = RefCell::<Vec<u32>>::borrow(move _21) -> [return: bb12, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:75:32: 75:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = &_20;                      // scope 2 at ui/rfcs/rfc1857-drop-order.rs:75:17: 75:40
        _18 = <Ref<'_, Vec<u32>> as Deref>::deref(move _19) -> [return: bb13, unwind: bb101]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:75:16: 75:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:75:16: 75:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _183 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(test_drop_struct, [], Some(promoted[4])) }
        _24 = _183;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _16 = (move _17, move _24);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_16.0: &std::vec::Vec<u32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_16.1: &&[u32; 3]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <Vec<u32> as PartialEq<&[u32; 3]>>::eq(move _29, move _30) -> [return: bb14, unwind: bb101]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 3]) -> bool {<Vec<u32> as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb16, otherwise: bb15]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>(move _33, move _34, move _36, move _38) -> bb101; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_20) -> [return: bb17, unwind: bb104]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        _41 = Vec::<u32>::new() -> [return: bb18, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:78:47: 78:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:78:47: 78:55
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _40 = RefCell::<Vec<u32>>::new(move _41) -> [return: bb19, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:78:34: 78:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:78:34: 78:46
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb19: {
        _39 = Rc::<RefCell<Vec<u32>>>::new(move _40) -> [return: bb20, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:78:26: 78:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:78:26: 78:33
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _45 = &_39;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:79:64: 79:86
        _44 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _45) -> [return: bb21, unwind: bb100]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:79:64: 79:86
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:79:79: 79:84
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _43 = PushOnDrop::new(const 1_u32, move _44) -> [return: bb22, unwind: bb100]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:79:45: 79:87
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:79:45: 79:60
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb22: {
        _48 = &_39;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:80:64: 80:86
        _47 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _48) -> [return: bb23, unwind: bb99]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:80:64: 80:86
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:80:79: 80:84
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = PushOnDrop::new(const 2_u32, move _47) -> [return: bb24, unwind: bb99]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:80:45: 80:87
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:80:45: 80:60
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb24: {
        _51 = &_39;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:81:64: 81:86
        _50 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _51) -> [return: bb25, unwind: bb98]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:81:64: 81:86
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:81:79: 81:84
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb25: {
        _49 = PushOnDrop::new(const 3_u32, move _50) -> [return: bb26, unwind: bb98]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:81:45: 81:87
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:81:45: 81:60
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb26: {
        _42 = TestTupleStruct(move _43, move _46, move _49); // scope 5 at ui/rfcs/rfc1857-drop-order.rs:79:29: 81:88
        _53 = move _42;                  // scope 6 at ui/rfcs/rfc1857-drop-order.rs:82:10: 82:27
        _52 = std::mem::drop::<TestTupleStruct>(move _53) -> [return: bb27, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:82:5: 82:28
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:82:5: 82:9
                                         // + literal: Const { ty: fn(TestTupleStruct) {std::mem::drop::<TestTupleStruct>}, val: Value(<ZST>) }
    }

    bb27: {
        _61 = &_39;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
        _60 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _61) -> [return: bb28, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _59 = _60;                       // scope 6 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
        _58 = RefCell::<Vec<u32>>::borrow(move _59) -> [return: bb29, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:83:32: 83:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb29: {
        _57 = &_58;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:83:17: 83:40
        _56 = <Ref<'_, Vec<u32>> as Deref>::deref(move _57) -> [return: bb30, unwind: bb97]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:83:16: 83:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:83:16: 83:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        _55 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _182 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(test_drop_struct, [], Some(promoted[3])) }
        _62 = _182;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _62);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _63 = (_54.0: &std::vec::Vec<u32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _64 = (_54.1: &&[u32; 3]);       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _67 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _68 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _66 = <Vec<u32> as PartialEq<&[u32; 3]>>::eq(move _67, move _68) -> [return: bb31, unwind: bb97]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 3]) -> bool {<Vec<u32> as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _65 = Not(move _66);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _65) -> [0: bb33, otherwise: bb32]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _69 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _73;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _70 = core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>(move _71, move _72, move _74, move _76) -> bb97; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb33: {
        drop(_58) -> [return: bb34, unwind: bb100]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34: {
        _79 = Vec::<u32>::new() -> [return: bb35, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:87:47: 87:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:87:47: 87:55
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb35: {
        _78 = RefCell::<Vec<u32>>::new(move _79) -> [return: bb36, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:87:34: 87:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:87:34: 87:46
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb36: {
        _77 = Rc::<RefCell<Vec<u32>>>::new(move _78) -> [return: bb37, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:87:26: 87:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:87:26: 87:33
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb37: {
        _82 = &_77;                      // scope 9 at ui/rfcs/rfc1857-drop-order.rs:88:35: 88:57
        _81 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _82) -> [return: bb38, unwind: bb96]; // scope 9 at ui/rfcs/rfc1857-drop-order.rs:88:35: 88:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:88:50: 88:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb38: {
        _80 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _81); // scope 9 at ui/rfcs/rfc1857-drop-order.rs:88:18: 88:58
        _87 = &_80;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6
        _86 = [closure@ui/rfcs/rfc1857-drop-order.rs:89:25: 89:27] { cloned: move _87 }; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6
                                         // closure
                                         // + def_id: DefId(0:39 ~ rfc1857_drop_order[fa2e]::test_drop_struct::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _85 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:89:25: 89:27], ()>(move _86) -> [return: bb39, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:89:5: 95:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:89:5: 89:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:89:25: 89:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:89:25: 89:27], ()>}, val: Value(<ZST>) }
    }

    bb39: {
        _84 = Result::<(), Box<dyn Any + Send>>::err(move _85) -> [return: bb40, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:89:5: 95:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:95:8: 95:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb40: {
        _83 = Option::<Box<dyn Any + Send>>::unwrap(move _84) -> [return: bb41, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:89:5: 95:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:95:14: 95:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb41: {
        drop(_83) -> [return: bb42, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:95:22: 95:23
    }

    bb42: {
        _95 = &_77;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
        _94 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _95) -> [return: bb43, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb43: {
        _93 = _94;                       // scope 10 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
        _92 = RefCell::<Vec<u32>>::borrow(move _93) -> [return: bb44, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:96:32: 96:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb44: {
        _91 = &_92;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:96:17: 96:40
        _90 = <Ref<'_, Vec<u32>> as Deref>::deref(move _91) -> [return: bb45, unwind: bb94]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:96:16: 96:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:96:16: 96:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb45: {
        _89 = _90;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _181 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_struct, [], Some(promoted[2])) }
        _96 = _181;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _88 = (move _89, move _96);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _97 = (_88.0: &std::vec::Vec<u32>); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _98 = (_88.1: &&[u32; 2]);       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _101 = _97;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _102 = _98;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _100 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _101, move _102) -> [return: bb46, unwind: bb94]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _99 = Not(move _100);            // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _99) -> [0: bb48, otherwise: bb47]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _103 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _105 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _107 = _97;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _107;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _109 = _98;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _108 = _109;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _110 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _104 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _105, move _106, move _108, move _110) -> bb94; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb48: {
        drop(_92) -> [return: bb49, unwind: bb95]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb49: {
        _113 = Vec::<u32>::new() -> [return: bb50, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:99:47: 99:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:99:47: 99:55
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb50: {
        _112 = RefCell::<Vec<u32>>::new(move _113) -> [return: bb51, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:99:34: 99:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:99:34: 99:46
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb51: {
        _111 = Rc::<RefCell<Vec<u32>>>::new(move _112) -> [return: bb52, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:99:26: 99:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:99:26: 99:33
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb52: {
        _116 = &_111;                    // scope 13 at ui/rfcs/rfc1857-drop-order.rs:100:35: 100:57
        _115 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _116) -> [return: bb53, unwind: bb93]; // scope 13 at ui/rfcs/rfc1857-drop-order.rs:100:35: 100:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:100:50: 100:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb53: {
        _114 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _115); // scope 13 at ui/rfcs/rfc1857-drop-order.rs:100:18: 100:58
        _121 = &_114;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6
        _120 = [closure@ui/rfcs/rfc1857-drop-order.rs:101:25: 101:27] { cloned: move _121 }; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6
                                         // closure
                                         // + def_id: DefId(0:40 ~ rfc1857_drop_order[fa2e]::test_drop_struct::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _119 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:101:25: 101:27], ()>(move _120) -> [return: bb54, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:101:5: 107:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:101:5: 101:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:101:25: 101:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:101:25: 101:27], ()>}, val: Value(<ZST>) }
    }

    bb54: {
        _118 = Result::<(), Box<dyn Any + Send>>::err(move _119) -> [return: bb55, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:101:5: 107:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:107:8: 107:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb55: {
        _117 = Option::<Box<dyn Any + Send>>::unwrap(move _118) -> [return: bb56, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:101:5: 107:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:107:14: 107:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb56: {
        drop(_117) -> [return: bb57, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:107:22: 107:23
    }

    bb57: {
        _129 = &_111;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
        _128 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _129) -> [return: bb58, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb58: {
        _127 = _128;                     // scope 14 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
        _126 = RefCell::<Vec<u32>>::borrow(move _127) -> [return: bb59, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:108:32: 108:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb59: {
        _125 = &_126;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:108:17: 108:40
        _124 = <Ref<'_, Vec<u32>> as Deref>::deref(move _125) -> [return: bb60, unwind: bb91]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:108:16: 108:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:108:16: 108:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb60: {
        _123 = _124;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _180 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_struct, [], Some(promoted[1])) }
        _130 = _180;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _122 = (move _123, move _130);   // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _131 = (_122.0: &std::vec::Vec<u32>); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _132 = (_122.1: &&[u32; 2]);     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _135 = _131;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _136 = _132;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _134 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _135, move _136) -> [return: bb61, unwind: bb91]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _133 = Not(move _134);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _133) -> [0: bb63, otherwise: bb62]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _137 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _139 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _141 = _131;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _140 = _141;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _143 = _132;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _142 = _143;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _144 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _138 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _139, move _140, move _142, move _144) -> bb91; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb63: {
        drop(_126) -> [return: bb64, unwind: bb92]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb64: {
        _147 = Vec::<u32>::new() -> [return: bb65, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:111:47: 111:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:111:47: 111:55
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb65: {
        _146 = RefCell::<Vec<u32>>::new(move _147) -> [return: bb66, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:111:34: 111:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:111:34: 111:46
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb66: {
        _145 = Rc::<RefCell<Vec<u32>>>::new(move _146) -> [return: bb67, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:111:26: 111:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:111:26: 111:33
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb67: {
        _150 = &_145;                    // scope 17 at ui/rfcs/rfc1857-drop-order.rs:112:35: 112:57
        _149 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _150) -> [return: bb68, unwind: bb90]; // scope 17 at ui/rfcs/rfc1857-drop-order.rs:112:35: 112:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:112:50: 112:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb68: {
        _148 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _149); // scope 17 at ui/rfcs/rfc1857-drop-order.rs:112:18: 112:58
        _155 = &_148;                    // scope 18 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6
        _154 = [closure@ui/rfcs/rfc1857-drop-order.rs:113:25: 113:27] { cloned: move _155 }; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6
                                         // closure
                                         // + def_id: DefId(0:41 ~ rfc1857_drop_order[fa2e]::test_drop_struct::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _153 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:113:25: 113:27], ()>(move _154) -> [return: bb69, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:113:5: 117:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:113:5: 113:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:113:25: 113:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:113:25: 113:27], ()>}, val: Value(<ZST>) }
    }

    bb69: {
        _152 = Result::<(), Box<dyn Any + Send>>::err(move _153) -> [return: bb70, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:113:5: 117:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:117:8: 117:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb70: {
        _151 = Option::<Box<dyn Any + Send>>::unwrap(move _152) -> [return: bb71, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:113:5: 117:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:117:14: 117:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb71: {
        drop(_151) -> [return: bb72, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:117:22: 117:23
    }

    bb72: {
        _163 = &_145;                    // scope 18 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
        _162 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _163) -> [return: bb73, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb73: {
        _161 = _162;                     // scope 18 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
        _160 = RefCell::<Vec<u32>>::borrow(move _161) -> [return: bb74, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:118:32: 118:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb74: {
        _159 = &_160;                    // scope 18 at ui/rfcs/rfc1857-drop-order.rs:118:17: 118:40
        _158 = <Ref<'_, Vec<u32>> as Deref>::deref(move _159) -> [return: bb75, unwind: bb88]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:118:16: 118:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:118:16: 118:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb75: {
        _157 = _158;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _179 = const _;                  // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_struct, [], Some(promoted[0])) }
        _164 = _179;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _156 = (move _157, move _164);   // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _165 = (_156.0: &std::vec::Vec<u32>); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _166 = (_156.1: &&[u32; 2]);     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _169 = _165;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _170 = _166;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _168 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _169, move _170) -> [return: bb76, unwind: bb88]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb76: {
        _167 = Not(move _168);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _167) -> [0: bb78, otherwise: bb77]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _171 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _173 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _175 = _165;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _174 = _175;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _177 = _166;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = _177;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _178 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _172 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _173, move _174, move _176, move _178) -> bb88; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb78: {
        drop(_160) -> [return: bb79, unwind: bb89]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb79: {
        drop(_148) -> [return: bb80, unwind: bb90]; // scope 17 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb80: {
        drop(_145) -> [return: bb81, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb81: {
        drop(_114) -> [return: bb82, unwind: bb93]; // scope 13 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb82: {
        drop(_111) -> [return: bb83, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb83: {
        drop(_80) -> [return: bb84, unwind: bb96]; // scope 9 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb84: {
        drop(_77) -> [return: bb85, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb85: {
        drop(_39) -> [return: bb86, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb86: {
        drop(_1) -> bb87;                // scope 0 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb87: {
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:119:2: 119:2
    }

    bb88 (cleanup): {
        drop(_160) -> bb89;              // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb89 (cleanup): {
        drop(_148) -> bb90;              // scope 17 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb90 (cleanup): {
        drop(_145) -> bb92;              // scope 14 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb91 (cleanup): {
        drop(_126) -> bb92;              // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb92 (cleanup): {
        drop(_114) -> bb93;              // scope 13 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb93 (cleanup): {
        drop(_111) -> bb95;              // scope 10 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb94 (cleanup): {
        drop(_92) -> bb95;               // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb95 (cleanup): {
        drop(_80) -> bb96;               // scope 9 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb96 (cleanup): {
        drop(_77) -> bb100;              // scope 6 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb97 (cleanup): {
        drop(_58) -> bb100;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb98 (cleanup): {
        drop(_46) -> bb99;               // scope 5 at ui/rfcs/rfc1857-drop-order.rs:81:87: 81:88
    }

    bb99 (cleanup): {
        drop(_43) -> bb100;              // scope 5 at ui/rfcs/rfc1857-drop-order.rs:81:87: 81:88
    }

    bb100 (cleanup): {
        drop(_39) -> bb104;              // scope 2 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb101 (cleanup): {
        drop(_20) -> bb104;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb102 (cleanup): {
        drop(_8) -> bb103;               // scope 1 at ui/rfcs/rfc1857-drop-order.rs:73:5: 73:6
    }

    bb103 (cleanup): {
        drop(_5) -> bb104;               // scope 1 at ui/rfcs/rfc1857-drop-order.rs:73:5: 73:6
    }

    bb104 (cleanup): {
        drop(_1) -> bb105;               // scope 0 at ui/rfcs/rfc1857-drop-order.rs:119:1: 119:2
    }

    bb105 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:66:1: 119:2
    }
}

promoted[0] in test_drop_struct: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:42: 118:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:43: 118:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:43: 118:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:118:42: 118:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_drop_struct: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:42: 108:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:43: 108:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:43: 108:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:108:42: 108:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test_drop_struct: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:42: 96:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:43: 96:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:43: 96:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:96:42: 96:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test_drop_struct: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:42: 83:52
    let mut _2: [u32; 3];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:43: 83:52

    bb0: {
        _2 = [const 1_u32, const 2_u32, const 3_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:43: 83:52
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:83:42: 83:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in test_drop_struct: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:42: 75:52
    let mut _2: [u32; 3];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:43: 75:52

    bb0: {
        _2 = [const 1_u32, const 2_u32, const 3_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:43: 75:52
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:75:42: 75:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_drop_struct::{closure#0}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:89:25: 89:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:88:9: 88:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:28: 89:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:16: 91:50
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:16: 92:50
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:35: 91:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:91:42: 91:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:91:16: 91:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:91:16: 91:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:35: 92:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:92:42: 92:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:92:16: 92:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:92:16: 92:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:93:23: 93:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:94:9: 94:10
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:94:9: 94:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:89:25: 95:6
    }
}

fn test_drop_struct::{closure#1}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:101:25: 101:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:100:9: 100:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:28: 101:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:16: 103:50
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:16: 104:50
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:35: 103:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:103:42: 103:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:103:16: 103:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:103:16: 103:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:35: 104:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:104:42: 104:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:104:16: 104:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:104:16: 104:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:105:23: 105:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:106:9: 106:10
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:106:9: 106:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:101:25: 107:6
    }
}

fn test_drop_struct::{closure#2}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:113:25: 113:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:112:9: 112:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:28: 113:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:25: 114:59
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:25: 115:59
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:44: 114:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:114:51: 114:56
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:114:25: 114:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:114:25: 114:40
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:44: 115:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:115:51: 115:56
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:115:25: 115:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:115:25: 115:40
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:116:32: 116:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:116:58: 116:59
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:116:58: 116:59
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:113:25: 117:6
    }
}

fn test_drop_enum() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:121:21: 121:21
    let _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:123:9: 123:23
    let mut _2: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:123:34: 123:58
    let mut _3: std::vec::Vec<u32>;      // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:123:47: 123:57
    let mut _5: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:125:12: 125:54
    let mut _6: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:125:31: 125:53
    let mut _7: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:125:31: 125:53
    let mut _8: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:126:12: 126:54
    let mut _9: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:126:31: 126:53
    let mut _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:126:31: 126:53
    let mut _11: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:127:12: 127:54
    let mut _12: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:127:31: 127:53
    let mut _13: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:127:31: 127:53
    let _14: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:129:5: 129:27
    let mut _15: TestEnum;               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:129:10: 129:26
    let mut _16: (&std::vec::Vec<u32>, &&[u32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _17: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _18: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:16: 130:40
    let mut _19: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
    let _20: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
    let mut _21: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
    let _22: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
    let mut _23: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
    let mut _24: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _40: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:133:34: 133:58
    let mut _41: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:133:47: 133:57
    let mut _43: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:134:43: 134:85
    let mut _44: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:134:62: 134:84
    let mut _45: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:134:62: 134:84
    let mut _46: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:135:43: 135:85
    let mut _47: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:135:62: 135:84
    let mut _48: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:135:62: 135:84
    let mut _49: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:136:43: 136:85
    let mut _50: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:136:62: 136:84
    let mut _51: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:136:62: 136:84
    let _52: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:137:5: 137:26
    let mut _53: TestEnum;               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:137:10: 137:25
    let mut _54: (&std::vec::Vec<u32>, &&[u32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _56: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:16: 138:40
    let mut _57: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
    let _58: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
    let mut _59: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
    let _60: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
    let mut _61: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
    let mut _62: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _67: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _68: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _70: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _71: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _72: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _73: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _74: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _75: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _76: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _78: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:142:34: 142:58
    let mut _79: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:142:47: 142:57
    let mut _81: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:143:35: 143:57
    let mut _82: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:143:35: 143:57
    let _83: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:5: 150:22
    let mut _84: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:5: 150:13
    let mut _85: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:5: 150:7
    let mut _86: [closure@ui/rfcs/rfc1857-drop-order.rs:144:25: 144:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6
    let mut _87: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6
    let mut _88: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _89: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _90: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:16: 151:40
    let mut _91: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
    let _92: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
    let mut _93: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
    let _94: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
    let mut _95: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
    let mut _96: &&[u32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _101: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _102: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _104: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _105: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _106: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _107: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _108: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _109: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _112: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:154:34: 154:58
    let mut _113: std::vec::Vec<u32>;    // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:154:47: 154:57
    let mut _115: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:155:35: 155:57
    let mut _116: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:155:35: 155:57
    let _117: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:5: 162:22
    let mut _118: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:5: 162:13
    let mut _119: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:5: 162:7
    let mut _120: [closure@ui/rfcs/rfc1857-drop-order.rs:156:25: 156:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6
    let mut _121: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6
    let mut _122: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _123: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _124: &std::vec::Vec<u32>;       // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:16: 163:40
    let mut _125: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
    let _126: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
    let mut _127: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
    let _128: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
    let mut _129: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
    let mut _130: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _133: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _134: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _135: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _136: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _138: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _139: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _140: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _141: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _142: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _143: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _146: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:166:34: 166:58
    let mut _147: std::vec::Vec<u32>;    // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:166:47: 166:57
    let mut _149: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:167:35: 167:57
    let mut _150: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:167:35: 167:57
    let _151: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:5: 172:22
    let mut _152: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:5: 172:13
    let mut _153: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:5: 172:7
    let mut _154: [closure@ui/rfcs/rfc1857-drop-order.rs:168:25: 168:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6
    let mut _155: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6
    let mut _156: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _157: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _158: &std::vec::Vec<u32>;       // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:16: 173:40
    let mut _159: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
    let _160: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
    let mut _161: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
    let _162: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
    let mut _163: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
    let mut _164: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _169: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _170: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _172: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _173: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _174: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _175: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _176: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _177: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug dropped_fields => _1;      // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:123:9: 123:23
        let _4: TestEnum;                // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:124:9: 124:25
        scope 2 {
            debug test_struct_enum => _4; // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:124:9: 124:25
            let _25: &std::vec::Vec<u32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _26: &&[u32; 3];         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _39: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:133:9: 133:23
            let mut _183: &&[u32; 3];    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _25;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _26;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _31;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug dropped_fields => _39; // in scope 5 at ui/rfcs/rfc1857-drop-order.rs:133:9: 133:23
                let _42: TestEnum;       // in scope 5 at ui/rfcs/rfc1857-drop-order.rs:134:9: 134:24
                scope 6 {
                    debug test_tuple_enum => _42; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:134:9: 134:24
                    let _63: &std::vec::Vec<u32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _64: &&[u32; 3]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _77: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:142:9: 142:23
                    let mut _182: &&[u32; 3]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 7 {
                        debug left_val => _63; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _64; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _69: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _69; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 9 {
                        debug dropped_fields => _77; // in scope 9 at ui/rfcs/rfc1857-drop-order.rs:142:9: 142:23
                        let _80: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 9 at ui/rfcs/rfc1857-drop-order.rs:143:9: 143:15
                        scope 10 {
                            debug cloned => _80; // in scope 10 at ui/rfcs/rfc1857-drop-order.rs:143:9: 143:15
                            let _97: &std::vec::Vec<u32>; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _98: &&[u32; 2]; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _111: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 10 at ui/rfcs/rfc1857-drop-order.rs:154:9: 154:23
                            let mut _181: &&[u32; 2]; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 11 {
                                debug left_val => _97; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _98; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _103: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 12 {
                                    debug kind => _103; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 13 {
                                debug dropped_fields => _111; // in scope 13 at ui/rfcs/rfc1857-drop-order.rs:154:9: 154:23
                                let _114: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 13 at ui/rfcs/rfc1857-drop-order.rs:155:9: 155:15
                                scope 14 {
                                    debug cloned => _114; // in scope 14 at ui/rfcs/rfc1857-drop-order.rs:155:9: 155:15
                                    let _131: &std::vec::Vec<u32>; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _132: &&[u32; 2]; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _145: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 14 at ui/rfcs/rfc1857-drop-order.rs:166:9: 166:23
                                    let mut _180: &&[u32; 2]; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 15 {
                                        debug left_val => _131; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _132; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _137: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 16 {
                                            debug kind => _137; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                    scope 17 {
                                        debug dropped_fields => _145; // in scope 17 at ui/rfcs/rfc1857-drop-order.rs:166:9: 166:23
                                        let _148: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 17 at ui/rfcs/rfc1857-drop-order.rs:167:9: 167:15
                                        scope 18 {
                                            debug cloned => _148; // in scope 18 at ui/rfcs/rfc1857-drop-order.rs:167:9: 167:15
                                            let _165: &std::vec::Vec<u32>; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            let _166: &&[u32; 2]; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let mut _179: &&[u32; 2]; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                            scope 19 {
                                                debug left_val => _165; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                debug right_val => _166; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                let _171: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                scope 20 {
                                                    debug kind => _171; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _3 = Vec::<u32>::new() -> bb1;   // scope 0 at ui/rfcs/rfc1857-drop-order.rs:123:47: 123:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:123:47: 123:55
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = RefCell::<Vec<u32>>::new(move _3) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:123:34: 123:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:123:34: 123:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Rc::<RefCell<Vec<u32>>>::new(move _2) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:123:26: 123:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:123:26: 123:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_1;                        // scope 1 at ui/rfcs/rfc1857-drop-order.rs:125:31: 125:53
        _6 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _7) -> [return: bb4, unwind: bb104]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:125:31: 125:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:125:46: 125:51
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = PushOnDrop::new(const 1_u32, move _6) -> [return: bb5, unwind: bb104]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:125:12: 125:54
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:125:12: 125:27
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:126:31: 126:53
        _9 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _10) -> [return: bb6, unwind: bb103]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:126:31: 126:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:126:46: 126:51
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = PushOnDrop::new(const 2_u32, move _9) -> [return: bb7, unwind: bb103]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:126:12: 126:54
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:126:12: 126:27
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:127:31: 127:53
        _12 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _13) -> [return: bb8, unwind: bb102]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:127:31: 127:53
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:127:46: 127:51
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb8: {
        _11 = PushOnDrop::new(const 3_u32, move _12) -> [return: bb9, unwind: bb102]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:127:12: 127:54
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:127:12: 127:27
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb9: {
        _4 = TestEnum::Struct { x: move _5, y: move _8, z: move _11 }; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:124:28: 128:6
        _15 = move _4;                   // scope 2 at ui/rfcs/rfc1857-drop-order.rs:129:10: 129:26
        _14 = std::mem::drop::<TestEnum>(move _15) -> [return: bb10, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:129:5: 129:27
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:129:5: 129:9
                                         // + literal: Const { ty: fn(TestEnum) {std::mem::drop::<TestEnum>}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = &_1;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
        _22 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _23) -> [return: bb11, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = _22;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
        _20 = RefCell::<Vec<u32>>::borrow(move _21) -> [return: bb12, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:130:32: 130:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = &_20;                      // scope 2 at ui/rfcs/rfc1857-drop-order.rs:130:17: 130:40
        _18 = <Ref<'_, Vec<u32>> as Deref>::deref(move _19) -> [return: bb13, unwind: bb101]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:130:16: 130:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:130:16: 130:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _183 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(test_drop_enum, [], Some(promoted[4])) }
        _24 = _183;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _16 = (move _17, move _24);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_16.0: &std::vec::Vec<u32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_16.1: &&[u32; 3]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <Vec<u32> as PartialEq<&[u32; 3]>>::eq(move _29, move _30) -> [return: bb14, unwind: bb101]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 3]) -> bool {<Vec<u32> as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb16, otherwise: bb15]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>(move _33, move _34, move _36, move _38) -> bb101; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_20) -> [return: bb17, unwind: bb104]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        _41 = Vec::<u32>::new() -> [return: bb18, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:133:47: 133:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:133:47: 133:55
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _40 = RefCell::<Vec<u32>>::new(move _41) -> [return: bb19, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:133:34: 133:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:133:34: 133:46
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb19: {
        _39 = Rc::<RefCell<Vec<u32>>>::new(move _40) -> [return: bb20, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:133:26: 133:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:133:26: 133:33
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _45 = &_39;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:134:62: 134:84
        _44 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _45) -> [return: bb21, unwind: bb100]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:134:62: 134:84
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:134:77: 134:82
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb21: {
        _43 = PushOnDrop::new(const 1_u32, move _44) -> [return: bb22, unwind: bb100]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:134:43: 134:85
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:134:43: 134:58
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb22: {
        _48 = &_39;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:135:62: 135:84
        _47 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _48) -> [return: bb23, unwind: bb99]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:135:62: 135:84
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:135:77: 135:82
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb23: {
        _46 = PushOnDrop::new(const 2_u32, move _47) -> [return: bb24, unwind: bb99]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:135:43: 135:85
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:135:43: 135:58
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb24: {
        _51 = &_39;                      // scope 5 at ui/rfcs/rfc1857-drop-order.rs:136:62: 136:84
        _50 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _51) -> [return: bb25, unwind: bb98]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:136:62: 136:84
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:136:77: 136:82
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb25: {
        _49 = PushOnDrop::new(const 3_u32, move _50) -> [return: bb26, unwind: bb98]; // scope 5 at ui/rfcs/rfc1857-drop-order.rs:136:43: 136:85
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:136:43: 136:58
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb26: {
        _42 = TestEnum::Tuple(move _43, move _46, move _49); // scope 5 at ui/rfcs/rfc1857-drop-order.rs:134:27: 136:86
        _53 = move _42;                  // scope 6 at ui/rfcs/rfc1857-drop-order.rs:137:10: 137:25
        _52 = std::mem::drop::<TestEnum>(move _53) -> [return: bb27, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:137:5: 137:26
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:137:5: 137:9
                                         // + literal: Const { ty: fn(TestEnum) {std::mem::drop::<TestEnum>}, val: Value(<ZST>) }
    }

    bb27: {
        _61 = &_39;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
        _60 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _61) -> [return: bb28, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _59 = _60;                       // scope 6 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
        _58 = RefCell::<Vec<u32>>::borrow(move _59) -> [return: bb29, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:138:32: 138:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb29: {
        _57 = &_58;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:138:17: 138:40
        _56 = <Ref<'_, Vec<u32>> as Deref>::deref(move _57) -> [return: bb30, unwind: bb97]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:138:16: 138:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:138:16: 138:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        _55 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _182 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(test_drop_enum, [], Some(promoted[3])) }
        _62 = _182;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _62);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _63 = (_54.0: &std::vec::Vec<u32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _64 = (_54.1: &&[u32; 3]);       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _67 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _68 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _66 = <Vec<u32> as PartialEq<&[u32; 3]>>::eq(move _67, move _68) -> [return: bb31, unwind: bb97]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 3]) -> bool {<Vec<u32> as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _65 = Not(move _66);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _65) -> [0: bb33, otherwise: bb32]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _69 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _73 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _73;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _75 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _76 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _70 = core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>(move _71, move _72, move _74, move _76) -> bb97; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb33: {
        drop(_58) -> [return: bb34, unwind: bb100]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34: {
        _79 = Vec::<u32>::new() -> [return: bb35, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:142:47: 142:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:142:47: 142:55
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb35: {
        _78 = RefCell::<Vec<u32>>::new(move _79) -> [return: bb36, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:142:34: 142:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:142:34: 142:46
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb36: {
        _77 = Rc::<RefCell<Vec<u32>>>::new(move _78) -> [return: bb37, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:142:26: 142:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:142:26: 142:33
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb37: {
        _82 = &_77;                      // scope 9 at ui/rfcs/rfc1857-drop-order.rs:143:35: 143:57
        _81 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _82) -> [return: bb38, unwind: bb96]; // scope 9 at ui/rfcs/rfc1857-drop-order.rs:143:35: 143:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:143:50: 143:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb38: {
        _80 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _81); // scope 9 at ui/rfcs/rfc1857-drop-order.rs:143:18: 143:58
        _87 = &_80;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6
        _86 = [closure@ui/rfcs/rfc1857-drop-order.rs:144:25: 144:27] { cloned: move _87 }; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6
                                         // closure
                                         // + def_id: DefId(0:43 ~ rfc1857_drop_order[fa2e]::test_drop_enum::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _85 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:144:25: 144:27], ()>(move _86) -> [return: bb39, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:144:5: 150:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:144:5: 144:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:144:25: 144:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:144:25: 144:27], ()>}, val: Value(<ZST>) }
    }

    bb39: {
        _84 = Result::<(), Box<dyn Any + Send>>::err(move _85) -> [return: bb40, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:144:5: 150:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:150:8: 150:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb40: {
        _83 = Option::<Box<dyn Any + Send>>::unwrap(move _84) -> [return: bb41, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:144:5: 150:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:150:14: 150:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb41: {
        drop(_83) -> [return: bb42, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:150:22: 150:23
    }

    bb42: {
        _95 = &_77;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
        _94 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _95) -> [return: bb43, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb43: {
        _93 = _94;                       // scope 10 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
        _92 = RefCell::<Vec<u32>>::borrow(move _93) -> [return: bb44, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:151:32: 151:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb44: {
        _91 = &_92;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:151:17: 151:40
        _90 = <Ref<'_, Vec<u32>> as Deref>::deref(move _91) -> [return: bb45, unwind: bb94]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:151:16: 151:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:151:16: 151:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb45: {
        _89 = _90;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _181 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_enum, [], Some(promoted[2])) }
        _96 = _181;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _88 = (move _89, move _96);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _97 = (_88.0: &std::vec::Vec<u32>); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _98 = (_88.1: &&[u32; 2]);       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _101 = _97;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _102 = _98;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _100 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _101, move _102) -> [return: bb46, unwind: bb94]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _99 = Not(move _100);            // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _99) -> [0: bb48, otherwise: bb47]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _103 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _105 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _107 = _97;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _107;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _109 = _98;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _108 = _109;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _110 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _104 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _105, move _106, move _108, move _110) -> bb94; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb48: {
        drop(_92) -> [return: bb49, unwind: bb95]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb49: {
        _113 = Vec::<u32>::new() -> [return: bb50, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:154:47: 154:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:154:47: 154:55
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb50: {
        _112 = RefCell::<Vec<u32>>::new(move _113) -> [return: bb51, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:154:34: 154:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:154:34: 154:46
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb51: {
        _111 = Rc::<RefCell<Vec<u32>>>::new(move _112) -> [return: bb52, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:154:26: 154:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:154:26: 154:33
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb52: {
        _116 = &_111;                    // scope 13 at ui/rfcs/rfc1857-drop-order.rs:155:35: 155:57
        _115 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _116) -> [return: bb53, unwind: bb93]; // scope 13 at ui/rfcs/rfc1857-drop-order.rs:155:35: 155:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:155:50: 155:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb53: {
        _114 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _115); // scope 13 at ui/rfcs/rfc1857-drop-order.rs:155:18: 155:58
        _121 = &_114;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6
        _120 = [closure@ui/rfcs/rfc1857-drop-order.rs:156:25: 156:27] { cloned: move _121 }; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6
                                         // closure
                                         // + def_id: DefId(0:44 ~ rfc1857_drop_order[fa2e]::test_drop_enum::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _119 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:156:25: 156:27], ()>(move _120) -> [return: bb54, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:156:5: 162:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:156:5: 156:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:156:25: 156:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:156:25: 156:27], ()>}, val: Value(<ZST>) }
    }

    bb54: {
        _118 = Result::<(), Box<dyn Any + Send>>::err(move _119) -> [return: bb55, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:156:5: 162:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:162:8: 162:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb55: {
        _117 = Option::<Box<dyn Any + Send>>::unwrap(move _118) -> [return: bb56, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:156:5: 162:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:162:14: 162:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb56: {
        drop(_117) -> [return: bb57, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:162:22: 162:23
    }

    bb57: {
        _129 = &_111;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
        _128 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _129) -> [return: bb58, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb58: {
        _127 = _128;                     // scope 14 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
        _126 = RefCell::<Vec<u32>>::borrow(move _127) -> [return: bb59, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:163:32: 163:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb59: {
        _125 = &_126;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:163:17: 163:40
        _124 = <Ref<'_, Vec<u32>> as Deref>::deref(move _125) -> [return: bb60, unwind: bb91]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:163:16: 163:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:163:16: 163:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb60: {
        _123 = _124;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _180 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_enum, [], Some(promoted[1])) }
        _130 = _180;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _122 = (move _123, move _130);   // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _131 = (_122.0: &std::vec::Vec<u32>); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _132 = (_122.1: &&[u32; 2]);     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _135 = _131;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _136 = _132;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _134 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _135, move _136) -> [return: bb61, unwind: bb91]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _133 = Not(move _134);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _133) -> [0: bb63, otherwise: bb62]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _137 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _139 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _141 = _131;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _140 = _141;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _143 = _132;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _142 = _143;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _144 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _138 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _139, move _140, move _142, move _144) -> bb91; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb63: {
        drop(_126) -> [return: bb64, unwind: bb92]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb64: {
        _147 = Vec::<u32>::new() -> [return: bb65, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:166:47: 166:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:166:47: 166:55
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb65: {
        _146 = RefCell::<Vec<u32>>::new(move _147) -> [return: bb66, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:166:34: 166:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:166:34: 166:46
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb66: {
        _145 = Rc::<RefCell<Vec<u32>>>::new(move _146) -> [return: bb67, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:166:26: 166:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:166:26: 166:33
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb67: {
        _150 = &_145;                    // scope 17 at ui/rfcs/rfc1857-drop-order.rs:167:35: 167:57
        _149 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _150) -> [return: bb68, unwind: bb90]; // scope 17 at ui/rfcs/rfc1857-drop-order.rs:167:35: 167:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:167:50: 167:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb68: {
        _148 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _149); // scope 17 at ui/rfcs/rfc1857-drop-order.rs:167:18: 167:58
        _155 = &_148;                    // scope 18 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6
        _154 = [closure@ui/rfcs/rfc1857-drop-order.rs:168:25: 168:27] { cloned: move _155 }; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6
                                         // closure
                                         // + def_id: DefId(0:45 ~ rfc1857_drop_order[fa2e]::test_drop_enum::{closure#2})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _153 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:168:25: 168:27], ()>(move _154) -> [return: bb69, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:168:5: 172:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:168:5: 168:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:168:25: 168:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:168:25: 168:27], ()>}, val: Value(<ZST>) }
    }

    bb69: {
        _152 = Result::<(), Box<dyn Any + Send>>::err(move _153) -> [return: bb70, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:168:5: 172:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:172:8: 172:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb70: {
        _151 = Option::<Box<dyn Any + Send>>::unwrap(move _152) -> [return: bb71, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:168:5: 172:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:172:14: 172:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb71: {
        drop(_151) -> [return: bb72, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:172:22: 172:23
    }

    bb72: {
        _163 = &_145;                    // scope 18 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
        _162 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _163) -> [return: bb73, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb73: {
        _161 = _162;                     // scope 18 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
        _160 = RefCell::<Vec<u32>>::borrow(move _161) -> [return: bb74, unwind: bb89]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:173:32: 173:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb74: {
        _159 = &_160;                    // scope 18 at ui/rfcs/rfc1857-drop-order.rs:173:17: 173:40
        _158 = <Ref<'_, Vec<u32>> as Deref>::deref(move _159) -> [return: bb75, unwind: bb88]; // scope 18 at ui/rfcs/rfc1857-drop-order.rs:173:16: 173:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:173:16: 173:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb75: {
        _157 = _158;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _179 = const _;                  // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_enum, [], Some(promoted[0])) }
        _164 = _179;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _156 = (move _157, move _164);   // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _165 = (_156.0: &std::vec::Vec<u32>); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _166 = (_156.1: &&[u32; 2]);     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _169 = _165;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _170 = _166;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _168 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _169, move _170) -> [return: bb76, unwind: bb88]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb76: {
        _167 = Not(move _168);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _167) -> [0: bb78, otherwise: bb77]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _171 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _173 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _175 = _165;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _174 = _175;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _177 = _166;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = _177;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _178 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _172 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _173, move _174, move _176, move _178) -> bb88; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb78: {
        drop(_160) -> [return: bb79, unwind: bb89]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb79: {
        drop(_148) -> [return: bb80, unwind: bb90]; // scope 17 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb80: {
        drop(_145) -> [return: bb81, unwind: bb92]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb81: {
        drop(_114) -> [return: bb82, unwind: bb93]; // scope 13 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb82: {
        drop(_111) -> [return: bb83, unwind: bb95]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb83: {
        drop(_80) -> [return: bb84, unwind: bb96]; // scope 9 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb84: {
        drop(_77) -> [return: bb85, unwind: bb100]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb85: {
        drop(_39) -> [return: bb86, unwind: bb104]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb86: {
        drop(_1) -> bb87;                // scope 0 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb87: {
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:174:2: 174:2
    }

    bb88 (cleanup): {
        drop(_160) -> bb89;              // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb89 (cleanup): {
        drop(_148) -> bb90;              // scope 17 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb90 (cleanup): {
        drop(_145) -> bb92;              // scope 14 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb91 (cleanup): {
        drop(_126) -> bb92;              // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb92 (cleanup): {
        drop(_114) -> bb93;              // scope 13 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb93 (cleanup): {
        drop(_111) -> bb95;              // scope 10 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb94 (cleanup): {
        drop(_92) -> bb95;               // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb95 (cleanup): {
        drop(_80) -> bb96;               // scope 9 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb96 (cleanup): {
        drop(_77) -> bb100;              // scope 6 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb97 (cleanup): {
        drop(_58) -> bb100;              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb98 (cleanup): {
        drop(_46) -> bb99;               // scope 5 at ui/rfcs/rfc1857-drop-order.rs:136:85: 136:86
    }

    bb99 (cleanup): {
        drop(_43) -> bb100;              // scope 5 at ui/rfcs/rfc1857-drop-order.rs:136:85: 136:86
    }

    bb100 (cleanup): {
        drop(_39) -> bb104;              // scope 2 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb101 (cleanup): {
        drop(_20) -> bb104;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb102 (cleanup): {
        drop(_8) -> bb103;               // scope 1 at ui/rfcs/rfc1857-drop-order.rs:128:5: 128:6
    }

    bb103 (cleanup): {
        drop(_5) -> bb104;               // scope 1 at ui/rfcs/rfc1857-drop-order.rs:128:5: 128:6
    }

    bb104 (cleanup): {
        drop(_1) -> bb105;               // scope 0 at ui/rfcs/rfc1857-drop-order.rs:174:1: 174:2
    }

    bb105 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:121:1: 174:2
    }
}

promoted[0] in test_drop_enum: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:42: 173:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:43: 173:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:43: 173:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:173:42: 173:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_drop_enum: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:42: 163:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:43: 163:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:43: 163:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:163:42: 163:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test_drop_enum: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:42: 151:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:43: 151:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:43: 151:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:151:42: 151:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test_drop_enum: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:42: 138:52
    let mut _2: [u32; 3];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:43: 138:52

    bb0: {
        _2 = [const 1_u32, const 2_u32, const 3_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:43: 138:52
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:138:42: 138:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in test_drop_enum: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:42: 130:52
    let mut _2: [u32; 3];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:43: 130:52

    bb0: {
        _2 = [const 1_u32, const 2_u32, const 3_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:43: 130:52
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:130:42: 130:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_drop_enum::{closure#0}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:144:25: 144:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:143:9: 143:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:28: 144:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:16: 146:50
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:16: 147:50
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:35: 146:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:146:42: 146:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:146:16: 146:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:146:16: 146:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:35: 147:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:147:42: 147:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:147:16: 147:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:147:16: 147:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:148:23: 148:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:149:9: 149:10
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:149:9: 149:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:144:25: 150:6
    }
}

fn test_drop_enum::{closure#1}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:156:25: 156:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:155:9: 155:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:28: 156:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:16: 158:50
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:16: 159:50
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:35: 158:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:158:42: 158:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:158:16: 158:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:158:16: 158:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:35: 159:49
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:159:42: 159:47
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:159:16: 159:50
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:159:16: 159:31
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:160:23: 160:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:161:9: 161:10
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:161:9: 161:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:156:25: 162:6
    }
}

fn test_drop_enum::{closure#2}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:168:25: 168:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:167:9: 167:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:28: 168:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:25: 169:59
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:25: 170:59
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:44: 169:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:169:51: 169:56
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:169:25: 169:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:169:25: 169:40
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:44: 170:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:170:51: 170:56
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:170:25: 170:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:170:25: 170:40
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:171:32: 171:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:171:58: 171:59
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:171:58: 171:59
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:168:25: 172:6
    }
}

fn test_drop_list() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:176:21: 176:21
    let _1: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:178:9: 178:23
    let mut _2: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:178:34: 178:58
    let mut _3: std::vec::Vec<u32>;      // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:178:47: 178:57
    let mut _5: std::boxed::Box<[PushOnDrop]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: std::boxed::Box<[PushOnDrop; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: std::boxed::Box<[PushOnDrop; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:179:19: 179:61
    let mut _12: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:179:38: 179:60
    let mut _13: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:179:38: 179:60
    let mut _14: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:180:19: 180:61
    let mut _15: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:180:38: 180:60
    let mut _16: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:180:38: 180:60
    let mut _17: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:181:19: 181:61
    let mut _18: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:181:38: 181:60
    let mut _19: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:181:38: 181:60
    let _20: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:182:5: 182:13
    let mut _21: std::vec::Vec<PushOnDrop>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:182:10: 182:12
    let mut _22: (&std::vec::Vec<u32>, &&[u32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:16: 183:40
    let mut _25: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
    let _26: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
    let mut _27: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
    let _28: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
    let mut _29: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
    let mut _30: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _46: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:186:34: 186:58
    let mut _47: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:186:47: 186:57
    let mut _49: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:187:15: 187:57
    let mut _50: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:187:34: 187:56
    let mut _51: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:187:34: 187:56
    let mut _52: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:188:15: 188:57
    let mut _53: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:188:34: 188:56
    let mut _54: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:188:34: 188:56
    let mut _55: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:189:15: 189:57
    let mut _56: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:189:34: 189:56
    let mut _57: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:189:34: 189:56
    let _58: ();                         // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:190:5: 190:13
    let mut _59: [PushOnDrop; 3];        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:190:10: 190:12
    let mut _60: (&std::vec::Vec<u32>, &&[u32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _61: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _62: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:16: 191:40
    let mut _63: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
    let _64: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
    let mut _65: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
    let _66: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
    let mut _67: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
    let mut _68: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _73: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _74: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _76: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _77: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _78: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _79: &std::vec::Vec<u32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _80: &&[u32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _81: &&[u32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _84: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:195:34: 195:58
    let mut _85: std::vec::Vec<u32>;     // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:195:47: 195:57
    let mut _87: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:196:35: 196:57
    let mut _88: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:196:35: 196:57
    let _89: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:5: 203:22
    let mut _90: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:5: 203:13
    let mut _91: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:5: 203:7
    let mut _92: [closure@ui/rfcs/rfc1857-drop-order.rs:197:25: 197:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
    let mut _93: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
    let mut _94: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _95: &std::vec::Vec<u32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _96: &std::vec::Vec<u32>;        // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:16: 204:40
    let mut _97: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
    let _98: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
    let mut _99: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
    let _100: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
    let mut _101: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
    let mut _102: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _105: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _107: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _108: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _110: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _111: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _112: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _113: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _114: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _115: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _118: std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:207:34: 207:58
    let mut _119: std::vec::Vec<u32>;    // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:207:47: 207:57
    let mut _121: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:208:35: 208:57
    let mut _122: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:208:35: 208:57
    let _123: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:5: 215:22
    let mut _124: std::option::Option<std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:5: 215:13
    let mut _125: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:5: 215:7
    let mut _126: [closure@ui/rfcs/rfc1857-drop-order.rs:209:25: 209:27]; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6
    let mut _127: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6
    let mut _128: (&std::vec::Vec<u32>, &&[u32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _129: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _130: &std::vec::Vec<u32>;       // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:16: 216:40
    let mut _131: &std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
    let _132: std::cell::Ref<'_, std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
    let mut _133: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
    let _134: &std::cell::RefCell<std::vec::Vec<u32>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
    let mut _135: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
    let mut _136: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _141: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _142: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _144: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _145: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _146: &std::vec::Vec<u32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _147: &std::vec::Vec<u32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _148: &&[u32; 2];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _149: &&[u32; 2];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _155: ();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _156: *const [PushOnDrop; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug dropped_fields => _1;      // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:178:9: 178:23
        let _4: std::vec::Vec<PushOnDrop>; // in scope 1 at ui/rfcs/rfc1857-drop-order.rs:179:9: 179:11
        scope 2 {
            debug xs => _4;              // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:179:9: 179:11
            let _31: &std::vec::Vec<u32>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _32: &&[u32; 3];         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _45: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 2 at ui/rfcs/rfc1857-drop-order.rs:186:9: 186:23
            let mut _154: &&[u32; 3];    // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 4 {
                debug left_val => _31;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _32;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _37: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _37;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 6 {
                debug dropped_fields => _45; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:186:9: 186:23
                let _48: [PushOnDrop; 3]; // in scope 6 at ui/rfcs/rfc1857-drop-order.rs:187:9: 187:11
                scope 7 {
                    debug xs => _48;     // in scope 7 at ui/rfcs/rfc1857-drop-order.rs:187:9: 187:11
                    let _69: &std::vec::Vec<u32>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _70: &&[u32; 3]; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _83: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 7 at ui/rfcs/rfc1857-drop-order.rs:195:9: 195:23
                    let mut _153: &&[u32; 3]; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 8 {
                        debug left_val => _69; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _70; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _75: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 9 {
                            debug kind => _75; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 10 {
                        debug dropped_fields => _83; // in scope 10 at ui/rfcs/rfc1857-drop-order.rs:195:9: 195:23
                        let _86: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 10 at ui/rfcs/rfc1857-drop-order.rs:196:9: 196:15
                        scope 11 {
                            debug cloned => _86; // in scope 11 at ui/rfcs/rfc1857-drop-order.rs:196:9: 196:15
                            let _103: &std::vec::Vec<u32>; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _104: &&[u32; 2]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _117: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 11 at ui/rfcs/rfc1857-drop-order.rs:207:9: 207:23
                            let mut _152: &&[u32; 2]; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 12 {
                                debug left_val => _103; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _104; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _109: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 13 {
                                    debug kind => _109; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 14 {
                                debug dropped_fields => _117; // in scope 14 at ui/rfcs/rfc1857-drop-order.rs:207:9: 207:23
                                let _120: std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 14 at ui/rfcs/rfc1857-drop-order.rs:208:9: 208:15
                                scope 15 {
                                    debug cloned => _120; // in scope 15 at ui/rfcs/rfc1857-drop-order.rs:208:9: 208:15
                                    let _137: &std::vec::Vec<u32>; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _138: &&[u32; 2]; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let mut _151: &&[u32; 2]; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 16 {
                                        debug left_val => _137; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _138; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _143: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 17 {
                                            debug kind => _143; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _3 = Vec::<u32>::new() -> bb1;   // scope 0 at ui/rfcs/rfc1857-drop-order.rs:178:47: 178:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:178:47: 178:55
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = RefCell::<Vec<u32>>::new(move _3) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:178:34: 178:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:178:34: 178:46
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Rc::<RefCell<Vec<u32>>>::new(move _2) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:178:26: 178:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:178:26: 178:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = const 48_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const 8_usize;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = alloc::alloc::exchange_malloc(move _7, move _8) -> [return: bb4, unwind: bb86]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = ShallowInitBox(move _9, [PushOnDrop; 3]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:179:38: 179:60
        _12 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _13) -> [return: bb5, unwind: bb88]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:179:38: 179:60
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:179:53: 179:58
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = PushOnDrop::new(const 1_u32, move _12) -> [return: bb6, unwind: bb88]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:179:19: 179:61
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:179:19: 179:34
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:180:38: 180:60
        _15 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _16) -> [return: bb7, unwind: bb85]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:180:38: 180:60
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:180:53: 180:58
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = PushOnDrop::new(const 2_u32, move _15) -> [return: bb8, unwind: bb85]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:180:19: 180:61
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:180:19: 180:34
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb8: {
        _19 = &_1;                       // scope 1 at ui/rfcs/rfc1857-drop-order.rs:181:38: 181:60
        _18 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _19) -> [return: bb9, unwind: bb84]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:181:38: 181:60
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:181:53: 181:58
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb9: {
        _17 = PushOnDrop::new(const 3_u32, move _18) -> [return: bb10, unwind: bb84]; // scope 1 at ui/rfcs/rfc1857-drop-order.rs:181:19: 181:61
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:181:19: 181:34
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb10: {
        _156 = (((_10.0: std::ptr::Unique<[PushOnDrop; 3]>).0: std::ptr::NonNull<[PushOnDrop; 3]>).0: *const [PushOnDrop; 3]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_156) = [move _11, move _14, move _17]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _6 = move _10;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = move _6 as std::boxed::Box<[PushOnDrop]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = slice::<impl [PushOnDrop]>::into_vec::<std::alloc::Global>(move _5) -> [return: bb11, unwind: bb86]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[PushOnDrop]>) -> Vec<PushOnDrop> {slice::<impl [PushOnDrop]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = move _4;                   // scope 2 at ui/rfcs/rfc1857-drop-order.rs:182:10: 182:12
        _20 = std::mem::drop::<Vec<PushOnDrop>>(move _21) -> [return: bb12, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:182:5: 182:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:182:5: 182:9
                                         // + literal: Const { ty: fn(Vec<PushOnDrop>) {std::mem::drop::<Vec<PushOnDrop>>}, val: Value(<ZST>) }
    }

    bb12: {
        _29 = &_1;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
        _28 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _29) -> [return: bb13, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb13: {
        _27 = _28;                       // scope 2 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
        _26 = RefCell::<Vec<u32>>::borrow(move _27) -> [return: bb14, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:183:32: 183:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb14: {
        _25 = &_26;                      // scope 2 at ui/rfcs/rfc1857-drop-order.rs:183:17: 183:40
        _24 = <Ref<'_, Vec<u32>> as Deref>::deref(move _25) -> [return: bb15, unwind: bb83]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:183:16: 183:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:183:16: 183:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb15: {
        _23 = _24;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _154 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(test_drop_list, [], Some(promoted[3])) }
        _30 = _154;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _30);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_22.0: &std::vec::Vec<u32>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_22.1: &&[u32; 3]);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = <Vec<u32> as PartialEq<&[u32; 3]>>::eq(move _35, move _36) -> [return: bb16, unwind: bb83]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 3]) -> bool {<Vec<u32> as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _33 = Not(move _34);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb18, otherwise: bb17]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>(move _39, move _40, move _42, move _44) -> bb83; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_26) -> [return: bb19, unwind: bb86]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb19: {
        _47 = Vec::<u32>::new() -> [return: bb20, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:186:47: 186:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:186:47: 186:55
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _46 = RefCell::<Vec<u32>>::new(move _47) -> [return: bb21, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:186:34: 186:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:186:34: 186:46
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb21: {
        _45 = Rc::<RefCell<Vec<u32>>>::new(move _46) -> [return: bb22, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:186:26: 186:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:186:26: 186:33
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb22: {
        _51 = &_45;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:187:34: 187:56
        _50 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _51) -> [return: bb23, unwind: bb82]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:187:34: 187:56
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:187:49: 187:54
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb23: {
        _49 = PushOnDrop::new(const 1_u32, move _50) -> [return: bb24, unwind: bb82]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:187:15: 187:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:187:15: 187:30
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb24: {
        _54 = &_45;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:188:34: 188:56
        _53 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _54) -> [return: bb25, unwind: bb81]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:188:34: 188:56
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:188:49: 188:54
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb25: {
        _52 = PushOnDrop::new(const 2_u32, move _53) -> [return: bb26, unwind: bb81]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:188:15: 188:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:188:15: 188:30
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb26: {
        _57 = &_45;                      // scope 6 at ui/rfcs/rfc1857-drop-order.rs:189:34: 189:56
        _56 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _57) -> [return: bb27, unwind: bb80]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:189:34: 189:56
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:189:49: 189:54
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb27: {
        _55 = PushOnDrop::new(const 3_u32, move _56) -> [return: bb28, unwind: bb80]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:189:15: 189:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:189:15: 189:30
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb28: {
        _48 = [move _49, move _52, move _55]; // scope 6 at ui/rfcs/rfc1857-drop-order.rs:187:14: 189:58
        _59 = move _48;                  // scope 7 at ui/rfcs/rfc1857-drop-order.rs:190:10: 190:12
        _58 = std::mem::drop::<[PushOnDrop; 3]>(move _59) -> [return: bb29, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:190:5: 190:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:190:5: 190:9
                                         // + literal: Const { ty: fn([PushOnDrop; 3]) {std::mem::drop::<[PushOnDrop; 3]>}, val: Value(<ZST>) }
    }

    bb29: {
        _67 = &_45;                      // scope 7 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
        _66 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _67) -> [return: bb30, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb30: {
        _65 = _66;                       // scope 7 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
        _64 = RefCell::<Vec<u32>>::borrow(move _65) -> [return: bb31, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:191:32: 191:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb31: {
        _63 = &_64;                      // scope 7 at ui/rfcs/rfc1857-drop-order.rs:191:17: 191:40
        _62 = <Ref<'_, Vec<u32>> as Deref>::deref(move _63) -> [return: bb32, unwind: bb79]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:191:16: 191:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:191:16: 191:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb32: {
        _61 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _153 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 3], val: Unevaluated(test_drop_list, [], Some(promoted[2])) }
        _68 = _153;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _60 = (move _61, move _68);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _69 = (_60.0: &std::vec::Vec<u32>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _70 = (_60.1: &&[u32; 3]);       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _73 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _74 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _72 = <Vec<u32> as PartialEq<&[u32; 3]>>::eq(move _73, move _74) -> [return: bb33, unwind: bb79]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 3]) -> bool {<Vec<u32> as PartialEq<&[u32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb33: {
        _71 = Not(move _72);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _71) -> [0: bb35, otherwise: bb34]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb34: {
        _75 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _77 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = _69;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _78 = _79;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _81 = _70;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _80 = _81;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _76 = core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>(move _77, move _78, move _80, move _82) -> bb79; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 3]>}, val: Value(<ZST>) }
    }

    bb35: {
        drop(_64) -> [return: bb36, unwind: bb82]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb36: {
        _85 = Vec::<u32>::new() -> [return: bb37, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:195:47: 195:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:195:47: 195:55
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb37: {
        _84 = RefCell::<Vec<u32>>::new(move _85) -> [return: bb38, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:195:34: 195:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:195:34: 195:46
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb38: {
        _83 = Rc::<RefCell<Vec<u32>>>::new(move _84) -> [return: bb39, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:195:26: 195:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:195:26: 195:33
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb39: {
        _88 = &_83;                      // scope 10 at ui/rfcs/rfc1857-drop-order.rs:196:35: 196:57
        _87 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _88) -> [return: bb40, unwind: bb78]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:196:35: 196:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:196:50: 196:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb40: {
        _86 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _87); // scope 10 at ui/rfcs/rfc1857-drop-order.rs:196:18: 196:58
        _93 = &_86;                      // scope 11 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
        _92 = [closure@ui/rfcs/rfc1857-drop-order.rs:197:25: 197:27] { cloned: move _93 }; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
                                         // closure
                                         // + def_id: DefId(0:47 ~ rfc1857_drop_order[fa2e]::test_drop_list::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _91 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:197:25: 197:27], ()>(move _92) -> [return: bb41, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:197:5: 203:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:197:5: 197:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:197:25: 197:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:197:25: 197:27], ()>}, val: Value(<ZST>) }
    }

    bb41: {
        _90 = Result::<(), Box<dyn Any + Send>>::err(move _91) -> [return: bb42, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:197:5: 203:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:203:8: 203:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb42: {
        _89 = Option::<Box<dyn Any + Send>>::unwrap(move _90) -> [return: bb43, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:197:5: 203:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:203:14: 203:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb43: {
        drop(_89) -> [return: bb44, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:203:22: 203:23
    }

    bb44: {
        _101 = &_83;                     // scope 11 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
        _100 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _101) -> [return: bb45, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb45: {
        _99 = _100;                      // scope 11 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
        _98 = RefCell::<Vec<u32>>::borrow(move _99) -> [return: bb46, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:204:32: 204:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb46: {
        _97 = &_98;                      // scope 11 at ui/rfcs/rfc1857-drop-order.rs:204:17: 204:40
        _96 = <Ref<'_, Vec<u32>> as Deref>::deref(move _97) -> [return: bb47, unwind: bb76]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:204:16: 204:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:204:16: 204:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb47: {
        _95 = _96;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _152 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_list, [], Some(promoted[1])) }
        _102 = _152;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _94 = (move _95, move _102);     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _103 = (_94.0: &std::vec::Vec<u32>); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _104 = (_94.1: &&[u32; 2]);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _107 = _103;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _108 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _106 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _107, move _108) -> [return: bb48, unwind: bb76]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb48: {
        _105 = Not(move _106);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _105) -> [0: bb50, otherwise: bb49]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb49: {
        _109 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _111 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _113 = _103;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _112 = _113;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _115 = _104;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _114 = _115;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _116 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _110 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _111, move _112, move _114, move _116) -> bb76; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb50: {
        drop(_98) -> [return: bb51, unwind: bb77]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb51: {
        _119 = Vec::<u32>::new() -> [return: bb52, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:207:47: 207:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:207:47: 207:55
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb52: {
        _118 = RefCell::<Vec<u32>>::new(move _119) -> [return: bb53, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:207:34: 207:58
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:207:34: 207:46
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(Vec<u32>) -> RefCell<Vec<u32>> {RefCell::<Vec<u32>>::new}, val: Value(<ZST>) }
    }

    bb53: {
        _117 = Rc::<RefCell<Vec<u32>>>::new(move _118) -> [return: bb54, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:207:26: 207:59
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:207:26: 207:33
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(RefCell<Vec<u32>>) -> Rc<RefCell<Vec<u32>>> {Rc::<RefCell<Vec<u32>>>::new}, val: Value(<ZST>) }
    }

    bb54: {
        _122 = &_117;                    // scope 14 at ui/rfcs/rfc1857-drop-order.rs:208:35: 208:57
        _121 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _122) -> [return: bb55, unwind: bb75]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:208:35: 208:57
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:208:50: 208:55
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb55: {
        _120 = AssertUnwindSafe::<Rc<RefCell<Vec<u32>>>>(move _121); // scope 14 at ui/rfcs/rfc1857-drop-order.rs:208:18: 208:58
        _127 = &_120;                    // scope 15 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6
        _126 = [closure@ui/rfcs/rfc1857-drop-order.rs:209:25: 209:27] { cloned: move _127 }; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6
                                         // closure
                                         // + def_id: DefId(0:48 ~ rfc1857_drop_order[fa2e]::test_drop_list::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>,),
                                         // ]
        _125 = catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:209:25: 209:27], ()>(move _126) -> [return: bb56, unwind: bb74]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:209:5: 215:7
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:209:5: 209:24
                                         // + literal: Const { ty: fn([closure@ui/rfcs/rfc1857-drop-order.rs:209:25: 209:27]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/rfcs/rfc1857-drop-order.rs:209:25: 209:27], ()>}, val: Value(<ZST>) }
    }

    bb56: {
        _124 = Result::<(), Box<dyn Any + Send>>::err(move _125) -> [return: bb57, unwind: bb74]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:209:5: 215:13
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:215:8: 215:11
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Option<Box<dyn Any + Send>> {Result::<(), Box<dyn Any + Send>>::err}, val: Value(<ZST>) }
    }

    bb57: {
        _123 = Option::<Box<dyn Any + Send>>::unwrap(move _124) -> [return: bb58, unwind: bb74]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:209:5: 215:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:215:14: 215:20
                                         // + literal: Const { ty: fn(Option<Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Option::<Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb58: {
        drop(_123) -> [return: bb59, unwind: bb74]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:215:22: 215:23
    }

    bb59: {
        _135 = &_117;                    // scope 15 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
        _134 = <Rc<RefCell<Vec<u32>>> as Deref>::deref(move _135) -> [return: bb60, unwind: bb74]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> &'a <Rc<RefCell<Vec<u32>>> as Deref>::Target {<Rc<RefCell<Vec<u32>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb60: {
        _133 = _134;                     // scope 15 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
        _132 = RefCell::<Vec<u32>>::borrow(move _133) -> [return: bb61, unwind: bb74]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:216:32: 216:38
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<u32>>) -> Ref<'a, Vec<u32>> {RefCell::<Vec<u32>>::borrow}, val: Value(<ZST>) }
    }

    bb61: {
        _131 = &_132;                    // scope 15 at ui/rfcs/rfc1857-drop-order.rs:216:17: 216:40
        _130 = <Ref<'_, Vec<u32>> as Deref>::deref(move _131) -> [return: bb62, unwind: bb73]; // scope 15 at ui/rfcs/rfc1857-drop-order.rs:216:16: 216:40
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:216:16: 216:40
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<u32>>) -> &'a <Ref<'_, Vec<u32>> as Deref>::Target {<Ref<'_, Vec<u32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb62: {
        _129 = _130;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _151 = const _;                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u32; 2], val: Unevaluated(test_drop_list, [], Some(promoted[0])) }
        _136 = _151;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _128 = (move _129, move _136);   // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _137 = (_128.0: &std::vec::Vec<u32>); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _138 = (_128.1: &&[u32; 2]);     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _141 = _137;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _142 = _138;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _140 = <Vec<u32> as PartialEq<&[u32; 2]>>::eq(move _141, move _142) -> [return: bb63, unwind: bb73]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u32>, &'b &[u32; 2]) -> bool {<Vec<u32> as PartialEq<&[u32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb63: {
        _139 = Not(move _140);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _139) -> [0: bb65, otherwise: bb64]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb64: {
        _143 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _145 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _147 = _137;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _146 = _147;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _149 = _138;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _148 = _149;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _150 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _144 = core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>(move _145, move _146, move _148, move _150) -> bb73; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u32>, &'b &[u32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u32>, &[u32; 2]>}, val: Value(<ZST>) }
    }

    bb65: {
        drop(_132) -> [return: bb66, unwind: bb74]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb66: {
        drop(_120) -> [return: bb67, unwind: bb75]; // scope 14 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb67: {
        drop(_117) -> [return: bb68, unwind: bb77]; // scope 11 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb68: {
        drop(_86) -> [return: bb69, unwind: bb78]; // scope 10 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb69: {
        drop(_83) -> [return: bb70, unwind: bb82]; // scope 7 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb70: {
        drop(_45) -> [return: bb71, unwind: bb86]; // scope 2 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb71: {
        drop(_1) -> bb72;                // scope 0 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb72: {
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:217:2: 217:2
    }

    bb73 (cleanup): {
        drop(_132) -> bb74;              // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb74 (cleanup): {
        drop(_120) -> bb75;              // scope 14 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb75 (cleanup): {
        drop(_117) -> bb77;              // scope 11 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb76 (cleanup): {
        drop(_98) -> bb77;               // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb77 (cleanup): {
        drop(_86) -> bb78;               // scope 10 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb78 (cleanup): {
        drop(_83) -> bb82;               // scope 7 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb79 (cleanup): {
        drop(_64) -> bb82;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb80 (cleanup): {
        drop(_52) -> bb81;               // scope 6 at ui/rfcs/rfc1857-drop-order.rs:189:57: 189:58
    }

    bb81 (cleanup): {
        drop(_49) -> bb82;               // scope 6 at ui/rfcs/rfc1857-drop-order.rs:189:57: 189:58
    }

    bb82 (cleanup): {
        drop(_45) -> bb86;               // scope 2 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb83 (cleanup): {
        drop(_26) -> bb86;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb84 (cleanup): {
        drop(_14) -> bb85;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb85 (cleanup): {
        drop(_11) -> bb88;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb86 (cleanup): {
        drop(_1) -> bb87;                // scope 0 at ui/rfcs/rfc1857-drop-order.rs:217:1: 217:2
    }

    bb87 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:176:1: 217:2
    }

    bb88 (cleanup): {
        _155 = alloc::alloc::box_free::<[PushOnDrop; 3], std::alloc::Global>(move (_10.0: std::ptr::Unique<[PushOnDrop; 3]>), move (_10.1: std::alloc::Global)) -> bb86; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[PushOnDrop; 3]>, std::alloc::Global) {alloc::alloc::box_free::<[PushOnDrop; 3], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in test_drop_list: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:42: 216:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:43: 216:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:43: 216:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:216:42: 216:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_drop_list: &&[u32; 2] = {
    let mut _0: &&[u32; 2];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 2];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:42: 204:49
    let mut _2: [u32; 2];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:43: 204:49

    bb0: {
        _2 = [const 1_u32, const 2_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:43: 204:49
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:204:42: 204:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in test_drop_list: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:42: 191:52
    let mut _2: [u32; 3];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:43: 191:52

    bb0: {
        _2 = [const 1_u32, const 2_u32, const 3_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:43: 191:52
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:191:42: 191:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in test_drop_list: &&[u32; 3] = {
    let mut _0: &&[u32; 3];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u32; 3];               // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:42: 183:52
    let mut _2: [u32; 3];                // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:43: 183:52

    bb0: {
        _2 = [const 1_u32, const 2_u32, const 3_u32]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:43: 183:52
        _1 = &_2;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:183:42: 183:52
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn test_drop_list::{closure#0}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:197:25: 197:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:196:9: 196:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:28: 197:28
    let mut _2: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: std::boxed::Box<[PushOnDrop; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:13: 199:47
    let mut _7: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
    let mut _8: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
    let _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
    let mut _10: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
    let mut _11: PushOnDrop;             // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:13: 200:47
    let mut _12: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
    let mut _13: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
    let _14: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
    let mut _15: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _17: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
    let mut _18: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
    let mut _19: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    scope 1 {
    }

    bb0: {
        _2 = const 48_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _3 = const 8_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _4 = alloc::alloc::exchange_malloc(move _2, move _3) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = ShallowInitBox(move _4, [PushOnDrop; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _17 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
        _10 = _17;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
        _9 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _10) -> [return: bb2, unwind: bb11]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
        _7 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _8) -> [return: bb3, unwind: bb11]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:32: 199:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:199:39: 199:44
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = PushOnDrop::new(const 2_u32, move _7) -> [return: bb4, unwind: bb11]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:199:13: 199:47
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:199:13: 199:28
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
        _15 = _18;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
        _14 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _15) -> [return: bb5, unwind: bb9]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
        _12 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _13) -> [return: bb6, unwind: bb9]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:32: 200:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:200:39: 200:44
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = PushOnDrop::new(const 1_u32, move _12) -> [return: bb7, unwind: bb9]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:200:13: 200:47
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:200:13: 200:28
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = begin_panic::<&str>(const "this panic is caught :D") -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:201:20: 201:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8 (cleanup): {
        drop(_11) -> bb9;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb9 (cleanup): {
        drop(_6) -> bb11;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:45: 52:46
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:197:25: 203:6
    }

    bb11 (cleanup): {
        _19 = alloc::alloc::box_free::<[PushOnDrop; 3], std::alloc::Global>(move (_5.0: std::ptr::Unique<[PushOnDrop; 3]>), move (_5.1: std::alloc::Global)) -> bb10; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[PushOnDrop; 3]>, std::alloc::Global) {alloc::alloc::box_free::<[PushOnDrop; 3], std::alloc::Global>}, val: Value(<ZST>) }
    }
}

fn test_drop_list::{closure#1}(_1: [closure@ui/rfcs/rfc1857-drop-order.rs:209:25: 209:27]) -> () {
    debug cloned => (*(_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>)); // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:208:9: 208:15
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:28: 209:28
    let mut _2: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:13: 211:47
    let mut _3: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
    let mut _4: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
    let _5: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
    let mut _6: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
    let mut _7: PushOnDrop;              // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:13: 212:47
    let mut _8: std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
    let mut _9: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
    let _10: &std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
    let mut _11: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _13: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6
    let mut _14: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>; // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6

    bb0: {
        _13 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
        _6 = _13;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
        _5 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _6) -> bb1; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
        _3 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _4) -> bb2; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:32: 211:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:211:39: 211:44
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = PushOnDrop::new(const 2_u32, move _3) -> bb3; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:211:13: 211:47
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:211:13: 211:28
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = deref_copy (_1.0: &std::panic::AssertUnwindSafe<std::rc::Rc<std::cell::RefCell<std::vec::Vec<u32>>>>); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
        _11 = _14;                       // scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
        _10 = <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref(move _11) -> [return: bb4, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
                                         // + literal: Const { ty: for<'a> fn(&'a AssertUnwindSafe<Rc<RefCell<Vec<u32>>>>) -> &'a <AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::Target {<AssertUnwindSafe<Rc<RefCell<Vec<u32>>>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = _10;                        // scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
        _8 = <Rc<RefCell<Vec<u32>>> as Clone>::clone(move _9) -> [return: bb5, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:32: 212:46
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:212:39: 212:44
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<RefCell<Vec<u32>>>) -> Rc<RefCell<Vec<u32>>> {<Rc<RefCell<Vec<u32>>> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = PushOnDrop::new(const 1_u32, move _8) -> [return: bb6, unwind: bb8]; // scope 0 at ui/rfcs/rfc1857-drop-order.rs:212:13: 212:47
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:212:13: 212:28
                                         // + literal: Const { ty: fn(u32, Rc<RefCell<Vec<u32>>>) -> PushOnDrop {PushOnDrop::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = begin_panic::<&str>(const "this panic is caught :D") -> bb7; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:213:20: 213:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:214:9: 214:10
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 0 at ui/rfcs/rfc1857-drop-order.rs:214:9: 214:10
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:209:25: 215:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:219:11: 219:11
    let _1: ();                          // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:220:5: 220:22
    let _2: ();                          // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:221:5: 221:23
    let _3: ();                          // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:222:5: 222:21
    let _4: ();                          // in scope 0 at ui/rfcs/rfc1857-drop-order.rs:223:5: 223:21

    bb0: {
        _1 = test_drop_tuple() -> bb1;   // scope 0 at ui/rfcs/rfc1857-drop-order.rs:220:5: 220:22
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:220:5: 220:20
                                         // + literal: Const { ty: fn() {test_drop_tuple}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_drop_struct() -> bb2;  // scope 0 at ui/rfcs/rfc1857-drop-order.rs:221:5: 221:23
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:221:5: 221:21
                                         // + literal: Const { ty: fn() {test_drop_struct}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = test_drop_enum() -> bb3;    // scope 0 at ui/rfcs/rfc1857-drop-order.rs:222:5: 222:21
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:222:5: 222:19
                                         // + literal: Const { ty: fn() {test_drop_enum}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = test_drop_list() -> bb4;    // scope 0 at ui/rfcs/rfc1857-drop-order.rs:223:5: 223:21
                                         // mir::Constant
                                         // + span: ui/rfcs/rfc1857-drop-order.rs:223:5: 223:19
                                         // + literal: Const { ty: fn() {test_drop_list}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:224:2: 224:2
    }
}

fn TestTupleStruct(_1: PushOnDrop, _2: PushOnDrop, _3: PushOnDrop) -> TestTupleStruct {
    let mut _0: TestTupleStruct;         // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:38:1: 38:23

    bb0: {
        _0 = TestTupleStruct(move _1, move _2, move _3); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:38:1: 38:23
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:38:1: 38:23
    }
}

// MIR FOR CTFE
fn TestTupleStruct(_1: PushOnDrop, _2: PushOnDrop, _3: PushOnDrop) -> TestTupleStruct {
    let mut _0: TestTupleStruct;         // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:38:1: 38:23

    bb0: {
        _0 = TestTupleStruct(move _1, move _2, move _3); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:38:1: 38:23
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:38:1: 38:23
    }
}

fn TestEnum::Tuple(_1: PushOnDrop, _2: PushOnDrop, _3: PushOnDrop) -> TestEnum {
    let mut _0: TestEnum;                // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:42:5: 42:10

    bb0: {
        _0 = TestEnum::Tuple(move _1, move _2, move _3); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:42:5: 42:10
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:42:5: 42:10
    }
}

// MIR FOR CTFE
fn TestEnum::Tuple(_1: PushOnDrop, _2: PushOnDrop, _3: PushOnDrop) -> TestEnum {
    let mut _0: TestEnum;                // return place in scope 0 at ui/rfcs/rfc1857-drop-order.rs:42:5: 42:10

    bb0: {
        _0 = TestEnum::Tuple(move _1, move _2, move _3); // scope 0 at ui/rfcs/rfc1857-drop-order.rs:42:5: 42:10
        return;                          // scope 0 at ui/rfcs/rfc1857-drop-order.rs:42:5: 42:10
    }
}
