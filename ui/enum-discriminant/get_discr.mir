// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
X1::_1::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

X2::_1::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -1_i8;
        return;
    }
}

X2::_2::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 0_i8;
        return;
    }
}

X2::_3::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 1_i8;
        return;
    }
}

X3::_1::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const i8::MIN;
        return;
    }
}

X4::_1::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -126_i8;
        return;
    }
}

fn match_e(_1: E<X>) -> u8 {
    debug e => _1;
    let mut _0: u8;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const 2_u8;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 0_u8;
        goto -> bb5;
    }

    bb4: {
        _0 = const 1_u8;
        goto -> bb5;
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: E<X1>;
    let mut _5: X1;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: u8;
    let mut _18: E<X1>;
    let mut _19: X1;
    let _20: &u8;
    let _21: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u8, &u8);
    let mut _30: &u8;
    let _31: u8;
    let mut _32: E<X1>;
    let mut _33: X1;
    let _34: &u8;
    let _35: &u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&u8, &u8);
    let mut _44: &u8;
    let _45: u8;
    let mut _46: E<X1>;
    let _47: &u8;
    let _48: &u8;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: u8;
    let mut _52: u8;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&u8, &u8);
    let mut _57: &u8;
    let _58: u8;
    let mut _59: E<X1>;
    let _60: &u8;
    let _61: &u8;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: u8;
    let mut _65: u8;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: (&u8, &u8);
    let mut _70: &u8;
    let _71: u8;
    let mut _72: E<X2>;
    let mut _73: X2;
    let _74: &u8;
    let _75: &u8;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: u8;
    let mut _79: u8;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: (&u8, &u8);
    let mut _84: &u8;
    let _85: u8;
    let mut _86: E<X2>;
    let mut _87: X2;
    let _88: &u8;
    let _89: &u8;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: u8;
    let mut _93: u8;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&u8, &u8);
    let mut _98: &u8;
    let _99: u8;
    let mut _100: E<X2>;
    let mut _101: X2;
    let _102: &u8;
    let _103: &u8;
    let mut _104: bool;
    let mut _105: bool;
    let mut _106: u8;
    let mut _107: u8;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&u8, &u8);
    let mut _112: &u8;
    let _113: u8;
    let mut _114: E<X2>;
    let _115: &u8;
    let _116: &u8;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: u8;
    let mut _120: u8;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&u8, &u8);
    let mut _125: &u8;
    let _126: u8;
    let mut _127: E<X2>;
    let _128: &u8;
    let _129: &u8;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: u8;
    let mut _133: u8;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: (&u8, &u8);
    let mut _138: &u8;
    let _139: u8;
    let mut _140: E<X3>;
    let mut _141: X3;
    let _142: &u8;
    let _143: &u8;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: u8;
    let mut _147: u8;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: (&u8, &u8);
    let mut _152: &u8;
    let _153: u8;
    let mut _154: E<X3>;
    let mut _155: X3;
    let _156: &u8;
    let _157: &u8;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: u8;
    let mut _161: u8;
    let _163: !;
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _165: (&u8, &u8);
    let mut _166: &u8;
    let _167: u8;
    let mut _168: E<X3>;
    let mut _169: X3;
    let _170: &u8;
    let _171: &u8;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: u8;
    let mut _175: u8;
    let _177: !;
    let mut _178: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _179: (&u8, &u8);
    let mut _180: &u8;
    let _181: u8;
    let mut _182: E<X3>;
    let _183: &u8;
    let _184: &u8;
    let mut _185: bool;
    let mut _186: bool;
    let mut _187: u8;
    let mut _188: u8;
    let _190: !;
    let mut _191: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: (&u8, &u8);
    let mut _193: &u8;
    let _194: u8;
    let mut _195: E<X3>;
    let _196: &u8;
    let _197: &u8;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: u8;
    let mut _201: u8;
    let _203: !;
    let mut _204: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _205: (&u8, &u8);
    let mut _206: &u8;
    let _207: u8;
    let mut _208: E<X4>;
    let mut _209: X4;
    let _210: &u8;
    let _211: &u8;
    let mut _212: bool;
    let mut _213: bool;
    let mut _214: u8;
    let mut _215: u8;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _219: (&u8, &u8);
    let mut _220: &u8;
    let _221: u8;
    let mut _222: E<X4>;
    let mut _223: X4;
    let _224: &u8;
    let _225: &u8;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: u8;
    let mut _229: u8;
    let _231: !;
    let mut _232: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _233: (&u8, &u8);
    let mut _234: &u8;
    let _235: u8;
    let mut _236: E<X4>;
    let mut _237: X4;
    let _238: &u8;
    let _239: &u8;
    let mut _240: bool;
    let mut _241: bool;
    let mut _242: u8;
    let mut _243: u8;
    let _245: !;
    let mut _246: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _247: (&u8, &u8);
    let mut _248: &u8;
    let _249: u8;
    let mut _250: E<X4>;
    let _251: &u8;
    let _252: &u8;
    let mut _253: bool;
    let mut _254: bool;
    let mut _255: u8;
    let mut _256: u8;
    let _258: !;
    let mut _259: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _260: (&u8, &u8);
    let mut _261: &u8;
    let _262: u8;
    let mut _263: E<X4>;
    let _264: &u8;
    let _265: &u8;
    let mut _266: bool;
    let mut _267: bool;
    let mut _268: u8;
    let mut _269: u8;
    let _271: !;
    let mut _272: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _273: (&u8, &u8);
    let mut _274: &u8;
    let _275: u8;
    let mut _276: E<bool>;
    let _277: &u8;
    let _278: &u8;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: u8;
    let mut _282: u8;
    let _284: !;
    let mut _285: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _286: (&u8, &u8);
    let mut _287: &u8;
    let _288: u8;
    let mut _289: E<bool>;
    let _290: &u8;
    let _291: &u8;
    let mut _292: bool;
    let mut _293: bool;
    let mut _294: u8;
    let mut _295: u8;
    let _297: !;
    let mut _298: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _299: (&u8, &u8);
    let mut _300: &u8;
    let _301: u8;
    let mut _302: E<bool>;
    let _303: &u8;
    let _304: &u8;
    let mut _305: bool;
    let mut _306: bool;
    let mut _307: u8;
    let mut _308: u8;
    let _310: !;
    let mut _311: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _312: (&u8, &u8);
    let mut _313: &u8;
    let _314: u8;
    let mut _315: E<bool>;
    let _316: &u8;
    let _317: &u8;
    let mut _318: bool;
    let mut _319: bool;
    let mut _320: u8;
    let mut _321: u8;
    let _323: !;
    let mut _324: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _325: &u8;
    let mut _326: &u8;
    let mut _327: &u8;
    let mut _328: &u8;
    let mut _329: &u8;
    let mut _330: &u8;
    let mut _331: &u8;
    let mut _332: &u8;
    let mut _333: &u8;
    let mut _334: &u8;
    let mut _335: &u8;
    let mut _336: &u8;
    let mut _337: &u8;
    let mut _338: &u8;
    let mut _339: &u8;
    let mut _340: &u8;
    let mut _341: &u8;
    let mut _342: &u8;
    let mut _343: &u8;
    let mut _344: &u8;
    let mut _345: &u8;
    let mut _346: &u8;
    let mut _347: &u8;
    let mut _348: &u8;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _47;
        debug right_val => _48;
        let _53: core::panicking::AssertKind;
        scope 8 {
            debug kind => _53;
        }
    }
    scope 9 {
        debug left_val => _60;
        debug right_val => _61;
        let _66: core::panicking::AssertKind;
        scope 10 {
            debug kind => _66;
        }
    }
    scope 11 {
        debug left_val => _74;
        debug right_val => _75;
        let _80: core::panicking::AssertKind;
        scope 12 {
            debug kind => _80;
        }
    }
    scope 13 {
        debug left_val => _88;
        debug right_val => _89;
        let _94: core::panicking::AssertKind;
        scope 14 {
            debug kind => _94;
        }
    }
    scope 15 {
        debug left_val => _102;
        debug right_val => _103;
        let _108: core::panicking::AssertKind;
        scope 16 {
            debug kind => _108;
        }
    }
    scope 17 {
        debug left_val => _115;
        debug right_val => _116;
        let _121: core::panicking::AssertKind;
        scope 18 {
            debug kind => _121;
        }
    }
    scope 19 {
        debug left_val => _128;
        debug right_val => _129;
        let _134: core::panicking::AssertKind;
        scope 20 {
            debug kind => _134;
        }
    }
    scope 21 {
        debug left_val => _142;
        debug right_val => _143;
        let _148: core::panicking::AssertKind;
        scope 22 {
            debug kind => _148;
        }
    }
    scope 23 {
        debug left_val => _156;
        debug right_val => _157;
        let _162: core::panicking::AssertKind;
        scope 24 {
            debug kind => _162;
        }
    }
    scope 25 {
        debug left_val => _170;
        debug right_val => _171;
        let _176: core::panicking::AssertKind;
        scope 26 {
            debug kind => _176;
        }
    }
    scope 27 {
        debug left_val => _183;
        debug right_val => _184;
        let _189: core::panicking::AssertKind;
        scope 28 {
            debug kind => _189;
        }
    }
    scope 29 {
        debug left_val => _196;
        debug right_val => _197;
        let _202: core::panicking::AssertKind;
        scope 30 {
            debug kind => _202;
        }
    }
    scope 31 {
        debug left_val => _210;
        debug right_val => _211;
        let _216: core::panicking::AssertKind;
        scope 32 {
            debug kind => _216;
        }
    }
    scope 33 {
        debug left_val => _224;
        debug right_val => _225;
        let _230: core::panicking::AssertKind;
        scope 34 {
            debug kind => _230;
        }
    }
    scope 35 {
        debug left_val => _238;
        debug right_val => _239;
        let _244: core::panicking::AssertKind;
        scope 36 {
            debug kind => _244;
        }
    }
    scope 37 {
        debug left_val => _251;
        debug right_val => _252;
        let _257: core::panicking::AssertKind;
        scope 38 {
            debug kind => _257;
        }
    }
    scope 39 {
        debug left_val => _264;
        debug right_val => _265;
        let _270: core::panicking::AssertKind;
        scope 40 {
            debug kind => _270;
        }
    }
    scope 41 {
        debug left_val => _277;
        debug right_val => _278;
        let _283: core::panicking::AssertKind;
        scope 42 {
            debug kind => _283;
        }
    }
    scope 43 {
        debug left_val => _290;
        debug right_val => _291;
        let _296: core::panicking::AssertKind;
        scope 44 {
            debug kind => _296;
        }
    }
    scope 45 {
        debug left_val => _303;
        debug right_val => _304;
        let _309: core::panicking::AssertKind;
        scope 46 {
            debug kind => _309;
        }
    }
    scope 47 {
        debug left_val => _316;
        debug right_val => _317;
        let _322: core::panicking::AssertKind;
        scope 48 {
            debug kind => _322;
        }
    }

    bb0: {
        _5 = X1::_1;
        _4 = E::<X1>::A(move _5);
        _3 = match_e::<X1>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _348 = const _;
        _1 = (move _2, _348);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _19 = X1::_2;
        _18 = E::<X1>::A(move _19);
        _17 = match_e::<X1>(move _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_17;
        _347 = const _;
        _15 = (move _16, _347);
        _20 = (_15.0: &u8);
        _21 = (_15.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb6: {
        _33 = X1::_254;
        _32 = E::<X1>::A(move _33);
        _31 = match_e::<X1>(move _32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _30 = &_31;
        _346 = const _;
        _29 = (move _30, _346);
        _34 = (_29.0: &u8);
        _35 = (_29.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb9: {
        _46 = E::<X1>::B;
        _45 = match_e::<X1>(move _46) -> [return: bb10, unwind continue];
    }

    bb10: {
        _44 = &_45;
        _345 = const _;
        _43 = (move _44, _345);
        _47 = (_43.0: &u8);
        _48 = (_43.1: &u8);
        _51 = (*_47);
        _52 = (*_48);
        _50 = Eq(move _51, move _52);
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<u8, u8>(move _53, _47, _48, move _55) -> unwind continue;
    }

    bb12: {
        _59 = E::<X1>::C;
        _58 = match_e::<X1>(move _59) -> [return: bb13, unwind continue];
    }

    bb13: {
        _57 = &_58;
        _344 = const _;
        _56 = (move _57, _344);
        _60 = (_56.0: &u8);
        _61 = (_56.1: &u8);
        _64 = (*_60);
        _65 = (*_61);
        _63 = Eq(move _64, move _65);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<u8, u8>(move _66, _60, _61, move _68) -> unwind continue;
    }

    bb15: {
        _73 = X2::_1;
        _72 = E::<X2>::A(move _73);
        _71 = match_e::<X2>(move _72) -> [return: bb16, unwind continue];
    }

    bb16: {
        _70 = &_71;
        _343 = const _;
        _69 = (move _70, _343);
        _74 = (_69.0: &u8);
        _75 = (_69.1: &u8);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<u8, u8>(move _80, _74, _75, move _82) -> unwind continue;
    }

    bb18: {
        _87 = X2::_2;
        _86 = E::<X2>::A(move _87);
        _85 = match_e::<X2>(move _86) -> [return: bb19, unwind continue];
    }

    bb19: {
        _84 = &_85;
        _342 = const _;
        _83 = (move _84, _342);
        _88 = (_83.0: &u8);
        _89 = (_83.1: &u8);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<u8, u8>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb21: {
        _101 = X2::_3;
        _100 = E::<X2>::A(move _101);
        _99 = match_e::<X2>(move _100) -> [return: bb22, unwind continue];
    }

    bb22: {
        _98 = &_99;
        _341 = const _;
        _97 = (move _98, _341);
        _102 = (_97.0: &u8);
        _103 = (_97.1: &u8);
        _106 = (*_102);
        _107 = (*_103);
        _105 = Eq(move _106, move _107);
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<u8, u8>(move _108, _102, _103, move _110) -> unwind continue;
    }

    bb24: {
        _114 = E::<X2>::B;
        _113 = match_e::<X2>(move _114) -> [return: bb25, unwind continue];
    }

    bb25: {
        _112 = &_113;
        _340 = const _;
        _111 = (move _112, _340);
        _115 = (_111.0: &u8);
        _116 = (_111.1: &u8);
        _119 = (*_115);
        _120 = (*_116);
        _118 = Eq(move _119, move _120);
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<u8, u8>(move _121, _115, _116, move _123) -> unwind continue;
    }

    bb27: {
        _127 = E::<X2>::C;
        _126 = match_e::<X2>(move _127) -> [return: bb28, unwind continue];
    }

    bb28: {
        _125 = &_126;
        _339 = const _;
        _124 = (move _125, _339);
        _128 = (_124.0: &u8);
        _129 = (_124.1: &u8);
        _132 = (*_128);
        _133 = (*_129);
        _131 = Eq(move _132, move _133);
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = core::panicking::assert_failed::<u8, u8>(move _134, _128, _129, move _136) -> unwind continue;
    }

    bb30: {
        _141 = X3::_1;
        _140 = E::<X3>::A(move _141);
        _139 = match_e::<X3>(move _140) -> [return: bb31, unwind continue];
    }

    bb31: {
        _138 = &_139;
        _338 = const _;
        _137 = (move _138, _338);
        _142 = (_137.0: &u8);
        _143 = (_137.1: &u8);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = core::panicking::assert_failed::<u8, u8>(move _148, _142, _143, move _150) -> unwind continue;
    }

    bb33: {
        _155 = X3::_2;
        _154 = E::<X3>::A(move _155);
        _153 = match_e::<X3>(move _154) -> [return: bb34, unwind continue];
    }

    bb34: {
        _152 = &_153;
        _337 = const _;
        _151 = (move _152, _337);
        _156 = (_151.0: &u8);
        _157 = (_151.1: &u8);
        _160 = (*_156);
        _161 = (*_157);
        _159 = Eq(move _160, move _161);
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _162 = core::panicking::AssertKind::Eq;
        _164 = Option::<Arguments<'_>>::None;
        _163 = core::panicking::assert_failed::<u8, u8>(move _162, _156, _157, move _164) -> unwind continue;
    }

    bb36: {
        _169 = X3::_254;
        _168 = E::<X3>::A(move _169);
        _167 = match_e::<X3>(move _168) -> [return: bb37, unwind continue];
    }

    bb37: {
        _166 = &_167;
        _336 = const _;
        _165 = (move _166, _336);
        _170 = (_165.0: &u8);
        _171 = (_165.1: &u8);
        _174 = (*_170);
        _175 = (*_171);
        _173 = Eq(move _174, move _175);
        _172 = Not(move _173);
        switchInt(move _172) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _176 = core::panicking::AssertKind::Eq;
        _178 = Option::<Arguments<'_>>::None;
        _177 = core::panicking::assert_failed::<u8, u8>(move _176, _170, _171, move _178) -> unwind continue;
    }

    bb39: {
        _182 = E::<X3>::B;
        _181 = match_e::<X3>(move _182) -> [return: bb40, unwind continue];
    }

    bb40: {
        _180 = &_181;
        _335 = const _;
        _179 = (move _180, _335);
        _183 = (_179.0: &u8);
        _184 = (_179.1: &u8);
        _187 = (*_183);
        _188 = (*_184);
        _186 = Eq(move _187, move _188);
        _185 = Not(move _186);
        switchInt(move _185) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _189 = core::panicking::AssertKind::Eq;
        _191 = Option::<Arguments<'_>>::None;
        _190 = core::panicking::assert_failed::<u8, u8>(move _189, _183, _184, move _191) -> unwind continue;
    }

    bb42: {
        _195 = E::<X3>::C;
        _194 = match_e::<X3>(move _195) -> [return: bb43, unwind continue];
    }

    bb43: {
        _193 = &_194;
        _334 = const _;
        _192 = (move _193, _334);
        _196 = (_192.0: &u8);
        _197 = (_192.1: &u8);
        _200 = (*_196);
        _201 = (*_197);
        _199 = Eq(move _200, move _201);
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _202 = core::panicking::AssertKind::Eq;
        _204 = Option::<Arguments<'_>>::None;
        _203 = core::panicking::assert_failed::<u8, u8>(move _202, _196, _197, move _204) -> unwind continue;
    }

    bb45: {
        _209 = X4::_1;
        _208 = E::<X4>::A(move _209);
        _207 = match_e::<X4>(move _208) -> [return: bb46, unwind continue];
    }

    bb46: {
        _206 = &_207;
        _333 = const _;
        _205 = (move _206, _333);
        _210 = (_205.0: &u8);
        _211 = (_205.1: &u8);
        _214 = (*_210);
        _215 = (*_211);
        _213 = Eq(move _214, move _215);
        _212 = Not(move _213);
        switchInt(move _212) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<u8, u8>(move _216, _210, _211, move _218) -> unwind continue;
    }

    bb48: {
        _223 = X4::_2;
        _222 = E::<X4>::A(move _223);
        _221 = match_e::<X4>(move _222) -> [return: bb49, unwind continue];
    }

    bb49: {
        _220 = &_221;
        _332 = const _;
        _219 = (move _220, _332);
        _224 = (_219.0: &u8);
        _225 = (_219.1: &u8);
        _228 = (*_224);
        _229 = (*_225);
        _227 = Eq(move _228, move _229);
        _226 = Not(move _227);
        switchInt(move _226) -> [0: bb51, otherwise: bb50];
    }

    bb50: {
        _230 = core::panicking::AssertKind::Eq;
        _232 = Option::<Arguments<'_>>::None;
        _231 = core::panicking::assert_failed::<u8, u8>(move _230, _224, _225, move _232) -> unwind continue;
    }

    bb51: {
        _237 = X4::_254;
        _236 = E::<X4>::A(move _237);
        _235 = match_e::<X4>(move _236) -> [return: bb52, unwind continue];
    }

    bb52: {
        _234 = &_235;
        _331 = const _;
        _233 = (move _234, _331);
        _238 = (_233.0: &u8);
        _239 = (_233.1: &u8);
        _242 = (*_238);
        _243 = (*_239);
        _241 = Eq(move _242, move _243);
        _240 = Not(move _241);
        switchInt(move _240) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _244 = core::panicking::AssertKind::Eq;
        _246 = Option::<Arguments<'_>>::None;
        _245 = core::panicking::assert_failed::<u8, u8>(move _244, _238, _239, move _246) -> unwind continue;
    }

    bb54: {
        _250 = E::<X4>::B;
        _249 = match_e::<X4>(move _250) -> [return: bb55, unwind continue];
    }

    bb55: {
        _248 = &_249;
        _330 = const _;
        _247 = (move _248, _330);
        _251 = (_247.0: &u8);
        _252 = (_247.1: &u8);
        _255 = (*_251);
        _256 = (*_252);
        _254 = Eq(move _255, move _256);
        _253 = Not(move _254);
        switchInt(move _253) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _257 = core::panicking::AssertKind::Eq;
        _259 = Option::<Arguments<'_>>::None;
        _258 = core::panicking::assert_failed::<u8, u8>(move _257, _251, _252, move _259) -> unwind continue;
    }

    bb57: {
        _263 = E::<X4>::C;
        _262 = match_e::<X4>(move _263) -> [return: bb58, unwind continue];
    }

    bb58: {
        _261 = &_262;
        _329 = const _;
        _260 = (move _261, _329);
        _264 = (_260.0: &u8);
        _265 = (_260.1: &u8);
        _268 = (*_264);
        _269 = (*_265);
        _267 = Eq(move _268, move _269);
        _266 = Not(move _267);
        switchInt(move _266) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _270 = core::panicking::AssertKind::Eq;
        _272 = Option::<Arguments<'_>>::None;
        _271 = core::panicking::assert_failed::<u8, u8>(move _270, _264, _265, move _272) -> unwind continue;
    }

    bb60: {
        _276 = E::<bool>::A(const false);
        _275 = match_e::<bool>(move _276) -> [return: bb61, unwind continue];
    }

    bb61: {
        _274 = &_275;
        _328 = const _;
        _273 = (move _274, _328);
        _277 = (_273.0: &u8);
        _278 = (_273.1: &u8);
        _281 = (*_277);
        _282 = (*_278);
        _280 = Eq(move _281, move _282);
        _279 = Not(move _280);
        switchInt(move _279) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _283 = core::panicking::AssertKind::Eq;
        _285 = Option::<Arguments<'_>>::None;
        _284 = core::panicking::assert_failed::<u8, u8>(move _283, _277, _278, move _285) -> unwind continue;
    }

    bb63: {
        _289 = E::<bool>::A(const true);
        _288 = match_e::<bool>(move _289) -> [return: bb64, unwind continue];
    }

    bb64: {
        _287 = &_288;
        _327 = const _;
        _286 = (move _287, _327);
        _290 = (_286.0: &u8);
        _291 = (_286.1: &u8);
        _294 = (*_290);
        _295 = (*_291);
        _293 = Eq(move _294, move _295);
        _292 = Not(move _293);
        switchInt(move _292) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _296 = core::panicking::AssertKind::Eq;
        _298 = Option::<Arguments<'_>>::None;
        _297 = core::panicking::assert_failed::<u8, u8>(move _296, _290, _291, move _298) -> unwind continue;
    }

    bb66: {
        _302 = E::<bool>::B;
        _301 = match_e::<bool>(move _302) -> [return: bb67, unwind continue];
    }

    bb67: {
        _300 = &_301;
        _326 = const _;
        _299 = (move _300, _326);
        _303 = (_299.0: &u8);
        _304 = (_299.1: &u8);
        _307 = (*_303);
        _308 = (*_304);
        _306 = Eq(move _307, move _308);
        _305 = Not(move _306);
        switchInt(move _305) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _309 = core::panicking::AssertKind::Eq;
        _311 = Option::<Arguments<'_>>::None;
        _310 = core::panicking::assert_failed::<u8, u8>(move _309, _303, _304, move _311) -> unwind continue;
    }

    bb69: {
        _315 = E::<bool>::C;
        _314 = match_e::<bool>(move _315) -> [return: bb70, unwind continue];
    }

    bb70: {
        _313 = &_314;
        _325 = const _;
        _312 = (move _313, _325);
        _316 = (_312.0: &u8);
        _317 = (_312.1: &u8);
        _320 = (*_316);
        _321 = (*_317);
        _319 = Eq(move _320, move _321);
        _318 = Not(move _319);
        switchInt(move _318) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _322 = core::panicking::AssertKind::Eq;
        _324 = Option::<Arguments<'_>>::None;
        _323 = core::panicking::assert_failed::<u8, u8>(move _322, _316, _317, move _324) -> unwind continue;
    }

    bb72: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

fn E::A(_1: X) -> E<X> {
    let mut _0: E<X>;

    bb0: {
        _0 = E::<X>::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::A(_1: X) -> E<X> {
    let mut _0: E<X>;

    bb0: {
        _0 = E::<X>::A(move _1);
        return;
    }
}
