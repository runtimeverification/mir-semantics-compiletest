// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
TransportErr::UnknownMethod::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:12:21: 12:23

    bb0: {
        _0 = const -2_i32;               // scope 0 at ui/enum-discriminant/issue-104519.rs:12:21: 12:23
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:12:21: 12:23
    }
}

fn some_match(_1: OpenResult) -> u8 {
    debug result => _1;                  // in scope 0 at ui/enum-discriminant/issue-104519.rs:16:15: 16:21
    let mut _0: u8;                      // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:16:38: 16:40
    let mut _2: isize;                   // in scope 0 at ui/enum-discriminant/issue-104519.rs:18:9: 18:27

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/enum-discriminant/issue-104519.rs:17:11: 17:17
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/enum-discriminant/issue-104519.rs:17:5: 17:17
    }

    bb1: {
        _0 = const 1_u8;                 // scope 0 at ui/enum-discriminant/issue-104519.rs:19:14: 19:15
        goto -> bb3;                     // scope 0 at ui/enum-discriminant/issue-104519.rs:19:14: 19:15
    }

    bb2: {
        _0 = const 0_u8;                 // scope 0 at ui/enum-discriminant/issue-104519.rs:18:31: 18:32
        goto -> bb3;                     // scope 0 at ui/enum-discriminant/issue-104519.rs:18:31: 18:32
    }

    bb3: {
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:21:2: 21:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:23:11: 23:11
    let _1: OpenResult;                  // in scope 0 at ui/enum-discriminant/issue-104519.rs:24:9: 24:15
    let mut _2: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: u8;                          // in scope 0 at ui/enum-discriminant/issue-104519.rs:25:16: 25:34
    let mut _5: OpenResult;              // in scope 0 at ui/enum-discriminant/issue-104519.rs:25:27: 25:33
    let mut _6: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: isize;                  // in scope 0 at ui/enum-discriminant/issue-104519.rs:33:9: 33:27
    let mut _23: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:9: 73:54
    let mut _24: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
    let _25: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
    scope 1 {
        debug result => _1;              // in scope 1 at ui/enum-discriminant/issue-104519.rs:24:9: 24:15
        let _7: &u8;                     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &u8;                     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _21: OpenResult;             // in scope 1 at ui/enum-discriminant/issue-104519.rs:27:9: 27:15
        let mut _27: &u8;                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug result => _21;         // in scope 4 at ui/enum-discriminant/issue-104519.rs:27:9: 27:15
            let mut _26: &&str;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
        }
    }

    bb0: {
        _1 = const OpenResult::Ok(());   // scope 0 at ui/enum-discriminant/issue-104519.rs:24:18: 24:36
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-104519.rs:24:18: 24:36
                                         // + literal: Const { ty: OpenResult, val: Value(Scalar(0xffffffff)) }
        _5 = const OpenResult::Ok(());   // scope 1 at ui/enum-discriminant/issue-104519.rs:25:27: 25:33
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-104519.rs:25:27: 25:33
                                         // + literal: Const { ty: OpenResult, val: Value(Scalar(0xffffffff)) }
        _4 = some_match(move _5) -> bb1; // scope 1 at ui/enum-discriminant/issue-104519.rs:25:16: 25:34
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-104519.rs:25:16: 25:26
                                         // + literal: Const { ty: fn(OpenResult) -> u8 {some_match}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[2])) }
        _6 = _27;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &u8);                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &u8);                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 0_u8;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<u8, u8>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = const OpenResult::Ok(());  // scope 1 at ui/enum-discriminant/issue-104519.rs:27:18: 27:36
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-104519.rs:27:18: 27:36
                                         // + literal: Const { ty: OpenResult, val: Value(Scalar(0xffffffff)) }
        _22 = discriminant(_21);         // scope 4 at ui/enum-discriminant/issue-104519.rs:32:11: 32:17
        switchInt(move _22) -> [0: bb5, otherwise: bb4]; // scope 4 at ui/enum-discriminant/issue-104519.rs:32:5: 32:17
    }

    bb4: {
        _26 = const _;                   // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
        _23 = core::panicking::unreachable_display::<&str>(move _24); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:9: 73:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:9: 73:47
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> ! {core::panicking::unreachable_display::<&str>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:36:2: 36:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
    let mut _1: &str;                    // in scope 0 at ui/enum-discriminant/issue-104519.rs:34:27: 34:38

    bb0: {
        _1 = const "message b";          // scope 0 at ui/enum-discriminant/issue-104519.rs:34:27: 34:38
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-104519.rs:34:27: 34:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
    let mut _1: &str;                    // in scope 0 at ui/enum-discriminant/issue-104519.rs:30:27: 30:38

    bb0: {
        _1 = const "message a";          // scope 0 at ui/enum-discriminant/issue-104519.rs:30:27: 30:38
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-104519.rs:30:27: 30:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:73:48: 73:53
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/enum-discriminant/issue-104519.rs:25:36: 25:37

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/enum-discriminant/issue-104519.rs:25:36: 25:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn OpenResult::Ok(_1: ()) -> OpenResult {
    let mut _0: OpenResult;              // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:5:5: 5:7

    bb0: {
        _0 = OpenResult::Ok(move _1);    // scope 0 at ui/enum-discriminant/issue-104519.rs:5:5: 5:7
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:5:5: 5:7
    }
}

// MIR FOR CTFE
fn OpenResult::Ok(_1: ()) -> OpenResult {
    let mut _0: OpenResult;              // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:5:5: 5:7

    bb0: {
        _0 = OpenResult::Ok(move _1);    // scope 0 at ui/enum-discriminant/issue-104519.rs:5:5: 5:7
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:5:5: 5:7
    }
}

fn OpenResult::Err(_1: ()) -> OpenResult {
    let mut _0: OpenResult;              // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:6:5: 6:8

    bb0: {
        _0 = OpenResult::Err(move _1);   // scope 0 at ui/enum-discriminant/issue-104519.rs:6:5: 6:8
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:6:5: 6:8
    }
}

// MIR FOR CTFE
fn OpenResult::Err(_1: ()) -> OpenResult {
    let mut _0: OpenResult;              // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:6:5: 6:8

    bb0: {
        _0 = OpenResult::Err(move _1);   // scope 0 at ui/enum-discriminant/issue-104519.rs:6:5: 6:8
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:6:5: 6:8
    }
}

fn OpenResult::TransportErr(_1: TransportErr) -> OpenResult {
    let mut _0: OpenResult;              // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:7:5: 7:17

    bb0: {
        _0 = OpenResult::TransportErr(move _1); // scope 0 at ui/enum-discriminant/issue-104519.rs:7:5: 7:17
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:7:5: 7:17
    }
}

// MIR FOR CTFE
fn OpenResult::TransportErr(_1: TransportErr) -> OpenResult {
    let mut _0: OpenResult;              // return place in scope 0 at ui/enum-discriminant/issue-104519.rs:7:5: 7:17

    bb0: {
        _0 = OpenResult::TransportErr(move _1); // scope 0 at ui/enum-discriminant/issue-104519.rs:7:5: 7:17
        return;                          // scope 0 at ui/enum-discriminant/issue-104519.rs:7:5: 7:17
    }
}
