// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Size::One::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

Size::Two::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 2_u8;
        return;
    }
}

Size::Three::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 3_u8;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: std::option::Option<Size>;
    let _5: &u8;
    let _6: &u8;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u8;
    let mut _10: u8;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &u8;
    scope 1 {
    }
    scope 2 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 3 {
            debug kind => _11;
        }
    }

    bb0: {
        _14 = const _;
        _4 = Option::<Size>::None;
        _3 = move _4 as u8 (Transmute);
        _2 = &_3;
        _1 = (_14, move _2);
        _5 = (_1.0: &u8);
        _6 = (_1.1: &u8);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u8, u8>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}
