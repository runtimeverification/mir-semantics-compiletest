// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn make_b() -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::VariantB;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&i8, &i8);
    let mut _2: &i8;
    let _3: i8;
    let _4: Enum;
    let mut _5: i8;
    let mut _6: u8;
    let mut _7: bool;
    let _8: &i8;
    let _9: &i8;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i8;
    let mut _13: i8;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&u8, &u8);
    let mut _18: &u8;
    let _19: u8;
    let _20: Enum;
    let mut _21: i8;
    let mut _22: u8;
    let mut _23: bool;
    let _24: &u8;
    let _25: &u8;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: u8;
    let mut _29: u8;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&i32, &i32);
    let mut _34: &i32;
    let _35: i32;
    let _36: Enum;
    let mut _37: i8;
    let mut _38: u8;
    let mut _39: bool;
    let _40: &i32;
    let _41: &i32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: i32;
    let mut _45: i32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&u32, &u32);
    let mut _50: &u32;
    let _51: u32;
    let _52: Enum;
    let mut _53: i8;
    let mut _54: u8;
    let mut _55: bool;
    let _56: &u32;
    let _57: &u32;
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: u32;
    let mut _61: u32;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&i8, &i8);
    let mut _66: &i8;
    let _67: i8;
    let _68: &Enum;
    let _69: Enum;
    let _70: &i8;
    let _71: &i8;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: i8;
    let mut _75: i8;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: &i8;
    let mut _80: &u32;
    let mut _81: &i32;
    let mut _82: &u8;
    let mut _83: &i8;
    scope 1 {
        debug left_val => _8;
        debug right_val => _9;
        let _14: core::panicking::AssertKind;
        scope 2 {
            debug kind => _14;
        }
    }
    scope 3 {
        debug left_val => _24;
        debug right_val => _25;
        let _30: core::panicking::AssertKind;
        scope 4 {
            debug kind => _30;
        }
    }
    scope 5 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 6 {
            debug kind => _46;
        }
    }
    scope 7 {
        debug left_val => _56;
        debug right_val => _57;
        let _62: core::panicking::AssertKind;
        scope 8 {
            debug kind => _62;
        }
    }
    scope 9 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 10 {
            debug kind => _76;
        }
    }

    bb0: {
        _83 = const _;
        _4 = make_b() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = discriminant(_4);
        _6 = _5 as u8 (IntToInt);
        _7 = Le(_6, const 1_u8);
        assume(move _7);
        _3 = move _5;
        _2 = &_3;
        _1 = (_83, move _2);
        _8 = (_1.0: &i8);
        _9 = (_1.1: &i8);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i8, i8>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _82 = const _;
        _20 = make_b() -> [return: bb4, unwind continue];
    }

    bb4: {
        _21 = discriminant(_20);
        _22 = _21 as u8 (IntToInt);
        _23 = Le(_22, const 1_u8);
        assume(move _23);
        _19 = move _21 as u8 (IntToInt);
        _18 = &_19;
        _17 = (_82, move _18);
        _24 = (_17.0: &u8);
        _25 = (_17.1: &u8);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<u8, u8>(move _30, _24, _25, move _32) -> unwind continue;
    }

    bb6: {
        _81 = const _;
        _36 = make_b() -> [return: bb7, unwind continue];
    }

    bb7: {
        _37 = discriminant(_36);
        _38 = _37 as u8 (IntToInt);
        _39 = Le(_38, const 1_u8);
        assume(move _39);
        _35 = move _37 as i32 (IntToInt);
        _34 = &_35;
        _33 = (_81, move _34);
        _40 = (_33.0: &i32);
        _41 = (_33.1: &i32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<i32, i32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb9: {
        _80 = const _;
        _52 = make_b() -> [return: bb10, unwind continue];
    }

    bb10: {
        _53 = discriminant(_52);
        _54 = _53 as u8 (IntToInt);
        _55 = Le(_54, const 1_u8);
        assume(move _55);
        _51 = move _53 as u32 (IntToInt);
        _50 = &_51;
        _49 = (_80, move _50);
        _56 = (_49.0: &u32);
        _57 = (_49.1: &u32);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<u32, u32>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb12: {
        _79 = const _;
        _69 = make_b() -> [return: bb13, unwind continue];
    }

    bb13: {
        _68 = &_69;
        _67 = discriminant((*_68));
        _66 = &_67;
        _65 = (_79, move _66);
        _70 = (_65.0: &i8);
        _71 = (_65.1: &i8);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<i8, i8>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb15: {
        return;
    }
}

promoted[0] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 1_i8;
        _0 = &_1;
        return;
    }
}
