// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:13:15: 13:15
    let mut _1: bool;                    // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:5: 14:88
    let mut _2: bool;                    // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:87
    let mut _3: &std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:48
    let _4: std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:48
    let mut _5: &ADT;                    // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
    let _6: &ADT;                        // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
    let mut _7: &std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:52: 14:87
    let _8: std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:52: 14:87
    let mut _9: &ADT;                    // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
    let _10: &ADT;                       // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
    let mut _11: !;                      // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:5: 14:88
    let mut _12: bool;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:5: 15:87
    let mut _13: bool;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:86
    let mut _14: &std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:47
    let _15: std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:47
    let mut _16: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
    let _17: &ADT;                       // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
    let mut _18: &std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:52: 15:86
    let _19: std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:52: 15:86
    let mut _20: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
    let _21: &ADT;                       // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
    let mut _22: !;                      // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:5: 15:87
    let mut _23: bool;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:5: 16:87
    let mut _24: bool;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:86
    let mut _25: &std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:48
    let _26: std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:48
    let mut _27: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
    let _28: &ADT;                       // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
    let mut _29: &std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:52: 16:86
    let _30: std::mem::Discriminant<ADT>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:52: 16:86
    let mut _31: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
    let _32: &ADT;                       // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
    let mut _33: !;                      // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:5: 16:87
    let mut _34: std::mem::Discriminant<i32>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:13: 18:35
    let mut _35: &i32;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
    let _36: &i32;                       // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
    let mut _37: std::mem::Discriminant<&str>; // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:13: 19:39
    let mut _38: &&str;                  // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
    let _39: &&str;                      // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
    let mut _41: &i32;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
    let mut _42: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
    let mut _43: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
    let mut _44: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
    let mut _45: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
    let mut _46: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
    let mut _47: &ADT;                   // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
    scope 1 {
        let mut _40: &&str;              // in scope 1 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
        scope 2 {
        }
    }

    bb0: {
        _47 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
                                         // + literal: Const { ty: &ADT, val: Unevaluated(main, [], Some(promoted[7])) }
        _6 = _47;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
        _5 = _6;                         // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
        _4 = discriminant::<ADT>(move _5) -> bb1; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:48
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:30
                                         // + literal: Const { ty: for<'a> fn(&'a ADT) -> Discriminant<ADT> {discriminant::<ADT>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:48
        _46 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
                                         // + literal: Const { ty: &ADT, val: Unevaluated(main, [], Some(promoted[6])) }
        _10 = _46;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
        _9 = _10;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
        _8 = discriminant::<ADT>(move _9) -> bb2; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:52: 14:87
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:14:52: 14:69
                                         // + literal: Const { ty: for<'a> fn(&'a ADT) -> Discriminant<ADT> {discriminant::<ADT>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_8;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:52: 14:87
        _2 = <Discriminant<ADT> as PartialEq>::eq(move _3, move _7) -> bb3; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:87
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:14:13: 14:87
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<ADT>, &'b Discriminant<ADT>) -> bool {<Discriminant<ADT> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Not(move _2);               // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:5: 14:88
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:5: 14:88
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::First(0, 0)) == mem::discriminant(&ADT::First(1, 1))"); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:5: 14:88
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:14:5: 14:88
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _45 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
                                         // + literal: Const { ty: &ADT, val: Unevaluated(main, [], Some(promoted[5])) }
        _17 = _45;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
        _16 = _17;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
        _15 = discriminant::<ADT>(move _16) -> bb6; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:47
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:30
                                         // + literal: Const { ty: for<'a> fn(&'a ADT) -> Discriminant<ADT> {discriminant::<ADT>}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = &_15;                      // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:47
        _44 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
                                         // + literal: Const { ty: &ADT, val: Unevaluated(main, [], Some(promoted[4])) }
        _21 = _44;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
        _20 = _21;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
        _19 = discriminant::<ADT>(move _20) -> bb7; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:52: 15:86
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:15:52: 15:69
                                         // + literal: Const { ty: for<'a> fn(&'a ADT) -> Discriminant<ADT> {discriminant::<ADT>}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = &_19;                      // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:52: 15:86
        _13 = <Discriminant<ADT> as PartialEq>::eq(move _14, move _18) -> bb8; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:86
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:15:13: 15:86
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<ADT>, &'b Discriminant<ADT>) -> bool {<Discriminant<ADT> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = Not(move _13);             // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:5: 15:87
        switchInt(move _12) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:5: 15:87
    }

    bb9: {
        _22 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::Second(5)) == mem::discriminant(&ADT::Second(6))"); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:5: 15:87
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:15:5: 15:87
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _43 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
                                         // + literal: Const { ty: &ADT, val: Unevaluated(main, [], Some(promoted[3])) }
        _28 = _43;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
        _27 = _28;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
        _26 = discriminant::<ADT>(move _27) -> bb11; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:48
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:30
                                         // + literal: Const { ty: for<'a> fn(&'a ADT) -> Discriminant<ADT> {discriminant::<ADT>}, val: Value(<ZST>) }
    }

    bb11: {
        _25 = &_26;                      // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:48
        _42 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
                                         // + literal: Const { ty: &ADT, val: Unevaluated(main, [], Some(promoted[2])) }
        _32 = _42;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
        _31 = _32;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
        _30 = discriminant::<ADT>(move _31) -> bb12; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:52: 16:86
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:16:52: 16:69
                                         // + literal: Const { ty: for<'a> fn(&'a ADT) -> Discriminant<ADT> {discriminant::<ADT>}, val: Value(<ZST>) }
    }

    bb12: {
        _29 = &_30;                      // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:52: 16:86
        _24 = <Discriminant<ADT> as PartialEq>::ne(move _25, move _29) -> bb13; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:86
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:16:13: 16:86
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Discriminant<ADT>, &'b Discriminant<ADT>) -> bool {<Discriminant<ADT> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb13: {
        _23 = Not(move _24);             // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:5: 16:87
        switchInt(move _23) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:5: 16:87
    }

    bb14: {
        _33 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::First(2, 2)) != mem::discriminant(&ADT::Second(2))"); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:5: 16:87
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:16:5: 16:87
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _41 = const _;                   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _36 = _41;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
        _35 = _36;                       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
        _34 = discriminant::<i32>(move _35) -> bb16; // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:13: 18:35
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:18:13: 18:30
                                         // + literal: Const { ty: for<'a> fn(&'a i32) -> Discriminant<i32> {discriminant::<i32>}, val: Value(<ZST>) }
    }

    bb16: {
        _40 = const _;                   // scope 1 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _39 = _40;                       // scope 1 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
        _38 = _39;                       // scope 1 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
        _37 = discriminant::<&str>(move _38) -> bb17; // scope 1 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:13: 19:39
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:19:13: 19:30
                                         // + literal: Const { ty: for<'a> fn(&'a &str) -> Discriminant<&str> {discriminant::<&str>}, val: Value(<ZST>) }
    }

    bb17: {
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:20:2: 20:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
    let mut _1: &str;                    // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:32: 19:38

    bb0: {
        _1 = const "test";               // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:32: 19:38
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/discriminant_value-wrapper.rs:19:32: 19:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:19:31: 19:38
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
    let mut _1: i32;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:32: 18:34

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:32: 18:34
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:18:31: 18:34
    }
}

promoted[2] in main: &ADT = {
    let mut _0: &ADT;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
    let mut _1: ADT;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:71: 16:85

    bb0: {
        _1 = ADT::Second(const 2_u64);   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:71: 16:85
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:70: 16:85
    }
}

promoted[3] in main: &ADT = {
    let mut _0: &ADT;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
    let mut _1: ADT;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:32: 16:47

    bb0: {
        _1 = ADT::First(const 2_u32, const 2_u32); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:32: 16:47
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:16:31: 16:47
    }
}

promoted[4] in main: &ADT = {
    let mut _0: &ADT;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
    let mut _1: ADT;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:71: 15:85

    bb0: {
        _1 = ADT::Second(const 6_u64);   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:71: 15:85
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:70: 15:85
    }
}

promoted[5] in main: &ADT = {
    let mut _0: &ADT;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
    let mut _1: ADT;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:32: 15:46

    bb0: {
        _1 = ADT::Second(const 5_u64);   // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:32: 15:46
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:15:31: 15:46
    }
}

promoted[6] in main: &ADT = {
    let mut _0: &ADT;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
    let mut _1: ADT;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:71: 14:86

    bb0: {
        _1 = ADT::First(const 1_u32, const 1_u32); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:71: 14:86
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:70: 14:86
    }
}

promoted[7] in main: &ADT = {
    let mut _0: &ADT;                    // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
    let mut _1: ADT;                     // in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:32: 14:47

    bb0: {
        _1 = ADT::First(const 0_u32, const 0_u32); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:32: 14:47
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:14:31: 14:47
    }
}

fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;                     // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:9:5: 9:10

    bb0: {
        _0 = ADT::First(move _1, move _2); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:9:5: 9:10
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:9:5: 9:10
    }
}

// MIR FOR CTFE
fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;                     // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:9:5: 9:10

    bb0: {
        _0 = ADT::First(move _1, move _2); // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:9:5: 9:10
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:9:5: 9:10
    }
}

fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;                     // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:10:5: 10:11

    bb0: {
        _0 = ADT::Second(move _1);       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:10:5: 10:11
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:10:5: 10:11
    }
}

// MIR FOR CTFE
fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;                     // return place in scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:10:5: 10:11

    bb0: {
        _0 = ADT::Second(move _1);       // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:10:5: 10:11
        return;                          // scope 0 at ui/enum-discriminant/discriminant_value-wrapper.rs:10:5: 10:11
    }
}
