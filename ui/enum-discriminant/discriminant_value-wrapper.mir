// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: &std::mem::Discriminant<ADT>;
    let _4: std::mem::Discriminant<ADT>;
    let mut _5: &std::mem::Discriminant<ADT>;
    let _6: std::mem::Discriminant<ADT>;
    let mut _7: !;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: &std::mem::Discriminant<ADT>;
    let _11: std::mem::Discriminant<ADT>;
    let mut _12: &std::mem::Discriminant<ADT>;
    let _13: std::mem::Discriminant<ADT>;
    let mut _14: !;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: &std::mem::Discriminant<ADT>;
    let _18: std::mem::Discriminant<ADT>;
    let mut _19: &std::mem::Discriminant<ADT>;
    let _20: std::mem::Discriminant<ADT>;
    let mut _21: !;
    let mut _22: std::mem::Discriminant<i32>;
    let mut _23: std::mem::Discriminant<&str>;
    let mut _25: &i32;
    let mut _26: &ADT;
    let mut _27: &ADT;
    let mut _28: &ADT;
    let mut _29: &ADT;
    let mut _30: &ADT;
    let mut _31: &ADT;
    scope 1 {
        let mut _24: &&str;
        scope 2 {
        }
    }

    bb0: {
        _31 = const _;
        _4 = discriminant::<ADT>(_31) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _30 = const _;
        _6 = discriminant::<ADT>(_30) -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = &_6;
        _2 = <Discriminant<ADT> as PartialEq>::eq(move _3, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _7 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::First(0, 0)) == mem::discriminant(&ADT::First(1, 1))") -> unwind continue;
    }

    bb5: {
        _29 = const _;
        _11 = discriminant::<ADT>(_29) -> [return: bb6, unwind continue];
    }

    bb6: {
        _10 = &_11;
        _28 = const _;
        _13 = discriminant::<ADT>(_28) -> [return: bb7, unwind continue];
    }

    bb7: {
        _12 = &_13;
        _9 = <Discriminant<ADT> as PartialEq>::eq(move _10, move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _14 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::Second(5)) == mem::discriminant(&ADT::Second(6))") -> unwind continue;
    }

    bb10: {
        _27 = const _;
        _18 = discriminant::<ADT>(_27) -> [return: bb11, unwind continue];
    }

    bb11: {
        _17 = &_18;
        _26 = const _;
        _20 = discriminant::<ADT>(_26) -> [return: bb12, unwind continue];
    }

    bb12: {
        _19 = &_20;
        _16 = <Discriminant<ADT> as PartialEq>::ne(move _17, move _19) -> [return: bb13, unwind continue];
    }

    bb13: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _21 = core::panicking::panic(const "assertion failed: mem::discriminant(&ADT::First(2, 2)) != mem::discriminant(&ADT::Second(2))") -> unwind continue;
    }

    bb15: {
        _25 = const _;
        _22 = discriminant::<i32>(_25) -> [return: bb16, unwind continue];
    }

    bb16: {
        _24 = const _;
        _23 = discriminant::<&str>(_24) -> [return: bb17, unwind continue];
    }

    bb17: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "test";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::Second(const 2_u64);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::First(const 2_u32, const 2_u32);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::Second(const 6_u64);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::Second(const 5_u64);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::First(const 1_u32, const 1_u32);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::First(const 0_u32, const 0_u32);
        _0 = &_1;
        return;
    }
}

fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}
