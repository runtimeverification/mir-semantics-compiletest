// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Signed::Zero::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:10:12: 10:13

    bb0: {
        _0 = const 0_i128;               // scope 0 at ui/enum-discriminant/repr128.rs:10:12: 10:13
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:10:12: 10:13
    }
}

Signed::Staircase::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:11:17: 11:63

    bb0: {
        _0 = const 5233100606242806050955395731361295_i128; // scope 0 at ui/enum-discriminant/repr128.rs:11:17: 11:63
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:11:17: 11:63
    }
}

Signed::U64Limit::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:36
    let mut _1: i128;                    // in scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:32
    let mut _2: (i128, bool);            // in scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:36

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:32
        _1 = const _ as i128 (IntToInt); // scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:32
        _2 = CheckedAdd(_1, const 1_i128); // scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:36
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_i128) -> bb1; // scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:36
    }

    bb1: {
        _0 = move (_2.0: i128);          // scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:36
        StorageDead(_1);                 // scope 0 at ui/enum-discriminant/repr128.rs:12:35: 12:36
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:12:16: 12:36
    }
}

Signed::SmallNegative::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:13:21: 13:23

    bb0: {
        _0 = const -1_i128;              // scope 0 at ui/enum-discriminant/repr128.rs:13:21: 13:23
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:13:21: 13:23
    }
}

Signed::BigNegative::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:14:19: 14:28

    bb0: {
        _0 = const _;                    // scope 0 at ui/enum-discriminant/repr128.rs:14:19: 14:28
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:14:19: 14:28
    }
}

Unsigned::Zero::{constant#0}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:20:12: 20:13

    bb0: {
        _0 = const 0_u128;               // scope 0 at ui/enum-discriminant/repr128.rs:20:12: 20:13
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:20:12: 20:13
    }
}

Unsigned::Staircase::{constant#0}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:21:17: 21:63

    bb0: {
        _0 = const 5233100606242806050955395731361295_u128; // scope 0 at ui/enum-discriminant/repr128.rs:21:17: 21:63
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:21:17: 21:63
    }
}

Unsigned::U64Limit::{constant#0}: u128 = {
    let mut _0: u128;                    // return place in scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:36
    let mut _1: u128;                    // in scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:32
    let mut _2: (u128, bool);            // in scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:36

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:32
        _1 = const _ as u128 (IntToInt); // scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:32
        _2 = CheckedAdd(_1, const 1_u128); // scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:36
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_u128) -> bb1; // scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:36
    }

    bb1: {
        _0 = move (_2.0: u128);          // scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:36
        StorageDead(_1);                 // scope 0 at ui/enum-discriminant/repr128.rs:22:35: 22:36
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:22:16: 22:36
    }
}

fn discr(_1: T, _2: U) -> () {
    debug v => _1;                       // in scope 0 at ui/enum-discriminant/repr128.rs:26:16: 26:17
    debug value => _2;                   // in scope 0 at ui/enum-discriminant/repr128.rs:26:22: 26:27
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/repr128.rs:27:1: 27:1
    let mut _3: bool;                    // in scope 0 at ui/enum-discriminant/repr128.rs:30:5: 30:45
    let mut _4: bool;                    // in scope 0 at ui/enum-discriminant/repr128.rs:30:13: 30:44
    let mut _5: &<T as std::marker::DiscriminantKind>::Discriminant; // in scope 0 at ui/enum-discriminant/repr128.rs:30:13: 30:35
    let _6: <T as std::marker::DiscriminantKind>::Discriminant; // in scope 0 at ui/enum-discriminant/repr128.rs:30:13: 30:35
    let mut _7: &T;                      // in scope 0 at ui/enum-discriminant/repr128.rs:30:32: 30:34
    let _8: &T;                          // in scope 0 at ui/enum-discriminant/repr128.rs:30:32: 30:34
    let mut _9: &U;                      // in scope 0 at ui/enum-discriminant/repr128.rs:30:39: 30:44
    let mut _10: !;                      // in scope 0 at ui/enum-discriminant/repr128.rs:30:5: 30:45

    bb0: {
        _8 = &_1;                        // scope 0 at ui/enum-discriminant/repr128.rs:30:32: 30:34
        _7 = _8;                         // scope 0 at ui/enum-discriminant/repr128.rs:30:32: 30:34
        _6 = discriminant((*_7));        // scope 0 at ui/enum-discriminant/repr128.rs:30:13: 30:35
        _5 = &_6;                        // scope 0 at ui/enum-discriminant/repr128.rs:30:13: 30:35
        _9 = &_2;                        // scope 0 at ui/enum-discriminant/repr128.rs:30:39: 30:44
        _4 = <<T as DiscriminantKind>::Discriminant as PartialEq<U>>::eq(move _5, move _9) -> [return: bb1, unwind: bb6]; // scope 0 at ui/enum-discriminant/repr128.rs:30:13: 30:44
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:30:13: 30:44
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as DiscriminantKind>::Discriminant, &'b U) -> bool {<<T as DiscriminantKind>::Discriminant as PartialEq<U>>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Not(move _4);               // scope 0 at ui/enum-discriminant/repr128.rs:30:5: 30:45
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/enum-discriminant/repr128.rs:30:5: 30:45
    }

    bb2: {
        _10 = core::panicking::panic(const "assertion failed: discriminant_value(&v) == value") -> bb6; // scope 0 at ui/enum-discriminant/repr128.rs:30:5: 30:45
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:30:5: 30:45
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb7]; // scope 0 at ui/enum-discriminant/repr128.rs:31:1: 31:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/enum-discriminant/repr128.rs:31:1: 31:2
    }

    bb5: {
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:31:2: 31:2
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/enum-discriminant/repr128.rs:31:1: 31:2
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/enum-discriminant/repr128.rs:31:1: 31:2
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/enum-discriminant/repr128.rs:26:1: 31:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/repr128.rs:33:11: 33:11
    let _1: ();                          // in scope 0 at ui/enum-discriminant/repr128.rs:34:5: 34:27
    let mut _2: Signed;                  // in scope 0 at ui/enum-discriminant/repr128.rs:34:11: 34:23
    let _3: ();                          // in scope 0 at ui/enum-discriminant/repr128.rs:35:5: 35:77
    let mut _4: Signed;                  // in scope 0 at ui/enum-discriminant/repr128.rs:35:11: 35:28
    let _5: ();                          // in scope 0 at ui/enum-discriminant/repr128.rs:36:5: 36:50
    let mut _6: Signed;                  // in scope 0 at ui/enum-discriminant/repr128.rs:36:11: 36:27
    let mut _7: i128;                    // in scope 0 at ui/enum-discriminant/repr128.rs:36:29: 36:49
    let _8: ();                          // in scope 0 at ui/enum-discriminant/repr128.rs:37:5: 37:37
    let mut _9: Signed;                  // in scope 0 at ui/enum-discriminant/repr128.rs:37:11: 37:32
    let _10: ();                         // in scope 0 at ui/enum-discriminant/repr128.rs:38:5: 38:42
    let mut _11: Signed;                 // in scope 0 at ui/enum-discriminant/repr128.rs:38:11: 38:30
    let _12: ();                         // in scope 0 at ui/enum-discriminant/repr128.rs:39:5: 39:39
    let mut _13: Signed;                 // in scope 0 at ui/enum-discriminant/repr128.rs:39:11: 39:23
    let mut _14: i128;                   // in scope 0 at ui/enum-discriminant/repr128.rs:39:25: 39:38
    let _15: ();                         // in scope 0 at ui/enum-discriminant/repr128.rs:41:5: 41:29
    let mut _16: Unsigned;               // in scope 0 at ui/enum-discriminant/repr128.rs:41:11: 41:25
    let _17: ();                         // in scope 0 at ui/enum-discriminant/repr128.rs:42:5: 42:79
    let mut _18: Unsigned;               // in scope 0 at ui/enum-discriminant/repr128.rs:42:11: 42:30
    let _19: ();                         // in scope 0 at ui/enum-discriminant/repr128.rs:43:5: 43:52
    let mut _20: Unsigned;               // in scope 0 at ui/enum-discriminant/repr128.rs:43:11: 43:29
    let mut _21: u128;                   // in scope 0 at ui/enum-discriminant/repr128.rs:43:31: 43:51
    let _22: ();                         // in scope 0 at ui/enum-discriminant/repr128.rs:44:5: 44:48
    let mut _23: Unsigned;               // in scope 0 at ui/enum-discriminant/repr128.rs:44:11: 44:25
    let mut _24: u128;                   // in scope 0 at ui/enum-discriminant/repr128.rs:44:27: 44:47

    bb0: {
        _2 = const Signed::Zero;         // scope 0 at ui/enum-discriminant/repr128.rs:34:11: 34:23
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:34:11: 34:23
                                         // + literal: Const { ty: Signed, val: Value(Scalar(0x00000000000000000000000000000000)) }
        _1 = discr::<Signed, i128>(move _2, const 0_i128) -> bb1; // scope 0 at ui/enum-discriminant/repr128.rs:34:5: 34:27
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:34:5: 34:10
                                         // + literal: Const { ty: fn(Signed, i128) {discr::<Signed, i128>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const Signed::Staircase;    // scope 0 at ui/enum-discriminant/repr128.rs:35:11: 35:28
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:35:11: 35:28
                                         // + literal: Const { ty: Signed, val: Value(Scalar(0x000102030405060708090a0b0c0d0e0f)) }
        _3 = discr::<Signed, i128>(move _4, const 5233100606242806050955395731361295_i128) -> bb2; // scope 0 at ui/enum-discriminant/repr128.rs:35:5: 35:77
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:35:5: 35:10
                                         // + literal: Const { ty: fn(Signed, i128) {discr::<Signed, i128>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const Signed::U64Limit;     // scope 0 at ui/enum-discriminant/repr128.rs:36:11: 36:27
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:36:11: 36:27
                                         // + literal: Const { ty: Signed, val: Value(Scalar(0x00000000000000010000000000000000)) }
        _7 = const 18446744073709551616_i128; // scope 0 at ui/enum-discriminant/repr128.rs:36:29: 36:49
        _5 = discr::<Signed, i128>(move _6, move _7) -> bb3; // scope 0 at ui/enum-discriminant/repr128.rs:36:5: 36:50
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:36:5: 36:10
                                         // + literal: Const { ty: fn(Signed, i128) {discr::<Signed, i128>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = const Signed::SmallNegative; // scope 0 at ui/enum-discriminant/repr128.rs:37:11: 37:32
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:37:11: 37:32
                                         // + literal: Const { ty: Signed, val: Value(Scalar(0xffffffffffffffffffffffffffffffff)) }
        _8 = discr::<Signed, i128>(move _9, const -1_i128) -> bb4; // scope 0 at ui/enum-discriminant/repr128.rs:37:5: 37:37
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:37:5: 37:10
                                         // + literal: Const { ty: fn(Signed, i128) {discr::<Signed, i128>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = const Signed::BigNegative; // scope 0 at ui/enum-discriminant/repr128.rs:38:11: 38:30
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:38:11: 38:30
                                         // + literal: Const { ty: Signed, val: Value(Scalar(0x80000000000000000000000000000000)) }
        _10 = discr::<Signed, i128>(move _11, const _) -> bb5; // scope 0 at ui/enum-discriminant/repr128.rs:38:5: 38:42
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:38:5: 38:10
                                         // + literal: Const { ty: fn(Signed, i128) {discr::<Signed, i128>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = const Signed::Next;        // scope 0 at ui/enum-discriminant/repr128.rs:39:11: 39:23
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:39:11: 39:23
                                         // + literal: Const { ty: Signed, val: Value(Scalar(0x80000000000000000000000000000001)) }
        _14 = const -170141183460469231731687303715884105727_i128; // scope 0 at ui/enum-discriminant/repr128.rs:39:25: 39:38
        _12 = discr::<Signed, i128>(move _13, move _14) -> bb6; // scope 0 at ui/enum-discriminant/repr128.rs:39:5: 39:39
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:39:5: 39:10
                                         // + literal: Const { ty: fn(Signed, i128) {discr::<Signed, i128>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = const Unsigned::Zero;      // scope 0 at ui/enum-discriminant/repr128.rs:41:11: 41:25
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:41:11: 41:25
                                         // + literal: Const { ty: Unsigned, val: Value(Scalar(0x00000000000000000000000000000000)) }
        _15 = discr::<Unsigned, u128>(move _16, const 0_u128) -> bb7; // scope 0 at ui/enum-discriminant/repr128.rs:41:5: 41:29
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:41:5: 41:10
                                         // + literal: Const { ty: fn(Unsigned, u128) {discr::<Unsigned, u128>}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = const Unsigned::Staircase; // scope 0 at ui/enum-discriminant/repr128.rs:42:11: 42:30
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:42:11: 42:30
                                         // + literal: Const { ty: Unsigned, val: Value(Scalar(0x000102030405060708090a0b0c0d0e0f)) }
        _17 = discr::<Unsigned, u128>(move _18, const 5233100606242806050955395731361295_u128) -> bb8; // scope 0 at ui/enum-discriminant/repr128.rs:42:5: 42:79
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:42:5: 42:10
                                         // + literal: Const { ty: fn(Unsigned, u128) {discr::<Unsigned, u128>}, val: Value(<ZST>) }
    }

    bb8: {
        _20 = const Unsigned::U64Limit;  // scope 0 at ui/enum-discriminant/repr128.rs:43:11: 43:29
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:43:11: 43:29
                                         // + literal: Const { ty: Unsigned, val: Value(Scalar(0x00000000000000010000000000000000)) }
        _21 = const 18446744073709551616_u128; // scope 0 at ui/enum-discriminant/repr128.rs:43:31: 43:51
        _19 = discr::<Unsigned, u128>(move _20, move _21) -> bb9; // scope 0 at ui/enum-discriminant/repr128.rs:43:5: 43:52
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:43:5: 43:10
                                         // + literal: Const { ty: fn(Unsigned, u128) {discr::<Unsigned, u128>}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = const Unsigned::Next;      // scope 0 at ui/enum-discriminant/repr128.rs:44:11: 44:25
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:44:11: 44:25
                                         // + literal: Const { ty: Unsigned, val: Value(Scalar(0x00000000000000010000000000000001)) }
        _24 = const 18446744073709551617_u128; // scope 0 at ui/enum-discriminant/repr128.rs:44:27: 44:47
        _22 = discr::<Unsigned, u128>(move _23, move _24) -> bb10; // scope 0 at ui/enum-discriminant/repr128.rs:44:5: 44:48
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/repr128.rs:44:5: 44:10
                                         // + literal: Const { ty: fn(Unsigned, u128) {discr::<Unsigned, u128>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/enum-discriminant/repr128.rs:45:2: 45:2
    }
}
