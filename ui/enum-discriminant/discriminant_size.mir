// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
E2::A::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 7_i8;
        return;
    }
}

E2::B::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -2_i8;
        return;
    }
}

E3::A::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 42_isize;
        return;
    }
}

E3::B::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 100_isize;
        return;
    }
}

E4::A::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const 1306945789274585225_i128;
        return;
    }
}

E4::B::{constant#0}: i128 = {
    let mut _0: i128;

    bb0: {
        _0 = const -1306945789274585225_i128;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [isize; 3];
    let mut _2: isize;
    let _3: usize;
    let mut _4: usize;
    let mut _5: bool;
    let mut _6: (&[isize; 3], &[isize; 3]);
    let mut _7: &[isize; 3];
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: isize;
    let _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: (&[isize; 3], &[isize; 3]);
    let mut _20: &[isize; 3];
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: i8;
    let _30: usize;
    let mut _31: usize;
    let mut _32: bool;
    let mut _33: (&[i8; 3], &[i8; 3]);
    let mut _34: &[i8; 3];
    let mut _37: bool;
    let mut _38: bool;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: i8;
    let _43: usize;
    let mut _44: usize;
    let mut _45: bool;
    let mut _46: (&[i8; 3], &[i8; 3]);
    let mut _47: &[i8; 3];
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: isize;
    let _57: usize;
    let mut _58: usize;
    let mut _59: bool;
    let mut _60: (&[isize; 3], &[isize; 3]);
    let mut _61: &[isize; 3];
    let mut _64: bool;
    let mut _65: bool;
    let _67: !;
    let mut _68: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _69: isize;
    let _70: usize;
    let mut _71: usize;
    let mut _72: bool;
    let mut _73: (&[isize; 3], &[isize; 3]);
    let mut _74: &[isize; 3];
    let mut _77: bool;
    let mut _78: bool;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _83: i128;
    let _84: usize;
    let mut _85: usize;
    let mut _86: bool;
    let mut _87: (&[i128; 3], &[i128; 3]);
    let mut _88: &[i128; 3];
    let mut _91: bool;
    let mut _92: bool;
    let _94: !;
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _96: i128;
    let _97: usize;
    let mut _98: usize;
    let mut _99: bool;
    let mut _100: (&[i128; 3], &[i128; 3]);
    let mut _101: &[i128; 3];
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug target => _1;
        let _8: &[isize; 3];
        let _9: &[isize; 3];
        let _21: &[isize; 3];
        let _22: &[isize; 3];
        let mut _28: [i8; 3];
        let mut _121: &[isize; 3];
        let mut _122: &E1;
        let mut _123: &[isize; 3];
        let mut _124: &E1;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 5 {
                debug kind => _25;
            }
        }
        scope 6 {
            debug target => _28;
            let _35: &[i8; 3];
            let _36: &[i8; 3];
            let _48: &[i8; 3];
            let _49: &[i8; 3];
            let mut _55: [isize; 3];
            let mut _117: &[i8; 3];
            let mut _118: &E2;
            let mut _119: &[i8; 3];
            let mut _120: &E2;
            scope 7 {
                debug left_val => _35;
                debug right_val => _36;
                let _39: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _39;
                }
            }
            scope 9 {
                debug left_val => _48;
                debug right_val => _49;
                let _52: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _52;
                }
            }
            scope 11 {
                debug target => _55;
                let _62: &[isize; 3];
                let _63: &[isize; 3];
                let _75: &[isize; 3];
                let _76: &[isize; 3];
                let mut _82: [i128; 3];
                let mut _113: &[isize; 3];
                let mut _114: &E3;
                let mut _115: &[isize; 3];
                let mut _116: &E3;
                scope 12 {
                    debug left_val => _62;
                    debug right_val => _63;
                    let _66: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _66;
                    }
                }
                scope 14 {
                    debug left_val => _75;
                    debug right_val => _76;
                    let _79: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _79;
                    }
                }
                scope 16 {
                    debug target => _82;
                    let _89: &[i128; 3];
                    let _90: &[i128; 3];
                    let _102: &[i128; 3];
                    let _103: &[i128; 3];
                    let mut _109: &[i128; 3];
                    let mut _110: &E4;
                    let mut _111: &[i128; 3];
                    let mut _112: &E4;
                    scope 17 {
                        debug left_val => _89;
                        debug right_val => _90;
                        let _93: core::panicking::AssertKind;
                        scope 18 {
                            debug kind => _93;
                        }
                    }
                    scope 19 {
                        debug left_val => _102;
                        debug right_val => _103;
                        let _106: core::panicking::AssertKind;
                        scope 20 {
                            debug kind => _106;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_isize, const 0_isize, const 0_isize];
        _124 = const _;
        _2 = discriminant((*_124));
        _3 = const 1_usize;
        _4 = const 3_usize;
        _5 = Lt(_3, _4);
        assert(move _5, "index out of bounds: the length is {} but the index is {}", move _4, _3) -> [success: bb1, unwind continue];
    }

    bb1: {
        _1[_3] = move _2;
        _7 = &_1;
        _123 = const _;
        _6 = (move _7, _123);
        _8 = (_6.0: &[isize; 3]);
        _9 = (_6.1: &[isize; 3]);
        _11 = <[isize; 3] as PartialEq>::eq(_8, _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb4: {
        _122 = const _;
        _15 = discriminant((*_122));
        _16 = const 1_usize;
        _17 = const 3_usize;
        _18 = Lt(_16, _17);
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> [success: bb5, unwind continue];
    }

    bb5: {
        _1[_16] = move _15;
        _20 = &_1;
        _121 = const _;
        _19 = (move _20, _121);
        _21 = (_19.0: &[isize; 3]);
        _22 = (_19.1: &[isize; 3]);
        _24 = <[isize; 3] as PartialEq>::eq(_21, _22) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _25, _21, _22, move _27) -> unwind continue;
    }

    bb8: {
        _28 = [const 0_i8, const 0_i8, const 0_i8];
        _120 = const _;
        _29 = discriminant((*_120));
        _30 = const 1_usize;
        _31 = const 3_usize;
        _32 = Lt(_30, _31);
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> [success: bb9, unwind continue];
    }

    bb9: {
        _28[_30] = move _29;
        _34 = &_28;
        _119 = const _;
        _33 = (move _34, _119);
        _35 = (_33.0: &[i8; 3]);
        _36 = (_33.1: &[i8; 3]);
        _38 = <[i8; 3] as PartialEq>::eq(_35, _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<[i8; 3], [i8; 3]>(move _39, _35, _36, move _41) -> unwind continue;
    }

    bb12: {
        _118 = const _;
        _42 = discriminant((*_118));
        _43 = const 1_usize;
        _44 = const 3_usize;
        _45 = Lt(_43, _44);
        assert(move _45, "index out of bounds: the length is {} but the index is {}", move _44, _43) -> [success: bb13, unwind continue];
    }

    bb13: {
        _28[_43] = move _42;
        _47 = &_28;
        _117 = const _;
        _46 = (move _47, _117);
        _48 = (_46.0: &[i8; 3]);
        _49 = (_46.1: &[i8; 3]);
        _51 = <[i8; 3] as PartialEq>::eq(_48, _49) -> [return: bb14, unwind continue];
    }

    bb14: {
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<[i8; 3], [i8; 3]>(move _52, _48, _49, move _54) -> unwind continue;
    }

    bb16: {
        _55 = [const 0_isize, const 0_isize, const 0_isize];
        _116 = const _;
        _56 = discriminant((*_116));
        _57 = const 1_usize;
        _58 = const 3_usize;
        _59 = Lt(_57, _58);
        assert(move _59, "index out of bounds: the length is {} but the index is {}", move _58, _57) -> [success: bb17, unwind continue];
    }

    bb17: {
        _55[_57] = move _56;
        _61 = &_55;
        _115 = const _;
        _60 = (move _61, _115);
        _62 = (_60.0: &[isize; 3]);
        _63 = (_60.1: &[isize; 3]);
        _65 = <[isize; 3] as PartialEq>::eq(_62, _63) -> [return: bb18, unwind continue];
    }

    bb18: {
        _64 = Not(move _65);
        switchInt(move _64) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _66 = core::panicking::AssertKind::Eq;
        _68 = Option::<Arguments<'_>>::None;
        _67 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _66, _62, _63, move _68) -> unwind continue;
    }

    bb20: {
        _114 = const _;
        _69 = discriminant((*_114));
        _70 = const 1_usize;
        _71 = const 3_usize;
        _72 = Lt(_70, _71);
        assert(move _72, "index out of bounds: the length is {} but the index is {}", move _71, _70) -> [success: bb21, unwind continue];
    }

    bb21: {
        _55[_70] = move _69;
        _74 = &_55;
        _113 = const _;
        _73 = (move _74, _113);
        _75 = (_73.0: &[isize; 3]);
        _76 = (_73.1: &[isize; 3]);
        _78 = <[isize; 3] as PartialEq>::eq(_75, _76) -> [return: bb22, unwind continue];
    }

    bb22: {
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = core::panicking::assert_failed::<[isize; 3], [isize; 3]>(move _79, _75, _76, move _81) -> unwind continue;
    }

    bb24: {
        _82 = [const 0_i128, const 0_i128, const 0_i128];
        _112 = const _;
        _83 = discriminant((*_112));
        _84 = const 1_usize;
        _85 = const 3_usize;
        _86 = Lt(_84, _85);
        assert(move _86, "index out of bounds: the length is {} but the index is {}", move _85, _84) -> [success: bb25, unwind continue];
    }

    bb25: {
        _82[_84] = move _83;
        _88 = &_82;
        _111 = const _;
        _87 = (move _88, _111);
        _89 = (_87.0: &[i128; 3]);
        _90 = (_87.1: &[i128; 3]);
        _92 = <[i128; 3] as PartialEq>::eq(_89, _90) -> [return: bb26, unwind continue];
    }

    bb26: {
        _91 = Not(move _92);
        switchInt(move _91) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _93 = core::panicking::AssertKind::Eq;
        _95 = Option::<Arguments<'_>>::None;
        _94 = core::panicking::assert_failed::<[i128; 3], [i128; 3]>(move _93, _89, _90, move _95) -> unwind continue;
    }

    bb28: {
        _110 = const _;
        _96 = discriminant((*_110));
        _97 = const 1_usize;
        _98 = const 3_usize;
        _99 = Lt(_97, _98);
        assert(move _99, "index out of bounds: the length is {} but the index is {}", move _98, _97) -> [success: bb29, unwind continue];
    }

    bb29: {
        _82[_97] = move _96;
        _101 = &_82;
        _109 = const _;
        _100 = (move _101, _109);
        _102 = (_100.0: &[i128; 3]);
        _103 = (_100.1: &[i128; 3]);
        _105 = <[i128; 3] as PartialEq>::eq(_102, _103) -> [return: bb30, unwind continue];
    }

    bb30: {
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<[i128; 3], [i128; 3]>(move _106, _102, _103, move _108) -> unwind continue;
    }

    bb32: {
        return;
    }
}

promoted[0] in main: &[i128; 3] = {
    let mut _0: &[i128; 3];
    let mut _1: [i128; 3];

    bb0: {
        _1 = [const 0_i128, const -1306945789274585225_i128, const 0_i128];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &E4 = {
    let mut _0: &E4;
    let mut _1: E4;

    bb0: {
        _1 = E4::B;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[i128; 3] = {
    let mut _0: &[i128; 3];
    let mut _1: [i128; 3];

    bb0: {
        _1 = [const 0_i128, const 1306945789274585225_i128, const 0_i128];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &E4 = {
    let mut _0: &E4;
    let mut _1: E4;

    bb0: {
        _1 = E4::A;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 0_isize, const 100_isize, const 0_isize];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &E3 = {
    let mut _0: &E3;
    let mut _1: E3;

    bb0: {
        _1 = E3::B;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 0_isize, const 42_isize, const 0_isize];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &E3 = {
    let mut _0: &E3;
    let mut _1: E3;

    bb0: {
        _1 = E3::A;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[i8; 3] = {
    let mut _0: &[i8; 3];
    let mut _1: [i8; 3];

    bb0: {
        _1 = [const 0_i8, const -2_i8, const 0_i8];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &E2 = {
    let mut _0: &E2;
    let mut _1: E2;

    bb0: {
        _1 = E2::B;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[i8; 3] = {
    let mut _0: &[i8; 3];
    let mut _1: [i8; 3];

    bb0: {
        _1 = [const 0_i8, const 7_i8, const 0_i8];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &E2 = {
    let mut _0: &E2;
    let mut _1: E2;

    bb0: {
        _1 = E2::A;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 0_isize, const 1_isize, const 0_isize];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &E1 = {
    let mut _0: &E1;
    let mut _1: E1;

    bb0: {
        _1 = E1::B;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[isize; 3] = {
    let mut _0: &[isize; 3];
    let mut _1: [isize; 3];

    bb0: {
        _1 = [const 0_isize, const 0_isize, const 0_isize];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &E1 = {
    let mut _0: &E1;
    let mut _1: E1;

    bb0: {
        _1 = E1::A;
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
