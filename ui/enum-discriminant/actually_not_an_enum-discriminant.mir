// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check(_1: u8) -> () {
    debug v => _1;                       // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:16:10: 16:11
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:16:17: 16:17
    let mut _2: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &u8;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: u8;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(check, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &u8);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 0_u8;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<u8, u8>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:18:2: 18:2
    }
}

promoted[0] in check: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:17:19: 17:20

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:17:19: 17:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn generic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:21:1: 21:1
    let _1: std::vec::Vec<T>;            // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:24:9: 24:10
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:24:9: 24:10
        scope 2 {
        }
    }

    bb0: {
        _1 = Vec::<T>::new() -> bb1;     // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:24:22: 24:32
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:24:22: 24:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<T> {Vec::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:26:1: 26:2
    }

    bb2: {
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:28:11: 28:11
    let _1: ();                          // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:5: 31:37
    let mut _2: u8;                      // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:11: 31:36
    let _3: ();                          // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:5: 32:36
    let mut _4: u8;                      // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:11: 32:35
    let _5: ();                          // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:5: 33:34
    let mut _6: u8;                      // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:11: 33:33
    let _7: ();                          // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:5: 34:36
    let mut _8: u8;                      // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:11: 34:35
    let _9: ();                          // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:5: 35:36
    let mut _10: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:11: 35:35
    let _11: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:5: 36:49
    let mut _12: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:11: 36:48
    let _13: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:5: 37:48
    let mut _14: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:11: 37:47
    let _15: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:5: 38:40
    let mut _16: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:11: 38:39
    let _17: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:5: 39:49
    let mut _18: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:11: 39:48
    let _19: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:5: 40:47
    let mut _20: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:11: 40:46
    let _21: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:5: 41:35
    let mut _22: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:11: 41:34
    let _23: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:5: 42:39
    let mut _24: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:11: 42:38
    let mut _25: &&mut i32;              // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:30: 42:37
    let _26: &&mut i32;                  // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:30: 42:37
    let _27: &mut i32;                   // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:31: 42:37
    let mut _28: i32;                    // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:36: 42:37
    let _29: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:5: 43:38
    let mut _30: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:11: 43:37
    let _31: fn(u8);                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:44:9: 44:15
    let _32: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:5: 45:39
    let mut _33: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:11: 45:38
    let mut _34: &fn(u8);                // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:30: 45:37
    let _35: &fn(u8);                    // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:30: 45:37
    let mut _37: [closure@ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:48: 46:51]; // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:48: 46:53
    let _38: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:5: 47:37
    let mut _39: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:11: 47:36
    let mut _40: &for<'a> fn(&'a str) -> &'a str; // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:30: 47:35
    let _41: &for<'a> fn(&'a str) -> &'a str; // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:30: 47:35
    let _42: ();                         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:5: 48:45
    let mut _43: u8;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:11: 48:44
    scope 1 {
        debug fn_ptr => _31;             // in scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:44:9: 44:15
        let _36: for<'a> fn(&'a str) -> &'a str; // in scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:9: 46:13
        scope 2 {
            debug hrtb => _36;           // in scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:9: 46:13
        }
    }

    bb0: {
        _2 = const 0_u8;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:11: 31:36
        _1 = check(move _2) -> bb1;      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:5: 31:37
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:5: 31:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = const 0_u8;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:11: 32:35
        _3 = check(move _4) -> bb2;      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:5: 32:36
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:5: 32:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = const 0_u8;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:11: 33:33
        _5 = check(move _6) -> bb3;      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:5: 33:34
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:5: 33:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = const 0_u8;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:11: 34:35
        _7 = check(move _8) -> bb4;      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:5: 34:36
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:5: 34:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:11: 35:35
        _9 = check(move _10) -> bb5;     // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:5: 35:36
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:5: 35:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:11: 36:48
        _11 = check(move _12) -> bb6;    // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:5: 36:49
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:5: 36:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:11: 37:47
        _13 = check(move _14) -> bb7;    // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:5: 37:48
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:5: 37:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:11: 38:39
        _15 = check(move _16) -> bb8;    // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:5: 38:40
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:5: 38:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:11: 39:48
        _17 = check(move _18) -> bb9;    // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:5: 39:49
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:5: 39:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:11: 40:46
        _19 = check(move _20) -> bb10;   // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:5: 40:47
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:5: 40:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb10: {
        _22 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:11: 41:34
        _21 = check(move _22) -> bb11;   // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:5: 41:35
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:5: 41:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = const 7_i32;               // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:36: 42:37
        _27 = &mut _28;                  // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:31: 42:37
        _26 = &_27;                      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:30: 42:37
        _25 = _26;                       // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:30: 42:37
        _24 = discriminant((*_25));      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:11: 42:38
        _23 = check(move _24) -> bb12;   // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:5: 42:39
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:42:5: 42:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb12: {
        _30 = const 0_u8;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:11: 43:37
        _29 = check(move _30) -> bb13;   // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:5: 43:38
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:5: 43:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = check as fn(u8) (Pointer(ReifyFnPointer)); // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:44:26: 44:31
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:44:26: 44:31
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
        _35 = &_31;                      // scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:30: 45:37
        _34 = _35;                       // scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:30: 45:37
        _33 = discriminant((*_34));      // scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:11: 45:38
        _32 = check(move _33) -> bb14;   // scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:5: 45:39
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:45:5: 45:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb14: {
        _36 = move _37 as for<'a> fn(&'a str) -> &'a str (Pointer(ClosureFnPointer(Normal))); // scope 1 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:48: 46:53
        _41 = &_36;                      // scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:30: 47:35
        _40 = _41;                       // scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:30: 47:35
        _39 = discriminant((*_40));      // scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:11: 47:36
        _38 = check(move _39) -> bb15;   // scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:5: 47:37
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:47:5: 47:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb15: {
        _43 = const 0_u8;                // scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:11: 48:44
        _42 = check(move _43) -> bb16;   // scope 2 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:5: 48:45
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:5: 48:10
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
    }

    bb16: {
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:49:2: 49:2
    }
}

promoted[0] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);        // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:30: 48:43
    let mut _1: (i32, i32, i32);         // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:31: 48:43

    bb0: {
        _1 = (const 7_i32, const 77_i32, const 777_i32); // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:31: 48:43
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:30: 48:43
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:48:30: 48:43
    }
}

promoted[1] in main: &fn(u8) {check} = {
    let mut _0: &fn(u8) {check};         // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:30: 43:36
    let mut _1: fn(u8) {check};          // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:31: 43:36

    bb0: {
        _1 = check;                      // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:31: 43:36
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:31: 43:36
                                         // + literal: Const { ty: fn(u8) {check}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:30: 43:36
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:43:30: 43:36
    }
}

promoted[2] in main: &&i32 = {
    let mut _0: &&i32;                   // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:30: 41:33
    let mut _1: &i32;                    // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:31: 41:33
    let mut _2: i32;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:32: 41:33

    bb0: {
        _2 = const 7_i32;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:32: 41:33
        _1 = &_2;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:31: 41:33
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:30: 41:33
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:41:30: 41:33
    }
}

promoted[3] in main: &*mut () = {
    let mut _0: &*mut ();                // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:30: 40:45
    let mut _1: *mut ();                 // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:31: 40:45

    bb0: {
        _1 = const 7_usize as *mut () (PointerFromExposedAddress); // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:31: 40:45
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:30: 40:45
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:40:30: 40:45
    }
}

promoted[4] in main: &*const () = {
    let mut _0: &*const ();              // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:30: 39:47
    let mut _1: *const ();               // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:31: 39:47

    bb0: {
        _1 = const 7_usize as *const () (PointerFromExposedAddress); // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:31: 39:47
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:30: 39:47
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:39:30: 39:47
    }
}

promoted[5] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:30: 38:38
    let mut _1: [i32; 2];                // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:31: 38:38

    bb0: {
        _1 = [const 7_i32, const 77_i32]; // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:31: 38:38
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:30: 38:38
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:38:30: 38:38
    }
}

promoted[6] in main: &Union = {
    let mut _0: &Union;                  // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:30: 37:46
    let mut _1: Union;                   // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:31: 37:46

    bb0: {
        _1 = Union { _a: const 7_u32 };  // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:31: 37:46
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:30: 37:46
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:37:30: 37:46
    }
}

promoted[7] in main: &Struct = {
    let mut _0: &Struct;                 // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:30: 36:47
    let mut _1: Struct;                  // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:31: 36:47

    bb0: {
        _1 = Struct { _a: const 7_u32 }; // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:31: 36:47
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:30: 36:47
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:36:30: 36:47
    }
}

promoted[8] in main: &Zst = {
    let mut _0: &Zst;                    // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:30: 35:34
    let mut _1: Zst;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:31: 35:34

    bb0: {
        _1 = Zst;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:31: 35:34
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:30: 35:34
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:35:30: 35:34
    }
}

promoted[9] in main: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:30: 34:34
    let mut _1: f64;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:31: 34:34

    bb0: {
        _1 = const 7f64;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:31: 34:34
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:30: 34:34
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:34:30: 34:34
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:30: 33:32
    let mut _1: i32;                     // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:31: 33:32

    bb0: {
        _1 = const 7_i32;                // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:31: 33:32
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:30: 33:32
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:33:30: 33:32
    }
}

promoted[11] in main: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:30: 32:34
    let mut _1: char;                    // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:31: 32:34

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:31: 32:34
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:30: 32:34
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:32:30: 32:34
    }
}

promoted[12] in main: &bool = {
    let mut _0: &bool;                   // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:30: 31:35
    let mut _1: bool;                    // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:31: 31:35

    bb0: {
        _1 = const true;                 // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:31: 31:35
        _0 = &_1;                        // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:30: 31:35
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:31:30: 31:35
    }
}

fn main::{closure#0}(_1: &[closure@ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:48: 46:51], _2: &str) -> &str {
    debug x => _2;                       // in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:49: 46:50
    let mut _0: &str;                    // return place in scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:52: 46:52

    bb0: {
        _0 = _2;                         // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:52: 46:53
        return;                          // scope 0 at ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:53: 46:53
    }
}
