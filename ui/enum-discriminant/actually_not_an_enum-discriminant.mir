// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check(_1: u8) -> () {
    debug v => _1;
    let mut _0: ();
    let mut _2: (&u8, &u8);
    let mut _3: &u8;
    let _4: &u8;
    let _5: &u8;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u8;
    let mut _9: u8;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &u8;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _3 = &_1;
        _13 = const _;
        _2 = (move _3, _13);
        _4 = (_2.0: &u8);
        _5 = (_2.1: &u8);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u8, u8>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in check: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

fn generic() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<T>;
    scope 1 {
        debug v => _1;
        scope 2 {
        }
    }

    bb0: {
        _1 = Vec::<T>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: u8;
    let _3: ();
    let mut _4: u8;
    let _5: ();
    let mut _6: u8;
    let _7: ();
    let mut _8: u8;
    let _9: ();
    let mut _10: u8;
    let _11: ();
    let mut _12: u8;
    let _13: ();
    let mut _14: u8;
    let _15: ();
    let mut _16: u8;
    let _17: ();
    let mut _18: u8;
    let _19: ();
    let mut _20: u8;
    let _21: ();
    let mut _22: u8;
    let _23: ();
    let mut _24: u8;
    let _25: &&mut i32;
    let _26: &mut i32;
    let mut _27: i32;
    let _28: ();
    let mut _29: u8;
    let _30: fn(u8);
    let _31: ();
    let mut _32: u8;
    let _33: &fn(u8);
    let _35: ();
    let mut _36: u8;
    let _37: &for<'a> fn(&'a str) -> &'a str;
    let _38: ();
    let mut _39: u8;
    let mut _41: &fn(u8) {check};
    let mut _42: &&i32;
    let mut _43: &*mut ();
    let mut _44: &*const ();
    let mut _45: &[i32; 2];
    let mut _46: &Union;
    let mut _47: &Struct;
    let mut _48: &Zst;
    let mut _49: &f64;
    let mut _50: &i32;
    let mut _51: &char;
    let mut _52: &bool;
    scope 1 {
        debug fn_ptr => _30;
        let _34: for<'a> fn(&'a str) -> &'a str;
        scope 2 {
            debug hrtb => _34;
            let mut _40: &(i32, i32, i32);
        }
    }

    bb0: {
        _52 = const _;
        _2 = discriminant((*_52));
        _1 = check(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _51 = const _;
        _4 = discriminant((*_51));
        _3 = check(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _50 = const _;
        _6 = discriminant((*_50));
        _5 = check(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _49 = const _;
        _8 = discriminant((*_49));
        _7 = check(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _48 = const _;
        _10 = discriminant((*_48));
        _9 = check(move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        _47 = const _;
        _12 = discriminant((*_47));
        _11 = check(move _12) -> [return: bb6, unwind continue];
    }

    bb6: {
        _46 = const _;
        _14 = discriminant((*_46));
        _13 = check(move _14) -> [return: bb7, unwind continue];
    }

    bb7: {
        _45 = const _;
        _16 = discriminant((*_45));
        _15 = check(move _16) -> [return: bb8, unwind continue];
    }

    bb8: {
        _44 = const _;
        _18 = discriminant((*_44));
        _17 = check(move _18) -> [return: bb9, unwind continue];
    }

    bb9: {
        _43 = const _;
        _20 = discriminant((*_43));
        _19 = check(move _20) -> [return: bb10, unwind continue];
    }

    bb10: {
        _42 = const _;
        _22 = discriminant((*_42));
        _21 = check(move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _27 = const 7_i32;
        _26 = &mut _27;
        _25 = &_26;
        _24 = discriminant((*_25));
        _23 = check(move _24) -> [return: bb12, unwind continue];
    }

    bb12: {
        _41 = const _;
        _29 = discriminant((*_41));
        _28 = check(move _29) -> [return: bb13, unwind continue];
    }

    bb13: {
        _30 = check as fn(u8) (Pointer(ReifyFnPointer));
        _33 = &_30;
        _32 = discriminant((*_33));
        _31 = check(move _32) -> [return: bb14, unwind continue];
    }

    bb14: {
        _34 = const ZeroSized: [closure@ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:48: 46:51] as for<'a> fn(&'a str) -> &'a str (Pointer(ClosureFnPointer(Normal)));
        _37 = &_34;
        _36 = discriminant((*_37));
        _35 = check(move _36) -> [return: bb15, unwind continue];
    }

    bb15: {
        _40 = const _;
        _39 = discriminant((*_40));
        _38 = check(move _39) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &(i32, i32, i32) = {
    let mut _0: &(i32, i32, i32);
    let mut _1: (i32, i32, i32);

    bb0: {
        _1 = (const 7_i32, const 77_i32, const 777_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &fn(u8) {check} = {
    let mut _0: &fn(u8) {check};
    let mut _1: fn(u8) {check};

    bb0: {
        _1 = check;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&i32 = {
    let mut _0: &&i32;
    let mut _1: &i32;
    let mut _2: i32;

    bb0: {
        _2 = const 7_i32;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &*mut () = {
    let mut _0: &*mut ();
    let mut _1: *mut ();

    bb0: {
        _1 = const 7_usize as *mut () (PointerFromExposedAddress);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &*const () = {
    let mut _0: &*const ();
    let mut _1: *const ();

    bb0: {
        _1 = const 7_usize as *const () (PointerFromExposedAddress);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 7_i32, const 77_i32];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Union = {
    let mut _0: &Union;
    let mut _1: Union;

    bb0: {
        _1 = Union { _a: const 7_u32 };
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &Struct = {
    let mut _0: &Struct;
    let mut _1: Struct;

    bb0: {
        _1 = Struct { _a: const 7_u32 };
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Zst = {
    let mut _0: &Zst;
    let mut _1: Zst;

    bb0: {
        _1 = Zst;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 7f64;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/enum-discriminant/actually_not_an_enum-discriminant.rs:46:48: 46:51], _2: &str) -> &str {
    debug x => _2;
    let mut _0: &str;

    bb0: {
        _0 = _2;
        return;
    }
}
