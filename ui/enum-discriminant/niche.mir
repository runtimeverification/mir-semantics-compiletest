// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const OVERFLOW: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/enum-discriminant/niche.rs:6:17: 6:22
    let _1: OVERFLOW::Foo;               // in scope 0 at ui/enum-discriminant/niche.rs:22:9: 22:10
    let mut _2: isize;                   // in scope 0 at ui/enum-discriminant/niche.rs:24:9: 24:15
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/enum-discriminant/niche.rs:22:9: 22:10
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/enum-discriminant/niche.rs:22:9: 22:10
        _1 = Foo::B;                     // scope 0 at ui/enum-discriminant/niche.rs:22:13: 22:19
        _2 = discriminant(_1);           // scope 1 at ui/enum-discriminant/niche.rs:23:11: 23:12
        switchInt(move _2) -> [1: bb2, otherwise: bb1]; // scope 1 at ui/enum-discriminant/niche.rs:23:5: 23:12
    }

    bb1: {
        StorageLive(_3);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
        ConstEvalCounter;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _0 = const 0_usize;              // scope 1 at ui/enum-discriminant/niche.rs:24:19: 24:20
        StorageDead(_1);                 // scope 0 at ui/enum-discriminant/niche.rs:27:1: 27:2
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:6:1: 27:3
    }
}

WithWraparoundInvalidValues::X::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/enum-discriminant/niche.rs:11:13: 11:14

    bb0: {
        _0 = const 1_u8;                 // scope 0 at ui/enum-discriminant/niche.rs:11:13: 11:14
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:11:13: 11:14
    }
}

WithWraparoundInvalidValues::Y::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/enum-discriminant/niche.rs:12:13: 12:16

    bb0: {
        _0 = const 254_u8;               // scope 0 at ui/enum-discriminant/niche.rs:12:13: 12:16
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:12:13: 12:16
    }
}

const MORE_OVERFLOW: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/enum-discriminant/niche.rs:29:22: 29:27
    let _1: ();                          // in scope 0 at ui/enum-discriminant/niche.rs:87:5: 89:6
    let mut _2: MORE_OVERFLOW::E1;       // in scope 0 at ui/enum-discriminant/niche.rs:87:28: 87:48
    let mut _3: isize;                   // in scope 0 at ui/enum-discriminant/niche.rs:87:12: 87:25
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let _5: ();                          // in scope 0 at ui/enum-discriminant/niche.rs:90:5: 93:6
    let mut _6: MORE_OVERFLOW::E1;       // in scope 0 at ui/enum-discriminant/niche.rs:90:28: 90:48
    let mut _7: isize;                   // in scope 0 at ui/enum-discriminant/niche.rs:90:12: 90:25
    let mut _8: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let _9: ();                          // in scope 0 at ui/enum-discriminant/niche.rs:95:5: 97:6
    let mut _10: MORE_OVERFLOW::E2<MORE_OVERFLOW::Infallible>; // in scope 0 at ui/enum-discriminant/niche.rs:95:28: 95:48
    let mut _11: isize;                  // in scope 0 at ui/enum-discriminant/niche.rs:95:12: 95:25
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let _13: ();                         // in scope 0 at ui/enum-discriminant/niche.rs:98:5: 101:6
    let mut _14: MORE_OVERFLOW::E2<MORE_OVERFLOW::Infallible>; // in scope 0 at ui/enum-discriminant/niche.rs:98:28: 98:48
    let mut _15: isize;                  // in scope 0 at ui/enum-discriminant/niche.rs:98:12: 98:25
    let mut _16: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    scope 1 {
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/enum-discriminant/niche.rs:87:5: 89:6
        StorageLive(_2);                 // scope 1 at ui/enum-discriminant/niche.rs:87:28: 87:48
        _2 = E1::V1 { f: const true };   // scope 1 at ui/enum-discriminant/niche.rs:87:28: 87:48
        _3 = discriminant(_2);           // scope 1 at ui/enum-discriminant/niche.rs:87:12: 87:25
        switchInt(move _3) -> [1: bb1, otherwise: bb2]; // scope 1 at ui/enum-discriminant/niche.rs:87:12: 87:25
    }

    bb1: {
        StorageLive(_4);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        ConstEvalCounter;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        _4 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _1 = const ();                   // scope 0 at ui/enum-discriminant/niche.rs:89:6: 89:6
        StorageDead(_2);                 // scope 0 at ui/enum-discriminant/niche.rs:89:5: 89:6
        StorageDead(_1);                 // scope 0 at ui/enum-discriminant/niche.rs:89:5: 89:6
        StorageLive(_5);                 // scope 0 at ui/enum-discriminant/niche.rs:90:5: 93:6
        StorageLive(_6);                 // scope 2 at ui/enum-discriminant/niche.rs:90:28: 90:48
        _6 = E1::V1 { f: const true };   // scope 2 at ui/enum-discriminant/niche.rs:90:28: 90:48
        _7 = discriminant(_6);           // scope 2 at ui/enum-discriminant/niche.rs:90:12: 90:25
        switchInt(move _7) -> [0: bb3, otherwise: bb4]; // scope 2 at ui/enum-discriminant/niche.rs:90:12: 90:25
    }

    bb3: {
        _5 = const ();                   // scope 2 at ui/enum-discriminant/niche.rs:90:49: 91:6
        StorageDead(_6);                 // scope 0 at ui/enum-discriminant/niche.rs:93:5: 93:6
        StorageDead(_5);                 // scope 0 at ui/enum-discriminant/niche.rs:93:5: 93:6
        StorageLive(_9);                 // scope 0 at ui/enum-discriminant/niche.rs:95:5: 97:6
        StorageLive(_10);                // scope 3 at ui/enum-discriminant/niche.rs:95:28: 95:48
        _10 = E2::<MORE_OVERFLOW::Infallible>::V3; // scope 3 at ui/enum-discriminant/niche.rs:95:28: 95:48
        _11 = discriminant(_10);         // scope 3 at ui/enum-discriminant/niche.rs:95:12: 95:25
        switchInt(move _11) -> [0: bb5, otherwise: bb6]; // scope 3 at ui/enum-discriminant/niche.rs:95:12: 95:25
    }

    bb4: {
        StorageLive(_8);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        _8 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        StorageLive(_12);                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        ConstEvalCounter;                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        _12 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _9 = const ();                   // scope 0 at ui/enum-discriminant/niche.rs:97:6: 97:6
        StorageDead(_10);                // scope 0 at ui/enum-discriminant/niche.rs:97:5: 97:6
        StorageDead(_9);                 // scope 0 at ui/enum-discriminant/niche.rs:97:5: 97:6
        StorageLive(_13);                // scope 0 at ui/enum-discriminant/niche.rs:98:5: 101:6
        StorageLive(_14);                // scope 4 at ui/enum-discriminant/niche.rs:98:28: 98:48
        _14 = E2::<MORE_OVERFLOW::Infallible>::V3; // scope 4 at ui/enum-discriminant/niche.rs:98:28: 98:48
        _15 = discriminant(_14);         // scope 4 at ui/enum-discriminant/niche.rs:98:12: 98:25
        switchInt(move _15) -> [256: bb8, otherwise: bb7]; // scope 4 at ui/enum-discriminant/niche.rs:98:12: 98:25
    }

    bb7: {
        StorageLive(_16);                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        ConstEvalCounter;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
        _16 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _13 = const ();                  // scope 4 at ui/enum-discriminant/niche.rs:98:49: 99:6
        StorageDead(_14);                // scope 0 at ui/enum-discriminant/niche.rs:101:5: 101:6
        StorageDead(_13);                // scope 0 at ui/enum-discriminant/niche.rs:101:5: 101:6
        _0 = const 0_usize;              // scope 0 at ui/enum-discriminant/niche.rs:103:5: 103:6
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:29:1: 104:3
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/niche.rs:106:11: 106:11
    let mut _1: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _10;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _12;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _16 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _16;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _15;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _13 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _13;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:109:2: 109:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/enum-discriminant/niche.rs:108:31: 108:32

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/enum-discriminant/niche.rs:108:31: 108:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/enum-discriminant/niche.rs:108:16: 108:29

    bb0: {
        _1 = const _;                    // scope 0 at ui/enum-discriminant/niche.rs:108:16: 108:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/enum-discriminant/niche.rs:107:26: 107:27

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/enum-discriminant/niche.rs:107:26: 107:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/enum-discriminant/niche.rs:107:16: 107:24

    bb0: {
        _1 = const _;                    // scope 0 at ui/enum-discriminant/niche.rs:107:16: 107:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn Foo::C(_1: WithWraparoundInvalidValues) -> Foo {
    let mut _0: OVERFLOW::Foo;           // return place in scope 0 at ui/enum-discriminant/niche.rs:19:9: 19:10

    bb0: {
        _0 = Foo::C(move _1);            // scope 0 at ui/enum-discriminant/niche.rs:19:9: 19:10
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:19:9: 19:10
    }
}

// MIR FOR CTFE
fn Foo::C(_1: WithWraparoundInvalidValues) -> Foo {
    let mut _0: OVERFLOW::Foo;           // return place in scope 0 at ui/enum-discriminant/niche.rs:19:9: 19:10

    bb0: {
        _0 = Foo::C(move _1);            // scope 0 at ui/enum-discriminant/niche.rs:19:9: 19:10
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:19:9: 19:10
    }
}

fn E2::_01(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:17: 50:20

    bb0: {
        _0 = E2::<X>::_01(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:17: 50:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:17: 50:20
    }
}

// MIR FOR CTFE
fn E2::_01(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:17: 50:20

    bb0: {
        _0 = E2::<X>::_01(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:17: 50:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:17: 50:20
    }
}

fn E2::_02(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:25: 50:28

    bb0: {
        _0 = E2::<X>::_02(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:25: 50:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:25: 50:28
    }
}

// MIR FOR CTFE
fn E2::_02(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:25: 50:28

    bb0: {
        _0 = E2::<X>::_02(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:25: 50:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:25: 50:28
    }
}

fn E2::_03(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:33: 50:36

    bb0: {
        _0 = E2::<X>::_03(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:33: 50:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:33: 50:36
    }
}

// MIR FOR CTFE
fn E2::_03(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:33: 50:36

    bb0: {
        _0 = E2::<X>::_03(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:33: 50:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:33: 50:36
    }
}

fn E2::_04(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:41: 50:44

    bb0: {
        _0 = E2::<X>::_04(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:41: 50:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:41: 50:44
    }
}

// MIR FOR CTFE
fn E2::_04(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:41: 50:44

    bb0: {
        _0 = E2::<X>::_04(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:41: 50:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:41: 50:44
    }
}

fn E2::_05(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:49: 50:52

    bb0: {
        _0 = E2::<X>::_05(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:49: 50:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:49: 50:52
    }
}

// MIR FOR CTFE
fn E2::_05(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:49: 50:52

    bb0: {
        _0 = E2::<X>::_05(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:49: 50:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:49: 50:52
    }
}

fn E2::_06(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:57: 50:60

    bb0: {
        _0 = E2::<X>::_06(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:57: 50:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:57: 50:60
    }
}

// MIR FOR CTFE
fn E2::_06(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:57: 50:60

    bb0: {
        _0 = E2::<X>::_06(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:57: 50:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:57: 50:60
    }
}

fn E2::_07(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:65: 50:68

    bb0: {
        _0 = E2::<X>::_07(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:65: 50:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:65: 50:68
    }
}

// MIR FOR CTFE
fn E2::_07(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:50:65: 50:68

    bb0: {
        _0 = E2::<X>::_07(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:50:65: 50:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:50:65: 50:68
    }
}

fn E2::_08(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:9: 51:12

    bb0: {
        _0 = E2::<X>::_08(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:9: 51:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:9: 51:12
    }
}

// MIR FOR CTFE
fn E2::_08(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:9: 51:12

    bb0: {
        _0 = E2::<X>::_08(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:9: 51:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:9: 51:12
    }
}

fn E2::_09(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:17: 51:20

    bb0: {
        _0 = E2::<X>::_09(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:17: 51:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:17: 51:20
    }
}

// MIR FOR CTFE
fn E2::_09(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:17: 51:20

    bb0: {
        _0 = E2::<X>::_09(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:17: 51:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:17: 51:20
    }
}

fn E2::_0A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:25: 51:28

    bb0: {
        _0 = E2::<X>::_0A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:25: 51:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:25: 51:28
    }
}

// MIR FOR CTFE
fn E2::_0A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:25: 51:28

    bb0: {
        _0 = E2::<X>::_0A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:25: 51:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:25: 51:28
    }
}

fn E2::_0B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:33: 51:36

    bb0: {
        _0 = E2::<X>::_0B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:33: 51:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:33: 51:36
    }
}

// MIR FOR CTFE
fn E2::_0B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:33: 51:36

    bb0: {
        _0 = E2::<X>::_0B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:33: 51:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:33: 51:36
    }
}

fn E2::_0C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:41: 51:44

    bb0: {
        _0 = E2::<X>::_0C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:41: 51:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:41: 51:44
    }
}

// MIR FOR CTFE
fn E2::_0C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:41: 51:44

    bb0: {
        _0 = E2::<X>::_0C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:41: 51:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:41: 51:44
    }
}

fn E2::_0D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:49: 51:52

    bb0: {
        _0 = E2::<X>::_0D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:49: 51:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:49: 51:52
    }
}

// MIR FOR CTFE
fn E2::_0D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:49: 51:52

    bb0: {
        _0 = E2::<X>::_0D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:49: 51:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:49: 51:52
    }
}

fn E2::_0E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:57: 51:60

    bb0: {
        _0 = E2::<X>::_0E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:57: 51:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:57: 51:60
    }
}

// MIR FOR CTFE
fn E2::_0E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:57: 51:60

    bb0: {
        _0 = E2::<X>::_0E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:57: 51:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:57: 51:60
    }
}

fn E2::_0F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:65: 51:68

    bb0: {
        _0 = E2::<X>::_0F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:65: 51:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:65: 51:68
    }
}

// MIR FOR CTFE
fn E2::_0F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:51:65: 51:68

    bb0: {
        _0 = E2::<X>::_0F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:51:65: 51:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:51:65: 51:68
    }
}

fn E2::_10(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:9: 52:12

    bb0: {
        _0 = E2::<X>::_10(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:9: 52:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:9: 52:12
    }
}

// MIR FOR CTFE
fn E2::_10(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:9: 52:12

    bb0: {
        _0 = E2::<X>::_10(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:9: 52:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:9: 52:12
    }
}

fn E2::_11(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:17: 52:20

    bb0: {
        _0 = E2::<X>::_11(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:17: 52:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:17: 52:20
    }
}

// MIR FOR CTFE
fn E2::_11(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:17: 52:20

    bb0: {
        _0 = E2::<X>::_11(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:17: 52:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:17: 52:20
    }
}

fn E2::_12(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:25: 52:28

    bb0: {
        _0 = E2::<X>::_12(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:25: 52:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:25: 52:28
    }
}

// MIR FOR CTFE
fn E2::_12(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:25: 52:28

    bb0: {
        _0 = E2::<X>::_12(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:25: 52:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:25: 52:28
    }
}

fn E2::_13(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:33: 52:36

    bb0: {
        _0 = E2::<X>::_13(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:33: 52:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:33: 52:36
    }
}

// MIR FOR CTFE
fn E2::_13(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:33: 52:36

    bb0: {
        _0 = E2::<X>::_13(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:33: 52:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:33: 52:36
    }
}

fn E2::_14(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:41: 52:44

    bb0: {
        _0 = E2::<X>::_14(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:41: 52:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:41: 52:44
    }
}

// MIR FOR CTFE
fn E2::_14(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:41: 52:44

    bb0: {
        _0 = E2::<X>::_14(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:41: 52:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:41: 52:44
    }
}

fn E2::_15(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:49: 52:52

    bb0: {
        _0 = E2::<X>::_15(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:49: 52:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:49: 52:52
    }
}

// MIR FOR CTFE
fn E2::_15(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:49: 52:52

    bb0: {
        _0 = E2::<X>::_15(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:49: 52:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:49: 52:52
    }
}

fn E2::_16(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:57: 52:60

    bb0: {
        _0 = E2::<X>::_16(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:57: 52:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:57: 52:60
    }
}

// MIR FOR CTFE
fn E2::_16(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:57: 52:60

    bb0: {
        _0 = E2::<X>::_16(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:57: 52:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:57: 52:60
    }
}

fn E2::_17(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:65: 52:68

    bb0: {
        _0 = E2::<X>::_17(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:65: 52:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:65: 52:68
    }
}

// MIR FOR CTFE
fn E2::_17(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:52:65: 52:68

    bb0: {
        _0 = E2::<X>::_17(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:52:65: 52:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:52:65: 52:68
    }
}

fn E2::_18(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:9: 53:12

    bb0: {
        _0 = E2::<X>::_18(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:9: 53:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:9: 53:12
    }
}

// MIR FOR CTFE
fn E2::_18(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:9: 53:12

    bb0: {
        _0 = E2::<X>::_18(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:9: 53:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:9: 53:12
    }
}

fn E2::_19(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:17: 53:20

    bb0: {
        _0 = E2::<X>::_19(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:17: 53:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:17: 53:20
    }
}

// MIR FOR CTFE
fn E2::_19(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:17: 53:20

    bb0: {
        _0 = E2::<X>::_19(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:17: 53:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:17: 53:20
    }
}

fn E2::_1A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:25: 53:28

    bb0: {
        _0 = E2::<X>::_1A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:25: 53:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:25: 53:28
    }
}

// MIR FOR CTFE
fn E2::_1A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:25: 53:28

    bb0: {
        _0 = E2::<X>::_1A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:25: 53:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:25: 53:28
    }
}

fn E2::_1B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:33: 53:36

    bb0: {
        _0 = E2::<X>::_1B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:33: 53:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:33: 53:36
    }
}

// MIR FOR CTFE
fn E2::_1B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:33: 53:36

    bb0: {
        _0 = E2::<X>::_1B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:33: 53:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:33: 53:36
    }
}

fn E2::_1C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:41: 53:44

    bb0: {
        _0 = E2::<X>::_1C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:41: 53:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:41: 53:44
    }
}

// MIR FOR CTFE
fn E2::_1C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:41: 53:44

    bb0: {
        _0 = E2::<X>::_1C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:41: 53:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:41: 53:44
    }
}

fn E2::_1D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:49: 53:52

    bb0: {
        _0 = E2::<X>::_1D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:49: 53:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:49: 53:52
    }
}

// MIR FOR CTFE
fn E2::_1D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:49: 53:52

    bb0: {
        _0 = E2::<X>::_1D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:49: 53:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:49: 53:52
    }
}

fn E2::_1E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:57: 53:60

    bb0: {
        _0 = E2::<X>::_1E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:57: 53:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:57: 53:60
    }
}

// MIR FOR CTFE
fn E2::_1E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:57: 53:60

    bb0: {
        _0 = E2::<X>::_1E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:57: 53:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:57: 53:60
    }
}

fn E2::_1F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:65: 53:68

    bb0: {
        _0 = E2::<X>::_1F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:65: 53:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:65: 53:68
    }
}

// MIR FOR CTFE
fn E2::_1F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:53:65: 53:68

    bb0: {
        _0 = E2::<X>::_1F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:53:65: 53:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:53:65: 53:68
    }
}

fn E2::_20(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:9: 54:12

    bb0: {
        _0 = E2::<X>::_20(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:9: 54:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:9: 54:12
    }
}

// MIR FOR CTFE
fn E2::_20(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:9: 54:12

    bb0: {
        _0 = E2::<X>::_20(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:9: 54:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:9: 54:12
    }
}

fn E2::_21(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:17: 54:20

    bb0: {
        _0 = E2::<X>::_21(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:17: 54:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:17: 54:20
    }
}

// MIR FOR CTFE
fn E2::_21(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:17: 54:20

    bb0: {
        _0 = E2::<X>::_21(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:17: 54:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:17: 54:20
    }
}

fn E2::_22(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:25: 54:28

    bb0: {
        _0 = E2::<X>::_22(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:25: 54:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:25: 54:28
    }
}

// MIR FOR CTFE
fn E2::_22(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:25: 54:28

    bb0: {
        _0 = E2::<X>::_22(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:25: 54:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:25: 54:28
    }
}

fn E2::_23(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:33: 54:36

    bb0: {
        _0 = E2::<X>::_23(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:33: 54:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:33: 54:36
    }
}

// MIR FOR CTFE
fn E2::_23(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:33: 54:36

    bb0: {
        _0 = E2::<X>::_23(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:33: 54:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:33: 54:36
    }
}

fn E2::_24(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:41: 54:44

    bb0: {
        _0 = E2::<X>::_24(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:41: 54:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:41: 54:44
    }
}

// MIR FOR CTFE
fn E2::_24(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:41: 54:44

    bb0: {
        _0 = E2::<X>::_24(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:41: 54:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:41: 54:44
    }
}

fn E2::_25(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:49: 54:52

    bb0: {
        _0 = E2::<X>::_25(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:49: 54:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:49: 54:52
    }
}

// MIR FOR CTFE
fn E2::_25(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:49: 54:52

    bb0: {
        _0 = E2::<X>::_25(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:49: 54:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:49: 54:52
    }
}

fn E2::_26(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:57: 54:60

    bb0: {
        _0 = E2::<X>::_26(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:57: 54:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:57: 54:60
    }
}

// MIR FOR CTFE
fn E2::_26(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:57: 54:60

    bb0: {
        _0 = E2::<X>::_26(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:57: 54:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:57: 54:60
    }
}

fn E2::_27(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:65: 54:68

    bb0: {
        _0 = E2::<X>::_27(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:65: 54:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:65: 54:68
    }
}

// MIR FOR CTFE
fn E2::_27(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:54:65: 54:68

    bb0: {
        _0 = E2::<X>::_27(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:54:65: 54:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:54:65: 54:68
    }
}

fn E2::_28(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:9: 55:12

    bb0: {
        _0 = E2::<X>::_28(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:9: 55:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:9: 55:12
    }
}

// MIR FOR CTFE
fn E2::_28(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:9: 55:12

    bb0: {
        _0 = E2::<X>::_28(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:9: 55:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:9: 55:12
    }
}

fn E2::_29(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:17: 55:20

    bb0: {
        _0 = E2::<X>::_29(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:17: 55:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:17: 55:20
    }
}

// MIR FOR CTFE
fn E2::_29(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:17: 55:20

    bb0: {
        _0 = E2::<X>::_29(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:17: 55:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:17: 55:20
    }
}

fn E2::_2A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:25: 55:28

    bb0: {
        _0 = E2::<X>::_2A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:25: 55:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:25: 55:28
    }
}

// MIR FOR CTFE
fn E2::_2A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:25: 55:28

    bb0: {
        _0 = E2::<X>::_2A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:25: 55:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:25: 55:28
    }
}

fn E2::_2B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:33: 55:36

    bb0: {
        _0 = E2::<X>::_2B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:33: 55:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:33: 55:36
    }
}

// MIR FOR CTFE
fn E2::_2B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:33: 55:36

    bb0: {
        _0 = E2::<X>::_2B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:33: 55:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:33: 55:36
    }
}

fn E2::_2C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:41: 55:44

    bb0: {
        _0 = E2::<X>::_2C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:41: 55:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:41: 55:44
    }
}

// MIR FOR CTFE
fn E2::_2C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:41: 55:44

    bb0: {
        _0 = E2::<X>::_2C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:41: 55:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:41: 55:44
    }
}

fn E2::_2D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:49: 55:52

    bb0: {
        _0 = E2::<X>::_2D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:49: 55:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:49: 55:52
    }
}

// MIR FOR CTFE
fn E2::_2D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:49: 55:52

    bb0: {
        _0 = E2::<X>::_2D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:49: 55:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:49: 55:52
    }
}

fn E2::_2E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:57: 55:60

    bb0: {
        _0 = E2::<X>::_2E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:57: 55:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:57: 55:60
    }
}

// MIR FOR CTFE
fn E2::_2E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:57: 55:60

    bb0: {
        _0 = E2::<X>::_2E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:57: 55:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:57: 55:60
    }
}

fn E2::_2F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:65: 55:68

    bb0: {
        _0 = E2::<X>::_2F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:65: 55:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:65: 55:68
    }
}

// MIR FOR CTFE
fn E2::_2F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:55:65: 55:68

    bb0: {
        _0 = E2::<X>::_2F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:55:65: 55:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:55:65: 55:68
    }
}

fn E2::_30(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:9: 56:12

    bb0: {
        _0 = E2::<X>::_30(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:9: 56:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:9: 56:12
    }
}

// MIR FOR CTFE
fn E2::_30(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:9: 56:12

    bb0: {
        _0 = E2::<X>::_30(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:9: 56:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:9: 56:12
    }
}

fn E2::_31(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:17: 56:20

    bb0: {
        _0 = E2::<X>::_31(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:17: 56:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:17: 56:20
    }
}

// MIR FOR CTFE
fn E2::_31(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:17: 56:20

    bb0: {
        _0 = E2::<X>::_31(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:17: 56:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:17: 56:20
    }
}

fn E2::_32(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:25: 56:28

    bb0: {
        _0 = E2::<X>::_32(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:25: 56:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:25: 56:28
    }
}

// MIR FOR CTFE
fn E2::_32(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:25: 56:28

    bb0: {
        _0 = E2::<X>::_32(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:25: 56:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:25: 56:28
    }
}

fn E2::_33(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:33: 56:36

    bb0: {
        _0 = E2::<X>::_33(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:33: 56:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:33: 56:36
    }
}

// MIR FOR CTFE
fn E2::_33(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:33: 56:36

    bb0: {
        _0 = E2::<X>::_33(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:33: 56:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:33: 56:36
    }
}

fn E2::_34(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:41: 56:44

    bb0: {
        _0 = E2::<X>::_34(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:41: 56:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:41: 56:44
    }
}

// MIR FOR CTFE
fn E2::_34(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:41: 56:44

    bb0: {
        _0 = E2::<X>::_34(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:41: 56:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:41: 56:44
    }
}

fn E2::_35(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:49: 56:52

    bb0: {
        _0 = E2::<X>::_35(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:49: 56:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:49: 56:52
    }
}

// MIR FOR CTFE
fn E2::_35(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:49: 56:52

    bb0: {
        _0 = E2::<X>::_35(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:49: 56:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:49: 56:52
    }
}

fn E2::_36(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:57: 56:60

    bb0: {
        _0 = E2::<X>::_36(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:57: 56:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:57: 56:60
    }
}

// MIR FOR CTFE
fn E2::_36(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:57: 56:60

    bb0: {
        _0 = E2::<X>::_36(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:57: 56:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:57: 56:60
    }
}

fn E2::_37(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:65: 56:68

    bb0: {
        _0 = E2::<X>::_37(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:65: 56:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:65: 56:68
    }
}

// MIR FOR CTFE
fn E2::_37(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:56:65: 56:68

    bb0: {
        _0 = E2::<X>::_37(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:56:65: 56:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:56:65: 56:68
    }
}

fn E2::_38(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:9: 57:12

    bb0: {
        _0 = E2::<X>::_38(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:9: 57:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:9: 57:12
    }
}

// MIR FOR CTFE
fn E2::_38(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:9: 57:12

    bb0: {
        _0 = E2::<X>::_38(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:9: 57:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:9: 57:12
    }
}

fn E2::_39(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:17: 57:20

    bb0: {
        _0 = E2::<X>::_39(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:17: 57:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:17: 57:20
    }
}

// MIR FOR CTFE
fn E2::_39(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:17: 57:20

    bb0: {
        _0 = E2::<X>::_39(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:17: 57:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:17: 57:20
    }
}

fn E2::_3A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:25: 57:28

    bb0: {
        _0 = E2::<X>::_3A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:25: 57:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:25: 57:28
    }
}

// MIR FOR CTFE
fn E2::_3A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:25: 57:28

    bb0: {
        _0 = E2::<X>::_3A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:25: 57:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:25: 57:28
    }
}

fn E2::_3B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:33: 57:36

    bb0: {
        _0 = E2::<X>::_3B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:33: 57:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:33: 57:36
    }
}

// MIR FOR CTFE
fn E2::_3B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:33: 57:36

    bb0: {
        _0 = E2::<X>::_3B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:33: 57:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:33: 57:36
    }
}

fn E2::_3C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:41: 57:44

    bb0: {
        _0 = E2::<X>::_3C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:41: 57:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:41: 57:44
    }
}

// MIR FOR CTFE
fn E2::_3C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:41: 57:44

    bb0: {
        _0 = E2::<X>::_3C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:41: 57:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:41: 57:44
    }
}

fn E2::_3D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:49: 57:52

    bb0: {
        _0 = E2::<X>::_3D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:49: 57:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:49: 57:52
    }
}

// MIR FOR CTFE
fn E2::_3D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:49: 57:52

    bb0: {
        _0 = E2::<X>::_3D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:49: 57:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:49: 57:52
    }
}

fn E2::_3E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:57: 57:60

    bb0: {
        _0 = E2::<X>::_3E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:57: 57:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:57: 57:60
    }
}

// MIR FOR CTFE
fn E2::_3E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:57: 57:60

    bb0: {
        _0 = E2::<X>::_3E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:57: 57:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:57: 57:60
    }
}

fn E2::_3F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:65: 57:68

    bb0: {
        _0 = E2::<X>::_3F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:65: 57:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:65: 57:68
    }
}

// MIR FOR CTFE
fn E2::_3F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:57:65: 57:68

    bb0: {
        _0 = E2::<X>::_3F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:57:65: 57:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:57:65: 57:68
    }
}

fn E2::_40(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:9: 58:12

    bb0: {
        _0 = E2::<X>::_40(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:9: 58:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:9: 58:12
    }
}

// MIR FOR CTFE
fn E2::_40(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:9: 58:12

    bb0: {
        _0 = E2::<X>::_40(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:9: 58:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:9: 58:12
    }
}

fn E2::_41(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:17: 58:20

    bb0: {
        _0 = E2::<X>::_41(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:17: 58:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:17: 58:20
    }
}

// MIR FOR CTFE
fn E2::_41(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:17: 58:20

    bb0: {
        _0 = E2::<X>::_41(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:17: 58:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:17: 58:20
    }
}

fn E2::_42(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:25: 58:28

    bb0: {
        _0 = E2::<X>::_42(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:25: 58:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:25: 58:28
    }
}

// MIR FOR CTFE
fn E2::_42(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:25: 58:28

    bb0: {
        _0 = E2::<X>::_42(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:25: 58:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:25: 58:28
    }
}

fn E2::_43(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:33: 58:36

    bb0: {
        _0 = E2::<X>::_43(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:33: 58:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:33: 58:36
    }
}

// MIR FOR CTFE
fn E2::_43(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:33: 58:36

    bb0: {
        _0 = E2::<X>::_43(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:33: 58:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:33: 58:36
    }
}

fn E2::_44(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:41: 58:44

    bb0: {
        _0 = E2::<X>::_44(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:41: 58:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:41: 58:44
    }
}

// MIR FOR CTFE
fn E2::_44(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:41: 58:44

    bb0: {
        _0 = E2::<X>::_44(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:41: 58:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:41: 58:44
    }
}

fn E2::_45(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:49: 58:52

    bb0: {
        _0 = E2::<X>::_45(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:49: 58:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:49: 58:52
    }
}

// MIR FOR CTFE
fn E2::_45(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:49: 58:52

    bb0: {
        _0 = E2::<X>::_45(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:49: 58:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:49: 58:52
    }
}

fn E2::_46(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:57: 58:60

    bb0: {
        _0 = E2::<X>::_46(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:57: 58:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:57: 58:60
    }
}

// MIR FOR CTFE
fn E2::_46(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:57: 58:60

    bb0: {
        _0 = E2::<X>::_46(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:57: 58:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:57: 58:60
    }
}

fn E2::_47(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:65: 58:68

    bb0: {
        _0 = E2::<X>::_47(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:65: 58:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:65: 58:68
    }
}

// MIR FOR CTFE
fn E2::_47(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:58:65: 58:68

    bb0: {
        _0 = E2::<X>::_47(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:58:65: 58:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:58:65: 58:68
    }
}

fn E2::_48(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:9: 59:12

    bb0: {
        _0 = E2::<X>::_48(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:9: 59:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:9: 59:12
    }
}

// MIR FOR CTFE
fn E2::_48(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:9: 59:12

    bb0: {
        _0 = E2::<X>::_48(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:9: 59:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:9: 59:12
    }
}

fn E2::_49(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:17: 59:20

    bb0: {
        _0 = E2::<X>::_49(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:17: 59:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:17: 59:20
    }
}

// MIR FOR CTFE
fn E2::_49(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:17: 59:20

    bb0: {
        _0 = E2::<X>::_49(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:17: 59:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:17: 59:20
    }
}

fn E2::_4A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:25: 59:28

    bb0: {
        _0 = E2::<X>::_4A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:25: 59:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:25: 59:28
    }
}

// MIR FOR CTFE
fn E2::_4A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:25: 59:28

    bb0: {
        _0 = E2::<X>::_4A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:25: 59:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:25: 59:28
    }
}

fn E2::_4B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:33: 59:36

    bb0: {
        _0 = E2::<X>::_4B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:33: 59:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:33: 59:36
    }
}

// MIR FOR CTFE
fn E2::_4B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:33: 59:36

    bb0: {
        _0 = E2::<X>::_4B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:33: 59:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:33: 59:36
    }
}

fn E2::_4C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:41: 59:44

    bb0: {
        _0 = E2::<X>::_4C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:41: 59:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:41: 59:44
    }
}

// MIR FOR CTFE
fn E2::_4C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:41: 59:44

    bb0: {
        _0 = E2::<X>::_4C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:41: 59:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:41: 59:44
    }
}

fn E2::_4D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:49: 59:52

    bb0: {
        _0 = E2::<X>::_4D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:49: 59:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:49: 59:52
    }
}

// MIR FOR CTFE
fn E2::_4D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:49: 59:52

    bb0: {
        _0 = E2::<X>::_4D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:49: 59:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:49: 59:52
    }
}

fn E2::_4E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:57: 59:60

    bb0: {
        _0 = E2::<X>::_4E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:57: 59:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:57: 59:60
    }
}

// MIR FOR CTFE
fn E2::_4E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:57: 59:60

    bb0: {
        _0 = E2::<X>::_4E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:57: 59:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:57: 59:60
    }
}

fn E2::_4F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:65: 59:68

    bb0: {
        _0 = E2::<X>::_4F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:65: 59:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:65: 59:68
    }
}

// MIR FOR CTFE
fn E2::_4F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:59:65: 59:68

    bb0: {
        _0 = E2::<X>::_4F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:59:65: 59:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:59:65: 59:68
    }
}

fn E2::_50(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:9: 60:12

    bb0: {
        _0 = E2::<X>::_50(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:9: 60:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:9: 60:12
    }
}

// MIR FOR CTFE
fn E2::_50(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:9: 60:12

    bb0: {
        _0 = E2::<X>::_50(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:9: 60:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:9: 60:12
    }
}

fn E2::_51(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:17: 60:20

    bb0: {
        _0 = E2::<X>::_51(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:17: 60:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:17: 60:20
    }
}

// MIR FOR CTFE
fn E2::_51(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:17: 60:20

    bb0: {
        _0 = E2::<X>::_51(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:17: 60:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:17: 60:20
    }
}

fn E2::_52(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:25: 60:28

    bb0: {
        _0 = E2::<X>::_52(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:25: 60:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:25: 60:28
    }
}

// MIR FOR CTFE
fn E2::_52(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:25: 60:28

    bb0: {
        _0 = E2::<X>::_52(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:25: 60:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:25: 60:28
    }
}

fn E2::_53(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:33: 60:36

    bb0: {
        _0 = E2::<X>::_53(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:33: 60:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:33: 60:36
    }
}

// MIR FOR CTFE
fn E2::_53(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:33: 60:36

    bb0: {
        _0 = E2::<X>::_53(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:33: 60:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:33: 60:36
    }
}

fn E2::_54(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:41: 60:44

    bb0: {
        _0 = E2::<X>::_54(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:41: 60:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:41: 60:44
    }
}

// MIR FOR CTFE
fn E2::_54(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:41: 60:44

    bb0: {
        _0 = E2::<X>::_54(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:41: 60:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:41: 60:44
    }
}

fn E2::_55(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:49: 60:52

    bb0: {
        _0 = E2::<X>::_55(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:49: 60:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:49: 60:52
    }
}

// MIR FOR CTFE
fn E2::_55(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:49: 60:52

    bb0: {
        _0 = E2::<X>::_55(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:49: 60:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:49: 60:52
    }
}

fn E2::_56(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:57: 60:60

    bb0: {
        _0 = E2::<X>::_56(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:57: 60:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:57: 60:60
    }
}

// MIR FOR CTFE
fn E2::_56(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:57: 60:60

    bb0: {
        _0 = E2::<X>::_56(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:57: 60:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:57: 60:60
    }
}

fn E2::_57(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:65: 60:68

    bb0: {
        _0 = E2::<X>::_57(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:65: 60:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:65: 60:68
    }
}

// MIR FOR CTFE
fn E2::_57(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:60:65: 60:68

    bb0: {
        _0 = E2::<X>::_57(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:60:65: 60:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:60:65: 60:68
    }
}

fn E2::_58(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:9: 61:12

    bb0: {
        _0 = E2::<X>::_58(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:9: 61:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:9: 61:12
    }
}

// MIR FOR CTFE
fn E2::_58(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:9: 61:12

    bb0: {
        _0 = E2::<X>::_58(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:9: 61:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:9: 61:12
    }
}

fn E2::_59(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:17: 61:20

    bb0: {
        _0 = E2::<X>::_59(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:17: 61:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:17: 61:20
    }
}

// MIR FOR CTFE
fn E2::_59(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:17: 61:20

    bb0: {
        _0 = E2::<X>::_59(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:17: 61:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:17: 61:20
    }
}

fn E2::_5A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:25: 61:28

    bb0: {
        _0 = E2::<X>::_5A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:25: 61:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:25: 61:28
    }
}

// MIR FOR CTFE
fn E2::_5A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:25: 61:28

    bb0: {
        _0 = E2::<X>::_5A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:25: 61:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:25: 61:28
    }
}

fn E2::_5B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:33: 61:36

    bb0: {
        _0 = E2::<X>::_5B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:33: 61:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:33: 61:36
    }
}

// MIR FOR CTFE
fn E2::_5B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:33: 61:36

    bb0: {
        _0 = E2::<X>::_5B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:33: 61:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:33: 61:36
    }
}

fn E2::_5C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:41: 61:44

    bb0: {
        _0 = E2::<X>::_5C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:41: 61:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:41: 61:44
    }
}

// MIR FOR CTFE
fn E2::_5C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:41: 61:44

    bb0: {
        _0 = E2::<X>::_5C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:41: 61:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:41: 61:44
    }
}

fn E2::_5D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:49: 61:52

    bb0: {
        _0 = E2::<X>::_5D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:49: 61:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:49: 61:52
    }
}

// MIR FOR CTFE
fn E2::_5D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:49: 61:52

    bb0: {
        _0 = E2::<X>::_5D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:49: 61:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:49: 61:52
    }
}

fn E2::_5E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:57: 61:60

    bb0: {
        _0 = E2::<X>::_5E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:57: 61:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:57: 61:60
    }
}

// MIR FOR CTFE
fn E2::_5E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:57: 61:60

    bb0: {
        _0 = E2::<X>::_5E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:57: 61:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:57: 61:60
    }
}

fn E2::_5F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:65: 61:68

    bb0: {
        _0 = E2::<X>::_5F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:65: 61:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:65: 61:68
    }
}

// MIR FOR CTFE
fn E2::_5F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:61:65: 61:68

    bb0: {
        _0 = E2::<X>::_5F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:61:65: 61:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:61:65: 61:68
    }
}

fn E2::_60(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:9: 62:12

    bb0: {
        _0 = E2::<X>::_60(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:9: 62:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:9: 62:12
    }
}

// MIR FOR CTFE
fn E2::_60(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:9: 62:12

    bb0: {
        _0 = E2::<X>::_60(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:9: 62:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:9: 62:12
    }
}

fn E2::_61(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:17: 62:20

    bb0: {
        _0 = E2::<X>::_61(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:17: 62:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:17: 62:20
    }
}

// MIR FOR CTFE
fn E2::_61(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:17: 62:20

    bb0: {
        _0 = E2::<X>::_61(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:17: 62:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:17: 62:20
    }
}

fn E2::_62(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:25: 62:28

    bb0: {
        _0 = E2::<X>::_62(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:25: 62:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:25: 62:28
    }
}

// MIR FOR CTFE
fn E2::_62(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:25: 62:28

    bb0: {
        _0 = E2::<X>::_62(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:25: 62:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:25: 62:28
    }
}

fn E2::_63(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:33: 62:36

    bb0: {
        _0 = E2::<X>::_63(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:33: 62:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:33: 62:36
    }
}

// MIR FOR CTFE
fn E2::_63(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:33: 62:36

    bb0: {
        _0 = E2::<X>::_63(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:33: 62:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:33: 62:36
    }
}

fn E2::_64(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:41: 62:44

    bb0: {
        _0 = E2::<X>::_64(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:41: 62:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:41: 62:44
    }
}

// MIR FOR CTFE
fn E2::_64(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:41: 62:44

    bb0: {
        _0 = E2::<X>::_64(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:41: 62:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:41: 62:44
    }
}

fn E2::_65(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:49: 62:52

    bb0: {
        _0 = E2::<X>::_65(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:49: 62:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:49: 62:52
    }
}

// MIR FOR CTFE
fn E2::_65(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:49: 62:52

    bb0: {
        _0 = E2::<X>::_65(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:49: 62:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:49: 62:52
    }
}

fn E2::_66(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:57: 62:60

    bb0: {
        _0 = E2::<X>::_66(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:57: 62:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:57: 62:60
    }
}

// MIR FOR CTFE
fn E2::_66(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:57: 62:60

    bb0: {
        _0 = E2::<X>::_66(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:57: 62:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:57: 62:60
    }
}

fn E2::_67(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:65: 62:68

    bb0: {
        _0 = E2::<X>::_67(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:65: 62:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:65: 62:68
    }
}

// MIR FOR CTFE
fn E2::_67(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:62:65: 62:68

    bb0: {
        _0 = E2::<X>::_67(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:62:65: 62:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:62:65: 62:68
    }
}

fn E2::_68(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:9: 63:12

    bb0: {
        _0 = E2::<X>::_68(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:9: 63:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:9: 63:12
    }
}

// MIR FOR CTFE
fn E2::_68(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:9: 63:12

    bb0: {
        _0 = E2::<X>::_68(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:9: 63:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:9: 63:12
    }
}

fn E2::_69(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:17: 63:20

    bb0: {
        _0 = E2::<X>::_69(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:17: 63:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:17: 63:20
    }
}

// MIR FOR CTFE
fn E2::_69(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:17: 63:20

    bb0: {
        _0 = E2::<X>::_69(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:17: 63:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:17: 63:20
    }
}

fn E2::_6A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:25: 63:28

    bb0: {
        _0 = E2::<X>::_6A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:25: 63:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:25: 63:28
    }
}

// MIR FOR CTFE
fn E2::_6A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:25: 63:28

    bb0: {
        _0 = E2::<X>::_6A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:25: 63:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:25: 63:28
    }
}

fn E2::_6B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:33: 63:36

    bb0: {
        _0 = E2::<X>::_6B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:33: 63:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:33: 63:36
    }
}

// MIR FOR CTFE
fn E2::_6B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:33: 63:36

    bb0: {
        _0 = E2::<X>::_6B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:33: 63:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:33: 63:36
    }
}

fn E2::_6C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:41: 63:44

    bb0: {
        _0 = E2::<X>::_6C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:41: 63:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:41: 63:44
    }
}

// MIR FOR CTFE
fn E2::_6C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:41: 63:44

    bb0: {
        _0 = E2::<X>::_6C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:41: 63:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:41: 63:44
    }
}

fn E2::_6D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:49: 63:52

    bb0: {
        _0 = E2::<X>::_6D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:49: 63:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:49: 63:52
    }
}

// MIR FOR CTFE
fn E2::_6D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:49: 63:52

    bb0: {
        _0 = E2::<X>::_6D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:49: 63:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:49: 63:52
    }
}

fn E2::_6E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:57: 63:60

    bb0: {
        _0 = E2::<X>::_6E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:57: 63:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:57: 63:60
    }
}

// MIR FOR CTFE
fn E2::_6E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:57: 63:60

    bb0: {
        _0 = E2::<X>::_6E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:57: 63:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:57: 63:60
    }
}

fn E2::_6F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:65: 63:68

    bb0: {
        _0 = E2::<X>::_6F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:65: 63:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:65: 63:68
    }
}

// MIR FOR CTFE
fn E2::_6F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:63:65: 63:68

    bb0: {
        _0 = E2::<X>::_6F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:63:65: 63:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:63:65: 63:68
    }
}

fn E2::_70(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:9: 64:12

    bb0: {
        _0 = E2::<X>::_70(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:9: 64:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:9: 64:12
    }
}

// MIR FOR CTFE
fn E2::_70(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:9: 64:12

    bb0: {
        _0 = E2::<X>::_70(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:9: 64:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:9: 64:12
    }
}

fn E2::_71(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:17: 64:20

    bb0: {
        _0 = E2::<X>::_71(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:17: 64:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:17: 64:20
    }
}

// MIR FOR CTFE
fn E2::_71(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:17: 64:20

    bb0: {
        _0 = E2::<X>::_71(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:17: 64:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:17: 64:20
    }
}

fn E2::_72(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:25: 64:28

    bb0: {
        _0 = E2::<X>::_72(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:25: 64:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:25: 64:28
    }
}

// MIR FOR CTFE
fn E2::_72(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:25: 64:28

    bb0: {
        _0 = E2::<X>::_72(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:25: 64:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:25: 64:28
    }
}

fn E2::_73(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:33: 64:36

    bb0: {
        _0 = E2::<X>::_73(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:33: 64:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:33: 64:36
    }
}

// MIR FOR CTFE
fn E2::_73(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:33: 64:36

    bb0: {
        _0 = E2::<X>::_73(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:33: 64:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:33: 64:36
    }
}

fn E2::_74(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:41: 64:44

    bb0: {
        _0 = E2::<X>::_74(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:41: 64:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:41: 64:44
    }
}

// MIR FOR CTFE
fn E2::_74(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:41: 64:44

    bb0: {
        _0 = E2::<X>::_74(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:41: 64:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:41: 64:44
    }
}

fn E2::_75(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:49: 64:52

    bb0: {
        _0 = E2::<X>::_75(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:49: 64:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:49: 64:52
    }
}

// MIR FOR CTFE
fn E2::_75(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:49: 64:52

    bb0: {
        _0 = E2::<X>::_75(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:49: 64:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:49: 64:52
    }
}

fn E2::_76(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:57: 64:60

    bb0: {
        _0 = E2::<X>::_76(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:57: 64:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:57: 64:60
    }
}

// MIR FOR CTFE
fn E2::_76(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:57: 64:60

    bb0: {
        _0 = E2::<X>::_76(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:57: 64:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:57: 64:60
    }
}

fn E2::_77(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:65: 64:68

    bb0: {
        _0 = E2::<X>::_77(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:65: 64:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:65: 64:68
    }
}

// MIR FOR CTFE
fn E2::_77(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:64:65: 64:68

    bb0: {
        _0 = E2::<X>::_77(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:64:65: 64:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:64:65: 64:68
    }
}

fn E2::_78(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:9: 65:12

    bb0: {
        _0 = E2::<X>::_78(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:9: 65:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:9: 65:12
    }
}

// MIR FOR CTFE
fn E2::_78(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:9: 65:12

    bb0: {
        _0 = E2::<X>::_78(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:9: 65:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:9: 65:12
    }
}

fn E2::_79(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:17: 65:20

    bb0: {
        _0 = E2::<X>::_79(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:17: 65:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:17: 65:20
    }
}

// MIR FOR CTFE
fn E2::_79(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:17: 65:20

    bb0: {
        _0 = E2::<X>::_79(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:17: 65:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:17: 65:20
    }
}

fn E2::_7A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:25: 65:28

    bb0: {
        _0 = E2::<X>::_7A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:25: 65:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:25: 65:28
    }
}

// MIR FOR CTFE
fn E2::_7A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:25: 65:28

    bb0: {
        _0 = E2::<X>::_7A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:25: 65:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:25: 65:28
    }
}

fn E2::_7B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:33: 65:36

    bb0: {
        _0 = E2::<X>::_7B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:33: 65:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:33: 65:36
    }
}

// MIR FOR CTFE
fn E2::_7B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:33: 65:36

    bb0: {
        _0 = E2::<X>::_7B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:33: 65:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:33: 65:36
    }
}

fn E2::_7C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:41: 65:44

    bb0: {
        _0 = E2::<X>::_7C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:41: 65:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:41: 65:44
    }
}

// MIR FOR CTFE
fn E2::_7C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:41: 65:44

    bb0: {
        _0 = E2::<X>::_7C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:41: 65:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:41: 65:44
    }
}

fn E2::_7D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:49: 65:52

    bb0: {
        _0 = E2::<X>::_7D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:49: 65:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:49: 65:52
    }
}

// MIR FOR CTFE
fn E2::_7D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:49: 65:52

    bb0: {
        _0 = E2::<X>::_7D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:49: 65:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:49: 65:52
    }
}

fn E2::_7E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:57: 65:60

    bb0: {
        _0 = E2::<X>::_7E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:57: 65:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:57: 65:60
    }
}

// MIR FOR CTFE
fn E2::_7E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:57: 65:60

    bb0: {
        _0 = E2::<X>::_7E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:57: 65:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:57: 65:60
    }
}

fn E2::_7F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:65: 65:68

    bb0: {
        _0 = E2::<X>::_7F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:65: 65:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:65: 65:68
    }
}

// MIR FOR CTFE
fn E2::_7F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:65:65: 65:68

    bb0: {
        _0 = E2::<X>::_7F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:65:65: 65:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:65:65: 65:68
    }
}

fn E2::_80(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:9: 66:12

    bb0: {
        _0 = E2::<X>::_80(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:9: 66:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:9: 66:12
    }
}

// MIR FOR CTFE
fn E2::_80(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:9: 66:12

    bb0: {
        _0 = E2::<X>::_80(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:9: 66:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:9: 66:12
    }
}

fn E2::_81(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:17: 66:20

    bb0: {
        _0 = E2::<X>::_81(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:17: 66:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:17: 66:20
    }
}

// MIR FOR CTFE
fn E2::_81(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:17: 66:20

    bb0: {
        _0 = E2::<X>::_81(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:17: 66:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:17: 66:20
    }
}

fn E2::_82(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:25: 66:28

    bb0: {
        _0 = E2::<X>::_82(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:25: 66:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:25: 66:28
    }
}

// MIR FOR CTFE
fn E2::_82(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:25: 66:28

    bb0: {
        _0 = E2::<X>::_82(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:25: 66:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:25: 66:28
    }
}

fn E2::_83(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:33: 66:36

    bb0: {
        _0 = E2::<X>::_83(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:33: 66:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:33: 66:36
    }
}

// MIR FOR CTFE
fn E2::_83(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:33: 66:36

    bb0: {
        _0 = E2::<X>::_83(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:33: 66:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:33: 66:36
    }
}

fn E2::_84(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:41: 66:44

    bb0: {
        _0 = E2::<X>::_84(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:41: 66:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:41: 66:44
    }
}

// MIR FOR CTFE
fn E2::_84(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:41: 66:44

    bb0: {
        _0 = E2::<X>::_84(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:41: 66:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:41: 66:44
    }
}

fn E2::_85(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:49: 66:52

    bb0: {
        _0 = E2::<X>::_85(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:49: 66:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:49: 66:52
    }
}

// MIR FOR CTFE
fn E2::_85(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:49: 66:52

    bb0: {
        _0 = E2::<X>::_85(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:49: 66:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:49: 66:52
    }
}

fn E2::_86(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:57: 66:60

    bb0: {
        _0 = E2::<X>::_86(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:57: 66:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:57: 66:60
    }
}

// MIR FOR CTFE
fn E2::_86(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:57: 66:60

    bb0: {
        _0 = E2::<X>::_86(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:57: 66:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:57: 66:60
    }
}

fn E2::_87(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:65: 66:68

    bb0: {
        _0 = E2::<X>::_87(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:65: 66:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:65: 66:68
    }
}

// MIR FOR CTFE
fn E2::_87(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:66:65: 66:68

    bb0: {
        _0 = E2::<X>::_87(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:66:65: 66:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:66:65: 66:68
    }
}

fn E2::_88(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:9: 67:12

    bb0: {
        _0 = E2::<X>::_88(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:9: 67:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:9: 67:12
    }
}

// MIR FOR CTFE
fn E2::_88(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:9: 67:12

    bb0: {
        _0 = E2::<X>::_88(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:9: 67:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:9: 67:12
    }
}

fn E2::_89(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:17: 67:20

    bb0: {
        _0 = E2::<X>::_89(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:17: 67:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:17: 67:20
    }
}

// MIR FOR CTFE
fn E2::_89(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:17: 67:20

    bb0: {
        _0 = E2::<X>::_89(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:17: 67:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:17: 67:20
    }
}

fn E2::_8A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:25: 67:28

    bb0: {
        _0 = E2::<X>::_8A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:25: 67:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:25: 67:28
    }
}

// MIR FOR CTFE
fn E2::_8A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:25: 67:28

    bb0: {
        _0 = E2::<X>::_8A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:25: 67:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:25: 67:28
    }
}

fn E2::_8B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:33: 67:36

    bb0: {
        _0 = E2::<X>::_8B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:33: 67:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:33: 67:36
    }
}

// MIR FOR CTFE
fn E2::_8B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:33: 67:36

    bb0: {
        _0 = E2::<X>::_8B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:33: 67:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:33: 67:36
    }
}

fn E2::_8C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:41: 67:44

    bb0: {
        _0 = E2::<X>::_8C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:41: 67:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:41: 67:44
    }
}

// MIR FOR CTFE
fn E2::_8C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:41: 67:44

    bb0: {
        _0 = E2::<X>::_8C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:41: 67:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:41: 67:44
    }
}

fn E2::_8D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:49: 67:52

    bb0: {
        _0 = E2::<X>::_8D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:49: 67:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:49: 67:52
    }
}

// MIR FOR CTFE
fn E2::_8D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:49: 67:52

    bb0: {
        _0 = E2::<X>::_8D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:49: 67:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:49: 67:52
    }
}

fn E2::_8E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:57: 67:60

    bb0: {
        _0 = E2::<X>::_8E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:57: 67:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:57: 67:60
    }
}

// MIR FOR CTFE
fn E2::_8E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:57: 67:60

    bb0: {
        _0 = E2::<X>::_8E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:57: 67:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:57: 67:60
    }
}

fn E2::_8F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:65: 67:68

    bb0: {
        _0 = E2::<X>::_8F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:65: 67:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:65: 67:68
    }
}

// MIR FOR CTFE
fn E2::_8F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:67:65: 67:68

    bb0: {
        _0 = E2::<X>::_8F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:67:65: 67:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:67:65: 67:68
    }
}

fn E2::_90(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:9: 68:12

    bb0: {
        _0 = E2::<X>::_90(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:9: 68:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:9: 68:12
    }
}

// MIR FOR CTFE
fn E2::_90(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:9: 68:12

    bb0: {
        _0 = E2::<X>::_90(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:9: 68:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:9: 68:12
    }
}

fn E2::_91(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:17: 68:20

    bb0: {
        _0 = E2::<X>::_91(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:17: 68:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:17: 68:20
    }
}

// MIR FOR CTFE
fn E2::_91(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:17: 68:20

    bb0: {
        _0 = E2::<X>::_91(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:17: 68:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:17: 68:20
    }
}

fn E2::_92(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:25: 68:28

    bb0: {
        _0 = E2::<X>::_92(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:25: 68:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:25: 68:28
    }
}

// MIR FOR CTFE
fn E2::_92(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:25: 68:28

    bb0: {
        _0 = E2::<X>::_92(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:25: 68:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:25: 68:28
    }
}

fn E2::_93(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:33: 68:36

    bb0: {
        _0 = E2::<X>::_93(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:33: 68:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:33: 68:36
    }
}

// MIR FOR CTFE
fn E2::_93(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:33: 68:36

    bb0: {
        _0 = E2::<X>::_93(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:33: 68:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:33: 68:36
    }
}

fn E2::_94(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:41: 68:44

    bb0: {
        _0 = E2::<X>::_94(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:41: 68:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:41: 68:44
    }
}

// MIR FOR CTFE
fn E2::_94(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:41: 68:44

    bb0: {
        _0 = E2::<X>::_94(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:41: 68:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:41: 68:44
    }
}

fn E2::_95(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:49: 68:52

    bb0: {
        _0 = E2::<X>::_95(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:49: 68:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:49: 68:52
    }
}

// MIR FOR CTFE
fn E2::_95(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:49: 68:52

    bb0: {
        _0 = E2::<X>::_95(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:49: 68:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:49: 68:52
    }
}

fn E2::_96(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:57: 68:60

    bb0: {
        _0 = E2::<X>::_96(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:57: 68:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:57: 68:60
    }
}

// MIR FOR CTFE
fn E2::_96(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:57: 68:60

    bb0: {
        _0 = E2::<X>::_96(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:57: 68:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:57: 68:60
    }
}

fn E2::_97(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:65: 68:68

    bb0: {
        _0 = E2::<X>::_97(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:65: 68:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:65: 68:68
    }
}

// MIR FOR CTFE
fn E2::_97(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:68:65: 68:68

    bb0: {
        _0 = E2::<X>::_97(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:68:65: 68:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:68:65: 68:68
    }
}

fn E2::_98(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:9: 69:12

    bb0: {
        _0 = E2::<X>::_98(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:9: 69:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:9: 69:12
    }
}

// MIR FOR CTFE
fn E2::_98(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:9: 69:12

    bb0: {
        _0 = E2::<X>::_98(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:9: 69:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:9: 69:12
    }
}

fn E2::_99(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:17: 69:20

    bb0: {
        _0 = E2::<X>::_99(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:17: 69:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:17: 69:20
    }
}

// MIR FOR CTFE
fn E2::_99(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:17: 69:20

    bb0: {
        _0 = E2::<X>::_99(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:17: 69:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:17: 69:20
    }
}

fn E2::_9A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:25: 69:28

    bb0: {
        _0 = E2::<X>::_9A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:25: 69:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:25: 69:28
    }
}

// MIR FOR CTFE
fn E2::_9A(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:25: 69:28

    bb0: {
        _0 = E2::<X>::_9A(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:25: 69:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:25: 69:28
    }
}

fn E2::_9B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:33: 69:36

    bb0: {
        _0 = E2::<X>::_9B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:33: 69:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:33: 69:36
    }
}

// MIR FOR CTFE
fn E2::_9B(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:33: 69:36

    bb0: {
        _0 = E2::<X>::_9B(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:33: 69:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:33: 69:36
    }
}

fn E2::_9C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:41: 69:44

    bb0: {
        _0 = E2::<X>::_9C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:41: 69:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:41: 69:44
    }
}

// MIR FOR CTFE
fn E2::_9C(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:41: 69:44

    bb0: {
        _0 = E2::<X>::_9C(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:41: 69:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:41: 69:44
    }
}

fn E2::_9D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:49: 69:52

    bb0: {
        _0 = E2::<X>::_9D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:49: 69:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:49: 69:52
    }
}

// MIR FOR CTFE
fn E2::_9D(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:49: 69:52

    bb0: {
        _0 = E2::<X>::_9D(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:49: 69:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:49: 69:52
    }
}

fn E2::_9E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:57: 69:60

    bb0: {
        _0 = E2::<X>::_9E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:57: 69:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:57: 69:60
    }
}

// MIR FOR CTFE
fn E2::_9E(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:57: 69:60

    bb0: {
        _0 = E2::<X>::_9E(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:57: 69:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:57: 69:60
    }
}

fn E2::_9F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:65: 69:68

    bb0: {
        _0 = E2::<X>::_9F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:65: 69:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:65: 69:68
    }
}

// MIR FOR CTFE
fn E2::_9F(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:69:65: 69:68

    bb0: {
        _0 = E2::<X>::_9F(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:69:65: 69:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:69:65: 69:68
    }
}

fn E2::_A0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:9: 70:12

    bb0: {
        _0 = E2::<X>::_A0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:9: 70:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:9: 70:12
    }
}

// MIR FOR CTFE
fn E2::_A0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:9: 70:12

    bb0: {
        _0 = E2::<X>::_A0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:9: 70:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:9: 70:12
    }
}

fn E2::_A1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:17: 70:20

    bb0: {
        _0 = E2::<X>::_A1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:17: 70:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:17: 70:20
    }
}

// MIR FOR CTFE
fn E2::_A1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:17: 70:20

    bb0: {
        _0 = E2::<X>::_A1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:17: 70:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:17: 70:20
    }
}

fn E2::_A2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:25: 70:28

    bb0: {
        _0 = E2::<X>::_A2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:25: 70:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:25: 70:28
    }
}

// MIR FOR CTFE
fn E2::_A2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:25: 70:28

    bb0: {
        _0 = E2::<X>::_A2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:25: 70:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:25: 70:28
    }
}

fn E2::_A3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:33: 70:36

    bb0: {
        _0 = E2::<X>::_A3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:33: 70:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:33: 70:36
    }
}

// MIR FOR CTFE
fn E2::_A3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:33: 70:36

    bb0: {
        _0 = E2::<X>::_A3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:33: 70:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:33: 70:36
    }
}

fn E2::_A4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:41: 70:44

    bb0: {
        _0 = E2::<X>::_A4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:41: 70:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:41: 70:44
    }
}

// MIR FOR CTFE
fn E2::_A4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:41: 70:44

    bb0: {
        _0 = E2::<X>::_A4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:41: 70:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:41: 70:44
    }
}

fn E2::_A5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:49: 70:52

    bb0: {
        _0 = E2::<X>::_A5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:49: 70:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:49: 70:52
    }
}

// MIR FOR CTFE
fn E2::_A5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:49: 70:52

    bb0: {
        _0 = E2::<X>::_A5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:49: 70:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:49: 70:52
    }
}

fn E2::_A6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:57: 70:60

    bb0: {
        _0 = E2::<X>::_A6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:57: 70:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:57: 70:60
    }
}

// MIR FOR CTFE
fn E2::_A6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:57: 70:60

    bb0: {
        _0 = E2::<X>::_A6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:57: 70:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:57: 70:60
    }
}

fn E2::_A7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:65: 70:68

    bb0: {
        _0 = E2::<X>::_A7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:65: 70:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:65: 70:68
    }
}

// MIR FOR CTFE
fn E2::_A7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:70:65: 70:68

    bb0: {
        _0 = E2::<X>::_A7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:70:65: 70:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:70:65: 70:68
    }
}

fn E2::_A8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:9: 71:12

    bb0: {
        _0 = E2::<X>::_A8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:9: 71:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:9: 71:12
    }
}

// MIR FOR CTFE
fn E2::_A8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:9: 71:12

    bb0: {
        _0 = E2::<X>::_A8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:9: 71:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:9: 71:12
    }
}

fn E2::_A9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:17: 71:20

    bb0: {
        _0 = E2::<X>::_A9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:17: 71:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:17: 71:20
    }
}

// MIR FOR CTFE
fn E2::_A9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:17: 71:20

    bb0: {
        _0 = E2::<X>::_A9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:17: 71:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:17: 71:20
    }
}

fn E2::_AA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:25: 71:28

    bb0: {
        _0 = E2::<X>::_AA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:25: 71:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:25: 71:28
    }
}

// MIR FOR CTFE
fn E2::_AA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:25: 71:28

    bb0: {
        _0 = E2::<X>::_AA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:25: 71:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:25: 71:28
    }
}

fn E2::_AB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:33: 71:36

    bb0: {
        _0 = E2::<X>::_AB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:33: 71:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:33: 71:36
    }
}

// MIR FOR CTFE
fn E2::_AB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:33: 71:36

    bb0: {
        _0 = E2::<X>::_AB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:33: 71:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:33: 71:36
    }
}

fn E2::_AC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:41: 71:44

    bb0: {
        _0 = E2::<X>::_AC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:41: 71:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:41: 71:44
    }
}

// MIR FOR CTFE
fn E2::_AC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:41: 71:44

    bb0: {
        _0 = E2::<X>::_AC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:41: 71:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:41: 71:44
    }
}

fn E2::_AD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:49: 71:52

    bb0: {
        _0 = E2::<X>::_AD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:49: 71:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:49: 71:52
    }
}

// MIR FOR CTFE
fn E2::_AD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:49: 71:52

    bb0: {
        _0 = E2::<X>::_AD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:49: 71:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:49: 71:52
    }
}

fn E2::_AE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:57: 71:60

    bb0: {
        _0 = E2::<X>::_AE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:57: 71:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:57: 71:60
    }
}

// MIR FOR CTFE
fn E2::_AE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:57: 71:60

    bb0: {
        _0 = E2::<X>::_AE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:57: 71:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:57: 71:60
    }
}

fn E2::_AF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:65: 71:68

    bb0: {
        _0 = E2::<X>::_AF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:65: 71:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:65: 71:68
    }
}

// MIR FOR CTFE
fn E2::_AF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:71:65: 71:68

    bb0: {
        _0 = E2::<X>::_AF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:71:65: 71:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:71:65: 71:68
    }
}

fn E2::_B0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:9: 72:12

    bb0: {
        _0 = E2::<X>::_B0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:9: 72:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:9: 72:12
    }
}

// MIR FOR CTFE
fn E2::_B0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:9: 72:12

    bb0: {
        _0 = E2::<X>::_B0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:9: 72:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:9: 72:12
    }
}

fn E2::_B1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:17: 72:20

    bb0: {
        _0 = E2::<X>::_B1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:17: 72:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:17: 72:20
    }
}

// MIR FOR CTFE
fn E2::_B1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:17: 72:20

    bb0: {
        _0 = E2::<X>::_B1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:17: 72:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:17: 72:20
    }
}

fn E2::_B2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:25: 72:28

    bb0: {
        _0 = E2::<X>::_B2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:25: 72:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:25: 72:28
    }
}

// MIR FOR CTFE
fn E2::_B2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:25: 72:28

    bb0: {
        _0 = E2::<X>::_B2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:25: 72:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:25: 72:28
    }
}

fn E2::_B3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:33: 72:36

    bb0: {
        _0 = E2::<X>::_B3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:33: 72:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:33: 72:36
    }
}

// MIR FOR CTFE
fn E2::_B3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:33: 72:36

    bb0: {
        _0 = E2::<X>::_B3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:33: 72:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:33: 72:36
    }
}

fn E2::_B4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:41: 72:44

    bb0: {
        _0 = E2::<X>::_B4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:41: 72:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:41: 72:44
    }
}

// MIR FOR CTFE
fn E2::_B4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:41: 72:44

    bb0: {
        _0 = E2::<X>::_B4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:41: 72:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:41: 72:44
    }
}

fn E2::_B5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:49: 72:52

    bb0: {
        _0 = E2::<X>::_B5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:49: 72:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:49: 72:52
    }
}

// MIR FOR CTFE
fn E2::_B5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:49: 72:52

    bb0: {
        _0 = E2::<X>::_B5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:49: 72:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:49: 72:52
    }
}

fn E2::_B6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:57: 72:60

    bb0: {
        _0 = E2::<X>::_B6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:57: 72:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:57: 72:60
    }
}

// MIR FOR CTFE
fn E2::_B6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:57: 72:60

    bb0: {
        _0 = E2::<X>::_B6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:57: 72:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:57: 72:60
    }
}

fn E2::_B7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:65: 72:68

    bb0: {
        _0 = E2::<X>::_B7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:65: 72:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:65: 72:68
    }
}

// MIR FOR CTFE
fn E2::_B7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:72:65: 72:68

    bb0: {
        _0 = E2::<X>::_B7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:72:65: 72:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:72:65: 72:68
    }
}

fn E2::_B8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:9: 73:12

    bb0: {
        _0 = E2::<X>::_B8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:9: 73:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:9: 73:12
    }
}

// MIR FOR CTFE
fn E2::_B8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:9: 73:12

    bb0: {
        _0 = E2::<X>::_B8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:9: 73:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:9: 73:12
    }
}

fn E2::_B9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:17: 73:20

    bb0: {
        _0 = E2::<X>::_B9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:17: 73:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:17: 73:20
    }
}

// MIR FOR CTFE
fn E2::_B9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:17: 73:20

    bb0: {
        _0 = E2::<X>::_B9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:17: 73:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:17: 73:20
    }
}

fn E2::_BA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:25: 73:28

    bb0: {
        _0 = E2::<X>::_BA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:25: 73:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:25: 73:28
    }
}

// MIR FOR CTFE
fn E2::_BA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:25: 73:28

    bb0: {
        _0 = E2::<X>::_BA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:25: 73:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:25: 73:28
    }
}

fn E2::_BB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:33: 73:36

    bb0: {
        _0 = E2::<X>::_BB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:33: 73:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:33: 73:36
    }
}

// MIR FOR CTFE
fn E2::_BB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:33: 73:36

    bb0: {
        _0 = E2::<X>::_BB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:33: 73:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:33: 73:36
    }
}

fn E2::_BC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:41: 73:44

    bb0: {
        _0 = E2::<X>::_BC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:41: 73:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:41: 73:44
    }
}

// MIR FOR CTFE
fn E2::_BC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:41: 73:44

    bb0: {
        _0 = E2::<X>::_BC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:41: 73:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:41: 73:44
    }
}

fn E2::_BD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:49: 73:52

    bb0: {
        _0 = E2::<X>::_BD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:49: 73:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:49: 73:52
    }
}

// MIR FOR CTFE
fn E2::_BD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:49: 73:52

    bb0: {
        _0 = E2::<X>::_BD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:49: 73:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:49: 73:52
    }
}

fn E2::_BE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:57: 73:60

    bb0: {
        _0 = E2::<X>::_BE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:57: 73:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:57: 73:60
    }
}

// MIR FOR CTFE
fn E2::_BE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:57: 73:60

    bb0: {
        _0 = E2::<X>::_BE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:57: 73:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:57: 73:60
    }
}

fn E2::_BF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:65: 73:68

    bb0: {
        _0 = E2::<X>::_BF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:65: 73:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:65: 73:68
    }
}

// MIR FOR CTFE
fn E2::_BF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:73:65: 73:68

    bb0: {
        _0 = E2::<X>::_BF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:73:65: 73:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:73:65: 73:68
    }
}

fn E2::_C0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:9: 74:12

    bb0: {
        _0 = E2::<X>::_C0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:9: 74:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:9: 74:12
    }
}

// MIR FOR CTFE
fn E2::_C0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:9: 74:12

    bb0: {
        _0 = E2::<X>::_C0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:9: 74:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:9: 74:12
    }
}

fn E2::_C1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:17: 74:20

    bb0: {
        _0 = E2::<X>::_C1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:17: 74:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:17: 74:20
    }
}

// MIR FOR CTFE
fn E2::_C1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:17: 74:20

    bb0: {
        _0 = E2::<X>::_C1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:17: 74:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:17: 74:20
    }
}

fn E2::_C2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:25: 74:28

    bb0: {
        _0 = E2::<X>::_C2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:25: 74:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:25: 74:28
    }
}

// MIR FOR CTFE
fn E2::_C2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:25: 74:28

    bb0: {
        _0 = E2::<X>::_C2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:25: 74:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:25: 74:28
    }
}

fn E2::_C3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:33: 74:36

    bb0: {
        _0 = E2::<X>::_C3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:33: 74:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:33: 74:36
    }
}

// MIR FOR CTFE
fn E2::_C3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:33: 74:36

    bb0: {
        _0 = E2::<X>::_C3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:33: 74:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:33: 74:36
    }
}

fn E2::_C4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:41: 74:44

    bb0: {
        _0 = E2::<X>::_C4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:41: 74:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:41: 74:44
    }
}

// MIR FOR CTFE
fn E2::_C4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:41: 74:44

    bb0: {
        _0 = E2::<X>::_C4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:41: 74:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:41: 74:44
    }
}

fn E2::_C5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:49: 74:52

    bb0: {
        _0 = E2::<X>::_C5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:49: 74:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:49: 74:52
    }
}

// MIR FOR CTFE
fn E2::_C5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:49: 74:52

    bb0: {
        _0 = E2::<X>::_C5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:49: 74:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:49: 74:52
    }
}

fn E2::_C6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:57: 74:60

    bb0: {
        _0 = E2::<X>::_C6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:57: 74:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:57: 74:60
    }
}

// MIR FOR CTFE
fn E2::_C6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:57: 74:60

    bb0: {
        _0 = E2::<X>::_C6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:57: 74:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:57: 74:60
    }
}

fn E2::_C7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:65: 74:68

    bb0: {
        _0 = E2::<X>::_C7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:65: 74:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:65: 74:68
    }
}

// MIR FOR CTFE
fn E2::_C7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:74:65: 74:68

    bb0: {
        _0 = E2::<X>::_C7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:74:65: 74:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:74:65: 74:68
    }
}

fn E2::_C8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:9: 75:12

    bb0: {
        _0 = E2::<X>::_C8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:9: 75:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:9: 75:12
    }
}

// MIR FOR CTFE
fn E2::_C8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:9: 75:12

    bb0: {
        _0 = E2::<X>::_C8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:9: 75:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:9: 75:12
    }
}

fn E2::_C9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:17: 75:20

    bb0: {
        _0 = E2::<X>::_C9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:17: 75:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:17: 75:20
    }
}

// MIR FOR CTFE
fn E2::_C9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:17: 75:20

    bb0: {
        _0 = E2::<X>::_C9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:17: 75:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:17: 75:20
    }
}

fn E2::_CA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:25: 75:28

    bb0: {
        _0 = E2::<X>::_CA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:25: 75:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:25: 75:28
    }
}

// MIR FOR CTFE
fn E2::_CA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:25: 75:28

    bb0: {
        _0 = E2::<X>::_CA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:25: 75:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:25: 75:28
    }
}

fn E2::_CB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:33: 75:36

    bb0: {
        _0 = E2::<X>::_CB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:33: 75:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:33: 75:36
    }
}

// MIR FOR CTFE
fn E2::_CB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:33: 75:36

    bb0: {
        _0 = E2::<X>::_CB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:33: 75:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:33: 75:36
    }
}

fn E2::_CC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:41: 75:44

    bb0: {
        _0 = E2::<X>::_CC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:41: 75:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:41: 75:44
    }
}

// MIR FOR CTFE
fn E2::_CC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:41: 75:44

    bb0: {
        _0 = E2::<X>::_CC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:41: 75:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:41: 75:44
    }
}

fn E2::_CD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:49: 75:52

    bb0: {
        _0 = E2::<X>::_CD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:49: 75:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:49: 75:52
    }
}

// MIR FOR CTFE
fn E2::_CD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:49: 75:52

    bb0: {
        _0 = E2::<X>::_CD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:49: 75:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:49: 75:52
    }
}

fn E2::_CE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:57: 75:60

    bb0: {
        _0 = E2::<X>::_CE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:57: 75:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:57: 75:60
    }
}

// MIR FOR CTFE
fn E2::_CE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:57: 75:60

    bb0: {
        _0 = E2::<X>::_CE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:57: 75:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:57: 75:60
    }
}

fn E2::_CF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:65: 75:68

    bb0: {
        _0 = E2::<X>::_CF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:65: 75:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:65: 75:68
    }
}

// MIR FOR CTFE
fn E2::_CF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:75:65: 75:68

    bb0: {
        _0 = E2::<X>::_CF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:75:65: 75:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:75:65: 75:68
    }
}

fn E2::_D0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:9: 76:12

    bb0: {
        _0 = E2::<X>::_D0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:9: 76:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:9: 76:12
    }
}

// MIR FOR CTFE
fn E2::_D0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:9: 76:12

    bb0: {
        _0 = E2::<X>::_D0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:9: 76:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:9: 76:12
    }
}

fn E2::_D1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:17: 76:20

    bb0: {
        _0 = E2::<X>::_D1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:17: 76:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:17: 76:20
    }
}

// MIR FOR CTFE
fn E2::_D1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:17: 76:20

    bb0: {
        _0 = E2::<X>::_D1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:17: 76:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:17: 76:20
    }
}

fn E2::_D2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:25: 76:28

    bb0: {
        _0 = E2::<X>::_D2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:25: 76:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:25: 76:28
    }
}

// MIR FOR CTFE
fn E2::_D2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:25: 76:28

    bb0: {
        _0 = E2::<X>::_D2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:25: 76:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:25: 76:28
    }
}

fn E2::_D3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:33: 76:36

    bb0: {
        _0 = E2::<X>::_D3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:33: 76:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:33: 76:36
    }
}

// MIR FOR CTFE
fn E2::_D3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:33: 76:36

    bb0: {
        _0 = E2::<X>::_D3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:33: 76:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:33: 76:36
    }
}

fn E2::_D4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:41: 76:44

    bb0: {
        _0 = E2::<X>::_D4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:41: 76:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:41: 76:44
    }
}

// MIR FOR CTFE
fn E2::_D4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:41: 76:44

    bb0: {
        _0 = E2::<X>::_D4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:41: 76:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:41: 76:44
    }
}

fn E2::_D5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:49: 76:52

    bb0: {
        _0 = E2::<X>::_D5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:49: 76:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:49: 76:52
    }
}

// MIR FOR CTFE
fn E2::_D5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:49: 76:52

    bb0: {
        _0 = E2::<X>::_D5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:49: 76:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:49: 76:52
    }
}

fn E2::_D6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:57: 76:60

    bb0: {
        _0 = E2::<X>::_D6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:57: 76:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:57: 76:60
    }
}

// MIR FOR CTFE
fn E2::_D6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:57: 76:60

    bb0: {
        _0 = E2::<X>::_D6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:57: 76:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:57: 76:60
    }
}

fn E2::_D7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:65: 76:68

    bb0: {
        _0 = E2::<X>::_D7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:65: 76:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:65: 76:68
    }
}

// MIR FOR CTFE
fn E2::_D7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:76:65: 76:68

    bb0: {
        _0 = E2::<X>::_D7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:76:65: 76:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:76:65: 76:68
    }
}

fn E2::_D8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:9: 77:12

    bb0: {
        _0 = E2::<X>::_D8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:9: 77:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:9: 77:12
    }
}

// MIR FOR CTFE
fn E2::_D8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:9: 77:12

    bb0: {
        _0 = E2::<X>::_D8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:9: 77:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:9: 77:12
    }
}

fn E2::_D9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:17: 77:20

    bb0: {
        _0 = E2::<X>::_D9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:17: 77:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:17: 77:20
    }
}

// MIR FOR CTFE
fn E2::_D9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:17: 77:20

    bb0: {
        _0 = E2::<X>::_D9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:17: 77:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:17: 77:20
    }
}

fn E2::_DA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:25: 77:28

    bb0: {
        _0 = E2::<X>::_DA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:25: 77:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:25: 77:28
    }
}

// MIR FOR CTFE
fn E2::_DA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:25: 77:28

    bb0: {
        _0 = E2::<X>::_DA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:25: 77:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:25: 77:28
    }
}

fn E2::_DB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:33: 77:36

    bb0: {
        _0 = E2::<X>::_DB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:33: 77:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:33: 77:36
    }
}

// MIR FOR CTFE
fn E2::_DB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:33: 77:36

    bb0: {
        _0 = E2::<X>::_DB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:33: 77:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:33: 77:36
    }
}

fn E2::_DC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:41: 77:44

    bb0: {
        _0 = E2::<X>::_DC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:41: 77:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:41: 77:44
    }
}

// MIR FOR CTFE
fn E2::_DC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:41: 77:44

    bb0: {
        _0 = E2::<X>::_DC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:41: 77:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:41: 77:44
    }
}

fn E2::_DD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:49: 77:52

    bb0: {
        _0 = E2::<X>::_DD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:49: 77:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:49: 77:52
    }
}

// MIR FOR CTFE
fn E2::_DD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:49: 77:52

    bb0: {
        _0 = E2::<X>::_DD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:49: 77:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:49: 77:52
    }
}

fn E2::_DE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:57: 77:60

    bb0: {
        _0 = E2::<X>::_DE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:57: 77:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:57: 77:60
    }
}

// MIR FOR CTFE
fn E2::_DE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:57: 77:60

    bb0: {
        _0 = E2::<X>::_DE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:57: 77:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:57: 77:60
    }
}

fn E2::_DF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:65: 77:68

    bb0: {
        _0 = E2::<X>::_DF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:65: 77:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:65: 77:68
    }
}

// MIR FOR CTFE
fn E2::_DF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:77:65: 77:68

    bb0: {
        _0 = E2::<X>::_DF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:77:65: 77:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:77:65: 77:68
    }
}

fn E2::_E0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:9: 78:12

    bb0: {
        _0 = E2::<X>::_E0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:9: 78:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:9: 78:12
    }
}

// MIR FOR CTFE
fn E2::_E0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:9: 78:12

    bb0: {
        _0 = E2::<X>::_E0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:9: 78:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:9: 78:12
    }
}

fn E2::_E1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:17: 78:20

    bb0: {
        _0 = E2::<X>::_E1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:17: 78:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:17: 78:20
    }
}

// MIR FOR CTFE
fn E2::_E1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:17: 78:20

    bb0: {
        _0 = E2::<X>::_E1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:17: 78:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:17: 78:20
    }
}

fn E2::_E2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:25: 78:28

    bb0: {
        _0 = E2::<X>::_E2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:25: 78:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:25: 78:28
    }
}

// MIR FOR CTFE
fn E2::_E2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:25: 78:28

    bb0: {
        _0 = E2::<X>::_E2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:25: 78:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:25: 78:28
    }
}

fn E2::_E3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:33: 78:36

    bb0: {
        _0 = E2::<X>::_E3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:33: 78:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:33: 78:36
    }
}

// MIR FOR CTFE
fn E2::_E3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:33: 78:36

    bb0: {
        _0 = E2::<X>::_E3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:33: 78:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:33: 78:36
    }
}

fn E2::_E4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:41: 78:44

    bb0: {
        _0 = E2::<X>::_E4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:41: 78:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:41: 78:44
    }
}

// MIR FOR CTFE
fn E2::_E4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:41: 78:44

    bb0: {
        _0 = E2::<X>::_E4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:41: 78:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:41: 78:44
    }
}

fn E2::_E5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:49: 78:52

    bb0: {
        _0 = E2::<X>::_E5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:49: 78:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:49: 78:52
    }
}

// MIR FOR CTFE
fn E2::_E5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:49: 78:52

    bb0: {
        _0 = E2::<X>::_E5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:49: 78:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:49: 78:52
    }
}

fn E2::_E6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:57: 78:60

    bb0: {
        _0 = E2::<X>::_E6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:57: 78:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:57: 78:60
    }
}

// MIR FOR CTFE
fn E2::_E6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:57: 78:60

    bb0: {
        _0 = E2::<X>::_E6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:57: 78:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:57: 78:60
    }
}

fn E2::_E7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:65: 78:68

    bb0: {
        _0 = E2::<X>::_E7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:65: 78:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:65: 78:68
    }
}

// MIR FOR CTFE
fn E2::_E7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:78:65: 78:68

    bb0: {
        _0 = E2::<X>::_E7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:78:65: 78:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:78:65: 78:68
    }
}

fn E2::_E8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:9: 79:12

    bb0: {
        _0 = E2::<X>::_E8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:9: 79:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:9: 79:12
    }
}

// MIR FOR CTFE
fn E2::_E8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:9: 79:12

    bb0: {
        _0 = E2::<X>::_E8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:9: 79:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:9: 79:12
    }
}

fn E2::_E9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:17: 79:20

    bb0: {
        _0 = E2::<X>::_E9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:17: 79:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:17: 79:20
    }
}

// MIR FOR CTFE
fn E2::_E9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:17: 79:20

    bb0: {
        _0 = E2::<X>::_E9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:17: 79:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:17: 79:20
    }
}

fn E2::_EA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:25: 79:28

    bb0: {
        _0 = E2::<X>::_EA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:25: 79:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:25: 79:28
    }
}

// MIR FOR CTFE
fn E2::_EA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:25: 79:28

    bb0: {
        _0 = E2::<X>::_EA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:25: 79:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:25: 79:28
    }
}

fn E2::_EB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:33: 79:36

    bb0: {
        _0 = E2::<X>::_EB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:33: 79:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:33: 79:36
    }
}

// MIR FOR CTFE
fn E2::_EB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:33: 79:36

    bb0: {
        _0 = E2::<X>::_EB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:33: 79:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:33: 79:36
    }
}

fn E2::_EC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:41: 79:44

    bb0: {
        _0 = E2::<X>::_EC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:41: 79:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:41: 79:44
    }
}

// MIR FOR CTFE
fn E2::_EC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:41: 79:44

    bb0: {
        _0 = E2::<X>::_EC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:41: 79:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:41: 79:44
    }
}

fn E2::_ED(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:49: 79:52

    bb0: {
        _0 = E2::<X>::_ED(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:49: 79:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:49: 79:52
    }
}

// MIR FOR CTFE
fn E2::_ED(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:49: 79:52

    bb0: {
        _0 = E2::<X>::_ED(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:49: 79:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:49: 79:52
    }
}

fn E2::_EE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:57: 79:60

    bb0: {
        _0 = E2::<X>::_EE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:57: 79:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:57: 79:60
    }
}

// MIR FOR CTFE
fn E2::_EE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:57: 79:60

    bb0: {
        _0 = E2::<X>::_EE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:57: 79:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:57: 79:60
    }
}

fn E2::_EF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:65: 79:68

    bb0: {
        _0 = E2::<X>::_EF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:65: 79:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:65: 79:68
    }
}

// MIR FOR CTFE
fn E2::_EF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:79:65: 79:68

    bb0: {
        _0 = E2::<X>::_EF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:79:65: 79:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:79:65: 79:68
    }
}

fn E2::_F0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:9: 80:12

    bb0: {
        _0 = E2::<X>::_F0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:9: 80:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:9: 80:12
    }
}

// MIR FOR CTFE
fn E2::_F0(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:9: 80:12

    bb0: {
        _0 = E2::<X>::_F0(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:9: 80:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:9: 80:12
    }
}

fn E2::_F1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:17: 80:20

    bb0: {
        _0 = E2::<X>::_F1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:17: 80:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:17: 80:20
    }
}

// MIR FOR CTFE
fn E2::_F1(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:17: 80:20

    bb0: {
        _0 = E2::<X>::_F1(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:17: 80:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:17: 80:20
    }
}

fn E2::_F2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:25: 80:28

    bb0: {
        _0 = E2::<X>::_F2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:25: 80:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:25: 80:28
    }
}

// MIR FOR CTFE
fn E2::_F2(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:25: 80:28

    bb0: {
        _0 = E2::<X>::_F2(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:25: 80:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:25: 80:28
    }
}

fn E2::_F3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:33: 80:36

    bb0: {
        _0 = E2::<X>::_F3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:33: 80:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:33: 80:36
    }
}

// MIR FOR CTFE
fn E2::_F3(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:33: 80:36

    bb0: {
        _0 = E2::<X>::_F3(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:33: 80:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:33: 80:36
    }
}

fn E2::_F4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:41: 80:44

    bb0: {
        _0 = E2::<X>::_F4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:41: 80:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:41: 80:44
    }
}

// MIR FOR CTFE
fn E2::_F4(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:41: 80:44

    bb0: {
        _0 = E2::<X>::_F4(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:41: 80:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:41: 80:44
    }
}

fn E2::_F5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:49: 80:52

    bb0: {
        _0 = E2::<X>::_F5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:49: 80:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:49: 80:52
    }
}

// MIR FOR CTFE
fn E2::_F5(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:49: 80:52

    bb0: {
        _0 = E2::<X>::_F5(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:49: 80:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:49: 80:52
    }
}

fn E2::_F6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:57: 80:60

    bb0: {
        _0 = E2::<X>::_F6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:57: 80:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:57: 80:60
    }
}

// MIR FOR CTFE
fn E2::_F6(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:57: 80:60

    bb0: {
        _0 = E2::<X>::_F6(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:57: 80:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:57: 80:60
    }
}

fn E2::_F7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:65: 80:68

    bb0: {
        _0 = E2::<X>::_F7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:65: 80:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:65: 80:68
    }
}

// MIR FOR CTFE
fn E2::_F7(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:80:65: 80:68

    bb0: {
        _0 = E2::<X>::_F7(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:80:65: 80:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:80:65: 80:68
    }
}

fn E2::_F8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:9: 81:12

    bb0: {
        _0 = E2::<X>::_F8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:9: 81:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:9: 81:12
    }
}

// MIR FOR CTFE
fn E2::_F8(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:9: 81:12

    bb0: {
        _0 = E2::<X>::_F8(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:9: 81:12
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:9: 81:12
    }
}

fn E2::_F9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:17: 81:20

    bb0: {
        _0 = E2::<X>::_F9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:17: 81:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:17: 81:20
    }
}

// MIR FOR CTFE
fn E2::_F9(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:17: 81:20

    bb0: {
        _0 = E2::<X>::_F9(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:17: 81:20
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:17: 81:20
    }
}

fn E2::_FA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:25: 81:28

    bb0: {
        _0 = E2::<X>::_FA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:25: 81:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:25: 81:28
    }
}

// MIR FOR CTFE
fn E2::_FA(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:25: 81:28

    bb0: {
        _0 = E2::<X>::_FA(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:25: 81:28
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:25: 81:28
    }
}

fn E2::_FB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:33: 81:36

    bb0: {
        _0 = E2::<X>::_FB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:33: 81:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:33: 81:36
    }
}

// MIR FOR CTFE
fn E2::_FB(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:33: 81:36

    bb0: {
        _0 = E2::<X>::_FB(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:33: 81:36
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:33: 81:36
    }
}

fn E2::_FC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:41: 81:44

    bb0: {
        _0 = E2::<X>::_FC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:41: 81:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:41: 81:44
    }
}

// MIR FOR CTFE
fn E2::_FC(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:41: 81:44

    bb0: {
        _0 = E2::<X>::_FC(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:41: 81:44
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:41: 81:44
    }
}

fn E2::_FD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:49: 81:52

    bb0: {
        _0 = E2::<X>::_FD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:49: 81:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:49: 81:52
    }
}

// MIR FOR CTFE
fn E2::_FD(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:49: 81:52

    bb0: {
        _0 = E2::<X>::_FD(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:49: 81:52
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:49: 81:52
    }
}

fn E2::_FE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:57: 81:60

    bb0: {
        _0 = E2::<X>::_FE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:57: 81:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:57: 81:60
    }
}

// MIR FOR CTFE
fn E2::_FE(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:57: 81:60

    bb0: {
        _0 = E2::<X>::_FE(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:57: 81:60
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:57: 81:60
    }
}

fn E2::_FF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:65: 81:68

    bb0: {
        _0 = E2::<X>::_FF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:65: 81:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:65: 81:68
    }
}

// MIR FOR CTFE
fn E2::_FF(_1: X) -> E2<X> {
    let mut _0: MORE_OVERFLOW::E2<X>;    // return place in scope 0 at ui/enum-discriminant/niche.rs:81:65: 81:68

    bb0: {
        _0 = E2::<X>::_FF(move _1);      // scope 0 at ui/enum-discriminant/niche.rs:81:65: 81:68
        return;                          // scope 0 at ui/enum-discriminant/niche.rs:81:65: 81:68
    }
}
