// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
CLike2::A::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 5_isize;
        return;
    }
}

CLike2::B::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

CLike2::C::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 19_isize;
        return;
    }
}

CLike3::A::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const 5_i8;
        return;
    }
}

CLike3::C::{constant#0}: i8 = {
    let mut _0: i8;

    bb0: {
        _0 = const -1_i8;
        return;
    }
}

static CONST: u32 = {
    let mut _0: u32;

    bb0: {
        _0 = const 48879_u32;
        return;
    }
}

Mixed::Unit::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 3_isize;
        return;
    }
}

Mixed::Tuple::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 2_isize;
        return;
    }
}

Mixed::Struct::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let _4: &isize;
    let _5: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&isize, &isize);
    let mut _14: &isize;
    let _15: isize;
    let _16: &isize;
    let _17: &isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: isize;
    let mut _21: isize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&isize, &isize);
    let mut _26: &isize;
    let _27: isize;
    let _28: &isize;
    let _29: &isize;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: isize;
    let mut _33: isize;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&isize, &isize);
    let mut _38: &isize;
    let _39: isize;
    let _40: &isize;
    let _41: &isize;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: isize;
    let mut _45: isize;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&isize, &isize);
    let mut _50: &isize;
    let _51: isize;
    let _52: &isize;
    let _53: &isize;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: isize;
    let mut _57: isize;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&isize, &isize);
    let mut _62: &isize;
    let _63: isize;
    let _64: &isize;
    let _65: &isize;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: isize;
    let mut _69: isize;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&isize, &isize);
    let mut _74: &isize;
    let _75: isize;
    let _76: &isize;
    let _77: &isize;
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: isize;
    let mut _81: isize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&isize, &isize);
    let mut _86: &isize;
    let _87: isize;
    let _88: &isize;
    let _89: &isize;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: isize;
    let mut _93: isize;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&i8, &i8);
    let mut _98: &i8;
    let _99: i8;
    let _100: &i8;
    let _101: &i8;
    let mut _102: bool;
    let mut _103: bool;
    let mut _104: i8;
    let mut _105: i8;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&i8, &i8);
    let mut _110: &i8;
    let _111: i8;
    let _112: &i8;
    let _113: &i8;
    let mut _114: bool;
    let mut _115: bool;
    let mut _116: i8;
    let mut _117: i8;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&i8, &i8);
    let mut _122: &i8;
    let _123: i8;
    let _124: &i8;
    let _125: &i8;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: i8;
    let mut _129: i8;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&i8, &i8);
    let mut _134: &i8;
    let _135: i8;
    let _136: &i8;
    let _137: &i8;
    let mut _138: bool;
    let mut _139: bool;
    let mut _140: i8;
    let mut _141: i8;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&isize, &isize);
    let mut _146: &isize;
    let _147: isize;
    let _148: &isize;
    let _149: &isize;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: isize;
    let mut _153: isize;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&isize, &isize);
    let mut _158: &isize;
    let _159: isize;
    let _160: &isize;
    let _161: &isize;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: isize;
    let mut _165: isize;
    let _167: !;
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _169: (&isize, &isize);
    let mut _170: &isize;
    let _171: isize;
    let _172: &isize;
    let _173: &isize;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: isize;
    let mut _177: isize;
    let _179: !;
    let mut _180: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _181: (&isize, &isize);
    let mut _182: &isize;
    let _183: isize;
    let _184: &NullablePointer;
    let _185: NullablePointer;
    let _186: &u32;
    let _187: &isize;
    let _188: &isize;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: isize;
    let mut _192: isize;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&u8, &u8);
    let mut _197: &u8;
    let _198: u8;
    let _199: &u8;
    let _200: &u8;
    let mut _201: bool;
    let mut _202: bool;
    let mut _203: u8;
    let mut _204: u8;
    let _206: !;
    let mut _207: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _208: (&u8, &u8);
    let mut _209: &u8;
    let _210: u8;
    let _211: &u8;
    let _212: &u8;
    let mut _213: bool;
    let mut _214: bool;
    let mut _215: u8;
    let mut _216: u8;
    let _218: !;
    let mut _219: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _220: (&isize, &isize);
    let mut _221: &isize;
    let _222: isize;
    let _223: &isize;
    let _224: &isize;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: isize;
    let mut _228: isize;
    let _230: !;
    let mut _231: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _232: (&isize, &isize);
    let mut _233: &isize;
    let _234: isize;
    let _235: &isize;
    let _236: &isize;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: isize;
    let mut _240: isize;
    let _242: !;
    let mut _243: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _244: (&isize, &isize);
    let mut _245: &isize;
    let _246: isize;
    let _247: &isize;
    let _248: &isize;
    let mut _249: bool;
    let mut _250: bool;
    let mut _251: isize;
    let mut _252: isize;
    let _254: !;
    let mut _255: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _256: &isize;
    let mut _257: &Mixed;
    let mut _258: &isize;
    let mut _259: &Mixed;
    let mut _260: &isize;
    let mut _261: &Mixed;
    let mut _262: &u8;
    let mut _263: &&str;
    let mut _264: &u8;
    let mut _265: &i32;
    let mut _266: &isize;
    let mut _267: &isize;
    let mut _268: &NullablePointer;
    let mut _269: &isize;
    let mut _270: &ADT;
    let mut _271: &isize;
    let mut _272: &ADT;
    let mut _273: &i8;
    let mut _274: &CLike3;
    let mut _275: &i8;
    let mut _276: &CLike3;
    let mut _277: &i8;
    let mut _278: &CLike3;
    let mut _279: &i8;
    let mut _280: &CLike3;
    let mut _281: &isize;
    let mut _282: &CLike2;
    let mut _283: &isize;
    let mut _284: &CLike2;
    let mut _285: &isize;
    let mut _286: &CLike2;
    let mut _287: &isize;
    let mut _288: &CLike2;
    let mut _289: &isize;
    let mut _290: &CLike1;
    let mut _291: &isize;
    let mut _292: &CLike1;
    let mut _293: &isize;
    let mut _294: &CLike1;
    let mut _295: &isize;
    let mut _296: &CLike1;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _52;
        debug right_val => _53;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _76;
        debug right_val => _77;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _88;
        debug right_val => _89;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }
    scope 17 {
        debug left_val => _100;
        debug right_val => _101;
        let _106: core::panicking::AssertKind;
        scope 18 {
            debug kind => _106;
        }
    }
    scope 19 {
        debug left_val => _112;
        debug right_val => _113;
        let _118: core::panicking::AssertKind;
        scope 20 {
            debug kind => _118;
        }
    }
    scope 21 {
        debug left_val => _124;
        debug right_val => _125;
        let _130: core::panicking::AssertKind;
        scope 22 {
            debug kind => _130;
        }
    }
    scope 23 {
        debug left_val => _136;
        debug right_val => _137;
        let _142: core::panicking::AssertKind;
        scope 24 {
            debug kind => _142;
        }
    }
    scope 25 {
        debug left_val => _148;
        debug right_val => _149;
        let _154: core::panicking::AssertKind;
        scope 26 {
            debug kind => _154;
        }
    }
    scope 27 {
        debug left_val => _160;
        debug right_val => _161;
        let _166: core::panicking::AssertKind;
        scope 28 {
            debug kind => _166;
        }
    }
    scope 29 {
        debug left_val => _172;
        debug right_val => _173;
        let _178: core::panicking::AssertKind;
        scope 30 {
            debug kind => _178;
        }
    }
    scope 31 {
        debug left_val => _187;
        debug right_val => _188;
        let _193: core::panicking::AssertKind;
        scope 32 {
            debug kind => _193;
        }
    }
    scope 33 {
        debug left_val => _199;
        debug right_val => _200;
        let _205: core::panicking::AssertKind;
        scope 34 {
            debug kind => _205;
        }
    }
    scope 35 {
        debug left_val => _211;
        debug right_val => _212;
        let _217: core::panicking::AssertKind;
        scope 36 {
            debug kind => _217;
        }
    }
    scope 37 {
        debug left_val => _223;
        debug right_val => _224;
        let _229: core::panicking::AssertKind;
        scope 38 {
            debug kind => _229;
        }
    }
    scope 39 {
        debug left_val => _235;
        debug right_val => _236;
        let _241: core::panicking::AssertKind;
        scope 40 {
            debug kind => _241;
        }
    }
    scope 41 {
        debug left_val => _247;
        debug right_val => _248;
        let _253: core::panicking::AssertKind;
        scope 42 {
            debug kind => _253;
        }
    }

    bb0: {
        _296 = const _;
        _3 = discriminant((*_296));
        _2 = &_3;
        _295 = const _;
        _1 = (move _2, _295);
        _4 = (_1.0: &isize);
        _5 = (_1.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        _294 = const _;
        _15 = discriminant((*_294));
        _14 = &_15;
        _293 = const _;
        _13 = (move _14, _293);
        _16 = (_13.0: &isize);
        _17 = (_13.1: &isize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = assert_failed::<isize, isize>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb4: {
        _292 = const _;
        _27 = discriminant((*_292));
        _26 = &_27;
        _291 = const _;
        _25 = (move _26, _291);
        _28 = (_25.0: &isize);
        _29 = (_25.1: &isize);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = assert_failed::<isize, isize>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb6: {
        _290 = const _;
        _39 = discriminant((*_290));
        _38 = &_39;
        _289 = const _;
        _37 = (move _38, _289);
        _40 = (_37.0: &isize);
        _41 = (_37.1: &isize);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = assert_failed::<isize, isize>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb8: {
        _288 = const _;
        _51 = discriminant((*_288));
        _50 = &_51;
        _287 = const _;
        _49 = (move _50, _287);
        _52 = (_49.0: &isize);
        _53 = (_49.1: &isize);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = assert_failed::<isize, isize>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb10: {
        _286 = const _;
        _63 = discriminant((*_286));
        _62 = &_63;
        _285 = const _;
        _61 = (move _62, _285);
        _64 = (_61.0: &isize);
        _65 = (_61.1: &isize);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = assert_failed::<isize, isize>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb12: {
        _284 = const _;
        _75 = discriminant((*_284));
        _74 = &_75;
        _283 = const _;
        _73 = (move _74, _283);
        _76 = (_73.0: &isize);
        _77 = (_73.1: &isize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = assert_failed::<isize, isize>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb14: {
        _282 = const _;
        _87 = discriminant((*_282));
        _86 = &_87;
        _281 = const _;
        _85 = (move _86, _281);
        _88 = (_85.0: &isize);
        _89 = (_85.1: &isize);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = assert_failed::<isize, isize>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb16: {
        _280 = const _;
        _99 = discriminant((*_280));
        _98 = &_99;
        _279 = const _;
        _97 = (move _98, _279);
        _100 = (_97.0: &i8);
        _101 = (_97.1: &i8);
        _104 = (*_100);
        _105 = (*_101);
        _103 = Eq(move _104, move _105);
        _102 = Not(move _103);
        switchInt(move _102) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = assert_failed::<i8, i8>(move _106, _100, _101, move _108) -> unwind continue;
    }

    bb18: {
        _278 = const _;
        _111 = discriminant((*_278));
        _110 = &_111;
        _277 = const _;
        _109 = (move _110, _277);
        _112 = (_109.0: &i8);
        _113 = (_109.1: &i8);
        _116 = (*_112);
        _117 = (*_113);
        _115 = Eq(move _116, move _117);
        _114 = Not(move _115);
        switchInt(move _114) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = assert_failed::<i8, i8>(move _118, _112, _113, move _120) -> unwind continue;
    }

    bb20: {
        _276 = const _;
        _123 = discriminant((*_276));
        _122 = &_123;
        _275 = const _;
        _121 = (move _122, _275);
        _124 = (_121.0: &i8);
        _125 = (_121.1: &i8);
        _128 = (*_124);
        _129 = (*_125);
        _127 = Eq(move _128, move _129);
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = assert_failed::<i8, i8>(move _130, _124, _125, move _132) -> unwind continue;
    }

    bb22: {
        _274 = const _;
        _135 = discriminant((*_274));
        _134 = &_135;
        _273 = const _;
        _133 = (move _134, _273);
        _136 = (_133.0: &i8);
        _137 = (_133.1: &i8);
        _140 = (*_136);
        _141 = (*_137);
        _139 = Eq(move _140, move _141);
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = assert_failed::<i8, i8>(move _142, _136, _137, move _144) -> unwind continue;
    }

    bb24: {
        _272 = const _;
        _147 = discriminant((*_272));
        _146 = &_147;
        _271 = const _;
        _145 = (move _146, _271);
        _148 = (_145.0: &isize);
        _149 = (_145.1: &isize);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = assert_failed::<isize, isize>(move _154, _148, _149, move _156) -> unwind continue;
    }

    bb26: {
        _270 = const _;
        _159 = discriminant((*_270));
        _158 = &_159;
        _269 = const _;
        _157 = (move _158, _269);
        _160 = (_157.0: &isize);
        _161 = (_157.1: &isize);
        _164 = (*_160);
        _165 = (*_161);
        _163 = Eq(move _164, move _165);
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _166 = core::panicking::AssertKind::Eq;
        _168 = Option::<Arguments<'_>>::None;
        _167 = assert_failed::<isize, isize>(move _166, _160, _161, move _168) -> unwind continue;
    }

    bb28: {
        _268 = const _;
        _171 = discriminant((*_268));
        _170 = &_171;
        _267 = const _;
        _169 = (move _170, _267);
        _172 = (_169.0: &isize);
        _173 = (_169.1: &isize);
        _176 = (*_172);
        _177 = (*_173);
        _175 = Eq(move _176, move _177);
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _178 = core::panicking::AssertKind::Eq;
        _180 = Option::<Arguments<'_>>::None;
        _179 = assert_failed::<isize, isize>(move _178, _172, _173, move _180) -> unwind continue;
    }

    bb30: {
        _186 = const {alloc9: &u32};
        _185 = NullablePointer::Something(_186);
        _184 = &_185;
        _183 = discriminant((*_184));
        _182 = &_183;
        _266 = const _;
        _181 = (move _182, _266);
        _187 = (_181.0: &isize);
        _188 = (_181.1: &isize);
        _191 = (*_187);
        _192 = (*_188);
        _190 = Eq(move _191, move _192);
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = assert_failed::<isize, isize>(move _193, _187, _188, move _195) -> unwind continue;
    }

    bb32: {
        _265 = const _;
        _198 = discriminant((*_265));
        _197 = &_198;
        _264 = const _;
        _196 = (move _197, _264);
        _199 = (_196.0: &u8);
        _200 = (_196.1: &u8);
        _203 = (*_199);
        _204 = (*_200);
        _202 = Eq(move _203, move _204);
        _201 = Not(move _202);
        switchInt(move _201) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _205 = core::panicking::AssertKind::Eq;
        _207 = Option::<Arguments<'_>>::None;
        _206 = assert_failed::<u8, u8>(move _205, _199, _200, move _207) -> unwind continue;
    }

    bb34: {
        _263 = const _;
        _210 = discriminant((*_263));
        _209 = &_210;
        _262 = const _;
        _208 = (move _209, _262);
        _211 = (_208.0: &u8);
        _212 = (_208.1: &u8);
        _215 = (*_211);
        _216 = (*_212);
        _214 = Eq(move _215, move _216);
        _213 = Not(move _214);
        switchInt(move _213) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _217 = core::panicking::AssertKind::Eq;
        _219 = Option::<Arguments<'_>>::None;
        _218 = assert_failed::<u8, u8>(move _217, _211, _212, move _219) -> unwind continue;
    }

    bb36: {
        _261 = const _;
        _222 = discriminant((*_261));
        _221 = &_222;
        _260 = const _;
        _220 = (move _221, _260);
        _223 = (_220.0: &isize);
        _224 = (_220.1: &isize);
        _227 = (*_223);
        _228 = (*_224);
        _226 = Eq(move _227, move _228);
        _225 = Not(move _226);
        switchInt(move _225) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _229 = core::panicking::AssertKind::Eq;
        _231 = Option::<Arguments<'_>>::None;
        _230 = assert_failed::<isize, isize>(move _229, _223, _224, move _231) -> unwind continue;
    }

    bb38: {
        _259 = const _;
        _234 = discriminant((*_259));
        _233 = &_234;
        _258 = const _;
        _232 = (move _233, _258);
        _235 = (_232.0: &isize);
        _236 = (_232.1: &isize);
        _239 = (*_235);
        _240 = (*_236);
        _238 = Eq(move _239, move _240);
        _237 = Not(move _238);
        switchInt(move _237) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _241 = core::panicking::AssertKind::Eq;
        _243 = Option::<Arguments<'_>>::None;
        _242 = assert_failed::<isize, isize>(move _241, _235, _236, move _243) -> unwind continue;
    }

    bb40: {
        _257 = const _;
        _246 = discriminant((*_257));
        _245 = &_246;
        _256 = const _;
        _244 = (move _245, _256);
        _247 = (_244.0: &isize);
        _248 = (_244.1: &isize);
        _251 = (*_247);
        _252 = (*_248);
        _250 = Eq(move _251, move _252);
        _249 = Not(move _250);
        switchInt(move _249) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _253 = core::panicking::AssertKind::Eq;
        _255 = Option::<Arguments<'_>>::None;
        _254 = assert_failed::<isize, isize>(move _253, _247, _248, move _255) -> unwind continue;
    }

    bb42: {
        return;
    }
}

alloc9 (static: CONST, size: 4, align: 4) {
    ef be 00 00                                     │ ....
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Mixed = {
    let mut _0: &Mixed;
    let mut _1: Mixed;

    bb0: {
        _1 = Mixed::Struct { a: const 7_u8, b: const 11_u16 };
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Mixed = {
    let mut _0: &Mixed;
    let mut _1: Mixed;

    bb0: {
        _1 = Mixed::Tuple(const 5_u16);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Mixed = {
    let mut _0: &Mixed;
    let mut _1: Mixed;

    bb0: {
        _1 = Mixed::Unit;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "test";
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &NullablePointer = {
    let mut _0: &NullablePointer;
    let mut _1: NullablePointer;

    bb0: {
        _1 = NullablePointer::Nothing;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::Second(const 5_u64);
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &ADT = {
    let mut _0: &ADT;
    let mut _1: ADT;

    bb0: {
        _1 = ADT::First(const 0_u32, const 0_u32);
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 0_i8;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &CLike3 = {
    let mut _0: &CLike3;
    let mut _1: CLike3;

    bb0: {
        _1 = CLike3::D;
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const -1_i8;
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &CLike3 = {
    let mut _0: &CLike3;
    let mut _1: CLike3;

    bb0: {
        _1 = CLike3::C;
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 6_i8;
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &CLike3 = {
    let mut _0: &CLike3;
    let mut _1: CLike3;

    bb0: {
        _1 = CLike3::B;
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 5_i8;
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &CLike3 = {
    let mut _0: &CLike3;
    let mut _1: CLike3;

    bb0: {
        _1 = CLike3::A;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 20_isize;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &CLike2 = {
    let mut _0: &CLike2;
    let mut _1: CLike2;

    bb0: {
        _1 = CLike2::D;
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 19_isize;
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &CLike2 = {
    let mut _0: &CLike2;
    let mut _1: CLike2;

    bb0: {
        _1 = CLike2::C;
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &CLike2 = {
    let mut _0: &CLike2;
    let mut _1: CLike2;

    bb0: {
        _1 = CLike2::B;
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &CLike2 = {
    let mut _0: &CLike2;
    let mut _1: CLike2;

    bb0: {
        _1 = CLike2::A;
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &CLike1 = {
    let mut _0: &CLike1;
    let mut _1: CLike1;

    bb0: {
        _1 = CLike1::D;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &CLike1 = {
    let mut _0: &CLike1;
    let mut _1: CLike1;

    bb0: {
        _1 = CLike1::C;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &CLike1 = {
    let mut _0: &CLike1;
    let mut _1: CLike1;

    bb0: {
        _1 = CLike1::B;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &CLike1 = {
    let mut _0: &CLike1;
    let mut _1: CLike1;

    bb0: {
        _1 = CLike1::A;
        _0 = &_1;
        return;
    }
}

fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn ADT::First(_1: u32, _2: u32) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::First(move _1, move _2);
        return;
    }
}

fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}

// MIR FOR CTFE
fn ADT::Second(_1: u64) -> ADT {
    let mut _0: ADT;

    bb0: {
        _0 = ADT::Second(move _1);
        return;
    }
}

fn NullablePointer::Something(_1: &u32) -> NullablePointer {
    let mut _0: NullablePointer;

    bb0: {
        _0 = NullablePointer::Something(move _1);
        return;
    }
}

// MIR FOR CTFE
fn NullablePointer::Something(_1: &u32) -> NullablePointer {
    let mut _0: NullablePointer;

    bb0: {
        _0 = NullablePointer::Something(move _1);
        return;
    }
}

fn Mixed::Tuple(_1: u16) -> Mixed {
    let mut _0: Mixed;

    bb0: {
        _0 = Mixed::Tuple(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Mixed::Tuple(_1: u16) -> Mixed {
    let mut _0: Mixed;

    bb0: {
        _0 = Mixed::Tuple(move _1);
        return;
    }
}
