// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Enum::Unit::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 3_u8;
        return;
    }
}

Enum::Tuple::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 2_u8;
        return;
    }
}

Enum::Struct::{constant#0}: u8 = {
    let mut _0: u8;

    bb0: {
        _0 = const 1_u8;
        return;
    }
}

fn <impl at ui/enum-discriminant/arbitrary_enum_discriminant.rs:19:1: 19:10>::tag(_1: &Enum) -> u8 {
    debug self => _1;
    let mut _0: u8;
    let mut _2: *const u8;
    let mut _3: *const Enum;

    bb0: {
        _3 = &raw const (*_1);
        _2 = move _3 as *const u8 (PtrToPtr);
        _0 = (*_2);
        return;
    }
}

// MIR FOR CTFE
fn <impl at ui/enum-discriminant/arbitrary_enum_discriminant.rs:19:1: 19:10>::tag(_1: &Enum) -> u8 {
    debug self => _1;
    let mut _0: u8;
    let mut _2: *const u8;
    let mut _3: *const Enum;

    bb0: {
        StorageLive(_2);
        StorageLive(_3);
        _3 = &raw const (*_1);
        _2 = move _3 as *const u8 (PtrToPtr);
        StorageDead(_3);
        _0 = (*_2);
        StorageDead(_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u8, &u8);
    let mut _2: &u8;
    let _3: u8;
    let mut _4: &Enum;
    let _5: Enum;
    let _6: &u8;
    let _7: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let _17: u8;
    let mut _18: &Enum;
    let _19: Enum;
    let _20: &u8;
    let _21: &u8;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: u8;
    let mut _25: u8;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&u8, &u8);
    let mut _30: &u8;
    let _31: u8;
    let mut _32: &Enum;
    let _33: Enum;
    let _34: &u8;
    let _35: &u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&u8, &u8);
    let _44: &u8;
    let _45: &u8;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: u8;
    let mut _49: u8;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&u8, &u8);
    let _54: &u8;
    let _55: &u8;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u8;
    let mut _59: u8;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&u8, &u8);
    let _64: &u8;
    let _65: &u8;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: u8;
    let mut _69: u8;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: &u8;
    let mut _74: &u8;
    let mut _75: &u8;
    let mut _76: &u8;
    let mut _77: &u8;
    let mut _78: &u8;
    let mut _79: &u8;
    let mut _80: &u8;
    let mut _81: &u8;
    scope 1 {
    }
    scope 2 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 3 {
            debug kind => _12;
        }
    }
    scope 4 {
    }
    scope 5 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 6 {
            debug kind => _26;
        }
    }
    scope 7 {
    }
    scope 8 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 9 {
            debug kind => _40;
        }
    }
    scope 10 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 11 {
            debug kind => _50;
        }
    }
    scope 12 {
        debug left_val => _54;
        debug right_val => _55;
        let _60: core::panicking::AssertKind;
        scope 13 {
            debug kind => _60;
        }
    }
    scope 14 {
        debug left_val => _64;
        debug right_val => _65;
        let _70: core::panicking::AssertKind;
        scope 15 {
            debug kind => _70;
        }
    }

    bb0: {
        _81 = const _;
        _5 = test::black_box::<Enum>(const _) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = Enum::tag(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = &_3;
        _1 = (_81, move _2);
        _6 = (_1.0: &u8);
        _7 = (_1.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        _80 = const _;
        _19 = test::black_box::<Enum>(const _) -> [return: bb5, unwind continue];
    }

    bb5: {
        _18 = &_19;
        _17 = Enum::tag(move _18) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = &_17;
        _15 = (_80, move _16);
        _20 = (_15.0: &u8);
        _21 = (_15.1: &u8);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<u8, u8>(move _26, _20, _21, move _28) -> unwind continue;
    }

    bb8: {
        _79 = const _;
        _33 = test::black_box::<Enum>(const _) -> [return: bb9, unwind continue];
    }

    bb9: {
        _32 = &_33;
        _31 = Enum::tag(move _32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _30 = &_31;
        _29 = (_79, move _30);
        _34 = (_29.0: &u8);
        _35 = (_29.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb12: {
        _78 = const _;
        _77 = const _;
        _43 = (_78, _77);
        _44 = (_43.0: &u8);
        _45 = (_43.1: &u8);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<u8, u8>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb14: {
        _76 = const _;
        _75 = const _;
        _53 = (_76, _75);
        _54 = (_53.0: &u8);
        _55 = (_53.1: &u8);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u8, u8>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb16: {
        _74 = const _;
        _73 = const _;
        _63 = (_74, _73);
        _64 = (_63.0: &u8);
        _65 = (_63.1: &u8);
        _68 = (*_64);
        _69 = (*_65);
        _67 = Eq(move _68, move _69);
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<u8, u8>(move _70, _64, _65, move _72) -> unwind continue;
    }

    bb18: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

const UNIT: Enum = {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Unit;
        return;
    }
}

const TUPLE: Enum = {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Tuple(const 5_u16);
        return;
    }
}

const STRUCT: Enum = {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Struct { a: const 7_u8, b: const 11_u16 };
        return;
    }
}

const UNIT_TAG: u8 = {
    let mut _0: u8;
    let mut _1: &Enum;
    let _2: Enum;
    scope 1 {
        let mut _3: &Enum;
    }

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        ConstEvalCounter;
        _0 = Enum::tag(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

promoted[0] in UNIT_TAG: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const TUPLE_TAG: u8 = {
    let mut _0: u8;
    let mut _1: &Enum;
    let _2: Enum;
    scope 1 {
        let mut _3: &Enum;
    }

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        ConstEvalCounter;
        _0 = Enum::tag(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

promoted[0] in TUPLE_TAG: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

const STRUCT_TAG: u8 = {
    let mut _0: u8;
    let mut _1: &Enum;
    let _2: Enum;
    scope 1 {
        let mut _3: &Enum;
    }

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        ConstEvalCounter;
        _0 = Enum::tag(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        StorageDead(_1);
        return;
    }
}

promoted[0] in STRUCT_TAG: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn Enum::Tuple(_1: u16) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Tuple(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Enum::Tuple(_1: u16) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Tuple(move _1);
        return;
    }
}
