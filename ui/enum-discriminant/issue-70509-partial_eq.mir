// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Test::A::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:19: 8:20

    bb0: {
        _0 = const 0_i128;               // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:19: 8:20
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:19: 8:20
    }
}

Test::B::{constant#0}: i128 = {
    let mut _0: i128;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:36
    let mut _1: i128;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:32
    let mut _2: (i128, bool);            // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:36

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:32
        _1 = const _ as i128 (IntToInt); // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:32
        _2 = CheckedAdd(_1, const 1_i128); // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:36
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", move _1, const 1_i128) -> bb1; // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:36
    }

    bb1: {
        _0 = move (_2.0: i128);          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:36
        StorageDead(_1);                 // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:35: 9:36
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:16: 9:36
    }
}

fn <impl at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19>::eq(_1: &Test, _2: &Test) -> bool {
    debug self => _1;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let _3: i128;                        // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _4: &Test;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _6: &Test;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _7: bool;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _8: i128;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _9: i128;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _10: bool;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _11: (&Test, &Test);         // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _12: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _13: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _14: i128;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _15: i128;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _16: i128;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _19: &std::boxed::Box<u64>;  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    let mut _20: &std::boxed::Box<u64>;  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    let mut _23: usize;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    let mut _24: usize;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    let mut _25: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _26: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _27: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _28: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _29: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _30: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    let mut _31: &Test;                  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        let _5: i128;                    // in scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
            let _17: &std::boxed::Box<u64>; // in scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
            let _18: &std::boxed::Box<u64>; // in scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
            let _21: &usize;             // in scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
            let _22: &usize;             // in scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
                debug __arg1_0 => _18;   // in scope 3 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
                debug __arg1_0 => _22;   // in scope 4 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _3 = discriminant((*_4));        // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _6 = _2;                         // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _5 = discriminant((*_6));        // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _8 = _3;                         // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _9 = _5;                         // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        goto -> bb3;                     // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _13 = _2;                        // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _11 = (move _12, move _13);      // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _25 = deref_copy (_11.0: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _16 = discriminant((*_25));      // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        switchInt(move _16) -> [0: bb4, 18446744073709551616: bb6, otherwise: bb10]; // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb3: {
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:19: 5:19
    }

    bb4: {
        _26 = deref_copy (_11.1: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _14 = discriminant((*_26));      // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb5: {
        unreachable;                     // scope 5 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb6: {
        _27 = deref_copy (_11.1: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        _15 = discriminant((*_27));      // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        switchInt(move _15) -> [18446744073709551616: bb8, otherwise: bb5]; // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb7: {
        _28 = deref_copy (_11.0: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _17 = &(((*_28) as A).0: std::boxed::Box<u64>); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _29 = deref_copy (_11.1: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _18 = &(((*_29) as A).0: std::boxed::Box<u64>); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _19 = _17;                       // scope 3 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _20 = _18;                       // scope 3 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _10 = <Box<u64> as PartialEq>::eq(move _19, move _20) -> bb9; // scope 3 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<u64>, &'b Box<u64>) -> bool {<Box<u64> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_11.0: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _21 = &(((*_30) as B).0: usize); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _31 = deref_copy (_11.1: &Test); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _22 = &(((*_31) as B).0: usize); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _23 = (*_21);                    // scope 4 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _24 = (*_22);                    // scope 4 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _10 = Eq(move _23, move _24);    // scope 4 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        goto -> bb9;                     // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:18: 5:19
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
        goto -> bb3;                     // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }

    bb10: {
        unreachable;                     // scope 5 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:10: 5:19
    }
}

fn <impl at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    debug f => _2;                       // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let mut _3: i128;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let _4: &std::boxed::Box<u64>;       // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let mut _6: &str;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let _7: &str;                        // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    let mut _9: &&std::boxed::Box<u64>;  // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    let _10: &&std::boxed::Box<u64>;     // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    let _11: &usize;                     // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let mut _13: &str;                   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let _14: &str;                       // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    let mut _16: &&usize;                // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    let _17: &&usize;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
        switchInt(move _3) -> [0: bb3, 18446744073709551616: bb1, otherwise: bb2]; // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    }

    bb1: {
        _11 = &(((*_1) as B).0: usize);  // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _12 = &mut (*_2);                // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
        _14 = const "B";                 // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
        _17 = &_11;                      // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _16 = _17;                       // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:7: 9:12
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb4; // scope 2 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
    }

    bb3: {
        _4 = &(((*_1) as A).0: std::boxed::Box<u64>); // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _5 = &mut (*_2);                 // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
        _7 = const "A";                  // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
        _10 = &_4;                       // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _9 = _10;                        // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:7: 8:15
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-70509-partial_eq.rs:5:21: 5:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:5:26: 5:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:12:11: 12:11
    let mut _1: (&Test, &Test);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
    let mut _2: &Test;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
    let _3: Test;                        // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:13:16: 13:36
    let mut _4: std::boxed::Box<u64>;    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:13:24: 13:35
    let mut _5: &Test;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let _6: &Test;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
    let _7: &Test;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    let mut _9: &Test;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
    let mut _10: &Test;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
    let mut _14: &Test;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let _15: &Test;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
    let mut _16: &Test;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let _17: &Test;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
    let mut _19: &Test;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:25: 91:29
        }
    }

    bb0: {
        _4 = Box::<u64>::new(const 2_u64) -> bb1; // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:13:24: 13:35
                                         // mir::Constant
                                         // + span: ui/enum-discriminant/issue-70509-partial_eq.rs:13:24: 13:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(u64) -> Box<u64> {Box::<u64>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Test::A(move _4);           // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:13:16: 13:36
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:16: 88:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
                                         // + literal: Const { ty: &Test, val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:15: 88:32
        _6 = (_1.0: &Test);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:14: 89:22
        _7 = (_1.1: &Test);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:89:24: 89:33
        _9 = _6;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:29
        _10 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:33: 90:43
        _8 = <Test as PartialEq>::eq(move _9, move _10) -> [return: bb2, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Test, &'b Test) -> bool {<Test as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:90:20: 90:43
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Ne; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:91:32: 91:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _13 = const core::panicking::AssertKind::Ne; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:54: 95:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x01)) }
        _15 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:60: 95:70
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:72: 95:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:85: 95:113
        _12 = core::panicking::assert_failed::<Test, Test>(move _13, move _14, move _16, move _18) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:95:21: 95:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Test, &'b Test, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Test, Test>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_3) -> bb5;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:98:9: 98:10
    }

    bb5: {
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:18:2: 18:2
    }

    bb6 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:98:9: 98:10
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:12:1: 18:2
    }
}

promoted[0] in main: &Test = {
    let mut _0: &Test;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    let mut _1: Test;                    // in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:13:38: 13:48

    bb0: {
        _1 = Test::B(const 0_usize);     // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:13:38: 13:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:88:24: 88:31
    }
}

fn Test::A(_1: Box<u64>) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:5: 8:6

    bb0: {
        _0 = Test::A(move _1);           // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:5: 8:6
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:5: 8:6
    }
}

// MIR FOR CTFE
fn Test::A(_1: Box<u64>) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:5: 8:6

    bb0: {
        _0 = Test::A(move _1);           // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:5: 8:6
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:8:5: 8:6
    }
}

fn Test::B(_1: usize) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:5: 9:6

    bb0: {
        _0 = Test::B(move _1);           // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:5: 9:6
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:5: 9:6
    }
}

// MIR FOR CTFE
fn Test::B(_1: usize) -> Test {
    let mut _0: Test;                    // return place in scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:5: 9:6

    bb0: {
        _0 = Test::B(move _1);           // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:5: 9:6
        return;                          // scope 0 at ui/enum-discriminant/issue-70509-partial_eq.rs:9:5: 9:6
    }
}
