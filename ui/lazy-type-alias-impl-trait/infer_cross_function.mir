// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:3:11: 3:11

    bb0: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:3:13: 3:13
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:18:1: 18:37>::find_dwarf_unit(_1: &Context<R>, _2: u64) -> Option<&Unit<R>> {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:19:24: 19:29
    debug probe => _2;                   // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:19:31: 19:36
    let mut _0: std::option::Option<&Unit<R>>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:19:46: 19:62
    let _3: impl std::iter::Iterator<Item = &ResUnit<R>>; // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:13: 20:14
    let mut _4: &Context<R>;             // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:17: 20:39
    let mut _5: u64;                     // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:33: 20:38
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:13: 20:14
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:17: 20:39
        _5 = _2;                         // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:33: 20:38
        _3 = Context::<R>::find_units(move _4, move _5) -> bb1; // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:17: 20:39
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/infer_cross_function.rs:20:22: 20:32
                                         // + literal: Const { ty: for<'a> fn(&'a Context<R>, u64) -> impl Iterator<Item = &'a ResUnit<R>> {Context::<R>::find_units}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<&Unit<R>>::None;   // scope 1 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:21:9: 21:13
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:22:6: 22:6
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:18:1: 18:37>::find_units(_1: &Context<R>, _2: u64) -> impl Iterator<Item = &ResUnit<R>> {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:24:19: 24:24
    debug probe => _2;                   // in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:24:26: 24:31
    let mut _0: impl std::iter::Iterator<Item = &ResUnit<R>>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:24:41: 24:74

    bb0: {
        _0 = std::iter::empty::<&ResUnit<R>>() -> bb1; // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:25:9: 25:27
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/infer_cross_function.rs:25:9: 25:25
                                         // + literal: Const { ty: fn() -> std::iter::Empty<&ResUnit<R>> {std::iter::empty::<&ResUnit<R>>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:26:6: 26:6
    }
}

fn Unit(_1: R) -> Unit<R> {
    let mut _0: Unit<R>;                 // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:7:1: 7:15

    bb0: {
        _0 = Unit::<R>(move _1);         // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:7:1: 7:15
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:7:1: 7:15
    }
}

// MIR FOR CTFE
fn Unit(_1: R) -> Unit<R> {
    let mut _0: Unit<R>;                 // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:7:1: 7:15

    bb0: {
        _0 = Unit::<R>(move _1);         // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:7:1: 7:15
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:7:1: 7:15
    }
}

fn ResDwarf(_1: R) -> ResDwarf<R> {
    let mut _0: ResDwarf<R>;             // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:8:1: 8:19

    bb0: {
        _0 = ResDwarf::<R>(move _1);     // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:8:1: 8:19
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:8:1: 8:19
    }
}

// MIR FOR CTFE
fn ResDwarf(_1: R) -> ResDwarf<R> {
    let mut _0: ResDwarf<R>;             // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:8:1: 8:19

    bb0: {
        _0 = ResDwarf::<R>(move _1);     // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:8:1: 8:19
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:8:1: 8:19
    }
}

fn ResUnit(_1: R) -> ResUnit<R> {
    let mut _0: ResUnit<R>;              // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:16:1: 16:18

    bb0: {
        _0 = ResUnit::<R>(move _1);      // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:16:1: 16:18
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:16:1: 16:18
    }
}

// MIR FOR CTFE
fn ResUnit(_1: R) -> ResUnit<R> {
    let mut _0: ResUnit<R>;              // return place in scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:16:1: 16:18

    bb0: {
        _0 = ResUnit::<R>(move _1);      // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:16:1: 16:18
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/infer_cross_function.rs:16:1: 16:18
    }
}
