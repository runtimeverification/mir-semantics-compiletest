// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:3:11: 3:11

    bb0: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:3:13: 3:13
    }
}

fn filter_fold(_1: PRED, _2: FOLD) -> impl FnMut(Acc, T) -> Acc {
    debug predicate => _1;               // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:6:5: 6:18
    debug fold => _2;                    // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:7:5: 7:13
    let mut _0: impl FnMut(Acc, T) -> Acc; // return place in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:8:6: 8:31

    bb0: {
        _0 = [closure@ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:5: 9:21] { predicate: move _1, fold: move _2 }; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:5: 9:74
                                         // closure
                                         // + def_id: DefId(0:9 ~ opaque_vs_opaque[df31]::filter_fold::{closure#0})
                                         // + substs: [
                                         //     T,
                                         //     Acc,
                                         //     PRED,
                                         //     FOLD,
                                         //     i16,
                                         //     extern "rust-call" fn((Acc, T)) -> Acc,
                                         //     (PRED, FOLD),
                                         // ]
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:10:2: 10:2
    }
}

fn filter_fold::{closure#0}(_1: &mut [closure@ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:5: 9:21], _2: Acc, _3: T) -> Acc {
    debug acc => _2;                     // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:11: 9:14
    debug item => _3;                    // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:16: 9:20
    debug predicate => ((*_1).0: PRED);  // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:6:5: 6:18
    debug fold => ((*_1).1: FOLD);       // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:7:5: 7:13
    let mut _0: Acc;                     // return place in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:22: 9:22
    let mut _4: bool;                    // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
    let mut _5: &mut PRED;               // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:34
    let mut _6: (&T,);                   // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
    let mut _7: &T;                      // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:35: 9:40
    let _8: &T;                          // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:35: 9:40
    let mut _9: &mut FOLD;               // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:48
    let mut _10: (Acc, T);               // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:59
    let mut _11: Acc;                    // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:49: 9:52
    let mut _12: T;                      // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:54: 9:58
    let mut _13: bool;                   // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    let mut _14: bool;                   // in scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74

    bb0: {
        _14 = const false;               // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
        _13 = const false;               // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
        _14 = const true;                // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
        _13 = const true;                // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
        _5 = &mut ((*_1).0: PRED);       // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:34
        _8 = &_3;                        // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:35: 9:40
        _7 = _8;                         // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:35: 9:40
        _6 = (move _7,);                 // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
        _4 = <PRED as FnMut<(&T,)>>::call_mut(move _5, move _6) -> [return: bb1, unwind: bb10]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:34
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut PRED, (&T,)) -> <PRED as FnOnce<(&T,)>>::Output {<PRED as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:25: 9:41
    }

    bb2: {
        _9 = &mut ((*_1).1: FOLD);       // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:48
        _14 = const false;               // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:49: 9:52
        _11 = move _2;                   // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:49: 9:52
        _13 = const false;               // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:54: 9:58
        _12 = move _3;                   // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:54: 9:58
        _10 = (move _11, move _12);      // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:59
        _0 = <FOLD as FnMut<(Acc, T)>>::call_mut(move _9, move _10) -> [return: bb12, unwind: bb10]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:59
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:48
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut FOLD, (Acc, T)) -> <FOLD as FnOnce<(Acc, T)>>::Output {<FOLD as FnMut<(Acc, T)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = const false;               // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:69: 9:72
        _0 = move _2;                    // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:69: 9:72
        goto -> bb4;                     // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:22: 9:74
    }

    bb4: {
        switchInt(_13) -> [0: bb5, otherwise: bb8]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    }

    bb5: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:74: 9:74
    }

    bb6 (cleanup): {
        switchInt(_14) -> [0: bb7, otherwise: bb11]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:5: 9:74
    }

    bb8: {
        drop(_3) -> [return: bb5, unwind: bb6]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    }

    bb9 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    }

    bb10 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    }

    bb11 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:73: 9:74
    }

    bb12: {
        goto -> bb4;                     // scope 0 at ui/lazy-type-alias-impl-trait/opaque_vs_opaque.rs:9:44: 9:59
    }
}
