// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:11:13: 11:13
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15>::fmt(_1: &ResumeTy, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
    debug f => _2;                       // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
    let mut _4: &str;                    // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
    let _5: &str;                        // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
    let mut _7: &&std::ptr::NonNull<std::task::Context<'_>>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
    let _8: &&std::ptr::NonNull<std::task::Context<'_>>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
    let _9: &std::ptr::NonNull<std::task::Context<'_>>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
        _5 = const "ResumeTy";           // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
        _9 = &((*_1).0: std::ptr::NonNull<std::task::Context<'_>>); // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
        _8 = &_9;                        // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
        _7 = _8;                         // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:21: 14:46
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:10: 13:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:15: 13:15
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:23: 13:28>::clone(_1: &ResumeTy) -> ResumeTy {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:23: 13:28
    let mut _0: ResumeTy;                // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:23: 13:28
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:23: 13:28
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:13:28: 13:28
    }
}

fn from_generator(_1: T) -> impl Future {
    debug gen => _1;                     // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:32: 20:35
    let mut _0: impl std::future::Future; // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:43: 20:74
    let mut _2: T;                       // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:15: 45:18

    bb0: {
        _2 = move _1;                    // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:15: 45:18
        _0 = GenFuture::<T>(move _2);    // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:5: 45:19
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:46:2: 46:2
    }
}

// MIR FOR CTFE
fn from_generator(_1: T) -> impl Future {
    debug gen => _1;                     // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:32: 20:35
    let mut _0: impl std::future::Future; // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:20:43: 20:74
    let mut _2: T;                       // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:15: 45:18

    bb0: {
        StorageLive(_2);                 // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:15: 45:18
        _2 = move _1;                    // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:15: 45:18
        _0 = GenFuture::<T>(move _2);    // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:5: 45:19
        StorageDead(_2);                 // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:45:18: 45:19
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:46:2: 46:2
    }
}

fn from_generator::<impl at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:30:5: 30:69>::poll(_1: Pin<&mut GenFuture<T>>, _2: &mut Context<'_>) -> Poll<<T as Generator<ResumeTy>>::Return> {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:32:17: 32:21
    debug cx => _2;                      // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:32:39: 32:41
    let mut _0: std::task::Poll<<T as std::ops::Generator<ResumeTy>>::Return>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:32:64: 32:82
    let _3: std::pin::Pin<&mut T>;       // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:17: 34:20
    let mut _4: std::pin::Pin<&mut from_generator::GenFuture<T>>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:55: 34:59
    let mut _5: [closure@ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:61: 34:64]; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:61: 34:73
    let mut _6: std::ops::GeneratorState<(), <T as std::ops::Generator<ResumeTy>>::Return>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:19: 38:85
    let mut _7: std::pin::Pin<&mut T>;   // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:19: 38:22
    let mut _8: ResumeTy;                // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:30: 38:84
    let mut _9: std::ptr::NonNull<std::task::Context<'_>>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:39: 38:83
    let mut _10: std::ptr::NonNull<std::task::Context<'_>>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:39: 38:56
    let mut _11: &mut std::task::Context<'_>; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:53: 38:55
    let mut _12: isize;                  // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:39:17: 39:44
    let mut _14: <T as std::ops::Generator<ResumeTy>>::Return; // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:60: 40:61
    scope 1 {
        debug gen => _3;                 // in scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:17: 34:20
        let _13: <T as std::ops::Generator<ResumeTy>>::Return; // in scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:42: 40:43
        scope 3 {
            debug x => _13;              // in scope 3 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:42: 40:43
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = move _1;                    // scope 2 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:55: 34:59
        _3 = Pin::<&mut GenFuture<T>>::map_unchecked_mut::<T, [closure@ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:61: 34:64]>(move _4, move _5) -> bb1; // scope 2 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:32: 34:74
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:32: 34:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: unsafe fn(Pin<&mut GenFuture<T>>, [closure@ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:61: 34:64]) -> Pin<&mut T> {Pin::<&mut GenFuture<T>>::map_unchecked_mut::<T, [closure@ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:61: 34:64]>}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _3;                    // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:19: 38:22
        _11 = move _2;                   // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:53: 38:55
        _10 = <NonNull<Context<'_>> as From<&mut Context<'_>>>::from(move _11) -> bb2; // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:39: 38:56
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:39: 38:52
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&mut Context<'_>) -> NonNull<Context<'_>> {<NonNull<Context<'_>> as From<&mut Context<'_>>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = NonNull::<Context<'_>>::cast::<Context<'_>>(move _10) -> bb3; // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:39: 38:83
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:57: 38:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(NonNull<Context<'_>>) -> NonNull<Context<'_>> {NonNull::<Context<'_>>::cast::<Context<'_>>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = ResumeTy(move _9);          // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:30: 38:84
        _6 = <T as Generator<ResumeTy>>::resume(move _7, move _8) -> bb4; // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:19: 38:85
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:23: 38:29
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut T>, ResumeTy) -> GeneratorState<<T as Generator<ResumeTy>>::Yield, <T as Generator<ResumeTy>>::Return> {<T as Generator<ResumeTy>>::resume}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = discriminant(_6);          // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:19: 38:85
        switchInt(move _12) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:13: 38:85
    }

    bb5: {
        _13 = move ((_6 as Complete).0: <T as std::ops::Generator<ResumeTy>>::Return); // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:42: 40:43
        _14 = move _13;                  // scope 3 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:60: 40:61
        _0 = Poll::<<T as Generator<ResumeTy>>::Return>::Ready(move _14); // scope 3 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:48: 40:62
        goto -> bb8;                     // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:40:61: 40:62
    }

    bb6: {
        unreachable;                     // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:38:19: 38:85
    }

    bb7: {
        _0 = Poll::<<T as Generator<ResumeTy>>::Return>::Pending; // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:39:48: 39:61
        goto -> bb8;                     // scope 1 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:39:48: 39:61
    }

    bb8: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:42:10: 42:10
    }
}

fn from_generator::<impl at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:30:5: 30:69>::poll::{closure#0}(_1: [closure@ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:61: 34:64], _2: &mut GenFuture<T>) -> &mut T {
    debug s => _2;                       // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:62: 34:63
    let mut _0: &mut T;                  // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:65: 34:65
    let mut _3: &mut T;                  // in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:65: 34:73

    bb0: {
        _3 = &mut ((*_2).0: T);          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:65: 34:73
        _0 = &mut (*_3);                 // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:65: 34:73
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:34:73: 34:73
    }
}

fn ResumeTy(_1: NonNull<Context<'_>>) -> ResumeTy {
    let mut _0: ResumeTy;                // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:1: 14:20

    bb0: {
        _0 = ResumeTy(move _1);          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:1: 14:20
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:1: 14:20
    }
}

// MIR FOR CTFE
fn ResumeTy(_1: NonNull<Context<'_>>) -> ResumeTy {
    let mut _0: ResumeTy;                // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:1: 14:20

    bb0: {
        _0 = ResumeTy(move _1);          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:1: 14:20
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:14:1: 14:20
    }
}

fn GenFuture(_1: T) -> GenFuture<T> {
    let mut _0: from_generator::GenFuture<T>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:24:5: 24:57

    bb0: {
        _0 = GenFuture::<T>(move _1);    // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:24:5: 24:57
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:24:5: 24:57
    }
}

// MIR FOR CTFE
fn GenFuture(_1: T) -> GenFuture<T> {
    let mut _0: from_generator::GenFuture<T>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:24:5: 24:57

    bb0: {
        _0 = GenFuture::<T>(move _1);    // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:24:5: 24:57
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/freeze_cycle.rs:24:5: 24:57
    }
}
