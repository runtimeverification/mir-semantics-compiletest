// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:3:11: 3:11

    bb0: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:3:13: 3:13
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:12:1: 12:38>::remainder(_1: PairSlices<'_, '_, T>) -> impl Iterator<Item = &[T]> {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:13:22: 13:26
    let mut _0: impl std::iter::Iterator<Item = &[T]>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:13:31: 13:60
    let mut _2: [&[T]; 2];               // in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:33: 14:51
    let mut _3: &[T];                    // in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:34: 14:41
    let mut _4: &[T];                    // in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:43: 14:50
    let mut _5: &[T];                    // in scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:13:22: 13:26

    bb0: {
        _3 = (_1.2: &[T]);               // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:34: 14:41
        _5 = deref_copy (_1.3: &[T]);    // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:43: 14:50
        _4 = _5;                         // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:43: 14:50
        _2 = [move _3, move _4];         // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:33: 14:51
        _0 = <[&[T]; 2] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:9: 14:52
                                         // mir::Constant
                                         // + span: ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:14:9: 14:32
                                         // + literal: Const { ty: fn([&[T]; 2]) -> <[&[T]; 2] as IntoIterator>::IntoIter {<[&[T]; 2] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/unsized_sized_opaque.rs:15:6: 15:6
    }
}
