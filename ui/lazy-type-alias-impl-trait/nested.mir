// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:3:11: 3:11

    bb0: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:3:13: 3:13
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/nested.rs:9:1: 9:25>::prepare_resize(_1: RawTableInner<A>) -> ScopeGuard<RawTableInner<A>, impl for<'a> FnMut(&'a mut RawTableInner<A>)> {
    debug self => _1;                    // in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:11:9: 11:13
    let mut _0: ScopeGuard<RawTableInner<A>, impl for<'a> FnMut(&'a mut RawTableInner<A>)>; // return place in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:12:10: 12:49
    let mut _2: [closure@ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:42]; // in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:45
    let mut _3: RawTableInner<A>;        // in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:54: 13:58

    bb0: {
        _3 = move _1;                    // scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:54: 13:58
        _0 = ScopeGuard::<RawTableInner<A>, [closure@ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:42]> { dropfn: move _2, value: move _3 }; // scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:9: 13:62
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:14:6: 14:6
    }
}

fn <impl at ui/lazy-type-alias-impl-trait/nested.rs:9:1: 9:25>::prepare_resize::{closure#0}(_1: &mut [closure@ui/lazy-type-alias-impl-trait/nested.rs:13:30: 13:42], _2: &mut RawTableInner<A>) -> () {
    debug self_ => _2;                   // in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:36: 13:41
    let mut _0: ();                      // return place in scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:43: 13:43

    bb0: {
        return;                          // scope 0 at ui/lazy-type-alias-impl-trait/nested.rs:13:45: 13:45
    }
}
