// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bad() -> Box<dyn Iterator<Item = [(); 4]>> {
    let mut _0: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>; // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:16: 6:69
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

bad::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:45: 6:66
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:55]; // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:61

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:61
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:55]; // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:61
                                         // closure
                                         // + def_id: DefId(0:6 ~ issue_87414_query_cycle[c214]::bad::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((u32,)) -> u32,
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:61: 6:62
        _0 = const 4_usize;              // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:63: 6:64
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:45: 6:66
    }
}

fn bad::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:6:47: 6:55], _2: u32) -> u32 {
    debug x => _2;                       // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:48: 6:49
    let mut _0: u32;                     // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:56: 6:56

    bb0: {
        _0 = _2;                         // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:58: 6:59
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:6:61: 6:61
    }
}

fn foo() -> [(); 4] {
    let mut _0: [(); 4];                 // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:13: 8:40
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:18: 8:39
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:28]; // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:34
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:28]; // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:34
                                         // closure
                                         // + def_id: DefId(0:9 ~ issue_87414_query_cycle[c214]::foo::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((u32,)) -> u32,
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:34: 8:35
        _0 = const 4_usize;              // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:36: 8:37
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:18: 8:39
    }
}

fn foo::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:8:20: 8:28], _2: u32) -> u32 {
    debug x => _2;                       // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:21: 8:22
    let mut _0: u32;                     // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:29: 8:29

    bb0: {
        _0 = _2;                         // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:31: 8:32
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:8:34: 8:34
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:10: 9:10
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:49: 9:49
    }
}

bar::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:24: 9:45
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:34]; // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:40

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:40
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:34]; // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:40
                                         // closure
                                         // + def_id: DefId(0:12 ~ issue_87414_query_cycle[c214]::bar::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((u32,)) -> u32,
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:40: 9:41
        _0 = const 4_usize;              // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:42: 9:43
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:24: 9:45
    }
}

fn bar::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:9:26: 9:34], _2: u32) -> u32 {
    debug x => _2;                       // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:27: 9:28
    let mut _0: u32;                     // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:35: 9:35

    bb0: {
        _0 = _2;                         // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:37: 9:38
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:9:40: 9:40
    }
}

fn unsf() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:12:18: 12:18

    bb0: {
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:12:20: 12:20
    }
}

fn bad2() -> Box<dyn Iterator<Item = [(); 4]>> {
    let mut _0: std::boxed::Box<dyn std::iter::Iterator<Item = [(); 4]>>; // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:17: 13:80
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

bad2::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:46: 13:77
    let _1: [closure@ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:59]; // in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:70
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:48: 13:72
        _1 = [closure@ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:59]; // scope 1 at ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:70
                                         // closure
                                         // + def_id: DefId(0:17 ~ issue_87414_query_cycle[c214]::bad2::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:72: 13:73
        _0 = const 4_usize;              // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:74: 13:75
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:46: 13:77
    }
}

fn bad2::{constant#0}::{closure#0}(_1: &[closure@ui/unsafe/issue-87414-query-cycle.rs:13:57: 13:59]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:60: 13:60

    bb0: {
        _0 = unsf() -> bb1;              // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:62: 13:68
                                         // mir::Constant
                                         // + span: ui/unsafe/issue-87414-query-cycle.rs:13:62: 13:66
                                         // + literal: Const { ty: unsafe fn() {unsf}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:13:70: 13:70
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unsafe/issue-87414-query-cycle.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/unsafe/issue-87414-query-cycle.rs:15:13: 15:13
    }
}
