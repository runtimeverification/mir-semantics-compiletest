// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/unsafe/union_access_through_block.rs:5:16: 5:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/unsafe/union_access_through_block.rs:5:16: 5:21
    let mut _0: Foo;                     // return place in scope 0 at ui/unsafe/union_access_through_block.rs:5:16: 5:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/unsafe/union_access_through_block.rs:5:16: 5:21
        return;                          // scope 0 at ui/unsafe/union_access_through_block.rs:5:21: 5:21
    }
}

fn baz(_1: Bar) -> () {
    debug bar => _1;                     // in scope 0 at ui/unsafe/union_access_through_block.rs:12:12: 12:19
    let mut _0: ();                      // return place in scope 0 at ui/unsafe/union_access_through_block.rs:12:26: 12:26
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/unsafe/union_access_through_block.rs:16:2: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unsafe/union_access_through_block.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/unsafe/union_access_through_block.rs:18:13: 18:13
    }
}
