// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn do_nothing(_1: &mut Foo) -> () {
    debug _x => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Foo;
    let _2: ();
    let mut _3: &mut Foo;
    let mut _4: (&i8, &i8);
    let mut _5: &i8;
    let _6: i8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i8;
    let mut _12: i8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i8, &i8);
    let mut _18: &i8;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i8;
    let mut _24: i8;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (Foo, i32);
    let mut _33: Foo;
    let mut _34: (&i8, &i8);
    let mut _35: &i8;
    let _36: i8;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: i8;
    let mut _42: i8;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    let _46: ();
    let mut _47: FooHolder;
    scope 1 {
        debug foo => _1;
        let _7: &i8;
        let _8: &i8;
        let _28: Foo;
        let mut _50: &i8;
        scope 2 {
        }
        scope 3 {
        }
        scope 4 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 5 {
                debug kind => _13;
            }
        }
        scope 6 {
            let _16: i8;
            scope 7 {
                debug inner => _16;
                let _19: &i8;
                let _20: &i8;
                let mut _49: &i8;
                scope 8 {
                    debug left_val => _19;
                    debug right_val => _20;
                    let _25: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _25;
                    }
                }
            }
        }
        scope 10 {
            debug foo => _28;
            scope 11 {
                debug foo => _28;
                let _29: Foo;
                let _30: i32;
                scope 14 {
                    debug _foo2 => _29;
                    debug _random => _30;
                    let mut _32: FooHolder;
                    scope 15 {
                        debug foo_holder => _32;
                        let _37: &i8;
                        let _38: &i8;
                        let mut _48: &i8;
                        scope 16 {
                        }
                        scope 17 {
                            debug left_val => _37;
                            debug right_val => _38;
                            let _43: core::panicking::AssertKind;
                            scope 18 {
                                debug kind => _43;
                            }
                        }
                    }
                }
            }
            scope 12 {
                scope 13 {
                }
            }
        }
    }

    bb0: {
        _1 = Foo { bar: const 5_i8 };
        _3 = &mut _1;
        _2 = do_nothing(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        (_1.0: i8) = const 6_i8;
        (_1.0: i8) = Add((_1.0: i8), const 1_i8);
        _6 = (_1.0: i8);
        _5 = &_6;
        _50 = const _;
        _4 = (move _5, _50);
        _7 = (_4.0: &i8);
        _8 = (_4.1: &i8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i8, i8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _16 = (_1.0: i8);
        _18 = &_16;
        _49 = const _;
        _17 = (move _18, _49);
        _19 = (_17.0: &i8);
        _20 = (_17.1: &i8);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i8, i8>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb5: {
        _28 = Foo { bar: const 5_i8 };
        _31 = (move _28, const 42_i32);
        _29 = move (_31.0: Foo);
        _30 = (_31.1: i32);
        _33 = Foo { bar: const 5_i8 };
        _32 = FooHolder { inner_foo: move _33 };
        ((_32.0: Foo).0: i8) = const 4_i8;
        _36 = ((_32.0: Foo).0: i8);
        _35 = &_36;
        _48 = const _;
        _34 = (move _35, _48);
        _37 = (_34.0: &i8);
        _38 = (_34.1: &i8);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<i8, i8>(move _43, _37, _38, move _45) -> unwind continue;
    }

    bb7: {
        _47 = move _32;
        _46 = std::mem::drop::<FooHolder>(move _47) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 4_i8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 7_i8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i8 = {
    let mut _0: &i8;
    let mut _1: i8;

    bb0: {
        _1 = const 7_i8;
        _0 = &_1;
        return;
    }
}
