// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_expr() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}

promoted[0] in check_expr: &&&&&usize = {
    let mut _0: &&&&&usize;
    let mut _1: &&&&usize;
    let mut _2: &&&usize;
    let mut _3: &&usize;
    let mut _4: &usize;
    let mut _5: usize;

    bb0: {
        _5 = const 1_usize;
        _4 = &_5;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in check_expr: &&&&usize = {
    let mut _0: &&&&usize;
    let mut _1: &&&usize;
    let mut _2: &&usize;
    let mut _3: &usize;
    let mut _4: usize;

    bb0: {
        _4 = const 1_usize;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in check_expr: &&&&usize = {
    let mut _0: &&&&usize;
    let mut _1: &&&usize;
    let mut _2: &&usize;
    let mut _3: &usize;
    let mut _4: usize;

    bb0: {
        _4 = const 1_usize;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[3] in check_expr: &&&usize = {
    let mut _0: &&&usize;
    let mut _1: &&usize;
    let mut _2: &usize;
    let mut _3: usize;

    bb0: {
        _3 = const 1_usize;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[4] in check_expr: &&&usize = {
    let mut _0: &&&usize;
    let mut _1: &&usize;
    let mut _2: &usize;
    let mut _3: usize;

    bb0: {
        _3 = const 1_usize;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[5] in check_expr: &&usize = {
    let mut _0: &&usize;
    let mut _1: &usize;
    let mut _2: usize;

    bb0: {
        _2 = const 1_usize;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[6] in check_expr: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn check_ty() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}

promoted[0] in check_ty: &&&&&usize = {
    let mut _0: &&&&&usize;
    let mut _1: &&&&usize;
    let mut _2: &&&usize;
    let mut _3: &&usize;
    let mut _4: &usize;
    let mut _5: usize;

    bb0: {
        _5 = const 1_usize;
        _4 = &_5;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in check_ty: &&&&usize = {
    let mut _0: &&&&usize;
    let mut _1: &&&usize;
    let mut _2: &&usize;
    let mut _3: &usize;
    let mut _4: usize;

    bb0: {
        _4 = const 1_usize;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in check_ty: &&&&usize = {
    let mut _0: &&&&usize;
    let mut _1: &&&usize;
    let mut _2: &&usize;
    let mut _3: &usize;
    let mut _4: usize;

    bb0: {
        _4 = const 1_usize;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[3] in check_ty: &&&usize = {
    let mut _0: &&&usize;
    let mut _1: &&usize;
    let mut _2: &usize;
    let mut _3: usize;

    bb0: {
        _3 = const 1_usize;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[4] in check_ty: &&&usize = {
    let mut _0: &&&usize;
    let mut _1: &&usize;
    let mut _2: &usize;
    let mut _3: usize;

    bb0: {
        _3 = const 1_usize;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[5] in check_ty: &&usize = {
    let mut _0: &&usize;
    let mut _1: &usize;
    let mut _2: usize;

    bb0: {
        _2 = const 1_usize;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[6] in check_ty: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn check_pat() -> () {
    let mut _0: ();
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;
    }
}

promoted[0] in check_pat: &&&&&usize = {
    let mut _0: &&&&&usize;
    let mut _1: &&&&usize;
    let mut _2: &&&usize;
    let mut _3: &&usize;
    let mut _4: &usize;
    let mut _5: usize;

    bb0: {
        _5 = const 1_usize;
        _4 = &_5;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in check_pat: &&&&usize = {
    let mut _0: &&&&usize;
    let mut _1: &&&usize;
    let mut _2: &&usize;
    let mut _3: &usize;
    let mut _4: usize;

    bb0: {
        _4 = const 1_usize;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[2] in check_pat: &&&&usize = {
    let mut _0: &&&&usize;
    let mut _1: &&&usize;
    let mut _2: &&usize;
    let mut _3: &usize;
    let mut _4: usize;

    bb0: {
        _4 = const 1_usize;
        _3 = &_4;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[3] in check_pat: &&&usize = {
    let mut _0: &&&usize;
    let mut _1: &&usize;
    let mut _2: &usize;
    let mut _3: usize;

    bb0: {
        _3 = const 1_usize;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[4] in check_pat: &&&usize = {
    let mut _0: &&&usize;
    let mut _1: &&usize;
    let mut _2: &usize;
    let mut _3: usize;

    bb0: {
        _3 = const 1_usize;
        _2 = &_3;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[5] in check_pat: &&usize = {
    let mut _0: &&usize;
    let mut _1: &usize;
    let mut _2: usize;

    bb0: {
        _2 = const 1_usize;
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[6] in check_pat: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
