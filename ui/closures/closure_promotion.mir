// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/closure_promotion.rs:3:11: 3:11
    let _1: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28]; // in scope 0 at ui/closures/closure_promotion.rs:4:9: 4:10
    let _2: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28]; // in scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
    let mut _3: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28]; // in scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/closures/closure_promotion.rs:4:9: 4:10
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
                                         // mir::Constant
                                         // + span: ui/closures/closure_promotion.rs:4:25: 4:45
                                         // + literal: Const { ty: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28], val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
        _1 = _2;                         // scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
        return;                          // scope 0 at ui/closures/closure_promotion.rs:5:2: 5:2
    }
}

promoted[0] in main: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28] = {
    let mut _0: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28]; // return place in scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
    let mut _1: [closure@ui/closures/closure_promotion.rs:4:26: 4:28]; // in scope 0 at ui/closures/closure_promotion.rs:4:26: 4:45

    bb0: {
        _1 = [closure@ui/closures/closure_promotion.rs:4:26: 4:28]; // scope 0 at ui/closures/closure_promotion.rs:4:26: 4:45
                                         // closure
                                         // + def_id: DefId(0:4 ~ closure_promotion[4183]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
        return;                          // scope 0 at ui/closures/closure_promotion.rs:4:25: 4:45
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/closure_promotion.rs:4:26: 4:28]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_promotion.rs:4:29: 4:29
    let _2: i32;                         // in scope 0 at ui/closures/closure_promotion.rs:4:35: 4:36
    scope 1 {
        debug z => _2;                   // in scope 1 at ui/closures/closure_promotion.rs:4:35: 4:36
    }

    bb0: {
        _2 = const 3_i32;                // scope 0 at ui/closures/closure_promotion.rs:4:39: 4:40
        _0 = const 3_i32;                // scope 1 at ui/closures/closure_promotion.rs:4:42: 4:43
        return;                          // scope 0 at ui/closures/closure_promotion.rs:4:45: 4:45
    }
}
