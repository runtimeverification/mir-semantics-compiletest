// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn dup(_1: impl Fn(i32) -> i32) -> impl Fn(i32) -> i32 {
    debug f => _1;
    let mut _0: impl Fn(i32) -> i32;

    bb0: {
        _0 = [closure@ui/closures/issue-72408-nested-closures-exponential.rs:14:5: 14:13] { f: move _1 };
        return;
    }
}

fn dup::{closure#0}(_1: &[closure@ui/closures/issue-72408-nested-closures-exponential.rs:14:5: 14:13], _2: i32) -> i32 {
    debug a => _2;
    debug f => ((*_1).0: impl Fn(i32) -> i32);
    let mut _0: i32;
    let mut _3: &impl Fn(i32) -> i32;
    let mut _4: (i32,);
    let mut _5: i32;

    bb0: {
        _3 = &((*_1).0: impl Fn(i32) -> i32);
        _5 = Mul(_2, const 2_i32);
        _4 = (move _5,);
        _0 = <impl Fn(i32) -> i32 as Fn<(i32,)>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &i32;
    let _41: i32;
    let mut _42: &impl Fn(i32) -> i32;
    let mut _43: (i32,);
    scope 1 {
        debug f => const ZeroSized: [closure@ui/closures/issue-72408-nested-closures-exponential.rs:18:13: 18:16];
        let _1: impl Fn(i32) -> i32;
        scope 2 {
            debug f => const ZeroSized: impl Fn(i32) -> i32;
            let _2: impl Fn(i32) -> i32;
            scope 3 {
                debug f => const ZeroSized: impl Fn(i32) -> i32;
                let _3: impl Fn(i32) -> i32;
                scope 4 {
                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                    let _4: impl Fn(i32) -> i32;
                    scope 5 {
                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                        let _5: impl Fn(i32) -> i32;
                        scope 6 {
                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                            let _6: impl Fn(i32) -> i32;
                            scope 7 {
                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                let _7: impl Fn(i32) -> i32;
                                scope 8 {
                                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                                    let _8: impl Fn(i32) -> i32;
                                    scope 9 {
                                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                                        let _9: impl Fn(i32) -> i32;
                                        scope 10 {
                                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                                            let _10: impl Fn(i32) -> i32;
                                            scope 11 {
                                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                let _11: impl Fn(i32) -> i32;
                                                scope 12 {
                                                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                    let _12: impl Fn(i32) -> i32;
                                                    scope 13 {
                                                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                        let _13: impl Fn(i32) -> i32;
                                                        scope 14 {
                                                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                            let _14: impl Fn(i32) -> i32;
                                                            scope 15 {
                                                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                let _15: impl Fn(i32) -> i32;
                                                                scope 16 {
                                                                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                    let _16: impl Fn(i32) -> i32;
                                                                    scope 17 {
                                                                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                        let _17: impl Fn(i32) -> i32;
                                                                        scope 18 {
                                                                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                            let _18: impl Fn(i32) -> i32;
                                                                            scope 19 {
                                                                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                let _19: impl Fn(i32) -> i32;
                                                                                scope 20 {
                                                                                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                    let _20: impl Fn(i32) -> i32;
                                                                                    scope 21 {
                                                                                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                        let _21: impl Fn(i32) -> i32;
                                                                                        scope 22 {
                                                                                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                            let _22: impl Fn(i32) -> i32;
                                                                                            scope 23 {
                                                                                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                let _23: impl Fn(i32) -> i32;
                                                                                                scope 24 {
                                                                                                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                    let _24: impl Fn(i32) -> i32;
                                                                                                    scope 25 {
                                                                                                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                        let _25: impl Fn(i32) -> i32;
                                                                                                        scope 26 {
                                                                                                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                            let _26: impl Fn(i32) -> i32;
                                                                                                            scope 27 {
                                                                                                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                                let _27: impl Fn(i32) -> i32;
                                                                                                                scope 28 {
                                                                                                                    debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                                    let _28: impl Fn(i32) -> i32;
                                                                                                                    scope 29 {
                                                                                                                        debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                                        let _29: impl Fn(i32) -> i32;
                                                                                                                        scope 30 {
                                                                                                                            debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                                            let _30: impl Fn(i32) -> i32;
                                                                                                                            scope 31 {
                                                                                                                                debug f => const ZeroSized: impl Fn(i32) -> i32;
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = dup::<[closure@ui/closures/issue-72408-nested-closures-exponential.rs:18:13: 18:16]>(const ZeroSized: [closure@ui/closures/issue-72408-nested-closures-exponential.rs:18:13: 18:16]) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _8 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb10, unwind continue];
    }

    bb10: {
        _11 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb11, unwind continue];
    }

    bb11: {
        _12 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb12, unwind continue];
    }

    bb12: {
        _13 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb13, unwind continue];
    }

    bb13: {
        _14 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb14, unwind continue];
    }

    bb14: {
        _15 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb15, unwind continue];
    }

    bb15: {
        _16 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb16, unwind continue];
    }

    bb16: {
        _17 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb17, unwind continue];
    }

    bb17: {
        _18 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb18, unwind continue];
    }

    bb18: {
        _19 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb19, unwind continue];
    }

    bb19: {
        _20 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb20, unwind continue];
    }

    bb20: {
        _21 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb21, unwind continue];
    }

    bb21: {
        _22 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb22, unwind continue];
    }

    bb22: {
        _23 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb23, unwind continue];
    }

    bb23: {
        _24 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb24, unwind continue];
    }

    bb24: {
        _25 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb25, unwind continue];
    }

    bb25: {
        _26 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb26, unwind continue];
    }

    bb26: {
        _27 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb27, unwind continue];
    }

    bb27: {
        _28 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb28, unwind continue];
    }

    bb28: {
        _29 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb29, unwind continue];
    }

    bb29: {
        _30 = dup::<impl Fn(i32) -> i32>(const ZeroSized: impl Fn(i32) -> i32) -> [return: bb30, unwind continue];
    }

    bb30: {
        _35 = [const "Type size was at least ", const "\n"];
        _34 = &_35;
        _33 = _34 as &[&str] (PointerCoercion(Unsize));
        _42 = &_30;
        _43 = (const 1_i32,);
        _41 = <impl Fn(i32) -> i32 as Fn<(i32,)>>::call(move _42, move _43) -> [return: bb31, unwind continue];
    }

    bb31: {
        _40 = &_41;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_40) -> [return: bb32, unwind continue];
    }

    bb32: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _36) -> [return: bb33, unwind continue];
    }

    bb33: {
        _31 = _print(move _32) -> [return: bb34, unwind continue];
    }

    bb34: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/issue-72408-nested-closures-exponential.rs:18:13: 18:16], _2: i32) -> i32 {
    debug a => _2;
    let mut _0: i32;

    bb0: {
        _0 = _2;
        return;
    }
}
