// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/semistatement-in-lambda.rs:5:15: 5:15
    let mut _1: i32;                     // in scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:30
    let mut _2: i32;                     // in scope 0 at ui/closures/semistatement-in-lambda.rs:7:6: 7:30
    let mut _3: bool;                    // in scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:30
    let mut _4: (i32, bool);             // in scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:34

    bb0: {
        _2 = const 1_i32;                // scope 0 at ui/closures/semistatement-in-lambda.rs:7:16: 7:17
        _3 = Eq(_2, const i32::MIN);     // scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:30
        assert(!move _3, "attempt to negate `{}`, which would overflow", _2) -> bb1; // scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:30
    }

    bb1: {
        _1 = Neg(move _2);               // scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:30
        _4 = CheckedMul(_1, const 3_i32); // scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:34
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _1, const 3_i32) -> bb2; // scope 0 at ui/closures/semistatement-in-lambda.rs:7:5: 7:34
    }

    bb2: {
        return;                          // scope 0 at ui/closures/semistatement-in-lambda.rs:12:2: 12:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/semistatement-in-lambda.rs:8:5: 8:7]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/semistatement-in-lambda.rs:8:8: 8:8
    let mut _2: i32;                     // in scope 0 at ui/closures/semistatement-in-lambda.rs:8:8: 8:32
    let mut _3: (i32, bool);             // in scope 0 at ui/closures/semistatement-in-lambda.rs:8:8: 8:36

    bb0: {
        _2 = const 1_i32;                // scope 0 at ui/closures/semistatement-in-lambda.rs:8:18: 8:19
        _3 = CheckedMul(_2, const 3_i32); // scope 0 at ui/closures/semistatement-in-lambda.rs:8:8: 8:36
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 3_i32) -> bb1; // scope 0 at ui/closures/semistatement-in-lambda.rs:8:8: 8:36
    }

    bb1: {
        _0 = move (_3.0: i32);           // scope 0 at ui/closures/semistatement-in-lambda.rs:8:8: 8:36
        return;                          // scope 0 at ui/closures/semistatement-in-lambda.rs:8:36: 8:36
    }
}
