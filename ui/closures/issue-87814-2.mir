// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-87814-2.rs:3:11: 3:11
    let mut _1: (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>); // in scope 0 at ui/closures/issue-87814-2.rs:4:9: 4:23
    let mut _2: std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let mut _3: std::vec::Vec<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let mut _5: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>); // in scope 0 at ui/closures/issue-87814-2.rs:6:14: 9:6
    scope 1 {
        debug schema_all => _1;          // in scope 1 at ui/closures/issue-87814-2.rs:4:9: 4:23
        let _4: [closure@ui/closures/issue-87814-2.rs:6:14: 6:16]; // in scope 1 at ui/closures/issue-87814-2.rs:6:9: 6:11
        scope 2 {
            debug _c => _4;              // in scope 2 at ui/closures/issue-87814-2.rs:6:9: 6:11
        }
    }

    bb0: {
        _2 = Vec::<String>::new() -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<String> {Vec::<String>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Vec::<String>::new() -> [return: bb2, unwind: bb4]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<String> {Vec::<String>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = (move _2, move _3);         // scope 0 at ui/closures/issue-87814-2.rs:4:54: 4:70
        _5 = &mut _1;                    // scope 1 at ui/closures/issue-87814-2.rs:6:14: 9:6
        _4 = [closure@ui/closures/issue-87814-2.rs:6:14: 6:16] { schema_all: move _5 }; // scope 1 at ui/closures/issue-87814-2.rs:6:14: 9:6
                                         // closure
                                         // + def_id: DefId(0:4 ~ issue_87814_2[de2d]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>),),
                                         // ]
        drop(_1) -> bb3;                 // scope 0 at ui/closures/issue-87814-2.rs:10:1: 10:2
    }

    bb3: {
        return;                          // scope 0 at ui/closures/issue-87814-2.rs:10:2: 10:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/closures/issue-87814-2.rs:4:69: 4:70
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/closures/issue-87814-2.rs:3:1: 10:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/issue-87814-2.rs:6:14: 6:16]) -> () {
    debug schema_all => (*((*_1).0: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>))); // in scope 0 at ui/closures/issue-87814-2.rs:4:9: 4:23
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-87814-2.rs:6:17: 6:17
    let mut _2: std::result::Result<(), std::collections::TryReserveError>; // in scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:67
    let mut _3: &mut std::vec::Vec<std::string::String>; // in scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:50
    let mut _4: isize;                   // in scope 0 at ui/closures/issue-87814-2.rs:7:9: 7:15
    let mut _5: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>); // in scope 0 at ui/closures/issue-87814-2.rs:6:14: 9:6

    bb0: {
        _5 = deref_copy ((*_1).0: &mut (std::vec::Vec<std::string::String>, std::vec::Vec<std::string::String>)); // scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:50
        _3 = &mut ((*_5).0: std::vec::Vec<std::string::String>); // scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:50
        _2 = Vec::<String>::try_reserve(move _3, const 1_usize) -> bb1; // scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:50
                                         // mir::Constant
                                         // + span: ui/closures/issue-87814-2.rs:6:36: 6:47
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<String>, usize) -> Result<(), TryReserveError> {Vec::<String>::try_reserve}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:67
        switchInt(move _4) -> [0: bb3, 1: bb3, otherwise: bb2]; // scope 0 at ui/closures/issue-87814-2.rs:6:17: 6:67
    }

    bb2: {
        unreachable;                     // scope 0 at ui/closures/issue-87814-2.rs:6:23: 6:67
    }

    bb3: {
        return;                          // scope 0 at ui/closures/issue-87814-2.rs:9:6: 9:6
    }
}
