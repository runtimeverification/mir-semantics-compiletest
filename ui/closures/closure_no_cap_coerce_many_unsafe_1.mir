// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: i32, _2: i32) -> i32 {
    debug a => _1;
    debug b => _2;
    let mut _0: i32;

    bb0: {
        _0 = Add(_1, _2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: unsafe fn(i32, i32) -> i32;
    let mut _2: &str;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: !;
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let _8: i32;
    let mut _9: unsafe fn(i32, i32) -> i32;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: &str;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: !;
    let mut _24: (&i32, &i32);
    let mut _25: &i32;
    let _26: i32;
    let mut _27: unsafe fn(i32, i32) -> i32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: i32;
    let mut _33: i32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug foo => _1;
        let _10: &i32;
        let _11: &i32;
        let _19: unsafe fn(i32, i32) -> i32;
        let mut _38: &i32;
        scope 2 {
        }
        scope 3 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 4 {
                debug kind => _16;
            }
        }
        scope 5 {
            debug foo => _19;
            let _28: &i32;
            let _29: &i32;
            let mut _37: &i32;
            scope 6 {
            }
            scope 7 {
                debug left_val => _28;
                debug right_val => _29;
                let _34: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _34;
                }
            }
        }
    }

    bb0: {
        _2 = const "+";
        _3 = <str as PartialEq>::eq(_2, const "+") -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb5];
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "-") -> [return: bb3, unwind continue];
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb6];
    }

    bb4: {
        _5 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb5: {
        _1 = add as unsafe fn(i32, i32) -> i32 (Pointer(ReifyFnPointer));
        goto -> bb7;
    }

    bb6: {
        _1 = const ZeroSized: [closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:16: 10:22] as unsafe fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Unsafe)));
        goto -> bb7;
    }

    bb7: {
        _9 = _1;
        _8 = move _9(const 5_i32, const 5_i32) -> [return: bb8, unwind continue];
    }

    bb8: {
        _7 = &_8;
        _38 = const _;
        _6 = (move _7, _38);
        _10 = (_6.0: &i32);
        _11 = (_6.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb10: {
        _20 = const "-";
        _21 = <str as PartialEq>::eq(_20, const "-") -> [return: bb11, unwind continue];
    }

    bb11: {
        switchInt(move _21) -> [0: bb12, otherwise: bb15];
    }

    bb12: {
        _22 = <str as PartialEq>::eq(_20, const "+") -> [return: bb13, unwind continue];
    }

    bb13: {
        switchInt(move _22) -> [0: bb14, otherwise: bb16];
    }

    bb14: {
        _23 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb15: {
        _19 = const ZeroSized: [closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:16: 18:22] as unsafe fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Unsafe)));
        goto -> bb17;
    }

    bb16: {
        _19 = add as unsafe fn(i32, i32) -> i32 (Pointer(ReifyFnPointer));
        goto -> bb17;
    }

    bb17: {
        _27 = _19;
        _26 = move _27(const 5_i32, const 5_i32) -> [return: bb18, unwind continue];
    }

    bb18: {
        _25 = &_26;
        _37 = const _;
        _24 = (move _25, _37);
        _28 = (_24.0: &i32);
        _29 = (_24.1: &i32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<i32, i32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb20: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:16: 10:22], _2: i32, _3: i32) -> i32 {
    debug a => _2;
    debug b => _3;
    let mut _0: i32;

    bb0: {
        _0 = Sub(_2, _3);
        return;
    }
}

fn main::{closure#1}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:16: 18:22], _2: i32, _3: i32) -> i32 {
    debug a => _2;
    debug b => _3;
    let mut _0: i32;

    bb0: {
        _0 = Sub(_2, _3);
        return;
    }
}
