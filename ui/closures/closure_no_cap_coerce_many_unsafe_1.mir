// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn add(_1: i32, _2: i32) -> i32 {
    debug a => _1;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:3:15: 3:16
    debug b => _2;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:3:23: 3:24
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:3:34: 3:37
    let mut _3: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:5: 4:6
    let mut _4: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:9: 4:10
    let mut _5: (i32, bool);             // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:5: 4:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:5: 4:6
        _4 = _2;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:9: 4:10
        _5 = CheckedAdd(_3, _4);         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:5: 4:10
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:5: 4:10
    }

    bb1: {
        _0 = move (_5.0: i32);           // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:4:5: 4:10
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:5:2: 5:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:6:11: 6:11
    let _1: unsafe fn(i32, i32) -> i32;  // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:8:9: 8:12
    let mut _2: &str;                    // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:8:21: 8:24
    let mut _3: bool;                    // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:9: 9:12
    let mut _4: bool;                    // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:9: 10:12
    let mut _5: [closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:16: 10:22]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:16: 10:37
    let mut _6: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _7: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: i32;                         // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:13:16: 13:36
    let mut _10: unsafe fn(i32, i32) -> i32; // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:13:25: 13:28
    let mut _11: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: &str;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:17:21: 17:24
    let mut _28: bool;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:9: 18:12
    let mut _29: bool;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:9: 19:12
    let mut _30: [closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:16: 18:22]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:16: 18:37
    let mut _31: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _32: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: i32;                        // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:22:16: 22:36
    let mut _35: unsafe fn(i32, i32) -> i32; // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:22:25: 22:28
    let mut _36: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _41: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _42: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _46: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _47: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _48: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _49: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:8:9: 8:12
        let _12: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _26: unsafe fn(i32, i32) -> i32; // in scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:17:9: 17:12
        let mut _52: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
        }
        scope 3 {
            debug left_val => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _18;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug foo => _26;            // in scope 5 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:17:9: 17:12
            let _37: &i32;               // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _38: &i32;               // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _51: &i32;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 6 {
            }
            scope 7 {
                debug left_val => _37;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _38;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _43: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _43;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const "+";                  // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:8:21: 8:24
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:8:21: 8:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = <str as PartialEq>::eq(_2, const "+") -> bb1; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:9: 9:12
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:9: 9:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:9: 9:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _3) -> [0: bb2, otherwise: bb5]; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:9: 9:12
    }

    bb2: {
        _4 = <str as PartialEq>::eq(_2, const "-") -> bb3; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:9: 10:12
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:9: 10:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:9: 10:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _4) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:9: 10:12
    }

    bb4: {
        _6 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _1 = add as unsafe fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:16: 9:19
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:16: 9:19
                                         // + literal: Const { ty: unsafe fn(i32, i32) -> i32 {add}, val: Value(<ZST>) }
        goto -> bb7;                     // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:9:16: 9:19
    }

    bb6: {
        _1 = move _5 as unsafe fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Unsafe))); // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:16: 10:37
        goto -> bb7;                     // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:21: 10:22
    }

    bb7: {
        _10 = _1;                        // scope 2 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:13:25: 13:28
        _9 = move _10(const 5_i32, const 5_i32) -> bb8; // scope 2 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:13:25: 13:34
    }

    bb8: {
        _8 = &_9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _11 = _52;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_7.0: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_7.1: &i32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 10_i32;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<i32, i32>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb10: {
        _27 = const "-";                 // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:17:21: 17:24
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:17:21: 17:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _28 = <str as PartialEq>::eq(_27, const "-") -> bb11; // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:9: 18:12
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:9: 18:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:9: 18:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _28) -> [0: bb12, otherwise: bb15]; // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:9: 18:12
    }

    bb12: {
        _29 = <str as PartialEq>::eq(_27, const "+") -> bb13; // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:9: 19:12
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:9: 19:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:9: 19:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _29) -> [0: bb14, otherwise: bb16]; // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:9: 19:12
    }

    bb14: {
        _31 = core::panicking::panic(const "not implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _26 = move _30 as unsafe fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Unsafe))); // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:16: 18:37
        goto -> bb17;                    // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:21: 18:22
    }

    bb16: {
        _26 = add as unsafe fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:16: 19:19
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:16: 19:19
                                         // + literal: Const { ty: unsafe fn(i32, i32) -> i32 {add}, val: Value(<ZST>) }
        goto -> bb17;                    // scope 1 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:19:16: 19:19
    }

    bb17: {
        _35 = _26;                       // scope 6 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:22:25: 22:28
        _34 = move _35(const 5_i32, const 5_i32) -> bb18; // scope 6 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:22:25: 22:34
    }

    bb18: {
        _33 = &_34;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _51 = const _;                   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _36 = _51;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _36);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _37 = (_32.0: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _38 = (_32.1: &i32);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _42 = const 0_i32;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _40 = Eq(move _41, move _42);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _39 = Not(move _40);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _39) -> [0: bb20, otherwise: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _43 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _47;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = _49;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _44 = core::panicking::assert_failed::<i32, i32>(move _45, move _46, move _48, move _50); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb20: {
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:23:2: 23:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:22:38: 22:39

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:22:38: 22:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:13:38: 13:40

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:13:38: 13:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:16: 10:22], _2: i32, _3: i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:17: 10:18
    debug b => _3;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:20: 10:21
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:23: 10:23
    let mut _4: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:24: 10:25
    let mut _5: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:28: 10:29
    let mut _6: (i32, bool);             // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:23: 10:30

    bb0: {
        _4 = _2;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:24: 10:25
        _5 = _3;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:28: 10:29
        _6 = CheckedSub(_4, _5);         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:23: 10:30
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:23: 10:30
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:23: 10:30
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:10:37: 10:37
    }
}

fn main::{closure#1}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:16: 18:22], _2: i32, _3: i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:17: 18:18
    debug b => _3;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:20: 18:21
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:23: 18:23
    let mut _4: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:24: 18:25
    let mut _5: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:28: 18:29
    let mut _6: (i32, bool);             // in scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:23: 18:30

    bb0: {
        _4 = _2;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:24: 18:25
        _5 = _3;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:28: 18:29
        _6 = CheckedSub(_4, _5);         // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:23: 18:30
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:23: 18:30
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:23: 18:30
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_unsafe_1.rs:18:37: 18:37
    }
}
