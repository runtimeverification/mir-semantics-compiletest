// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Bug::inner::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:17: 11:6
    let mut _1: [closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25]; // in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:27
    let _2: [closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25]; // in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:10:9: 10:11
    scope 1 {
        debug _n => _2;                  // in scope 1 at ui/closures/thir-unsafeck-issue-85871.rs:10:9: 10:11
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:27
        _1 = [closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25]; // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:27
                                         // closure
                                         // + def_id: DefId(0:6 ~ thir_unsafeck_issue_85871[e3a4]::Bug::inner::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (),
                                         // ]
        StorageLive(_2);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:10:9: 10:11
        _2 = _1;                         // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:10:9: 10:11
        _0 = const 42_usize;             // scope 1 at ui/closures/thir-unsafeck-issue-85871.rs:10:15: 10:17
        StorageDead(_2);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:10:16: 10:17
        StorageDead(_1);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:11:5: 11:6
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:17: 11:6
    }
}

fn Bug::inner::{constant#0}::{closure#0}(_1: &[closure@ui/closures/thir-unsafeck-issue-85871.rs:9:23: 9:25]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:26: 9:26

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:26: 9:27
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:9:27: 9:27
    }
}

E::V::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:12: 15:32
    let mut _1: [closure@ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:24]; // in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:26
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:26
        _1 = [closure@ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:24]; // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:26
                                         // closure
                                         // + def_id: DefId(0:12 ~ thir_unsafeck_issue_85871[e3a4]::E::V::0::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:26: 15:27
        _0 = const 42_usize;             // scope 1 at ui/closures/thir-unsafeck-issue-85871.rs:15:28: 15:30
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:12: 15:32
    }
}

fn E::V::0::{constant#0}::{closure#0}(_1: &[closure@ui/closures/thir-unsafeck-issue-85871.rs:15:22: 15:24]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:25: 15:25

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:25: 15:26
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:26: 15:26
    }
}

Ty::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:16: 18:36
    let mut _1: [closure@ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:28]; // in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:30
    scope 1 {
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:30
        _1 = [closure@ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:28]; // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:30
                                         // closure
                                         // + def_id: DefId(0:15 ~ thir_unsafeck_issue_85871[e3a4]::Ty::{constant#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> i32,
                                         //     (),
                                         // ]
        StorageDead(_1);                 // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:30: 18:31
        _0 = const 42_usize;             // scope 1 at ui/closures/thir-unsafeck-issue-85871.rs:18:32: 18:34
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:16: 18:36
    }
}

fn Ty::{constant#0}::{closure#0}(_1: &[closure@ui/closures/thir-unsafeck-issue-85871.rs:18:26: 18:28]) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:29: 18:29

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:29: 18:30
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:18:30: 18:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:20:13: 20:13
    }
}

fn E::V(_1: [(); 42]) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:5: 15:6

    bb0: {
        _0 = E::V(move _1);              // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:5: 15:6
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:5: 15:6
    }
}

// MIR FOR CTFE
fn E::V(_1: [(); 42]) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:5: 15:6

    bb0: {
        _0 = E::V(move _1);              // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:5: 15:6
        return;                          // scope 0 at ui/closures/thir-unsafeck-issue-85871.rs:15:5: 15:6
    }
}
