// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn iter_vec(_1: Vec<T>, _2: F) -> () {
    debug v => _1;                       // in scope 0 at ui/closures/old-closure-iter-2.rs:3:19: 3:20
    debug f => _2;                       // in scope 0 at ui/closures/old-closure-iter-2.rs:3:30: 3:35
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-2.rs:3:40: 3:40
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    let mut _5: std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    let mut _6: std::option::Option<&T>; // in scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    let mut _9: isize;                   // in scope 0 at ui/closures/old-closure-iter-2.rs:3:61: 3:82
    let _11: ();                         // in scope 0 at ui/closures/old-closure-iter-2.rs:3:75: 3:79
    let mut _12: &mut F;                 // in scope 0 at ui/closures/old-closure-iter-2.rs:3:75: 3:76
    let mut _13: (&T,);                  // in scope 0 at ui/closures/old-closure-iter-2.rs:3:75: 3:79
    let mut _14: &T;                     // in scope 0 at ui/closures/old-closure-iter-2.rs:3:77: 3:78
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
        let _10: &T;                     // in scope 1 at ui/closures/old-closure-iter-2.rs:3:65: 3:66
        scope 2 {
            debug x => _10;              // in scope 2 at ui/closures/old-closure-iter-2.rs:3:65: 3:66
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb9]; // scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:3:70: 3:72
                                         // + literal: Const { ty: fn(&Vec<T>) -> <&Vec<T> as IntoIterator>::IntoIter {<&Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
        goto -> bb2;                     // scope 1 at ui/closures/old-closure-iter-2.rs:3:61: 3:82
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
        _7 = &mut (*_8);                 // scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(move _7) -> [return: bb3, unwind: bb9]; // scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:3:70: 3:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    }

    bb4: {
        _10 = ((_6 as Some).0: &T);      // scope 1 at ui/closures/old-closure-iter-2.rs:3:65: 3:66
        _12 = &mut _2;                   // scope 2 at ui/closures/old-closure-iter-2.rs:3:75: 3:76
        _14 = _10;                       // scope 2 at ui/closures/old-closure-iter-2.rs:3:77: 3:78
        _13 = (move _14,);               // scope 2 at ui/closures/old-closure-iter-2.rs:3:75: 3:79
        _11 = <F as FnMut<(&T,)>>::call_mut(move _12, move _13) -> [return: bb12, unwind: bb9]; // scope 2 at ui/closures/old-closure-iter-2.rs:3:75: 3:79
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:3:75: 3:76
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/closures/old-closure-iter-2.rs:3:70: 3:72
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb10]; // scope 0 at ui/closures/old-closure-iter-2.rs:3:83: 3:84
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/closures/old-closure-iter-2.rs:3:83: 3:84
    }

    bb8: {
        return;                          // scope 0 at ui/closures/old-closure-iter-2.rs:3:84: 3:84
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/closures/old-closure-iter-2.rs:3:83: 3:84
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/closures/old-closure-iter-2.rs:3:83: 3:84
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/closures/old-closure-iter-2.rs:3:1: 3:84
    }

    bb12: {
        goto -> bb2;                     // scope 2 at ui/closures/old-closure-iter-2.rs:3:75: 3:79
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-2.rs:5:15: 5:15
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/closures/old-closure-iter-2.rs:6:9: 6:10
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 5]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: ();                          // in scope 0 at ui/closures/old-closure-iter-2.rs:8:5: 12:7
    let mut _10: std::vec::Vec<i32>;     // in scope 0 at ui/closures/old-closure-iter-2.rs:8:14: 8:23
    let mut _11: &std::vec::Vec<i32>;    // in scope 0 at ui/closures/old-closure-iter-2.rs:8:14: 8:23
    let mut _12: [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28]; // in scope 0 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
    let mut _13: &std::vec::Vec<i32>;    // in scope 0 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
    let mut _14: &mut i32;               // in scope 0 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
    let _15: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _16: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _17: &[&str];                // in scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
    let mut _18: &[&str; 2];             // in scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
    let _19: &[&str; 2];                 // in scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
    let mut _20: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/closures/old-closure-iter-2.rs:13:20: 13:23
    let mut _25: &i32;                   // in scope 0 at ui/closures/old-closure-iter-2.rs:13:20: 13:23
    let _26: &i32;                       // in scope 0 at ui/closures/old-closure-iter-2.rs:13:20: 13:23
    let mut _27: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _28: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _29: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _46: *const [i32; 5];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/closures/old-closure-iter-2.rs:6:9: 6:10
        let mut _8: i32;                 // in scope 1 at ui/closures/old-closure-iter-2.rs:7:9: 7:16
        scope 3 {
            debug sum => _8;             // in scope 3 at ui/closures/old-closure-iter-2.rs:7:9: 7:16
            let _30: &i32;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _31: &i32;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _44: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _45: &[&str; 2];     // in scope 3 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
            scope 4 {
                debug left_val => _30;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _31;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _36: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _36;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 20_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _46 = (((_7.0: std::ptr::Unique<[i32; 5]>).0: std::ptr::NonNull<[i32; 5]>).0: *const [i32; 5]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_46) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const 0_i32;                // scope 1 at ui/closures/old-closure-iter-2.rs:7:19: 7:20
        _11 = &_1;                       // scope 3 at ui/closures/old-closure-iter-2.rs:8:14: 8:23
        _10 = <Vec<i32> as Clone>::clone(move _11) -> [return: bb3, unwind: bb11]; // scope 3 at ui/closures/old-closure-iter-2.rs:8:14: 8:23
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:8:16: 8:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> Vec<i32> {<Vec<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &_1;                       // scope 3 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
        _14 = &mut _8;                   // scope 3 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
        _12 = [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28] { v: move _13, sum: move _14 }; // scope 3 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
                                         // closure
                                         // + def_id: DefId(0:7 ~ old_closure_iter_2[e98a]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a i32,)),
                                         //     (&std::vec::Vec<i32>, &mut i32),
                                         // ]
        _9 = iter_vec::<i32, [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28]>(move _10, move _12) -> [return: bb4, unwind: bb11]; // scope 3 at ui/closures/old-closure-iter-2.rs:8:5: 12:7
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:8:5: 8:13
                                         // + literal: Const { ty: fn(Vec<i32>, [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28]) {iter_vec::<i32, [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28]>}, val: Value(<ZST>) }
    }

    bb4: {
        _45 = const _;                   // scope 3 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:13:14: 13:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _19 = _45;                       // scope 3 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
        _18 = _19;                       // scope 3 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
        _17 = move _18 as &[&str] (Pointer(Unsize)); // scope 3 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
        _26 = &_8;                       // scope 3 at ui/closures/old-closure-iter-2.rs:13:20: 13:23
        _25 = _26;                       // scope 3 at ui/closures/old-closure-iter-2.rs:13:20: 13:23
        _24 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _25) -> [return: bb5, unwind: bb11]; // scope 3 at ui/closures/old-closure-iter-2.rs:13:20: 13:23
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:13:20: 13:23
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _23 = [move _24];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = &_23;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = move _21 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = Arguments::<'_>::new_v1(move _17, move _20) -> [return: bb6, unwind: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = _print(move _16) -> [return: bb7, unwind: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _28 = &_8;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _29 = _44;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _27 = (move _28, move _29);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_27.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_27.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = (*_30);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = const 225_i32;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = Eq(move _34, move _35);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _32 = Not(move _33);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb9, otherwise: bb8]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<i32, i32>(move _38, move _39, move _41, move _43) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/closures/old-closure-iter-2.rs:15:1: 15:2
    }

    bb10: {
        return;                          // scope 0 at ui/closures/old-closure-iter-2.rs:15:2: 15:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb12;                // scope 0 at ui/closures/old-closure-iter-2.rs:15:1: 15:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/closures/old-closure-iter-2.rs:5:1: 15:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/closures/old-closure-iter-2.rs:14:21: 14:24

    bb0: {
        _1 = const 225_i32;              // scope 0 at ui/closures/old-closure-iter-2.rs:14:21: 14:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
    let mut _1: [&str; 2];               // in scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
        return;                          // scope 0 at ui/closures/old-closure-iter-2.rs:13:14: 13:18
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/old-closure-iter-2.rs:8:25: 8:28], _2: &i32) -> () {
    debug i => _2;                       // in scope 0 at ui/closures/old-closure-iter-2.rs:8:26: 8:27
    debug v => (*((*_1).0: &std::vec::Vec<i32>)); // in scope 0 at ui/closures/old-closure-iter-2.rs:6:9: 6:10
    debug sum => (*((*_1).1: &mut i32)); // in scope 0 at ui/closures/old-closure-iter-2.rs:7:9: 7:16
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-2.rs:8:29: 8:29
    let _3: ();                          // in scope 0 at ui/closures/old-closure-iter-2.rs:9:9: 11:11
    let mut _4: std::vec::Vec<i32>;      // in scope 0 at ui/closures/old-closure-iter-2.rs:9:18: 9:27
    let mut _5: &std::vec::Vec<i32>;     // in scope 0 at ui/closures/old-closure-iter-2.rs:9:18: 9:27
    let mut _6: [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32]; // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _7: &mut i32;                // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _8: &&i32;                   // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _9: &std::vec::Vec<i32>;     // in scope 0 at ui/closures/old-closure-iter-2.rs:8:25: 12:6
    let mut _10: &mut i32;               // in scope 0 at ui/closures/old-closure-iter-2.rs:8:25: 12:6

    bb0: {
        _9 = deref_copy ((*_1).0: &std::vec::Vec<i32>); // scope 0 at ui/closures/old-closure-iter-2.rs:9:18: 9:27
        _5 = _9;                         // scope 0 at ui/closures/old-closure-iter-2.rs:9:18: 9:27
        _4 = <Vec<i32> as Clone>::clone(move _5) -> bb1; // scope 0 at ui/closures/old-closure-iter-2.rs:9:18: 9:27
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:9:20: 9:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> Vec<i32> {<Vec<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = deref_copy ((*_1).1: &mut i32); // scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
        _7 = &mut (*_10);                // scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
        _8 = &_2;                        // scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
        _6 = [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32] { i: move _7, sum: move _8 }; // scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
                                         // closure
                                         // + def_id: DefId(0:8 ~ old_closure_iter_2[e98a]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a i32,)),
                                         //     (&mut i32, &&i32),
                                         // ]
        _3 = iter_vec::<i32, [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32]>(move _4, move _6) -> bb2; // scope 0 at ui/closures/old-closure-iter-2.rs:9:9: 11:11
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-2.rs:9:9: 9:17
                                         // + literal: Const { ty: fn(Vec<i32>, [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32]) {iter_vec::<i32, [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/closures/old-closure-iter-2.rs:12:6: 12:6
    }
}

fn main::{closure#0}::{closure#0}(_1: &mut [closure@ui/closures/old-closure-iter-2.rs:9:29: 9:32], _2: &i32) -> () {
    debug j => _2;                       // in scope 0 at ui/closures/old-closure-iter-2.rs:9:30: 9:31
    debug sum => (*((*_1).0: &mut i32)); // in scope 0 at ui/closures/old-closure-iter-2.rs:7:9: 7:16
    debug i => (*((*_1).1: &&i32));      // in scope 0 at ui/closures/old-closure-iter-2.rs:8:26: 8:27
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-2.rs:9:33: 9:33
    let mut _3: i32;                     // in scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:27
    let mut _4: i32;                     // in scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:22
    let mut _5: i32;                     // in scope 0 at ui/closures/old-closure-iter-2.rs:10:25: 10:27
    let mut _6: (i32, bool);             // in scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:27
    let mut _7: (i32, bool);             // in scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
    let mut _8: &&i32;                   // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _9: &i32;                    // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _10: &mut i32;               // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _11: &mut i32;               // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10
    let mut _12: &mut i32;               // in scope 0 at ui/closures/old-closure-iter-2.rs:9:29: 11:10

    bb0: {
        _8 = deref_copy ((*_1).1: &&i32); // scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:22
        _9 = deref_copy (*_8);           // scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:22
        _4 = (*_9);                      // scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:22
        _5 = (*_2);                      // scope 0 at ui/closures/old-closure-iter-2.rs:10:25: 10:27
        _6 = CheckedMul(_4, _5);         // scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:27
        assert(!move (_6.1: bool), "attempt to compute `{} * {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:27
    }

    bb1: {
        _3 = move (_6.0: i32);           // scope 0 at ui/closures/old-closure-iter-2.rs:10:20: 10:27
        _10 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
        _7 = CheckedAdd((*_10), _3);     // scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
        _11 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_11), move _3) -> bb2; // scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
    }

    bb2: {
        _12 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
        (*_12) = move (_7.0: i32);       // scope 0 at ui/closures/old-closure-iter-2.rs:10:13: 10:27
        return;                          // scope 0 at ui/closures/old-closure-iter-2.rs:11:10: 11:10
    }
}
