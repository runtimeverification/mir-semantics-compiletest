// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: usize) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:3:21: 3:26

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:4:5: 4:6
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:5:2: 5:2
    }
}

fn bar(_1: usize) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:7:21: 7:26

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:8:5: 8:6
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:9:2: 9:2
    }
}

fn add(_1: i32, _2: i32) -> i32 {
    debug a => _1;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:11:8: 11:9
    debug b => _2;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:11:16: 11:17
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:11:27: 11:30
    let mut _3: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:5: 12:6
    let mut _4: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:9: 12:10
    let mut _5: (i32, bool);             // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:5: 12:10

    bb0: {
        _3 = _1;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:5: 12:6
        _4 = _2;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:9: 12:10
        _5 = CheckedAdd(_3, _4);         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:5: 12:10
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:5: 12:10
    }

    bb1: {
        _0 = move (_5.0: i32);           // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:12:5: 12:10
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:13:2: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:15:11: 15:11
    let _1: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:13: 20:16]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:9: 20:10
    let mut _3: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:13: 20:16]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:21:32: 21:33
    let mut _4: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: usize;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:22:16: 22:29
    let mut _7: fn(usize) -> usize;      // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:22:16: 22:25
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: usize;                      // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:29:16: 29:21
    let mut _27: fn(usize) -> usize;     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:29:16: 29:17
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:14: 32:17]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:14: 32:19
    let mut _45: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _47: usize;                      // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:36:16: 36:21
    let mut _48: fn(usize) -> usize;     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:36:16: 36:17
    let mut _49: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _65: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _66: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _67: usize;                      // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:44:16: 44:21
    let mut _68: fn(usize) -> usize;     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:44:16: 44:17
    let mut _69: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _72: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _74: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _75: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _77: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _78: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _79: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _80: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _81: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _82: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _83: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _88: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:16: 46:26]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:50:14: 50:18
    let mut _89: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _90: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _91: i32;                        // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:55:16: 55:21
    let mut _92: fn(usize) -> i32;       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:55:16: 55:17
    let mut _93: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _96: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _97: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _98: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _99: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _101: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _102: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _103: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _104: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _105: &i32;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _106: &i32;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _109: fn(i32, i32) -> i32;   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:18: 57:21
    let mut _110: fn(i32, i32) -> i32;   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:23: 57:44
    let mut _111: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:23: 57:29]; // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:23: 57:44
    let mut _112: (&[i32; 2], &[i32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _113: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _114: [i32; 2];                  // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:16: 58:48
    let mut _115: i32;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:17: 58:31
    let mut _116: fn(i32, i32) -> i32;   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:17: 58:25
    let _117: usize;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:23: 58:24
    let mut _118: i32;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:33: 58:47
    let mut _119: fn(i32, i32) -> i32;   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:33: 58:41
    let _120: usize;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:39: 58:40
    let mut _121: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _124: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _125: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _126: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _127: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _129: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _130: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _131: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _132: &[i32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _133: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _134: &[i32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _135: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug c => _1;                   // in scope 1 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:9: 20:10
        let _2: fn(usize) -> usize;      // in scope 1 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:21:9: 21:18
        scope 2 {
            debug c_pointer => _2;       // in scope 2 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:21:9: 21:18
            let _9: &usize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _10: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _23: fn(usize) -> usize; // in scope 2 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:24:9: 24:10
            let mut _141: &usize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _9;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _10;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _15: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _15;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug f => _23;          // in scope 5 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:24:9: 24:10
                let _29: &usize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _30: &usize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _43: fn(usize) -> usize; // in scope 5 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:31:9: 31:10
                let mut _140: &usize;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _29; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _30; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _35: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _35; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    debug f => _43;      // in scope 8 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:31:9: 31:10
                    let _50: &usize;     // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _51: &usize;     // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _64: fn(usize) -> usize; // in scope 8 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:38:9: 38:10
                    let mut _139: &usize; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 9 {
                        debug left_val => _50; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _51; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _56: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _56; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 11 {
                        debug f => _64;  // in scope 11 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:38:9: 38:10
                        let _70: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _71: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _84: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:16: 46:26]; // in scope 11 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:9: 46:13
                        let mut _138: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 12 {
                            debug left_val => _70; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _71; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _76: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 13 {
                                debug kind => _76; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 14 {
                            debug clo0 => _84; // in scope 14 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:9: 46:13
                            let _85: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:16: 47:19]; // in scope 14 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:9: 47:13
                            scope 15 {
                                debug clo1 => _85; // in scope 15 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:9: 47:13
                                let _86: [closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:16: 48:19]; // in scope 15 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:9: 48:13
                                scope 16 {
                                    debug clo2 => _86; // in scope 16 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:9: 48:13
                                    let _87: fn(usize) -> i32; // in scope 16 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:49:9: 49:10
                                    scope 17 {
                                        debug f => _87; // in scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:49:9: 49:10
                                        let _94: &i32; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _95: &i32; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _108: [fn(i32, i32) -> i32; 2]; // in scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:9: 57:14
                                        let mut _137: &i32; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                        scope 18 {
                                            debug left_val => _94; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _95; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _100: core::panicking::AssertKind; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 19 {
                                                debug kind => _100; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                        scope 20 {
                                            debug funcs => _108; // in scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:9: 57:14
                                            let _122: &[i32; 2]; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            let _123: &[i32; 2]; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let mut _136: &[i32; 2]; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                            scope 21 {
                                                debug left_val => _122; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                debug right_val => _123; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                let _128: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                scope 22 {
                                                    debug kind => _128; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = move _3 as fn(usize) -> usize (Pointer(ClosureFnPointer(Normal))); // scope 1 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:21:32: 21:33
        _7 = _2;                         // scope 2 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:22:16: 22:25
        _6 = move _7(const 42_usize) -> bb1; // scope 2 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:22:16: 22:29
    }

    bb1: {
        _5 = &_6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _141 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[5])) }
        _8 = _141;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _8);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_4.0: &usize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_4.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = (*_9);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = const 42_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = Eq(move _13, move _14);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _11 = Not(move _12);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<usize, usize>(move _17, move _18, move _20, move _22); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = foo as fn(usize) -> usize (Pointer(ReifyFnPointer)); // scope 2 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:25:14: 25:17
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_run_pass.rs:25:14: 25:17
                                         // + literal: Const { ty: fn(usize) -> usize {foo}, val: Value(<ZST>) }
        _27 = _23;                       // scope 5 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:29:16: 29:17
        _26 = move _27(const 42_usize) -> bb4; // scope 5 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:29:16: 29:21
    }

    bb4: {
        _25 = &_26;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _140 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[4])) }
        _28 = _140;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _28);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_24.0: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_24.1: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 0_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<usize, usize>(move _37, move _38, move _40, move _42); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb6: {
        _43 = move _44 as fn(usize) -> usize (Pointer(ClosureFnPointer(Normal))); // scope 5 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:14: 32:19
        _48 = _43;                       // scope 8 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:36:16: 36:17
        _47 = move _48(const 42_usize) -> bb7; // scope 8 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:36:16: 36:21
    }

    bb7: {
        _46 = &_47;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _139 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _49 = _139;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _49);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_45.0: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_45.1: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = (*_50);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = const 2_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = Eq(move _54, move _55);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _52 = Not(move _53);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb9, otherwise: bb8]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _56 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<usize, usize>(move _58, move _59, move _61, move _63); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _64 = bar as fn(usize) -> usize (Pointer(ReifyFnPointer)); // scope 8 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:40:14: 40:17
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_run_pass.rs:40:14: 40:17
                                         // + literal: Const { ty: fn(usize) -> usize {bar}, val: Value(<ZST>) }
        _68 = _64;                       // scope 11 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:44:16: 44:17
        _67 = move _68(const 42_usize) -> bb10; // scope 11 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:44:16: 44:21
    }

    bb10: {
        _66 = &_67;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _138 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _69 = _138;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _65 = (move _66, move _69);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _70 = (_65.0: &usize);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _71 = (_65.1: &usize);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _74 = (*_70);                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _75 = const 1_usize;             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _73 = Eq(move _74, move _75);    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _72 = Not(move _73);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _72) -> [0: bb12, otherwise: bb11]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _76 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _80 = _70;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _79 = _80;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _82 = _71;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = _82;                       // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _83 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _77 = core::panicking::assert_failed::<usize, usize>(move _78, move _79, move _81, move _83); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb12: {
        _87 = move _88 as fn(usize) -> i32 (Pointer(ClosureFnPointer(Normal))); // scope 16 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:50:14: 50:18
        _92 = _87;                       // scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:55:16: 55:17
        _91 = move _92(const 42_usize) -> bb13; // scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:55:16: 55:21
    }

    bb13: {
        _90 = &_91;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _137 = const _;                  // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _93 = _137;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _89 = (move _90, move _93);      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _94 = (_89.0: &i32);             // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _95 = (_89.1: &i32);             // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _98 = (*_94);                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _99 = const 0_i32;               // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _97 = Eq(move _98, move _99);    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _96 = Not(move _97);             // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _96) -> [0: bb15, otherwise: bb14]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _100 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _102 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = _94;                      // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _103 = _104;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _95;                      // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _105 = _106;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = Option::<Arguments<'_>>::None; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _101 = core::panicking::assert_failed::<i32, i32>(move _102, move _103, move _105, move _107); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb15: {
        _109 = add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:18: 57:21
                                         // mir::Constant
                                         // + span: ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:18: 57:21
                                         // + literal: Const { ty: fn(i32, i32) -> i32 {add}, val: Value(<ZST>) }
        _110 = move _111 as fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Normal))); // scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:23: 57:44
        _108 = [move _109, move _110];   // scope 17 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:17: 57:45
        _117 = const 0_usize;            // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:23: 58:24
        _116 = _108[_117];               // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:17: 58:25
        _115 = move _116(const 5_i32, const 5_i32) -> bb16; // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:17: 58:31
    }

    bb16: {
        _120 = const 1_usize;            // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:39: 58:40
        _119 = _108[_120];               // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:33: 58:41
        _118 = move _119(const 5_i32, const 5_i32) -> bb17; // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:33: 58:47
    }

    bb17: {
        _114 = [move _115, move _118];   // scope 20 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:16: 58:48
        _113 = &_114;                    // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _136 = const _;                  // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _121 = _136;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _112 = (move _113, move _121);   // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _122 = (_112.0: &[i32; 2]);      // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _123 = (_112.1: &[i32; 2]);      // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _126 = _122;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _127 = _123;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _125 = <[i32; 2] as PartialEq>::eq(move _126, move _127) -> bb18; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [i32; 2], &'b [i32; 2]) -> bool {<[i32; 2] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _124 = Not(move _125);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _124) -> [0: bb20, otherwise: bb19]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _128 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _130 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _132 = _122;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _131 = _132;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _134 = _123;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _133 = _134;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _135 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _129 = core::panicking::assert_failed::<[i32; 2], [i32; 2]>(move _130, move _131, move _133, move _135); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [i32; 2], &'b [i32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[i32; 2], [i32; 2]>}, val: Value(<ZST>) }
    }

    bb20: {
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:59:2: 59:2
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 2];                // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:50: 58:57

    bb0: {
        _1 = [const 10_i32, const 0_i32]; // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:58:50: 58:57
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:55:23: 55:24

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:55:23: 55:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:44:23: 44:24

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:44:23: 44:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:36:23: 36:24

    bb0: {
        _1 = const 2_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:36:23: 36:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:29:23: 29:24

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:29:23: 29:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:22:31: 22:33

    bb0: {
        _1 = const 42_usize;             // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:22:31: 22:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:13: 20:16], _2: usize) -> usize {
    debug x => _2;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:14: 20:15
    let mut _0: usize;                   // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:17: 20:17

    bb0: {
        _0 = _2;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:17: 20:18
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:20:18: 20:18
    }
}

fn main::{closure#1}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:26:14: 26:17], _2: usize) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:26:18: 26:18

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:26:18: 26:19
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:26:19: 26:19
    }
}

fn main::{closure#2}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:14: 32:17], _2: usize) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:18: 32:18

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:18: 32:19
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:32:19: 32:19
    }
}

fn main::{closure#3}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:41:14: 41:17], _2: usize) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:41:18: 41:18

    bb0: {
        _0 = const 2_usize;              // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:41:18: 41:19
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:41:19: 41:19
    }
}

fn main::{closure#4}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:16: 46:26], _2: usize) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:27: 46:27

    bb0: {
        _0 = const 0_i32;                // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:27: 46:28
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:46:28: 46:28
    }
}

fn main::{closure#5}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:16: 47:19], _2: usize) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:20: 47:20

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:20: 47:21
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:47:21: 47:21
    }
}

fn main::{closure#6}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:16: 48:19], _2: usize) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:20: 48:20

    bb0: {
        _0 = const 2_i32;                // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:20: 48:21
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:48:21: 48:21
    }
}

fn main::{closure#7}(_1: &[closure@ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:23: 57:29], _2: i32, _3: i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:24: 57:25
    debug b => _3;                       // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:27: 57:28
    let mut _0: i32;                     // return place in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:30: 57:30
    let mut _4: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:31: 57:32
    let mut _5: i32;                     // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:35: 57:36
    let mut _6: (i32, bool);             // in scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:30: 57:37

    bb0: {
        _4 = _2;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:31: 57:32
        _5 = _3;                         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:35: 57:36
        _6 = CheckedSub(_4, _5);         // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:30: 57:37
        assert(!move (_6.1: bool), "attempt to compute `{} - {}`, which would overflow", move _4, move _5) -> bb1; // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:30: 57:37
    }

    bb1: {
        _0 = move (_6.0: i32);           // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:30: 57:37
        return;                          // scope 0 at ui/closures/closure_no_cap_coerce_many_run_pass.rs:57:44: 57:44
    }
}
