// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/issue-23012-supertrait-signature-inference.rs:9:1: 9:56>::receive(_1: F, _2: Result<T, E>) -> () {
    debug self => _1;                    // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:10:16: 10:20
    debug res => _2;                     // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:10:22: 10:25
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:10:41: 10:41
    let mut _3: F;                       // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:9: 11:13
    let mut _4: (std::result::Result<T, E>,); // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:9: 11:18
    let mut _5: std::result::Result<T, E>; // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:14: 11:17

    bb0: {
        _3 = move _1;                    // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:9: 11:13
        _5 = move _2;                    // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:14: 11:17
        _4 = (move _5,);                 // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:9: 11:18
        _0 = <F as FnOnce<(Result<T, E>,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:11:9: 11:18
                                         // mir::Constant
                                         // + span: ui/closures/issue-23012-supertrait-signature-inference.rs:11:9: 11:13
                                         // + literal: Const { ty: extern "rust-call" fn(F, (Result<T, E>,)) -> <F as FnOnce<(Result<T, E>,)>>::Output {<F as FnOnce<(Result<T, E>,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:12:6: 12:6
    }
}

fn <impl at ui/closures/issue-23012-supertrait-signature-inference.rs:19:1: 19:40>::receive(_1: Result<T, E>, _2: F) -> () {
    debug self => _1;                    // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:20:34: 20:38
    debug f => _2;                       // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:20:40: 20:41
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:20:46: 20:46
    let mut _3: F;                       // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:9: 21:10
    let mut _4: (std::result::Result<T, E>,); // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:9: 21:16
    let mut _5: std::result::Result<T, E>; // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:11: 21:15

    bb0: {
        _3 = move _2;                    // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:9: 21:10
        _5 = move _1;                    // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:11: 21:15
        _4 = (move _5,);                 // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:9: 21:16
        _0 = <F as FnOnce<(Result<T, E>,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:21:9: 21:16
                                         // mir::Constant
                                         // + span: ui/closures/issue-23012-supertrait-signature-inference.rs:21:9: 21:10
                                         // + literal: Const { ty: extern "rust-call" fn(F, (Result<T, E>,)) -> <F as FnOnce<(Result<T, E>,)>>::Output {<F as FnOnce<(Result<T, E>,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:22:6: 22:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:25:15: 25:15
    let _1: ();                          // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:5: 28:7
    let mut _2: std::result::Result<u32, ()>; // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:5: 26:23
    let mut _3: [closure@ui/closures/issue-23012-supertrait-signature-inference.rs:26:32: 26:37]; // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:32: 28:6

    bb0: {
        _2 = Result::<u32, ()>::Ok(const 123_u32); // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:5: 26:23
        _1 = <Result<u32, ()> as Async<u32, ()>>::receive::<[closure@ui/closures/issue-23012-supertrait-signature-inference.rs:26:32: 26:37]>(move _2, move _3) -> bb1; // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:5: 28:7
                                         // mir::Constant
                                         // + span: ui/closures/issue-23012-supertrait-signature-inference.rs:26:24: 26:31
                                         // + literal: Const { ty: fn(Result<u32, ()>, [closure@ui/closures/issue-23012-supertrait-signature-inference.rs:26:32: 26:37]) {<Result<u32, ()> as Async<u32, ()>>::receive::<[closure@ui/closures/issue-23012-supertrait-signature-inference.rs:26:32: 26:37]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:29:2: 29:2
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/issue-23012-supertrait-signature-inference.rs:26:32: 26:37], _2: Result<u32, ()>) -> () {
    debug res => _2;                     // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:33: 26:36
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:26:38: 26:38
    let _3: u32;                         // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:27:9: 27:21
    let mut _4: std::result::Result<u32, ()>; // in scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:27:9: 27:12

    bb0: {
        _4 = _2;                         // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:27:9: 27:12
        _3 = Result::<u32, ()>::unwrap(move _4) -> bb1; // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:27:9: 27:21
                                         // mir::Constant
                                         // + span: ui/closures/issue-23012-supertrait-signature-inference.rs:27:13: 27:19
                                         // + literal: Const { ty: fn(Result<u32, ()>) -> u32 {Result::<u32, ()>::unwrap}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/issue-23012-supertrait-signature-inference.rs:28:6: 28:6
    }
}
