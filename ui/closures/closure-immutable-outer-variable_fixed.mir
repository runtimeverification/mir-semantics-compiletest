// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Box<dyn FnMut()>) -> () {
    debug f => _1;                       // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:5:8: 5:13
    let mut _0: ();                      // return place in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:5:33: 5:33
    let _2: ();                          // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:6:5: 6:8
    let mut _3: &mut std::boxed::Box<dyn std::ops::FnMut()>; // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:6:5: 6:6
    let mut _4: ();                      // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:6:5: 6:8

    bb0: {
        _3 = &mut _1;                    // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:6:5: 6:6
        _2 = <Box<dyn FnMut()> as FnMut<()>>::call_mut(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:6:5: 6:8
                                         // mir::Constant
                                         // + span: ui/closures/closure-immutable-outer-variable_fixed.rs:6:5: 6:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut Box<dyn FnMut()>, ()) -> <Box<dyn FnMut()> as FnOnce<()>>::Output {<Box<dyn FnMut()> as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:7:1: 7:2
    }

    bb2: {
        return;                          // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:7:2: 7:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:7:1: 7:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:5:1: 7:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:9:11: 9:11
    let mut _1: bool;                    // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:10:9: 10:14
    let _2: ();                          // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:5: 11:44
    let mut _3: std::boxed::Box<dyn std::ops::FnMut()>; // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:43
    let mut _4: std::boxed::Box<dyn std::ops::FnMut()>; // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:43
    let mut _5: std::boxed::Box<[closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]>; // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:33
    let mut _6: [closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]; // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:32
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/closures/closure-immutable-outer-variable_fixed.rs:10:9: 10:14
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:10:17: 10:21
        _6 = const {transmute(0x01): [closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]}; // scope 1 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:32
                                         // mir::Constant
                                         // + span: ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:32
                                         // + literal: Const { ty: [closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25], val: Value(Scalar(0x01)) }
        _5 = Box::<[closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]>::new(move _6) -> bb1; // scope 1 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:33
                                         // mir::Constant
                                         // + span: ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]) -> Box<[closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]> {Box::<[closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn std::ops::FnMut()> (Pointer(Unsize)); // scope 1 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:33
        _3 = move _4;                    // scope 1 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:9: 11:43
        _2 = foo(move _3) -> bb2;        // scope 1 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:5: 11:44
                                         // mir::Constant
                                         // + span: ui/closures/closure-immutable-outer-variable_fixed.rs:11:5: 11:8
                                         // + literal: Const { ty: fn(Box<(dyn FnMut() + 'static)>) {foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:13:2: 13:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/closure-immutable-outer-variable_fixed.rs:11:18: 11:25]) -> () {
    debug y => ((*_1).0: bool);          // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:10:9: 10:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:26: 11:26
    let mut _2: bool;                    // in scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:31: 11:32

    bb0: {
        _2 = ((*_1).0: bool);            // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:31: 11:32
        ((*_1).0: bool) = Not(move _2);  // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:26: 11:32
        return;                          // scope 0 at ui/closures/closure-immutable-outer-variable_fixed.rs:11:32: 11:32
    }
}
