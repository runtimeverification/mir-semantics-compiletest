// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn by_ref(_1: &mut S<'_>) -> () {
    debug s => _1;                       // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:10:11: 10:12
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:10:26: 10:26
    let _2: ();                          // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:9
    let mut _3: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8]; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    let mut _4: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8]; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    let mut _5: &mut &mut S<'_>;         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    let mut _6: ();                      // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:9

    bb0: {
        _5 = &mut _1;                    // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
        _4 = [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8] { s: move _5 }; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
                                         // closure
                                         // + def_id: DefId(0:8 ~ issue_89606[6b88]::by_ref::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut &mut S<'_>,),
                                         // ]
        _3 = &mut _4;                    // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
        _2 = <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8] as FnMut<()>>::call_mut(move _3, move _6) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:9
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8], ()) -> <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:15:2: 15:2
    }
}

fn by_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:11:6: 11:8]) -> () {
    debug s => (*((*_1).0: &mut &mut S<'_>)); // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:10:11: 10:12
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:9: 11:9
    let _2: &mut std::option::Option<&mut i32>; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:12:15: 12:17
    let mut _3: std::option::Option<&mut i32>; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:13:15: 13:19
    let mut _4: &mut &mut S<'_>;         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    let mut _5: &mut S<'_>;              // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    let mut _6: &mut &mut S<'_>;         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    let mut _7: &mut S<'_>;              // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:11:5: 14:7
    scope 1 {
        debug _o => _2;                  // in scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:12:15: 12:17
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mut &mut S<'_>); // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:12:15: 12:17
        _5 = deref_copy (*_4);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:12:15: 12:17
        _2 = &mut ((*_5).0: std::option::Option<&mut i32>); // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:12:15: 12:17
        _3 = const Option::<&mut i32>::None; // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:13:15: 13:19
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:13:15: 13:19
                                         // + literal: Const { ty: Option<&mut i32>, val: Value(Scalar(0x0000000000000000)) }
        _6 = deref_copy ((*_1).0: &mut &mut S<'_>); // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:13:9: 13:19
        _7 = deref_copy (*_6);           // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:13:9: 13:19
        ((*_7).0: std::option::Option<&mut i32>) = move _3; // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:13:9: 13:19
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:14:7: 14:7
    }
}

fn by_value(_1: S<'_>) -> () {
    debug s => _1;                       // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:17:13: 17:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:17:23: 17:23
    let _2: ();                          // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:18:5: 21:9
    let mut _3: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8]; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:18:5: 21:7
    let mut _4: ();                      // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:18:5: 21:9

    bb0: {
        _3 = [closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8] { s: move _1 }; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:18:5: 21:7
                                         // closure
                                         // + def_id: DefId(0:10 ~ issue_89606[6b88]::by_value::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (S<'_>,),
                                         // ]
        _2 = <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8] as FnOnce<()>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:18:5: 21:9
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:18:5: 21:7
                                         // + literal: Const { ty: extern "rust-call" fn([closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8], ()) -> <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8] as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:22:2: 22:2
    }
}

fn by_value::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:18:6: 18:8]) -> () {
    debug s => (_1.0: S<'_>);            // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:17:13: 17:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:18:9: 18:9
    let _2: &std::option::Option<&mut i32>; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:19:15: 19:21
    scope 1 {
        debug _o => _2;                  // in scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:19:15: 19:21
        let _3: std::option::Option<&mut i32>; // in scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:20:13: 20:15
        scope 2 {
            debug _g => _3;              // in scope 2 at ui/closures/2229_closure_analysis/issue-89606.rs:20:13: 20:15
        }
    }

    bb0: {
        _2 = &((_1.0: S<'_>).0: std::option::Option<&mut i32>); // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:19:15: 19:21
        _3 = move ((_1.0: S<'_>).0: std::option::Option<&mut i32>); // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:20:18: 20:21
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:21:7: 21:7
    }
}

fn nested(_1: &mut V<'_>) -> () {
    debug v => _1;                       // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:26:11: 26:12
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:26:26: 26:26
    let _2: ();                          // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:9
    let mut _3: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8]; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    let mut _4: [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8]; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    let mut _5: &mut &mut V<'_>;         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    let mut _6: ();                      // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:9

    bb0: {
        _5 = &mut _1;                    // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
        _4 = [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8] { v: move _5 }; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
                                         // closure
                                         // + def_id: DefId(0:16 ~ issue_89606[6b88]::nested::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut &mut V<'_>,),
                                         // ]
        _3 = &mut _4;                    // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
        _2 = <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8] as FnMut<()>>::call_mut(move _3, move _6) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:9
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8], ()) -> <[closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:31:2: 31:2
    }
}

fn nested::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/issue-89606.rs:27:6: 27:8]) -> () {
    debug v => (*((*_1).0: &mut &mut V<'_>)); // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:26:11: 26:12
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:9: 27:9
    let _2: &mut std::option::Option<&mut i32>; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:28:16: 28:18
    let mut _3: std::option::Option<&mut i32>; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:29:16: 29:20
    let mut _4: &mut &mut V<'_>;         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    let mut _5: &mut V<'_>;              // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    let mut _6: &mut &mut V<'_>;         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    let mut _7: &mut V<'_>;              // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:27:5: 30:7
    scope 1 {
        debug _o => _2;                  // in scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:28:16: 28:18
    }

    bb0: {
        _4 = deref_copy ((*_1).0: &mut &mut V<'_>); // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:28:16: 28:18
        _5 = deref_copy (*_4);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:28:16: 28:18
        _2 = &mut (((*_5).0: (std::option::Option<&mut i32>,)).0: std::option::Option<&mut i32>); // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:28:16: 28:18
        _3 = const Option::<&mut i32>::None; // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:29:16: 29:20
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:29:16: 29:20
                                         // + literal: Const { ty: Option<&mut i32>, val: Value(Scalar(0x0000000000000000)) }
        _6 = deref_copy ((*_1).0: &mut &mut V<'_>); // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:29:9: 29:23
        _7 = deref_copy (*_6);           // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:29:9: 29:23
        ((*_7).0: (std::option::Option<&mut i32>,)) = (move _3,); // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:29:9: 29:23
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:30:7: 30:7
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:33:11: 33:11
    let mut _1: S<'_>;                   // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:34:9: 34:14
    let mut _2: std::option::Option<&mut i32>; // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:34:19: 34:23
    let _3: ();                          // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:35:5: 35:19
    let mut _4: &mut S<'_>;              // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:35:12: 35:18
    let mut _5: &mut S<'_>;              // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:35:12: 35:18
    let _6: ();                          // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:36:5: 36:16
    let mut _7: S<'_>;                   // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:36:14: 36:15
    let mut _9: (std::option::Option<&mut i32>,); // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:38:19: 38:27
    let _10: ();                         // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:39:5: 39:19
    let mut _11: &mut V<'_>;             // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:39:12: 39:18
    let mut _12: &mut V<'_>;             // in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:39:12: 39:18
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:34:9: 34:14
        let mut _8: V<'_>;               // in scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:38:9: 38:14
        scope 2 {
            debug v => _8;               // in scope 2 at ui/closures/2229_closure_analysis/issue-89606.rs:38:9: 38:14
        }
    }

    bb0: {
        _2 = const Option::<&mut i32>::None; // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:34:19: 34:23
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:34:19: 34:23
                                         // + literal: Const { ty: Option<&mut i32>, val: Value(Scalar(0x0000000000000000)) }
        _1 = S::<'_>(move _2);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:34:17: 34:24
        _5 = &mut _1;                    // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:35:12: 35:18
        _4 = &mut (*_5);                 // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:35:12: 35:18
        _3 = by_ref(move _4) -> bb1;     // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:35:5: 35:19
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:35:5: 35:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut S<'b>) {by_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = move _1;                    // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:36:14: 36:15
        _6 = by_value(move _7) -> bb2;   // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:36:5: 36:16
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:36:5: 36:13
                                         // + literal: Const { ty: for<'a> fn(S<'a>) {by_value}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = const (Option::<&mut i32>::None,); // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:38:19: 38:27
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:38:19: 38:27
                                         // + literal: Const { ty: (Option<&mut i32>,), val: Value(Scalar(0x0000000000000000)) }
        _8 = V::<'_>(move _9);           // scope 1 at ui/closures/2229_closure_analysis/issue-89606.rs:38:17: 38:28
        _12 = &mut _8;                   // scope 2 at ui/closures/2229_closure_analysis/issue-89606.rs:39:12: 39:18
        _11 = &mut (*_12);               // scope 2 at ui/closures/2229_closure_analysis/issue-89606.rs:39:12: 39:18
        _10 = nested(move _11) -> bb3;   // scope 2 at ui/closures/2229_closure_analysis/issue-89606.rs:39:5: 39:19
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue-89606.rs:39:5: 39:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut V<'b>) {nested}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:40:2: 40:2
    }
}

fn S(_1: Option<&mut i32>) -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:8:1: 8:13

    bb0: {
        _0 = S::<'_>(move _1);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:8:1: 8:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:8:1: 8:13
    }
}

// MIR FOR CTFE
fn S(_1: Option<&mut i32>) -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:8:1: 8:13

    bb0: {
        _0 = S::<'_>(move _1);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:8:1: 8:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:8:1: 8:13
    }
}

fn V(_1: (Option<&mut i32>,)) -> V<'_> {
    let mut _0: V<'_>;                   // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:24:1: 24:13

    bb0: {
        _0 = V::<'_>(move _1);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:24:1: 24:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:24:1: 24:13
    }
}

// MIR FOR CTFE
fn V(_1: (Option<&mut i32>,)) -> V<'_> {
    let mut _0: V<'_>;                   // return place in scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:24:1: 24:13

    bb0: {
        _0 = V::<'_>(move _1);           // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:24:1: 24:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue-89606.rs:24:1: 24:13
    }
}
