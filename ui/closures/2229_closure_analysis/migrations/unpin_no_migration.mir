// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn filter_try_fold(_1: &mut impl FnMut() -> bool) -> impl FnMut() -> bool + '_ {
    debug predicate => _1;               // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:6:5: 6:14
    let mut _0: impl FnMut() -> bool + '_; // return place in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:7:6: 7:31

    bb0: {
        _0 = [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:5: 8:12] { predicate: move _1 }; // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:5: 8:24
                                         // closure
                                         // + def_id: DefId(0:4 ~ unpin_no_migration[2a9b]::filter_try_fold::{closure#0})
                                         // + substs: [
                                         //     impl FnMut() -> bool,
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> bool,
                                         //     (&mut impl FnMut() -> bool,),
                                         // ]
        return;                          // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:9:2: 9:2
    }
}

fn filter_try_fold::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:5: 8:12]) -> bool {
    debug predicate => ((*_1).0: &mut impl FnMut() -> bool); // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:6:5: 6:14
    let mut _0: bool;                    // return place in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:13
    let mut _2: &mut impl FnMut() -> bool; // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:22
    let mut _3: ();                      // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:24
    let mut _4: &mut impl FnMut() -> bool; // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:5: 8:24

    bb0: {
        _4 = deref_copy ((*_1).0: &mut impl FnMut() -> bool); // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:22
        _2 = &mut (*_4);                 // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:22
        _0 = <impl FnMut() -> bool as FnMut<()>>::call_mut(move _2, move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:13: 8:22
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut impl FnMut() -> bool, ()) -> <impl FnMut() -> bool as FnOnce<()>>::Output {<impl FnMut() -> bool as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:8:24: 8:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:11:11: 11:11
    let _1: impl FnMut() -> bool + '_;   // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:5: 12:34
    let mut _2: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]; // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:21: 12:33
    let mut _3: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]; // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:21: 12:33
    let mut _4: [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]; // in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:33

    bb0: {
        _3 = &mut _4;                    // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:21: 12:33
        _2 = &mut (*_3);                 // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:21: 12:33
        _1 = filter_try_fold::<[closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]>(move _2) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:5: 12:34
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:5: 12:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]) -> impl FnMut() -> bool + 'a {filter_try_fold::<[closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:13:2: 13:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:26: 12:28]) -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:29: 12:29

    bb0: {
        _0 = const true;                 // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:29: 12:33
        return;                          // scope 0 at ui/closures/2229_closure_analysis/migrations/unpin_no_migration.rs:12:33: 12:33
    }
}
