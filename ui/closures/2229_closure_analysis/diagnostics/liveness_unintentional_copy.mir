// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15>::fmt(_1: &MyStruct, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
    let mut _6: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
    let _7: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
    let mut _9: &i32;                    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
    let _10: &i32;                       // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
    let mut _11: &str;                   // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
    let _12: &str;                       // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
    let mut _14: &&i32;                  // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
    let _15: &&i32;                      // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
    let _16: &i32;                       // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
        _5 = const "MyStruct";           // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
        _7 = const "a";                  // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
        _10 = &((*_1).0: i32);           // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
        _9 = _10;                        // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:9:5: 9:11
        _12 = const "b";                 // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
        _16 = &((*_1).1: i32);           // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
        _15 = &_16;                      // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
        _14 = _15;                       // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:10:5: 10:11
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:7:15: 7:15
    }
}

fn unintentional_copy_one() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:13:33: 13:33
    let mut _1: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:14:9: 14:14
    let _4: ();                          // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:9
    let mut _5: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25]; // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:6
    let mut _6: (i32,);                  // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:9
    let _7: ();                          // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:9
    let mut _8: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25]; // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:6
    let mut _9: (i32,);                  // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:9
    let _10: ();                         // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:9
    let mut _11: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25]; // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:6
    let mut _12: (i32,);                 // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:9
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:14:9: 14:14
        let mut _2: MyStruct;            // in scope 1 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:15:9: 15:17
        scope 2 {
            debug last => _2;            // in scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:15:9: 15:17
            let mut _3: [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25]; // in scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:9: 16:14
            scope 3 {
                debug f => _3;           // in scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:9: 16:14
            }
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:14:17: 14:18
        _2 = MyStruct { a: const 1_i32, b: const 1_i32 }; // scope 1 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:15:20: 15:41
        _3 = [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] { last: move _2, a: _1 }; // scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 23:6
                                         // closure
                                         // + def_id: DefId(0:4 ~ liveness_unintentional_copy[7b00]::unintentional_copy_one::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((i32,)),
                                         //     (MyStruct, i32),
                                         // ]
        _5 = &mut _3;                    // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:6
        _6 = const (2_i32,);             // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:9
        _4 = <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut(move _5, move _6) -> bb1; // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:9
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:24:5: 24:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25], (i32,)) -> <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnOnce<(i32,)>>::Output {<[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _3;                    // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:6
        _9 = const (3_i32,);             // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:9
        _7 = <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut(move _8, move _9) -> bb2; // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:9
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:25:5: 25:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25], (i32,)) -> <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnOnce<(i32,)>>::Output {<[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = &mut _3;                   // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:6
        _12 = const (4_i32,);            // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:9
        _10 = <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut(move _11, move _12) -> bb3; // scope 3 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:9
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:26:5: 26:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25], (i32,)) -> <[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnOnce<(i32,)>>::Output {<[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25] as FnMut<(i32,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:27:2: 27:2
    }
}

fn unintentional_copy_one::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:17: 16:25], _2: i32) -> () {
    debug s => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:23: 16:24
    debug last => ((*_1).0: MyStruct);   // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:15:9: 15:17
    debug a => ((*_1).1: i32);           // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:14:9: 14:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:16:26: 16:26
    let mut _3: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:19:18: 19:19
    let mut _4: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:20:13: 20:14

    bb0: {
        _3 = _2;                         // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:19:18: 19:19
        (((*_1).0: MyStruct).0: i32) = move _3; // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:19:9: 19:19
        _4 = _2;                         // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:20:13: 20:14
        ((*_1).1: i32) = move _4;        // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:20:9: 20:14
        return;                          // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:23:6: 23:6
    }
}

fn unintentional_copy_two() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:29:33: 29:33
    let mut _1: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:30:9: 30:14
    let _3: ();                          // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:5: 37:7
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:5: 32:12
    let mut _5: [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30]; // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 37:6
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:30:9: 30:14
        let mut _2: MyStruct;            // in scope 1 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:31:9: 31:16
        scope 2 {
            debug sum => _2;             // in scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:31:9: 31:16
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:30:17: 30:18
        _2 = MyStruct { a: const 1_i32, b: const 0_i32 }; // scope 1 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:31:19: 31:40
        _4 = std::ops::Range::<i32> { start: const 1_i32, end: const 10_i32 }; // scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:5: 32:12
        _5 = [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30] { sum: move _2, a: _1 }; // scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 37:6
                                         // closure
                                         // + def_id: DefId(0:6 ~ liveness_unintentional_copy[7b00]::unintentional_copy_two::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((i32,)),
                                         //     (MyStruct, i32),
                                         // ]
        _3 = <std::ops::Range<i32> as Iterator>::for_each::<[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30]>(move _4, move _5) -> bb1; // scope 2 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:5: 37:7
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:13: 32:21
                                         // + literal: Const { ty: fn(std::ops::Range<i32>, [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30]) {<std::ops::Range<i32> as Iterator>::for_each::<[closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:38:2: 38:2
    }
}

fn unintentional_copy_two::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:22: 32:30], _2: i32) -> () {
    debug x => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:28: 32:29
    debug sum => ((*_1).0: MyStruct);    // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:31:9: 31:16
    debug a => ((*_1).1: i32);           // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:30:9: 30:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:32:31: 32:31
    let mut _3: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:35:18: 35:19
    let mut _4: (i32, bool);             // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:35:9: 35:19
    let mut _5: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:36:14: 36:15
    let mut _6: (i32, bool);             // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:36:9: 36:15

    bb0: {
        _3 = _2;                         // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:35:18: 35:19
        _4 = CheckedAdd((((*_1).0: MyStruct).1: i32), _3); // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:35:9: 35:19
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (((*_1).0: MyStruct).1: i32), move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:35:9: 35:19
    }

    bb1: {
        (((*_1).0: MyStruct).1: i32) = move (_4.0: i32); // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:35:9: 35:19
        _5 = _2;                         // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:36:14: 36:15
        _6 = CheckedAdd(((*_1).1: i32), _5); // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:36:9: 36:15
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: i32), move _5) -> bb2; // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:36:9: 36:15
    }

    bb2: {
        ((*_1).1: i32) = move (_6.0: i32); // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:36:9: 36:15
        return;                          // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:37:6: 37:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:40:11: 40:11
    let _1: ();                          // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:41:5: 41:29
    let _2: ();                          // in scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:42:5: 42:29

    bb0: {
        _1 = unintentional_copy_one() -> bb1; // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:41:5: 41:29
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:41:5: 41:27
                                         // + literal: Const { ty: fn() {unintentional_copy_one}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = unintentional_copy_two() -> bb2; // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:42:5: 42:29
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:42:5: 42:27
                                         // + literal: Const { ty: fn() {unintentional_copy_two}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/diagnostics/liveness_unintentional_copy.rs:43:2: 43:2
    }
}
