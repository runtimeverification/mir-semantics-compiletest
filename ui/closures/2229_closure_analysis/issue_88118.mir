// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: impl FnOnce() -> MsU + Clone + 'static) -> () {
    debug handler => _1;                 // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:8:13: 8:20
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:8:62: 8:62
    let _2: std::boxed::Box<dyn std::ops::Fn(i32) -> std::option::Option<i32>>; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 12:42
    let mut _3: std::boxed::Box<dyn std::ops::Fn(i32) -> std::option::Option<i32>>; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 12:42
    let mut _4: std::boxed::Box<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26]>; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 12:7
    let mut _5: [closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26]; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 12:6

    bb0: {
        _5 = [closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26] { handler: move _1 }; // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 12:6
                                         // closure
                                         // + def_id: DefId(0:5 ~ issue_88118[eb3c]::foo::{closure#0})
                                         // + substs: [
                                         //     MsU,
                                         //     impl FnOnce() -> MsU + Clone + 'static,
                                         //     i8,
                                         //     extern "rust-call" fn((i32,)) -> std::option::Option<i32>,
                                         //     (impl FnOnce() -> MsU + Clone + 'static,),
                                         // ]
        _4 = Box::<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26]>::new(move _5) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 12:7
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 9:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26]) -> Box<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26]> {Box::<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::ops::Fn(i32) -> std::option::Option<i32>> (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 12:7
        _2 = move _3;                    // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:5: 12:42
        drop(_2) -> bb2;                 // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:12:42: 12:43
    }

    bb2: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:13:2: 13:2
    }
}

fn foo::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/issue_88118.rs:9:14: 9:26], _2: i32) -> Option<i32> {
    debug value => _2;                   // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:20: 9:25
    debug handler => ((*_1).0: impl FnOnce() -> MsU + Clone + 'static); // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:8:13: 8:20
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:9:27: 9:27
    let _3: MsU;                         // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:39
    let mut _4: &[closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13]; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
    let _5: [closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13]; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
    let mut _6: &impl FnOnce() -> MsU + Clone + 'static; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
    let mut _7: (i32,);                  // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:39
    let mut _8: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:33: 10:38

    bb0: {
        _6 = &((*_1).0: impl FnOnce() -> MsU + Clone + 'static); // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
        _5 = [closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13] { handler: move _6 }; // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
                                         // closure
                                         // + def_id: DefId(0:6 ~ issue_88118[eb3c]::foo::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     MsU,
                                         //     impl FnOnce() -> MsU + Clone + 'static,
                                         //     i8,
                                         //     extern "rust-call" fn((i32,)) -> MsU,
                                         //     (&impl FnOnce() -> MsU + Clone + 'static,),
                                         // ]
        _4 = &_5;                        // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
        _8 = _2;                         // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:33: 10:38
        _7 = (move _8,);                 // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:39
        _3 = <[closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13] as Fn<(i32,)>>::call(move _4, move _7) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:39
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13], (i32,)) -> <[closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13] as FnOnce<(i32,)>>::Output {<[closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13] as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:39: 10:40
    }

    bb2: {
        _0 = Option::<i32>::None;        // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:11:9: 11:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:12:6: 12:6
    }
}

fn foo::{closure#0}::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/issue_88118.rs:10:10: 10:13], _2: i32) -> MsU {
    debug handler => (*((*_1).0: &impl FnOnce() -> MsU + Clone + 'static)); // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:8:13: 8:20
    let mut _0: MsU;                     // return place in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:14
    let mut _3: impl FnOnce() -> MsU + Clone + 'static; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:29
    let mut _4: &impl FnOnce() -> MsU + Clone + 'static; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:29
    let mut _5: ();                      // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:31
    let mut _6: &impl FnOnce() -> MsU + Clone + 'static; // in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:9: 10:32

    bb0: {
        _6 = deref_copy ((*_1).0: &impl FnOnce() -> MsU + Clone + 'static); // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:29
        _4 = _6;                         // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:29
        _3 = <impl FnOnce() -> MsU + Clone + 'static as Clone>::clone(move _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:29
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue_88118.rs:10:22: 10:27
                                         // + literal: Const { ty: for<'a> fn(&'a impl FnOnce() -> MsU + Clone + 'static) -> impl FnOnce() -> MsU + Clone + 'static {<impl FnOnce() -> MsU + Clone + 'static as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <impl FnOnce() -> MsU + Clone + 'static as FnOnce<()>>::call_once(move _3, move _5) -> bb2; // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:31
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/issue_88118.rs:10:14: 10:29
                                         // + literal: Const { ty: extern "rust-call" fn(impl FnOnce() -> MsU + Clone + 'static, ()) -> <impl FnOnce() -> MsU + Clone + 'static as FnOnce<()>>::Output {<impl FnOnce() -> MsU + Clone + 'static as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:10:32: 10:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/issue_88118.rs:15:13: 15:13
    }
}
