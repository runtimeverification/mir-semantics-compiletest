// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const PATTERN_REF: &str = {
    let mut _0: &str;

    bb0: {
        _0 = const "Hello World";
        return;
    }
}

const NUMBER: i32 = {
    let mut _0: i32;

    bb0: {
        _0 = const 30_i32;
        return;
    }
}

const NUMBER_POINTER: *const i32 = {
    let mut _0: *const i32;
    let _1: &i32;
    let _2: i32;
    let mut _3: &i32;

    bb0: {
        StorageLive(_1);
        _3 = const _;
        _1 = &(*_3);
        _0 = &raw const (*_1);
        StorageDead(_1);
        return;
    }
}

promoted[0] in NUMBER_POINTER: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

fn edge_case_ref(_1: &str) -> () {
    debug event => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn edge_case_ref::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/match/match-edge-cases_1.rs:9:13: 9:15]) -> () {
    debug event => (*((*_1).0: &&str));
    let mut _0: ();
    let mut _2: bool;
    let mut _3: &&str;

    bb0: {
        _3 = deref_copy ((*_1).0: &&str);
        _2 = <str as PartialEq>::eq((*_3), const "Hello World") -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn edge_case_str(_1: String) -> () {
    debug event => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn edge_case_str::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/match/match-edge-cases_1.rs:18:13: 18:15]) -> () {
    debug event => (*((*_1).0: &std::string::String));
    let mut _0: ();
    let mut _2: &str;
    let mut _3: bool;
    let mut _4: &std::string::String;

    bb0: {
        _4 = deref_copy ((*_1).0: &std::string::String);
        _2 = String::as_str(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = <str as PartialEq>::eq(_2, const "hello") -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn edge_case_raw_ptr(_1: *const i32) -> () {
    debug event => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn edge_case_raw_ptr::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/match/match-edge-cases_1.rs:27:13: 27:15]) -> () {
    debug event => (*((*_1).0: &*const i32));
    let mut _0: ();

    bb0: {
        return;
    }
}

fn edge_case_char(_1: char) -> () {
    debug event => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn edge_case_char::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/match/match-edge-cases_1.rs:36:13: 36:15]) -> () {
    debug event => (*((*_1).0: &char));
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
