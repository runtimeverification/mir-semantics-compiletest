// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:9:1: 9:12>::allowed(_1: &Filter, _2: i32) -> bool {
    debug self => _1;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:10:16: 10:21
    debug x => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:10:23: 10:24
    let mut _0: bool;                    // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:10:34: 10:38
    let mut _3: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
    let mut _4: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:10
    let mut _5: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:13: 11:21
    let mut _6: bool;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
    let mut _7: bool;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
    let mut _8: bool;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
    let mut _9: bool;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21

    bb0: {
        _4 = _2;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:10
        _5 = ((*_1).0: i32);             // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:13: 11:21
        _6 = Eq(_5, const 0_i32);        // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
        assert(!move _6, "attempt to calculate the remainder of `{}` with a divisor of zero", _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
    }

    bb1: {
        _7 = Eq(_5, const -1_i32);       // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
        _8 = Eq(_4, const i32::MIN);     // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
        _9 = BitAnd(move _7, move _8);   // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
        assert(!move _9, "attempt to compute the remainder of `{} % {}`, which would overflow", _4, _5) -> bb2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
    }

    bb2: {
        _3 = Rem(move _4, move _5);      // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:21
        _0 = Eq(move _3, const 1_i32);   // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:11:9: 11:26
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:12:6: 12:6
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:19:1: 19:10>::update(_1: &mut Data) -> () {
    debug self => _1;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:20:15: 20:24
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:20:26: 20:26
    let _2: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:23:9: 25:10
    let mut _3: &mut std::vec::Vec<i32>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:23:9: 25:10
    let mut _4: [closure@ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:16]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:40
    let mut _5: &Filter;                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:40

    bb0: {
        _3 = &mut ((*_1).1: std::vec::Vec<i32>); // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:23:9: 25:10
        _5 = &((*_1).0: Filter);         // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:40
        _4 = [closure@ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:16] { self: move _5 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:40
                                         // closure
                                         // + def_id: DefId(0:12 ~ filter_on_struct_member[6877]::{impl#1}::update::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a i32,)) -> bool,
                                         //     (&Filter,),
                                         // ]
        _2 = Vec::<i32>::retain::<[closure@ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:16]>(move _3, move _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:23:9: 25:10
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:23:19: 23:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, [closure@ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:16]) {Vec::<i32>::retain::<[closure@ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:16]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:26:6: 26:6
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:19:1: 19:10>::update::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:16], _2: &i32) -> bool {
    debug v => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:14: 24:15
    debug self__filter => (*((*_1).0: &Filter)); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:20:15: 20:24
    let mut _0: bool;                    // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:17: 24:17
    let mut _3: &Filter;                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:17: 24:40
    let mut _4: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:37: 24:39
    let mut _5: &Filter;                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:13: 24:40

    bb0: {
        _5 = deref_copy ((*_1).0: &Filter); // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:17: 24:40
        _3 = _5;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:17: 24:40
        _4 = (*_2);                      // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:37: 24:39
        _0 = Filter::allowed(move _3, move _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:17: 24:40
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:29: 24:36
                                         // + literal: Const { ty: for<'a> fn(&'a Filter, i32) -> bool {Filter::allowed}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:24:40: 24:40
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:29:11: 29:11
    let mut _1: Data;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:9: 30:14
    let mut _2: Filter;                  // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:32: 30:49
    let mut _3: std::vec::Vec<i32>;      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:57: 30:67
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    let mut _5: std::ops::Range<i32>;    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    let mut _7: std::option::Option<i32>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    let mut _8: &mut std::ops::Range<i32>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    let mut _9: &mut std::ops::Range<i32>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    let mut _10: isize;                  // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:5: 34:6
    let _12: ();                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:9: 33:23
    let mut _13: &mut std::vec::Vec<i32>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:9: 33:23
    let mut _14: i32;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:21: 33:22
    let _15: ();                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:36:5: 36:15
    let mut _16: &mut Data;              // in scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:36:5: 36:15
    scope 1 {
        debug d => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:9: 30:14
        let mut _6: std::ops::Range<i32>; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
        scope 2 {
            debug iter => _6;            // in scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
            let _11: i32;                // in scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:9: 32:10
            scope 3 {
                debug i => _11;          // in scope 3 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:9: 32:10
            }
        }
    }

    bb0: {
        _2 = const Filter {{ div: 3_i32 }}; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:32: 30:49
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:32: 30:49
                                         // + literal: Const { ty: Filter, val: Value(Scalar(0x00000003)) }
        _3 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:57: 30:67
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:57: 30:65
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Data { filter: move _2, list: move _3 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:30:17: 30:69
        _5 = std::ops::Range::<i32> { start: const 1_i32, end: const 10_i32 }; // scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
        _4 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _5) -> [return: bb2, unwind: bb10]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _4;                    // scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
        goto -> bb3;                     // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:5: 34:6
    }

    bb3: {
        _9 = &mut _6;                    // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
        _8 = &mut (*_9);                 // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
        _7 = <std::ops::Range<i32> as Iterator>::next(move _8) -> [return: bb4, unwind: bb10]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = discriminant(_7);          // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    }

    bb5: {
        _11 = ((_7 as Some).0: i32);     // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:9: 32:10
        _13 = &mut (_1.1: std::vec::Vec<i32>); // scope 3 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:9: 33:23
        _14 = _11;                       // scope 3 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:21: 33:22
        _12 = Vec::<i32>::push(move _13, move _14) -> [return: bb12, unwind: bb10]; // scope 3 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:9: 33:23
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:16: 33:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:32:14: 32:19
    }

    bb7: {
        _16 = &mut _1;                   // scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:36:5: 36:15
        _15 = Data::update(move _16) -> [return: bb8, unwind: bb10]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:36:5: 36:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:36:7: 36:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Data) {Data::update}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_1) -> bb9;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:37:1: 37:2
    }

    bb9: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:37:2: 37:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:37:1: 37:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:29:1: 37:2
    }

    bb12: {
        goto -> bb3;                     // scope 3 at ui/closures/2229_closure_analysis/run_pass/filter-on-struct-member.rs:33:9: 33:23
    }
}
