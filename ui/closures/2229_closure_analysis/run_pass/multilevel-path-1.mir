// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:21:11: 21:11
    let mut _1: Wrapper;                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:22:9: 22:14
    let mut _2: Point;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:22:30: 22:52
    let mut _4: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 26:6
    let _6: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:30:5: 30:8
    let mut _7: &mut [closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:30:5: 30:6
    let mut _8: ();                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:30:5: 30:8
    scope 1 {
        debug w => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:22:9: 22:14
        let mut _3: [closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19]; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:9: 24:14
        scope 2 {
            debug c => _3;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:9: 24:14
            let _5: &mut i32;            // in scope 2 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:29:9: 29:11
            scope 3 {
                debug py => _5;          // in scope 3 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:29:9: 29:11
            }
        }
    }

    bb0: {
        _2 = Point { x: const 10_i32, y: const 10_i32 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:22:30: 22:52
        _1 = Wrapper { p: move _2 };     // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:22:17: 22:54
        _4 = &mut ((_1.0: Point).0: i32); // scope 1 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 26:6
        _3 = [closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19] { w: move _4 }; // scope 1 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 26:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ multilevel_path_1[e916]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut i32,),
                                         // ]
        _5 = &mut ((_1.0: Point).1: i32); // scope 2 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:29:14: 29:24
        _7 = &mut _3;                    // scope 3 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:30:5: 30:6
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19] as FnMut<()>>::call_mut(move _7, move _8) -> bb1; // scope 3 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:30:5: 30:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:30:5: 30:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        (*_5) = const 20_i32;            // scope 3 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:32:5: 32:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:33:2: 33:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 24:19]) -> () {
    debug w__p__x => (*((*_1).0: &mut i32)); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:22:9: 22:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:20: 24:20
    let mut _2: (i32, bool);             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
    let mut _3: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 26:6
    let mut _4: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 26:6
    let mut _5: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:24:17: 26:6

    bb0: {
        _3 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
        _2 = CheckedAdd((*_3), const 20_i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
        _4 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_4), const 20_i32) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
        (*_5) = move (_2.0: i32);        // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:25:9: 25:20
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/multilevel-path-1.rs:26:6: 26:6
    }
}
