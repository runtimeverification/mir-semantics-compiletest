// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:15:11: 15:11
    let mut _1: Struct;                  // in scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:16:9: 16:14
    let mut _2: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:16:43: 16:56
    let mut _4: (i32, bool);             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:19:9: 19:18
    let mut _5: (i32, bool);             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:20:9: 20:18
    let mut _6: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:15: 21:34
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:16:9: 16:14
        let mut _3: ();                  // in scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:18:9: 18:14
        scope 2 {
            debug c => _3;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:18:9: 18:14
        }
    }

    bb0: {
        _2 = String::new() -> bb1;       // scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:16:43: 16:56
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:16:43: 16:54
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Struct { x: const 10_i32, y: const 10_i32, s: move _2 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:16:17: 16:58
        _4 = CheckedAdd((_1.0: i32), const 10_i32); // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:19:9: 19:18
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", (_1.0: i32), const 10_i32) -> [success: bb2, unwind: bb6]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:19:9: 19:18
    }

    bb2: {
        (_1.0: i32) = move (_4.0: i32);  // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:19:9: 19:18
        _5 = CheckedAdd((_1.1: i32), const 42_i32); // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:20:9: 20:18
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", (_1.1: i32), const 42_i32) -> [success: bb3, unwind: bb6]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:20:9: 20:18
    }

    bb3: {
        (_1.1: i32) = move (_5.0: i32);  // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:20:9: 20:18
        _6 = <String as From<&str>>::from(const "new") -> [return: bb4, unwind: bb6]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:15: 21:34
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:15: 21:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:28: 21:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        drop((_1.2: std::string::String)) -> [return: bb9, unwind: bb8]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:9: 21:12
    }

    bb5: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:23:2: 23:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:23:1: 23:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:15:1: 23:2
    }

    bb8 (cleanup): {
        (_1.2: std::string::String) = move _6; // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:9: 21:12
        goto -> bb6;                     // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:9: 21:12
    }

    bb9: {
        (_1.2: std::string::String) = move _6; // scope 1 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:21:9: 21:12
        drop(_1) -> bb5;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/disjoint-capture-in-same-closure.rs:23:1: 23:2
    }
}
