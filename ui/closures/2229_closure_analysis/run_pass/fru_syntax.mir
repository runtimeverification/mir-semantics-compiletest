// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs:7:10: 7:15>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: std::string::String;
    let _3: &std::string::String;
    let mut _4: std::string::String;
    let _5: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _2 = <String as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &((*_1).1: std::string::String);
        _4 = <String as Clone>::clone(_5) -> [return: bb2, unwind: bb3];
    }

    bb2: {
        _0 = S { a: move _2, b: move _4 };
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::string::String;
    let mut _5: std::string::String;
    let mut _6: std::string::String;
    let mut _8: std::string::String;
    let mut _9: S;
    let mut _10: &S;
    let _12: ();
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    scope 1 {
        debug a => _1;
        let _2: std::string::String;
        scope 2 {
            debug b => _2;
            let _3: std::string::String;
            scope 3 {
                debug c => _3;
                let _4: S;
                scope 4 {
                    debug s => _4;
                    let _7: T;
                    scope 5 {
                        debug t => _7;
                        let _11: [closure@ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs:28:13: 28:15];
                        scope 6 {
                            debug c => _11;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _15 = const false;
        _14 = const false;
        _13 = const false;
        _15 = const true;
        _1 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = String::new() -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _14 = const true;
        _3 = String::new() -> [return: bb3, unwind: bb11];
    }

    bb3: {
        _15 = const false;
        _5 = move _1;
        _14 = const false;
        _6 = move _2;
        _13 = const true;
        _4 = S { a: move _5, b: move _6 };
        _8 = move _3;
        _10 = &_4;
        _9 = <S as Clone>::clone(move _10) -> [return: bb4, unwind: bb6];
    }

    bb4: {
        _7 = T { a: move _8, s: move _9 };
        _13 = const false;
        _11 = [closure@ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs:28:13: 28:15] { s: move _4, t: move _7 };
        _12 = <[closure@ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs:28:13: 28:15] as FnOnce<()>>::call_once(move _11, const ()) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _13 = const false;
        _14 = const false;
        _15 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_4) -> [return: bb11, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_13) -> [0: bb11, otherwise: bb8];
    }

    bb10 (cleanup): {
        drop(_2) -> [return: bb13, unwind terminate];
    }

    bb11 (cleanup): {
        switchInt(_14) -> [0: bb13, otherwise: bb10];
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb13 (cleanup): {
        switchInt(_15) -> [0: bb7, otherwise: bb12];
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/fru_syntax.rs:28:13: 28:15]) -> () {
    debug s => (_1.0: S);
    debug t => (_1.1: T);
    let mut _0: ();
    let _2: S;
    let mut _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _8: std::string::String;
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let mut _15: &[core::fmt::rt::Argument<'_>];
    let _16: &[core::fmt::rt::Argument<'_>; 2];
    let _17: [core::fmt::rt::Argument<'_>; 2];
    let mut _18: core::fmt::rt::Argument<'_>;
    let _19: &std::string::String;
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &std::string::String;
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 3];
    let _27: [core::fmt::rt::Argument<'_>; 3];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &std::string::String;
    let mut _30: core::fmt::rt::Argument<'_>;
    let _31: &std::string::String;
    let mut _32: core::fmt::rt::Argument<'_>;
    let _33: &std::string::String;
    let mut _37: &[&str; 1];
    let mut _38: bool;
    let mut _39: bool;
    scope 1 {
        debug s2 => _2;
        let _7: S;
        let _9: std::string::String;
        let mut _36: &[&str; 1];
        scope 3 {
            debug s3 => _7;
            let mut _34: &[&str; 4];
            let mut _35: &[&str; 3];
        }
        scope 4 {
            debug res => _9;
        }
    }
    scope 2 {
        debug res => _4;
    }

    bb0: {
        _39 = const false;
        _38 = const false;
        _38 = const true;
        _39 = const true;
        _37 = const _;
        _6 = _37 as &[&str] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_const(move _6) -> [return: bb1, unwind: bb31];
    }

    bb1: {
        _4 = format(move _5) -> [return: bb2, unwind: bb31];
    }

    bb2: {
        _3 = move _4;
        _39 = const false;
        _2 = S { a: move _3, b: move ((_1.0: S).1: std::string::String) };
        _36 = const _;
        _11 = _36 as &[&str] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_const(move _11) -> [return: bb3, unwind: bb17];
    }

    bb3: {
        _9 = format(move _10) -> [return: bb4, unwind: bb17];
    }

    bb4: {
        _8 = move _9;
        _38 = const false;
        _7 = S { a: move _8, b: move (((_1.1: T).1: S).1: std::string::String) };
        _35 = const _;
        _14 = _35 as &[&str] (Pointer(Unsize));
        _19 = &(_2.0: std::string::String);
        _18 = core::fmt::rt::Argument::<'_>::new_display::<String>(_19) -> [return: bb5, unwind: bb16];
    }

    bb5: {
        _21 = &(_2.1: std::string::String);
        _20 = core::fmt::rt::Argument::<'_>::new_display::<String>(_21) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _17 = [move _18, move _20];
        _16 = &_17;
        _15 = _16 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _15) -> [return: bb7, unwind: bb16];
    }

    bb7: {
        _12 = _print(move _13) -> [return: bb8, unwind: bb16];
    }

    bb8: {
        _34 = const _;
        _24 = _34 as &[&str] (Pointer(Unsize));
        _29 = &(_7.0: std::string::String);
        _28 = core::fmt::rt::Argument::<'_>::new_display::<String>(_29) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _31 = &(_7.1: std::string::String);
        _30 = core::fmt::rt::Argument::<'_>::new_display::<String>(_31) -> [return: bb10, unwind: bb16];
    }

    bb10: {
        _33 = &((_1.1: T).0: std::string::String);
        _32 = core::fmt::rt::Argument::<'_>::new_display::<String>(_33) -> [return: bb11, unwind: bb16];
    }

    bb11: {
        _27 = [move _28, move _30, move _32];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _22 = _print(move _23) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        drop(_7) -> [return: bb14, unwind: bb17];
    }

    bb14: {
        drop(_2) -> [return: bb15, unwind: bb31];
    }

    bb15: {
        drop(((_1.0: S).0: std::string::String)) -> [return: bb24, unwind: bb23];
    }

    bb16 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        drop(_2) -> [return: bb31, unwind terminate];
    }

    bb18 (cleanup): {
        resume;
    }

    bb19 (cleanup): {
        drop((((_1.1: T).1: S).0: std::string::String)) -> [return: bb18, unwind terminate];
    }

    bb20 (cleanup): {
        drop((((_1.1: T).1: S).0: std::string::String)) -> [return: bb18, unwind terminate];
    }

    bb21: {
        drop((((_1.1: T).1: S).0: std::string::String)) -> [return: bb22, unwind continue];
    }

    bb22: {
        return;
    }

    bb23 (cleanup): {
        drop(((_1.1: T).0: std::string::String)) -> [return: bb19, unwind terminate];
    }

    bb24: {
        drop(((_1.1: T).0: std::string::String)) -> [return: bb21, unwind: bb20];
    }

    bb25 (cleanup): {
        drop(((_1.1: T).0: std::string::String)) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        drop((((_1.1: T).1: S).0: std::string::String)) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        switchInt(_38) -> [0: bb18, otherwise: bb28];
    }

    bb28 (cleanup): {
        drop((((_1.1: T).1: S).1: std::string::String)) -> [return: bb18, unwind terminate];
    }

    bb29 (cleanup): {
        switchInt(_39) -> [0: bb25, otherwise: bb30];
    }

    bb30 (cleanup): {
        drop(((_1.0: S).1: std::string::String)) -> [return: bb25, unwind terminate];
    }

    bb31 (cleanup): {
        drop(((_1.0: S).0: std::string::String)) -> [return: bb29, unwind terminate];
    }
}

promoted[0] in main::{closure#0}: &[&str; 4] = {
    let mut _0: &[&str; 4];
    let mut _1: [&str; 4];

    bb0: {
        _1 = [const "", const " ", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "New s3"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "New s2"];
        _0 = &_1;
        return;
    }
}
