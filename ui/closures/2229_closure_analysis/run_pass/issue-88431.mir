// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn construct_gamestate_replay(_1: &GameMode, _2: &mut GameStateManager<'_>) -> impl Future<Output = Box<dyn GameState<'_>>> {
    debug _gamemode => _1;               // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:17:5: 17:14
    debug _factory => _2;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:18:5: 18:13
    let mut _0: impl std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:6: 19:33
    let mut _3: [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2

    bb0: {
        _3 = [generator@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2 (#0)] { _gamemode: _1, _factory: move _2 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
                                         // generator
                                         // + def_id: DefId(0:14 ~ issue_88431[b278]::construct_gamestate_replay::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::boxed::Box<dyn GameState<'_>>,
                                         //     {},
                                         //     (&GameMode, &mut GameStateManager<'_>),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Box<dyn GameState<'_>>, [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]>(move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
                                         // + literal: Const { ty: fn([async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]) -> [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2] {identity_future::<Box<dyn GameState<'_>>, [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:21:2: 21:2
    }
}

fn construct_gamestate_replay::{closure#0}(_1: Pin<&mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]>, _2: &mut Context<'_>) -> Poll<Box<dyn GameState<'_>>> {
    debug _task_context => _6;           // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    debug _gamemode => ((*(_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2])).0: &GameMode); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:17:5: 17:14
    debug _factory => ((*(_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2])).1: &mut GameStateManager<'_>); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:18:5: 18:13
    let mut _0: std::task::Poll<std::boxed::Box<dyn GameState<'_>>>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    let _3: &GameMode;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:17:5: 17:14
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _6: &mut std::task::Context<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    let mut _7: u32;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    let mut _8: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    let mut _9: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    let mut _10: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    let mut _11: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    scope 1 {
        debug _gamemode => _3;           // in scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:17:5: 17:14
        let _4: &mut GameStateManager<'_>; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:18:5: 18:13
        scope 2 {
            debug _factory => _4;        // in scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:18:5: 18:13
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
        _7 = discriminant((*_8));        // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
        switchInt(move _7) -> [0: bb1, 2: bb3, otherwise: bb4]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
        _9 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:17:5: 17:14
        _3 = ((*_9).0: &GameMode);       // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:17:5: 17:14
        _10 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]); // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:18:5: 18:13
        _4 = move ((*_10).1: &mut GameStateManager<'_>); // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:18:5: 18:13
        _5 = core::panicking::panic(const "not implemented") -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        _11 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
        discriminant((*_11)) = 2;        // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    }

    bb3: {
        assert(const false, "`async fn` resumed after panicking") -> bb3; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:19:34: 21:2
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:29:1: 29:24>::new(_1: impl for<'b> Fn(&'b mut GameStateManager<'a>) -> FutureGameState<'a, 'b> + 'a) -> MenuOption<'_> {
    debug _command => _1;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:31:9: 31:17
    let mut _0: MenuOption<'_>;          // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:32:10: 32:14
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_1) -> bb2;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:34:5: 34:6
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:30:5: 34:6
    }
}

fn get_replay_menu(_1: &HashMap<&str, GameMode>) -> impl Future<Output = Box<dyn GameState<'_>>> {
    debug gamemodes => _1;               // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
    let mut _0: impl std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:6: 45:33
    let mut _2: [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2

    bb0: {
        _2 = [generator@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2 (#0)] { gamemodes: _1 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
                                         // generator
                                         // + def_id: DefId(0:33 ~ issue_88431[b278]::get_replay_menu::{closure#0})
                                         // + substs: [
                                         //     std::future::ResumeTy,
                                         //     (),
                                         //     std::boxed::Box<dyn GameState<'_>>,
                                         //     {},
                                         //     (&std::collections::HashMap<&str, GameMode>,),
                                         // ]
                                         // + movability: Static
        _0 = identity_future::<Box<dyn GameState<'_>>, [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]>(move _2) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
                                         // + literal: Const { ty: fn([async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]) -> [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2] {identity_future::<Box<dyn GameState<'_>>, [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:57:2: 57:2
    }
}

fn get_replay_menu::{closure#0}(_1: Pin<&mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]>, _2: &mut Context<'_>) -> Poll<Box<dyn GameState<'_>>> {
    debug _task_context => _12;          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    debug gamemodes => ((*(_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2])).0: &std::collections::HashMap<&str, GameMode>); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
    let mut _0: std::task::Poll<std::boxed::Box<dyn GameState<'_>>>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    let _3: &std::collections::HashMap<&str, GameMode>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
    let mut _5: std::vec::Vec<MenuOption<'_>>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 54:29
    let mut _6: std::iter::Map<std::vec::IntoIter<std::string::String>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 53:11
    let mut _7: std::vec::IntoIter<std::string::String>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 48:21
    let mut _8: std::vec::Vec<std::string::String>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 47:23
    let mut _9: [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 53:10
    let mut _10: &&std::collections::HashMap<&str, GameMode>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 53:10
    let mut _11: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
    let mut _12: &mut std::task::Context<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    let mut _13: u32;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    let mut _14: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    let mut _15: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    let mut _16: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    scope 1 {
        debug gamemodes => _3;           // in scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
        let _4: std::vec::Vec<std::string::String>; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:46:9: 46:19
        scope 2 {
            debug recordings => _4;      // in scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:46:9: 46:19
            scope 3 {
            }
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
        _13 = discriminant((*_14));      // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
        switchInt(move _13) -> [0: bb1, 2: bb8, otherwise: bb9]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    }

    bb1: {
        _12 = move _2;                   // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
        _15 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
        _3 = ((*_15).0: &std::collections::HashMap<&str, GameMode>); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
        _4 = Vec::<String>::new() -> [return: bb2, unwind: bb7]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<String> {Vec::<String>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = move _4;                    // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 47:23
        _7 = <Vec<String> as IntoIterator>::into_iter(move _8) -> [return: bb3, unwind: bb7]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 48:21
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:48:10: 48:19
                                         // + literal: Const { ty: fn(Vec<String>) -> <Vec<String> as IntoIterator>::IntoIter {<Vec<String> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &_3;                       // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 53:10
        _9 = [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21] { gamemodes: move _10 }; // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 53:10
                                         // closure
                                         // + def_id: DefId(0:34 ~ issue_88431[b278]::get_replay_menu::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((std::string::String,)) -> MenuOption<'_>,
                                         //     (&&std::collections::HashMap<&str, GameMode>,),
                                         // ]
        _6 = <std::vec::IntoIter<String> as Iterator>::map::<MenuOption<'_>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]>(move _7, move _9) -> [return: bb4, unwind: bb7]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 53:11
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:10: 49:13
                                         // + literal: Const { ty: fn(std::vec::IntoIter<String>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]) -> Map<std::vec::IntoIter<String>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]> {<std::vec::IntoIter<String> as Iterator>::map::<MenuOption<'_>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]>}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <Map<std::vec::IntoIter<String>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]> as Iterator>::collect::<Vec<MenuOption<'_>>>(move _6) -> [return: bb5, unwind: bb7]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:47:13: 54:29
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:54:10: 54:17
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Map<std::vec::IntoIter<String>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]>) -> Vec<MenuOption<'_>> {<Map<std::vec::IntoIter<String>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21]> as Iterator>::collect::<Vec<MenuOption<'_>>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb7]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:54:29: 54:30
    }

    bb6: {
        _11 = core::panicking::panic(const "not yet implemented") -> bb7; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7 (cleanup): {
        _16 = deref_copy (_1.0: &mut [async fn body@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
        discriminant((*_16)) = 2;        // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    }

    bb8: {
        assert(const false, "`async fn` resumed after panicking") -> bb8; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    }

    bb9: {
        unreachable;                     // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:45:34: 57:2
    }
}

fn get_replay_menu::{closure#0}::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 49:21], _2: String) -> MenuOption<'_> {
    debug entry => _2;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:15: 49:20
    debug gamemodes => (*((*_1).0: &&std::collections::HashMap<&str, GameMode>)); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
    let mut _0: MenuOption<'_>;          // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:22: 49:22
    let mut _3: [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 50:37]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 52:14
    let mut _4: &&std::collections::HashMap<&str, GameMode>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:14: 53:10

    bb0: {
        _4 = deref_copy ((*_1).0: &&std::collections::HashMap<&str, GameMode>); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 52:14
        _3 = [closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 50:37] { gamemodes: (*_4), entry: move _2 }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 52:14
                                         // closure
                                         // + def_id: DefId(0:35 ~ issue_88431[b278]::get_replay_menu::{closure#0}::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut GameStateManager<'_>,)) -> std::pin::Pin<std::boxed::Box<(dyn std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>> + 'a)>>,
                                         //     (&std::collections::HashMap<&str, GameMode>, std::string::String),
                                         // ]
        _0 = MenuOption::<'_>::new::<[closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 50:37]>(move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:13: 52:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:13: 50:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 50:37]) -> MenuOption<'_> {MenuOption::<'_>::new::<[closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 50:37]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:53:10: 53:10
    }
}

fn get_replay_menu::{closure#0}::{closure#0}::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 50:37], _2: &mut GameStateManager<'_>) -> Pin<Box<dyn Future<Output = Box<dyn GameState<'_>>>>> {
    debug f => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:35: 50:36
    debug gamemodes => ((*_1).0: &std::collections::HashMap<&str, GameMode>); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:44:5: 44:14
    debug entry => ((*_1).1: std::string::String); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:49:15: 49:20
    let mut _0: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>>>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:38: 50:38
    let mut _3: std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>>>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:17: 51:84
    let mut _4: std::pin::Pin<std::boxed::Box<impl std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>>>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:17: 51:84
    let mut _5: impl std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:26: 51:83
    let mut _6: &GameMode;               // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:53: 51:79
    let _7: &GameMode;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:53: 51:79
    let _8: &GameMode;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:54: 51:79
    let mut _9: &std::collections::HashMap<&str, GameMode>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:54: 51:63
    let mut _10: &str;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:64: 51:78
    let _11: &str;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:64: 51:78
    let mut _12: &std::string::String;   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:64: 51:78
    let mut _13: &mut GameStateManager<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:81: 51:82
    let mut _14: &std::collections::HashMap<&str, GameMode>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:50:29: 52:14

    bb0: {
        _14 = deref_copy ((*_1).0: &std::collections::HashMap<&str, GameMode>); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:54: 51:63
        _9 = _14;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:54: 51:63
        _12 = &((*_1).1: std::string::String); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:64: 51:78
        _11 = String::as_str(move _12) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:64: 51:78
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:70: 51:76
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a str {String::as_str}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = _11;                       // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:64: 51:78
        _8 = <HashMap<&str, GameMode> as Index<&str>>::index(move _9, move _10) -> bb2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:54: 51:79
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:54: 51:79
                                         // + literal: Const { ty: for<'a> fn(&'a HashMap<&str, GameMode>, &str) -> &'a <HashMap<&str, GameMode> as Index<&str>>::Output {<HashMap<&str, GameMode> as Index<&str>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _8;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:53: 51:79
        _6 = _7;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:53: 51:79
        _13 = &mut (*_2);                // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:81: 51:82
        _5 = construct_gamestate_replay(move _6, move _13) -> bb3; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:26: 51:83
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:26: 51:52
                                         // + literal: Const { ty: for<'b, 'c, 'a> fn(&'b GameMode, &'c mut GameStateManager<'a>) -> impl Future<Output = Box<(dyn GameState<'a> + 'a)>> {construct_gamestate_replay}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = Box::<impl Future<Output = Box<dyn GameState<'_>>>>::pin(move _5) -> bb4; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:17: 51:84
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:17: 51:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(impl Future<Output = Box<dyn GameState<'_>>>) -> Pin<Box<impl Future<Output = Box<dyn GameState<'_>>>>> {Box::<impl Future<Output = Box<dyn GameState<'_>>>>::pin}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = move _4 as std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>>> (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:17: 51:84
        _0 = move _3 as std::pin::Pin<std::boxed::Box<dyn std::future::Future<Output = std::boxed::Box<dyn GameState<'_>>>>> (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:51:17: 51:84
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:52:14: 52:14
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:59:11: 59:11

    bb0: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88431.rs:59:13: 59:13
    }
}
