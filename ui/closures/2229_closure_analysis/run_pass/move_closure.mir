// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn simple_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:8:17: 8:17
    let mut _1: i32;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:9:9: 9:14
    let _4: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:15:5: 15:8
    let mut _5: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:15:5: 15:6
    let mut _6: ();                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:15:5: 15:8
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:9:9: 9:14
        let _2: &mut i32;                // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:10:9: 10:14
        scope 2 {
            debug ref_s => _2;           // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:10:9: 10:14
            let mut _3: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24]; // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:9: 12:14
            scope 3 {
                debug c => _3;           // in scope 3 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:9: 12:14
            }
        }
    }

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:9:17: 9:19
        _2 = &mut _1;                    // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:10:17: 10:23
        _3 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24] { ref_s: move _2 }; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 14:6
                                         // closure
                                         // + def_id: DefId(0:4 ~ move_closure[de0a]::simple_ref::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut i32,),
                                         // ]
        _5 = &mut _3;                    // scope 3 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:15:5: 15:6
        _4 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24] as FnMut<()>>::call_mut(move _5, move _6) -> bb1; // scope 3 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:15:5: 15:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:15:5: 15:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:16:2: 16:2
    }
}

fn simple_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 12:24]) -> () {
    debug ref_s => ((*_1).0: &mut i32);  // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:10:9: 10:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:25: 12:25
    let mut _2: (i32, bool);             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
    let mut _3: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 14:6
    let mut _4: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 14:6
    let mut _5: &mut i32;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:12:17: 14:6

    bb0: {
        _3 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
        _2 = CheckedAdd((*_3), const 10_i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
        _4 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_4), const 10_i32) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
        (*_5) = move (_2.0: i32);        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:13:9: 13:21
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:14:6: 14:6
    }
}

fn struct_contains_ref_to_another_struct() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:18:44: 18:44
    let mut _1: struct_contains_ref_to_another_struct::S; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:9: 22:14
    let mut _2: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:29
    let mut _3: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:29
    let _4: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:22
    let mut _6: &mut struct_contains_ref_to_another_struct::S; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:15: 23:21
    let mut _7: &mut struct_contains_ref_to_another_struct::S; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:15: 23:21
    let _9: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:29:5: 29:8
    let mut _10: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:29:5: 29:6
    let mut _11: ();                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:29:5: 29:8
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:9: 22:14
        let _5: struct_contains_ref_to_another_struct::T<'_>; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:9: 23:10
        scope 2 {
            debug t => _5;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:9: 23:10
            let mut _8: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24]; // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:9: 25:14
            scope 3 {
                debug c => _8;           // in scope 3 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:9: 25:14
            }
        }
    }

    bb0: {
        _4 = const "s";                  // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:22
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:29
        _2 = <&str as Into<String>>::into(move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:19: 22:29
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:23: 22:27
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = struct_contains_ref_to_another_struct::S(move _2); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:22:17: 22:30
        _7 = &mut _1;                    // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:15: 23:21
        _6 = &mut (*_7);                 // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:15: 23:21
        _5 = struct_contains_ref_to_another_struct::T::<'_>(move _6); // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:13: 23:22
        _8 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24] { t: move (_5.0: &mut struct_contains_ref_to_another_struct::S) }; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 27:6
                                         // closure
                                         // + def_id: DefId(0:13 ~ move_closure[de0a]::struct_contains_ref_to_another_struct::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut struct_contains_ref_to_another_struct::S,),
                                         // ]
        _10 = &mut _8;                   // scope 3 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:29:5: 29:6
        _9 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24] as FnMut<()>>::call_mut(move _10, move _11) -> [return: bb2, unwind: bb4]; // scope 3 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:29:5: 29:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:29:5: 29:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:30:1: 30:2
    }

    bb3: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:30:2: 30:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:30:1: 30:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:18:1: 30:2
    }
}

fn struct_contains_ref_to_another_struct::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 25:24]) -> () {
    debug t__0 => ((*_1).0: &mut struct_contains_ref_to_another_struct::S); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:23:9: 23:10
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:25: 25:25
    let mut _2: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:31
    let mut _3: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:31
    let _4: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:24
    let mut _5: &mut struct_contains_ref_to_another_struct::S; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 27:6
    let mut _6: &mut struct_contains_ref_to_another_struct::S; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 27:6
    let mut _7: &mut struct_contains_ref_to_another_struct::S; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 27:6

    bb0: {
        _4 = const "new s";              // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:31
        _2 = <&str as Into<String>>::into(move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:17: 26:31
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:25: 26:29
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = deref_copy ((*_1).0: &mut struct_contains_ref_to_another_struct::S); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:9: 26:14
        drop(((*_5).0: std::string::String)) -> [return: bb3, unwind: bb2]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:9: 26:14
    }

    bb2 (cleanup): {
        _6 = deref_copy ((*_1).0: &mut struct_contains_ref_to_another_struct::S); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:9: 26:14
        ((*_6).0: std::string::String) = move _2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:9: 26:14
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:25:17: 27:6
    }

    bb3: {
        _7 = deref_copy ((*_1).0: &mut struct_contains_ref_to_another_struct::S); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:9: 26:14
        ((*_7).0: std::string::String) = move _2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:26:9: 26:14
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:27:6: 27:6
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
    debug f => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
    let mut _4: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
    let _5: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
    let mut _7: &&std::string::String;   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
    let _8: &&std::string::String;       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
    let _9: &std::string::String;        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
        _5 = const "S";                  // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
        _9 = &((*_1).0: std::string::String); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
        _8 = &_9;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
        _7 = _8;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:10: 33:16
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:10: 32:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:32:15: 32:15
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15>::fmt(_1: &T, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
    debug f => _2;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
    let mut _4: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
    let _5: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
    let mut _7: &&S;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
    let _8: &&S;                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
    let _9: &S;                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
        _5 = const "T";                  // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
        _9 = &((*_1).0: S);              // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
        _8 = &_9;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
        _7 = _8;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:10: 36:11
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:10: 35:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:35:15: 35:15
    }
}

fn no_ref() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:38:13: 38:13
    let mut _1: T;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:9: 39:14
    let mut _2: S;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:19: 39:32
    let mut _3: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:31
    let mut _4: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:31
    let _5: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:24
    let _7: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:43:5: 43:8
    let mut _8: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:43:5: 43:6
    let mut _9: ();                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:43:5: 43:8
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:9: 39:14
        let mut _6: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24]; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:9: 40:14
        scope 2 {
            debug c => _6;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:9: 40:14
        }
    }

    bb0: {
        _5 = const "s";                  // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:31
        _3 = <&str as Into<String>>::into(move _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:21: 39:31
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:25: 39:29
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = S(move _3);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:19: 39:32
        _1 = T(move _2);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:17: 39:33
        _6 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24] { t: move ((_1.0: S).0: std::string::String) }; // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 42:6
                                         // closure
                                         // + def_id: DefId(0:15 ~ move_closure[de0a]::no_ref::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (std::string::String,),
                                         // ]
        _8 = &mut _6;                    // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:43:5: 43:6
        _7 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24] as FnMut<()>>::call_mut(move _8, move _9) -> [return: bb2, unwind: bb4]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:43:5: 43:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:43:5: 43:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_6) -> bb3;                 // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:44:1: 44:2
    }

    bb3: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:44:2: 44:2
    }

    bb4 (cleanup): {
        drop(_6) -> bb5;                 // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:44:1: 44:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:38:1: 44:2
    }
}

fn no_ref::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 40:24]) -> () {
    debug t__0__0 => ((*_1).0: std::string::String); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:39:9: 39:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:25: 40:25
    let mut _2: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:31
    let mut _3: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:31
    let _4: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:24

    bb0: {
        _4 = const "new S";              // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:31
        _2 = <&str as Into<String>>::into(move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:17: 41:31
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:25: 41:29
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        drop(((*_1).0: std::string::String)) -> [return: bb3, unwind: bb2]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:9: 41:14
    }

    bb2 (cleanup): {
        ((*_1).0: std::string::String) = move _2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:9: 41:14
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:40:17: 42:6
    }

    bb3: {
        ((*_1).0: std::string::String) = move _2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:41:9: 41:14
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:42:6: 42:6
    }
}

fn no_ref_nested() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:46:20: 46:20
    let mut _1: T;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:9: 47:14
    let mut _2: S;                       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:19: 47:32
    let mut _3: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:31
    let mut _4: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:31
    let _5: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:24
    let _7: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:56:5: 56:8
    let mut _8: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:56:5: 56:6
    let mut _9: ();                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:56:5: 56:8
    scope 1 {
        debug t => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:9: 47:14
        let _6: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15]; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:9: 48:10
        scope 2 {
            debug c => _6;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:9: 48:10
        }
    }

    bb0: {
        _5 = const "s";                  // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:31
        _3 = <&str as Into<String>>::into(move _4) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:21: 47:31
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:25: 47:29
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = S(move _3);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:19: 47:32
        _1 = T(move _2);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:17: 47:33
        _6 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15] { t: move (_1.0: S) }; // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 55:6
                                         // closure
                                         // + def_id: DefId(0:17 ~ move_closure[de0a]::no_ref_nested::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (S,),
                                         // ]
        _8 = move _6;                    // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:56:5: 56:6
        _7 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15] as FnOnce<()>>::call_once(move _8, move _9) -> bb2; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:56:5: 56:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:56:5: 56:6
                                         // + literal: Const { ty: extern "rust-call" fn([closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15] as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:57:2: 57:2
    }
}

fn no_ref_nested::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 48:15]) -> () {
    debug t__0 => (_1.0: S);             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:9: 47:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:16: 48:16
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
    let mut _5: &[&str; 2];              // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
    let _6: &[&str; 2];                  // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
    let mut _12: &S;                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
    let _13: &S;                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
    let mut _14: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:13: 50:18
    let _15: ();                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:54:9: 54:12
    let mut _16: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:54:9: 54:10
    let mut _17: ();                     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:54:9: 54:12
    let mut _18: &[&str; 2];             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
    let mut _19: bool;                   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:55:5: 55:6
    scope 1 {
        debug c => _14;                  // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:13: 50:18
    }

    bb0: {
        _19 = const false;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6
        _19 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6
        _18 = const _;                   // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(no_ref_nested::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _18;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
        _5 = _6;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
        _13 = &(_1.0: S);                // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
        _12 = _13;                       // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
        _11 = core::fmt::ArgumentV1::<'_>::new_debug::<S>(move _12) -> [return: bb1, unwind: bb9]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:26: 49:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b S) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<S>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _19 = const false;               // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 53:10
        _14 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28] { t: move ((_1.0: S).0: std::string::String) }; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 53:10
                                         // closure
                                         // + def_id: DefId(0:18 ~ move_closure[de0a]::no_ref_nested::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (std::string::String,),
                                         // ]
        _16 = &mut _14;                  // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:54:9: 54:10
        _15 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28] as FnMut<()>>::call_mut(move _16, move _17) -> [return: bb4, unwind: bb6]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:54:9: 54:12
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:54:9: 54:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28] as FnMut<()>>::call_mut}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_14) -> [return: bb5, unwind: bb9]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:55:5: 55:6
    }

    bb5: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:55:6: 55:6
    }

    bb6 (cleanup): {
        drop(_14) -> bb9;                // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:55:5: 55:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:48:13: 55:6
    }

    bb8 (cleanup): {
        drop(((_1.0: S).0: std::string::String)) -> bb7; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:55:5: 55:6
    }

    bb9 (cleanup): {
        switchInt(_19) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:55:5: 55:6
    }
}

promoted[0] in no_ref_nested::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
    let mut _1: [&str; 2];               // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:49:18: 49:24
    }
}

fn no_ref_nested::{closure#0}::{closure#0}(_1: &mut [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 50:28]) -> () {
    debug t__0__0 => ((*_1).0: std::string::String); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:47:9: 47:14
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:29: 50:29
    let mut _2: std::string::String;     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:35
    let mut _3: &str;                    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:35
    let _4: &str;                        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:28
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
    let mut _8: &[&str; 2];              // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
    let _9: &[&str; 2];                  // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
    let mut _15: &std::string::String;   // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
    let _16: &std::string::String;       // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
    let mut _17: &[&str; 2];             // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28

    bb0: {
        _4 = const "new S";              // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:28
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:35
        _2 = <&str as Into<String>>::into(move _3) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:21: 51:35
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:29: 51:33
                                         // + literal: Const { ty: fn(&str) -> String {<&str as Into<String>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        drop(((*_1).0: std::string::String)) -> [return: bb6, unwind: bb5]; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:13: 51:18
    }

    bb2: {
        _13 = [move _14];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:53:10: 53:10
    }

    bb5 (cleanup): {
        ((*_1).0: std::string::String) = move _2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:13: 51:18
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:50:21: 53:10
    }

    bb6: {
        ((*_1).0: std::string::String) = move _2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:51:13: 51:18
        _17 = const _;                   // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(no_ref_nested::{closure#0}::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _17;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
        _8 = _9;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
        _16 = &((*_1).0: std::string::String); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
        _15 = _16;                       // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
        _14 = core::fmt::ArgumentV1::<'_>::new_debug::<String>(move _15) -> bb2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:30: 52:35
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<String>}, val: Value(<ZST>) }
    }
}

promoted[0] in no_ref_nested::{closure#0}::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
    let mut _1: [&str; 2];               // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:52:22: 52:28
    }
}

fn data_moved_but_not_fn_once() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:61:33: 61:33
    let _1: std::boxed::Box<i32>;        // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:62:9: 62:10
    let _3: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:71:5: 71:8
    let mut _4: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:71:5: 71:6
    let mut _5: ();                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:71:5: 71:8
    let _6: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:72:5: 72:8
    let mut _7: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:72:5: 72:6
    let mut _8: ();                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:72:5: 72:8
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:62:9: 62:10
        let _2: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20]; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:9: 64:10
        scope 2 {
            debug c => _2;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:9: 64:10
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 10_i32) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:62:13: 62:28
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:62:13: 62:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] { x: move _1 }; // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 69:6
                                         // closure
                                         // + def_id: DefId(0:20 ~ move_closure[de0a]::data_moved_but_not_fn_once::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (std::boxed::Box<i32>,),
                                         // ]
        _4 = &_2;                        // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:71:5: 71:6
        _3 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as Fn<()>>::call(move _4, move _5) -> [return: bb2, unwind: bb5]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:71:5: 71:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:71:5: 71:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_2;                        // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:72:5: 72:6
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as Fn<()>>::call(move _7, move _8) -> [return: bb3, unwind: bb5]; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:72:5: 72:8
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:72:5: 72:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20], ()) -> <[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as FnOnce<()>>::Output {<[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:73:1: 73:2
    }

    bb4: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:73:2: 73:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:73:1: 73:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:61:1: 73:2
    }
}

fn data_moved_but_not_fn_once::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 64:20]) -> () {
    debug x => ((*_1).0: std::boxed::Box<i32>); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:62:9: 62:10
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:21: 64:21
    let _2: i32;                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:68:13: 68:15
    let mut _3: std::boxed::Box<i32>;    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 69:6
    let mut _4: *const i32;              // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:64:13: 69:6
    scope 1 {
        debug _x => _2;                  // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:68:13: 68:15
    }

    bb0: {
        _3 = deref_copy ((*_1).0: std::boxed::Box<i32>); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:68:18: 68:20
        _4 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:68:18: 68:20
        _2 = (*_4);                      // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:68:18: 68:20
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:69:6: 69:6
    }
}

fn returned_closure_owns_copy_type_data() -> impl Fn() -> i32 {
    let mut _0: impl Fn() -> i32;        // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:76:46: 76:62
    let _1: i32;                         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:77:9: 77:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:77:9: 77:10
        let _2: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20]; // in scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:9: 79:10
        scope 2 {
            debug c => _2;               // in scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:9: 79:10
        }
    }

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:77:13: 77:15
        _2 = const {transmute(0x0000000a): [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20]}; // scope 1 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:22
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:22
                                         // + literal: Const { ty: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20], val: Value(Scalar(0x0000000a)) }
        _0 = const {transmute(0x0000000a): [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20]}; // scope 2 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:81:5: 81:6
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:81:5: 81:6
                                         // + literal: Const { ty: [closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20], val: Value(Scalar(0x0000000a)) }
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:82:2: 82:2
    }
}

fn returned_closure_owns_copy_type_data::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:13: 79:20]) -> i32 {
    debug x => ((*_1).0: i32);           // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:77:9: 77:10
    let mut _0: i32;                     // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:21: 79:21

    bb0: {
        _0 = ((*_1).0: i32);             // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:21: 79:22
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:79:22: 79:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:84:11: 84:11
    let _1: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:85:5: 85:17
    let _2: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:86:5: 86:44
    let _3: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:87:5: 87:13
    let _4: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:88:5: 88:20
    let _5: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:90:5: 90:33
    let _6: impl Fn() -> i32;            // in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:92:5: 92:43

    bb0: {
        _1 = simple_ref() -> bb1;        // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:85:5: 85:17
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:85:5: 85:15
                                         // + literal: Const { ty: fn() {simple_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = struct_contains_ref_to_another_struct() -> bb2; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:86:5: 86:44
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:86:5: 86:42
                                         // + literal: Const { ty: fn() {struct_contains_ref_to_another_struct}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = no_ref() -> bb3;            // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:87:5: 87:13
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:87:5: 87:11
                                         // + literal: Const { ty: fn() {no_ref}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = no_ref_nested() -> bb4;     // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:88:5: 88:20
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:88:5: 88:18
                                         // + literal: Const { ty: fn() {no_ref_nested}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = data_moved_but_not_fn_once() -> bb5; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:90:5: 90:33
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:90:5: 90:31
                                         // + literal: Const { ty: fn() {data_moved_but_not_fn_once}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = returned_closure_owns_copy_type_data() -> bb6; // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:92:5: 92:43
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/move_closure.rs:92:5: 92:41
                                         // + literal: Const { ty: fn() -> impl Fn() -> i32 {returned_closure_owns_copy_type_data}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:93:2: 93:2
    }
}

fn struct_contains_ref_to_another_struct::S(_1: String) -> struct_contains_ref_to_another_struct::S {
    let mut _0: struct_contains_ref_to_another_struct::S; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:19:5: 19:13

    bb0: {
        _0 = struct_contains_ref_to_another_struct::S(move _1); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:19:5: 19:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:19:5: 19:13
    }
}

// MIR FOR CTFE
fn struct_contains_ref_to_another_struct::S(_1: String) -> struct_contains_ref_to_another_struct::S {
    let mut _0: struct_contains_ref_to_another_struct::S; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:19:5: 19:13

    bb0: {
        _0 = struct_contains_ref_to_another_struct::S(move _1); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:19:5: 19:13
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:19:5: 19:13
    }
}

fn struct_contains_ref_to_another_struct::T(_1: &mut struct_contains_ref_to_another_struct::S) -> struct_contains_ref_to_another_struct::T<'_> {
    let mut _0: struct_contains_ref_to_another_struct::T<'_>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:20:5: 20:17

    bb0: {
        _0 = struct_contains_ref_to_another_struct::T::<'_>(move _1); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:20:5: 20:17
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:20:5: 20:17
    }
}

// MIR FOR CTFE
fn struct_contains_ref_to_another_struct::T(_1: &mut struct_contains_ref_to_another_struct::S) -> struct_contains_ref_to_another_struct::T<'_> {
    let mut _0: struct_contains_ref_to_another_struct::T<'_>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:20:5: 20:17

    bb0: {
        _0 = struct_contains_ref_to_another_struct::T::<'_>(move _1); // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:20:5: 20:17
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:20:5: 20:17
    }
}

fn S(_1: String) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:1: 33:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:1: 33:9
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:1: 33:9
    }
}

// MIR FOR CTFE
fn S(_1: String) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:1: 33:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:1: 33:9
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:33:1: 33:9
    }
}

fn T(_1: S) -> T {
    let mut _0: T;                       // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:1: 36:9

    bb0: {
        _0 = T(move _1);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:1: 36:9
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:1: 36:9
    }
}

// MIR FOR CTFE
fn T(_1: S) -> T {
    let mut _0: T;                       // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:1: 36:9

    bb0: {
        _0 = T(move _1);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:1: 36:9
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/move_closure.rs:36:1: 36:9
    }
}
