// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/2229_closure_analysis/run_pass/by_value.rs:7:10: 7:15>::fmt(_1: &SomeLargeType, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "SomeLargeType";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/closures/2229_closure_analysis/run_pass/by_value.rs:7:17: 7:24>::default() -> SomeLargeType {
    let mut _0: SomeLargeType;

    bb0: {
        return;
    }
}

MuchLargerType::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 32_usize;
        return;
    }
}

fn big_box() -> () {
    let mut _0: ();
    let mut _1: [SomeLargeType; 32];
    let mut _4: std::boxed::Box<MuchLargerType>;
    let _6: ();
    scope 1 {
        debug s => const MuchLargerType([SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType]);
        let _2: std::boxed::Box<MuchLargerType>;
        scope 2 {
            debug b => _2;
            let _3: (std::boxed::Box<MuchLargerType>, i32);
            scope 3 {
                debug t => _3;
                let _5: [closure@ui/closures/2229_closure_analysis/run_pass/by_value.rs:16:13: 16:15];
                scope 4 {
                    debug c => _5;
                }
            }
        }
    }

    bb0: {
        _1 = <[SomeLargeType; 32] as Default>::default() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Box::<MuchLargerType>::new(const MuchLargerType([SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType])) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = move _2;
        _3 = (move _4, const 10_i32);
        _5 = [closure@ui/closures/2229_closure_analysis/run_pass/by_value.rs:16:13: 16:15] { t: move _3 };
        _6 = <[closure@ui/closures/2229_closure_analysis/run_pass/by_value.rs:16:13: 16:15] as FnOnce<()>>::call_once(move _5, const ()) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

fn big_box::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/by_value.rs:16:13: 16:15]) -> () {
    debug t => (_1.0: (std::boxed::Box<MuchLargerType>, i32));
    let mut _0: ();
    let _2: [SomeLargeType; 32];
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 2];
    let _8: [core::fmt::rt::Argument<'_>; 2];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i32;
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &[SomeLargeType; 32];
    let mut _14: std::boxed::Box<MuchLargerType>;
    let mut _15: &mut std::boxed::Box<MuchLargerType>;
    let mut _16: ();
    let mut _17: &mut std::boxed::Box<MuchLargerType>;
    let mut _18: ();
    let mut _19: *const MuchLargerType;
    let mut _20: *const ();
    let mut _21: usize;
    let mut _22: usize;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    scope 1 {
        debug p => const [SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType, SomeLargeType];
        let mut _13: &[&str; 3];
    }

    bb0: {
        _14 = deref_copy ((_1.0: (std::boxed::Box<MuchLargerType>, i32)).0: std::boxed::Box<MuchLargerType>);
        _19 = (((_14.0: std::ptr::Unique<MuchLargerType>).0: std::ptr::NonNull<MuchLargerType>).0: *const MuchLargerType);
        _20 = _19 as *const () (PtrToPtr);
        _21 = _20 as usize (Transmute);
        _22 = AlignOf(MuchLargerType);
        _23 = Sub(_22, const 1_usize);
        _24 = BitAnd(_21, _23);
        _25 = Eq(_24, const 0_usize);
        assert(_25, "misaligned pointer dereference: address must be a multiple of {} but is {}", _22, _21) -> [success: bb8, unwind unreachable];
    }

    bb1: {
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_debug::<[SomeLargeType; 32]>(_12) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _8 = [move _9, move _11];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        _15 = &mut ((_1.0: (std::boxed::Box<MuchLargerType>, i32)).0: std::boxed::Box<MuchLargerType>);
        _16 = <Box<MuchLargerType> as Drop>::drop(move _15) -> [return: bb6, unwind continue];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        _17 = &mut ((_1.0: (std::boxed::Box<MuchLargerType>, i32)).0: std::boxed::Box<MuchLargerType>);
        _18 = <Box<MuchLargerType> as Drop>::drop(move _17) -> [return: bb5, unwind terminate];
    }

    bb8: {
        _13 = const _;
        _5 = _13 as &[&str] (Pointer(Unsize));
        _10 = &((_1.0: (std::boxed::Box<MuchLargerType>, i32)).1: i32);
        _9 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> [return: bb1, unwind: bb7];
    }
}

promoted[0] in big_box::{closure#0}: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = big_box() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn MuchLargerType(_1: [SomeLargeType; 32]) -> MuchLargerType {
    let mut _0: MuchLargerType;

    bb0: {
        _0 = MuchLargerType(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MuchLargerType(_1: [SomeLargeType; 32]) -> MuchLargerType {
    let mut _0: MuchLargerType;

    bb0: {
        _0 = MuchLargerType(move _1);
        return;
    }
}
