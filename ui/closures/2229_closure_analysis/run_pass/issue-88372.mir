// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn solve(_1: F) -> Option<u64> {
    debug validate => _1;                // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:5:13: 5:21
    let mut _0: std::option::Option<u64>; // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:5:29: 5:40
    let mut _2: [i8; 1];                 // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:9: 9:21
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:5: 10:12
    let mut _4: [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 10:20]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
    let mut _5: &F;                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
    let mut _6: &mut [i8; 1];            // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
    scope 1 {
        debug position => _2;            // in scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:9: 9:21
    }

    bb0: {
        _2 = [const 1_i8];               // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:33: 9:36
        _3 = Option::<i32>::Some(const 0_i32); // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:5: 10:12
        _5 = &_1;                        // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
        _6 = &mut _2;                    // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
        _4 = [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 10:20] { validate: move _5, position: move _6 }; // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
                                         // closure
                                         // + def_id: DefId(0:7 ~ issue_88372[546f]::solve::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i32,
                                         //     extern "rust-call" fn((i32,)) -> u64,
                                         //     (&F, &mut [i8; 1]),
                                         // ]
        _0 = Option::<i32>::map::<u64, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 10:20]>(move _3, move _4) -> [return: bb1, unwind: bb3]; // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:5: 14:7
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:13: 10:16
                                         // + literal: Const { ty: fn(Option<i32>, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 10:20]) -> Option<u64> {Option::<i32>::map::<u64, [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 10:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:15:1: 15:2
    }

    bb2: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:15:2: 15:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:15:1: 15:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:5:1: 15:2
    }
}

solve::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:7:21: 7:22

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:7:21: 7:22
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:7:21: 7:22
    }
}

solve::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:28: 9:29

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:28: 9:29
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:28: 9:29
    }
}

fn solve::{closure#0}(_1: [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 10:20], _2: i32) -> u64 {
    debug validate => (*(_1.0: &F));     // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:5:13: 5:21
    debug position => (*(_1.1: &mut [i8; 1])); // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:9:9: 9:21
    let mut _0: u64;                     // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:21: 10:21
    let _3: ();                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:32
    let mut _4: &F;                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:17
    let mut _5: (&mut [i8; 1],);         // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:32
    let mut _6: &mut [i8; 1];            // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:18: 11:31
    let mut _7: &mut [i8; 1];            // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:18: 11:31
    let _8: i8;                          // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:12:14: 12:16
    let mut _9: &F;                      // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
    let mut _10: &mut [i8; 1];           // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
    let mut _11: &mut [i8; 1];           // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:10:17: 14:6
    scope 1 {
        debug _x => _8;                  // in scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:12:14: 12:16
    }

    bb0: {
        _9 = deref_copy (_1.0: &F);      // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:17
        _4 = _9;                         // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:17
        _10 = deref_copy (_1.1: &mut [i8; 1]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:18: 11:31
        _7 = &mut (*_10);                // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:18: 11:31
        _6 = &mut (*_7);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:18: 11:31
        _5 = (move _6,);                 // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:32
        _3 = <F as Fn<(&mut [i8; 1],)>>::call(move _4, move _5) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:32
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:11:9: 11:17
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (&mut [i8; 1],)) -> <F as FnOnce<(&mut [i8; 1],)>>::Output {<F as Fn<(&mut [i8; 1],)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = deref_copy (_1.1: &mut [i8; 1]); // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:12:14: 12:16
        _8 = (*_11)[0 of 1];             // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:12:14: 12:16
        _0 = const 0_u64;                // scope 1 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:13:9: 13:10
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:17:11: 17:11
    let _1: std::option::Option<u64>;    // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:5: 18:18
    let mut _2: [closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:11: 18:14]; // in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:11: 18:17

    bb0: {
        _1 = solve::<[closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:11: 18:14]>(move _2) -> bb1; // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:5: 18:18
                                         // mir::Constant
                                         // + span: ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:5: 18:10
                                         // + literal: Const { ty: fn([closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:11: 18:14]) -> Option<u64> {solve::<[closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:11: 18:14]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:19:2: 19:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:11: 18:14], _2: &mut [i8; 1]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:15: 18:15

    bb0: {
        return;                          // scope 0 at ui/closures/2229_closure_analysis/run_pass/issue-88372.rs:18:17: 18:17
    }
}
