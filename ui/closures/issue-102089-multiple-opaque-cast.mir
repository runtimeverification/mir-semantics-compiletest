// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/closures/issue-102089-multiple-opaque-cast.rs:9:1: 9:27>::error_trying_to_destructure_self_in_closure(_1: Example<'_, T>) -> () {
    debug self => _1;                    // in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:10:54: 10:58
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:10:60: 10:60
    let _2: [closure@ui/closures/issue-102089-multiple-opaque-cast.rs:11:19: 11:21]; // in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:11:9: 11:16
    scope 1 {
        debug closure => _2;             // in scope 1 at ui/closures/issue-102089-multiple-opaque-cast.rs:11:9: 11:16
    }

    bb0: {
        _2 = [closure@ui/closures/issue-102089-multiple-opaque-cast.rs:11:19: 11:21] { self: move _1 }; // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:11:19: 13:6
                                         // closure
                                         // + def_id: DefId(0:12 ~ issue_102089_multiple_opaque_cast[1332]::{impl#0}::error_trying_to_destructure_self_in_closure::{closure#0})
                                         // + substs: [
                                         //     ReErased,
                                         //     T,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (Example<'_, T>,),
                                         // ]
        drop(_2) -> bb1;                 // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:14:3: 14:4
    }

    bb1: {
        return;                          // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:14:4: 14:4
    }
}

fn <impl at ui/closures/issue-102089-multiple-opaque-cast.rs:9:1: 9:27>::error_trying_to_destructure_self_in_closure::{closure#0}(_1: [closure@ui/closures/issue-102089-multiple-opaque-cast.rs:11:19: 11:21]) -> () {
    debug self => (_1.0: Example<'_, T>); // in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:10:54: 10:58
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:11:22: 11:22
    let _2: T;                           // in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:12:18: 12:19
    let _3: &T;                          // in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:12:21: 12:22
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/closures/issue-102089-multiple-opaque-cast.rs:12:18: 12:19
        debug b => _3;                   // in scope 1 at ui/closures/issue-102089-multiple-opaque-cast.rs:12:21: 12:22
    }

    bb0: {
        _2 = move ((_1.0: Example<'_, T>).0: T); // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:12:18: 12:19
        _3 = ((_1.0: Example<'_, T>).1: &T); // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:12:21: 12:22
        drop(_2) -> bb1;                 // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:13:5: 13:6
    }

    bb1: {
        return;                          // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:13:6: 13:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/closures/issue-102089-multiple-opaque-cast.rs:17:13: 17:13
    }
}
