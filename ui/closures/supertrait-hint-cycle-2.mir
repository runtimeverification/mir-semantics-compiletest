// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn needs_super(_1: impl SuperFn) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/supertrait-hint-cycle-2.rs:14:33: 14:33

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/closures/supertrait-hint-cycle-2.rs:14:34: 14:35
    }

    bb1: {
        return;                          // scope 0 at ui/closures/supertrait-hint-cycle-2.rs:14:35: 14:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/supertrait-hint-cycle-2.rs:16:11: 16:11
    let _1: ();                          // in scope 0 at ui/closures/supertrait-hint-cycle-2.rs:17:5: 17:29
    let mut _2: [closure@ui/closures/supertrait-hint-cycle-2.rs:17:17: 17:25]; // in scope 0 at ui/closures/supertrait-hint-cycle-2.rs:17:17: 17:28

    bb0: {
        _1 = needs_super::<[closure@ui/closures/supertrait-hint-cycle-2.rs:17:17: 17:25]>(move _2) -> bb1; // scope 0 at ui/closures/supertrait-hint-cycle-2.rs:17:5: 17:29
                                         // mir::Constant
                                         // + span: ui/closures/supertrait-hint-cycle-2.rs:17:5: 17:16
                                         // + literal: Const { ty: fn([closure@ui/closures/supertrait-hint-cycle-2.rs:17:17: 17:25]) {needs_super::<[closure@ui/closures/supertrait-hint-cycle-2.rs:17:17: 17:25]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/supertrait-hint-cycle-2.rs:18:2: 18:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/supertrait-hint-cycle-2.rs:17:17: 17:25], _2: u32) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/supertrait-hint-cycle-2.rs:17:26: 17:26

    bb0: {
        return;                          // scope 0 at ui/closures/supertrait-hint-cycle-2.rs:17:28: 17:28
    }
}
