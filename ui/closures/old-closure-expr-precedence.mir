// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: i32;
    let mut _6: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let _18: i32;
    let mut _19: i32;
    let mut _20: bool;
    let mut _23: bool;
    let mut _24: bool;
    let mut _25: i32;
    let mut _26: i32;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug num => const 12_i32;
        let _7: &i32;
        let _8: &i32;
        let _21: &i32;
        let _22: &i32;
        let mut _30: &i32;
        let mut _31: &i32;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _21;
            debug right_val => _22;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
    }

    bb0: {
        _1 = const 12_i32;
        _6 = const true;
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _5 = const 12_i32;
        goto -> bb3;
    }

    bb2: {
        _5 = const 12_i32;
        goto -> bb3;
    }

    bb3: {
        _4 = Sub(move _5, _1);
        _3 = &_4;
        _31 = const _;
        _2 = (move _3, _31);
        _7 = (_2.0: &i32);
        _8 = (_2.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb5: {
        _20 = const true;
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = const 12_i32;
        goto -> bb8;
    }

    bb7: {
        _19 = const 12_i32;
        goto -> bb8;
    }

    bb8: {
        _18 = Sub(const 12_i32, move _19);
        _17 = &_18;
        _30 = const _;
        _16 = (move _17, _30);
        _21 = (_16.0: &i32);
        _22 = (_16.1: &i32);
        _25 = (*_21);
        _26 = (*_22);
        _24 = Eq(move _25, move _26);
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<i32, i32>(move _27, _21, _22, move _29) -> unwind continue;
    }

    bb10: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}
