// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn closure_typer(_1: impl Fn0) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:11:35: 11:35

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:11:36: 11:37
    }

    bb1: {
        return;                          // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:11:37: 11:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:13:11: 13:11
    let _1: ();                          // in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:14:5: 16:7
    let mut _2: [closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27]; // in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 16:6

    bb0: {
        _1 = closure_typer::<[closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27]>(move _2) -> bb1; // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:14:5: 16:7
                                         // mir::Constant
                                         // + span: ui/closures/supertrait-hint-references-assoc-ty.rs:14:5: 14:18
                                         // + literal: Const { ty: fn([closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27]) {closure_typer::<[closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:17:2: 17:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/supertrait-hint-references-assoc-ty.rs:14:19: 14:27], _2: i32) -> () {
    debug x => _2;                       // in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:14:25: 14:26
    let mut _0: ();                      // return place in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:14:28: 14:28
    let mut _3: i64;                     // in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:15:22: 15:30
    let mut _4: i32;                     // in scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:15:22: 15:23
    scope 1 {
    }

    bb0: {
        _4 = _2;                         // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:15:22: 15:23
        _3 = <i32 as Into<i64>>::into(move _4) -> bb1; // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:15:22: 15:30
                                         // mir::Constant
                                         // + span: ui/closures/supertrait-hint-references-assoc-ty.rs:15:24: 15:28
                                         // + literal: Const { ty: fn(i32) -> i64 {<i32 as Into<i64>>::into}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/supertrait-hint-references-assoc-ty.rs:16:6: 16:6
    }
}
