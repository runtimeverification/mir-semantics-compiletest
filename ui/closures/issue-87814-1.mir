// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-87814-1.rs:2:11: 2:11
    let mut _1: std::vec::Vec<()>;       // in scope 0 at ui/closures/issue-87814-1.rs:3:9: 3:23
    let _2: ();                          // in scope 0 at ui/closures/issue-87814-1.rs:4:5: 7:7
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/closures/issue-87814-1.rs:4:5: 4:12
    let mut _4: [closure@ui/closures/issue-87814-1.rs:4:22: 4:26]; // in scope 0 at ui/closures/issue-87814-1.rs:4:22: 7:6
    let mut _5: &mut std::vec::Vec<()>;  // in scope 0 at ui/closures/issue-87814-1.rs:4:22: 7:6
    scope 1 {
        debug schema_all => _1;          // in scope 1 at ui/closures/issue-87814-1.rs:3:9: 3:23
    }

    bb0: {
        _1 = Vec::<()>::new() -> bb1;    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<()> {Vec::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = std::ops::Range::<i32> { start: const 0_i32, end: const 42_i32 }; // scope 1 at ui/closures/issue-87814-1.rs:4:5: 4:12
        _5 = &mut _1;                    // scope 1 at ui/closures/issue-87814-1.rs:4:22: 7:6
        _4 = [closure@ui/closures/issue-87814-1.rs:4:22: 4:26] { schema_all: move _5 }; // scope 1 at ui/closures/issue-87814-1.rs:4:22: 7:6
                                         // closure
                                         // + def_id: DefId(0:4 ~ issue_87814_1[d81a]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn((i32,)),
                                         //     (&mut std::vec::Vec<()>,),
                                         // ]
        _2 = <std::ops::Range<i32> as Iterator>::for_each::<[closure@ui/closures/issue-87814-1.rs:4:22: 4:26]>(move _3, move _4) -> [return: bb2, unwind: bb4]; // scope 1 at ui/closures/issue-87814-1.rs:4:5: 7:7
                                         // mir::Constant
                                         // + span: ui/closures/issue-87814-1.rs:4:13: 4:21
                                         // + literal: Const { ty: fn(std::ops::Range<i32>, [closure@ui/closures/issue-87814-1.rs:4:22: 4:26]) {<std::ops::Range<i32> as Iterator>::for_each::<[closure@ui/closures/issue-87814-1.rs:4:22: 4:26]>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/closures/issue-87814-1.rs:8:1: 8:2
    }

    bb3: {
        return;                          // scope 0 at ui/closures/issue-87814-1.rs:8:2: 8:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/closures/issue-87814-1.rs:8:1: 8:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/closures/issue-87814-1.rs:2:1: 8:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/issue-87814-1.rs:4:22: 4:26], _2: i32) -> () {
    debug _x => _2;                      // in scope 0 at ui/closures/issue-87814-1.rs:4:23: 4:25
    debug schema_all => (*((*_1).0: &mut std::vec::Vec<()>)); // in scope 0 at ui/closures/issue-87814-1.rs:3:9: 3:23
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-87814-1.rs:4:27: 4:27

    bb0: {
        return;                          // scope 0 at ui/closures/issue-87814-1.rs:7:6: 7:6
    }
}
