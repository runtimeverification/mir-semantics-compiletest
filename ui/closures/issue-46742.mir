// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-46742.rs:2:11: 2:11
    let mut _1: i32;                     // in scope 0 at ui/closures/issue-46742.rs:3:18: 8:13
    let mut _2: fn(i32, i32) -> i32;     // in scope 0 at ui/closures/issue-46742.rs:3:18: 8:7
    let mut _3: &str;                    // in scope 0 at ui/closures/issue-46742.rs:3:25: 3:27
    let mut _4: bool;                    // in scope 0 at ui/closures/issue-46742.rs:4:9: 4:12
    let mut _5: bool;                    // in scope 0 at ui/closures/issue-46742.rs:5:9: 5:12
    let mut _6: bool;                    // in scope 0 at ui/closures/issue-46742.rs:6:9: 6:12
    let mut _7: [closure@ui/closures/issue-46742.rs:6:16: 6:21]; // in scope 0 at ui/closures/issue-46742.rs:6:16: 6:36
    let mut _8: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    scope 1 {
    }

    bb0: {
        _3 = const "";                   // scope 0 at ui/closures/issue-46742.rs:3:25: 3:27
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:3:25: 3:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = <str as PartialEq>::eq(_3, const "+") -> bb1; // scope 0 at ui/closures/issue-46742.rs:4:9: 4:12
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:4:9: 4:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:4:9: 4:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _4) -> [0: bb2, otherwise: bb7]; // scope 0 at ui/closures/issue-46742.rs:4:9: 4:12
    }

    bb2: {
        _5 = <str as PartialEq>::eq(_3, const "-") -> bb3; // scope 0 at ui/closures/issue-46742.rs:5:9: 5:12
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:5:9: 5:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:5:9: 5:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _5) -> [0: bb4, otherwise: bb8]; // scope 0 at ui/closures/issue-46742.rs:5:9: 5:12
    }

    bb4: {
        _6 = <str as PartialEq>::eq(_3, const "<") -> bb5; // scope 0 at ui/closures/issue-46742.rs:6:9: 6:12
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:6:9: 6:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:6:9: 6:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _6) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/closures/issue-46742.rs:6:9: 6:12
    }

    bb6: {
        _8 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _2 = <i32 as Add>::add as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/closures/issue-46742.rs:4:16: 4:36
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:4:16: 4:36
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Add>::Output {<i32 as Add>::add}, val: Value(<ZST>) }
        goto -> bb10;                    // scope 0 at ui/closures/issue-46742.rs:4:16: 4:36
    }

    bb8: {
        _2 = <i32 as Sub>::sub as fn(i32, i32) -> i32 (Pointer(ReifyFnPointer)); // scope 0 at ui/closures/issue-46742.rs:5:16: 5:36
                                         // mir::Constant
                                         // + span: ui/closures/issue-46742.rs:5:16: 5:36
                                         // + literal: Const { ty: fn(i32, i32) -> <i32 as Sub>::Output {<i32 as Sub>::sub}, val: Value(<ZST>) }
        goto -> bb10;                    // scope 0 at ui/closures/issue-46742.rs:5:16: 5:36
    }

    bb9: {
        _2 = move _7 as fn(i32, i32) -> i32 (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/closures/issue-46742.rs:6:16: 6:36
        goto -> bb10;                    // scope 0 at ui/closures/issue-46742.rs:6:20: 6:21
    }

    bb10: {
        _1 = move _2(const 5_i32, const 5_i32) -> bb11; // scope 0 at ui/closures/issue-46742.rs:3:18: 8:13
    }

    bb11: {
        return;                          // scope 0 at ui/closures/issue-46742.rs:9:2: 9:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/issue-46742.rs:6:16: 6:21], _2: i32, _3: i32) -> i32 {
    debug a => _2;                       // in scope 0 at ui/closures/issue-46742.rs:6:17: 6:18
    debug b => _3;                       // in scope 0 at ui/closures/issue-46742.rs:6:19: 6:20
    let mut _0: i32;                     // return place in scope 0 at ui/closures/issue-46742.rs:6:22: 6:22
    let mut _4: bool;                    // in scope 0 at ui/closures/issue-46742.rs:6:22: 6:29
    let mut _5: i32;                     // in scope 0 at ui/closures/issue-46742.rs:6:23: 6:24
    let mut _6: i32;                     // in scope 0 at ui/closures/issue-46742.rs:6:27: 6:28

    bb0: {
        _5 = _2;                         // scope 0 at ui/closures/issue-46742.rs:6:23: 6:24
        _6 = _3;                         // scope 0 at ui/closures/issue-46742.rs:6:27: 6:28
        _4 = Lt(move _5, move _6);       // scope 0 at ui/closures/issue-46742.rs:6:22: 6:29
        _0 = move _4 as i32 (IntToInt);  // scope 0 at ui/closures/issue-46742.rs:6:22: 6:36
        return;                          // scope 0 at ui/closures/issue-46742.rs:6:36: 6:36
    }
}
