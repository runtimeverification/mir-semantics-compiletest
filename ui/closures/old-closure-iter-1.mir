// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn iter_vec(_1: Vec<T>, _2: F) -> () {
    debug v => _1;                       // in scope 0 at ui/closures/old-closure-iter-1.rs:3:19: 3:20
    debug f => _2;                       // in scope 0 at ui/closures/old-closure-iter-1.rs:3:31: 3:36
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-1.rs:3:41: 3:41
    let mut _3: std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    let mut _5: std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    let mut _6: std::option::Option<&T>; // in scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    let mut _7: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    let mut _8: &mut std::slice::Iter<'_, T>; // in scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    let mut _9: isize;                   // in scope 0 at ui/closures/old-closure-iter-1.rs:3:62: 3:83
    let _11: ();                         // in scope 0 at ui/closures/old-closure-iter-1.rs:3:76: 3:80
    let mut _12: &mut F;                 // in scope 0 at ui/closures/old-closure-iter-1.rs:3:76: 3:77
    let mut _13: (&T,);                  // in scope 0 at ui/closures/old-closure-iter-1.rs:3:76: 3:80
    let mut _14: &T;                     // in scope 0 at ui/closures/old-closure-iter-1.rs:3:78: 3:79
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
        let _10: &T;                     // in scope 1 at ui/closures/old-closure-iter-1.rs:3:66: 3:67
        scope 2 {
            debug x => _10;              // in scope 2 at ui/closures/old-closure-iter-1.rs:3:66: 3:67
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
        _3 = <&Vec<T> as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb9]; // scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:3:71: 3:73
                                         // + literal: Const { ty: fn(&Vec<T>) -> <&Vec<T> as IntoIterator>::IntoIter {<&Vec<T> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _3;                    // scope 0 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
        goto -> bb2;                     // scope 1 at ui/closures/old-closure-iter-1.rs:3:62: 3:83
    }

    bb2: {
        _8 = &mut _5;                    // scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
        _7 = &mut (*_8);                 // scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
        _6 = <std::slice::Iter<'_, T> as Iterator>::next(move _7) -> [return: bb3, unwind: bb9]; // scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:3:71: 3:73
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, T>) -> Option<<std::slice::Iter<'_, T> as Iterator>::Item> {<std::slice::Iter<'_, T> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
        switchInt(move _9) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    }

    bb4: {
        _10 = ((_6 as Some).0: &T);      // scope 1 at ui/closures/old-closure-iter-1.rs:3:66: 3:67
        _12 = &mut _2;                   // scope 2 at ui/closures/old-closure-iter-1.rs:3:76: 3:77
        _14 = _10;                       // scope 2 at ui/closures/old-closure-iter-1.rs:3:78: 3:79
        _13 = (move _14,);               // scope 2 at ui/closures/old-closure-iter-1.rs:3:76: 3:80
        _11 = <F as FnMut<(&T,)>>::call_mut(move _12, move _13) -> [return: bb12, unwind: bb9]; // scope 2 at ui/closures/old-closure-iter-1.rs:3:76: 3:80
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:3:76: 3:77
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (&T,)) -> <F as FnOnce<(&T,)>>::Output {<F as FnMut<(&T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/closures/old-closure-iter-1.rs:3:71: 3:73
    }

    bb6: {
        drop(_2) -> [return: bb7, unwind: bb10]; // scope 0 at ui/closures/old-closure-iter-1.rs:3:84: 3:85
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/closures/old-closure-iter-1.rs:3:84: 3:85
    }

    bb8: {
        return;                          // scope 0 at ui/closures/old-closure-iter-1.rs:3:85: 3:85
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/closures/old-closure-iter-1.rs:3:84: 3:85
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/closures/old-closure-iter-1.rs:3:84: 3:85
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/closures/old-closure-iter-1.rs:3:1: 3:85
    }

    bb12: {
        goto -> bb2;                     // scope 2 at ui/closures/old-closure-iter-1.rs:3:76: 3:80
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-1.rs:5:15: 5:15
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/closures/old-closure-iter-1.rs:6:9: 6:10
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 7]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 7]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _9: ();                          // in scope 0 at ui/closures/old-closure-iter-1.rs:8:5: 12:7
    let mut _10: std::vec::Vec<i32>;     // in scope 0 at ui/closures/old-closure-iter-1.rs:8:14: 8:15
    let mut _11: [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20]; // in scope 0 at ui/closures/old-closure-iter-1.rs:8:17: 12:6
    let mut _12: &mut i32;               // in scope 0 at ui/closures/old-closure-iter-1.rs:8:17: 12:6
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
    let mut _16: &[&str; 2];             // in scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
    let _17: &[&str; 2];                 // in scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/closures/old-closure-iter-1.rs:13:20: 13:24
    let mut _23: &i32;                   // in scope 0 at ui/closures/old-closure-iter-1.rs:13:20: 13:24
    let _24: &i32;                       // in scope 0 at ui/closures/old-closure-iter-1.rs:13:20: 13:24
    let mut _25: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _27: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _32: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _33: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _35: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _36: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _38: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _40: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: *const [i32; 7];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/closures/old-closure-iter-1.rs:6:9: 6:10
        let mut _8: i32;                 // in scope 1 at ui/closures/old-closure-iter-1.rs:7:9: 7:17
        scope 3 {
            debug odds => _8;            // in scope 3 at ui/closures/old-closure-iter-1.rs:7:9: 7:17
            let _28: &i32;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _29: &i32;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _42: &i32;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _43: &[&str; 2];     // in scope 3 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
            scope 4 {
                debug left_val => _28;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _29;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _34: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _34;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 28_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 7]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _44 = (((_7.0: std::ptr::Unique<[i32; 7]>).0: std::ptr::NonNull<[i32; 7]>).0: *const [i32; 7]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_44) = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32, const 7_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const 0_i32;                // scope 1 at ui/closures/old-closure-iter-1.rs:7:20: 7:21
        _10 = move _1;                   // scope 3 at ui/closures/old-closure-iter-1.rs:8:14: 8:15
        _12 = &mut _8;                   // scope 3 at ui/closures/old-closure-iter-1.rs:8:17: 12:6
        _11 = [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20] { odds: move _12 }; // scope 3 at ui/closures/old-closure-iter-1.rs:8:17: 12:6
                                         // closure
                                         // + def_id: DefId(0:7 ~ old_closure_iter_1[ece0]::main::{closure#0})
                                         // + substs: [
                                         //     i16,
                                         //     for<'a> extern "rust-call" fn((&'a i32,)),
                                         //     (&mut i32,),
                                         // ]
        _9 = iter_vec::<i32, [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20]>(move _10, move _11) -> bb3; // scope 3 at ui/closures/old-closure-iter-1.rs:8:5: 12:7
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:8:5: 8:13
                                         // + literal: Const { ty: fn(Vec<i32>, [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20]) {iter_vec::<i32, [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20]>}, val: Value(<ZST>) }
    }

    bb3: {
        _43 = const _;                   // scope 3 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:13:14: 13:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _17 = _43;                       // scope 3 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
        _16 = _17;                       // scope 3 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 3 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
        _24 = &_8;                       // scope 3 at ui/closures/old-closure-iter-1.rs:13:20: 13:24
        _23 = _24;                       // scope 3 at ui/closures/old-closure-iter-1.rs:13:20: 13:24
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _23) -> bb4; // scope 3 at ui/closures/old-closure-iter-1.rs:13:20: 13:24
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:13:20: 13:24
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = [move _22];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = &_21;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = _print(move _14) -> bb6;   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = &_8;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _27 = _42;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _27);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _28 = (_25.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _29 = (_25.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _32 = (*_28);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _33 = const 4_i32;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _31 = Eq(move _32, move _33);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _30 = Not(move _31);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _30) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _34 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _36 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _35 = core::panicking::assert_failed::<i32, i32>(move _36, move _37, move _39, move _41); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/closures/old-closure-iter-1.rs:15:2: 15:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/closures/old-closure-iter-1.rs:14:22: 14:23

    bb0: {
        _1 = const 4_i32;                // scope 0 at ui/closures/old-closure-iter-1.rs:14:22: 14:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
    let mut _1: [&str; 2];               // in scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-iter-1.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
        return;                          // scope 0 at ui/closures/old-closure-iter-1.rs:13:14: 13:18
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/closures/old-closure-iter-1.rs:8:17: 8:20], _2: &i32) -> () {
    debug i => _2;                       // in scope 0 at ui/closures/old-closure-iter-1.rs:8:18: 8:19
    debug odds => (*((*_1).0: &mut i32)); // in scope 0 at ui/closures/old-closure-iter-1.rs:7:9: 7:17
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-iter-1.rs:8:21: 8:21
    let mut _3: i32;                     // in scope 0 at ui/closures/old-closure-iter-1.rs:9:12: 9:18
    let mut _4: i32;                     // in scope 0 at ui/closures/old-closure-iter-1.rs:9:12: 9:14
    let mut _5: (i32, bool);             // in scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
    let mut _6: &mut i32;                // in scope 0 at ui/closures/old-closure-iter-1.rs:8:17: 12:6
    let mut _7: &mut i32;                // in scope 0 at ui/closures/old-closure-iter-1.rs:8:17: 12:6
    let mut _8: &mut i32;                // in scope 0 at ui/closures/old-closure-iter-1.rs:8:17: 12:6

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/closures/old-closure-iter-1.rs:9:12: 9:14
        _3 = Rem(move _4, const 2_i32);  // scope 0 at ui/closures/old-closure-iter-1.rs:9:12: 9:18
        switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 0 at ui/closures/old-closure-iter-1.rs:9:12: 9:23
    }

    bb1: {
        _6 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
        _5 = CheckedAdd((*_6), const 1_i32); // scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
        _7 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_7), const 1_i32) -> bb2; // scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
    }

    bb2: {
        _8 = deref_copy ((*_1).0: &mut i32); // scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
        (*_8) = move (_5.0: i32);        // scope 0 at ui/closures/old-closure-iter-1.rs:10:13: 10:22
        goto -> bb3;                     // scope 0 at ui/closures/old-closure-iter-1.rs:9:9: 11:10
    }

    bb3: {
        return;                          // scope 0 at ui/closures/old-closure-iter-1.rs:12:6: 12:6
    }
}
