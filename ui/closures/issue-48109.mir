// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn useful(_1: usize) -> usize {
    debug i => _1;                       // in scope 0 at ui/closures/issue-48109.rs:2:11: 2:12
    let mut _0: usize;                   // return place in scope 0 at ui/closures/issue-48109.rs:2:24: 2:29

    bb0: {
        _0 = _1;                         // scope 0 at ui/closures/issue-48109.rs:3:5: 3:6
        return;                          // scope 0 at ui/closures/issue-48109.rs:4:2: 4:2
    }
}

fn useful2(_1: usize) -> usize {
    debug i => _1;                       // in scope 0 at ui/closures/issue-48109.rs:6:12: 6:13
    let mut _0: usize;                   // return place in scope 0 at ui/closures/issue-48109.rs:6:25: 6:30

    bb0: {
        _0 = _1;                         // scope 0 at ui/closures/issue-48109.rs:7:5: 7:6
        return;                          // scope 0 at ui/closures/issue-48109.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/issue-48109.rs:10:11: 10:11
    let mut _1: std::slice::Iter<'_, fn(usize) -> usize>; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _2: &[fn(usize) -> usize; 3]; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _3: std::slice::Iter<'_, fn(usize) -> usize>; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _4: std::option::Option<&fn(usize) -> usize>; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _5: &mut std::slice::Iter<'_, fn(usize) -> usize>; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _6: &mut std::slice::Iter<'_, fn(usize) -> usize>; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _7: isize;                   // in scope 0 at ui/closures/issue-48109.rs:11:5: 13:6
    let _9: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _10: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str];                // in scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
    let mut _12: &[&str; 2];             // in scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
    let _13: &[&str; 2];                 // in scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/closures/issue-48109.rs:12:24: 12:28
    let mut _19: &usize;                 // in scope 0 at ui/closures/issue-48109.rs:12:24: 12:28
    let _20: &usize;                     // in scope 0 at ui/closures/issue-48109.rs:12:24: 12:28
    let _21: usize;                      // in scope 0 at ui/closures/issue-48109.rs:12:24: 12:28
    let mut _22: fn(usize) -> usize;     // in scope 0 at ui/closures/issue-48109.rs:12:24: 12:25
    let mut _24: &[fn(usize) -> usize; 3]; // in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
        let _8: &fn(usize) -> usize;     // in scope 1 at ui/closures/issue-48109.rs:11:9: 11:10
        scope 2 {
            debug f => _8;               // in scope 2 at ui/closures/issue-48109.rs:11:9: 11:10
            let mut _23: &[&str; 2];     // in scope 2 at ui/closures/issue-48109.rs:12:18: 12:22
        }
    }

    bb0: {
        _24 = const _;                   // scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:11:14: 11:39
                                         // + literal: Const { ty: &[fn(usize) -> usize; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _2 = _24;                        // scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
        _1 = <&[fn(usize) -> usize; 3] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:11:14: 11:39
                                         // + literal: Const { ty: fn(&[fn(usize) -> usize; 3]) -> <&[fn(usize) -> usize; 3] as IntoIterator>::IntoIter {<&[fn(usize) -> usize; 3] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
        goto -> bb2;                     // scope 1 at ui/closures/issue-48109.rs:11:5: 13:6
    }

    bb2: {
        _6 = &mut _3;                    // scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
        _5 = &mut (*_6);                 // scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
        _4 = <std::slice::Iter<'_, fn(usize) -> usize> as Iterator>::next(move _5) -> bb3; // scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:11:14: 11:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, fn(usize) -> usize>) -> Option<<std::slice::Iter<'_, fn(usize) -> usize> as Iterator>::Item> {<std::slice::Iter<'_, fn(usize) -> usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_4);           // scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
    }

    bb4: {
        _8 = ((_4 as Some).0: &fn(usize) -> usize); // scope 1 at ui/closures/issue-48109.rs:11:9: 11:10
        _23 = const _;                   // scope 2 at ui/closures/issue-48109.rs:12:18: 12:22
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:12:18: 12:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _13 = _23;                       // scope 2 at ui/closures/issue-48109.rs:12:18: 12:22
        _12 = _13;                       // scope 2 at ui/closures/issue-48109.rs:12:18: 12:22
        _11 = move _12 as &[&str] (Pointer(Unsize)); // scope 2 at ui/closures/issue-48109.rs:12:18: 12:22
        _22 = (*_8);                     // scope 2 at ui/closures/issue-48109.rs:12:24: 12:25
        _21 = move _22(const 6_usize) -> bb7; // scope 2 at ui/closures/issue-48109.rs:12:24: 12:28
    }

    bb5: {
        unreachable;                     // scope 1 at ui/closures/issue-48109.rs:11:14: 11:39
    }

    bb6: {
        return;                          // scope 0 at ui/closures/issue-48109.rs:14:2: 14:2
    }

    bb7: {
        _20 = &_21;                      // scope 2 at ui/closures/issue-48109.rs:12:24: 12:28
        _19 = _20;                       // scope 2 at ui/closures/issue-48109.rs:12:24: 12:28
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _19) -> bb8; // scope 2 at ui/closures/issue-48109.rs:12:24: 12:28
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:12:24: 12:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = [move _18];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = move _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> bb9; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _9 = _print(move _10) -> bb2;    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
    let mut _1: [&str; 2];               // in scope 0 at ui/closures/issue-48109.rs:12:18: 12:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:12:18: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:12:18: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
        return;                          // scope 0 at ui/closures/issue-48109.rs:12:18: 12:22
    }
}

promoted[1] in main: &[fn(usize) -> usize; 3] = {
    let mut _0: &[fn(usize) -> usize; 3]; // return place in scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    let mut _1: [fn(usize) -> usize; 3]; // in scope 0 at ui/closures/issue-48109.rs:11:15: 11:39
    let mut _2: fn(usize) -> usize;      // in scope 0 at ui/closures/issue-48109.rs:11:16: 11:22
    let mut _3: fn(usize) -> usize;      // in scope 0 at ui/closures/issue-48109.rs:11:24: 11:31
    let mut _4: fn(usize) -> usize;      // in scope 0 at ui/closures/issue-48109.rs:11:33: 11:38
    let mut _5: [closure@ui/closures/issue-48109.rs:11:33: 11:36]; // in scope 0 at ui/closures/issue-48109.rs:11:33: 11:38

    bb0: {
        _2 = useful as fn(usize) -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/closures/issue-48109.rs:11:16: 11:22
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:11:16: 11:22
                                         // + literal: Const { ty: fn(usize) -> usize {useful}, val: Value(<ZST>) }
        _3 = useful2 as fn(usize) -> usize (Pointer(ReifyFnPointer)); // scope 0 at ui/closures/issue-48109.rs:11:24: 11:31
                                         // mir::Constant
                                         // + span: ui/closures/issue-48109.rs:11:24: 11:31
                                         // + literal: Const { ty: fn(usize) -> usize {useful2}, val: Value(<ZST>) }
        _5 = [closure@ui/closures/issue-48109.rs:11:33: 11:36]; // scope 0 at ui/closures/issue-48109.rs:11:33: 11:38
                                         // closure
                                         // + def_id: DefId(0:6 ~ issue_48109[7d90]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((usize,)) -> usize,
                                         //     (),
                                         // ]
        _4 = move _5 as fn(usize) -> usize (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/closures/issue-48109.rs:11:33: 11:38
        _1 = [move _2, move _3, move _4]; // scope 0 at ui/closures/issue-48109.rs:11:15: 11:39
        _0 = &_1;                        // scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
        return;                          // scope 0 at ui/closures/issue-48109.rs:11:14: 11:39
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/issue-48109.rs:11:33: 11:36], _2: usize) -> usize {
    debug x => _2;                       // in scope 0 at ui/closures/issue-48109.rs:11:34: 11:35
    let mut _0: usize;                   // return place in scope 0 at ui/closures/issue-48109.rs:11:37: 11:37

    bb0: {
        _0 = _2;                         // scope 0 at ui/closures/issue-48109.rs:11:37: 11:38
        return;                          // scope 0 at ui/closures/issue-48109.rs:11:38: 11:38
    }
}
