// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn useful(_1: usize) -> usize {
    debug i => _1;
    let mut _0: usize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn useful2(_1: usize) -> usize {
    debug i => _1;
    let mut _0: usize;

    bb0: {
        _0 = _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::slice::Iter<'_, fn(usize) -> usize>;
    let mut _2: std::slice::Iter<'_, fn(usize) -> usize>;
    let mut _3: std::option::Option<&fn(usize) -> usize>;
    let mut _4: &mut std::slice::Iter<'_, fn(usize) -> usize>;
    let mut _5: isize;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    let _15: usize;
    let mut _16: fn(usize) -> usize;
    let mut _18: &[fn(usize) -> usize; 3];
    scope 1 {
        debug iter => _2;
        let _6: &fn(usize) -> usize;
        scope 2 {
            debug f => _6;
            let mut _17: &[&str; 2];
        }
    }

    bb0: {
        _18 = const _;
        _1 = <&[fn(usize) -> usize; 3] as IntoIterator>::into_iter(_18) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _1;
        goto -> bb2;
    }

    bb2: {
        _4 = &mut _2;
        _3 = <std::slice::Iter<'_, fn(usize) -> usize> as Iterator>::next(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _6 = ((_3 as Some).0: &fn(usize) -> usize);
        _17 = const _;
        _9 = _17 as &[&str] (Pointer(Unsize));
        _16 = (*_6);
        _15 = move _16(const 6_usize) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _14 = &_15;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb8, unwind continue];
    }

    bb8: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _7 = _print(move _8) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[fn(usize) -> usize; 3] = {
    let mut _0: &[fn(usize) -> usize; 3];
    let mut _1: [fn(usize) -> usize; 3];
    let mut _2: fn(usize) -> usize;
    let mut _3: fn(usize) -> usize;
    let mut _4: fn(usize) -> usize;
    let mut _5: [closure@ui/closures/issue-48109.rs:11:33: 11:36];

    bb0: {
        _2 = useful as fn(usize) -> usize (Pointer(ReifyFnPointer));
        _3 = useful2 as fn(usize) -> usize (Pointer(ReifyFnPointer));
        _5 = [closure@ui/closures/issue-48109.rs:11:33: 11:36];
        _4 = move _5 as fn(usize) -> usize (Pointer(ClosureFnPointer(Normal)));
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/issue-48109.rs:11:33: 11:36], _2: usize) -> usize {
    debug x => _2;
    let mut _0: usize;

    bb0: {
        _0 = _2;
        return;
    }
}
