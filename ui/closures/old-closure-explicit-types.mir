// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-explicit-types.rs:3:15: 3:15
    let _1: ();                          // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:5: 5:75
    let mut _2: std::string::String;     // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:12: 5:29
    let mut _3: &str;                    // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:12: 5:29
    let _4: &str;                        // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:12: 5:17
    let mut _5: [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50]; // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:31: 5:74

    bb0: {
        _4 = const "foo";                // scope 0 at ui/closures/old-closure-explicit-types.rs:5:12: 5:17
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:12: 5:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/closures/old-closure-explicit-types.rs:5:12: 5:29
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/closures/old-closure-explicit-types.rs:5:12: 5:29
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:18: 5:27
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = as_buf::<(), [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50]>(move _2, move _5) -> bb2; // scope 0 at ui/closures/old-closure-explicit-types.rs:5:5: 5:75
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:5: 5:11
                                         // + literal: Const { ty: fn(String, [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50]) {as_buf::<(), [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/closures/old-closure-explicit-types.rs:6:2: 6:2
    }
}

fn as_buf(_1: String, _2: F) -> T {
    debug s => _1;                       // in scope 0 at ui/closures/old-closure-explicit-types.rs:4:21: 4:22
    debug f => _2;                       // in scope 0 at ui/closures/old-closure-explicit-types.rs:4:32: 4:33
    let mut _0: T;                       // return place in scope 0 at ui/closures/old-closure-explicit-types.rs:4:41: 4:42
    let mut _3: F;                       // in scope 0 at ui/closures/old-closure-explicit-types.rs:4:74: 4:75
    let mut _4: (std::string::String,);  // in scope 0 at ui/closures/old-closure-explicit-types.rs:4:74: 4:78
    let mut _5: std::string::String;     // in scope 0 at ui/closures/old-closure-explicit-types.rs:4:76: 4:77

    bb0: {
        _3 = move _2;                    // scope 0 at ui/closures/old-closure-explicit-types.rs:4:74: 4:75
        _5 = move _1;                    // scope 0 at ui/closures/old-closure-explicit-types.rs:4:76: 4:77
        _4 = (move _5,);                 // scope 0 at ui/closures/old-closure-explicit-types.rs:4:74: 4:78
        _0 = <F as FnOnce<(String,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/closures/old-closure-explicit-types.rs:4:74: 4:78
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:4:74: 4:75
                                         // + literal: Const { ty: extern "rust-call" fn(F, (String,)) -> <F as FnOnce<(String,)>>::Output {<F as FnOnce<(String,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/closures/old-closure-explicit-types.rs:4:80: 4:80
    }
}

fn main::{closure#0}(_1: [closure@ui/closures/old-closure-explicit-types.rs:5:31: 5:50], _2: String) -> () {
    debug foo => _2;                     // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:32: 5:35
    let mut _0: ();                      // return place in scope 0 at ui/closures/old-closure-explicit-types.rs:5:48: 5:50
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
    let mut _6: &[&str; 2];              // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
    let _7: &[&str; 2];                  // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:68: 5:71
    let mut _13: &std::string::String;   // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:68: 5:71
    let _14: &std::string::String;       // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:68: 5:71
    let mut _15: &[&str; 2];             // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66

    bb0: {
        _15 = const _;                   // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:62: 5:66
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
        _6 = _7;                         // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
        _14 = &_2;                       // scope 0 at ui/closures/old-closure-explicit-types.rs:5:68: 5:71
        _13 = _14;                       // scope 0 at ui/closures/old-closure-explicit-types.rs:5:68: 5:71
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _13) -> [return: bb1, unwind: bb5]; // scope 0 at ui/closures/old-closure-explicit-types.rs:5:68: 5:71
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:68: 5:71
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> [return: bb3, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_2) -> bb4;                 // scope 0 at ui/closures/old-closure-explicit-types.rs:5:73: 5:74
    }

    bb4: {
        return;                          // scope 0 at ui/closures/old-closure-explicit-types.rs:5:74: 5:74
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/closures/old-closure-explicit-types.rs:5:73: 5:74
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/closures/old-closure-explicit-types.rs:5:31: 5:74
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
    let mut _1: [&str; 2];               // in scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:62: 5:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/closures/old-closure-explicit-types.rs:5:62: 5:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
        return;                          // scope 0 at ui/closures/old-closure-explicit-types.rs:5:62: 5:66
    }
}
