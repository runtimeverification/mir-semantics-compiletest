// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/closures/diverging-closure.rs:5:11: 5:11
    let _1: [closure@ui/closures/diverging-closure.rs:6:16: 6:23]; // in scope 0 at ui/closures/diverging-closure.rs:6:9: 6:13
    let _2: !;                           // in scope 0 at ui/closures/diverging-closure.rs:9:5: 9:11
    let mut _3: &[closure@ui/closures/diverging-closure.rs:6:16: 6:23]; // in scope 0 at ui/closures/diverging-closure.rs:9:5: 9:9
    let mut _4: ();                      // in scope 0 at ui/closures/diverging-closure.rs:9:5: 9:11
    scope 1 {
        debug func => _1;                // in scope 1 at ui/closures/diverging-closure.rs:6:9: 6:13
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/closures/diverging-closure.rs:9:5: 9:9
        _2 = <[closure@ui/closures/diverging-closure.rs:6:16: 6:23] as Fn<()>>::call(move _3, move _4); // scope 1 at ui/closures/diverging-closure.rs:9:5: 9:11
                                         // mir::Constant
                                         // + span: ui/closures/diverging-closure.rs:9:5: 9:9
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/closures/diverging-closure.rs:6:16: 6:23], ()) -> <[closure@ui/closures/diverging-closure.rs:6:16: 6:23] as FnOnce<()>>::Output {<[closure@ui/closures/diverging-closure.rs:6:16: 6:23] as Fn<()>>::call}, val: Value(<ZST>) }
    }
}

fn main::{closure#0}(_1: &[closure@ui/closures/diverging-closure.rs:6:16: 6:23]) -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/closures/diverging-closure.rs:6:22: 6:23
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "oops"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/closures/diverging-closure.rs:7:16: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
