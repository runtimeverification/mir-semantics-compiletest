// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>);
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>;
    let _3: std::result::Result<i32, std::num::ParseIntError>;
    let _4: &std::result::Result<i32, std::num::ParseIntError>;
    let _5: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &std::result::Result<i32, std::num::ParseIntError>;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _3 = parse() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _11 = const _;
        _1 = (move _2, _11);
        _4 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>);
        _5 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>);
        _7 = <Result<i32, ParseIntError> as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::result::Result<i32, std::num::ParseIntError>;

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 1_i32);
        _0 = &_1;
        return;
    }
}

fn parse() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>;
    let mut _1: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>;
    let mut _2: std::result::Result<i32, std::num::ParseIntError>;
    let _3: &str;
    let mut _4: isize;
    let _5: std::result::Result<std::convert::Infallible, std::num::ParseIntError>;
    let _6: i32;
    scope 1 {
        debug residual => _5;
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;
        scope 4 {
        }
    }

    bb0: {
        _3 = const "1";
        _2 = core::str::<impl str>::parse::<i32>(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = <Result<i32, ParseIntError> as Try>::branch(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = discriminant(_1);
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb4];
    }

    bb3: {
        _6 = ((_1 as Continue).0: i32);
        _0 = Result::<i32, ParseIntError>::Ok(_6);
        goto -> bb6;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _5 = move ((_1 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>);
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

const val: char = {
    let mut _0: char;

    bb0: {
        _0 = const 'a';
        return;
    }
}

const err: char = {
    let mut _0: char;

    bb0: {
        _0 = const 'b';
        return;
    }
}
