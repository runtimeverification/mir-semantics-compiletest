// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/try-operator-hygiene.rs:17:11: 17:11
    let mut _1: (&std::result::Result<i32, std::num::ParseIntError>, &std::result::Result<i32, std::num::ParseIntError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator-hygiene.rs:18:16: 18:23
    let mut _4: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = parse() -> bb1;             // scope 0 at ui/try-operator-hygiene.rs:18:16: 18:23
                                         // mir::Constant
                                         // + span: ui/try-operator-hygiene.rs:18:16: 18:21
                                         // + literal: Const { ty: fn() -> Result<i32, ParseIntError> {parse}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Result<i32, ParseIntError>, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &std::result::Result<i32, std::num::ParseIntError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <Result<i32, ParseIntError> as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>) -> bool {<Result<i32, ParseIntError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<i32, ParseIntError>, &'b Result<i32, ParseIntError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<i32, ParseIntError>, Result<i32, ParseIntError>>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/try-operator-hygiene.rs:19:2: 19:2
    }
}

promoted[0] in main: &Result<i32, ParseIntError> = {
    let mut _0: &std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator-hygiene.rs:18:25: 18:30

    bb0: {
        _1 = Result::<i32, ParseIntError>::Ok(const 1_i32); // scope 0 at ui/try-operator-hygiene.rs:18:25: 18:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn parse() -> Result<i32, ParseIntError> {
    let mut _0: std::result::Result<i32, std::num::ParseIntError>; // return place in scope 0 at ui/try-operator-hygiene.rs:21:15: 21:41
    let mut _1: i32;                     // in scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
    let mut _2: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, std::num::ParseIntError>, i32>; // in scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
    let mut _3: std::result::Result<i32, std::num::ParseIntError>; // in scope 0 at ui/try-operator-hygiene.rs:25:8: 25:26
    let mut _4: &str;                    // in scope 0 at ui/try-operator-hygiene.rs:25:8: 25:26
    let _5: &str;                        // in scope 0 at ui/try-operator-hygiene.rs:25:8: 25:11
    let mut _6: isize;                   // in scope 0 at ui/try-operator-hygiene.rs:25:26: 25:27
    let _7: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator-hygiene.rs:25:26: 25:27
    let mut _8: std::result::Result<std::convert::Infallible, std::num::ParseIntError>; // in scope 0 at ui/try-operator-hygiene.rs:25:26: 25:27
    let _9: i32;                         // in scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
    scope 1 {
        debug residual => _7;            // in scope 1 at ui/try-operator-hygiene.rs:25:26: 25:27
        scope 2 {
        }
    }
    scope 3 {
        debug val => _9;                 // in scope 3 at ui/try-operator-hygiene.rs:25:8: 25:27
        scope 4 {
        }
    }

    bb0: {
        _5 = const "1";                  // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:11
                                         // mir::Constant
                                         // + span: ui/try-operator-hygiene.rs:25:8: 25:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:26
        _3 = core::str::<impl str>::parse::<i32>(move _4) -> bb1; // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:26
                                         // mir::Constant
                                         // + span: ui/try-operator-hygiene.rs:25:12: 25:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<i32, <i32 as FromStr>::Err> {core::str::<impl str>::parse::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Result<i32, ParseIntError> as Try>::branch(move _3) -> bb2; // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
                                         // mir::Constant
                                         // + span: ui/try-operator-hygiene.rs:25:8: 25:27
                                         // + literal: Const { ty: fn(Result<i32, ParseIntError>) -> ControlFlow<<Result<i32, ParseIntError> as Try>::Residual, <Result<i32, ParseIntError> as Try>::Output> {<Result<i32, ParseIntError> as Try>::branch}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
    }

    bb3: {
        _9 = ((_2 as Continue).0: i32);  // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
        _1 = _9;                         // scope 4 at ui/try-operator-hygiene.rs:25:8: 25:27
        _0 = Result::<i32, ParseIntError>::Ok(move _1); // scope 0 at ui/try-operator-hygiene.rs:25:5: 25:28
        goto -> bb6;                     // scope 0 at ui/try-operator-hygiene.rs:26:2: 26:2
    }

    bb4: {
        unreachable;                     // scope 0 at ui/try-operator-hygiene.rs:25:8: 25:27
    }

    bb5: {
        _7 = move ((_2 as Break).0: std::result::Result<std::convert::Infallible, std::num::ParseIntError>); // scope 0 at ui/try-operator-hygiene.rs:25:26: 25:27
        _8 = move _7;                    // scope 2 at ui/try-operator-hygiene.rs:25:26: 25:27
        _0 = <Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual(move _8) -> bb6; // scope 2 at ui/try-operator-hygiene.rs:25:8: 25:27
                                         // mir::Constant
                                         // + span: ui/try-operator-hygiene.rs:25:26: 25:27
                                         // + literal: Const { ty: fn(Result<Infallible, ParseIntError>) -> Result<i32, ParseIntError> {<Result<i32, ParseIntError> as FromResidual<Result<Infallible, ParseIntError>>>::from_residual}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/try-operator-hygiene.rs:26:2: 26:2
    }
}

const val: char = {
    let mut _0: char;                    // return place in scope 0 at ui/try-operator-hygiene.rs:22:16: 22:20

    bb0: {
        _0 = const 'a';                  // scope 0 at ui/try-operator-hygiene.rs:22:23: 22:26
        return;                          // scope 0 at ui/try-operator-hygiene.rs:22:5: 22:27
    }
}

const err: char = {
    let mut _0: char;                    // return place in scope 0 at ui/try-operator-hygiene.rs:23:16: 23:20

    bb0: {
        _0 = const 'b';                  // scope 0 at ui/try-operator-hygiene.rs:23:23: 23:26
        return;                          // scope 0 at ui/try-operator-hygiene.rs:23:5: 23:27
    }
}
