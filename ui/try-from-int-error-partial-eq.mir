// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: u32;
    let _3: bool;
    let mut _4: &std::result::Result<u8, std::num::TryFromIntError>;
    scope 1 {
        debug x => const 125_u32;
        let _2: std::result::Result<u8, std::num::TryFromIntError>;
        scope 2 {
            debug y => _2;
            let mut _5: &std::result::Result<u8, std::num::TryFromIntError>;
        }
    }

    bb0: {
        _1 = const 125_u32;
        _2 = <u8 as TryFrom<u32>>::try_from(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_2;
        _5 = const _;
        _3 = <Result<u8, TryFromIntError> as PartialEq>::eq(move _4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &Result<u8, TryFromIntError> = {
    let mut _0: &std::result::Result<u8, std::num::TryFromIntError>;
    let mut _1: std::result::Result<u8, std::num::TryFromIntError>;

    bb0: {
        _1 = Result::<u8, TryFromIntError>::Ok(const 125_u8);
        _0 = &_1;
        return;
    }
}
