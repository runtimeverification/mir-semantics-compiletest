// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coherence/coherence-multidispatch-tuple.rs:15:1: 15:26>::get(_1: &(T, T)) -> usize {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:16:12: 16:17
    let mut _0: usize;                   // return place in scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:16:22: 16:27

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:16:30: 16:31
        return;                          // scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:16:33: 16:33
    }
}

fn <impl at ui/coherence/coherence-multidispatch-tuple.rs:19:1: 19:31>::get(_1: &(usize, isize)) -> usize {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:20:12: 20:17
    let mut _0: usize;                   // return place in scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:20:22: 20:27

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:20:30: 20:31
        return;                          // scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:20:33: 20:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/coherence/coherence-multidispatch-tuple.rs:24:2: 24:2
    }
}
