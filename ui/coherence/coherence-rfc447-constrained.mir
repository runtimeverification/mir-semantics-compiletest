// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coherence/coherence-rfc447-constrained.rs:16:1: 16:17>::name() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "u64";
        return;
    }
}

fn <impl at ui/coherence/coherence-rfc447-constrained.rs:17:1: 17:23>::name() -> &str {
    let mut _0: &str;

    bb0: {
        _0 = const "Bar";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let _4: &&str;
    let _5: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: (&&str, &&str);
    let mut _12: &&str;
    let _13: &str;
    let _14: &&str;
    let _15: &&str;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: &&str;
    let mut _22: &&str;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }
    scope 3 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 4 {
            debug kind => _18;
        }
    }

    bb0: {
        _3 = <u64 as Foo>::name() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _22 = const _;
        _1 = (move _2, _22);
        _4 = (_1.0: &&str);
        _5 = (_1.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        _13 = <u32 as Foo>::name() -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = &_13;
        _21 = const _;
        _11 = (move _12, _21);
        _14 = (_11.0: &&str);
        _15 = (_11.1: &&str);
        _17 = <&str as PartialEq>::eq(_14, _15) -> [return: bb6, unwind continue];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<&str, &str>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Bar";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "u64";
        _0 = &_1;
        return;
    }
}
