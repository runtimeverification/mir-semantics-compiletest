// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coherence/coherence-impl-in-fn.rs:5:15: 5:15

    bb0: {
        return;                          // scope 0 at ui/coherence/coherence-impl-in-fn.rs:14:2: 14:2
    }
}

fn main::<impl at ui/coherence/coherence-impl-in-fn.rs:6:20: 6:25>::clone(_1: &x) -> x {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:6:20: 6:25
    let mut _0: main::x;                 // return place in scope 0 at ui/coherence/coherence-impl-in-fn.rs:6:20: 6:25

    bb0: {
        return;                          // scope 0 at ui/coherence/coherence-impl-in-fn.rs:6:25: 6:25
    }
}

fn main::<impl at ui/coherence/coherence-impl-in-fn.rs:8:5: 8:37>::eq(_1: &x, _2: &x) -> bool {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:9:15: 9:20
    debug other => _2;                   // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:9:22: 9:27
    let mut _0: bool;                    // return place in scope 0 at ui/coherence/coherence-impl-in-fn.rs:9:36: 9:40

    bb0: {
        _0 = const true;                 // scope 0 at ui/coherence/coherence-impl-in-fn.rs:10:13: 10:50
        return;                          // scope 0 at ui/coherence/coherence-impl-in-fn.rs:11:10: 11:10
    }
}

fn main::<impl at ui/coherence/coherence-impl-in-fn.rs:8:5: 8:37>::ne(_1: &x, _2: &x) -> bool {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:15: 12:20
    debug other => _2;                   // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:22: 12:27
    let mut _0: bool;                    // return place in scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:36: 12:40
    let mut _3: bool;                    // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:44: 12:61
    let mut _4: &main::x;                // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:44: 12:61
    let mut _5: &main::x;                // in scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:55: 12:60

    bb0: {
        _4 = _1;                         // scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:44: 12:61
        _5 = _2;                         // scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:55: 12:60
        _3 = <x as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:44: 12:61
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-impl-in-fn.rs:12:52: 12:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a x, &'b x) -> bool {<x as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:43: 12:61
        return;                          // scope 0 at ui/coherence/coherence-impl-in-fn.rs:12:63: 12:63
    }
}
