// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/coherence/coherence-where-clause.rs:10:1: 10:22>::get(_1: &T) -> T {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:13:12: 13:17
    let mut _0: T;                       // return place in scope 0 at ui/coherence/coherence-where-clause.rs:13:22: 13:23

    bb0: {
        _0 = <T as Default>::default() -> bb1; // scope 0 at ui/coherence/coherence-where-clause.rs:14:9: 14:27
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:14:9: 14:25
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:15:6: 15:6
    }
}

fn <impl at ui/coherence/coherence-where-clause.rs:18:10: 18:15>::clone(_1: &MyType) -> MyType {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:18:10: 18:15
    let mut _0: MyType;                  // return place in scope 0 at ui/coherence/coherence-where-clause.rs:18:10: 18:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/coherence/coherence-where-clause.rs:18:10: 18:15
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:18:15: 18:15
    }
}

fn <impl at ui/coherence/coherence-where-clause.rs:18:23: 18:28>::fmt(_1: &MyType, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
    debug f => _2;                       // in scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
    let mut _4: &str;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
    let _5: &str;                        // in scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
    let mut _6: &str;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
    let _7: &str;                        // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
    let mut _9: &&usize;                 // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
    let _10: &&usize;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
    let _11: &usize;                     // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
        _5 = const "MyType";             // scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:18:23: 18:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
        _7 = const "dummy";              // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:20:5: 20:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _11 = &((*_1).0: usize);         // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _10 = &_11;                      // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _9 = _10;                        // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/coherence/coherence-where-clause.rs:18:23: 18:28
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:18:23: 18:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:18:28: 18:28
    }
}

fn <impl at ui/coherence/coherence-where-clause.rs:18:30: 18:39>::eq(_1: &MyType, _2: &MyType) -> bool {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:18:30: 18:39
    debug other => _2;                   // in scope 0 at ui/coherence/coherence-where-clause.rs:18:30: 18:39
    let mut _0: bool;                    // return place in scope 0 at ui/coherence/coherence-where-clause.rs:18:30: 18:39
    let mut _3: usize;                   // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
    let mut _4: usize;                   // in scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17

    bb0: {
        _3 = ((*_1).0: usize);           // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _4 = ((*_2).0: usize);           // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        _0 = Eq(move _3, move _4);       // scope 0 at ui/coherence/coherence-where-clause.rs:20:5: 20:17
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:18:39: 18:39
    }
}

fn <impl at ui/coherence/coherence-where-clause.rs:23:1: 23:24>::get(_1: &MyType) -> MyType {
    debug self => _1;                    // in scope 0 at ui/coherence/coherence-where-clause.rs:24:12: 24:17
    let mut _0: MyType;                  // return place in scope 0 at ui/coherence/coherence-where-clause.rs:24:22: 24:28
    let mut _2: &MyType;                 // in scope 0 at ui/coherence/coherence-where-clause.rs:24:31: 24:46

    bb0: {
        _2 = _1;                         // scope 0 at ui/coherence/coherence-where-clause.rs:24:31: 24:46
        _0 = <MyType as Clone>::clone(move _2) -> bb1; // scope 0 at ui/coherence/coherence-where-clause.rs:24:31: 24:46
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:24:39: 24:44
                                         // + literal: Const { ty: for<'a> fn(&'a MyType) -> MyType {<MyType as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:24:48: 24:48
    }
}

fn test_eq(_1: M, _2: M) -> () {
    debug m => _1;                       // in scope 0 at ui/coherence/coherence-where-clause.rs:27:15: 27:16
    debug n => _2;                       // in scope 0 at ui/coherence/coherence-where-clause.rs:27:21: 27:22
    let mut _0: ();                      // return place in scope 0 at ui/coherence/coherence-where-clause.rs:28:1: 28:1
    let mut _3: (&M, &M);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &M;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: M;                           // in scope 0 at ui/coherence/coherence-where-clause.rs:30:16: 30:23
    let mut _6: &M;                      // in scope 0 at ui/coherence/coherence-where-clause.rs:30:16: 30:23
    let mut _7: &M;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &M;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &M;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &M;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &M;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &M;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &M;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &M;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &M;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = &_1;                        // scope 0 at ui/coherence/coherence-where-clause.rs:30:16: 30:23
        _5 = <M as MyTrait>::get(move _6) -> [return: bb1, unwind: bb9]; // scope 0 at ui/coherence/coherence-where-clause.rs:30:16: 30:23
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:30:18: 30:21
                                         // + literal: Const { ty: for<'a> fn(&'a M) -> M {<M as MyTrait>::get}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &M);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &M);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <M as PartialEq>::eq(move _12, move _13) -> [return: bb2, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a M, &'b M) -> bool {<M as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<M, M>(move _16, move _17, move _19, move _21) -> bb8; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a M, &'b M, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<M, M>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb10]; // scope 0 at ui/coherence/coherence-where-clause.rs:31:1: 31:2
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/coherence/coherence-where-clause.rs:31:1: 31:2
    }

    bb7: {
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:31:2: 31:2
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9 (cleanup): {
        drop(_2) -> bb10;                // scope 0 at ui/coherence/coherence-where-clause.rs:31:1: 31:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/coherence/coherence-where-clause.rs:31:1: 31:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/coherence/coherence-where-clause.rs:27:1: 31:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/coherence/coherence-where-clause.rs:33:15: 33:15
    let _1: ();                          // in scope 0 at ui/coherence/coherence-where-clause.rs:34:5: 34:30
    let _2: MyType;                      // in scope 0 at ui/coherence/coherence-where-clause.rs:36:9: 36:14
    let _3: ();                          // in scope 0 at ui/coherence/coherence-where-clause.rs:37:5: 37:26
    let mut _4: MyType;                  // in scope 0 at ui/coherence/coherence-where-clause.rs:37:13: 37:18
    let mut _5: MyType;                  // in scope 0 at ui/coherence/coherence-where-clause.rs:37:20: 37:25
    scope 1 {
        debug value => _2;               // in scope 1 at ui/coherence/coherence-where-clause.rs:36:9: 36:14
    }

    bb0: {
        _1 = test_eq::<usize>(const 0_usize, const 0_usize) -> bb1; // scope 0 at ui/coherence/coherence-where-clause.rs:34:5: 34:30
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:34:5: 34:12
                                         // + literal: Const { ty: fn(usize, usize) {test_eq::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = const MyType {{ dummy: 278_usize }}; // scope 0 at ui/coherence/coherence-where-clause.rs:36:17: 36:43
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:36:17: 36:43
                                         // + literal: Const { ty: MyType, val: Value(Scalar(0x0000000000000116)) }
        _4 = const MyType {{ dummy: 278_usize }}; // scope 1 at ui/coherence/coherence-where-clause.rs:37:13: 37:18
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:37:13: 37:18
                                         // + literal: Const { ty: MyType, val: Value(Scalar(0x0000000000000116)) }
        _5 = const MyType {{ dummy: 278_usize }}; // scope 1 at ui/coherence/coherence-where-clause.rs:37:20: 37:25
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:37:20: 37:25
                                         // + literal: Const { ty: MyType, val: Value(Scalar(0x0000000000000116)) }
        _3 = test_eq::<MyType>(move _4, move _5) -> bb2; // scope 1 at ui/coherence/coherence-where-clause.rs:37:5: 37:26
                                         // mir::Constant
                                         // + span: ui/coherence/coherence-where-clause.rs:37:5: 37:12
                                         // + literal: Const { ty: fn(MyType, MyType) {test_eq::<MyType>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/coherence/coherence-where-clause.rs:38:2: 38:2
    }
}
