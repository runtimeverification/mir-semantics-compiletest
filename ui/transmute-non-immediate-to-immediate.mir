// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/transmute-non-immediate-to-immediate.rs:7:15: 7:15
    let _1: isize;                       // in scope 0 at ui/transmute-non-immediate-to-immediate.rs:9:9: 9:55
    let mut _2: [isize; 1];              // in scope 0 at ui/transmute-non-immediate-to-immediate.rs:9:51: 9:54
    scope 1 {
    }

    bb0: {
        _2 = [const 1_isize];            // scope 1 at ui/transmute-non-immediate-to-immediate.rs:9:51: 9:54
        _1 = transmute::<[isize; 1], isize>(move _2) -> bb1; // scope 1 at ui/transmute-non-immediate-to-immediate.rs:9:9: 9:55
                                         // mir::Constant
                                         // + span: ui/transmute-non-immediate-to-immediate.rs:9:9: 9:50
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn([isize; 1]) -> isize {transmute::<[isize; 1], isize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/transmute-non-immediate-to-immediate.rs:11:2: 11:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/transmute-non-immediate-to-immediate.rs:9:41: 9:42

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/transmute-non-immediate-to-immediate.rs:9:41: 9:42
        return;                          // scope 0 at ui/transmute-non-immediate-to-immediate.rs:9:41: 9:42
    }
}
