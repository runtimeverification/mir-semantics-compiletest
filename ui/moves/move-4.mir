// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test(_1: Box<Triple>) -> Box<Triple> {
    debug foo => _1;
    let mut _0: std::boxed::Box<Triple>;
    scope 1 {
        debug foo => _1;
        scope 2 {
            debug bar => _1;
            scope 3 {
                debug baz => _1;
                scope 4 {
                    debug quux => _1;
                }
            }
        }
    }

    bb0: {
        _0 = move _1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Triple>;
    let mut _2: Triple;
    let mut _4: std::boxed::Box<Triple>;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: *const Triple;
    scope 1 {
        debug x => _1;
        let _3: std::boxed::Box<Triple>;
        scope 2 {
            debug y => _3;
            let _7: &isize;
            let _8: &isize;
            let mut _16: &isize;
            let mut _18: *const ();
            let mut _19: usize;
            let mut _20: usize;
            let mut _21: usize;
            let mut _22: usize;
            let mut _23: bool;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
        }
    }

    bb0: {
        _2 = Triple { a: const 1_isize, b: const 2_isize, c: const 3_isize };
        _1 = Box::<Triple>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _1;
        _3 = test(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _17 = (((_3.0: std::ptr::Unique<Triple>).0: std::ptr::NonNull<Triple>).0: *const Triple);
        _18 = _17 as *const () (PtrToPtr);
        _19 = _18 as usize (Transmute);
        _20 = AlignOf(Triple);
        _21 = Sub(_20, const 1_usize);
        _22 = BitAnd(_19, _21);
        _23 = Eq(_22, const 0_usize);
        assert(_23, "misaligned pointer dereference: address must be a multiple of {} but is {}", _20, _19) -> [success: bb8, unwind unreachable];
    }

    bb3: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> bb6;
    }

    bb4: {
        drop(_3) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        _6 = &((*_17).2: isize);
        _16 = const _;
        _5 = (move _6, _16);
        _7 = (_5.0: &isize);
        _8 = (_5.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb4, otherwise: bb3];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}
