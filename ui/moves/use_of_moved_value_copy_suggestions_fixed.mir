// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn duplicate_t(_1: T) -> (T, T) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:4:25: 4:26
    let mut _0: (T, T);                  // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:4:34: 4:40
    let mut _2: T;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:6:6: 6:7
    let mut _3: T;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:6:9: 6:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:6:6: 6:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:6:9: 6:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:6:5: 6:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:7:2: 7:2
    }
}

fn duplicate_opt(_1: Option<T>) -> (Option<T>, Option<T>) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:9:27: 9:28
    let mut _0: (std::option::Option<T>, std::option::Option<T>); // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:9:44: 9:66
    let mut _2: std::option::Option<T>;  // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:11:6: 11:7
    let mut _3: std::option::Option<T>;  // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:11:9: 11:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:11:6: 11:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:11:9: 11:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:11:5: 11:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:12:2: 12:2
    }
}

fn duplicate_tup1(_1: (T,)) -> ((T,), (T,)) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:14:28: 14:29
    let mut _0: ((T,), (T,));            // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:14:40: 14:52
    let mut _2: (T,);                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:16:6: 16:7
    let mut _3: (T,);                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:16:9: 16:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:16:6: 16:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:16:9: 16:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:16:5: 16:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:17:2: 17:2
    }
}

fn duplicate_tup2(_1: (A, B)) -> ((A, B), (A, B)) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:19:37: 19:38
    let mut _0: ((A, B), (A, B));        // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:19:51: 19:67
    let mut _2: (A, B);                  // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:21:6: 21:7
    let mut _3: (A, B);                  // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:21:9: 21:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:21:6: 21:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:21:9: 21:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:21:5: 21:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:22:2: 22:2
    }
}

fn duplicate_custom(_1: S<T>) -> (S<T>, S<T>) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:24:38: 24:39
    let mut _0: (S<T>, S<T>);            // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:24:50: 24:62
    let mut _2: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:26:6: 26:7
    let mut _3: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:26:9: 26:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:26:6: 26:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:26:9: 26:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:26:5: 26:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:27:2: 27:2
    }
}

fn <impl at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:31:1: 31:38>::clone(_1: &S<T>) -> S<T> {
    debug self => _1;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:32:14: 32:19
    let mut _0: S<T>;                    // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:32:24: 32:28
    let mut _2: T;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:33:14: 33:28
    let mut _3: &T;                      // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:33:14: 33:28

    bb0: {
        _3 = &((*_1).0: T);              // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:33:14: 33:28
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:33:14: 33:28
                                         // mir::Constant
                                         // + span: ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:33:21: 33:26
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = S::<T>(move _2);            // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:33:9: 33:29
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:34:6: 34:6
    }
}

fn duplicate_custom_1(_1: S<T>) -> (S<T>, S<T>) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:42:40: 42:41
    let mut _0: (S<T>, S<T>);            // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:42:52: 42:64
    let mut _2: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:44:6: 44:7
    let mut _3: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:44:9: 44:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:44:6: 44:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:44:9: 44:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:44:5: 44:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:45:2: 45:2
    }
}

fn duplicate_custom_2(_1: S<T>) -> (S<T>, S<T>) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:47:26: 47:27
    let mut _0: (S<T>, S<T>);            // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:47:38: 47:50
    let mut _2: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:52:6: 52:7
    let mut _3: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:52:9: 52:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:52:6: 52:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:52:9: 52:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:52:5: 52:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:53:2: 53:2
    }
}

fn duplicate_custom_3(_1: S<T>) -> (S<T>, S<T>) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:55:26: 55:27
    let mut _0: (S<T>, S<T>);            // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:55:38: 55:50
    let mut _2: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:61:6: 61:7
    let mut _3: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:61:9: 61:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:61:6: 61:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:61:9: 61:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:61:5: 61:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:62:2: 62:2
    }
}

fn duplicate_custom_4(_1: S<T>) -> (S<T>, S<T>) {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:64:44: 64:45
    let mut _0: (S<T>, S<T>);            // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:64:56: 64:68
    let mut _2: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:69:6: 69:7
    let mut _3: S<T>;                    // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:69:9: 69:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:69:6: 69:7
        _3 = _1;                         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:69:9: 69:10
        _0 = (move _2, move _3);         // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:69:5: 69:11
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:70:2: 70:2
    }
}

fn existing_colon(_1: T) -> () {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:73:28: 73:29
    let mut _0: ();                      // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:73:34: 73:34

    bb0: {
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:76:2: 76:2
    }
}

fn existing_colon_in_where(_1: T) -> () {
    debug t => _1;                       // in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:78:31: 78:32
    let mut _0: ();                      // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:79:1: 79:1

    bb0: {
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:84:2: 84:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:86:11: 86:11

    bb0: {
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:86:13: 86:13
    }
}

fn S(_1: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:29:1: 29:12

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:29:1: 29:12
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:29:1: 29:12
    }
}

// MIR FOR CTFE
fn S(_1: T) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:29:1: 29:12

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:29:1: 29:12
        return;                          // scope 0 at ui/moves/use_of_moved_value_copy_suggestions_fixed.rs:29:1: 29:12
    }
}
