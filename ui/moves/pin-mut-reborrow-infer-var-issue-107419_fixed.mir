// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &mut ()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:4:20: 4:20

    bb0: {
        return;                          // scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:4:22: 4:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:6:11: 6:11
    let mut _1: ();                      // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:7:9: 7:16
    let mut _3: &mut ();                 // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:8:26: 8:34
    let _4: ();                          // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:5: 9:30
    let mut _5: &mut ();                 // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:29
    let mut _6: &mut ();                 // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:29
    let mut _7: std::pin::Pin<&mut ()>;  // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:19
    let mut _8: &mut std::pin::Pin<&mut ()>; // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:19
    let _9: ();                          // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:5: 10:21
    let mut _10: &mut ();                // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:9: 10:20
    let mut _11: &mut ();                // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:9: 10:20
    let mut _12: std::pin::Pin<&mut ()>; // in scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:9: 10:10
    scope 1 {
        debug uwu => _1;                 // in scope 1 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:7:9: 7:16
        let mut _2: std::pin::Pin<&mut ()>; // in scope 1 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:8:9: 8:14
        scope 2 {
            debug r => _2;               // in scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:8:9: 8:14
        }
    }

    bb0: {
        _3 = &mut _1;                    // scope 1 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:8:26: 8:34
        _2 = Pin::<&mut ()>::new(move _3) -> bb1; // scope 1 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:8:17: 8:35
                                         // mir::Constant
                                         // + span: ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:8:17: 8:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut ()) -> Pin<&mut ()> {Pin::<&mut ()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _2;                    // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:19
        _7 = Pin::<&mut ()>::as_mut(move _8) -> bb2; // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:19
                                         // mir::Constant
                                         // + span: ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:11: 9:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<&mut ()>) -> Pin<&'a mut <&mut () as Deref>::Target> {Pin::<&mut ()>::as_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Pin::<&mut ()>::get_mut(move _7) -> bb3; // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:29
                                         // mir::Constant
                                         // + span: ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:20: 9:27
                                         // + literal: Const { ty: fn(Pin<&mut ()>) -> &mut () {Pin::<&mut ()>::get_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &mut (*_6);                 // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:9: 9:29
        _4 = foo(move _5) -> bb4;        // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:5: 9:30
                                         // mir::Constant
                                         // + span: ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:9:5: 9:8
                                         // + literal: Const { ty: for<'a> fn(&'a mut ()) {foo}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = move _2;                   // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:9: 10:10
        _11 = Pin::<&mut ()>::get_mut(move _12) -> bb5; // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:9: 10:20
                                         // mir::Constant
                                         // + span: ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:11: 10:18
                                         // + literal: Const { ty: fn(Pin<&mut ()>) -> &mut () {Pin::<&mut ()>::get_mut}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &mut (*_11);               // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:9: 10:20
        _9 = foo(move _10) -> bb6;       // scope 2 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:5: 10:21
                                         // mir::Constant
                                         // + span: ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:10:5: 10:8
                                         // + literal: Const { ty: for<'a> fn(&'a mut ()) {foo}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/moves/pin-mut-reborrow-infer-var-issue-107419_fixed.rs:11:2: 11:2
    }
}
