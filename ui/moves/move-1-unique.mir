// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-1-unique.rs:5:10: 5:15>::clone(_1: &Triple) -> Triple {
    debug self => _1;
    let mut _0: Triple;
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    let _5: &isize;
    let mut _6: isize;
    let _7: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _5 = &((*_1).1: isize);
        _4 = (*_5);
        _7 = &((*_1).2: isize);
        _6 = (*_7);
        _0 = Triple { x: move _2, y: move _4, z: move _6 };
        return;
    }
}

fn test(_1: bool, _2: Box<Triple>) -> isize {
    debug x => _1;
    debug foo => _2;
    let mut _0: isize;
    let _3: std::boxed::Box<Triple>;
    let mut _5: std::boxed::Box<Triple>;
    let mut _6: std::boxed::Box<Triple>;
    let mut _7: Triple;
    let mut _8: bool;
    let mut _9: *const Triple;
    scope 1 {
        debug bar => _3;
        let mut _4: std::boxed::Box<Triple>;
        scope 2 {
            debug y => _4;
            let mut _10: *const ();
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: usize;
            let mut _14: usize;
            let mut _15: bool;
        }
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _3 = move _2;
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const false;
        _5 = move _3;
        _4 = move _5;
        goto -> bb4;
    }

    bb2: {
        _7 = Triple { x: const 4_isize, y: const 5_isize, z: const 6_isize };
        _6 = Box::<Triple>::new(move _7) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = move _6;
        goto -> bb4;
    }

    bb4: {
        _9 = (((_4.0: std::ptr::Unique<Triple>).0: std::ptr::NonNull<Triple>).0: *const Triple);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(Triple);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb11, unwind unreachable];
    }

    bb5: {
        switchInt(_8) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _8 = const false;
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb9];
    }

    bb11: {
        _0 = ((*_9).1: isize);
        drop(_4) -> [return: bb5, unwind: bb10];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Triple>;
    let mut _2: Triple;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: std::boxed::Box<Triple>;
    let mut _7: &std::boxed::Box<Triple>;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: isize;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&isize, &isize);
    let mut _18: &isize;
    let _19: isize;
    let mut _20: std::boxed::Box<Triple>;
    let mut _21: &std::boxed::Box<Triple>;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&isize, &isize);
    let mut _32: &isize;
    let _33: isize;
    let mut _34: std::boxed::Box<Triple>;
    let mut _35: &std::boxed::Box<Triple>;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&isize, &isize);
    let mut _46: &isize;
    let _47: isize;
    let mut _48: std::boxed::Box<Triple>;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: isize;
    let mut _54: isize;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _62: bool;
    scope 1 {
        debug x => _1;
        let _8: &isize;
        let _9: &isize;
        let _22: &isize;
        let _23: &isize;
        let _36: &isize;
        let _37: &isize;
        let _49: &isize;
        let _50: &isize;
        let mut _58: &isize;
        let mut _59: &isize;
        let mut _60: &isize;
        let mut _61: &isize;
        scope 2 {
            debug left_val => _8;
            debug right_val => _9;
            let _14: core::panicking::AssertKind;
            scope 3 {
                debug kind => _14;
            }
        }
        scope 4 {
            debug left_val => _22;
            debug right_val => _23;
            let _28: core::panicking::AssertKind;
            scope 5 {
                debug kind => _28;
            }
        }
        scope 6 {
            debug left_val => _36;
            debug right_val => _37;
            let _42: core::panicking::AssertKind;
            scope 7 {
                debug kind => _42;
            }
        }
        scope 8 {
            debug left_val => _49;
            debug right_val => _50;
            let _55: core::panicking::AssertKind;
            scope 9 {
                debug kind => _55;
            }
        }
    }

    bb0: {
        _62 = const false;
        _2 = Triple { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _62 = const true;
        _1 = Box::<Triple>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_1;
        _6 = <Box<Triple> as Clone>::clone(move _7) -> [return: bb2, unwind: bb19];
    }

    bb2: {
        _5 = test(const true, move _6) -> [return: bb3, unwind: bb19];
    }

    bb3: {
        _4 = &_5;
        _61 = const _;
        _3 = (move _4, _61);
        _8 = (_3.0: &isize);
        _9 = (_3.1: &isize);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<isize, isize>(move _14, _8, _9, move _16) -> bb19;
    }

    bb5: {
        _21 = &_1;
        _20 = <Box<Triple> as Clone>::clone(move _21) -> [return: bb6, unwind: bb19];
    }

    bb6: {
        _19 = test(const true, move _20) -> [return: bb7, unwind: bb19];
    }

    bb7: {
        _18 = &_19;
        _60 = const _;
        _17 = (move _18, _60);
        _22 = (_17.0: &isize);
        _23 = (_17.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> bb19;
    }

    bb9: {
        _35 = &_1;
        _34 = <Box<Triple> as Clone>::clone(move _35) -> [return: bb10, unwind: bb19];
    }

    bb10: {
        _33 = test(const true, move _34) -> [return: bb11, unwind: bb19];
    }

    bb11: {
        _32 = &_33;
        _59 = const _;
        _31 = (move _32, _59);
        _36 = (_31.0: &isize);
        _37 = (_31.1: &isize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<isize, isize>(move _42, _36, _37, move _44) -> bb19;
    }

    bb13: {
        _62 = const false;
        _48 = move _1;
        _47 = test(const false, move _48) -> [return: bb14, unwind: bb19];
    }

    bb14: {
        _46 = &_47;
        _58 = const _;
        _45 = (move _46, _58);
        _49 = (_45.0: &isize);
        _50 = (_45.1: &isize);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = core::panicking::assert_failed::<isize, isize>(move _55, _49, _50, move _57) -> bb19;
    }

    bb16: {
        _62 = const false;
        return;
    }

    bb17 (cleanup): {
        resume;
    }

    bb18 (cleanup): {
        drop(_1) -> [return: bb17, unwind terminate];
    }

    bb19 (cleanup): {
        switchInt(_62) -> [0: bb17, otherwise: bb18];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}
