// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-out-of-field.rs:9:1: 9:18>::append(_1: &mut StringBuffer, _2: &str) -> () {
    debug self => _1;
    debug v => _2;
    let mut _0: ();
    let _3: ();
    let mut _4: &mut std::string::String;

    bb0: {
        _4 = &mut ((*_1).0: std::string::String);
        _3 = String::push_str(move _4, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn to_string(_1: StringBuffer) -> String {
    debug sb => _1;
    let mut _0: std::string::String;

    bb0: {
        _0 = move (_1.0: std::string::String);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: StringBuffer;
    let mut _2: std::string::String;
    let _3: ();
    let mut _4: &mut StringBuffer;
    let _5: &str;
    let _6: ();
    let mut _7: &mut StringBuffer;
    let _8: &str;
    let mut _10: StringBuffer;
    let mut _11: (&std::string::String, &&str);
    let mut _12: &std::string::String;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: bool;
    scope 1 {
        debug sb => _1;
        let _9: std::string::String;
        scope 2 {
            debug str => _9;
            let _13: &std::string::String;
            let _14: &&str;
            let mut _20: &&str;
            scope 3 {
                debug left_val => _13;
                debug right_val => _14;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
        }
    }

    bb0: {
        _21 = const false;
        _2 = String::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _21 = const true;
        _1 = StringBuffer { s: move _2 };
        _4 = &mut _1;
        _5 = const "Hello, ";
        _3 = StringBuffer::append(move _4, _5) -> [return: bb2, unwind: bb12];
    }

    bb2: {
        _7 = &mut _1;
        _8 = const "World!";
        _6 = StringBuffer::append(move _7, _8) -> [return: bb3, unwind: bb12];
    }

    bb3: {
        _21 = const false;
        _10 = move _1;
        _9 = to_string(move _10) -> [return: bb4, unwind: bb12];
    }

    bb4: {
        _12 = &_9;
        _20 = const _;
        _11 = (move _12, _20);
        _13 = (_11.0: &std::string::String);
        _14 = (_11.1: &&str);
        _16 = <String as PartialEq<&str>>::eq(_13, _14) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = core::panicking::assert_failed::<String, &str>(move _17, _13, _14, move _19) -> bb9;
    }

    bb7: {
        drop(_9) -> [return: bb8, unwind: bb12];
    }

    bb8: {
        _21 = const false;
        return;
    }

    bb9 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb12 (cleanup): {
        switchInt(_21) -> [0: bb10, otherwise: bb11];
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Hello, World!";
        _0 = &_1;
        return;
    }
}
