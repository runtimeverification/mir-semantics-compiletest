// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-out-of-field.rs:9:1: 9:18>::append(_1: &mut StringBuffer, _2: &str) -> () {
    debug self => _1;                    // in scope 0 at ui/moves/move-out-of-field.rs:10:19: 10:28
    debug v => _2;                       // in scope 0 at ui/moves/move-out-of-field.rs:10:30: 10:31
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-out-of-field.rs:10:39: 10:39
    let _3: ();                          // in scope 0 at ui/moves/move-out-of-field.rs:11:9: 11:27
    let mut _4: &mut std::string::String; // in scope 0 at ui/moves/move-out-of-field.rs:11:9: 11:27
    let mut _5: &str;                    // in scope 0 at ui/moves/move-out-of-field.rs:11:25: 11:26

    bb0: {
        _4 = &mut ((*_1).0: std::string::String); // scope 0 at ui/moves/move-out-of-field.rs:11:9: 11:27
        _5 = _2;                         // scope 0 at ui/moves/move-out-of-field.rs:11:25: 11:26
        _3 = String::push_str(move _4, move _5) -> bb1; // scope 0 at ui/moves/move-out-of-field.rs:11:9: 11:27
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:11:16: 11:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut String, &'b str) {String::push_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/moves/move-out-of-field.rs:12:6: 12:6
    }
}

fn to_string(_1: StringBuffer) -> String {
    debug sb => _1;                      // in scope 0 at ui/moves/move-out-of-field.rs:15:14: 15:16
    let mut _0: std::string::String;     // return place in scope 0 at ui/moves/move-out-of-field.rs:15:35: 15:41

    bb0: {
        _0 = move (_1.0: std::string::String); // scope 0 at ui/moves/move-out-of-field.rs:16:5: 16:9
        return;                          // scope 0 at ui/moves/move-out-of-field.rs:17:2: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-out-of-field.rs:19:15: 19:15
    let mut _1: StringBuffer;            // in scope 0 at ui/moves/move-out-of-field.rs:20:9: 20:15
    let mut _2: std::string::String;     // in scope 0 at ui/moves/move-out-of-field.rs:21:12: 21:25
    let _3: ();                          // in scope 0 at ui/moves/move-out-of-field.rs:23:5: 23:25
    let mut _4: &mut StringBuffer;       // in scope 0 at ui/moves/move-out-of-field.rs:23:5: 23:25
    let mut _5: &str;                    // in scope 0 at ui/moves/move-out-of-field.rs:23:15: 23:24
    let _6: &str;                        // in scope 0 at ui/moves/move-out-of-field.rs:23:15: 23:24
    let _7: ();                          // in scope 0 at ui/moves/move-out-of-field.rs:24:5: 24:24
    let mut _8: &mut StringBuffer;       // in scope 0 at ui/moves/move-out-of-field.rs:24:5: 24:24
    let mut _9: &str;                    // in scope 0 at ui/moves/move-out-of-field.rs:24:15: 24:23
    let _10: &str;                       // in scope 0 at ui/moves/move-out-of-field.rs:24:15: 24:23
    let mut _12: StringBuffer;           // in scope 0 at ui/moves/move-out-of-field.rs:25:25: 25:27
    let mut _13: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _31: bool;                   // in scope 0 at ui/moves/move-out-of-field.rs:27:1: 27:2
    scope 1 {
        debug sb => _1;                  // in scope 1 at ui/moves/move-out-of-field.rs:20:9: 20:15
        let _11: std::string::String;    // in scope 1 at ui/moves/move-out-of-field.rs:25:9: 25:12
        scope 2 {
            debug str => _11;            // in scope 2 at ui/moves/move-out-of-field.rs:25:9: 25:12
            let _16: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _30: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _31 = const false;               // scope 0 at ui/moves/move-out-of-field.rs:20:9: 20:15
        _2 = String::new() -> bb1;       // scope 0 at ui/moves/move-out-of-field.rs:21:12: 21:25
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:21:12: 21:23
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb1: {
        _31 = const true;                // scope 0 at ui/moves/move-out-of-field.rs:20:18: 22:6
        _1 = StringBuffer { s: move _2 }; // scope 0 at ui/moves/move-out-of-field.rs:20:18: 22:6
        _4 = &mut _1;                    // scope 1 at ui/moves/move-out-of-field.rs:23:5: 23:25
        _6 = const "Hello, ";            // scope 1 at ui/moves/move-out-of-field.rs:23:15: 23:24
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:23:15: 23:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/moves/move-out-of-field.rs:23:15: 23:24
        _3 = StringBuffer::append(move _4, move _5) -> [return: bb2, unwind: bb12]; // scope 1 at ui/moves/move-out-of-field.rs:23:5: 23:25
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:23:8: 23:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut StringBuffer, &'b str) {StringBuffer::append}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &mut _1;                    // scope 1 at ui/moves/move-out-of-field.rs:24:5: 24:24
        _10 = const "World!";            // scope 1 at ui/moves/move-out-of-field.rs:24:15: 24:23
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:24:15: 24:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at ui/moves/move-out-of-field.rs:24:15: 24:23
        _7 = StringBuffer::append(move _8, move _9) -> [return: bb3, unwind: bb12]; // scope 1 at ui/moves/move-out-of-field.rs:24:5: 24:24
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:24:8: 24:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut StringBuffer, &'b str) {StringBuffer::append}, val: Value(<ZST>) }
    }

    bb3: {
        _31 = const false;               // scope 1 at ui/moves/move-out-of-field.rs:25:25: 25:27
        _12 = move _1;                   // scope 1 at ui/moves/move-out-of-field.rs:25:25: 25:27
        _11 = to_string(move _12) -> [return: bb4, unwind: bb12]; // scope 1 at ui/moves/move-out-of-field.rs:25:15: 25:28
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:25:15: 25:24
                                         // + literal: Const { ty: fn(StringBuffer) -> String {to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _15 = _30;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &&str);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <String as PartialEq<&str>>::eq(move _20, move _21) -> [return: bb5, unwind: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<String, &str>(move _24, move _25, move _27, move _29) -> bb9; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb12]; // scope 1 at ui/moves/move-out-of-field.rs:27:1: 27:2
    }

    bb8: {
        _31 = const false;               // scope 0 at ui/moves/move-out-of-field.rs:27:1: 27:2
        return;                          // scope 0 at ui/moves/move-out-of-field.rs:27:2: 27:2
    }

    bb9 (cleanup): {
        drop(_11) -> bb12;               // scope 1 at ui/moves/move-out-of-field.rs:27:1: 27:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/moves/move-out-of-field.rs:19:1: 27:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/moves/move-out-of-field.rs:27:1: 27:2
    }

    bb12 (cleanup): {
        switchInt(_31) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/moves/move-out-of-field.rs:27:1: 27:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/moves/move-out-of-field.rs:26:21: 26:36

    bb0: {
        _1 = const "Hello, World!";      // scope 0 at ui/moves/move-out-of-field.rs:26:21: 26:36
                                         // mir::Constant
                                         // + span: ui/moves/move-out-of-field.rs:26:21: 26:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
