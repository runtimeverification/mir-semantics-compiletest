// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/suggest-clone_fixed.rs:3:10: 3:15>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/moves/suggest-clone_fixed.rs:3:10: 3:15
    let mut _0: Foo;                     // return place in scope 0 at ui/moves/suggest-clone_fixed.rs:3:10: 3:15

    bb0: {
        return;                          // scope 0 at ui/moves/suggest-clone_fixed.rs:3:15: 3:15
    }
}

fn <impl at ui/moves/suggest-clone_fixed.rs:5:1: 5:9>::foo(_1: Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/moves/suggest-clone_fixed.rs:6:12: 6:16
    let mut _0: ();                      // return place in scope 0 at ui/moves/suggest-clone_fixed.rs:6:18: 6:18

    bb0: {
        return;                          // scope 0 at ui/moves/suggest-clone_fixed.rs:6:20: 6:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/suggest-clone_fixed.rs:8:11: 8:11
    let _1: &Foo;                        // in scope 0 at ui/moves/suggest-clone_fixed.rs:9:9: 9:12
    let _2: ();                          // in scope 0 at ui/moves/suggest-clone_fixed.rs:10:5: 10:22
    let mut _3: Foo;                     // in scope 0 at ui/moves/suggest-clone_fixed.rs:10:5: 10:16
    let mut _4: &Foo;                    // in scope 0 at ui/moves/suggest-clone_fixed.rs:10:5: 10:16
    let mut _5: &Foo;                    // in scope 0 at ui/moves/suggest-clone_fixed.rs:9:15: 9:19
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/moves/suggest-clone_fixed.rs:9:9: 9:12
    }

    bb0: {
        _5 = const _;                    // scope 0 at ui/moves/suggest-clone_fixed.rs:9:15: 9:19
                                         // mir::Constant
                                         // + span: ui/moves/suggest-clone_fixed.rs:9:15: 9:19
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _1 = _5;                         // scope 0 at ui/moves/suggest-clone_fixed.rs:9:15: 9:19
        _4 = _1;                         // scope 1 at ui/moves/suggest-clone_fixed.rs:10:5: 10:16
        _3 = <Foo as Clone>::clone(move _4) -> bb1; // scope 1 at ui/moves/suggest-clone_fixed.rs:10:5: 10:16
                                         // mir::Constant
                                         // + span: ui/moves/suggest-clone_fixed.rs:10:9: 10:14
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> Foo {<Foo as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Foo::foo(move _3) -> bb2;   // scope 1 at ui/moves/suggest-clone_fixed.rs:10:5: 10:22
                                         // mir::Constant
                                         // + span: ui/moves/suggest-clone_fixed.rs:10:17: 10:20
                                         // + literal: Const { ty: fn(Foo) {Foo::foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/moves/suggest-clone_fixed.rs:11:2: 11:2
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/moves/suggest-clone_fixed.rs:9:15: 9:19
    let mut _1: Foo;                     // in scope 0 at ui/moves/suggest-clone_fixed.rs:9:16: 9:19

    bb0: {
        _1 = Foo;                        // scope 0 at ui/moves/suggest-clone_fixed.rs:9:16: 9:19
        _0 = &_1;                        // scope 0 at ui/moves/suggest-clone_fixed.rs:9:15: 9:19
        return;                          // scope 0 at ui/moves/suggest-clone_fixed.rs:9:15: 9:19
    }
}
