// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-3-unique.rs:5:10: 5:15>::clone(_1: &Triple) -> Triple {
    debug self => _1;
    let mut _0: Triple;
    let mut _2: isize;
    let _3: &isize;
    let mut _4: isize;
    let _5: &isize;
    let mut _6: isize;
    let _7: &isize;

    bb0: {
        _3 = &((*_1).0: isize);
        _2 = (*_3);
        _5 = &((*_1).1: isize);
        _4 = (*_5);
        _7 = &((*_1).2: isize);
        _6 = (*_7);
        _0 = Triple { x: move _2, y: move _4, z: move _6 };
        return;
    }
}

fn test(_1: bool, _2: Box<Triple>) -> isize {
    debug x => _1;
    debug foo => _2;
    let mut _0: isize;
    let _3: std::boxed::Box<Triple>;
    let mut _5: std::boxed::Box<Triple>;
    let mut _6: std::boxed::Box<Triple>;
    let mut _7: Triple;
    let mut _8: bool;
    let mut _9: *const Triple;
    scope 1 {
        debug bar => _3;
        let mut _4: std::boxed::Box<Triple>;
        scope 2 {
            debug y => _4;
            let mut _10: *const ();
            let mut _11: usize;
            let mut _12: usize;
            let mut _13: usize;
            let mut _14: usize;
            let mut _15: bool;
        }
    }

    bb0: {
        _8 = const false;
        _8 = const true;
        _3 = move _2;
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = const false;
        _5 = move _3;
        _4 = move _5;
        goto -> bb4;
    }

    bb2: {
        _7 = Triple { x: const 4_isize, y: const 5_isize, z: const 6_isize };
        _6 = Box::<Triple>::new(move _7) -> [return: bb3, unwind: bb10];
    }

    bb3: {
        _4 = move _6;
        goto -> bb4;
    }

    bb4: {
        _9 = (((_4.0: std::ptr::Unique<Triple>).0: std::ptr::NonNull<Triple>).0: *const Triple);
        _10 = _9 as *const () (PtrToPtr);
        _11 = _10 as usize (Transmute);
        _12 = AlignOf(Triple);
        _13 = Sub(_12, const 1_usize);
        _14 = BitAnd(_11, _13);
        _15 = Eq(_14, const 0_usize);
        assert(_15, "misaligned pointer dereference: address must be a multiple of {} but is {}", _12, _11) -> [success: bb11, unwind unreachable];
    }

    bb5: {
        switchInt(_8) -> [0: bb6, otherwise: bb8];
    }

    bb6: {
        _8 = const false;
        return;
    }

    bb7 (cleanup): {
        resume;
    }

    bb8: {
        drop(_3) -> [return: bb6, unwind continue];
    }

    bb9 (cleanup): {
        drop(_3) -> [return: bb7, unwind terminate];
    }

    bb10 (cleanup): {
        switchInt(_8) -> [0: bb7, otherwise: bb9];
    }

    bb11: {
        _0 = ((*_9).1: isize);
        drop(_4) -> [return: bb5, unwind: bb10];
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<Triple>;
    let mut _2: Triple;
    let mut _3: std::ops::Range<usize>;
    let mut _4: std::ops::Range<usize>;
    let mut _6: std::option::Option<usize>;
    let mut _7: &mut std::ops::Range<usize>;
    let mut _8: isize;
    let mut _9: (&isize, &isize);
    let mut _10: &isize;
    let _11: isize;
    let mut _12: std::boxed::Box<Triple>;
    let mut _13: &std::boxed::Box<Triple>;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: isize;
    let mut _19: isize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let _25: isize;
    let mut _26: std::boxed::Box<Triple>;
    let mut _29: bool;
    let mut _30: bool;
    let mut _31: isize;
    let mut _32: isize;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: bool;
    scope 1 {
        debug x => _1;
        let mut _5: std::ops::Range<usize>;
        let _27: &isize;
        let _28: &isize;
        let mut _37: &isize;
        scope 2 {
            debug iter => _5;
            let _14: &isize;
            let _15: &isize;
            let mut _36: &isize;
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
        }
        scope 5 {
            debug left_val => _27;
            debug right_val => _28;
            let _33: core::panicking::AssertKind;
            scope 6 {
                debug kind => _33;
            }
        }
    }

    bb0: {
        _38 = const false;
        _2 = Triple { x: const 1_isize, y: const 2_isize, z: const 3_isize };
        _38 = const true;
        _1 = Box::<Triple>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const 10000_usize };
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb16];
    }

    bb2: {
        _5 = move _3;
        goto -> bb3;
    }

    bb3: {
        _7 = &mut _5;
        _6 = <std::ops::Range<usize> as Iterator>::next(_7) -> [return: bb4, unwind: bb16];
    }

    bb4: {
        _8 = discriminant(_6);
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _13 = &_1;
        _12 = <Box<Triple> as Clone>::clone(move _13) -> [return: bb8, unwind: bb16];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _38 = const false;
        _26 = move _1;
        _25 = test(const false, move _26) -> [return: bb11, unwind: bb16];
    }

    bb8: {
        _11 = test(const true, move _12) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _10 = &_11;
        _36 = const _;
        _9 = (move _10, _36);
        _14 = (_9.0: &isize);
        _15 = (_9.1: &isize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb3, otherwise: bb10];
    }

    bb10: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<isize, isize>(move _20, _14, _15, move _22) -> bb16;
    }

    bb11: {
        _24 = &_25;
        _37 = const _;
        _23 = (move _24, _37);
        _27 = (_23.0: &isize);
        _28 = (_23.1: &isize);
        _31 = (*_27);
        _32 = (*_28);
        _30 = Eq(move _31, move _32);
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<isize, isize>(move _33, _27, _28, move _35) -> bb16;
    }

    bb13: {
        _38 = const false;
        return;
    }

    bb14 (cleanup): {
        resume;
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb16 (cleanup): {
        switchInt(_38) -> [0: bb14, otherwise: bb15];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}
