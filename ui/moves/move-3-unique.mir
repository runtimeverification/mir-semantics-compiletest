// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/moves/move-3-unique.rs:5:10: 5:15>::clone(_1: &Triple) -> Triple {
    debug self => _1;                    // in scope 0 at ui/moves/move-3-unique.rs:5:10: 5:15
    let mut _0: Triple;                  // return place in scope 0 at ui/moves/move-3-unique.rs:5:10: 5:15
    let mut _2: isize;                   // in scope 0 at ui/moves/move-3-unique.rs:7:5: 7:13
    let mut _3: &isize;                  // in scope 0 at ui/moves/move-3-unique.rs:7:5: 7:13
    let _4: &isize;                      // in scope 0 at ui/moves/move-3-unique.rs:7:5: 7:13
    let mut _5: isize;                   // in scope 0 at ui/moves/move-3-unique.rs:8:5: 8:13
    let mut _6: &isize;                  // in scope 0 at ui/moves/move-3-unique.rs:8:5: 8:13
    let _7: &isize;                      // in scope 0 at ui/moves/move-3-unique.rs:8:5: 8:13
    let mut _8: isize;                   // in scope 0 at ui/moves/move-3-unique.rs:9:5: 9:13
    let mut _9: &isize;                  // in scope 0 at ui/moves/move-3-unique.rs:9:5: 9:13
    let _10: &isize;                     // in scope 0 at ui/moves/move-3-unique.rs:9:5: 9:13

    bb0: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/moves/move-3-unique.rs:7:5: 7:13
        _3 = _4;                         // scope 0 at ui/moves/move-3-unique.rs:7:5: 7:13
        _2 = (*_3);                      // scope 0 at ui/moves/move-3-unique.rs:7:5: 7:13
        _7 = &((*_1).1: isize);          // scope 0 at ui/moves/move-3-unique.rs:8:5: 8:13
        _6 = _7;                         // scope 0 at ui/moves/move-3-unique.rs:8:5: 8:13
        _5 = (*_6);                      // scope 0 at ui/moves/move-3-unique.rs:8:5: 8:13
        _10 = &((*_1).2: isize);         // scope 0 at ui/moves/move-3-unique.rs:9:5: 9:13
        _9 = _10;                        // scope 0 at ui/moves/move-3-unique.rs:9:5: 9:13
        _8 = (*_9);                      // scope 0 at ui/moves/move-3-unique.rs:9:5: 9:13
        _0 = Triple { x: move _2, y: move _5, z: move _8 }; // scope 0 at ui/moves/move-3-unique.rs:5:10: 5:15
        return;                          // scope 0 at ui/moves/move-3-unique.rs:5:15: 5:15
    }
}

fn test(_1: bool, _2: Box<Triple>) -> isize {
    debug x => _1;                       // in scope 0 at ui/moves/move-3-unique.rs:12:9: 12:10
    debug foo => _2;                     // in scope 0 at ui/moves/move-3-unique.rs:12:18: 12:21
    let mut _0: isize;                   // return place in scope 0 at ui/moves/move-3-unique.rs:12:39: 12:44
    let _3: std::boxed::Box<Triple>;     // in scope 0 at ui/moves/move-3-unique.rs:13:9: 13:12
    let mut _5: bool;                    // in scope 0 at ui/moves/move-3-unique.rs:15:8: 15:9
    let mut _6: std::boxed::Box<Triple>; // in scope 0 at ui/moves/move-3-unique.rs:15:16: 15:19
    let mut _7: std::boxed::Box<Triple>; // in scope 0 at ui/moves/move-3-unique.rs:15:34: 15:69
    let mut _8: Triple;                  // in scope 0 at ui/moves/move-3-unique.rs:15:43: 15:68
    let mut _9: bool;                    // in scope 0 at ui/moves/move-3-unique.rs:17:1: 17:2
    let mut _10: *const Triple;          // in scope 0 at ui/moves/move-3-unique.rs:14:9: 14:14
    scope 1 {
        debug bar => _3;                 // in scope 1 at ui/moves/move-3-unique.rs:13:9: 13:12
        let mut _4: std::boxed::Box<Triple>; // in scope 1 at ui/moves/move-3-unique.rs:14:9: 14:14
        scope 2 {
            debug y => _4;               // in scope 2 at ui/moves/move-3-unique.rs:14:9: 14:14
        }
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/moves/move-3-unique.rs:13:9: 13:12
        _9 = const true;                 // scope 0 at ui/moves/move-3-unique.rs:13:15: 13:18
        _3 = move _2;                    // scope 0 at ui/moves/move-3-unique.rs:13:15: 13:18
        _5 = _1;                         // scope 2 at ui/moves/move-3-unique.rs:15:8: 15:9
        switchInt(move _5) -> [0: bb2, otherwise: bb1]; // scope 2 at ui/moves/move-3-unique.rs:15:8: 15:9
    }

    bb1: {
        _9 = const false;                // scope 2 at ui/moves/move-3-unique.rs:15:16: 15:19
        _6 = move _3;                    // scope 2 at ui/moves/move-3-unique.rs:15:16: 15:19
        _4 = move _6;                    // scope 2 at ui/moves/move-3-unique.rs:15:12: 15:13
        goto -> bb4;                     // scope 2 at ui/moves/move-3-unique.rs:15:5: 15:72
    }

    bb2: {
        _8 = Triple { x: const 4_isize, y: const 5_isize, z: const 6_isize }; // scope 2 at ui/moves/move-3-unique.rs:15:43: 15:68
        _7 = Box::<Triple>::new(move _8) -> [return: bb3, unwind: bb10]; // scope 2 at ui/moves/move-3-unique.rs:15:34: 15:69
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:15:34: 15:42
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Triple) -> Box<Triple> {Box::<Triple>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = move _7;                    // scope 2 at ui/moves/move-3-unique.rs:15:30: 15:31
        goto -> bb4;                     // scope 2 at ui/moves/move-3-unique.rs:15:5: 15:72
    }

    bb4: {
        _10 = (((_4.0: std::ptr::Unique<Triple>).0: std::ptr::NonNull<Triple>).0: *const Triple); // scope 2 at ui/moves/move-3-unique.rs:16:12: 16:15
        _0 = ((*_10).1: isize);          // scope 2 at ui/moves/move-3-unique.rs:16:12: 16:15
        drop(_4) -> [return: bb5, unwind: bb10]; // scope 1 at ui/moves/move-3-unique.rs:17:1: 17:2
    }

    bb5: {
        switchInt(_9) -> [0: bb6, otherwise: bb8]; // scope 0 at ui/moves/move-3-unique.rs:17:1: 17:2
    }

    bb6: {
        _9 = const false;                // scope 0 at ui/moves/move-3-unique.rs:17:1: 17:2
        return;                          // scope 0 at ui/moves/move-3-unique.rs:17:2: 17:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/moves/move-3-unique.rs:12:1: 17:2
    }

    bb8: {
        drop(_3) -> bb6;                 // scope 0 at ui/moves/move-3-unique.rs:17:1: 17:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb7;                 // scope 0 at ui/moves/move-3-unique.rs:17:1: 17:2
    }

    bb10 (cleanup): {
        switchInt(_9) -> [0: bb7, otherwise: bb9]; // scope 0 at ui/moves/move-3-unique.rs:17:1: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-3-unique.rs:19:15: 19:15
    let _1: std::boxed::Box<Triple>;     // in scope 0 at ui/moves/move-3-unique.rs:20:9: 20:10
    let mut _2: Triple;                  // in scope 0 at ui/moves/move-3-unique.rs:20:30: 20:54
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/moves/move-3-unique.rs:21:14: 21:34
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/moves/move-3-unique.rs:21:14: 21:34
    let mut _6: std::option::Option<usize>; // in scope 0 at ui/moves/move-3-unique.rs:21:14: 21:34
    let mut _7: &mut std::ops::Range<usize>; // in scope 0 at ui/moves/move-3-unique.rs:21:14: 21:34
    let mut _8: &mut std::ops::Range<usize>; // in scope 0 at ui/moves/move-3-unique.rs:21:14: 21:34
    let mut _9: isize;                   // in scope 0 at ui/moves/move-3-unique.rs:21:5: 23:6
    let mut _10: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: isize;                      // in scope 0 at ui/moves/move-3-unique.rs:22:20: 22:41
    let mut _13: std::boxed::Box<Triple>; // in scope 0 at ui/moves/move-3-unique.rs:22:31: 22:40
    let mut _14: &std::boxed::Box<Triple>; // in scope 0 at ui/moves/move-3-unique.rs:22:31: 22:40
    let mut _15: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _32: isize;                      // in scope 0 at ui/moves/move-3-unique.rs:24:16: 24:30
    let mut _33: std::boxed::Box<Triple>; // in scope 0 at ui/moves/move-3-unique.rs:24:28: 24:29
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _51: bool;                   // in scope 0 at ui/moves/move-3-unique.rs:25:1: 25:2
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/moves/move-3-unique.rs:20:9: 20:10
        let mut _5: std::ops::Range<usize>; // in scope 1 at ui/moves/move-3-unique.rs:21:14: 21:34
        let _35: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _36: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _49: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
            let _16: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _50: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
        scope 5 {
            debug left_val => _35;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _36;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _41: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _41;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _51 = const false;               // scope 0 at ui/moves/move-3-unique.rs:20:9: 20:10
        _2 = Triple { x: const 1_isize, y: const 2_isize, z: const 3_isize }; // scope 0 at ui/moves/move-3-unique.rs:20:30: 20:54
        _51 = const true;                // scope 0 at ui/moves/move-3-unique.rs:20:21: 20:55
        _1 = Box::<Triple>::new(move _2) -> bb1; // scope 0 at ui/moves/move-3-unique.rs:20:21: 20:55
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:20:21: 20:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Triple) -> Box<Triple> {Box::<Triple>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = std::ops::Range::<usize> { start: const 0_usize, end: const 10000_usize }; // scope 1 at ui/moves/move-3-unique.rs:21:14: 21:34
        _3 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb16]; // scope 1 at ui/moves/move-3-unique.rs:21:14: 21:34
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:21:14: 21:34
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _3;                    // scope 1 at ui/moves/move-3-unique.rs:21:14: 21:34
        goto -> bb3;                     // scope 2 at ui/moves/move-3-unique.rs:21:5: 23:6
    }

    bb3: {
        _8 = &mut _5;                    // scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
        _7 = &mut (*_8);                 // scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
        _6 = <std::ops::Range<usize> as Iterator>::next(move _7) -> [return: bb4, unwind: bb16]; // scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:21:14: 21:34
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = discriminant(_6);           // scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
        switchInt(move _9) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
    }

    bb5: {
        _14 = &_1;                       // scope 2 at ui/moves/move-3-unique.rs:22:31: 22:40
        _13 = <Box<Triple> as Clone>::clone(move _14) -> [return: bb8, unwind: bb16]; // scope 2 at ui/moves/move-3-unique.rs:22:31: 22:40
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:22:33: 22:38
                                         // + literal: Const { ty: for<'a> fn(&'a Box<Triple>) -> Box<Triple> {<Box<Triple> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/moves/move-3-unique.rs:21:14: 21:34
    }

    bb7: {
        _51 = const false;               // scope 1 at ui/moves/move-3-unique.rs:24:28: 24:29
        _33 = move _1;                   // scope 1 at ui/moves/move-3-unique.rs:24:28: 24:29
        _32 = test(const false, move _33) -> [return: bb11, unwind: bb16]; // scope 1 at ui/moves/move-3-unique.rs:24:16: 24:30
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:24:16: 24:20
                                         // + literal: Const { ty: fn(bool, Box<Triple>) -> isize {test}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = test(const true, move _13) -> [return: bb9, unwind: bb16]; // scope 2 at ui/moves/move-3-unique.rs:22:20: 22:41
                                         // mir::Constant
                                         // + span: ui/moves/move-3-unique.rs:22:20: 22:24
                                         // + literal: Const { ty: fn(bool, Box<Triple>) -> isize {test}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = &_12;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _15 = _50;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _15);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_10.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_10.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = (*_16);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = const 2_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = Eq(move _20, move _21);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb3, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<isize, isize>(move _24, move _25, move _27, move _29) -> bb16; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb11: {
        _31 = &_32;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _34 = _49;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _34);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_30.0: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_30.1: &isize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = (*_35);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = const 5_isize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = Eq(move _39, move _40);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _37 = Not(move _38);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb13, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _41 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<isize, isize>(move _43, move _44, move _46, move _48) -> bb16; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb13: {
        _51 = const false;               // scope 0 at ui/moves/move-3-unique.rs:25:1: 25:2
        return;                          // scope 0 at ui/moves/move-3-unique.rs:25:2: 25:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/moves/move-3-unique.rs:19:1: 25:2
    }

    bb15 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/moves/move-3-unique.rs:25:1: 25:2
    }

    bb16 (cleanup): {
        switchInt(_51) -> [0: bb14, otherwise: bb15]; // scope 0 at ui/moves/move-3-unique.rs:25:1: 25:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/moves/move-3-unique.rs:24:32: 24:33

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/moves/move-3-unique.rs:24:32: 24:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/moves/move-3-unique.rs:22:43: 22:44

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/moves/move-3-unique.rs:22:43: 22:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
