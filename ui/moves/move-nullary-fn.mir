// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f2(_1: F) -> () {
    debug _thing => _1;                  // in scope 0 at ui/moves/move-nullary-fn.rs:5:10: 5:16
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-nullary-fn.rs:5:21: 5:21

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/moves/move-nullary-fn.rs:5:41: 5:42
    }

    bb1: {
        return;                          // scope 0 at ui/moves/move-nullary-fn.rs:5:42: 5:42
    }
}

fn f(_1: F) -> () {
    debug thing => _1;                   // in scope 0 at ui/moves/move-nullary-fn.rs:7:9: 7:14
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-nullary-fn.rs:7:19: 7:19
    let _2: ();                          // in scope 0 at ui/moves/move-nullary-fn.rs:8:5: 8:14
    let mut _3: F;                       // in scope 0 at ui/moves/move-nullary-fn.rs:8:8: 8:13

    bb0: {
        _3 = move _1;                    // scope 0 at ui/moves/move-nullary-fn.rs:8:8: 8:13
        _2 = f2::<F>(move _3) -> bb1;    // scope 0 at ui/moves/move-nullary-fn.rs:8:5: 8:14
                                         // mir::Constant
                                         // + span: ui/moves/move-nullary-fn.rs:8:5: 8:7
                                         // + literal: Const { ty: fn(F) {f2::<F>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/moves/move-nullary-fn.rs:9:2: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-nullary-fn.rs:11:15: 11:15
    let _1: ();                          // in scope 0 at ui/moves/move-nullary-fn.rs:12:5: 12:13
    let mut _2: [closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]; // in scope 0 at ui/moves/move-nullary-fn.rs:12:7: 12:12

    bb0: {
        _1 = f::<[closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]>(move _2) -> bb1; // scope 0 at ui/moves/move-nullary-fn.rs:12:5: 12:13
                                         // mir::Constant
                                         // + span: ui/moves/move-nullary-fn.rs:12:5: 12:6
                                         // + literal: Const { ty: fn([closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]) {f::<[closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/moves/move-nullary-fn.rs:13:2: 13:2
    }
}

fn main::{closure#0}(_1: [closure@ui/moves/move-nullary-fn.rs:12:7: 12:9]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/move-nullary-fn.rs:12:10: 12:10

    bb0: {
        return;                          // scope 0 at ui/moves/move-nullary-fn.rs:12:12: 12:12
    }
}
