// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:7:15: 7:15
    let _1: std::string::String;         // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:9: 8:10
    let mut _2: &str;                    // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:13: 8:39
    let _3: &str;                        // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:13: 8:27
    let _4: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:9:5: 11:14
    let mut _5: std::thread::JoinHandle<()>; // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:9:5: 11:7
    let mut _6: [closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25]; // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:9:19: 11:6
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/moves/moves-based-on-type-capture-clause.rs:8:9: 8:10
    }

    bb0: {
        _3 = const "Hello world!";       // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:13: 8:27
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:8:13: 8:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:13: 8:39
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:13: 8:39
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:8:28: 8:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = [closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25] { x: move _1 }; // scope 1 at ui/moves/moves-based-on-type-capture-clause.rs:9:19: 11:6
                                         // closure
                                         // + def_id: DefId(0:5 ~ moves_based_on_type_capture_clause[63d0]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::string::String,),
                                         // ]
        _5 = spawn::<[closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25], ()>(move _6) -> bb2; // scope 1 at ui/moves/moves-based-on-type-capture-clause.rs:9:5: 11:7
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:9:5: 9:18
                                         // + literal: Const { ty: fn([closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25]) -> JoinHandle<()> {spawn::<[closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25], ()>}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = JoinHandle::<()>::join(move _5) -> bb3; // scope 1 at ui/moves/moves-based-on-type-capture-clause.rs:9:5: 11:14
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:11:8: 11:12
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 1 at ui/moves/moves-based-on-type-capture-clause.rs:11:14: 11:15
    }

    bb4: {
        return;                          // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:12:2: 12:2
    }
}

fn main::{closure#0}(_1: [closure@ui/moves/moves-based-on-type-capture-clause.rs:9:19: 9:25]) -> () {
    debug x => (_1.0: std::string::String); // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:8:9: 8:10
    let mut _0: ();                      // return place in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:9:26: 9:26
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
    let mut _5: &[&str; 2];              // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
    let _6: &[&str; 2];                  // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
    let mut _12: &std::string::String;   // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
    let _13: &std::string::String;       // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
    let mut _14: &[&str; 2];             // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22

    bb0: {
        _14 = const _;                   // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _6 = _14;                        // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
        _5 = _6;                         // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
        _13 = &(_1.0: std::string::String); // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
        _12 = _13;                       // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _12) -> [return: bb1, unwind: bb5]; // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:10:24: 10:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:11:5: 11:6
    }

    bb4: {
        return;                          // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:11:6: 11:6
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:11:5: 11:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:9:19: 11:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
    let mut _1: [&str; 2];               // in scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
        return;                          // scope 0 at ui/moves/moves-based-on-type-capture-clause.rs:10:18: 10:22
    }
}
