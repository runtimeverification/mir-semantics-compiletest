// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/overloaded/overloaded-calls-param-vtables.rs:14:1: 14:52>::call(_1: &G<A>, _2: (A,)) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let _3: A;
    scope 1 {
        debug arg => _3;
    }

    bb0: {
        _3 = move (_2.0: A);
        _0 = <A as Add<i32>>::add(move _3, const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-param-vtables.rs:20:1: 20:55>::call_mut(_1: &mut G<A>, _2: (A,)) -> i32 {
    debug self => _1;
    debug args => _2;
    let mut _0: i32;
    let mut _3: &G<A>;

    bb0: {
        _3 = &(*_1);
        _0 = <G<A> as Fn<(A,)>>::call(move _3, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/overloaded/overloaded-calls-param-vtables.rs:24:1: 24:56>::call_once(_1: G<A>, _2: (A,)) -> i32 {
    debug self => const ZeroSized: G<A>;
    debug args => _2;
    let mut _0: i32;
    let mut _3: &G<A>;

    bb0: {
        _3 = &_1;
        _0 = <G<A> as Fn<(A,)>>::call(move _3, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (i32,);
    let mut _3: &G<i32>;

    bb0: {
        _3 = const _;
        _2 = (const 1_i32,);
        _1 = <G<i32> as Fn<(i32,)>>::call(_3, move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &G<i32> = {
    let mut _0: &G<i32>;
    let mut _1: G<i32>;
    let mut _2: std::marker::PhantomData<i32>;

    bb0: {
        _2 = PhantomData::<i32>;
        _1 = G::<i32>(move _2);
        _0 = &_1;
        return;
    }
}

fn G(_1: PhantomData<A>) -> G<A> {
    let mut _0: G<A>;

    bb0: {
        _0 = G::<A>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn G(_1: PhantomData<A>) -> G<A> {
    let mut _0: G<A>;

    bb0: {
        _0 = G::<A>(move _1);
        return;
    }
}
